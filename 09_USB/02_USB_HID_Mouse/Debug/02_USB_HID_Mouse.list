
02_USB_HID_Mouse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006af8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08006c80  08006c80  00016c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d08  08006d08  00020174  2**0
                  CONTENTS
  4 .ARM          00000000  08006d08  08006d08  00020174  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006d08  08006d08  00020174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d08  08006d08  00016d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d0c  08006d0c  00016d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  08006d10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a18  20000174  08006e84  00020174  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b8c  08006e84  00020b8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef25  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b46  00000000  00000000  0002f0c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d38  00000000  00000000  00031c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf0  00000000  00000000  00032948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027b4e  00000000  00000000  00033538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fc95  00000000  00000000  0005b086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5e02  00000000  00000000  0006ad1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00150b1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003454  00000000  00000000  00150b70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000174 	.word	0x20000174
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006c68 	.word	0x08006c68

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000178 	.word	0x20000178
 80001c4:	08006c68 	.word	0x08006c68

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 f92d 	bl	800042a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f81e 	bl	8000210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f86c 	bl	80002b0 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80001d8:	f005 ffb0 	bl	800613c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  buffer[0] = 0x00;
 80001dc:	4b0a      	ldr	r3, [pc, #40]	; (8000208 <main+0x40>)
 80001de:	2200      	movs	r2, #0
 80001e0:	701a      	strb	r2, [r3, #0]
  buffer[1] = 0x10;
 80001e2:	4b09      	ldr	r3, [pc, #36]	; (8000208 <main+0x40>)
 80001e4:	2210      	movs	r2, #16
 80001e6:	705a      	strb	r2, [r3, #1]
  buffer[2] = 0x00;
 80001e8:	4b07      	ldr	r3, [pc, #28]	; (8000208 <main+0x40>)
 80001ea:	2200      	movs	r2, #0
 80001ec:	709a      	strb	r2, [r3, #2]
  buffer[3] = 0x00;
 80001ee:	4b06      	ldr	r3, [pc, #24]	; (8000208 <main+0x40>)
 80001f0:	2200      	movs	r2, #0
 80001f2:	70da      	strb	r2, [r3, #3]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  USBD_HID_SendReport(&hUsbDeviceFS, buffer, 4);
 80001f4:	2204      	movs	r2, #4
 80001f6:	4904      	ldr	r1, [pc, #16]	; (8000208 <main+0x40>)
 80001f8:	4804      	ldr	r0, [pc, #16]	; (800020c <main+0x44>)
 80001fa:	f004 fdaf 	bl	8004d5c <USBD_HID_SendReport>
	  HAL_Delay(100);
 80001fe:	2064      	movs	r0, #100	; 0x64
 8000200:	f000 f988 	bl	8000514 <HAL_Delay>
	  USBD_HID_SendReport(&hUsbDeviceFS, buffer, 4);
 8000204:	e7f6      	b.n	80001f4 <main+0x2c>
 8000206:	bf00      	nop
 8000208:	20000190 	.word	0x20000190
 800020c:	2000019c 	.word	0x2000019c

08000210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b096      	sub	sp, #88	; 0x58
 8000214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000216:	f107 0314 	add.w	r3, r7, #20
 800021a:	2244      	movs	r2, #68	; 0x44
 800021c:	2100      	movs	r1, #0
 800021e:	4618      	mov	r0, r3
 8000220:	f006 fd1a 	bl	8006c58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000224:	463b      	mov	r3, r7
 8000226:	2200      	movs	r2, #0
 8000228:	601a      	str	r2, [r3, #0]
 800022a:	605a      	str	r2, [r3, #4]
 800022c:	609a      	str	r2, [r3, #8]
 800022e:	60da      	str	r2, [r3, #12]
 8000230:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000232:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000236:	f001 fe03 	bl	8001e40 <HAL_PWREx_ControlVoltageScaling>
 800023a:	4603      	mov	r3, r0
 800023c:	2b00      	cmp	r3, #0
 800023e:	d001      	beq.n	8000244 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000240:	f000 f85a 	bl	80002f8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000244:	2301      	movs	r3, #1
 8000246:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000248:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800024c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800024e:	2302      	movs	r3, #2
 8000250:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000252:	2303      	movs	r3, #3
 8000254:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000256:	2301      	movs	r3, #1
 8000258:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 12;
 800025a:	230c      	movs	r3, #12
 800025c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800025e:	2307      	movs	r3, #7
 8000260:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000262:	2302      	movs	r3, #2
 8000264:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000266:	2302      	movs	r3, #2
 8000268:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800026a:	f107 0314 	add.w	r3, r7, #20
 800026e:	4618      	mov	r0, r3
 8000270:	f001 fe4c 	bl	8001f0c <HAL_RCC_OscConfig>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800027a:	f000 f83d 	bl	80002f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800027e:	230f      	movs	r3, #15
 8000280:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000282:	2303      	movs	r3, #3
 8000284:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000286:	2300      	movs	r3, #0
 8000288:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800028a:	2300      	movs	r3, #0
 800028c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800028e:	2300      	movs	r3, #0
 8000290:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000292:	463b      	mov	r3, r7
 8000294:	2102      	movs	r1, #2
 8000296:	4618      	mov	r0, r3
 8000298:	f002 fa14 	bl	80026c4 <HAL_RCC_ClockConfig>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d001      	beq.n	80002a6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80002a2:	f000 f829 	bl	80002f8 <Error_Handler>
  }
}
 80002a6:	bf00      	nop
 80002a8:	3758      	adds	r7, #88	; 0x58
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
	...

080002b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80002b6:	4b0f      	ldr	r3, [pc, #60]	; (80002f4 <MX_GPIO_Init+0x44>)
 80002b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ba:	4a0e      	ldr	r2, [pc, #56]	; (80002f4 <MX_GPIO_Init+0x44>)
 80002bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002c2:	4b0c      	ldr	r3, [pc, #48]	; (80002f4 <MX_GPIO_Init+0x44>)
 80002c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002ca:	607b      	str	r3, [r7, #4]
 80002cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002ce:	4b09      	ldr	r3, [pc, #36]	; (80002f4 <MX_GPIO_Init+0x44>)
 80002d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002d2:	4a08      	ldr	r2, [pc, #32]	; (80002f4 <MX_GPIO_Init+0x44>)
 80002d4:	f043 0301 	orr.w	r3, r3, #1
 80002d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002da:	4b06      	ldr	r3, [pc, #24]	; (80002f4 <MX_GPIO_Init+0x44>)
 80002dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002de:	f003 0301 	and.w	r3, r3, #1
 80002e2:	603b      	str	r3, [r7, #0]
 80002e4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80002e6:	bf00      	nop
 80002e8:	370c      	adds	r7, #12
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	40021000 	.word	0x40021000

080002f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002fc:	b672      	cpsid	i
}
 80002fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000300:	e7fe      	b.n	8000300 <Error_Handler+0x8>
	...

08000304 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000304:	b480      	push	{r7}
 8000306:	b083      	sub	sp, #12
 8000308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800030a:	4b0f      	ldr	r3, [pc, #60]	; (8000348 <HAL_MspInit+0x44>)
 800030c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800030e:	4a0e      	ldr	r2, [pc, #56]	; (8000348 <HAL_MspInit+0x44>)
 8000310:	f043 0301 	orr.w	r3, r3, #1
 8000314:	6613      	str	r3, [r2, #96]	; 0x60
 8000316:	4b0c      	ldr	r3, [pc, #48]	; (8000348 <HAL_MspInit+0x44>)
 8000318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800031a:	f003 0301 	and.w	r3, r3, #1
 800031e:	607b      	str	r3, [r7, #4]
 8000320:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000322:	4b09      	ldr	r3, [pc, #36]	; (8000348 <HAL_MspInit+0x44>)
 8000324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000326:	4a08      	ldr	r2, [pc, #32]	; (8000348 <HAL_MspInit+0x44>)
 8000328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800032c:	6593      	str	r3, [r2, #88]	; 0x58
 800032e:	4b06      	ldr	r3, [pc, #24]	; (8000348 <HAL_MspInit+0x44>)
 8000330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000336:	603b      	str	r3, [r7, #0]
 8000338:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800033a:	bf00      	nop
 800033c:	370c      	adds	r7, #12
 800033e:	46bd      	mov	sp, r7
 8000340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	40021000 	.word	0x40021000

0800034c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000350:	e7fe      	b.n	8000350 <NMI_Handler+0x4>

08000352 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000352:	b480      	push	{r7}
 8000354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000356:	e7fe      	b.n	8000356 <HardFault_Handler+0x4>

08000358 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800035c:	e7fe      	b.n	800035c <MemManage_Handler+0x4>

0800035e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800035e:	b480      	push	{r7}
 8000360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000362:	e7fe      	b.n	8000362 <BusFault_Handler+0x4>

08000364 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000368:	e7fe      	b.n	8000368 <UsageFault_Handler+0x4>

0800036a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800036a:	b480      	push	{r7}
 800036c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800036e:	bf00      	nop
 8000370:	46bd      	mov	sp, r7
 8000372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000376:	4770      	bx	lr

08000378 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800037c:	bf00      	nop
 800037e:	46bd      	mov	sp, r7
 8000380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000384:	4770      	bx	lr

08000386 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000386:	b480      	push	{r7}
 8000388:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800038a:	bf00      	nop
 800038c:	46bd      	mov	sp, r7
 800038e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000392:	4770      	bx	lr

08000394 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000398:	f000 f89c 	bl	80004d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800039c:	bf00      	nop
 800039e:	bd80      	pop	{r7, pc}

080003a0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80003a4:	4802      	ldr	r0, [pc, #8]	; (80003b0 <OTG_FS_IRQHandler+0x10>)
 80003a6:	f000 fce8 	bl	8000d7a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80003aa:	bf00      	nop
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	2000066c 	.word	0x2000066c

080003b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80003b8:	4b06      	ldr	r3, [pc, #24]	; (80003d4 <SystemInit+0x20>)
 80003ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003be:	4a05      	ldr	r2, [pc, #20]	; (80003d4 <SystemInit+0x20>)
 80003c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80003c8:	bf00      	nop
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	e000ed00 	.word	0xe000ed00

080003d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80003d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000410 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80003dc:	f7ff ffea 	bl	80003b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003e0:	480c      	ldr	r0, [pc, #48]	; (8000414 <LoopForever+0x6>)
  ldr r1, =_edata
 80003e2:	490d      	ldr	r1, [pc, #52]	; (8000418 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003e4:	4a0d      	ldr	r2, [pc, #52]	; (800041c <LoopForever+0xe>)
  movs r3, #0
 80003e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003e8:	e002      	b.n	80003f0 <LoopCopyDataInit>

080003ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ee:	3304      	adds	r3, #4

080003f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003f4:	d3f9      	bcc.n	80003ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003f6:	4a0a      	ldr	r2, [pc, #40]	; (8000420 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003f8:	4c0a      	ldr	r4, [pc, #40]	; (8000424 <LoopForever+0x16>)
  movs r3, #0
 80003fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003fc:	e001      	b.n	8000402 <LoopFillZerobss>

080003fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000400:	3204      	adds	r2, #4

08000402 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000402:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000404:	d3fb      	bcc.n	80003fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000406:	f006 fc03 	bl	8006c10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800040a:	f7ff fedd 	bl	80001c8 <main>

0800040e <LoopForever>:

LoopForever:
    b LoopForever
 800040e:	e7fe      	b.n	800040e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000410:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000414:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000418:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 800041c:	08006d10 	.word	0x08006d10
  ldr r2, =_sbss
 8000420:	20000174 	.word	0x20000174
  ldr r4, =_ebss
 8000424:	20000b8c 	.word	0x20000b8c

08000428 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000428:	e7fe      	b.n	8000428 <ADC1_2_IRQHandler>

0800042a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800042a:	b580      	push	{r7, lr}
 800042c:	b082      	sub	sp, #8
 800042e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000430:	2300      	movs	r3, #0
 8000432:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000434:	2003      	movs	r0, #3
 8000436:	f000 f961 	bl	80006fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800043a:	2000      	movs	r0, #0
 800043c:	f000 f80e 	bl	800045c <HAL_InitTick>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d002      	beq.n	800044c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000446:	2301      	movs	r3, #1
 8000448:	71fb      	strb	r3, [r7, #7]
 800044a:	e001      	b.n	8000450 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800044c:	f7ff ff5a 	bl	8000304 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000450:	79fb      	ldrb	r3, [r7, #7]
}
 8000452:	4618      	mov	r0, r3
 8000454:	3708      	adds	r7, #8
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
	...

0800045c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b084      	sub	sp, #16
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000464:	2300      	movs	r3, #0
 8000466:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000468:	4b17      	ldr	r3, [pc, #92]	; (80004c8 <HAL_InitTick+0x6c>)
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	2b00      	cmp	r3, #0
 800046e:	d023      	beq.n	80004b8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000470:	4b16      	ldr	r3, [pc, #88]	; (80004cc <HAL_InitTick+0x70>)
 8000472:	681a      	ldr	r2, [r3, #0]
 8000474:	4b14      	ldr	r3, [pc, #80]	; (80004c8 <HAL_InitTick+0x6c>)
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	4619      	mov	r1, r3
 800047a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800047e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000482:	fbb2 f3f3 	udiv	r3, r2, r3
 8000486:	4618      	mov	r0, r3
 8000488:	f000 f96d 	bl	8000766 <HAL_SYSTICK_Config>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d10f      	bne.n	80004b2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	2b0f      	cmp	r3, #15
 8000496:	d809      	bhi.n	80004ac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000498:	2200      	movs	r2, #0
 800049a:	6879      	ldr	r1, [r7, #4]
 800049c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80004a0:	f000 f937 	bl	8000712 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80004a4:	4a0a      	ldr	r2, [pc, #40]	; (80004d0 <HAL_InitTick+0x74>)
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	6013      	str	r3, [r2, #0]
 80004aa:	e007      	b.n	80004bc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80004ac:	2301      	movs	r3, #1
 80004ae:	73fb      	strb	r3, [r7, #15]
 80004b0:	e004      	b.n	80004bc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80004b2:	2301      	movs	r3, #1
 80004b4:	73fb      	strb	r3, [r7, #15]
 80004b6:	e001      	b.n	80004bc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80004b8:	2301      	movs	r3, #1
 80004ba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80004bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80004be:	4618      	mov	r0, r3
 80004c0:	3710      	adds	r7, #16
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	20000008 	.word	0x20000008
 80004cc:	20000000 	.word	0x20000000
 80004d0:	20000004 	.word	0x20000004

080004d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80004d8:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <HAL_IncTick+0x20>)
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	461a      	mov	r2, r3
 80004de:	4b06      	ldr	r3, [pc, #24]	; (80004f8 <HAL_IncTick+0x24>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4413      	add	r3, r2
 80004e4:	4a04      	ldr	r2, [pc, #16]	; (80004f8 <HAL_IncTick+0x24>)
 80004e6:	6013      	str	r3, [r2, #0]
}
 80004e8:	bf00      	nop
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	20000008 	.word	0x20000008
 80004f8:	20000194 	.word	0x20000194

080004fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000500:	4b03      	ldr	r3, [pc, #12]	; (8000510 <HAL_GetTick+0x14>)
 8000502:	681b      	ldr	r3, [r3, #0]
}
 8000504:	4618      	mov	r0, r3
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	20000194 	.word	0x20000194

08000514 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800051c:	f7ff ffee 	bl	80004fc <HAL_GetTick>
 8000520:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800052c:	d005      	beq.n	800053a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800052e:	4b0a      	ldr	r3, [pc, #40]	; (8000558 <HAL_Delay+0x44>)
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	461a      	mov	r2, r3
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	4413      	add	r3, r2
 8000538:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800053a:	bf00      	nop
 800053c:	f7ff ffde 	bl	80004fc <HAL_GetTick>
 8000540:	4602      	mov	r2, r0
 8000542:	68bb      	ldr	r3, [r7, #8]
 8000544:	1ad3      	subs	r3, r2, r3
 8000546:	68fa      	ldr	r2, [r7, #12]
 8000548:	429a      	cmp	r2, r3
 800054a:	d8f7      	bhi.n	800053c <HAL_Delay+0x28>
  {
  }
}
 800054c:	bf00      	nop
 800054e:	bf00      	nop
 8000550:	3710      	adds	r7, #16
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	20000008 	.word	0x20000008

0800055c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	f003 0307 	and.w	r3, r3, #7
 800056a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800056c:	4b0c      	ldr	r3, [pc, #48]	; (80005a0 <__NVIC_SetPriorityGrouping+0x44>)
 800056e:	68db      	ldr	r3, [r3, #12]
 8000570:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000572:	68ba      	ldr	r2, [r7, #8]
 8000574:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000578:	4013      	ands	r3, r2
 800057a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000584:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000588:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800058c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800058e:	4a04      	ldr	r2, [pc, #16]	; (80005a0 <__NVIC_SetPriorityGrouping+0x44>)
 8000590:	68bb      	ldr	r3, [r7, #8]
 8000592:	60d3      	str	r3, [r2, #12]
}
 8000594:	bf00      	nop
 8000596:	3714      	adds	r7, #20
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr
 80005a0:	e000ed00 	.word	0xe000ed00

080005a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005a8:	4b04      	ldr	r3, [pc, #16]	; (80005bc <__NVIC_GetPriorityGrouping+0x18>)
 80005aa:	68db      	ldr	r3, [r3, #12]
 80005ac:	0a1b      	lsrs	r3, r3, #8
 80005ae:	f003 0307 	and.w	r3, r3, #7
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr
 80005bc:	e000ed00 	.word	0xe000ed00

080005c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	db0b      	blt.n	80005ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	f003 021f 	and.w	r2, r3, #31
 80005d8:	4907      	ldr	r1, [pc, #28]	; (80005f8 <__NVIC_EnableIRQ+0x38>)
 80005da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005de:	095b      	lsrs	r3, r3, #5
 80005e0:	2001      	movs	r0, #1
 80005e2:	fa00 f202 	lsl.w	r2, r0, r2
 80005e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80005ea:	bf00      	nop
 80005ec:	370c      	adds	r7, #12
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	e000e100 	.word	0xe000e100

080005fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	6039      	str	r1, [r7, #0]
 8000606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800060c:	2b00      	cmp	r3, #0
 800060e:	db0a      	blt.n	8000626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	b2da      	uxtb	r2, r3
 8000614:	490c      	ldr	r1, [pc, #48]	; (8000648 <__NVIC_SetPriority+0x4c>)
 8000616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800061a:	0112      	lsls	r2, r2, #4
 800061c:	b2d2      	uxtb	r2, r2
 800061e:	440b      	add	r3, r1
 8000620:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000624:	e00a      	b.n	800063c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	b2da      	uxtb	r2, r3
 800062a:	4908      	ldr	r1, [pc, #32]	; (800064c <__NVIC_SetPriority+0x50>)
 800062c:	79fb      	ldrb	r3, [r7, #7]
 800062e:	f003 030f 	and.w	r3, r3, #15
 8000632:	3b04      	subs	r3, #4
 8000634:	0112      	lsls	r2, r2, #4
 8000636:	b2d2      	uxtb	r2, r2
 8000638:	440b      	add	r3, r1
 800063a:	761a      	strb	r2, [r3, #24]
}
 800063c:	bf00      	nop
 800063e:	370c      	adds	r7, #12
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr
 8000648:	e000e100 	.word	0xe000e100
 800064c:	e000ed00 	.word	0xe000ed00

08000650 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000650:	b480      	push	{r7}
 8000652:	b089      	sub	sp, #36	; 0x24
 8000654:	af00      	add	r7, sp, #0
 8000656:	60f8      	str	r0, [r7, #12]
 8000658:	60b9      	str	r1, [r7, #8]
 800065a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	f003 0307 	and.w	r3, r3, #7
 8000662:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000664:	69fb      	ldr	r3, [r7, #28]
 8000666:	f1c3 0307 	rsb	r3, r3, #7
 800066a:	2b04      	cmp	r3, #4
 800066c:	bf28      	it	cs
 800066e:	2304      	movcs	r3, #4
 8000670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000672:	69fb      	ldr	r3, [r7, #28]
 8000674:	3304      	adds	r3, #4
 8000676:	2b06      	cmp	r3, #6
 8000678:	d902      	bls.n	8000680 <NVIC_EncodePriority+0x30>
 800067a:	69fb      	ldr	r3, [r7, #28]
 800067c:	3b03      	subs	r3, #3
 800067e:	e000      	b.n	8000682 <NVIC_EncodePriority+0x32>
 8000680:	2300      	movs	r3, #0
 8000682:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000684:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000688:	69bb      	ldr	r3, [r7, #24]
 800068a:	fa02 f303 	lsl.w	r3, r2, r3
 800068e:	43da      	mvns	r2, r3
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	401a      	ands	r2, r3
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000698:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	fa01 f303 	lsl.w	r3, r1, r3
 80006a2:	43d9      	mvns	r1, r3
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a8:	4313      	orrs	r3, r2
         );
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	3724      	adds	r7, #36	; 0x24
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
	...

080006b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	3b01      	subs	r3, #1
 80006c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006c8:	d301      	bcc.n	80006ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006ca:	2301      	movs	r3, #1
 80006cc:	e00f      	b.n	80006ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006ce:	4a0a      	ldr	r2, [pc, #40]	; (80006f8 <SysTick_Config+0x40>)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	3b01      	subs	r3, #1
 80006d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006d6:	210f      	movs	r1, #15
 80006d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006dc:	f7ff ff8e 	bl	80005fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006e0:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <SysTick_Config+0x40>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006e6:	4b04      	ldr	r3, [pc, #16]	; (80006f8 <SysTick_Config+0x40>)
 80006e8:	2207      	movs	r2, #7
 80006ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006ec:	2300      	movs	r3, #0
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	e000e010 	.word	0xe000e010

080006fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000704:	6878      	ldr	r0, [r7, #4]
 8000706:	f7ff ff29 	bl	800055c <__NVIC_SetPriorityGrouping>
}
 800070a:	bf00      	nop
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}

08000712 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000712:	b580      	push	{r7, lr}
 8000714:	b086      	sub	sp, #24
 8000716:	af00      	add	r7, sp, #0
 8000718:	4603      	mov	r3, r0
 800071a:	60b9      	str	r1, [r7, #8]
 800071c:	607a      	str	r2, [r7, #4]
 800071e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000720:	2300      	movs	r3, #0
 8000722:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000724:	f7ff ff3e 	bl	80005a4 <__NVIC_GetPriorityGrouping>
 8000728:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800072a:	687a      	ldr	r2, [r7, #4]
 800072c:	68b9      	ldr	r1, [r7, #8]
 800072e:	6978      	ldr	r0, [r7, #20]
 8000730:	f7ff ff8e 	bl	8000650 <NVIC_EncodePriority>
 8000734:	4602      	mov	r2, r0
 8000736:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800073a:	4611      	mov	r1, r2
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff ff5d 	bl	80005fc <__NVIC_SetPriority>
}
 8000742:	bf00      	nop
 8000744:	3718      	adds	r7, #24
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}

0800074a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800074a:	b580      	push	{r7, lr}
 800074c:	b082      	sub	sp, #8
 800074e:	af00      	add	r7, sp, #0
 8000750:	4603      	mov	r3, r0
 8000752:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000758:	4618      	mov	r0, r3
 800075a:	f7ff ff31 	bl	80005c0 <__NVIC_EnableIRQ>
}
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}

08000766 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000766:	b580      	push	{r7, lr}
 8000768:	b082      	sub	sp, #8
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f7ff ffa2 	bl	80006b8 <SysTick_Config>
 8000774:	4603      	mov	r3, r0
}
 8000776:	4618      	mov	r0, r3
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
	...

08000780 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000780:	b480      	push	{r7}
 8000782:	b087      	sub	sp, #28
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800078e:	e17f      	b.n	8000a90 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	681a      	ldr	r2, [r3, #0]
 8000794:	2101      	movs	r1, #1
 8000796:	697b      	ldr	r3, [r7, #20]
 8000798:	fa01 f303 	lsl.w	r3, r1, r3
 800079c:	4013      	ands	r3, r2
 800079e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	f000 8171 	beq.w	8000a8a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	685b      	ldr	r3, [r3, #4]
 80007ac:	f003 0303 	and.w	r3, r3, #3
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d005      	beq.n	80007c0 <HAL_GPIO_Init+0x40>
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	685b      	ldr	r3, [r3, #4]
 80007b8:	f003 0303 	and.w	r3, r3, #3
 80007bc:	2b02      	cmp	r3, #2
 80007be:	d130      	bne.n	8000822 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	689b      	ldr	r3, [r3, #8]
 80007c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80007c6:	697b      	ldr	r3, [r7, #20]
 80007c8:	005b      	lsls	r3, r3, #1
 80007ca:	2203      	movs	r2, #3
 80007cc:	fa02 f303 	lsl.w	r3, r2, r3
 80007d0:	43db      	mvns	r3, r3
 80007d2:	693a      	ldr	r2, [r7, #16]
 80007d4:	4013      	ands	r3, r2
 80007d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	68da      	ldr	r2, [r3, #12]
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	005b      	lsls	r3, r3, #1
 80007e0:	fa02 f303 	lsl.w	r3, r2, r3
 80007e4:	693a      	ldr	r2, [r7, #16]
 80007e6:	4313      	orrs	r3, r2
 80007e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	693a      	ldr	r2, [r7, #16]
 80007ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	685b      	ldr	r3, [r3, #4]
 80007f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80007f6:	2201      	movs	r2, #1
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	fa02 f303 	lsl.w	r3, r2, r3
 80007fe:	43db      	mvns	r3, r3
 8000800:	693a      	ldr	r2, [r7, #16]
 8000802:	4013      	ands	r3, r2
 8000804:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	685b      	ldr	r3, [r3, #4]
 800080a:	091b      	lsrs	r3, r3, #4
 800080c:	f003 0201 	and.w	r2, r3, #1
 8000810:	697b      	ldr	r3, [r7, #20]
 8000812:	fa02 f303 	lsl.w	r3, r2, r3
 8000816:	693a      	ldr	r2, [r7, #16]
 8000818:	4313      	orrs	r3, r2
 800081a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	693a      	ldr	r2, [r7, #16]
 8000820:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	685b      	ldr	r3, [r3, #4]
 8000826:	f003 0303 	and.w	r3, r3, #3
 800082a:	2b03      	cmp	r3, #3
 800082c:	d118      	bne.n	8000860 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000832:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000834:	2201      	movs	r2, #1
 8000836:	697b      	ldr	r3, [r7, #20]
 8000838:	fa02 f303 	lsl.w	r3, r2, r3
 800083c:	43db      	mvns	r3, r3
 800083e:	693a      	ldr	r2, [r7, #16]
 8000840:	4013      	ands	r3, r2
 8000842:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	08db      	lsrs	r3, r3, #3
 800084a:	f003 0201 	and.w	r2, r3, #1
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	fa02 f303 	lsl.w	r3, r2, r3
 8000854:	693a      	ldr	r2, [r7, #16]
 8000856:	4313      	orrs	r3, r2
 8000858:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	693a      	ldr	r2, [r7, #16]
 800085e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	685b      	ldr	r3, [r3, #4]
 8000864:	f003 0303 	and.w	r3, r3, #3
 8000868:	2b03      	cmp	r3, #3
 800086a:	d017      	beq.n	800089c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	68db      	ldr	r3, [r3, #12]
 8000870:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	005b      	lsls	r3, r3, #1
 8000876:	2203      	movs	r2, #3
 8000878:	fa02 f303 	lsl.w	r3, r2, r3
 800087c:	43db      	mvns	r3, r3
 800087e:	693a      	ldr	r2, [r7, #16]
 8000880:	4013      	ands	r3, r2
 8000882:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	689a      	ldr	r2, [r3, #8]
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	005b      	lsls	r3, r3, #1
 800088c:	fa02 f303 	lsl.w	r3, r2, r3
 8000890:	693a      	ldr	r2, [r7, #16]
 8000892:	4313      	orrs	r3, r2
 8000894:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	693a      	ldr	r2, [r7, #16]
 800089a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	f003 0303 	and.w	r3, r3, #3
 80008a4:	2b02      	cmp	r3, #2
 80008a6:	d123      	bne.n	80008f0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	08da      	lsrs	r2, r3, #3
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	3208      	adds	r2, #8
 80008b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	f003 0307 	and.w	r3, r3, #7
 80008bc:	009b      	lsls	r3, r3, #2
 80008be:	220f      	movs	r2, #15
 80008c0:	fa02 f303 	lsl.w	r3, r2, r3
 80008c4:	43db      	mvns	r3, r3
 80008c6:	693a      	ldr	r2, [r7, #16]
 80008c8:	4013      	ands	r3, r2
 80008ca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	691a      	ldr	r2, [r3, #16]
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	f003 0307 	and.w	r3, r3, #7
 80008d6:	009b      	lsls	r3, r3, #2
 80008d8:	fa02 f303 	lsl.w	r3, r2, r3
 80008dc:	693a      	ldr	r2, [r7, #16]
 80008de:	4313      	orrs	r3, r2
 80008e0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	08da      	lsrs	r2, r3, #3
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	3208      	adds	r2, #8
 80008ea:	6939      	ldr	r1, [r7, #16]
 80008ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	005b      	lsls	r3, r3, #1
 80008fa:	2203      	movs	r2, #3
 80008fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000900:	43db      	mvns	r3, r3
 8000902:	693a      	ldr	r2, [r7, #16]
 8000904:	4013      	ands	r3, r2
 8000906:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	f003 0203 	and.w	r2, r3, #3
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	005b      	lsls	r3, r3, #1
 8000914:	fa02 f303 	lsl.w	r3, r2, r3
 8000918:	693a      	ldr	r2, [r7, #16]
 800091a:	4313      	orrs	r3, r2
 800091c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	693a      	ldr	r2, [r7, #16]
 8000922:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800092c:	2b00      	cmp	r3, #0
 800092e:	f000 80ac 	beq.w	8000a8a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000932:	4b5f      	ldr	r3, [pc, #380]	; (8000ab0 <HAL_GPIO_Init+0x330>)
 8000934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000936:	4a5e      	ldr	r2, [pc, #376]	; (8000ab0 <HAL_GPIO_Init+0x330>)
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	6613      	str	r3, [r2, #96]	; 0x60
 800093e:	4b5c      	ldr	r3, [pc, #368]	; (8000ab0 <HAL_GPIO_Init+0x330>)
 8000940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800094a:	4a5a      	ldr	r2, [pc, #360]	; (8000ab4 <HAL_GPIO_Init+0x334>)
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	089b      	lsrs	r3, r3, #2
 8000950:	3302      	adds	r3, #2
 8000952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000956:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	f003 0303 	and.w	r3, r3, #3
 800095e:	009b      	lsls	r3, r3, #2
 8000960:	220f      	movs	r2, #15
 8000962:	fa02 f303 	lsl.w	r3, r2, r3
 8000966:	43db      	mvns	r3, r3
 8000968:	693a      	ldr	r2, [r7, #16]
 800096a:	4013      	ands	r3, r2
 800096c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000974:	d025      	beq.n	80009c2 <HAL_GPIO_Init+0x242>
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4a4f      	ldr	r2, [pc, #316]	; (8000ab8 <HAL_GPIO_Init+0x338>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d01f      	beq.n	80009be <HAL_GPIO_Init+0x23e>
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4a4e      	ldr	r2, [pc, #312]	; (8000abc <HAL_GPIO_Init+0x33c>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d019      	beq.n	80009ba <HAL_GPIO_Init+0x23a>
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4a4d      	ldr	r2, [pc, #308]	; (8000ac0 <HAL_GPIO_Init+0x340>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d013      	beq.n	80009b6 <HAL_GPIO_Init+0x236>
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4a4c      	ldr	r2, [pc, #304]	; (8000ac4 <HAL_GPIO_Init+0x344>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d00d      	beq.n	80009b2 <HAL_GPIO_Init+0x232>
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4a4b      	ldr	r2, [pc, #300]	; (8000ac8 <HAL_GPIO_Init+0x348>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d007      	beq.n	80009ae <HAL_GPIO_Init+0x22e>
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4a4a      	ldr	r2, [pc, #296]	; (8000acc <HAL_GPIO_Init+0x34c>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d101      	bne.n	80009aa <HAL_GPIO_Init+0x22a>
 80009a6:	2306      	movs	r3, #6
 80009a8:	e00c      	b.n	80009c4 <HAL_GPIO_Init+0x244>
 80009aa:	2307      	movs	r3, #7
 80009ac:	e00a      	b.n	80009c4 <HAL_GPIO_Init+0x244>
 80009ae:	2305      	movs	r3, #5
 80009b0:	e008      	b.n	80009c4 <HAL_GPIO_Init+0x244>
 80009b2:	2304      	movs	r3, #4
 80009b4:	e006      	b.n	80009c4 <HAL_GPIO_Init+0x244>
 80009b6:	2303      	movs	r3, #3
 80009b8:	e004      	b.n	80009c4 <HAL_GPIO_Init+0x244>
 80009ba:	2302      	movs	r3, #2
 80009bc:	e002      	b.n	80009c4 <HAL_GPIO_Init+0x244>
 80009be:	2301      	movs	r3, #1
 80009c0:	e000      	b.n	80009c4 <HAL_GPIO_Init+0x244>
 80009c2:	2300      	movs	r3, #0
 80009c4:	697a      	ldr	r2, [r7, #20]
 80009c6:	f002 0203 	and.w	r2, r2, #3
 80009ca:	0092      	lsls	r2, r2, #2
 80009cc:	4093      	lsls	r3, r2
 80009ce:	693a      	ldr	r2, [r7, #16]
 80009d0:	4313      	orrs	r3, r2
 80009d2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80009d4:	4937      	ldr	r1, [pc, #220]	; (8000ab4 <HAL_GPIO_Init+0x334>)
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	089b      	lsrs	r3, r3, #2
 80009da:	3302      	adds	r3, #2
 80009dc:	693a      	ldr	r2, [r7, #16]
 80009de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80009e2:	4b3b      	ldr	r3, [pc, #236]	; (8000ad0 <HAL_GPIO_Init+0x350>)
 80009e4:	689b      	ldr	r3, [r3, #8]
 80009e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	43db      	mvns	r3, r3
 80009ec:	693a      	ldr	r2, [r7, #16]
 80009ee:	4013      	ands	r3, r2
 80009f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d003      	beq.n	8000a06 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	4313      	orrs	r3, r2
 8000a04:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000a06:	4a32      	ldr	r2, [pc, #200]	; (8000ad0 <HAL_GPIO_Init+0x350>)
 8000a08:	693b      	ldr	r3, [r7, #16]
 8000a0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000a0c:	4b30      	ldr	r3, [pc, #192]	; (8000ad0 <HAL_GPIO_Init+0x350>)
 8000a0e:	68db      	ldr	r3, [r3, #12]
 8000a10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	43db      	mvns	r3, r3
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	4013      	ands	r3, r2
 8000a1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d003      	beq.n	8000a30 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000a28:	693a      	ldr	r2, [r7, #16]
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000a30:	4a27      	ldr	r2, [pc, #156]	; (8000ad0 <HAL_GPIO_Init+0x350>)
 8000a32:	693b      	ldr	r3, [r7, #16]
 8000a34:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000a36:	4b26      	ldr	r3, [pc, #152]	; (8000ad0 <HAL_GPIO_Init+0x350>)
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	43db      	mvns	r3, r3
 8000a40:	693a      	ldr	r2, [r7, #16]
 8000a42:	4013      	ands	r3, r2
 8000a44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d003      	beq.n	8000a5a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000a52:	693a      	ldr	r2, [r7, #16]
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	4313      	orrs	r3, r2
 8000a58:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000a5a:	4a1d      	ldr	r2, [pc, #116]	; (8000ad0 <HAL_GPIO_Init+0x350>)
 8000a5c:	693b      	ldr	r3, [r7, #16]
 8000a5e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000a60:	4b1b      	ldr	r3, [pc, #108]	; (8000ad0 <HAL_GPIO_Init+0x350>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	43db      	mvns	r3, r3
 8000a6a:	693a      	ldr	r2, [r7, #16]
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d003      	beq.n	8000a84 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000a7c:	693a      	ldr	r2, [r7, #16]
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000a84:	4a12      	ldr	r2, [pc, #72]	; (8000ad0 <HAL_GPIO_Init+0x350>)
 8000a86:	693b      	ldr	r3, [r7, #16]
 8000a88:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	fa22 f303 	lsr.w	r3, r2, r3
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	f47f ae78 	bne.w	8000790 <HAL_GPIO_Init+0x10>
  }
}
 8000aa0:	bf00      	nop
 8000aa2:	bf00      	nop
 8000aa4:	371c      	adds	r7, #28
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	40021000 	.word	0x40021000
 8000ab4:	40010000 	.word	0x40010000
 8000ab8:	48000400 	.word	0x48000400
 8000abc:	48000800 	.word	0x48000800
 8000ac0:	48000c00 	.word	0x48000c00
 8000ac4:	48001000 	.word	0x48001000
 8000ac8:	48001400 	.word	0x48001400
 8000acc:	48001800 	.word	0x48001800
 8000ad0:	40010400 	.word	0x40010400

08000ad4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ad6:	b08f      	sub	sp, #60	; 0x3c
 8000ad8:	af0a      	add	r7, sp, #40	; 0x28
 8000ada:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d101      	bne.n	8000ae6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e116      	b.n	8000d14 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d106      	bne.n	8000b06 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2200      	movs	r2, #0
 8000afc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f005 fc63 	bl	80063cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2203      	movs	r2, #3
 8000b0a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000b0e:	68bb      	ldr	r3, [r7, #8]
 8000b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d102      	bne.n	8000b20 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4618      	mov	r0, r3
 8000b26:	f002 fd5a 	bl	80035de <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	603b      	str	r3, [r7, #0]
 8000b30:	687e      	ldr	r6, [r7, #4]
 8000b32:	466d      	mov	r5, sp
 8000b34:	f106 0410 	add.w	r4, r6, #16
 8000b38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b40:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000b44:	e885 0003 	stmia.w	r5, {r0, r1}
 8000b48:	1d33      	adds	r3, r6, #4
 8000b4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b4c:	6838      	ldr	r0, [r7, #0]
 8000b4e:	f002 fc6d 	bl	800342c <USB_CoreInit>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d005      	beq.n	8000b64 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2202      	movs	r2, #2
 8000b5c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000b60:	2301      	movs	r3, #1
 8000b62:	e0d7      	b.n	8000d14 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f002 fd48 	bl	8003600 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b70:	2300      	movs	r3, #0
 8000b72:	73fb      	strb	r3, [r7, #15]
 8000b74:	e04a      	b.n	8000c0c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000b76:	7bfa      	ldrb	r2, [r7, #15]
 8000b78:	6879      	ldr	r1, [r7, #4]
 8000b7a:	4613      	mov	r3, r2
 8000b7c:	00db      	lsls	r3, r3, #3
 8000b7e:	4413      	add	r3, r2
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	440b      	add	r3, r1
 8000b84:	333d      	adds	r3, #61	; 0x3d
 8000b86:	2201      	movs	r2, #1
 8000b88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000b8a:	7bfa      	ldrb	r2, [r7, #15]
 8000b8c:	6879      	ldr	r1, [r7, #4]
 8000b8e:	4613      	mov	r3, r2
 8000b90:	00db      	lsls	r3, r3, #3
 8000b92:	4413      	add	r3, r2
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	440b      	add	r3, r1
 8000b98:	333c      	adds	r3, #60	; 0x3c
 8000b9a:	7bfa      	ldrb	r2, [r7, #15]
 8000b9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000b9e:	7bfa      	ldrb	r2, [r7, #15]
 8000ba0:	7bfb      	ldrb	r3, [r7, #15]
 8000ba2:	b298      	uxth	r0, r3
 8000ba4:	6879      	ldr	r1, [r7, #4]
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	00db      	lsls	r3, r3, #3
 8000baa:	4413      	add	r3, r2
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	440b      	add	r3, r1
 8000bb0:	3344      	adds	r3, #68	; 0x44
 8000bb2:	4602      	mov	r2, r0
 8000bb4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000bb6:	7bfa      	ldrb	r2, [r7, #15]
 8000bb8:	6879      	ldr	r1, [r7, #4]
 8000bba:	4613      	mov	r3, r2
 8000bbc:	00db      	lsls	r3, r3, #3
 8000bbe:	4413      	add	r3, r2
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	440b      	add	r3, r1
 8000bc4:	3340      	adds	r3, #64	; 0x40
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000bca:	7bfa      	ldrb	r2, [r7, #15]
 8000bcc:	6879      	ldr	r1, [r7, #4]
 8000bce:	4613      	mov	r3, r2
 8000bd0:	00db      	lsls	r3, r3, #3
 8000bd2:	4413      	add	r3, r2
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	440b      	add	r3, r1
 8000bd8:	3348      	adds	r3, #72	; 0x48
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000bde:	7bfa      	ldrb	r2, [r7, #15]
 8000be0:	6879      	ldr	r1, [r7, #4]
 8000be2:	4613      	mov	r3, r2
 8000be4:	00db      	lsls	r3, r3, #3
 8000be6:	4413      	add	r3, r2
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	440b      	add	r3, r1
 8000bec:	334c      	adds	r3, #76	; 0x4c
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000bf2:	7bfa      	ldrb	r2, [r7, #15]
 8000bf4:	6879      	ldr	r1, [r7, #4]
 8000bf6:	4613      	mov	r3, r2
 8000bf8:	00db      	lsls	r3, r3, #3
 8000bfa:	4413      	add	r3, r2
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	440b      	add	r3, r1
 8000c00:	3354      	adds	r3, #84	; 0x54
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c06:	7bfb      	ldrb	r3, [r7, #15]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	73fb      	strb	r3, [r7, #15]
 8000c0c:	7bfa      	ldrb	r2, [r7, #15]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	429a      	cmp	r2, r3
 8000c14:	d3af      	bcc.n	8000b76 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c16:	2300      	movs	r3, #0
 8000c18:	73fb      	strb	r3, [r7, #15]
 8000c1a:	e044      	b.n	8000ca6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000c1c:	7bfa      	ldrb	r2, [r7, #15]
 8000c1e:	6879      	ldr	r1, [r7, #4]
 8000c20:	4613      	mov	r3, r2
 8000c22:	00db      	lsls	r3, r3, #3
 8000c24:	4413      	add	r3, r2
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	440b      	add	r3, r1
 8000c2a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8000c2e:	2200      	movs	r2, #0
 8000c30:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000c32:	7bfa      	ldrb	r2, [r7, #15]
 8000c34:	6879      	ldr	r1, [r7, #4]
 8000c36:	4613      	mov	r3, r2
 8000c38:	00db      	lsls	r3, r3, #3
 8000c3a:	4413      	add	r3, r2
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	440b      	add	r3, r1
 8000c40:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8000c44:	7bfa      	ldrb	r2, [r7, #15]
 8000c46:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000c48:	7bfa      	ldrb	r2, [r7, #15]
 8000c4a:	6879      	ldr	r1, [r7, #4]
 8000c4c:	4613      	mov	r3, r2
 8000c4e:	00db      	lsls	r3, r3, #3
 8000c50:	4413      	add	r3, r2
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	440b      	add	r3, r1
 8000c56:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000c5e:	7bfa      	ldrb	r2, [r7, #15]
 8000c60:	6879      	ldr	r1, [r7, #4]
 8000c62:	4613      	mov	r3, r2
 8000c64:	00db      	lsls	r3, r3, #3
 8000c66:	4413      	add	r3, r2
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	440b      	add	r3, r1
 8000c6c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000c74:	7bfa      	ldrb	r2, [r7, #15]
 8000c76:	6879      	ldr	r1, [r7, #4]
 8000c78:	4613      	mov	r3, r2
 8000c7a:	00db      	lsls	r3, r3, #3
 8000c7c:	4413      	add	r3, r2
 8000c7e:	009b      	lsls	r3, r3, #2
 8000c80:	440b      	add	r3, r1
 8000c82:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000c8a:	7bfa      	ldrb	r2, [r7, #15]
 8000c8c:	6879      	ldr	r1, [r7, #4]
 8000c8e:	4613      	mov	r3, r2
 8000c90:	00db      	lsls	r3, r3, #3
 8000c92:	4413      	add	r3, r2
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	440b      	add	r3, r1
 8000c98:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ca0:	7bfb      	ldrb	r3, [r7, #15]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	73fb      	strb	r3, [r7, #15]
 8000ca6:	7bfa      	ldrb	r2, [r7, #15]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d3b5      	bcc.n	8000c1c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	603b      	str	r3, [r7, #0]
 8000cb6:	687e      	ldr	r6, [r7, #4]
 8000cb8:	466d      	mov	r5, sp
 8000cba:	f106 0410 	add.w	r4, r6, #16
 8000cbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cc6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000cca:	e885 0003 	stmia.w	r5, {r0, r1}
 8000cce:	1d33      	adds	r3, r6, #4
 8000cd0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cd2:	6838      	ldr	r0, [r7, #0]
 8000cd4:	f002 fce0 	bl	8003698 <USB_DevInit>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d005      	beq.n	8000cea <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2202      	movs	r2, #2
 8000ce2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e014      	b.n	8000d14 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2200      	movs	r2, #0
 8000cee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d102      	bne.n	8000d08 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f001 f86a 	bl	8001ddc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f003 fd68 	bl	80047e2 <USB_DevDisconnect>

  return HAL_OK;
 8000d12:	2300      	movs	r3, #0
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3714      	adds	r7, #20
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d1c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d101      	bne.n	8000d38 <HAL_PCD_Start+0x1c>
 8000d34:	2302      	movs	r3, #2
 8000d36:	e01c      	b.n	8000d72 <HAL_PCD_Start+0x56>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d105      	bne.n	8000d54 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d4c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f002 fc2f 	bl	80035bc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4618      	mov	r0, r3
 8000d64:	f003 fd1c 	bl	80047a0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3710      	adds	r7, #16
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000d7a:	b590      	push	{r4, r7, lr}
 8000d7c:	b08d      	sub	sp, #52	; 0x34
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000d88:	6a3b      	ldr	r3, [r7, #32]
 8000d8a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f003 fdda 	bl	800494a <USB_GetMode>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	f040 847e 	bne.w	800169a <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4618      	mov	r0, r3
 8000da4:	f003 fd3e 	bl	8004824 <USB_ReadInterrupts>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	f000 8474 	beq.w	8001698 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	0a1b      	lsrs	r3, r3, #8
 8000dba:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f003 fd2b 	bl	8004824 <USB_ReadInterrupts>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	f003 0302 	and.w	r3, r3, #2
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d107      	bne.n	8000de8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	695a      	ldr	r2, [r3, #20]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f002 0202 	and.w	r2, r2, #2
 8000de6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f003 fd19 	bl	8004824 <USB_ReadInterrupts>
 8000df2:	4603      	mov	r3, r0
 8000df4:	f003 0310 	and.w	r3, r3, #16
 8000df8:	2b10      	cmp	r3, #16
 8000dfa:	d161      	bne.n	8000ec0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	699a      	ldr	r2, [r3, #24]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f022 0210 	bic.w	r2, r2, #16
 8000e0a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8000e0c:	6a3b      	ldr	r3, [r7, #32]
 8000e0e:	6a1b      	ldr	r3, [r3, #32]
 8000e10:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8000e12:	69bb      	ldr	r3, [r7, #24]
 8000e14:	f003 020f 	and.w	r2, r3, #15
 8000e18:	4613      	mov	r3, r2
 8000e1a:	00db      	lsls	r3, r3, #3
 8000e1c:	4413      	add	r3, r2
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8000e24:	687a      	ldr	r2, [r7, #4]
 8000e26:	4413      	add	r3, r2
 8000e28:	3304      	adds	r3, #4
 8000e2a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	0c5b      	lsrs	r3, r3, #17
 8000e30:	f003 030f 	and.w	r3, r3, #15
 8000e34:	2b02      	cmp	r3, #2
 8000e36:	d124      	bne.n	8000e82 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8000e3e:	4013      	ands	r3, r2
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d035      	beq.n	8000eb0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	091b      	lsrs	r3, r3, #4
 8000e4c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8000e4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	461a      	mov	r2, r3
 8000e56:	6a38      	ldr	r0, [r7, #32]
 8000e58:	f003 fb50 	bl	80044fc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	691a      	ldr	r2, [r3, #16]
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	091b      	lsrs	r3, r3, #4
 8000e64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e68:	441a      	add	r2, r3
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	6a1a      	ldr	r2, [r3, #32]
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	091b      	lsrs	r3, r3, #4
 8000e76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e7a:	441a      	add	r2, r3
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	621a      	str	r2, [r3, #32]
 8000e80:	e016      	b.n	8000eb0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8000e82:	69bb      	ldr	r3, [r7, #24]
 8000e84:	0c5b      	lsrs	r3, r3, #17
 8000e86:	f003 030f 	and.w	r3, r3, #15
 8000e8a:	2b06      	cmp	r3, #6
 8000e8c:	d110      	bne.n	8000eb0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8000e94:	2208      	movs	r2, #8
 8000e96:	4619      	mov	r1, r3
 8000e98:	6a38      	ldr	r0, [r7, #32]
 8000e9a:	f003 fb2f 	bl	80044fc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	6a1a      	ldr	r2, [r3, #32]
 8000ea2:	69bb      	ldr	r3, [r7, #24]
 8000ea4:	091b      	lsrs	r3, r3, #4
 8000ea6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000eaa:	441a      	add	r2, r3
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	699a      	ldr	r2, [r3, #24]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f042 0210 	orr.w	r2, r2, #16
 8000ebe:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f003 fcad 	bl	8004824 <USB_ReadInterrupts>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ed0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000ed4:	f040 80a7 	bne.w	8001026 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f003 fcb2 	bl	800484a <USB_ReadDevAllOutEpInterrupt>
 8000ee6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8000ee8:	e099      	b.n	800101e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8000eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eec:	f003 0301 	and.w	r3, r3, #1
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	f000 808e 	beq.w	8001012 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000efc:	b2d2      	uxtb	r2, r2
 8000efe:	4611      	mov	r1, r2
 8000f00:	4618      	mov	r0, r3
 8000f02:	f003 fcd6 	bl	80048b2 <USB_ReadDevOutEPInterrupt>
 8000f06:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d00c      	beq.n	8000f2c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f14:	015a      	lsls	r2, r3, #5
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	4413      	add	r3, r2
 8000f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000f1e:	461a      	mov	r2, r3
 8000f20:	2301      	movs	r3, #1
 8000f22:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8000f24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f000 fe7e 	bl	8001c28 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	f003 0308 	and.w	r3, r3, #8
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d00c      	beq.n	8000f50 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8000f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f38:	015a      	lsls	r2, r3, #5
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000f42:	461a      	mov	r2, r3
 8000f44:	2308      	movs	r3, #8
 8000f46:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8000f48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f000 feba 	bl	8001cc4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	f003 0310 	and.w	r3, r3, #16
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d008      	beq.n	8000f6c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8000f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5c:	015a      	lsls	r2, r3, #5
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	4413      	add	r3, r2
 8000f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000f66:	461a      	mov	r2, r3
 8000f68:	2310      	movs	r3, #16
 8000f6a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	f003 0302 	and.w	r3, r3, #2
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d030      	beq.n	8000fd8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8000f76:	6a3b      	ldr	r3, [r7, #32]
 8000f78:	695b      	ldr	r3, [r3, #20]
 8000f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f7e:	2b80      	cmp	r3, #128	; 0x80
 8000f80:	d109      	bne.n	8000f96 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	69fa      	ldr	r2, [r7, #28]
 8000f8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8000f90:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f94:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8000f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f98:	4613      	mov	r3, r2
 8000f9a:	00db      	lsls	r3, r3, #3
 8000f9c:	4413      	add	r3, r2
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	3304      	adds	r3, #4
 8000faa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	78db      	ldrb	r3, [r3, #3]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d108      	bne.n	8000fc6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8000fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f005 fb49 	bl	8006658 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8000fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc8:	015a      	lsls	r2, r3, #5
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	4413      	add	r3, r2
 8000fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	f003 0320 	and.w	r3, r3, #32
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d008      	beq.n	8000ff4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8000fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe4:	015a      	lsls	r2, r3, #5
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	4413      	add	r3, r2
 8000fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000fee:	461a      	mov	r2, r3
 8000ff0:	2320      	movs	r3, #32
 8000ff2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d009      	beq.n	8001012 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8000ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001000:	015a      	lsls	r2, r3, #5
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	4413      	add	r3, r2
 8001006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800100a:	461a      	mov	r2, r3
 800100c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001010:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001014:	3301      	adds	r3, #1
 8001016:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800101a:	085b      	lsrs	r3, r3, #1
 800101c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800101e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001020:	2b00      	cmp	r3, #0
 8001022:	f47f af62 	bne.w	8000eea <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4618      	mov	r0, r3
 800102c:	f003 fbfa 	bl	8004824 <USB_ReadInterrupts>
 8001030:	4603      	mov	r3, r0
 8001032:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001036:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800103a:	f040 80a4 	bne.w	8001186 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4618      	mov	r0, r3
 8001044:	f003 fc1b 	bl	800487e <USB_ReadDevAllInEpInterrupt>
 8001048:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800104a:	2300      	movs	r3, #0
 800104c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800104e:	e096      	b.n	800117e <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	2b00      	cmp	r3, #0
 8001058:	f000 808b 	beq.w	8001172 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001062:	b2d2      	uxtb	r2, r2
 8001064:	4611      	mov	r1, r2
 8001066:	4618      	mov	r0, r3
 8001068:	f003 fc41 	bl	80048ee <USB_ReadDevInEPInterrupt>
 800106c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	f003 0301 	and.w	r3, r3, #1
 8001074:	2b00      	cmp	r3, #0
 8001076:	d020      	beq.n	80010ba <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107a:	f003 030f 	and.w	r3, r3, #15
 800107e:	2201      	movs	r2, #1
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800108c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	43db      	mvns	r3, r3
 8001092:	69f9      	ldr	r1, [r7, #28]
 8001094:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001098:	4013      	ands	r3, r2
 800109a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800109c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109e:	015a      	lsls	r2, r3, #5
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	4413      	add	r3, r2
 80010a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80010a8:	461a      	mov	r2, r3
 80010aa:	2301      	movs	r3, #1
 80010ac:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80010ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	4619      	mov	r1, r3
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f005 fa3a 	bl	800652e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	f003 0308 	and.w	r3, r3, #8
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d008      	beq.n	80010d6 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80010c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c6:	015a      	lsls	r2, r3, #5
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	4413      	add	r3, r2
 80010cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80010d0:	461a      	mov	r2, r3
 80010d2:	2308      	movs	r3, #8
 80010d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	f003 0310 	and.w	r3, r3, #16
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d008      	beq.n	80010f2 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80010e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e2:	015a      	lsls	r2, r3, #5
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	4413      	add	r3, r2
 80010e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80010ec:	461a      	mov	r2, r3
 80010ee:	2310      	movs	r3, #16
 80010f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d008      	beq.n	800110e <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80010fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fe:	015a      	lsls	r2, r3, #5
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	4413      	add	r3, r2
 8001104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001108:	461a      	mov	r2, r3
 800110a:	2340      	movs	r3, #64	; 0x40
 800110c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	f003 0302 	and.w	r3, r3, #2
 8001114:	2b00      	cmp	r3, #0
 8001116:	d023      	beq.n	8001160 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001118:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800111a:	6a38      	ldr	r0, [r7, #32]
 800111c:	f002 fc08 	bl	8003930 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001122:	4613      	mov	r3, r2
 8001124:	00db      	lsls	r3, r3, #3
 8001126:	4413      	add	r3, r2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	3338      	adds	r3, #56	; 0x38
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	4413      	add	r3, r2
 8001130:	3304      	adds	r3, #4
 8001132:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	78db      	ldrb	r3, [r3, #3]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d108      	bne.n	800114e <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	2200      	movs	r2, #0
 8001140:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001144:	b2db      	uxtb	r3, r3
 8001146:	4619      	mov	r1, r3
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f005 fa97 	bl	800667c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800114e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001150:	015a      	lsls	r2, r3, #5
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	4413      	add	r3, r2
 8001156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800115a:	461a      	mov	r2, r3
 800115c:	2302      	movs	r3, #2
 800115e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001166:	2b00      	cmp	r3, #0
 8001168:	d003      	beq.n	8001172 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800116a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f000 fcd2 	bl	8001b16 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001174:	3301      	adds	r3, #1
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800117a:	085b      	lsrs	r3, r3, #1
 800117c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800117e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001180:	2b00      	cmp	r3, #0
 8001182:	f47f af65 	bne.w	8001050 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4618      	mov	r0, r3
 800118c:	f003 fb4a 	bl	8004824 <USB_ReadInterrupts>
 8001190:	4603      	mov	r3, r0
 8001192:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001196:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800119a:	d122      	bne.n	80011e2 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	69fa      	ldr	r2, [r7, #28]
 80011a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80011aa:	f023 0301 	bic.w	r3, r3, #1
 80011ae:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d108      	bne.n	80011cc <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2200      	movs	r2, #0
 80011be:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80011c2:	2100      	movs	r1, #0
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f005 fcb7 	bl	8006b38 <HAL_PCDEx_LPM_Callback>
 80011ca:	e002      	b.n	80011d2 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f005 fa1b 	bl	8006608 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	695a      	ldr	r2, [r3, #20]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80011e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f003 fb1c 	bl	8004824 <USB_ReadInterrupts>
 80011ec:	4603      	mov	r3, r0
 80011ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80011f6:	d112      	bne.n	800121e <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	f003 0301 	and.w	r3, r3, #1
 8001204:	2b01      	cmp	r3, #1
 8001206:	d102      	bne.n	800120e <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f005 f9d7 	bl	80065bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	695a      	ldr	r2, [r3, #20]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800121c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4618      	mov	r0, r3
 8001224:	f003 fafe 	bl	8004824 <USB_ReadInterrupts>
 8001228:	4603      	mov	r3, r0
 800122a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800122e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001232:	d121      	bne.n	8001278 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	695a      	ldr	r2, [r3, #20]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001242:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800124a:	2b00      	cmp	r3, #0
 800124c:	d111      	bne.n	8001272 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2201      	movs	r2, #1
 8001252:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800125c:	089b      	lsrs	r3, r3, #2
 800125e:	f003 020f 	and.w	r2, r3, #15
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001268:	2101      	movs	r1, #1
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f005 fc64 	bl	8006b38 <HAL_PCDEx_LPM_Callback>
 8001270:	e002      	b.n	8001278 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f005 f9a2 	bl	80065bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4618      	mov	r0, r3
 800127e:	f003 fad1 	bl	8004824 <USB_ReadInterrupts>
 8001282:	4603      	mov	r3, r0
 8001284:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001288:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800128c:	f040 80b5 	bne.w	80013fa <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	69fa      	ldr	r2, [r7, #28]
 800129a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800129e:	f023 0301 	bic.w	r3, r3, #1
 80012a2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2110      	movs	r1, #16
 80012aa:	4618      	mov	r0, r3
 80012ac:	f002 fb40 	bl	8003930 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012b0:	2300      	movs	r3, #0
 80012b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012b4:	e046      	b.n	8001344 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80012b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012b8:	015a      	lsls	r2, r3, #5
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	4413      	add	r3, r2
 80012be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80012c2:	461a      	mov	r2, r3
 80012c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80012c8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80012ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012cc:	015a      	lsls	r2, r3, #5
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	4413      	add	r3, r2
 80012d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012da:	0151      	lsls	r1, r2, #5
 80012dc:	69fa      	ldr	r2, [r7, #28]
 80012de:	440a      	add	r2, r1
 80012e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80012e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80012e8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80012ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ec:	015a      	lsls	r2, r3, #5
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	4413      	add	r3, r2
 80012f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012f6:	461a      	mov	r2, r3
 80012f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80012fc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80012fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001300:	015a      	lsls	r2, r3, #5
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	4413      	add	r3, r2
 8001306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800130e:	0151      	lsls	r1, r2, #5
 8001310:	69fa      	ldr	r2, [r7, #28]
 8001312:	440a      	add	r2, r1
 8001314:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001318:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800131c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800131e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001320:	015a      	lsls	r2, r3, #5
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	4413      	add	r3, r2
 8001326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800132e:	0151      	lsls	r1, r2, #5
 8001330:	69fa      	ldr	r2, [r7, #28]
 8001332:	440a      	add	r2, r1
 8001334:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001338:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800133c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800133e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001340:	3301      	adds	r3, #1
 8001342:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800134a:	429a      	cmp	r2, r3
 800134c:	d3b3      	bcc.n	80012b6 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001354:	69db      	ldr	r3, [r3, #28]
 8001356:	69fa      	ldr	r2, [r7, #28]
 8001358:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800135c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001360:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	2b00      	cmp	r3, #0
 8001368:	d016      	beq.n	8001398 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001370:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001374:	69fa      	ldr	r2, [r7, #28]
 8001376:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800137a:	f043 030b 	orr.w	r3, r3, #11
 800137e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138a:	69fa      	ldr	r2, [r7, #28]
 800138c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001390:	f043 030b 	orr.w	r3, r3, #11
 8001394:	6453      	str	r3, [r2, #68]	; 0x44
 8001396:	e015      	b.n	80013c4 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800139e:	695b      	ldr	r3, [r3, #20]
 80013a0:	69fa      	ldr	r2, [r7, #28]
 80013a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80013a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013aa:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80013ae:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013b6:	691b      	ldr	r3, [r3, #16]
 80013b8:	69fa      	ldr	r2, [r7, #28]
 80013ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80013be:	f043 030b 	orr.w	r3, r3, #11
 80013c2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	69fa      	ldr	r2, [r7, #28]
 80013ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80013d2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80013d6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80013e2:	4619      	mov	r1, r3
 80013e4:	4610      	mov	r0, r2
 80013e6:	f003 fae1 	bl	80049ac <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	695a      	ldr	r2, [r3, #20]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80013f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4618      	mov	r0, r3
 8001400:	f003 fa10 	bl	8004824 <USB_ReadInterrupts>
 8001404:	4603      	mov	r3, r0
 8001406:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800140a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800140e:	d124      	bne.n	800145a <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4618      	mov	r0, r3
 8001416:	f003 faa6 	bl	8004966 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4618      	mov	r0, r3
 8001420:	f002 fb03 	bl	8003a2a <USB_GetDevSpeed>
 8001424:	4603      	mov	r3, r0
 8001426:	461a      	mov	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681c      	ldr	r4, [r3, #0]
 8001430:	f001 fad4 	bl	80029dc <HAL_RCC_GetHCLKFreq>
 8001434:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800143a:	b2db      	uxtb	r3, r3
 800143c:	461a      	mov	r2, r3
 800143e:	4620      	mov	r0, r4
 8001440:	f002 f820 	bl	8003484 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f005 f89a 	bl	800657e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	695a      	ldr	r2, [r3, #20]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001458:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4618      	mov	r0, r3
 8001460:	f003 f9e0 	bl	8004824 <USB_ReadInterrupts>
 8001464:	4603      	mov	r3, r0
 8001466:	f003 0308 	and.w	r3, r3, #8
 800146a:	2b08      	cmp	r3, #8
 800146c:	d10a      	bne.n	8001484 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f005 f877 	bl	8006562 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	695a      	ldr	r2, [r3, #20]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f002 0208 	and.w	r2, r2, #8
 8001482:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4618      	mov	r0, r3
 800148a:	f003 f9cb 	bl	8004824 <USB_ReadInterrupts>
 800148e:	4603      	mov	r3, r0
 8001490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001494:	2b80      	cmp	r3, #128	; 0x80
 8001496:	d122      	bne.n	80014de <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001498:	6a3b      	ldr	r3, [r7, #32]
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80014a0:	6a3b      	ldr	r3, [r7, #32]
 80014a2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80014a4:	2301      	movs	r3, #1
 80014a6:	627b      	str	r3, [r7, #36]	; 0x24
 80014a8:	e014      	b.n	80014d4 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80014aa:	6879      	ldr	r1, [r7, #4]
 80014ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014ae:	4613      	mov	r3, r2
 80014b0:	00db      	lsls	r3, r3, #3
 80014b2:	4413      	add	r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	440b      	add	r3, r1
 80014b8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d105      	bne.n	80014ce <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80014c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	4619      	mov	r1, r3
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f000 faf3 	bl	8001ab4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80014ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d0:	3301      	adds	r3, #1
 80014d2:	627b      	str	r3, [r7, #36]	; 0x24
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014da:	429a      	cmp	r2, r3
 80014dc:	d3e5      	bcc.n	80014aa <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f003 f99e 	bl	8004824 <USB_ReadInterrupts>
 80014e8:	4603      	mov	r3, r0
 80014ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80014f2:	d13b      	bne.n	800156c <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80014f4:	2301      	movs	r3, #1
 80014f6:	627b      	str	r3, [r7, #36]	; 0x24
 80014f8:	e02b      	b.n	8001552 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80014fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fc:	015a      	lsls	r2, r3, #5
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	4413      	add	r3, r2
 8001502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800150a:	6879      	ldr	r1, [r7, #4]
 800150c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800150e:	4613      	mov	r3, r2
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	4413      	add	r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	440b      	add	r3, r1
 8001518:	3340      	adds	r3, #64	; 0x40
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d115      	bne.n	800154c <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001520:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001522:	2b00      	cmp	r3, #0
 8001524:	da12      	bge.n	800154c <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001526:	6879      	ldr	r1, [r7, #4]
 8001528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800152a:	4613      	mov	r3, r2
 800152c:	00db      	lsls	r3, r3, #3
 800152e:	4413      	add	r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	440b      	add	r3, r1
 8001534:	333f      	adds	r3, #63	; 0x3f
 8001536:	2201      	movs	r2, #1
 8001538:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800153a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153c:	b2db      	uxtb	r3, r3
 800153e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001542:	b2db      	uxtb	r3, r3
 8001544:	4619      	mov	r1, r3
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f000 fab4 	bl	8001ab4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800154c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154e:	3301      	adds	r3, #1
 8001550:	627b      	str	r3, [r7, #36]	; 0x24
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001558:	429a      	cmp	r2, r3
 800155a:	d3ce      	bcc.n	80014fa <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	695a      	ldr	r2, [r3, #20]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800156a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4618      	mov	r0, r3
 8001572:	f003 f957 	bl	8004824 <USB_ReadInterrupts>
 8001576:	4603      	mov	r3, r0
 8001578:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800157c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001580:	d155      	bne.n	800162e <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001582:	2301      	movs	r3, #1
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
 8001586:	e045      	b.n	8001614 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158a:	015a      	lsls	r2, r3, #5
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	4413      	add	r3, r2
 8001590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001598:	6879      	ldr	r1, [r7, #4]
 800159a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800159c:	4613      	mov	r3, r2
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	4413      	add	r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	440b      	add	r3, r1
 80015a6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d12e      	bne.n	800160e <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80015b0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	da2b      	bge.n	800160e <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80015c2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d121      	bne.n	800160e <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80015ca:	6879      	ldr	r1, [r7, #4]
 80015cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ce:	4613      	mov	r3, r2
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	4413      	add	r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	440b      	add	r3, r1
 80015d8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80015dc:	2201      	movs	r2, #1
 80015de:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80015e0:	6a3b      	ldr	r3, [r7, #32]
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80015e8:	6a3b      	ldr	r3, [r7, #32]
 80015ea:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80015ec:	6a3b      	ldr	r3, [r7, #32]
 80015ee:	695b      	ldr	r3, [r3, #20]
 80015f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d10a      	bne.n	800160e <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	69fa      	ldr	r2, [r7, #28]
 8001602:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001606:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800160a:	6053      	str	r3, [r2, #4]
            break;
 800160c:	e007      	b.n	800161e <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800160e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001610:	3301      	adds	r3, #1
 8001612:	627b      	str	r3, [r7, #36]	; 0x24
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800161a:	429a      	cmp	r2, r3
 800161c:	d3b4      	bcc.n	8001588 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	695a      	ldr	r2, [r3, #20]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800162c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4618      	mov	r0, r3
 8001634:	f003 f8f6 	bl	8004824 <USB_ReadInterrupts>
 8001638:	4603      	mov	r3, r0
 800163a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800163e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001642:	d10a      	bne.n	800165a <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f005 f82b 	bl	80066a0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	695a      	ldr	r2, [r3, #20]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001658:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4618      	mov	r0, r3
 8001660:	f003 f8e0 	bl	8004824 <USB_ReadInterrupts>
 8001664:	4603      	mov	r3, r0
 8001666:	f003 0304 	and.w	r3, r3, #4
 800166a:	2b04      	cmp	r3, #4
 800166c:	d115      	bne.n	800169a <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	f003 0304 	and.w	r3, r3, #4
 800167c:	2b00      	cmp	r3, #0
 800167e:	d002      	beq.n	8001686 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f005 f81b 	bl	80066bc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	6859      	ldr	r1, [r3, #4]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	430a      	orrs	r2, r1
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	e000      	b.n	800169a <HAL_PCD_IRQHandler+0x920>
      return;
 8001698:	bf00      	nop
    }
  }
}
 800169a:	3734      	adds	r7, #52	; 0x34
 800169c:	46bd      	mov	sp, r7
 800169e:	bd90      	pop	{r4, r7, pc}

080016a0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	460b      	mov	r3, r1
 80016aa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d101      	bne.n	80016ba <HAL_PCD_SetAddress+0x1a>
 80016b6:	2302      	movs	r3, #2
 80016b8:	e013      	b.n	80016e2 <HAL_PCD_SetAddress+0x42>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2201      	movs	r2, #1
 80016be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	78fa      	ldrb	r2, [r7, #3]
 80016c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	78fa      	ldrb	r2, [r7, #3]
 80016d0:	4611      	mov	r1, r2
 80016d2:	4618      	mov	r0, r3
 80016d4:	f003 f83e 	bl	8004754 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b084      	sub	sp, #16
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
 80016f2:	4608      	mov	r0, r1
 80016f4:	4611      	mov	r1, r2
 80016f6:	461a      	mov	r2, r3
 80016f8:	4603      	mov	r3, r0
 80016fa:	70fb      	strb	r3, [r7, #3]
 80016fc:	460b      	mov	r3, r1
 80016fe:	803b      	strh	r3, [r7, #0]
 8001700:	4613      	mov	r3, r2
 8001702:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001704:	2300      	movs	r3, #0
 8001706:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001708:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800170c:	2b00      	cmp	r3, #0
 800170e:	da0f      	bge.n	8001730 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001710:	78fb      	ldrb	r3, [r7, #3]
 8001712:	f003 020f 	and.w	r2, r3, #15
 8001716:	4613      	mov	r3, r2
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	4413      	add	r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	3338      	adds	r3, #56	; 0x38
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	4413      	add	r3, r2
 8001724:	3304      	adds	r3, #4
 8001726:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2201      	movs	r2, #1
 800172c:	705a      	strb	r2, [r3, #1]
 800172e:	e00f      	b.n	8001750 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001730:	78fb      	ldrb	r3, [r7, #3]
 8001732:	f003 020f 	and.w	r2, r3, #15
 8001736:	4613      	mov	r3, r2
 8001738:	00db      	lsls	r3, r3, #3
 800173a:	4413      	add	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	4413      	add	r3, r2
 8001746:	3304      	adds	r3, #4
 8001748:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2200      	movs	r2, #0
 800174e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001750:	78fb      	ldrb	r3, [r7, #3]
 8001752:	f003 030f 	and.w	r3, r3, #15
 8001756:	b2da      	uxtb	r2, r3
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800175c:	883a      	ldrh	r2, [r7, #0]
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	78ba      	ldrb	r2, [r7, #2]
 8001766:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	785b      	ldrb	r3, [r3, #1]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d004      	beq.n	800177a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	b29a      	uxth	r2, r3
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800177a:	78bb      	ldrb	r3, [r7, #2]
 800177c:	2b02      	cmp	r3, #2
 800177e:	d102      	bne.n	8001786 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2200      	movs	r2, #0
 8001784:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800178c:	2b01      	cmp	r3, #1
 800178e:	d101      	bne.n	8001794 <HAL_PCD_EP_Open+0xaa>
 8001790:	2302      	movs	r3, #2
 8001792:	e00e      	b.n	80017b2 <HAL_PCD_EP_Open+0xc8>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2201      	movs	r2, #1
 8001798:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	68f9      	ldr	r1, [r7, #12]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f002 f960 	bl	8003a68 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80017b0:	7afb      	ldrb	r3, [r7, #11]
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b084      	sub	sp, #16
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
 80017c2:	460b      	mov	r3, r1
 80017c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80017c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	da0f      	bge.n	80017ee <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017ce:	78fb      	ldrb	r3, [r7, #3]
 80017d0:	f003 020f 	and.w	r2, r3, #15
 80017d4:	4613      	mov	r3, r2
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	4413      	add	r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	3338      	adds	r3, #56	; 0x38
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	4413      	add	r3, r2
 80017e2:	3304      	adds	r3, #4
 80017e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2201      	movs	r2, #1
 80017ea:	705a      	strb	r2, [r3, #1]
 80017ec:	e00f      	b.n	800180e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017ee:	78fb      	ldrb	r3, [r7, #3]
 80017f0:	f003 020f 	and.w	r2, r3, #15
 80017f4:	4613      	mov	r3, r2
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	4413      	add	r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	4413      	add	r3, r2
 8001804:	3304      	adds	r3, #4
 8001806:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2200      	movs	r2, #0
 800180c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800180e:	78fb      	ldrb	r3, [r7, #3]
 8001810:	f003 030f 	and.w	r3, r3, #15
 8001814:	b2da      	uxtb	r2, r3
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001820:	2b01      	cmp	r3, #1
 8001822:	d101      	bne.n	8001828 <HAL_PCD_EP_Close+0x6e>
 8001824:	2302      	movs	r3, #2
 8001826:	e00e      	b.n	8001846 <HAL_PCD_EP_Close+0x8c>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2201      	movs	r2, #1
 800182c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	68f9      	ldr	r1, [r7, #12]
 8001836:	4618      	mov	r0, r3
 8001838:	f002 f99e 	bl	8003b78 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b086      	sub	sp, #24
 8001852:	af00      	add	r7, sp, #0
 8001854:	60f8      	str	r0, [r7, #12]
 8001856:	607a      	str	r2, [r7, #4]
 8001858:	603b      	str	r3, [r7, #0]
 800185a:	460b      	mov	r3, r1
 800185c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800185e:	7afb      	ldrb	r3, [r7, #11]
 8001860:	f003 020f 	and.w	r2, r3, #15
 8001864:	4613      	mov	r3, r2
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	4413      	add	r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001870:	68fa      	ldr	r2, [r7, #12]
 8001872:	4413      	add	r3, r2
 8001874:	3304      	adds	r3, #4
 8001876:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	2200      	movs	r2, #0
 8001888:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	2200      	movs	r2, #0
 800188e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001890:	7afb      	ldrb	r3, [r7, #11]
 8001892:	f003 030f 	and.w	r3, r3, #15
 8001896:	b2da      	uxtb	r2, r3
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800189c:	7afb      	ldrb	r3, [r7, #11]
 800189e:	f003 030f 	and.w	r3, r3, #15
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d106      	bne.n	80018b4 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	6979      	ldr	r1, [r7, #20]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f002 fc1f 	bl	80040f0 <USB_EP0StartXfer>
 80018b2:	e005      	b.n	80018c0 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6979      	ldr	r1, [r7, #20]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f002 fa38 	bl	8003d30 <USB_EPStartXfer>
  }

  return HAL_OK;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3718      	adds	r7, #24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b086      	sub	sp, #24
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	60f8      	str	r0, [r7, #12]
 80018d2:	607a      	str	r2, [r7, #4]
 80018d4:	603b      	str	r3, [r7, #0]
 80018d6:	460b      	mov	r3, r1
 80018d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018da:	7afb      	ldrb	r3, [r7, #11]
 80018dc:	f003 020f 	and.w	r2, r3, #15
 80018e0:	4613      	mov	r3, r2
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	4413      	add	r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	3338      	adds	r3, #56	; 0x38
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	4413      	add	r3, r2
 80018ee:	3304      	adds	r3, #4
 80018f0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	683a      	ldr	r2, [r7, #0]
 80018fc:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	2200      	movs	r2, #0
 8001902:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	2201      	movs	r2, #1
 8001908:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800190a:	7afb      	ldrb	r3, [r7, #11]
 800190c:	f003 030f 	and.w	r3, r3, #15
 8001910:	b2da      	uxtb	r2, r3
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001916:	7afb      	ldrb	r3, [r7, #11]
 8001918:	f003 030f 	and.w	r3, r3, #15
 800191c:	2b00      	cmp	r3, #0
 800191e:	d106      	bne.n	800192e <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6979      	ldr	r1, [r7, #20]
 8001926:	4618      	mov	r0, r3
 8001928:	f002 fbe2 	bl	80040f0 <USB_EP0StartXfer>
 800192c:	e005      	b.n	800193a <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	6979      	ldr	r1, [r7, #20]
 8001934:	4618      	mov	r0, r3
 8001936:	f002 f9fb 	bl	8003d30 <USB_EPStartXfer>
  }

  return HAL_OK;
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	3718      	adds	r7, #24
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	460b      	mov	r3, r1
 800194e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001950:	78fb      	ldrb	r3, [r7, #3]
 8001952:	f003 020f 	and.w	r2, r3, #15
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	429a      	cmp	r2, r3
 800195c:	d901      	bls.n	8001962 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e04e      	b.n	8001a00 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001962:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001966:	2b00      	cmp	r3, #0
 8001968:	da0f      	bge.n	800198a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800196a:	78fb      	ldrb	r3, [r7, #3]
 800196c:	f003 020f 	and.w	r2, r3, #15
 8001970:	4613      	mov	r3, r2
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	4413      	add	r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	3338      	adds	r3, #56	; 0x38
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	4413      	add	r3, r2
 800197e:	3304      	adds	r3, #4
 8001980:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2201      	movs	r2, #1
 8001986:	705a      	strb	r2, [r3, #1]
 8001988:	e00d      	b.n	80019a6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800198a:	78fa      	ldrb	r2, [r7, #3]
 800198c:	4613      	mov	r3, r2
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	4413      	add	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	4413      	add	r3, r2
 800199c:	3304      	adds	r3, #4
 800199e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2200      	movs	r2, #0
 80019a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2201      	movs	r2, #1
 80019aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019ac:	78fb      	ldrb	r3, [r7, #3]
 80019ae:	f003 030f 	and.w	r3, r3, #15
 80019b2:	b2da      	uxtb	r2, r3
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d101      	bne.n	80019c6 <HAL_PCD_EP_SetStall+0x82>
 80019c2:	2302      	movs	r3, #2
 80019c4:	e01c      	b.n	8001a00 <HAL_PCD_EP_SetStall+0xbc>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2201      	movs	r2, #1
 80019ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	68f9      	ldr	r1, [r7, #12]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f002 fde9 	bl	80045ac <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80019da:	78fb      	ldrb	r3, [r7, #3]
 80019dc:	f003 030f 	and.w	r3, r3, #15
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d108      	bne.n	80019f6 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80019ee:	4619      	mov	r1, r3
 80019f0:	4610      	mov	r0, r2
 80019f2:	f002 ffdb 	bl	80049ac <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80019fe:	2300      	movs	r3, #0
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3710      	adds	r7, #16
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	460b      	mov	r3, r1
 8001a12:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001a14:	78fb      	ldrb	r3, [r7, #3]
 8001a16:	f003 020f 	and.w	r2, r3, #15
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d901      	bls.n	8001a26 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e042      	b.n	8001aac <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	da0f      	bge.n	8001a4e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a2e:	78fb      	ldrb	r3, [r7, #3]
 8001a30:	f003 020f 	and.w	r2, r3, #15
 8001a34:	4613      	mov	r3, r2
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	4413      	add	r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	3338      	adds	r3, #56	; 0x38
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	4413      	add	r3, r2
 8001a42:	3304      	adds	r3, #4
 8001a44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2201      	movs	r2, #1
 8001a4a:	705a      	strb	r2, [r3, #1]
 8001a4c:	e00f      	b.n	8001a6e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a4e:	78fb      	ldrb	r3, [r7, #3]
 8001a50:	f003 020f 	and.w	r2, r3, #15
 8001a54:	4613      	mov	r3, r2
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	4413      	add	r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	4413      	add	r3, r2
 8001a64:	3304      	adds	r3, #4
 8001a66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2200      	movs	r2, #0
 8001a72:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a74:	78fb      	ldrb	r3, [r7, #3]
 8001a76:	f003 030f 	and.w	r3, r3, #15
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d101      	bne.n	8001a8e <HAL_PCD_EP_ClrStall+0x86>
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	e00e      	b.n	8001aac <HAL_PCD_EP_ClrStall+0xa4>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2201      	movs	r2, #1
 8001a92:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	68f9      	ldr	r1, [r7, #12]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f002 fdf3 	bl	8004688 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3710      	adds	r7, #16
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	460b      	mov	r3, r1
 8001abe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001ac0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	da0c      	bge.n	8001ae2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ac8:	78fb      	ldrb	r3, [r7, #3]
 8001aca:	f003 020f 	and.w	r2, r3, #15
 8001ace:	4613      	mov	r3, r2
 8001ad0:	00db      	lsls	r3, r3, #3
 8001ad2:	4413      	add	r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	3338      	adds	r3, #56	; 0x38
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	4413      	add	r3, r2
 8001adc:	3304      	adds	r3, #4
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	e00c      	b.n	8001afc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ae2:	78fb      	ldrb	r3, [r7, #3]
 8001ae4:	f003 020f 	and.w	r2, r3, #15
 8001ae8:	4613      	mov	r3, r2
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	4413      	add	r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	4413      	add	r3, r2
 8001af8:	3304      	adds	r3, #4
 8001afa:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	68f9      	ldr	r1, [r7, #12]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f002 fc16 	bl	8004334 <USB_EPStopXfer>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001b0c:	7afb      	ldrb	r3, [r7, #11]
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3710      	adds	r7, #16
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b088      	sub	sp, #32
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
 8001b1e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001b2a:	683a      	ldr	r2, [r7, #0]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	4413      	add	r3, r2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	3338      	adds	r3, #56	; 0x38
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	4413      	add	r3, r2
 8001b3a:	3304      	adds	r3, #4
 8001b3c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6a1a      	ldr	r2, [r3, #32]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	699b      	ldr	r3, [r3, #24]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d901      	bls.n	8001b4e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e067      	b.n	8001c1e <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	699a      	ldr	r2, [r3, #24]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	6a1b      	ldr	r3, [r3, #32]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	69fa      	ldr	r2, [r7, #28]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d902      	bls.n	8001b6a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	3303      	adds	r3, #3
 8001b6e:	089b      	lsrs	r3, r3, #2
 8001b70:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001b72:	e026      	b.n	8001bc2 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	699a      	ldr	r2, [r3, #24]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	6a1b      	ldr	r3, [r3, #32]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	69fa      	ldr	r2, [r7, #28]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d902      	bls.n	8001b90 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	3303      	adds	r3, #3
 8001b94:	089b      	lsrs	r3, r3, #2
 8001b96:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6919      	ldr	r1, [r3, #16]
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	b2da      	uxtb	r2, r3
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	6978      	ldr	r0, [r7, #20]
 8001ba6:	f002 fc6f 	bl	8004488 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	691a      	ldr	r2, [r3, #16]
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	441a      	add	r2, r3
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	6a1a      	ldr	r2, [r3, #32]
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	441a      	add	r2, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	015a      	lsls	r2, r3, #5
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	4413      	add	r3, r2
 8001bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d809      	bhi.n	8001bec <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	6a1a      	ldr	r2, [r3, #32]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d203      	bcs.n	8001bec <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1c3      	bne.n	8001b74 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	699a      	ldr	r2, [r3, #24]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	6a1b      	ldr	r3, [r3, #32]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d811      	bhi.n	8001c1c <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	2201      	movs	r2, #1
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	43db      	mvns	r3, r3
 8001c12:	6939      	ldr	r1, [r7, #16]
 8001c14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001c18:	4013      	ands	r3, r2
 8001c1a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3720      	adds	r7, #32
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
	...

08001c28 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	333c      	adds	r3, #60	; 0x3c
 8001c40:	3304      	adds	r3, #4
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	015a      	lsls	r2, r3, #5
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	4a19      	ldr	r2, [pc, #100]	; (8001cc0 <PCD_EP_OutXfrComplete_int+0x98>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d124      	bne.n	8001ca8 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d00a      	beq.n	8001c7e <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	015a      	lsls	r2, r3, #5
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	4413      	add	r3, r2
 8001c70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c74:	461a      	mov	r2, r3
 8001c76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c7a:	6093      	str	r3, [r2, #8]
 8001c7c:	e01a      	b.n	8001cb4 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	f003 0320 	and.w	r3, r3, #32
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d008      	beq.n	8001c9a <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	015a      	lsls	r2, r3, #5
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	4413      	add	r3, r2
 8001c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c94:	461a      	mov	r2, r3
 8001c96:	2320      	movs	r3, #32
 8001c98:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f004 fc29 	bl	80064f8 <HAL_PCD_DataOutStageCallback>
 8001ca6:	e005      	b.n	8001cb4 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	4619      	mov	r1, r3
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f004 fc22 	bl	80064f8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3718      	adds	r7, #24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	4f54310a 	.word	0x4f54310a

08001cc4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	333c      	adds	r3, #60	; 0x3c
 8001cdc:	3304      	adds	r3, #4
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	015a      	lsls	r2, r3, #5
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	4413      	add	r3, r2
 8001cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	4a0c      	ldr	r2, [pc, #48]	; (8001d28 <PCD_EP_OutSetupPacket_int+0x64>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d90e      	bls.n	8001d18 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d009      	beq.n	8001d18 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	015a      	lsls	r2, r3, #5
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d10:	461a      	mov	r2, r3
 8001d12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d16:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f004 fbdb 	bl	80064d4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3718      	adds	r7, #24
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	4f54300a 	.word	0x4f54300a

08001d2c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	460b      	mov	r3, r1
 8001d36:	70fb      	strb	r3, [r7, #3]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d42:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8001d44:	78fb      	ldrb	r3, [r7, #3]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d107      	bne.n	8001d5a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001d4a:	883b      	ldrh	r3, [r7, #0]
 8001d4c:	0419      	lsls	r1, r3, #16
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68ba      	ldr	r2, [r7, #8]
 8001d54:	430a      	orrs	r2, r1
 8001d56:	629a      	str	r2, [r3, #40]	; 0x28
 8001d58:	e028      	b.n	8001dac <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d60:	0c1b      	lsrs	r3, r3, #16
 8001d62:	68ba      	ldr	r2, [r7, #8]
 8001d64:	4413      	add	r3, r2
 8001d66:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001d68:	2300      	movs	r3, #0
 8001d6a:	73fb      	strb	r3, [r7, #15]
 8001d6c:	e00d      	b.n	8001d8a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	7bfb      	ldrb	r3, [r7, #15]
 8001d74:	3340      	adds	r3, #64	; 0x40
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	4413      	add	r3, r2
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	0c1b      	lsrs	r3, r3, #16
 8001d7e:	68ba      	ldr	r2, [r7, #8]
 8001d80:	4413      	add	r3, r2
 8001d82:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001d84:	7bfb      	ldrb	r3, [r7, #15]
 8001d86:	3301      	adds	r3, #1
 8001d88:	73fb      	strb	r3, [r7, #15]
 8001d8a:	7bfa      	ldrb	r2, [r7, #15]
 8001d8c:	78fb      	ldrb	r3, [r7, #3]
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d3ec      	bcc.n	8001d6e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8001d94:	883b      	ldrh	r3, [r7, #0]
 8001d96:	0418      	lsls	r0, r3, #16
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6819      	ldr	r1, [r3, #0]
 8001d9c:	78fb      	ldrb	r3, [r7, #3]
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	68ba      	ldr	r2, [r7, #8]
 8001da2:	4302      	orrs	r2, r0
 8001da4:	3340      	adds	r3, #64	; 0x40
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	440b      	add	r3, r1
 8001daa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3714      	adds	r7, #20
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	887a      	ldrh	r2, [r7, #2]
 8001dcc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2201      	movs	r2, #1
 8001dee:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e0e:	f043 0303 	orr.w	r3, r3, #3
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3714      	adds	r7, #20
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001e28:	4b04      	ldr	r3, [pc, #16]	; (8001e3c <HAL_PWREx_GetVoltageRange+0x18>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	40007000 	.word	0x40007000

08001e40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e4e:	d130      	bne.n	8001eb2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e50:	4b23      	ldr	r3, [pc, #140]	; (8001ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e5c:	d038      	beq.n	8001ed0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e5e:	4b20      	ldr	r3, [pc, #128]	; (8001ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e66:	4a1e      	ldr	r2, [pc, #120]	; (8001ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e6c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ee4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2232      	movs	r2, #50	; 0x32
 8001e74:	fb02 f303 	mul.w	r3, r2, r3
 8001e78:	4a1b      	ldr	r2, [pc, #108]	; (8001ee8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7e:	0c9b      	lsrs	r3, r3, #18
 8001e80:	3301      	adds	r3, #1
 8001e82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e84:	e002      	b.n	8001e8c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	3b01      	subs	r3, #1
 8001e8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e8c:	4b14      	ldr	r3, [pc, #80]	; (8001ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e8e:	695b      	ldr	r3, [r3, #20]
 8001e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e98:	d102      	bne.n	8001ea0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1f2      	bne.n	8001e86 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ea0:	4b0f      	ldr	r3, [pc, #60]	; (8001ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ea2:	695b      	ldr	r3, [r3, #20]
 8001ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ea8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eac:	d110      	bne.n	8001ed0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e00f      	b.n	8001ed2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001eb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001eba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ebe:	d007      	beq.n	8001ed0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ec0:	4b07      	ldr	r3, [pc, #28]	; (8001ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ec8:	4a05      	ldr	r2, [pc, #20]	; (8001ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ece:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3714      	adds	r7, #20
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	40007000 	.word	0x40007000
 8001ee4:	20000000 	.word	0x20000000
 8001ee8:	431bde83 	.word	0x431bde83

08001eec <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8001ef0:	4b05      	ldr	r3, [pc, #20]	; (8001f08 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	4a04      	ldr	r2, [pc, #16]	; (8001f08 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001ef6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001efa:	6053      	str	r3, [r2, #4]
}
 8001efc:	bf00      	nop
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	40007000 	.word	0x40007000

08001f0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b088      	sub	sp, #32
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e3ca      	b.n	80026b4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f1e:	4b97      	ldr	r3, [pc, #604]	; (800217c <HAL_RCC_OscConfig+0x270>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 030c 	and.w	r3, r3, #12
 8001f26:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f28:	4b94      	ldr	r3, [pc, #592]	; (800217c <HAL_RCC_OscConfig+0x270>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	f003 0303 	and.w	r3, r3, #3
 8001f30:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0310 	and.w	r3, r3, #16
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f000 80e4 	beq.w	8002108 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d007      	beq.n	8001f56 <HAL_RCC_OscConfig+0x4a>
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	2b0c      	cmp	r3, #12
 8001f4a:	f040 808b 	bne.w	8002064 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	f040 8087 	bne.w	8002064 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f56:	4b89      	ldr	r3, [pc, #548]	; (800217c <HAL_RCC_OscConfig+0x270>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d005      	beq.n	8001f6e <HAL_RCC_OscConfig+0x62>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e3a2      	b.n	80026b4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a1a      	ldr	r2, [r3, #32]
 8001f72:	4b82      	ldr	r3, [pc, #520]	; (800217c <HAL_RCC_OscConfig+0x270>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0308 	and.w	r3, r3, #8
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d004      	beq.n	8001f88 <HAL_RCC_OscConfig+0x7c>
 8001f7e:	4b7f      	ldr	r3, [pc, #508]	; (800217c <HAL_RCC_OscConfig+0x270>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f86:	e005      	b.n	8001f94 <HAL_RCC_OscConfig+0x88>
 8001f88:	4b7c      	ldr	r3, [pc, #496]	; (800217c <HAL_RCC_OscConfig+0x270>)
 8001f8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f8e:	091b      	lsrs	r3, r3, #4
 8001f90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d223      	bcs.n	8001fe0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f000 fd29 	bl	80029f4 <RCC_SetFlashLatencyFromMSIRange>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e383      	b.n	80026b4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fac:	4b73      	ldr	r3, [pc, #460]	; (800217c <HAL_RCC_OscConfig+0x270>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a72      	ldr	r2, [pc, #456]	; (800217c <HAL_RCC_OscConfig+0x270>)
 8001fb2:	f043 0308 	orr.w	r3, r3, #8
 8001fb6:	6013      	str	r3, [r2, #0]
 8001fb8:	4b70      	ldr	r3, [pc, #448]	; (800217c <HAL_RCC_OscConfig+0x270>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	496d      	ldr	r1, [pc, #436]	; (800217c <HAL_RCC_OscConfig+0x270>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fca:	4b6c      	ldr	r3, [pc, #432]	; (800217c <HAL_RCC_OscConfig+0x270>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	021b      	lsls	r3, r3, #8
 8001fd8:	4968      	ldr	r1, [pc, #416]	; (800217c <HAL_RCC_OscConfig+0x270>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	604b      	str	r3, [r1, #4]
 8001fde:	e025      	b.n	800202c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fe0:	4b66      	ldr	r3, [pc, #408]	; (800217c <HAL_RCC_OscConfig+0x270>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a65      	ldr	r2, [pc, #404]	; (800217c <HAL_RCC_OscConfig+0x270>)
 8001fe6:	f043 0308 	orr.w	r3, r3, #8
 8001fea:	6013      	str	r3, [r2, #0]
 8001fec:	4b63      	ldr	r3, [pc, #396]	; (800217c <HAL_RCC_OscConfig+0x270>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a1b      	ldr	r3, [r3, #32]
 8001ff8:	4960      	ldr	r1, [pc, #384]	; (800217c <HAL_RCC_OscConfig+0x270>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ffe:	4b5f      	ldr	r3, [pc, #380]	; (800217c <HAL_RCC_OscConfig+0x270>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	021b      	lsls	r3, r3, #8
 800200c:	495b      	ldr	r1, [pc, #364]	; (800217c <HAL_RCC_OscConfig+0x270>)
 800200e:	4313      	orrs	r3, r2
 8002010:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d109      	bne.n	800202c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	4618      	mov	r0, r3
 800201e:	f000 fce9 	bl	80029f4 <RCC_SetFlashLatencyFromMSIRange>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e343      	b.n	80026b4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800202c:	f000 fc4a 	bl	80028c4 <HAL_RCC_GetSysClockFreq>
 8002030:	4602      	mov	r2, r0
 8002032:	4b52      	ldr	r3, [pc, #328]	; (800217c <HAL_RCC_OscConfig+0x270>)
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	091b      	lsrs	r3, r3, #4
 8002038:	f003 030f 	and.w	r3, r3, #15
 800203c:	4950      	ldr	r1, [pc, #320]	; (8002180 <HAL_RCC_OscConfig+0x274>)
 800203e:	5ccb      	ldrb	r3, [r1, r3]
 8002040:	f003 031f 	and.w	r3, r3, #31
 8002044:	fa22 f303 	lsr.w	r3, r2, r3
 8002048:	4a4e      	ldr	r2, [pc, #312]	; (8002184 <HAL_RCC_OscConfig+0x278>)
 800204a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800204c:	4b4e      	ldr	r3, [pc, #312]	; (8002188 <HAL_RCC_OscConfig+0x27c>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4618      	mov	r0, r3
 8002052:	f7fe fa03 	bl	800045c <HAL_InitTick>
 8002056:	4603      	mov	r3, r0
 8002058:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800205a:	7bfb      	ldrb	r3, [r7, #15]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d052      	beq.n	8002106 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002060:	7bfb      	ldrb	r3, [r7, #15]
 8002062:	e327      	b.n	80026b4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d032      	beq.n	80020d2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800206c:	4b43      	ldr	r3, [pc, #268]	; (800217c <HAL_RCC_OscConfig+0x270>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a42      	ldr	r2, [pc, #264]	; (800217c <HAL_RCC_OscConfig+0x270>)
 8002072:	f043 0301 	orr.w	r3, r3, #1
 8002076:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002078:	f7fe fa40 	bl	80004fc <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002080:	f7fe fa3c 	bl	80004fc <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e310      	b.n	80026b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002092:	4b3a      	ldr	r3, [pc, #232]	; (800217c <HAL_RCC_OscConfig+0x270>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d0f0      	beq.n	8002080 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800209e:	4b37      	ldr	r3, [pc, #220]	; (800217c <HAL_RCC_OscConfig+0x270>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a36      	ldr	r2, [pc, #216]	; (800217c <HAL_RCC_OscConfig+0x270>)
 80020a4:	f043 0308 	orr.w	r3, r3, #8
 80020a8:	6013      	str	r3, [r2, #0]
 80020aa:	4b34      	ldr	r3, [pc, #208]	; (800217c <HAL_RCC_OscConfig+0x270>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a1b      	ldr	r3, [r3, #32]
 80020b6:	4931      	ldr	r1, [pc, #196]	; (800217c <HAL_RCC_OscConfig+0x270>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020bc:	4b2f      	ldr	r3, [pc, #188]	; (800217c <HAL_RCC_OscConfig+0x270>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	69db      	ldr	r3, [r3, #28]
 80020c8:	021b      	lsls	r3, r3, #8
 80020ca:	492c      	ldr	r1, [pc, #176]	; (800217c <HAL_RCC_OscConfig+0x270>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	604b      	str	r3, [r1, #4]
 80020d0:	e01a      	b.n	8002108 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80020d2:	4b2a      	ldr	r3, [pc, #168]	; (800217c <HAL_RCC_OscConfig+0x270>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a29      	ldr	r2, [pc, #164]	; (800217c <HAL_RCC_OscConfig+0x270>)
 80020d8:	f023 0301 	bic.w	r3, r3, #1
 80020dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020de:	f7fe fa0d 	bl	80004fc <HAL_GetTick>
 80020e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020e4:	e008      	b.n	80020f8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020e6:	f7fe fa09 	bl	80004fc <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d901      	bls.n	80020f8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e2dd      	b.n	80026b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020f8:	4b20      	ldr	r3, [pc, #128]	; (800217c <HAL_RCC_OscConfig+0x270>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d1f0      	bne.n	80020e6 <HAL_RCC_OscConfig+0x1da>
 8002104:	e000      	b.n	8002108 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002106:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	2b00      	cmp	r3, #0
 8002112:	d074      	beq.n	80021fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	2b08      	cmp	r3, #8
 8002118:	d005      	beq.n	8002126 <HAL_RCC_OscConfig+0x21a>
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	2b0c      	cmp	r3, #12
 800211e:	d10e      	bne.n	800213e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	2b03      	cmp	r3, #3
 8002124:	d10b      	bne.n	800213e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002126:	4b15      	ldr	r3, [pc, #84]	; (800217c <HAL_RCC_OscConfig+0x270>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d064      	beq.n	80021fc <HAL_RCC_OscConfig+0x2f0>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d160      	bne.n	80021fc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e2ba      	b.n	80026b4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002146:	d106      	bne.n	8002156 <HAL_RCC_OscConfig+0x24a>
 8002148:	4b0c      	ldr	r3, [pc, #48]	; (800217c <HAL_RCC_OscConfig+0x270>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a0b      	ldr	r2, [pc, #44]	; (800217c <HAL_RCC_OscConfig+0x270>)
 800214e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002152:	6013      	str	r3, [r2, #0]
 8002154:	e026      	b.n	80021a4 <HAL_RCC_OscConfig+0x298>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800215e:	d115      	bne.n	800218c <HAL_RCC_OscConfig+0x280>
 8002160:	4b06      	ldr	r3, [pc, #24]	; (800217c <HAL_RCC_OscConfig+0x270>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a05      	ldr	r2, [pc, #20]	; (800217c <HAL_RCC_OscConfig+0x270>)
 8002166:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800216a:	6013      	str	r3, [r2, #0]
 800216c:	4b03      	ldr	r3, [pc, #12]	; (800217c <HAL_RCC_OscConfig+0x270>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a02      	ldr	r2, [pc, #8]	; (800217c <HAL_RCC_OscConfig+0x270>)
 8002172:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002176:	6013      	str	r3, [r2, #0]
 8002178:	e014      	b.n	80021a4 <HAL_RCC_OscConfig+0x298>
 800217a:	bf00      	nop
 800217c:	40021000 	.word	0x40021000
 8002180:	08006cc8 	.word	0x08006cc8
 8002184:	20000000 	.word	0x20000000
 8002188:	20000004 	.word	0x20000004
 800218c:	4ba0      	ldr	r3, [pc, #640]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a9f      	ldr	r2, [pc, #636]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 8002192:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002196:	6013      	str	r3, [r2, #0]
 8002198:	4b9d      	ldr	r3, [pc, #628]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a9c      	ldr	r2, [pc, #624]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 800219e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d013      	beq.n	80021d4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ac:	f7fe f9a6 	bl	80004fc <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021b4:	f7fe f9a2 	bl	80004fc <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b64      	cmp	r3, #100	; 0x64
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e276      	b.n	80026b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021c6:	4b92      	ldr	r3, [pc, #584]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d0f0      	beq.n	80021b4 <HAL_RCC_OscConfig+0x2a8>
 80021d2:	e014      	b.n	80021fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d4:	f7fe f992 	bl	80004fc <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021dc:	f7fe f98e 	bl	80004fc <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b64      	cmp	r3, #100	; 0x64
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e262      	b.n	80026b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021ee:	4b88      	ldr	r3, [pc, #544]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1f0      	bne.n	80021dc <HAL_RCC_OscConfig+0x2d0>
 80021fa:	e000      	b.n	80021fe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d060      	beq.n	80022cc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	2b04      	cmp	r3, #4
 800220e:	d005      	beq.n	800221c <HAL_RCC_OscConfig+0x310>
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	2b0c      	cmp	r3, #12
 8002214:	d119      	bne.n	800224a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	2b02      	cmp	r3, #2
 800221a:	d116      	bne.n	800224a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800221c:	4b7c      	ldr	r3, [pc, #496]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002224:	2b00      	cmp	r3, #0
 8002226:	d005      	beq.n	8002234 <HAL_RCC_OscConfig+0x328>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d101      	bne.n	8002234 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e23f      	b.n	80026b4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002234:	4b76      	ldr	r3, [pc, #472]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	061b      	lsls	r3, r3, #24
 8002242:	4973      	ldr	r1, [pc, #460]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 8002244:	4313      	orrs	r3, r2
 8002246:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002248:	e040      	b.n	80022cc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d023      	beq.n	800229a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002252:	4b6f      	ldr	r3, [pc, #444]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a6e      	ldr	r2, [pc, #440]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 8002258:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800225c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225e:	f7fe f94d 	bl	80004fc <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002264:	e008      	b.n	8002278 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002266:	f7fe f949 	bl	80004fc <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e21d      	b.n	80026b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002278:	4b65      	ldr	r3, [pc, #404]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0f0      	beq.n	8002266 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002284:	4b62      	ldr	r3, [pc, #392]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	061b      	lsls	r3, r3, #24
 8002292:	495f      	ldr	r1, [pc, #380]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 8002294:	4313      	orrs	r3, r2
 8002296:	604b      	str	r3, [r1, #4]
 8002298:	e018      	b.n	80022cc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800229a:	4b5d      	ldr	r3, [pc, #372]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a5c      	ldr	r2, [pc, #368]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 80022a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a6:	f7fe f929 	bl	80004fc <HAL_GetTick>
 80022aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022ac:	e008      	b.n	80022c0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ae:	f7fe f925 	bl	80004fc <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e1f9      	b.n	80026b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022c0:	4b53      	ldr	r3, [pc, #332]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d1f0      	bne.n	80022ae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0308 	and.w	r3, r3, #8
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d03c      	beq.n	8002352 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	695b      	ldr	r3, [r3, #20]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d01c      	beq.n	800231a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022e0:	4b4b      	ldr	r3, [pc, #300]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 80022e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022e6:	4a4a      	ldr	r2, [pc, #296]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 80022e8:	f043 0301 	orr.w	r3, r3, #1
 80022ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f0:	f7fe f904 	bl	80004fc <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022f8:	f7fe f900 	bl	80004fc <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e1d4      	b.n	80026b4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800230a:	4b41      	ldr	r3, [pc, #260]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 800230c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d0ef      	beq.n	80022f8 <HAL_RCC_OscConfig+0x3ec>
 8002318:	e01b      	b.n	8002352 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800231a:	4b3d      	ldr	r3, [pc, #244]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 800231c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002320:	4a3b      	ldr	r2, [pc, #236]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 8002322:	f023 0301 	bic.w	r3, r3, #1
 8002326:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800232a:	f7fe f8e7 	bl	80004fc <HAL_GetTick>
 800232e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002330:	e008      	b.n	8002344 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002332:	f7fe f8e3 	bl	80004fc <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e1b7      	b.n	80026b4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002344:	4b32      	ldr	r3, [pc, #200]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 8002346:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1ef      	bne.n	8002332 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0304 	and.w	r3, r3, #4
 800235a:	2b00      	cmp	r3, #0
 800235c:	f000 80a6 	beq.w	80024ac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002360:	2300      	movs	r3, #0
 8002362:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002364:	4b2a      	ldr	r3, [pc, #168]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 8002366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d10d      	bne.n	800238c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002370:	4b27      	ldr	r3, [pc, #156]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 8002372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002374:	4a26      	ldr	r2, [pc, #152]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 8002376:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800237a:	6593      	str	r3, [r2, #88]	; 0x58
 800237c:	4b24      	ldr	r3, [pc, #144]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 800237e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002384:	60bb      	str	r3, [r7, #8]
 8002386:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002388:	2301      	movs	r3, #1
 800238a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800238c:	4b21      	ldr	r3, [pc, #132]	; (8002414 <HAL_RCC_OscConfig+0x508>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002394:	2b00      	cmp	r3, #0
 8002396:	d118      	bne.n	80023ca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002398:	4b1e      	ldr	r3, [pc, #120]	; (8002414 <HAL_RCC_OscConfig+0x508>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a1d      	ldr	r2, [pc, #116]	; (8002414 <HAL_RCC_OscConfig+0x508>)
 800239e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023a4:	f7fe f8aa 	bl	80004fc <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023aa:	e008      	b.n	80023be <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ac:	f7fe f8a6 	bl	80004fc <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e17a      	b.n	80026b4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023be:	4b15      	ldr	r3, [pc, #84]	; (8002414 <HAL_RCC_OscConfig+0x508>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d0f0      	beq.n	80023ac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d108      	bne.n	80023e4 <HAL_RCC_OscConfig+0x4d8>
 80023d2:	4b0f      	ldr	r3, [pc, #60]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 80023d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d8:	4a0d      	ldr	r2, [pc, #52]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 80023da:	f043 0301 	orr.w	r3, r3, #1
 80023de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023e2:	e029      	b.n	8002438 <HAL_RCC_OscConfig+0x52c>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	2b05      	cmp	r3, #5
 80023ea:	d115      	bne.n	8002418 <HAL_RCC_OscConfig+0x50c>
 80023ec:	4b08      	ldr	r3, [pc, #32]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 80023ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f2:	4a07      	ldr	r2, [pc, #28]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 80023f4:	f043 0304 	orr.w	r3, r3, #4
 80023f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023fc:	4b04      	ldr	r3, [pc, #16]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 80023fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002402:	4a03      	ldr	r2, [pc, #12]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 8002404:	f043 0301 	orr.w	r3, r3, #1
 8002408:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800240c:	e014      	b.n	8002438 <HAL_RCC_OscConfig+0x52c>
 800240e:	bf00      	nop
 8002410:	40021000 	.word	0x40021000
 8002414:	40007000 	.word	0x40007000
 8002418:	4b9c      	ldr	r3, [pc, #624]	; (800268c <HAL_RCC_OscConfig+0x780>)
 800241a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800241e:	4a9b      	ldr	r2, [pc, #620]	; (800268c <HAL_RCC_OscConfig+0x780>)
 8002420:	f023 0301 	bic.w	r3, r3, #1
 8002424:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002428:	4b98      	ldr	r3, [pc, #608]	; (800268c <HAL_RCC_OscConfig+0x780>)
 800242a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800242e:	4a97      	ldr	r2, [pc, #604]	; (800268c <HAL_RCC_OscConfig+0x780>)
 8002430:	f023 0304 	bic.w	r3, r3, #4
 8002434:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d016      	beq.n	800246e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002440:	f7fe f85c 	bl	80004fc <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002446:	e00a      	b.n	800245e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002448:	f7fe f858 	bl	80004fc <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	f241 3288 	movw	r2, #5000	; 0x1388
 8002456:	4293      	cmp	r3, r2
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e12a      	b.n	80026b4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800245e:	4b8b      	ldr	r3, [pc, #556]	; (800268c <HAL_RCC_OscConfig+0x780>)
 8002460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d0ed      	beq.n	8002448 <HAL_RCC_OscConfig+0x53c>
 800246c:	e015      	b.n	800249a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800246e:	f7fe f845 	bl	80004fc <HAL_GetTick>
 8002472:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002474:	e00a      	b.n	800248c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002476:	f7fe f841 	bl	80004fc <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	f241 3288 	movw	r2, #5000	; 0x1388
 8002484:	4293      	cmp	r3, r2
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e113      	b.n	80026b4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800248c:	4b7f      	ldr	r3, [pc, #508]	; (800268c <HAL_RCC_OscConfig+0x780>)
 800248e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1ed      	bne.n	8002476 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800249a:	7ffb      	ldrb	r3, [r7, #31]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d105      	bne.n	80024ac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024a0:	4b7a      	ldr	r3, [pc, #488]	; (800268c <HAL_RCC_OscConfig+0x780>)
 80024a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a4:	4a79      	ldr	r2, [pc, #484]	; (800268c <HAL_RCC_OscConfig+0x780>)
 80024a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024aa:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	f000 80fe 	beq.w	80026b2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	f040 80d0 	bne.w	8002660 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80024c0:	4b72      	ldr	r3, [pc, #456]	; (800268c <HAL_RCC_OscConfig+0x780>)
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	f003 0203 	and.w	r2, r3, #3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d130      	bne.n	8002536 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024de:	3b01      	subs	r3, #1
 80024e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d127      	bne.n	8002536 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d11f      	bne.n	8002536 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002500:	2a07      	cmp	r2, #7
 8002502:	bf14      	ite	ne
 8002504:	2201      	movne	r2, #1
 8002506:	2200      	moveq	r2, #0
 8002508:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800250a:	4293      	cmp	r3, r2
 800250c:	d113      	bne.n	8002536 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002518:	085b      	lsrs	r3, r3, #1
 800251a:	3b01      	subs	r3, #1
 800251c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800251e:	429a      	cmp	r2, r3
 8002520:	d109      	bne.n	8002536 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252c:	085b      	lsrs	r3, r3, #1
 800252e:	3b01      	subs	r3, #1
 8002530:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002532:	429a      	cmp	r2, r3
 8002534:	d06e      	beq.n	8002614 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	2b0c      	cmp	r3, #12
 800253a:	d069      	beq.n	8002610 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800253c:	4b53      	ldr	r3, [pc, #332]	; (800268c <HAL_RCC_OscConfig+0x780>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d105      	bne.n	8002554 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002548:	4b50      	ldr	r3, [pc, #320]	; (800268c <HAL_RCC_OscConfig+0x780>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e0ad      	b.n	80026b4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002558:	4b4c      	ldr	r3, [pc, #304]	; (800268c <HAL_RCC_OscConfig+0x780>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a4b      	ldr	r2, [pc, #300]	; (800268c <HAL_RCC_OscConfig+0x780>)
 800255e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002562:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002564:	f7fd ffca 	bl	80004fc <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800256c:	f7fd ffc6 	bl	80004fc <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e09a      	b.n	80026b4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800257e:	4b43      	ldr	r3, [pc, #268]	; (800268c <HAL_RCC_OscConfig+0x780>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1f0      	bne.n	800256c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800258a:	4b40      	ldr	r3, [pc, #256]	; (800268c <HAL_RCC_OscConfig+0x780>)
 800258c:	68da      	ldr	r2, [r3, #12]
 800258e:	4b40      	ldr	r3, [pc, #256]	; (8002690 <HAL_RCC_OscConfig+0x784>)
 8002590:	4013      	ands	r3, r2
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800259a:	3a01      	subs	r2, #1
 800259c:	0112      	lsls	r2, r2, #4
 800259e:	4311      	orrs	r1, r2
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80025a4:	0212      	lsls	r2, r2, #8
 80025a6:	4311      	orrs	r1, r2
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80025ac:	0852      	lsrs	r2, r2, #1
 80025ae:	3a01      	subs	r2, #1
 80025b0:	0552      	lsls	r2, r2, #21
 80025b2:	4311      	orrs	r1, r2
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80025b8:	0852      	lsrs	r2, r2, #1
 80025ba:	3a01      	subs	r2, #1
 80025bc:	0652      	lsls	r2, r2, #25
 80025be:	4311      	orrs	r1, r2
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80025c4:	0912      	lsrs	r2, r2, #4
 80025c6:	0452      	lsls	r2, r2, #17
 80025c8:	430a      	orrs	r2, r1
 80025ca:	4930      	ldr	r1, [pc, #192]	; (800268c <HAL_RCC_OscConfig+0x780>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80025d0:	4b2e      	ldr	r3, [pc, #184]	; (800268c <HAL_RCC_OscConfig+0x780>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a2d      	ldr	r2, [pc, #180]	; (800268c <HAL_RCC_OscConfig+0x780>)
 80025d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025da:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025dc:	4b2b      	ldr	r3, [pc, #172]	; (800268c <HAL_RCC_OscConfig+0x780>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	4a2a      	ldr	r2, [pc, #168]	; (800268c <HAL_RCC_OscConfig+0x780>)
 80025e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025e8:	f7fd ff88 	bl	80004fc <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025f0:	f7fd ff84 	bl	80004fc <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e058      	b.n	80026b4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002602:	4b22      	ldr	r3, [pc, #136]	; (800268c <HAL_RCC_OscConfig+0x780>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d0f0      	beq.n	80025f0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800260e:	e050      	b.n	80026b2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e04f      	b.n	80026b4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002614:	4b1d      	ldr	r3, [pc, #116]	; (800268c <HAL_RCC_OscConfig+0x780>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d148      	bne.n	80026b2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002620:	4b1a      	ldr	r3, [pc, #104]	; (800268c <HAL_RCC_OscConfig+0x780>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a19      	ldr	r2, [pc, #100]	; (800268c <HAL_RCC_OscConfig+0x780>)
 8002626:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800262a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800262c:	4b17      	ldr	r3, [pc, #92]	; (800268c <HAL_RCC_OscConfig+0x780>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	4a16      	ldr	r2, [pc, #88]	; (800268c <HAL_RCC_OscConfig+0x780>)
 8002632:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002636:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002638:	f7fd ff60 	bl	80004fc <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002640:	f7fd ff5c 	bl	80004fc <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e030      	b.n	80026b4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002652:	4b0e      	ldr	r3, [pc, #56]	; (800268c <HAL_RCC_OscConfig+0x780>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d0f0      	beq.n	8002640 <HAL_RCC_OscConfig+0x734>
 800265e:	e028      	b.n	80026b2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	2b0c      	cmp	r3, #12
 8002664:	d023      	beq.n	80026ae <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002666:	4b09      	ldr	r3, [pc, #36]	; (800268c <HAL_RCC_OscConfig+0x780>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a08      	ldr	r2, [pc, #32]	; (800268c <HAL_RCC_OscConfig+0x780>)
 800266c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002670:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002672:	f7fd ff43 	bl	80004fc <HAL_GetTick>
 8002676:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002678:	e00c      	b.n	8002694 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800267a:	f7fd ff3f 	bl	80004fc <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	2b02      	cmp	r3, #2
 8002686:	d905      	bls.n	8002694 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e013      	b.n	80026b4 <HAL_RCC_OscConfig+0x7a8>
 800268c:	40021000 	.word	0x40021000
 8002690:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002694:	4b09      	ldr	r3, [pc, #36]	; (80026bc <HAL_RCC_OscConfig+0x7b0>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1ec      	bne.n	800267a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80026a0:	4b06      	ldr	r3, [pc, #24]	; (80026bc <HAL_RCC_OscConfig+0x7b0>)
 80026a2:	68da      	ldr	r2, [r3, #12]
 80026a4:	4905      	ldr	r1, [pc, #20]	; (80026bc <HAL_RCC_OscConfig+0x7b0>)
 80026a6:	4b06      	ldr	r3, [pc, #24]	; (80026c0 <HAL_RCC_OscConfig+0x7b4>)
 80026a8:	4013      	ands	r3, r2
 80026aa:	60cb      	str	r3, [r1, #12]
 80026ac:	e001      	b.n	80026b2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e000      	b.n	80026b4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3720      	adds	r7, #32
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	40021000 	.word	0x40021000
 80026c0:	feeefffc 	.word	0xfeeefffc

080026c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d101      	bne.n	80026d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e0e7      	b.n	80028a8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026d8:	4b75      	ldr	r3, [pc, #468]	; (80028b0 <HAL_RCC_ClockConfig+0x1ec>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0307 	and.w	r3, r3, #7
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d910      	bls.n	8002708 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026e6:	4b72      	ldr	r3, [pc, #456]	; (80028b0 <HAL_RCC_ClockConfig+0x1ec>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f023 0207 	bic.w	r2, r3, #7
 80026ee:	4970      	ldr	r1, [pc, #448]	; (80028b0 <HAL_RCC_ClockConfig+0x1ec>)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026f6:	4b6e      	ldr	r3, [pc, #440]	; (80028b0 <HAL_RCC_ClockConfig+0x1ec>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0307 	and.w	r3, r3, #7
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	429a      	cmp	r2, r3
 8002702:	d001      	beq.n	8002708 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e0cf      	b.n	80028a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d010      	beq.n	8002736 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	4b66      	ldr	r3, [pc, #408]	; (80028b4 <HAL_RCC_ClockConfig+0x1f0>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002720:	429a      	cmp	r2, r3
 8002722:	d908      	bls.n	8002736 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002724:	4b63      	ldr	r3, [pc, #396]	; (80028b4 <HAL_RCC_ClockConfig+0x1f0>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	4960      	ldr	r1, [pc, #384]	; (80028b4 <HAL_RCC_ClockConfig+0x1f0>)
 8002732:	4313      	orrs	r3, r2
 8002734:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	2b00      	cmp	r3, #0
 8002740:	d04c      	beq.n	80027dc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2b03      	cmp	r3, #3
 8002748:	d107      	bne.n	800275a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800274a:	4b5a      	ldr	r3, [pc, #360]	; (80028b4 <HAL_RCC_ClockConfig+0x1f0>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d121      	bne.n	800279a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e0a6      	b.n	80028a8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b02      	cmp	r3, #2
 8002760:	d107      	bne.n	8002772 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002762:	4b54      	ldr	r3, [pc, #336]	; (80028b4 <HAL_RCC_ClockConfig+0x1f0>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d115      	bne.n	800279a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e09a      	b.n	80028a8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d107      	bne.n	800278a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800277a:	4b4e      	ldr	r3, [pc, #312]	; (80028b4 <HAL_RCC_ClockConfig+0x1f0>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d109      	bne.n	800279a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e08e      	b.n	80028a8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800278a:	4b4a      	ldr	r3, [pc, #296]	; (80028b4 <HAL_RCC_ClockConfig+0x1f0>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e086      	b.n	80028a8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800279a:	4b46      	ldr	r3, [pc, #280]	; (80028b4 <HAL_RCC_ClockConfig+0x1f0>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f023 0203 	bic.w	r2, r3, #3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	4943      	ldr	r1, [pc, #268]	; (80028b4 <HAL_RCC_ClockConfig+0x1f0>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027ac:	f7fd fea6 	bl	80004fc <HAL_GetTick>
 80027b0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027b2:	e00a      	b.n	80027ca <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027b4:	f7fd fea2 	bl	80004fc <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e06e      	b.n	80028a8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ca:	4b3a      	ldr	r3, [pc, #232]	; (80028b4 <HAL_RCC_ClockConfig+0x1f0>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 020c 	and.w	r2, r3, #12
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	429a      	cmp	r2, r3
 80027da:	d1eb      	bne.n	80027b4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d010      	beq.n	800280a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	4b31      	ldr	r3, [pc, #196]	; (80028b4 <HAL_RCC_ClockConfig+0x1f0>)
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d208      	bcs.n	800280a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027f8:	4b2e      	ldr	r3, [pc, #184]	; (80028b4 <HAL_RCC_ClockConfig+0x1f0>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	492b      	ldr	r1, [pc, #172]	; (80028b4 <HAL_RCC_ClockConfig+0x1f0>)
 8002806:	4313      	orrs	r3, r2
 8002808:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800280a:	4b29      	ldr	r3, [pc, #164]	; (80028b0 <HAL_RCC_ClockConfig+0x1ec>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0307 	and.w	r3, r3, #7
 8002812:	683a      	ldr	r2, [r7, #0]
 8002814:	429a      	cmp	r2, r3
 8002816:	d210      	bcs.n	800283a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002818:	4b25      	ldr	r3, [pc, #148]	; (80028b0 <HAL_RCC_ClockConfig+0x1ec>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f023 0207 	bic.w	r2, r3, #7
 8002820:	4923      	ldr	r1, [pc, #140]	; (80028b0 <HAL_RCC_ClockConfig+0x1ec>)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	4313      	orrs	r3, r2
 8002826:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002828:	4b21      	ldr	r3, [pc, #132]	; (80028b0 <HAL_RCC_ClockConfig+0x1ec>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	429a      	cmp	r2, r3
 8002834:	d001      	beq.n	800283a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e036      	b.n	80028a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0304 	and.w	r3, r3, #4
 8002842:	2b00      	cmp	r3, #0
 8002844:	d008      	beq.n	8002858 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002846:	4b1b      	ldr	r3, [pc, #108]	; (80028b4 <HAL_RCC_ClockConfig+0x1f0>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	4918      	ldr	r1, [pc, #96]	; (80028b4 <HAL_RCC_ClockConfig+0x1f0>)
 8002854:	4313      	orrs	r3, r2
 8002856:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0308 	and.w	r3, r3, #8
 8002860:	2b00      	cmp	r3, #0
 8002862:	d009      	beq.n	8002878 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002864:	4b13      	ldr	r3, [pc, #76]	; (80028b4 <HAL_RCC_ClockConfig+0x1f0>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	4910      	ldr	r1, [pc, #64]	; (80028b4 <HAL_RCC_ClockConfig+0x1f0>)
 8002874:	4313      	orrs	r3, r2
 8002876:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002878:	f000 f824 	bl	80028c4 <HAL_RCC_GetSysClockFreq>
 800287c:	4602      	mov	r2, r0
 800287e:	4b0d      	ldr	r3, [pc, #52]	; (80028b4 <HAL_RCC_ClockConfig+0x1f0>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	091b      	lsrs	r3, r3, #4
 8002884:	f003 030f 	and.w	r3, r3, #15
 8002888:	490b      	ldr	r1, [pc, #44]	; (80028b8 <HAL_RCC_ClockConfig+0x1f4>)
 800288a:	5ccb      	ldrb	r3, [r1, r3]
 800288c:	f003 031f 	and.w	r3, r3, #31
 8002890:	fa22 f303 	lsr.w	r3, r2, r3
 8002894:	4a09      	ldr	r2, [pc, #36]	; (80028bc <HAL_RCC_ClockConfig+0x1f8>)
 8002896:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002898:	4b09      	ldr	r3, [pc, #36]	; (80028c0 <HAL_RCC_ClockConfig+0x1fc>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4618      	mov	r0, r3
 800289e:	f7fd fddd 	bl	800045c <HAL_InitTick>
 80028a2:	4603      	mov	r3, r0
 80028a4:	72fb      	strb	r3, [r7, #11]

  return status;
 80028a6:	7afb      	ldrb	r3, [r7, #11]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3710      	adds	r7, #16
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	40022000 	.word	0x40022000
 80028b4:	40021000 	.word	0x40021000
 80028b8:	08006cc8 	.word	0x08006cc8
 80028bc:	20000000 	.word	0x20000000
 80028c0:	20000004 	.word	0x20000004

080028c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b089      	sub	sp, #36	; 0x24
 80028c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80028ca:	2300      	movs	r3, #0
 80028cc:	61fb      	str	r3, [r7, #28]
 80028ce:	2300      	movs	r3, #0
 80028d0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028d2:	4b3e      	ldr	r3, [pc, #248]	; (80029cc <HAL_RCC_GetSysClockFreq+0x108>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f003 030c 	and.w	r3, r3, #12
 80028da:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028dc:	4b3b      	ldr	r3, [pc, #236]	; (80029cc <HAL_RCC_GetSysClockFreq+0x108>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	f003 0303 	and.w	r3, r3, #3
 80028e4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d005      	beq.n	80028f8 <HAL_RCC_GetSysClockFreq+0x34>
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	2b0c      	cmp	r3, #12
 80028f0:	d121      	bne.n	8002936 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d11e      	bne.n	8002936 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80028f8:	4b34      	ldr	r3, [pc, #208]	; (80029cc <HAL_RCC_GetSysClockFreq+0x108>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0308 	and.w	r3, r3, #8
 8002900:	2b00      	cmp	r3, #0
 8002902:	d107      	bne.n	8002914 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002904:	4b31      	ldr	r3, [pc, #196]	; (80029cc <HAL_RCC_GetSysClockFreq+0x108>)
 8002906:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800290a:	0a1b      	lsrs	r3, r3, #8
 800290c:	f003 030f 	and.w	r3, r3, #15
 8002910:	61fb      	str	r3, [r7, #28]
 8002912:	e005      	b.n	8002920 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002914:	4b2d      	ldr	r3, [pc, #180]	; (80029cc <HAL_RCC_GetSysClockFreq+0x108>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	091b      	lsrs	r3, r3, #4
 800291a:	f003 030f 	and.w	r3, r3, #15
 800291e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002920:	4a2b      	ldr	r2, [pc, #172]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002928:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d10d      	bne.n	800294c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002934:	e00a      	b.n	800294c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	2b04      	cmp	r3, #4
 800293a:	d102      	bne.n	8002942 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800293c:	4b25      	ldr	r3, [pc, #148]	; (80029d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800293e:	61bb      	str	r3, [r7, #24]
 8002940:	e004      	b.n	800294c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	2b08      	cmp	r3, #8
 8002946:	d101      	bne.n	800294c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002948:	4b23      	ldr	r3, [pc, #140]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x114>)
 800294a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	2b0c      	cmp	r3, #12
 8002950:	d134      	bne.n	80029bc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002952:	4b1e      	ldr	r3, [pc, #120]	; (80029cc <HAL_RCC_GetSysClockFreq+0x108>)
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	f003 0303 	and.w	r3, r3, #3
 800295a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	2b02      	cmp	r3, #2
 8002960:	d003      	beq.n	800296a <HAL_RCC_GetSysClockFreq+0xa6>
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	2b03      	cmp	r3, #3
 8002966:	d003      	beq.n	8002970 <HAL_RCC_GetSysClockFreq+0xac>
 8002968:	e005      	b.n	8002976 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800296a:	4b1a      	ldr	r3, [pc, #104]	; (80029d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800296c:	617b      	str	r3, [r7, #20]
      break;
 800296e:	e005      	b.n	800297c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002970:	4b19      	ldr	r3, [pc, #100]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002972:	617b      	str	r3, [r7, #20]
      break;
 8002974:	e002      	b.n	800297c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	617b      	str	r3, [r7, #20]
      break;
 800297a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800297c:	4b13      	ldr	r3, [pc, #76]	; (80029cc <HAL_RCC_GetSysClockFreq+0x108>)
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	091b      	lsrs	r3, r3, #4
 8002982:	f003 0307 	and.w	r3, r3, #7
 8002986:	3301      	adds	r3, #1
 8002988:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800298a:	4b10      	ldr	r3, [pc, #64]	; (80029cc <HAL_RCC_GetSysClockFreq+0x108>)
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	0a1b      	lsrs	r3, r3, #8
 8002990:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002994:	697a      	ldr	r2, [r7, #20]
 8002996:	fb03 f202 	mul.w	r2, r3, r2
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029a2:	4b0a      	ldr	r3, [pc, #40]	; (80029cc <HAL_RCC_GetSysClockFreq+0x108>)
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	0e5b      	lsrs	r3, r3, #25
 80029a8:	f003 0303 	and.w	r3, r3, #3
 80029ac:	3301      	adds	r3, #1
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80029bc:	69bb      	ldr	r3, [r7, #24]
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3724      	adds	r7, #36	; 0x24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	40021000 	.word	0x40021000
 80029d0:	08006cd8 	.word	0x08006cd8
 80029d4:	00f42400 	.word	0x00f42400
 80029d8:	007a1200 	.word	0x007a1200

080029dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029e0:	4b03      	ldr	r3, [pc, #12]	; (80029f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80029e2:	681b      	ldr	r3, [r3, #0]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	20000000 	.word	0x20000000

080029f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80029fc:	2300      	movs	r3, #0
 80029fe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a00:	4b2a      	ldr	r3, [pc, #168]	; (8002aac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d003      	beq.n	8002a14 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002a0c:	f7ff fa0a 	bl	8001e24 <HAL_PWREx_GetVoltageRange>
 8002a10:	6178      	str	r0, [r7, #20]
 8002a12:	e014      	b.n	8002a3e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a14:	4b25      	ldr	r3, [pc, #148]	; (8002aac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a18:	4a24      	ldr	r2, [pc, #144]	; (8002aac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a1e:	6593      	str	r3, [r2, #88]	; 0x58
 8002a20:	4b22      	ldr	r3, [pc, #136]	; (8002aac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a28:	60fb      	str	r3, [r7, #12]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002a2c:	f7ff f9fa 	bl	8001e24 <HAL_PWREx_GetVoltageRange>
 8002a30:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a32:	4b1e      	ldr	r3, [pc, #120]	; (8002aac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a36:	4a1d      	ldr	r2, [pc, #116]	; (8002aac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a3c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a44:	d10b      	bne.n	8002a5e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2b80      	cmp	r3, #128	; 0x80
 8002a4a:	d919      	bls.n	8002a80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2ba0      	cmp	r3, #160	; 0xa0
 8002a50:	d902      	bls.n	8002a58 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a52:	2302      	movs	r3, #2
 8002a54:	613b      	str	r3, [r7, #16]
 8002a56:	e013      	b.n	8002a80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a58:	2301      	movs	r3, #1
 8002a5a:	613b      	str	r3, [r7, #16]
 8002a5c:	e010      	b.n	8002a80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2b80      	cmp	r3, #128	; 0x80
 8002a62:	d902      	bls.n	8002a6a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002a64:	2303      	movs	r3, #3
 8002a66:	613b      	str	r3, [r7, #16]
 8002a68:	e00a      	b.n	8002a80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2b80      	cmp	r3, #128	; 0x80
 8002a6e:	d102      	bne.n	8002a76 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a70:	2302      	movs	r3, #2
 8002a72:	613b      	str	r3, [r7, #16]
 8002a74:	e004      	b.n	8002a80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2b70      	cmp	r3, #112	; 0x70
 8002a7a:	d101      	bne.n	8002a80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a80:	4b0b      	ldr	r3, [pc, #44]	; (8002ab0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f023 0207 	bic.w	r2, r3, #7
 8002a88:	4909      	ldr	r1, [pc, #36]	; (8002ab0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002a90:	4b07      	ldr	r3, [pc, #28]	; (8002ab0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0307 	and.w	r3, r3, #7
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d001      	beq.n	8002aa2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e000      	b.n	8002aa4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3718      	adds	r7, #24
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	40022000 	.word	0x40022000

08002ab4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b086      	sub	sp, #24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002abc:	2300      	movs	r3, #0
 8002abe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d041      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ad4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ad8:	d02a      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002ada:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ade:	d824      	bhi.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ae0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ae4:	d008      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002ae6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002aea:	d81e      	bhi.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00a      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002af0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002af4:	d010      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002af6:	e018      	b.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002af8:	4b86      	ldr	r3, [pc, #536]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	4a85      	ldr	r2, [pc, #532]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002afe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b02:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b04:	e015      	b.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	3304      	adds	r3, #4
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f000 fabb 	bl	8003088 <RCCEx_PLLSAI1_Config>
 8002b12:	4603      	mov	r3, r0
 8002b14:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b16:	e00c      	b.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	3320      	adds	r3, #32
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f000 fba6 	bl	8003270 <RCCEx_PLLSAI2_Config>
 8002b24:	4603      	mov	r3, r0
 8002b26:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b28:	e003      	b.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	74fb      	strb	r3, [r7, #19]
      break;
 8002b2e:	e000      	b.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002b30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b32:	7cfb      	ldrb	r3, [r7, #19]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d10b      	bne.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b38:	4b76      	ldr	r3, [pc, #472]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b3e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b46:	4973      	ldr	r1, [pc, #460]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002b4e:	e001      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b50:	7cfb      	ldrb	r3, [r7, #19]
 8002b52:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d041      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b64:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002b68:	d02a      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002b6a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002b6e:	d824      	bhi.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002b70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b74:	d008      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002b76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b7a:	d81e      	bhi.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d00a      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002b80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b84:	d010      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b86:	e018      	b.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b88:	4b62      	ldr	r3, [pc, #392]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	4a61      	ldr	r2, [pc, #388]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b92:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b94:	e015      	b.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	3304      	adds	r3, #4
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f000 fa73 	bl	8003088 <RCCEx_PLLSAI1_Config>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ba6:	e00c      	b.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3320      	adds	r3, #32
 8002bac:	2100      	movs	r1, #0
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f000 fb5e 	bl	8003270 <RCCEx_PLLSAI2_Config>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002bb8:	e003      	b.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	74fb      	strb	r3, [r7, #19]
      break;
 8002bbe:	e000      	b.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002bc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bc2:	7cfb      	ldrb	r3, [r7, #19]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d10b      	bne.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002bc8:	4b52      	ldr	r3, [pc, #328]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bce:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bd6:	494f      	ldr	r1, [pc, #316]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002bde:	e001      	b.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002be0:	7cfb      	ldrb	r3, [r7, #19]
 8002be2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f000 80a0 	beq.w	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002bf6:	4b47      	ldr	r3, [pc, #284]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002c02:	2301      	movs	r3, #1
 8002c04:	e000      	b.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002c06:	2300      	movs	r3, #0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00d      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c0c:	4b41      	ldr	r3, [pc, #260]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c10:	4a40      	ldr	r2, [pc, #256]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c16:	6593      	str	r3, [r2, #88]	; 0x58
 8002c18:	4b3e      	ldr	r3, [pc, #248]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c20:	60bb      	str	r3, [r7, #8]
 8002c22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c24:	2301      	movs	r3, #1
 8002c26:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c28:	4b3b      	ldr	r3, [pc, #236]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a3a      	ldr	r2, [pc, #232]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c32:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c34:	f7fd fc62 	bl	80004fc <HAL_GetTick>
 8002c38:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c3a:	e009      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c3c:	f7fd fc5e 	bl	80004fc <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d902      	bls.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	74fb      	strb	r3, [r7, #19]
        break;
 8002c4e:	e005      	b.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c50:	4b31      	ldr	r3, [pc, #196]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d0ef      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002c5c:	7cfb      	ldrb	r3, [r7, #19]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d15c      	bne.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c62:	4b2c      	ldr	r3, [pc, #176]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c6c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d01f      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c7a:	697a      	ldr	r2, [r7, #20]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d019      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c80:	4b24      	ldr	r3, [pc, #144]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c8a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c8c:	4b21      	ldr	r3, [pc, #132]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c92:	4a20      	ldr	r2, [pc, #128]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c9c:	4b1d      	ldr	r3, [pc, #116]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca2:	4a1c      	ldr	r2, [pc, #112]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ca4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ca8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002cac:	4a19      	ldr	r2, [pc, #100]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d016      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cbe:	f7fd fc1d 	bl	80004fc <HAL_GetTick>
 8002cc2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cc4:	e00b      	b.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cc6:	f7fd fc19 	bl	80004fc <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d902      	bls.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	74fb      	strb	r3, [r7, #19]
            break;
 8002cdc:	e006      	b.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cde:	4b0d      	ldr	r3, [pc, #52]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d0ec      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002cec:	7cfb      	ldrb	r3, [r7, #19]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10c      	bne.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cf2:	4b08      	ldr	r3, [pc, #32]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d02:	4904      	ldr	r1, [pc, #16]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002d0a:	e009      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d0c:	7cfb      	ldrb	r3, [r7, #19]
 8002d0e:	74bb      	strb	r3, [r7, #18]
 8002d10:	e006      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002d12:	bf00      	nop
 8002d14:	40021000 	.word	0x40021000
 8002d18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d1c:	7cfb      	ldrb	r3, [r7, #19]
 8002d1e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d20:	7c7b      	ldrb	r3, [r7, #17]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d105      	bne.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d26:	4b9e      	ldr	r3, [pc, #632]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d2a:	4a9d      	ldr	r2, [pc, #628]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d30:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00a      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d3e:	4b98      	ldr	r3, [pc, #608]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d44:	f023 0203 	bic.w	r2, r3, #3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d4c:	4994      	ldr	r1, [pc, #592]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d00a      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d60:	4b8f      	ldr	r3, [pc, #572]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d66:	f023 020c 	bic.w	r2, r3, #12
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d6e:	498c      	ldr	r1, [pc, #560]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0304 	and.w	r3, r3, #4
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00a      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d82:	4b87      	ldr	r3, [pc, #540]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d88:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d90:	4983      	ldr	r1, [pc, #524]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0308 	and.w	r3, r3, #8
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00a      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002da4:	4b7e      	ldr	r3, [pc, #504]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002daa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db2:	497b      	ldr	r1, [pc, #492]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0310 	and.w	r3, r3, #16
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00a      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002dc6:	4b76      	ldr	r3, [pc, #472]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dcc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dd4:	4972      	ldr	r1, [pc, #456]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0320 	and.w	r3, r3, #32
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00a      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002de8:	4b6d      	ldr	r3, [pc, #436]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002df6:	496a      	ldr	r1, [pc, #424]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00a      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e0a:	4b65      	ldr	r3, [pc, #404]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e10:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e18:	4961      	ldr	r1, [pc, #388]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00a      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e2c:	4b5c      	ldr	r3, [pc, #368]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e3a:	4959      	ldr	r1, [pc, #356]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00a      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e4e:	4b54      	ldr	r3, [pc, #336]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e54:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e5c:	4950      	ldr	r1, [pc, #320]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d00a      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e70:	4b4b      	ldr	r3, [pc, #300]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e76:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e7e:	4948      	ldr	r1, [pc, #288]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00a      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e92:	4b43      	ldr	r3, [pc, #268]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea0:	493f      	ldr	r1, [pc, #252]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d028      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002eb4:	4b3a      	ldr	r3, [pc, #232]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ec2:	4937      	ldr	r1, [pc, #220]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ece:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ed2:	d106      	bne.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ed4:	4b32      	ldr	r3, [pc, #200]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	4a31      	ldr	r2, [pc, #196]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ede:	60d3      	str	r3, [r2, #12]
 8002ee0:	e011      	b.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ee6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002eea:	d10c      	bne.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	3304      	adds	r3, #4
 8002ef0:	2101      	movs	r1, #1
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f000 f8c8 	bl	8003088 <RCCEx_PLLSAI1_Config>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002efc:	7cfb      	ldrb	r3, [r7, #19]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002f02:	7cfb      	ldrb	r3, [r7, #19]
 8002f04:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d028      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f12:	4b23      	ldr	r3, [pc, #140]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f18:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f20:	491f      	ldr	r1, [pc, #124]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f30:	d106      	bne.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f32:	4b1b      	ldr	r3, [pc, #108]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	4a1a      	ldr	r2, [pc, #104]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f3c:	60d3      	str	r3, [r2, #12]
 8002f3e:	e011      	b.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f48:	d10c      	bne.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	3304      	adds	r3, #4
 8002f4e:	2101      	movs	r1, #1
 8002f50:	4618      	mov	r0, r3
 8002f52:	f000 f899 	bl	8003088 <RCCEx_PLLSAI1_Config>
 8002f56:	4603      	mov	r3, r0
 8002f58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f5a:	7cfb      	ldrb	r3, [r7, #19]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d001      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002f60:	7cfb      	ldrb	r3, [r7, #19]
 8002f62:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d02b      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f70:	4b0b      	ldr	r3, [pc, #44]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f76:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f7e:	4908      	ldr	r1, [pc, #32]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f8e:	d109      	bne.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f90:	4b03      	ldr	r3, [pc, #12]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	4a02      	ldr	r2, [pc, #8]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f9a:	60d3      	str	r3, [r2, #12]
 8002f9c:	e014      	b.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002f9e:	bf00      	nop
 8002fa0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fa8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fac:	d10c      	bne.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	3304      	adds	r3, #4
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f000 f867 	bl	8003088 <RCCEx_PLLSAI1_Config>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fbe:	7cfb      	ldrb	r3, [r7, #19]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d001      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002fc4:	7cfb      	ldrb	r3, [r7, #19]
 8002fc6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d02f      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002fd4:	4b2b      	ldr	r3, [pc, #172]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fda:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fe2:	4928      	ldr	r1, [pc, #160]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ff2:	d10d      	bne.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	3304      	adds	r3, #4
 8002ff8:	2102      	movs	r1, #2
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f000 f844 	bl	8003088 <RCCEx_PLLSAI1_Config>
 8003000:	4603      	mov	r3, r0
 8003002:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003004:	7cfb      	ldrb	r3, [r7, #19]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d014      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800300a:	7cfb      	ldrb	r3, [r7, #19]
 800300c:	74bb      	strb	r3, [r7, #18]
 800300e:	e011      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003014:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003018:	d10c      	bne.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	3320      	adds	r3, #32
 800301e:	2102      	movs	r1, #2
 8003020:	4618      	mov	r0, r3
 8003022:	f000 f925 	bl	8003270 <RCCEx_PLLSAI2_Config>
 8003026:	4603      	mov	r3, r0
 8003028:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800302a:	7cfb      	ldrb	r3, [r7, #19]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003030:	7cfb      	ldrb	r3, [r7, #19]
 8003032:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d00a      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003040:	4b10      	ldr	r3, [pc, #64]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003046:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800304e:	490d      	ldr	r1, [pc, #52]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003050:	4313      	orrs	r3, r2
 8003052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00b      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003062:	4b08      	ldr	r3, [pc, #32]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003068:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003072:	4904      	ldr	r1, [pc, #16]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003074:	4313      	orrs	r3, r2
 8003076:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800307a:	7cbb      	ldrb	r3, [r7, #18]
}
 800307c:	4618      	mov	r0, r3
 800307e:	3718      	adds	r7, #24
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	40021000 	.word	0x40021000

08003088 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003092:	2300      	movs	r3, #0
 8003094:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003096:	4b75      	ldr	r3, [pc, #468]	; (800326c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	f003 0303 	and.w	r3, r3, #3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d018      	beq.n	80030d4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80030a2:	4b72      	ldr	r3, [pc, #456]	; (800326c <RCCEx_PLLSAI1_Config+0x1e4>)
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	f003 0203 	and.w	r2, r3, #3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d10d      	bne.n	80030ce <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
       ||
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d009      	beq.n	80030ce <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80030ba:	4b6c      	ldr	r3, [pc, #432]	; (800326c <RCCEx_PLLSAI1_Config+0x1e4>)
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	091b      	lsrs	r3, r3, #4
 80030c0:	f003 0307 	and.w	r3, r3, #7
 80030c4:	1c5a      	adds	r2, r3, #1
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
       ||
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d047      	beq.n	800315e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	73fb      	strb	r3, [r7, #15]
 80030d2:	e044      	b.n	800315e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2b03      	cmp	r3, #3
 80030da:	d018      	beq.n	800310e <RCCEx_PLLSAI1_Config+0x86>
 80030dc:	2b03      	cmp	r3, #3
 80030de:	d825      	bhi.n	800312c <RCCEx_PLLSAI1_Config+0xa4>
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d002      	beq.n	80030ea <RCCEx_PLLSAI1_Config+0x62>
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d009      	beq.n	80030fc <RCCEx_PLLSAI1_Config+0x74>
 80030e8:	e020      	b.n	800312c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80030ea:	4b60      	ldr	r3, [pc, #384]	; (800326c <RCCEx_PLLSAI1_Config+0x1e4>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d11d      	bne.n	8003132 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030fa:	e01a      	b.n	8003132 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80030fc:	4b5b      	ldr	r3, [pc, #364]	; (800326c <RCCEx_PLLSAI1_Config+0x1e4>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003104:	2b00      	cmp	r3, #0
 8003106:	d116      	bne.n	8003136 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800310c:	e013      	b.n	8003136 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800310e:	4b57      	ldr	r3, [pc, #348]	; (800326c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10f      	bne.n	800313a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800311a:	4b54      	ldr	r3, [pc, #336]	; (800326c <RCCEx_PLLSAI1_Config+0x1e4>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d109      	bne.n	800313a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800312a:	e006      	b.n	800313a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	73fb      	strb	r3, [r7, #15]
      break;
 8003130:	e004      	b.n	800313c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003132:	bf00      	nop
 8003134:	e002      	b.n	800313c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003136:	bf00      	nop
 8003138:	e000      	b.n	800313c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800313a:	bf00      	nop
    }

    if(status == HAL_OK)
 800313c:	7bfb      	ldrb	r3, [r7, #15]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d10d      	bne.n	800315e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003142:	4b4a      	ldr	r3, [pc, #296]	; (800326c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6819      	ldr	r1, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	3b01      	subs	r3, #1
 8003154:	011b      	lsls	r3, r3, #4
 8003156:	430b      	orrs	r3, r1
 8003158:	4944      	ldr	r1, [pc, #272]	; (800326c <RCCEx_PLLSAI1_Config+0x1e4>)
 800315a:	4313      	orrs	r3, r2
 800315c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800315e:	7bfb      	ldrb	r3, [r7, #15]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d17d      	bne.n	8003260 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003164:	4b41      	ldr	r3, [pc, #260]	; (800326c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a40      	ldr	r2, [pc, #256]	; (800326c <RCCEx_PLLSAI1_Config+0x1e4>)
 800316a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800316e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003170:	f7fd f9c4 	bl	80004fc <HAL_GetTick>
 8003174:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003176:	e009      	b.n	800318c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003178:	f7fd f9c0 	bl	80004fc <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b02      	cmp	r3, #2
 8003184:	d902      	bls.n	800318c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	73fb      	strb	r3, [r7, #15]
        break;
 800318a:	e005      	b.n	8003198 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800318c:	4b37      	ldr	r3, [pc, #220]	; (800326c <RCCEx_PLLSAI1_Config+0x1e4>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d1ef      	bne.n	8003178 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003198:	7bfb      	ldrb	r3, [r7, #15]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d160      	bne.n	8003260 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d111      	bne.n	80031c8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031a4:	4b31      	ldr	r3, [pc, #196]	; (800326c <RCCEx_PLLSAI1_Config+0x1e4>)
 80031a6:	691b      	ldr	r3, [r3, #16]
 80031a8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80031ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	6892      	ldr	r2, [r2, #8]
 80031b4:	0211      	lsls	r1, r2, #8
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	68d2      	ldr	r2, [r2, #12]
 80031ba:	0912      	lsrs	r2, r2, #4
 80031bc:	0452      	lsls	r2, r2, #17
 80031be:	430a      	orrs	r2, r1
 80031c0:	492a      	ldr	r1, [pc, #168]	; (800326c <RCCEx_PLLSAI1_Config+0x1e4>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	610b      	str	r3, [r1, #16]
 80031c6:	e027      	b.n	8003218 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d112      	bne.n	80031f4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031ce:	4b27      	ldr	r3, [pc, #156]	; (800326c <RCCEx_PLLSAI1_Config+0x1e4>)
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80031d6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	6892      	ldr	r2, [r2, #8]
 80031de:	0211      	lsls	r1, r2, #8
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	6912      	ldr	r2, [r2, #16]
 80031e4:	0852      	lsrs	r2, r2, #1
 80031e6:	3a01      	subs	r2, #1
 80031e8:	0552      	lsls	r2, r2, #21
 80031ea:	430a      	orrs	r2, r1
 80031ec:	491f      	ldr	r1, [pc, #124]	; (800326c <RCCEx_PLLSAI1_Config+0x1e4>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	610b      	str	r3, [r1, #16]
 80031f2:	e011      	b.n	8003218 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031f4:	4b1d      	ldr	r3, [pc, #116]	; (800326c <RCCEx_PLLSAI1_Config+0x1e4>)
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80031fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	6892      	ldr	r2, [r2, #8]
 8003204:	0211      	lsls	r1, r2, #8
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	6952      	ldr	r2, [r2, #20]
 800320a:	0852      	lsrs	r2, r2, #1
 800320c:	3a01      	subs	r2, #1
 800320e:	0652      	lsls	r2, r2, #25
 8003210:	430a      	orrs	r2, r1
 8003212:	4916      	ldr	r1, [pc, #88]	; (800326c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003214:	4313      	orrs	r3, r2
 8003216:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003218:	4b14      	ldr	r3, [pc, #80]	; (800326c <RCCEx_PLLSAI1_Config+0x1e4>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a13      	ldr	r2, [pc, #76]	; (800326c <RCCEx_PLLSAI1_Config+0x1e4>)
 800321e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003222:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003224:	f7fd f96a 	bl	80004fc <HAL_GetTick>
 8003228:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800322a:	e009      	b.n	8003240 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800322c:	f7fd f966 	bl	80004fc <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b02      	cmp	r3, #2
 8003238:	d902      	bls.n	8003240 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	73fb      	strb	r3, [r7, #15]
          break;
 800323e:	e005      	b.n	800324c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003240:	4b0a      	ldr	r3, [pc, #40]	; (800326c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d0ef      	beq.n	800322c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800324c:	7bfb      	ldrb	r3, [r7, #15]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d106      	bne.n	8003260 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003252:	4b06      	ldr	r3, [pc, #24]	; (800326c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003254:	691a      	ldr	r2, [r3, #16]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	4904      	ldr	r1, [pc, #16]	; (800326c <RCCEx_PLLSAI1_Config+0x1e4>)
 800325c:	4313      	orrs	r3, r2
 800325e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003260:	7bfb      	ldrb	r3, [r7, #15]
}
 8003262:	4618      	mov	r0, r3
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	40021000 	.word	0x40021000

08003270 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800327a:	2300      	movs	r3, #0
 800327c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800327e:	4b6a      	ldr	r3, [pc, #424]	; (8003428 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	f003 0303 	and.w	r3, r3, #3
 8003286:	2b00      	cmp	r3, #0
 8003288:	d018      	beq.n	80032bc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800328a:	4b67      	ldr	r3, [pc, #412]	; (8003428 <RCCEx_PLLSAI2_Config+0x1b8>)
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	f003 0203 	and.w	r2, r3, #3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	429a      	cmp	r2, r3
 8003298:	d10d      	bne.n	80032b6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
       ||
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d009      	beq.n	80032b6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80032a2:	4b61      	ldr	r3, [pc, #388]	; (8003428 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	091b      	lsrs	r3, r3, #4
 80032a8:	f003 0307 	and.w	r3, r3, #7
 80032ac:	1c5a      	adds	r2, r3, #1
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
       ||
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d047      	beq.n	8003346 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	73fb      	strb	r3, [r7, #15]
 80032ba:	e044      	b.n	8003346 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2b03      	cmp	r3, #3
 80032c2:	d018      	beq.n	80032f6 <RCCEx_PLLSAI2_Config+0x86>
 80032c4:	2b03      	cmp	r3, #3
 80032c6:	d825      	bhi.n	8003314 <RCCEx_PLLSAI2_Config+0xa4>
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d002      	beq.n	80032d2 <RCCEx_PLLSAI2_Config+0x62>
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d009      	beq.n	80032e4 <RCCEx_PLLSAI2_Config+0x74>
 80032d0:	e020      	b.n	8003314 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80032d2:	4b55      	ldr	r3, [pc, #340]	; (8003428 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d11d      	bne.n	800331a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032e2:	e01a      	b.n	800331a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80032e4:	4b50      	ldr	r3, [pc, #320]	; (8003428 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d116      	bne.n	800331e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032f4:	e013      	b.n	800331e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80032f6:	4b4c      	ldr	r3, [pc, #304]	; (8003428 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10f      	bne.n	8003322 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003302:	4b49      	ldr	r3, [pc, #292]	; (8003428 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d109      	bne.n	8003322 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003312:	e006      	b.n	8003322 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	73fb      	strb	r3, [r7, #15]
      break;
 8003318:	e004      	b.n	8003324 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800331a:	bf00      	nop
 800331c:	e002      	b.n	8003324 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800331e:	bf00      	nop
 8003320:	e000      	b.n	8003324 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003322:	bf00      	nop
    }

    if(status == HAL_OK)
 8003324:	7bfb      	ldrb	r3, [r7, #15]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d10d      	bne.n	8003346 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800332a:	4b3f      	ldr	r3, [pc, #252]	; (8003428 <RCCEx_PLLSAI2_Config+0x1b8>)
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6819      	ldr	r1, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	3b01      	subs	r3, #1
 800333c:	011b      	lsls	r3, r3, #4
 800333e:	430b      	orrs	r3, r1
 8003340:	4939      	ldr	r1, [pc, #228]	; (8003428 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003342:	4313      	orrs	r3, r2
 8003344:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003346:	7bfb      	ldrb	r3, [r7, #15]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d167      	bne.n	800341c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800334c:	4b36      	ldr	r3, [pc, #216]	; (8003428 <RCCEx_PLLSAI2_Config+0x1b8>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a35      	ldr	r2, [pc, #212]	; (8003428 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003352:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003356:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003358:	f7fd f8d0 	bl	80004fc <HAL_GetTick>
 800335c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800335e:	e009      	b.n	8003374 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003360:	f7fd f8cc 	bl	80004fc <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b02      	cmp	r3, #2
 800336c:	d902      	bls.n	8003374 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	73fb      	strb	r3, [r7, #15]
        break;
 8003372:	e005      	b.n	8003380 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003374:	4b2c      	ldr	r3, [pc, #176]	; (8003428 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d1ef      	bne.n	8003360 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003380:	7bfb      	ldrb	r3, [r7, #15]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d14a      	bne.n	800341c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d111      	bne.n	80033b0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800338c:	4b26      	ldr	r3, [pc, #152]	; (8003428 <RCCEx_PLLSAI2_Config+0x1b8>)
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003394:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	6892      	ldr	r2, [r2, #8]
 800339c:	0211      	lsls	r1, r2, #8
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	68d2      	ldr	r2, [r2, #12]
 80033a2:	0912      	lsrs	r2, r2, #4
 80033a4:	0452      	lsls	r2, r2, #17
 80033a6:	430a      	orrs	r2, r1
 80033a8:	491f      	ldr	r1, [pc, #124]	; (8003428 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	614b      	str	r3, [r1, #20]
 80033ae:	e011      	b.n	80033d4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80033b0:	4b1d      	ldr	r3, [pc, #116]	; (8003428 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80033b8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	6892      	ldr	r2, [r2, #8]
 80033c0:	0211      	lsls	r1, r2, #8
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	6912      	ldr	r2, [r2, #16]
 80033c6:	0852      	lsrs	r2, r2, #1
 80033c8:	3a01      	subs	r2, #1
 80033ca:	0652      	lsls	r2, r2, #25
 80033cc:	430a      	orrs	r2, r1
 80033ce:	4916      	ldr	r1, [pc, #88]	; (8003428 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80033d4:	4b14      	ldr	r3, [pc, #80]	; (8003428 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a13      	ldr	r2, [pc, #76]	; (8003428 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033de:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e0:	f7fd f88c 	bl	80004fc <HAL_GetTick>
 80033e4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80033e6:	e009      	b.n	80033fc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80033e8:	f7fd f888 	bl	80004fc <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d902      	bls.n	80033fc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	73fb      	strb	r3, [r7, #15]
          break;
 80033fa:	e005      	b.n	8003408 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80033fc:	4b0a      	ldr	r3, [pc, #40]	; (8003428 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d0ef      	beq.n	80033e8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003408:	7bfb      	ldrb	r3, [r7, #15]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d106      	bne.n	800341c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800340e:	4b06      	ldr	r3, [pc, #24]	; (8003428 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003410:	695a      	ldr	r2, [r3, #20]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	4904      	ldr	r1, [pc, #16]	; (8003428 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003418:	4313      	orrs	r3, r2
 800341a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800341c:	7bfb      	ldrb	r3, [r7, #15]
}
 800341e:	4618      	mov	r0, r3
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	40021000 	.word	0x40021000

0800342c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800342c:	b084      	sub	sp, #16
 800342e:	b580      	push	{r7, lr}
 8003430:	b084      	sub	sp, #16
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
 8003436:	f107 001c 	add.w	r0, r7, #28
 800343a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f001 faf6 	bl	8004a3c <USB_CoreReset>
 8003450:	4603      	mov	r3, r0
 8003452:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8003454:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003456:	2b00      	cmp	r3, #0
 8003458:	d106      	bne.n	8003468 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800345e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	639a      	str	r2, [r3, #56]	; 0x38
 8003466:	e005      	b.n	8003474 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800346c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8003474:	7bfb      	ldrb	r3, [r7, #15]
}
 8003476:	4618      	mov	r0, r3
 8003478:	3710      	adds	r7, #16
 800347a:	46bd      	mov	sp, r7
 800347c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003480:	b004      	add	sp, #16
 8003482:	4770      	bx	lr

08003484 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003484:	b480      	push	{r7}
 8003486:	b087      	sub	sp, #28
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	4613      	mov	r3, r2
 8003490:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003492:	79fb      	ldrb	r3, [r7, #7]
 8003494:	2b02      	cmp	r3, #2
 8003496:	d165      	bne.n	8003564 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	4a3e      	ldr	r2, [pc, #248]	; (8003594 <USB_SetTurnaroundTime+0x110>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d906      	bls.n	80034ae <USB_SetTurnaroundTime+0x2a>
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	4a3d      	ldr	r2, [pc, #244]	; (8003598 <USB_SetTurnaroundTime+0x114>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d202      	bcs.n	80034ae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80034a8:	230f      	movs	r3, #15
 80034aa:	617b      	str	r3, [r7, #20]
 80034ac:	e05c      	b.n	8003568 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	4a39      	ldr	r2, [pc, #228]	; (8003598 <USB_SetTurnaroundTime+0x114>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d306      	bcc.n	80034c4 <USB_SetTurnaroundTime+0x40>
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	4a38      	ldr	r2, [pc, #224]	; (800359c <USB_SetTurnaroundTime+0x118>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d202      	bcs.n	80034c4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80034be:	230e      	movs	r3, #14
 80034c0:	617b      	str	r3, [r7, #20]
 80034c2:	e051      	b.n	8003568 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	4a35      	ldr	r2, [pc, #212]	; (800359c <USB_SetTurnaroundTime+0x118>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d306      	bcc.n	80034da <USB_SetTurnaroundTime+0x56>
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	4a34      	ldr	r2, [pc, #208]	; (80035a0 <USB_SetTurnaroundTime+0x11c>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d202      	bcs.n	80034da <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80034d4:	230d      	movs	r3, #13
 80034d6:	617b      	str	r3, [r7, #20]
 80034d8:	e046      	b.n	8003568 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	4a30      	ldr	r2, [pc, #192]	; (80035a0 <USB_SetTurnaroundTime+0x11c>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d306      	bcc.n	80034f0 <USB_SetTurnaroundTime+0x6c>
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	4a2f      	ldr	r2, [pc, #188]	; (80035a4 <USB_SetTurnaroundTime+0x120>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d802      	bhi.n	80034f0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80034ea:	230c      	movs	r3, #12
 80034ec:	617b      	str	r3, [r7, #20]
 80034ee:	e03b      	b.n	8003568 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	4a2c      	ldr	r2, [pc, #176]	; (80035a4 <USB_SetTurnaroundTime+0x120>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d906      	bls.n	8003506 <USB_SetTurnaroundTime+0x82>
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	4a2b      	ldr	r2, [pc, #172]	; (80035a8 <USB_SetTurnaroundTime+0x124>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d802      	bhi.n	8003506 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003500:	230b      	movs	r3, #11
 8003502:	617b      	str	r3, [r7, #20]
 8003504:	e030      	b.n	8003568 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	4a27      	ldr	r2, [pc, #156]	; (80035a8 <USB_SetTurnaroundTime+0x124>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d906      	bls.n	800351c <USB_SetTurnaroundTime+0x98>
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	4a26      	ldr	r2, [pc, #152]	; (80035ac <USB_SetTurnaroundTime+0x128>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d802      	bhi.n	800351c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003516:	230a      	movs	r3, #10
 8003518:	617b      	str	r3, [r7, #20]
 800351a:	e025      	b.n	8003568 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	4a23      	ldr	r2, [pc, #140]	; (80035ac <USB_SetTurnaroundTime+0x128>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d906      	bls.n	8003532 <USB_SetTurnaroundTime+0xae>
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	4a22      	ldr	r2, [pc, #136]	; (80035b0 <USB_SetTurnaroundTime+0x12c>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d202      	bcs.n	8003532 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800352c:	2309      	movs	r3, #9
 800352e:	617b      	str	r3, [r7, #20]
 8003530:	e01a      	b.n	8003568 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	4a1e      	ldr	r2, [pc, #120]	; (80035b0 <USB_SetTurnaroundTime+0x12c>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d306      	bcc.n	8003548 <USB_SetTurnaroundTime+0xc4>
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	4a1d      	ldr	r2, [pc, #116]	; (80035b4 <USB_SetTurnaroundTime+0x130>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d802      	bhi.n	8003548 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003542:	2308      	movs	r3, #8
 8003544:	617b      	str	r3, [r7, #20]
 8003546:	e00f      	b.n	8003568 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	4a1a      	ldr	r2, [pc, #104]	; (80035b4 <USB_SetTurnaroundTime+0x130>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d906      	bls.n	800355e <USB_SetTurnaroundTime+0xda>
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	4a19      	ldr	r2, [pc, #100]	; (80035b8 <USB_SetTurnaroundTime+0x134>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d202      	bcs.n	800355e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003558:	2307      	movs	r3, #7
 800355a:	617b      	str	r3, [r7, #20]
 800355c:	e004      	b.n	8003568 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800355e:	2306      	movs	r3, #6
 8003560:	617b      	str	r3, [r7, #20]
 8003562:	e001      	b.n	8003568 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003564:	2309      	movs	r3, #9
 8003566:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	68da      	ldr	r2, [r3, #12]
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	029b      	lsls	r3, r3, #10
 800357c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003580:	431a      	orrs	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	371c      	adds	r7, #28
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr
 8003594:	00d8acbf 	.word	0x00d8acbf
 8003598:	00e4e1c0 	.word	0x00e4e1c0
 800359c:	00f42400 	.word	0x00f42400
 80035a0:	01067380 	.word	0x01067380
 80035a4:	011a499f 	.word	0x011a499f
 80035a8:	01312cff 	.word	0x01312cff
 80035ac:	014ca43f 	.word	0x014ca43f
 80035b0:	016e3600 	.word	0x016e3600
 80035b4:	01a6ab1f 	.word	0x01a6ab1f
 80035b8:	01e84800 	.word	0x01e84800

080035bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f043 0201 	orr.w	r2, r3, #1
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	370c      	adds	r7, #12
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr

080035de <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80035de:	b480      	push	{r7}
 80035e0:	b083      	sub	sp, #12
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f023 0201 	bic.w	r2, r3, #1
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	460b      	mov	r3, r1
 800360a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800360c:	2300      	movs	r3, #0
 800360e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800361c:	78fb      	ldrb	r3, [r7, #3]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d115      	bne.n	800364e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800362e:	2001      	movs	r0, #1
 8003630:	f7fc ff70 	bl	8000514 <HAL_Delay>
      ms++;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	3301      	adds	r3, #1
 8003638:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f001 f985 	bl	800494a <USB_GetMode>
 8003640:	4603      	mov	r3, r0
 8003642:	2b01      	cmp	r3, #1
 8003644:	d01e      	beq.n	8003684 <USB_SetCurrentMode+0x84>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2b31      	cmp	r3, #49	; 0x31
 800364a:	d9f0      	bls.n	800362e <USB_SetCurrentMode+0x2e>
 800364c:	e01a      	b.n	8003684 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800364e:	78fb      	ldrb	r3, [r7, #3]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d115      	bne.n	8003680 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003660:	2001      	movs	r0, #1
 8003662:	f7fc ff57 	bl	8000514 <HAL_Delay>
      ms++;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	3301      	adds	r3, #1
 800366a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f001 f96c 	bl	800494a <USB_GetMode>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d005      	beq.n	8003684 <USB_SetCurrentMode+0x84>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2b31      	cmp	r3, #49	; 0x31
 800367c:	d9f0      	bls.n	8003660 <USB_SetCurrentMode+0x60>
 800367e:	e001      	b.n	8003684 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e005      	b.n	8003690 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2b32      	cmp	r3, #50	; 0x32
 8003688:	d101      	bne.n	800368e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e000      	b.n	8003690 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	3710      	adds	r7, #16
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003698:	b084      	sub	sp, #16
 800369a:	b580      	push	{r7, lr}
 800369c:	b086      	sub	sp, #24
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
 80036a2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80036a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80036aa:	2300      	movs	r3, #0
 80036ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80036b2:	2300      	movs	r3, #0
 80036b4:	613b      	str	r3, [r7, #16]
 80036b6:	e009      	b.n	80036cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	3340      	adds	r3, #64	; 0x40
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	4413      	add	r3, r2
 80036c2:	2200      	movs	r2, #0
 80036c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	3301      	adds	r3, #1
 80036ca:	613b      	str	r3, [r7, #16]
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	2b0e      	cmp	r3, #14
 80036d0:	d9f2      	bls.n	80036b8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80036d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d11c      	bne.n	8003712 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036e6:	f043 0302 	orr.w	r3, r3, #2
 80036ea:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	601a      	str	r2, [r3, #0]
 8003710:	e005      	b.n	800371e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003716:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003724:	461a      	mov	r2, r3
 8003726:	2300      	movs	r3, #0
 8003728:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003730:	4619      	mov	r1, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003738:	461a      	mov	r2, r3
 800373a:	680b      	ldr	r3, [r1, #0]
 800373c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800373e:	2103      	movs	r1, #3
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 f959 	bl	80039f8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003746:	2110      	movs	r1, #16
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f000 f8f1 	bl	8003930 <USB_FlushTxFifo>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 f91d 	bl	8003998 <USB_FlushRxFifo>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d001      	beq.n	8003768 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800376e:	461a      	mov	r2, r3
 8003770:	2300      	movs	r3, #0
 8003772:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800377a:	461a      	mov	r2, r3
 800377c:	2300      	movs	r3, #0
 800377e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003786:	461a      	mov	r2, r3
 8003788:	2300      	movs	r3, #0
 800378a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800378c:	2300      	movs	r3, #0
 800378e:	613b      	str	r3, [r7, #16]
 8003790:	e043      	b.n	800381a <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	015a      	lsls	r2, r3, #5
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	4413      	add	r3, r2
 800379a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037a8:	d118      	bne.n	80037dc <USB_DevInit+0x144>
    {
      if (i == 0U)
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d10a      	bne.n	80037c6 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	015a      	lsls	r2, r3, #5
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	4413      	add	r3, r2
 80037b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037bc:	461a      	mov	r2, r3
 80037be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80037c2:	6013      	str	r3, [r2, #0]
 80037c4:	e013      	b.n	80037ee <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	015a      	lsls	r2, r3, #5
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	4413      	add	r3, r2
 80037ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037d2:	461a      	mov	r2, r3
 80037d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80037d8:	6013      	str	r3, [r2, #0]
 80037da:	e008      	b.n	80037ee <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	015a      	lsls	r2, r3, #5
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	4413      	add	r3, r2
 80037e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037e8:	461a      	mov	r2, r3
 80037ea:	2300      	movs	r3, #0
 80037ec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	015a      	lsls	r2, r3, #5
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	4413      	add	r3, r2
 80037f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037fa:	461a      	mov	r2, r3
 80037fc:	2300      	movs	r3, #0
 80037fe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	015a      	lsls	r2, r3, #5
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	4413      	add	r3, r2
 8003808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800380c:	461a      	mov	r2, r3
 800380e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003812:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	3301      	adds	r3, #1
 8003818:	613b      	str	r3, [r7, #16]
 800381a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381c:	693a      	ldr	r2, [r7, #16]
 800381e:	429a      	cmp	r2, r3
 8003820:	d3b7      	bcc.n	8003792 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003822:	2300      	movs	r3, #0
 8003824:	613b      	str	r3, [r7, #16]
 8003826:	e043      	b.n	80038b0 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	015a      	lsls	r2, r3, #5
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	4413      	add	r3, r2
 8003830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800383a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800383e:	d118      	bne.n	8003872 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d10a      	bne.n	800385c <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	015a      	lsls	r2, r3, #5
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	4413      	add	r3, r2
 800384e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003852:	461a      	mov	r2, r3
 8003854:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003858:	6013      	str	r3, [r2, #0]
 800385a:	e013      	b.n	8003884 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	015a      	lsls	r2, r3, #5
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	4413      	add	r3, r2
 8003864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003868:	461a      	mov	r2, r3
 800386a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800386e:	6013      	str	r3, [r2, #0]
 8003870:	e008      	b.n	8003884 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	015a      	lsls	r2, r3, #5
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	4413      	add	r3, r2
 800387a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800387e:	461a      	mov	r2, r3
 8003880:	2300      	movs	r3, #0
 8003882:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	015a      	lsls	r2, r3, #5
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	4413      	add	r3, r2
 800388c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003890:	461a      	mov	r2, r3
 8003892:	2300      	movs	r3, #0
 8003894:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	015a      	lsls	r2, r3, #5
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	4413      	add	r3, r2
 800389e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038a2:	461a      	mov	r2, r3
 80038a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80038a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	3301      	adds	r3, #1
 80038ae:	613b      	str	r3, [r7, #16]
 80038b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b2:	693a      	ldr	r2, [r7, #16]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d3b7      	bcc.n	8003828 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038ca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80038d8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	f043 0210 	orr.w	r2, r3, #16
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	699a      	ldr	r2, [r3, #24]
 80038ea:	4b10      	ldr	r3, [pc, #64]	; (800392c <USB_DevInit+0x294>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80038f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d005      	beq.n	8003904 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	f043 0208 	orr.w	r2, r3, #8
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003904:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003906:	2b01      	cmp	r3, #1
 8003908:	d107      	bne.n	800391a <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003912:	f043 0304 	orr.w	r3, r3, #4
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800391a:	7dfb      	ldrb	r3, [r7, #23]
}
 800391c:	4618      	mov	r0, r3
 800391e:	3718      	adds	r7, #24
 8003920:	46bd      	mov	sp, r7
 8003922:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003926:	b004      	add	sp, #16
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	803c3800 	.word	0x803c3800

08003930 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003930:	b480      	push	{r7}
 8003932:	b085      	sub	sp, #20
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800393a:	2300      	movs	r3, #0
 800393c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	3301      	adds	r3, #1
 8003942:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	4a13      	ldr	r2, [pc, #76]	; (8003994 <USB_FlushTxFifo+0x64>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d901      	bls.n	8003950 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e01b      	b.n	8003988 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	2b00      	cmp	r3, #0
 8003956:	daf2      	bge.n	800393e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003958:	2300      	movs	r3, #0
 800395a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	019b      	lsls	r3, r3, #6
 8003960:	f043 0220 	orr.w	r2, r3, #32
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	3301      	adds	r3, #1
 800396c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	4a08      	ldr	r2, [pc, #32]	; (8003994 <USB_FlushTxFifo+0x64>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d901      	bls.n	800397a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e006      	b.n	8003988 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	f003 0320 	and.w	r3, r3, #32
 8003982:	2b20      	cmp	r3, #32
 8003984:	d0f0      	beq.n	8003968 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	3714      	adds	r7, #20
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr
 8003994:	00030d40 	.word	0x00030d40

08003998 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80039a0:	2300      	movs	r3, #0
 80039a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	3301      	adds	r3, #1
 80039a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	4a11      	ldr	r2, [pc, #68]	; (80039f4 <USB_FlushRxFifo+0x5c>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d901      	bls.n	80039b6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e018      	b.n	80039e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	daf2      	bge.n	80039a4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80039be:	2300      	movs	r3, #0
 80039c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2210      	movs	r2, #16
 80039c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	3301      	adds	r3, #1
 80039cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	4a08      	ldr	r2, [pc, #32]	; (80039f4 <USB_FlushRxFifo+0x5c>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d901      	bls.n	80039da <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e006      	b.n	80039e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	f003 0310 	and.w	r3, r3, #16
 80039e2:	2b10      	cmp	r3, #16
 80039e4:	d0f0      	beq.n	80039c8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3714      	adds	r7, #20
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr
 80039f4:	00030d40 	.word	0x00030d40

080039f8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b085      	sub	sp, #20
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	460b      	mov	r3, r1
 8003a02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	78fb      	ldrb	r3, [r7, #3]
 8003a12:	68f9      	ldr	r1, [r7, #12]
 8003a14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3714      	adds	r7, #20
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr

08003a2a <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	b087      	sub	sp, #28
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f003 0306 	and.w	r3, r3, #6
 8003a42:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d002      	beq.n	8003a50 <USB_GetDevSpeed+0x26>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2b06      	cmp	r3, #6
 8003a4e:	d102      	bne.n	8003a56 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003a50:	2302      	movs	r3, #2
 8003a52:	75fb      	strb	r3, [r7, #23]
 8003a54:	e001      	b.n	8003a5a <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8003a56:	230f      	movs	r3, #15
 8003a58:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003a5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	371c      	adds	r7, #28
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	785b      	ldrb	r3, [r3, #1]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d13a      	bne.n	8003afa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a8a:	69da      	ldr	r2, [r3, #28]
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	f003 030f 	and.w	r3, r3, #15
 8003a94:	2101      	movs	r1, #1
 8003a96:	fa01 f303 	lsl.w	r3, r1, r3
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	68f9      	ldr	r1, [r7, #12]
 8003a9e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	015a      	lsls	r2, r3, #5
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	4413      	add	r3, r2
 8003aae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d155      	bne.n	8003b68 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	015a      	lsls	r2, r3, #5
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	791b      	ldrb	r3, [r3, #4]
 8003ad6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ad8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	059b      	lsls	r3, r3, #22
 8003ade:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	68ba      	ldr	r2, [r7, #8]
 8003ae4:	0151      	lsls	r1, r2, #5
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	440a      	add	r2, r1
 8003aea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003aee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003af2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003af6:	6013      	str	r3, [r2, #0]
 8003af8:	e036      	b.n	8003b68 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b00:	69da      	ldr	r2, [r3, #28]
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	f003 030f 	and.w	r3, r3, #15
 8003b0a:	2101      	movs	r1, #1
 8003b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b10:	041b      	lsls	r3, r3, #16
 8003b12:	68f9      	ldr	r1, [r7, #12]
 8003b14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	015a      	lsls	r2, r3, #5
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	4413      	add	r3, r2
 8003b24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d11a      	bne.n	8003b68 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	015a      	lsls	r2, r3, #5
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	4413      	add	r3, r2
 8003b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	791b      	ldrb	r3, [r3, #4]
 8003b4c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003b4e:	430b      	orrs	r3, r1
 8003b50:	4313      	orrs	r3, r2
 8003b52:	68ba      	ldr	r2, [r7, #8]
 8003b54:	0151      	lsls	r1, r2, #5
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	440a      	add	r2, r1
 8003b5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b66:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3714      	adds	r7, #20
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
	...

08003b78 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b085      	sub	sp, #20
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	785b      	ldrb	r3, [r3, #1]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d161      	bne.n	8003c58 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	015a      	lsls	r2, r3, #5
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ba6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003baa:	d11f      	bne.n	8003bec <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	015a      	lsls	r2, r3, #5
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	0151      	lsls	r1, r2, #5
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	440a      	add	r2, r1
 8003bc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bc6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003bca:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	015a      	lsls	r2, r3, #5
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68ba      	ldr	r2, [r7, #8]
 8003bdc:	0151      	lsls	r1, r2, #5
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	440a      	add	r2, r1
 8003be2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003be6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003bea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	f003 030f 	and.w	r3, r3, #15
 8003bfc:	2101      	movs	r1, #1
 8003bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	43db      	mvns	r3, r3
 8003c06:	68f9      	ldr	r1, [r7, #12]
 8003c08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c16:	69da      	ldr	r2, [r3, #28]
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	f003 030f 	and.w	r3, r3, #15
 8003c20:	2101      	movs	r1, #1
 8003c22:	fa01 f303 	lsl.w	r3, r1, r3
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	43db      	mvns	r3, r3
 8003c2a:	68f9      	ldr	r1, [r7, #12]
 8003c2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c30:	4013      	ands	r3, r2
 8003c32:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	015a      	lsls	r2, r3, #5
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	0159      	lsls	r1, r3, #5
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	440b      	add	r3, r1
 8003c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c4e:	4619      	mov	r1, r3
 8003c50:	4b35      	ldr	r3, [pc, #212]	; (8003d28 <USB_DeactivateEndpoint+0x1b0>)
 8003c52:	4013      	ands	r3, r2
 8003c54:	600b      	str	r3, [r1, #0]
 8003c56:	e060      	b.n	8003d1a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	015a      	lsls	r2, r3, #5
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	4413      	add	r3, r2
 8003c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c6e:	d11f      	bne.n	8003cb0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	015a      	lsls	r2, r3, #5
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	4413      	add	r3, r2
 8003c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68ba      	ldr	r2, [r7, #8]
 8003c80:	0151      	lsls	r1, r2, #5
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	440a      	add	r2, r1
 8003c86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c8a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c8e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	015a      	lsls	r2, r3, #5
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	4413      	add	r3, r2
 8003c98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68ba      	ldr	r2, [r7, #8]
 8003ca0:	0151      	lsls	r1, r2, #5
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	440a      	add	r2, r1
 8003ca6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003caa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003cae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	f003 030f 	and.w	r3, r3, #15
 8003cc0:	2101      	movs	r1, #1
 8003cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc6:	041b      	lsls	r3, r3, #16
 8003cc8:	43db      	mvns	r3, r3
 8003cca:	68f9      	ldr	r1, [r7, #12]
 8003ccc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cda:	69da      	ldr	r2, [r3, #28]
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	f003 030f 	and.w	r3, r3, #15
 8003ce4:	2101      	movs	r1, #1
 8003ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cea:	041b      	lsls	r3, r3, #16
 8003cec:	43db      	mvns	r3, r3
 8003cee:	68f9      	ldr	r1, [r7, #12]
 8003cf0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	015a      	lsls	r2, r3, #5
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	4413      	add	r3, r2
 8003d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	0159      	lsls	r1, r3, #5
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	440b      	add	r3, r1
 8003d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d12:	4619      	mov	r1, r3
 8003d14:	4b05      	ldr	r3, [pc, #20]	; (8003d2c <USB_DeactivateEndpoint+0x1b4>)
 8003d16:	4013      	ands	r3, r2
 8003d18:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3714      	adds	r7, #20
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr
 8003d28:	ec337800 	.word	0xec337800
 8003d2c:	eff37800 	.word	0xeff37800

08003d30 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b086      	sub	sp, #24
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	785b      	ldrb	r3, [r3, #1]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	f040 810a 	bne.w	8003f62 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d132      	bne.n	8003dbc <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	015a      	lsls	r2, r3, #5
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d62:	691b      	ldr	r3, [r3, #16]
 8003d64:	693a      	ldr	r2, [r7, #16]
 8003d66:	0151      	lsls	r1, r2, #5
 8003d68:	697a      	ldr	r2, [r7, #20]
 8003d6a:	440a      	add	r2, r1
 8003d6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d70:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003d74:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003d78:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	015a      	lsls	r2, r3, #5
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	4413      	add	r3, r2
 8003d82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	0151      	lsls	r1, r2, #5
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	440a      	add	r2, r1
 8003d90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d98:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	015a      	lsls	r2, r3, #5
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	4413      	add	r3, r2
 8003da2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	0151      	lsls	r1, r2, #5
 8003dac:	697a      	ldr	r2, [r7, #20]
 8003dae:	440a      	add	r2, r1
 8003db0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003db4:	0cdb      	lsrs	r3, r3, #19
 8003db6:	04db      	lsls	r3, r3, #19
 8003db8:	6113      	str	r3, [r2, #16]
 8003dba:	e074      	b.n	8003ea6 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	015a      	lsls	r2, r3, #5
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	0151      	lsls	r1, r2, #5
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	440a      	add	r2, r1
 8003dd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dd6:	0cdb      	lsrs	r3, r3, #19
 8003dd8:	04db      	lsls	r3, r3, #19
 8003dda:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	015a      	lsls	r2, r3, #5
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	4413      	add	r3, r2
 8003de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	0151      	lsls	r1, r2, #5
 8003dee:	697a      	ldr	r2, [r7, #20]
 8003df0:	440a      	add	r2, r1
 8003df2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003df6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003dfa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003dfe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	015a      	lsls	r2, r3, #5
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	4413      	add	r3, r2
 8003e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e0c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	6999      	ldr	r1, [r3, #24]
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	440b      	add	r3, r1
 8003e18:	1e59      	subs	r1, r3, #1
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e22:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003e24:	4b9e      	ldr	r3, [pc, #632]	; (80040a0 <USB_EPStartXfer+0x370>)
 8003e26:	400b      	ands	r3, r1
 8003e28:	6939      	ldr	r1, [r7, #16]
 8003e2a:	0148      	lsls	r0, r1, #5
 8003e2c:	6979      	ldr	r1, [r7, #20]
 8003e2e:	4401      	add	r1, r0
 8003e30:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003e34:	4313      	orrs	r3, r2
 8003e36:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	015a      	lsls	r2, r3, #5
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	4413      	add	r3, r2
 8003e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e44:	691a      	ldr	r2, [r3, #16]
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e4e:	6939      	ldr	r1, [r7, #16]
 8003e50:	0148      	lsls	r0, r1, #5
 8003e52:	6979      	ldr	r1, [r7, #20]
 8003e54:	4401      	add	r1, r0
 8003e56:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	791b      	ldrb	r3, [r3, #4]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d11f      	bne.n	8003ea6 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	015a      	lsls	r2, r3, #5
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	0151      	lsls	r1, r2, #5
 8003e78:	697a      	ldr	r2, [r7, #20]
 8003e7a:	440a      	add	r2, r1
 8003e7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e80:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003e84:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	015a      	lsls	r2, r3, #5
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	693a      	ldr	r2, [r7, #16]
 8003e96:	0151      	lsls	r1, r2, #5
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	440a      	add	r2, r1
 8003e9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ea0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ea4:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	015a      	lsls	r2, r3, #5
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	4413      	add	r3, r2
 8003eae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	0151      	lsls	r1, r2, #5
 8003eb8:	697a      	ldr	r2, [r7, #20]
 8003eba:	440a      	add	r2, r1
 8003ebc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ec0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003ec4:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	791b      	ldrb	r3, [r3, #4]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d015      	beq.n	8003efa <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	f000 8106 	beq.w	80040e4 <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ede:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	f003 030f 	and.w	r3, r3, #15
 8003ee8:	2101      	movs	r1, #1
 8003eea:	fa01 f303 	lsl.w	r3, r1, r3
 8003eee:	6979      	ldr	r1, [r7, #20]
 8003ef0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	634b      	str	r3, [r1, #52]	; 0x34
 8003ef8:	e0f4      	b.n	80040e4 <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d110      	bne.n	8003f2c <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	015a      	lsls	r2, r3, #5
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	4413      	add	r3, r2
 8003f12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	693a      	ldr	r2, [r7, #16]
 8003f1a:	0151      	lsls	r1, r2, #5
 8003f1c:	697a      	ldr	r2, [r7, #20]
 8003f1e:	440a      	add	r2, r1
 8003f20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f24:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f28:	6013      	str	r3, [r2, #0]
 8003f2a:	e00f      	b.n	8003f4c <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	015a      	lsls	r2, r3, #5
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	4413      	add	r3, r2
 8003f34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	693a      	ldr	r2, [r7, #16]
 8003f3c:	0151      	lsls	r1, r2, #5
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	440a      	add	r2, r1
 8003f42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f4a:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	6919      	ldr	r1, [r3, #16]
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	781a      	ldrb	r2, [r3, #0]
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 fa94 	bl	8004488 <USB_WritePacket>
 8003f60:	e0c0      	b.n	80040e4 <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	015a      	lsls	r2, r3, #5
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	4413      	add	r3, r2
 8003f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	0151      	lsls	r1, r2, #5
 8003f74:	697a      	ldr	r2, [r7, #20]
 8003f76:	440a      	add	r2, r1
 8003f78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f7c:	0cdb      	lsrs	r3, r3, #19
 8003f7e:	04db      	lsls	r3, r3, #19
 8003f80:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	015a      	lsls	r2, r3, #5
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	4413      	add	r3, r2
 8003f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	0151      	lsls	r1, r2, #5
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	440a      	add	r2, r1
 8003f98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f9c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003fa0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003fa4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d123      	bne.n	8003ff6 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	015a      	lsls	r2, r3, #5
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fba:	691a      	ldr	r2, [r3, #16]
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fc4:	6939      	ldr	r1, [r7, #16]
 8003fc6:	0148      	lsls	r0, r1, #5
 8003fc8:	6979      	ldr	r1, [r7, #20]
 8003fca:	4401      	add	r1, r0
 8003fcc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	015a      	lsls	r2, r3, #5
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	4413      	add	r3, r2
 8003fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	693a      	ldr	r2, [r7, #16]
 8003fe4:	0151      	lsls	r1, r2, #5
 8003fe6:	697a      	ldr	r2, [r7, #20]
 8003fe8:	440a      	add	r2, r1
 8003fea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003ff2:	6113      	str	r3, [r2, #16]
 8003ff4:	e037      	b.n	8004066 <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	699a      	ldr	r2, [r3, #24]
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	4413      	add	r3, r2
 8004000:	1e5a      	subs	r2, r3, #1
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	fbb2 f3f3 	udiv	r3, r2, r3
 800400a:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	89fa      	ldrh	r2, [r7, #14]
 8004012:	fb03 f202 	mul.w	r2, r3, r2
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	015a      	lsls	r2, r3, #5
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	4413      	add	r3, r2
 8004022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004026:	691a      	ldr	r2, [r3, #16]
 8004028:	89fb      	ldrh	r3, [r7, #14]
 800402a:	04d9      	lsls	r1, r3, #19
 800402c:	4b1c      	ldr	r3, [pc, #112]	; (80040a0 <USB_EPStartXfer+0x370>)
 800402e:	400b      	ands	r3, r1
 8004030:	6939      	ldr	r1, [r7, #16]
 8004032:	0148      	lsls	r0, r1, #5
 8004034:	6979      	ldr	r1, [r7, #20]
 8004036:	4401      	add	r1, r0
 8004038:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800403c:	4313      	orrs	r3, r2
 800403e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	015a      	lsls	r2, r3, #5
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	4413      	add	r3, r2
 8004048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800404c:	691a      	ldr	r2, [r3, #16]
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	69db      	ldr	r3, [r3, #28]
 8004052:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004056:	6939      	ldr	r1, [r7, #16]
 8004058:	0148      	lsls	r0, r1, #5
 800405a:	6979      	ldr	r1, [r7, #20]
 800405c:	4401      	add	r1, r0
 800405e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004062:	4313      	orrs	r3, r2
 8004064:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	791b      	ldrb	r3, [r3, #4]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d12a      	bne.n	80040c4 <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800407a:	2b00      	cmp	r3, #0
 800407c:	d112      	bne.n	80040a4 <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	015a      	lsls	r2, r3, #5
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	4413      	add	r3, r2
 8004086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	693a      	ldr	r2, [r7, #16]
 800408e:	0151      	lsls	r1, r2, #5
 8004090:	697a      	ldr	r2, [r7, #20]
 8004092:	440a      	add	r2, r1
 8004094:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004098:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800409c:	6013      	str	r3, [r2, #0]
 800409e:	e011      	b.n	80040c4 <USB_EPStartXfer+0x394>
 80040a0:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	015a      	lsls	r2, r3, #5
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	4413      	add	r3, r2
 80040ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	693a      	ldr	r2, [r7, #16]
 80040b4:	0151      	lsls	r1, r2, #5
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	440a      	add	r2, r1
 80040ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040c2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	015a      	lsls	r2, r3, #5
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	4413      	add	r3, r2
 80040cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	693a      	ldr	r2, [r7, #16]
 80040d4:	0151      	lsls	r1, r2, #5
 80040d6:	697a      	ldr	r2, [r7, #20]
 80040d8:	440a      	add	r2, r1
 80040da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80040e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3718      	adds	r7, #24
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop

080040f0 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	785b      	ldrb	r3, [r3, #1]
 8004108:	2b01      	cmp	r3, #1
 800410a:	f040 80ab 	bne.w	8004264 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d132      	bne.n	800417c <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	015a      	lsls	r2, r3, #5
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	4413      	add	r3, r2
 800411e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004122:	691b      	ldr	r3, [r3, #16]
 8004124:	68ba      	ldr	r2, [r7, #8]
 8004126:	0151      	lsls	r1, r2, #5
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	440a      	add	r2, r1
 800412c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004130:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004134:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004138:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	015a      	lsls	r2, r3, #5
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	4413      	add	r3, r2
 8004142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	68ba      	ldr	r2, [r7, #8]
 800414a:	0151      	lsls	r1, r2, #5
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	440a      	add	r2, r1
 8004150:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004154:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004158:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	015a      	lsls	r2, r3, #5
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	4413      	add	r3, r2
 8004162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	68ba      	ldr	r2, [r7, #8]
 800416a:	0151      	lsls	r1, r2, #5
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	440a      	add	r2, r1
 8004170:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004174:	0cdb      	lsrs	r3, r3, #19
 8004176:	04db      	lsls	r3, r3, #19
 8004178:	6113      	str	r3, [r2, #16]
 800417a:	e04e      	b.n	800421a <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	015a      	lsls	r2, r3, #5
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	4413      	add	r3, r2
 8004184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	68ba      	ldr	r2, [r7, #8]
 800418c:	0151      	lsls	r1, r2, #5
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	440a      	add	r2, r1
 8004192:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004196:	0cdb      	lsrs	r3, r3, #19
 8004198:	04db      	lsls	r3, r3, #19
 800419a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	015a      	lsls	r2, r3, #5
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	4413      	add	r3, r2
 80041a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	68ba      	ldr	r2, [r7, #8]
 80041ac:	0151      	lsls	r1, r2, #5
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	440a      	add	r2, r1
 80041b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041b6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80041ba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80041be:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	699a      	ldr	r2, [r3, #24]
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d903      	bls.n	80041d4 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	68da      	ldr	r2, [r3, #12]
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	015a      	lsls	r2, r3, #5
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	4413      	add	r3, r2
 80041dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	68ba      	ldr	r2, [r7, #8]
 80041e4:	0151      	lsls	r1, r2, #5
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	440a      	add	r2, r1
 80041ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80041f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	015a      	lsls	r2, r3, #5
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	4413      	add	r3, r2
 80041fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004200:	691a      	ldr	r2, [r3, #16]
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800420a:	68b9      	ldr	r1, [r7, #8]
 800420c:	0148      	lsls	r0, r1, #5
 800420e:	68f9      	ldr	r1, [r7, #12]
 8004210:	4401      	add	r1, r0
 8004212:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004216:	4313      	orrs	r3, r2
 8004218:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	015a      	lsls	r2, r3, #5
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	4413      	add	r3, r2
 8004222:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68ba      	ldr	r2, [r7, #8]
 800422a:	0151      	lsls	r1, r2, #5
 800422c:	68fa      	ldr	r2, [r7, #12]
 800422e:	440a      	add	r2, r1
 8004230:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004234:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004238:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d071      	beq.n	8004326 <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004248:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	f003 030f 	and.w	r3, r3, #15
 8004252:	2101      	movs	r1, #1
 8004254:	fa01 f303 	lsl.w	r3, r1, r3
 8004258:	68f9      	ldr	r1, [r7, #12]
 800425a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800425e:	4313      	orrs	r3, r2
 8004260:	634b      	str	r3, [r1, #52]	; 0x34
 8004262:	e060      	b.n	8004326 <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	015a      	lsls	r2, r3, #5
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	4413      	add	r3, r2
 800426c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	68ba      	ldr	r2, [r7, #8]
 8004274:	0151      	lsls	r1, r2, #5
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	440a      	add	r2, r1
 800427a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800427e:	0cdb      	lsrs	r3, r3, #19
 8004280:	04db      	lsls	r3, r3, #19
 8004282:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	015a      	lsls	r2, r3, #5
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	4413      	add	r3, r2
 800428c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	68ba      	ldr	r2, [r7, #8]
 8004294:	0151      	lsls	r1, r2, #5
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	440a      	add	r2, r1
 800429a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800429e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80042a2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80042a6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d003      	beq.n	80042b8 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	68da      	ldr	r2, [r3, #12]
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	68da      	ldr	r2, [r3, #12]
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	015a      	lsls	r2, r3, #5
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	4413      	add	r3, r2
 80042c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	68ba      	ldr	r2, [r7, #8]
 80042d0:	0151      	lsls	r1, r2, #5
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	440a      	add	r2, r1
 80042d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80042de:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	015a      	lsls	r2, r3, #5
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	4413      	add	r3, r2
 80042e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ec:	691a      	ldr	r2, [r3, #16]
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	69db      	ldr	r3, [r3, #28]
 80042f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042f6:	68b9      	ldr	r1, [r7, #8]
 80042f8:	0148      	lsls	r0, r1, #5
 80042fa:	68f9      	ldr	r1, [r7, #12]
 80042fc:	4401      	add	r1, r0
 80042fe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004302:	4313      	orrs	r3, r2
 8004304:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	015a      	lsls	r2, r3, #5
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	4413      	add	r3, r2
 800430e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68ba      	ldr	r2, [r7, #8]
 8004316:	0151      	lsls	r1, r2, #5
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	440a      	add	r2, r1
 800431c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004320:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004324:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	3714      	adds	r7, #20
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004334:	b480      	push	{r7}
 8004336:	b087      	sub	sp, #28
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800433e:	2300      	movs	r3, #0
 8004340:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004342:	2300      	movs	r3, #0
 8004344:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	785b      	ldrb	r3, [r3, #1]
 800434e:	2b01      	cmp	r3, #1
 8004350:	d14a      	bne.n	80043e8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	015a      	lsls	r2, r3, #5
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	4413      	add	r3, r2
 800435c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004366:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800436a:	f040 8086 	bne.w	800447a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	015a      	lsls	r2, r3, #5
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	4413      	add	r3, r2
 8004378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	683a      	ldr	r2, [r7, #0]
 8004380:	7812      	ldrb	r2, [r2, #0]
 8004382:	0151      	lsls	r1, r2, #5
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	440a      	add	r2, r1
 8004388:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800438c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004390:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	015a      	lsls	r2, r3, #5
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	4413      	add	r3, r2
 800439c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	683a      	ldr	r2, [r7, #0]
 80043a4:	7812      	ldrb	r2, [r2, #0]
 80043a6:	0151      	lsls	r1, r2, #5
 80043a8:	693a      	ldr	r2, [r7, #16]
 80043aa:	440a      	add	r2, r1
 80043ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80043b4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	3301      	adds	r3, #1
 80043ba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f242 7210 	movw	r2, #10000	; 0x2710
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d902      	bls.n	80043cc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	75fb      	strb	r3, [r7, #23]
          break;
 80043ca:	e056      	b.n	800447a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	015a      	lsls	r2, r3, #5
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	4413      	add	r3, r2
 80043d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043e4:	d0e7      	beq.n	80043b6 <USB_EPStopXfer+0x82>
 80043e6:	e048      	b.n	800447a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	015a      	lsls	r2, r3, #5
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	4413      	add	r3, r2
 80043f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004400:	d13b      	bne.n	800447a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	015a      	lsls	r2, r3, #5
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	4413      	add	r3, r2
 800440c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	683a      	ldr	r2, [r7, #0]
 8004414:	7812      	ldrb	r2, [r2, #0]
 8004416:	0151      	lsls	r1, r2, #5
 8004418:	693a      	ldr	r2, [r7, #16]
 800441a:	440a      	add	r2, r1
 800441c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004420:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004424:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	015a      	lsls	r2, r3, #5
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	4413      	add	r3, r2
 8004430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	683a      	ldr	r2, [r7, #0]
 8004438:	7812      	ldrb	r2, [r2, #0]
 800443a:	0151      	lsls	r1, r2, #5
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	440a      	add	r2, r1
 8004440:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004444:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004448:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	3301      	adds	r3, #1
 800444e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f242 7210 	movw	r2, #10000	; 0x2710
 8004456:	4293      	cmp	r3, r2
 8004458:	d902      	bls.n	8004460 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	75fb      	strb	r3, [r7, #23]
          break;
 800445e:	e00c      	b.n	800447a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	015a      	lsls	r2, r3, #5
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	4413      	add	r3, r2
 800446a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004474:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004478:	d0e7      	beq.n	800444a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800447a:	7dfb      	ldrb	r3, [r7, #23]
}
 800447c:	4618      	mov	r0, r3
 800447e:	371c      	adds	r7, #28
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8004488:	b480      	push	{r7}
 800448a:	b089      	sub	sp, #36	; 0x24
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	4611      	mov	r1, r2
 8004494:	461a      	mov	r2, r3
 8004496:	460b      	mov	r3, r1
 8004498:	71fb      	strb	r3, [r7, #7]
 800449a:	4613      	mov	r3, r2
 800449c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80044a6:	88bb      	ldrh	r3, [r7, #4]
 80044a8:	3303      	adds	r3, #3
 80044aa:	089b      	lsrs	r3, r3, #2
 80044ac:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80044ae:	2300      	movs	r3, #0
 80044b0:	61bb      	str	r3, [r7, #24]
 80044b2:	e018      	b.n	80044e6 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80044b4:	79fb      	ldrb	r3, [r7, #7]
 80044b6:	031a      	lsls	r2, r3, #12
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	4413      	add	r3, r2
 80044bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044c0:	461a      	mov	r2, r3
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	6013      	str	r3, [r2, #0]
    pSrc++;
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	3301      	adds	r3, #1
 80044cc:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	3301      	adds	r3, #1
 80044d2:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	3301      	adds	r3, #1
 80044d8:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	3301      	adds	r3, #1
 80044de:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	3301      	adds	r3, #1
 80044e4:	61bb      	str	r3, [r7, #24]
 80044e6:	69ba      	ldr	r2, [r7, #24]
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d3e2      	bcc.n	80044b4 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3724      	adds	r7, #36	; 0x24
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b08b      	sub	sp, #44	; 0x2c
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	4613      	mov	r3, r2
 8004508:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004512:	88fb      	ldrh	r3, [r7, #6]
 8004514:	089b      	lsrs	r3, r3, #2
 8004516:	b29b      	uxth	r3, r3
 8004518:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800451a:	88fb      	ldrh	r3, [r7, #6]
 800451c:	f003 0303 	and.w	r3, r3, #3
 8004520:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004522:	2300      	movs	r3, #0
 8004524:	623b      	str	r3, [r7, #32]
 8004526:	e014      	b.n	8004552 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004532:	601a      	str	r2, [r3, #0]
    pDest++;
 8004534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004536:	3301      	adds	r3, #1
 8004538:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800453a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453c:	3301      	adds	r3, #1
 800453e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004542:	3301      	adds	r3, #1
 8004544:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004548:	3301      	adds	r3, #1
 800454a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800454c:	6a3b      	ldr	r3, [r7, #32]
 800454e:	3301      	adds	r3, #1
 8004550:	623b      	str	r3, [r7, #32]
 8004552:	6a3a      	ldr	r2, [r7, #32]
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	429a      	cmp	r2, r3
 8004558:	d3e6      	bcc.n	8004528 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800455a:	8bfb      	ldrh	r3, [r7, #30]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d01e      	beq.n	800459e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004560:	2300      	movs	r3, #0
 8004562:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800456a:	461a      	mov	r2, r3
 800456c:	f107 0310 	add.w	r3, r7, #16
 8004570:	6812      	ldr	r2, [r2, #0]
 8004572:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004574:	693a      	ldr	r2, [r7, #16]
 8004576:	6a3b      	ldr	r3, [r7, #32]
 8004578:	b2db      	uxtb	r3, r3
 800457a:	00db      	lsls	r3, r3, #3
 800457c:	fa22 f303 	lsr.w	r3, r2, r3
 8004580:	b2da      	uxtb	r2, r3
 8004582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004584:	701a      	strb	r2, [r3, #0]
      i++;
 8004586:	6a3b      	ldr	r3, [r7, #32]
 8004588:	3301      	adds	r3, #1
 800458a:	623b      	str	r3, [r7, #32]
      pDest++;
 800458c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458e:	3301      	adds	r3, #1
 8004590:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004592:	8bfb      	ldrh	r3, [r7, #30]
 8004594:	3b01      	subs	r3, #1
 8004596:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004598:	8bfb      	ldrh	r3, [r7, #30]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1ea      	bne.n	8004574 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800459e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	372c      	adds	r7, #44	; 0x2c
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	785b      	ldrb	r3, [r3, #1]
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d12c      	bne.n	8004622 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	015a      	lsls	r2, r3, #5
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	4413      	add	r3, r2
 80045d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	db12      	blt.n	8004600 <USB_EPSetStall+0x54>
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00f      	beq.n	8004600 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	015a      	lsls	r2, r3, #5
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	4413      	add	r3, r2
 80045e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68ba      	ldr	r2, [r7, #8]
 80045f0:	0151      	lsls	r1, r2, #5
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	440a      	add	r2, r1
 80045f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80045fe:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	015a      	lsls	r2, r3, #5
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	4413      	add	r3, r2
 8004608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68ba      	ldr	r2, [r7, #8]
 8004610:	0151      	lsls	r1, r2, #5
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	440a      	add	r2, r1
 8004616:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800461a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800461e:	6013      	str	r3, [r2, #0]
 8004620:	e02b      	b.n	800467a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	015a      	lsls	r2, r3, #5
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	4413      	add	r3, r2
 800462a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2b00      	cmp	r3, #0
 8004632:	db12      	blt.n	800465a <USB_EPSetStall+0xae>
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00f      	beq.n	800465a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	015a      	lsls	r2, r3, #5
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	4413      	add	r3, r2
 8004642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68ba      	ldr	r2, [r7, #8]
 800464a:	0151      	lsls	r1, r2, #5
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	440a      	add	r2, r1
 8004650:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004654:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004658:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	015a      	lsls	r2, r3, #5
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	4413      	add	r3, r2
 8004662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68ba      	ldr	r2, [r7, #8]
 800466a:	0151      	lsls	r1, r2, #5
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	440a      	add	r2, r1
 8004670:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004674:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004678:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	3714      	adds	r7, #20
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	785b      	ldrb	r3, [r3, #1]
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d128      	bne.n	80046f6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	015a      	lsls	r2, r3, #5
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	4413      	add	r3, r2
 80046ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68ba      	ldr	r2, [r7, #8]
 80046b4:	0151      	lsls	r1, r2, #5
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	440a      	add	r2, r1
 80046ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80046c2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	791b      	ldrb	r3, [r3, #4]
 80046c8:	2b03      	cmp	r3, #3
 80046ca:	d003      	beq.n	80046d4 <USB_EPClearStall+0x4c>
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	791b      	ldrb	r3, [r3, #4]
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d138      	bne.n	8004746 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	015a      	lsls	r2, r3, #5
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	4413      	add	r3, r2
 80046dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	68ba      	ldr	r2, [r7, #8]
 80046e4:	0151      	lsls	r1, r2, #5
 80046e6:	68fa      	ldr	r2, [r7, #12]
 80046e8:	440a      	add	r2, r1
 80046ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046f2:	6013      	str	r3, [r2, #0]
 80046f4:	e027      	b.n	8004746 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	015a      	lsls	r2, r3, #5
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	4413      	add	r3, r2
 80046fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68ba      	ldr	r2, [r7, #8]
 8004706:	0151      	lsls	r1, r2, #5
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	440a      	add	r2, r1
 800470c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004710:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004714:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	791b      	ldrb	r3, [r3, #4]
 800471a:	2b03      	cmp	r3, #3
 800471c:	d003      	beq.n	8004726 <USB_EPClearStall+0x9e>
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	791b      	ldrb	r3, [r3, #4]
 8004722:	2b02      	cmp	r3, #2
 8004724:	d10f      	bne.n	8004746 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	015a      	lsls	r2, r3, #5
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	4413      	add	r3, r2
 800472e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68ba      	ldr	r2, [r7, #8]
 8004736:	0151      	lsls	r1, r2, #5
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	440a      	add	r2, r1
 800473c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004744:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3714      	adds	r7, #20
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004754:	b480      	push	{r7}
 8004756:	b085      	sub	sp, #20
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	460b      	mov	r3, r1
 800475e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004772:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004776:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	78fb      	ldrb	r3, [r7, #3]
 8004782:	011b      	lsls	r3, r3, #4
 8004784:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004788:	68f9      	ldr	r1, [r7, #12]
 800478a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800478e:	4313      	orrs	r3, r2
 8004790:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3714      	adds	r7, #20
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b085      	sub	sp, #20
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80047ba:	f023 0303 	bic.w	r3, r3, #3
 80047be:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047ce:	f023 0302 	bic.w	r3, r3, #2
 80047d2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3714      	adds	r7, #20
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr

080047e2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80047e2:	b480      	push	{r7}
 80047e4:	b085      	sub	sp, #20
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80047fc:	f023 0303 	bic.w	r3, r3, #3
 8004800:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004810:	f043 0302 	orr.w	r3, r3, #2
 8004814:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	3714      	adds	r7, #20
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004824:	b480      	push	{r7}
 8004826:	b085      	sub	sp, #20
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	695b      	ldr	r3, [r3, #20]
 8004830:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	4013      	ands	r3, r2
 800483a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800483c:	68fb      	ldr	r3, [r7, #12]
}
 800483e:	4618      	mov	r0, r3
 8004840:	3714      	adds	r7, #20
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr

0800484a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800484a:	b480      	push	{r7}
 800484c:	b085      	sub	sp, #20
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004866:	69db      	ldr	r3, [r3, #28]
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	4013      	ands	r3, r2
 800486c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	0c1b      	lsrs	r3, r3, #16
}
 8004872:	4618      	mov	r0, r3
 8004874:	3714      	adds	r7, #20
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr

0800487e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800487e:	b480      	push	{r7}
 8004880:	b085      	sub	sp, #20
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800489a:	69db      	ldr	r3, [r3, #28]
 800489c:	68ba      	ldr	r2, [r7, #8]
 800489e:	4013      	ands	r3, r2
 80048a0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	b29b      	uxth	r3, r3
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3714      	adds	r7, #20
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr

080048b2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80048b2:	b480      	push	{r7}
 80048b4:	b085      	sub	sp, #20
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
 80048ba:	460b      	mov	r3, r1
 80048bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80048c2:	78fb      	ldrb	r3, [r7, #3]
 80048c4:	015a      	lsls	r2, r3, #5
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	4413      	add	r3, r2
 80048ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048d8:	695b      	ldr	r3, [r3, #20]
 80048da:	68ba      	ldr	r2, [r7, #8]
 80048dc:	4013      	ands	r3, r2
 80048de:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80048e0:	68bb      	ldr	r3, [r7, #8]
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3714      	adds	r7, #20
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr

080048ee <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80048ee:	b480      	push	{r7}
 80048f0:	b087      	sub	sp, #28
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
 80048f6:	460b      	mov	r3, r1
 80048f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800490e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004910:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004912:	78fb      	ldrb	r3, [r7, #3]
 8004914:	f003 030f 	and.w	r3, r3, #15
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	fa22 f303 	lsr.w	r3, r2, r3
 800491e:	01db      	lsls	r3, r3, #7
 8004920:	b2db      	uxtb	r3, r3
 8004922:	693a      	ldr	r2, [r7, #16]
 8004924:	4313      	orrs	r3, r2
 8004926:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004928:	78fb      	ldrb	r3, [r7, #3]
 800492a:	015a      	lsls	r2, r3, #5
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	4413      	add	r3, r2
 8004930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	693a      	ldr	r2, [r7, #16]
 8004938:	4013      	ands	r3, r2
 800493a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800493c:	68bb      	ldr	r3, [r7, #8]
}
 800493e:	4618      	mov	r0, r3
 8004940:	371c      	adds	r7, #28
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr

0800494a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800494a:	b480      	push	{r7}
 800494c:	b083      	sub	sp, #12
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	695b      	ldr	r3, [r3, #20]
 8004956:	f003 0301 	and.w	r3, r3, #1
}
 800495a:	4618      	mov	r0, r3
 800495c:	370c      	adds	r7, #12
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr

08004966 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004966:	b480      	push	{r7}
 8004968:	b085      	sub	sp, #20
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004980:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004984:	f023 0307 	bic.w	r3, r3, #7
 8004988:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004998:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800499c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3714      	adds	r7, #20
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b085      	sub	sp, #20
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	333c      	adds	r3, #60	; 0x3c
 80049be:	3304      	adds	r3, #4
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	4a1c      	ldr	r2, [pc, #112]	; (8004a38 <USB_EP0_OutStart+0x8c>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d90a      	bls.n	80049e2 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049dc:	d101      	bne.n	80049e2 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 80049de:	2300      	movs	r3, #0
 80049e0:	e024      	b.n	8004a2c <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049e8:	461a      	mov	r2, r3
 80049ea:	2300      	movs	r3, #0
 80049ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	68fa      	ldr	r2, [r7, #12]
 8004a0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a10:	f043 0318 	orr.w	r3, r3, #24
 8004a14:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a24:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004a28:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8004a2a:	2300      	movs	r3, #0
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3714      	adds	r7, #20
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr
 8004a38:	4f54300a 	.word	0x4f54300a

08004a3c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b085      	sub	sp, #20
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a44:	2300      	movs	r3, #0
 8004a46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	4a13      	ldr	r2, [pc, #76]	; (8004aa0 <USB_CoreReset+0x64>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d901      	bls.n	8004a5a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e01b      	b.n	8004a92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	daf2      	bge.n	8004a48 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004a62:	2300      	movs	r3, #0
 8004a64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	f043 0201 	orr.w	r2, r3, #1
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	3301      	adds	r3, #1
 8004a76:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	4a09      	ldr	r2, [pc, #36]	; (8004aa0 <USB_CoreReset+0x64>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d901      	bls.n	8004a84 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	e006      	b.n	8004a92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	f003 0301 	and.w	r3, r3, #1
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d0f0      	beq.n	8004a72 <USB_CoreReset+0x36>

  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3714      	adds	r7, #20
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	00030d40 	.word	0x00030d40

08004aa4 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	460b      	mov	r3, r1
 8004aae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8004ab0:	2010      	movs	r0, #16
 8004ab2:	f002 f88f 	bl	8006bd4 <USBD_static_malloc>
 8004ab6:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d105      	bne.n	8004aca <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004ac6:	2302      	movs	r3, #2
 8004ac8:	e01b      	b.n	8004b02 <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	7c1b      	ldrb	r3, [r3, #16]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d103      	bne.n	8004ae2 <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2207      	movs	r2, #7
 8004ade:	875a      	strh	r2, [r3, #58]	; 0x3a
 8004ae0:	e002      	b.n	8004ae8 <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	220a      	movs	r2, #10
 8004ae6:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8004ae8:	2304      	movs	r3, #4
 8004aea:	2203      	movs	r2, #3
 8004aec:	2181      	movs	r1, #129	; 0x81
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f001 fe70 	bl	80067d4 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3710      	adds	r7, #16
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}

08004b0a <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004b0a:	b580      	push	{r7, lr}
 8004b0c:	b082      	sub	sp, #8
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
 8004b12:	460b      	mov	r3, r1
 8004b14:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8004b16:	2181      	movs	r1, #129	; 0x81
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f001 fe99 	bl	8006850 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d009      	beq.n	8004b48 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f002 f858 	bl	8006bf0 <USBD_static_free>
    pdev->pClassData = NULL;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3708      	adds	r7, #8
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
	...

08004b54 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b086      	sub	sp, #24
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b64:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8004b66:	2300      	movs	r3, #0
 8004b68:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d101      	bne.n	8004b78 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e0e8      	b.n	8004d4a <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d046      	beq.n	8004c12 <USBD_HID_Setup+0xbe>
 8004b84:	2b20      	cmp	r3, #32
 8004b86:	f040 80d8 	bne.w	8004d3a <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	785b      	ldrb	r3, [r3, #1]
 8004b8e:	3b02      	subs	r3, #2
 8004b90:	2b09      	cmp	r3, #9
 8004b92:	d836      	bhi.n	8004c02 <USBD_HID_Setup+0xae>
 8004b94:	a201      	add	r2, pc, #4	; (adr r2, 8004b9c <USBD_HID_Setup+0x48>)
 8004b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b9a:	bf00      	nop
 8004b9c:	08004bf3 	.word	0x08004bf3
 8004ba0:	08004bd3 	.word	0x08004bd3
 8004ba4:	08004c03 	.word	0x08004c03
 8004ba8:	08004c03 	.word	0x08004c03
 8004bac:	08004c03 	.word	0x08004c03
 8004bb0:	08004c03 	.word	0x08004c03
 8004bb4:	08004c03 	.word	0x08004c03
 8004bb8:	08004c03 	.word	0x08004c03
 8004bbc:	08004be1 	.word	0x08004be1
 8004bc0:	08004bc5 	.word	0x08004bc5
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	885b      	ldrh	r3, [r3, #2]
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	461a      	mov	r2, r3
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	601a      	str	r2, [r3, #0]
          break;
 8004bd0:	e01e      	b.n	8004c10 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f001 fa4c 	bl	8006076 <USBD_CtlSendData>
          break;
 8004bde:	e017      	b.n	8004c10 <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	885b      	ldrh	r3, [r3, #2]
 8004be4:	0a1b      	lsrs	r3, r3, #8
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	461a      	mov	r2, r3
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	605a      	str	r2, [r3, #4]
          break;
 8004bf0:	e00e      	b.n	8004c10 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	3304      	adds	r3, #4
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f001 fa3b 	bl	8006076 <USBD_CtlSendData>
          break;
 8004c00:	e006      	b.n	8004c10 <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8004c02:	6839      	ldr	r1, [r7, #0]
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f001 f9c5 	bl	8005f94 <USBD_CtlError>
          ret = USBD_FAIL;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	75fb      	strb	r3, [r7, #23]
          break;
 8004c0e:	bf00      	nop
      }
      break;
 8004c10:	e09a      	b.n	8004d48 <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	785b      	ldrb	r3, [r3, #1]
 8004c16:	2b0b      	cmp	r3, #11
 8004c18:	f200 8086 	bhi.w	8004d28 <USBD_HID_Setup+0x1d4>
 8004c1c:	a201      	add	r2, pc, #4	; (adr r2, 8004c24 <USBD_HID_Setup+0xd0>)
 8004c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c22:	bf00      	nop
 8004c24:	08004c55 	.word	0x08004c55
 8004c28:	08004d37 	.word	0x08004d37
 8004c2c:	08004d29 	.word	0x08004d29
 8004c30:	08004d29 	.word	0x08004d29
 8004c34:	08004d29 	.word	0x08004d29
 8004c38:	08004d29 	.word	0x08004d29
 8004c3c:	08004c7f 	.word	0x08004c7f
 8004c40:	08004d29 	.word	0x08004d29
 8004c44:	08004d29 	.word	0x08004d29
 8004c48:	08004d29 	.word	0x08004d29
 8004c4c:	08004cd7 	.word	0x08004cd7
 8004c50:	08004d01 	.word	0x08004d01
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	2b03      	cmp	r3, #3
 8004c5e:	d107      	bne.n	8004c70 <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004c60:	f107 030a 	add.w	r3, r7, #10
 8004c64:	2202      	movs	r2, #2
 8004c66:	4619      	mov	r1, r3
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f001 fa04 	bl	8006076 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004c6e:	e063      	b.n	8004d38 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8004c70:	6839      	ldr	r1, [r7, #0]
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f001 f98e 	bl	8005f94 <USBD_CtlError>
            ret = USBD_FAIL;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	75fb      	strb	r3, [r7, #23]
          break;
 8004c7c:	e05c      	b.n	8004d38 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	885b      	ldrh	r3, [r3, #2]
 8004c82:	0a1b      	lsrs	r3, r3, #8
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	2b22      	cmp	r3, #34	; 0x22
 8004c88:	d108      	bne.n	8004c9c <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	88db      	ldrh	r3, [r3, #6]
 8004c8e:	2b4a      	cmp	r3, #74	; 0x4a
 8004c90:	bf28      	it	cs
 8004c92:	234a      	movcs	r3, #74	; 0x4a
 8004c94:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8004c96:	4b2f      	ldr	r3, [pc, #188]	; (8004d54 <USBD_HID_Setup+0x200>)
 8004c98:	613b      	str	r3, [r7, #16]
 8004c9a:	e015      	b.n	8004cc8 <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	885b      	ldrh	r3, [r3, #2]
 8004ca0:	0a1b      	lsrs	r3, r3, #8
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	2b21      	cmp	r3, #33	; 0x21
 8004ca6:	d108      	bne.n	8004cba <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 8004ca8:	4b2b      	ldr	r3, [pc, #172]	; (8004d58 <USBD_HID_Setup+0x204>)
 8004caa:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	88db      	ldrh	r3, [r3, #6]
 8004cb0:	2b09      	cmp	r3, #9
 8004cb2:	bf28      	it	cs
 8004cb4:	2309      	movcs	r3, #9
 8004cb6:	82bb      	strh	r3, [r7, #20]
 8004cb8:	e006      	b.n	8004cc8 <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8004cba:	6839      	ldr	r1, [r7, #0]
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f001 f969 	bl	8005f94 <USBD_CtlError>
            ret = USBD_FAIL;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	75fb      	strb	r3, [r7, #23]
            break;
 8004cc6:	e037      	b.n	8004d38 <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8004cc8:	8abb      	ldrh	r3, [r7, #20]
 8004cca:	461a      	mov	r2, r3
 8004ccc:	6939      	ldr	r1, [r7, #16]
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f001 f9d1 	bl	8006076 <USBD_CtlSendData>
          break;
 8004cd4:	e030      	b.n	8004d38 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	2b03      	cmp	r3, #3
 8004ce0:	d107      	bne.n	8004cf2 <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	3308      	adds	r3, #8
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	4619      	mov	r1, r3
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f001 f9c3 	bl	8006076 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004cf0:	e022      	b.n	8004d38 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8004cf2:	6839      	ldr	r1, [r7, #0]
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f001 f94d 	bl	8005f94 <USBD_CtlError>
            ret = USBD_FAIL;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	75fb      	strb	r3, [r7, #23]
          break;
 8004cfe:	e01b      	b.n	8004d38 <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	2b03      	cmp	r3, #3
 8004d0a:	d106      	bne.n	8004d1a <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	885b      	ldrh	r3, [r3, #2]
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	461a      	mov	r2, r3
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004d18:	e00e      	b.n	8004d38 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8004d1a:	6839      	ldr	r1, [r7, #0]
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f001 f939 	bl	8005f94 <USBD_CtlError>
            ret = USBD_FAIL;
 8004d22:	2303      	movs	r3, #3
 8004d24:	75fb      	strb	r3, [r7, #23]
          break;
 8004d26:	e007      	b.n	8004d38 <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004d28:	6839      	ldr	r1, [r7, #0]
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f001 f932 	bl	8005f94 <USBD_CtlError>
          ret = USBD_FAIL;
 8004d30:	2303      	movs	r3, #3
 8004d32:	75fb      	strb	r3, [r7, #23]
          break;
 8004d34:	e000      	b.n	8004d38 <USBD_HID_Setup+0x1e4>
          break;
 8004d36:	bf00      	nop
      }
      break;
 8004d38:	e006      	b.n	8004d48 <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 8004d3a:	6839      	ldr	r1, [r7, #0]
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f001 f929 	bl	8005f94 <USBD_CtlError>
      ret = USBD_FAIL;
 8004d42:	2303      	movs	r3, #3
 8004d44:	75fb      	strb	r3, [r7, #23]
      break;
 8004d46:	bf00      	nop
  }

  return (uint8_t)ret;
 8004d48:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3718      	adds	r7, #24
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	200000c8 	.word	0x200000c8
 8004d58:	200000b0 	.word	0x200000b0

08004d5c <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b086      	sub	sp, #24
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	4613      	mov	r3, r2
 8004d68:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004d70:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d101      	bne.n	8004d7c <USBD_HID_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	e013      	b.n	8004da4 <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	2b03      	cmp	r3, #3
 8004d86:	d10c      	bne.n	8004da2 <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	7b1b      	ldrb	r3, [r3, #12]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d108      	bne.n	8004da2 <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	2201      	movs	r2, #1
 8004d94:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 8004d96:	88fb      	ldrh	r3, [r7, #6]
 8004d98:	68ba      	ldr	r2, [r7, #8]
 8004d9a:	2181      	movs	r1, #129	; 0x81
 8004d9c:	68f8      	ldr	r0, [r7, #12]
 8004d9e:	f001 fe5b 	bl	8006a58 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3718      	adds	r7, #24
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2222      	movs	r2, #34	; 0x22
 8004db8:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8004dba:	4b03      	ldr	r3, [pc, #12]	; (8004dc8 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr
 8004dc8:	20000044 	.word	0x20000044

08004dcc <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2222      	movs	r2, #34	; 0x22
 8004dd8:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 8004dda:	4b03      	ldr	r3, [pc, #12]	; (8004de8 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr
 8004de8:	20000068 	.word	0x20000068

08004dec <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2222      	movs	r2, #34	; 0x22
 8004df8:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8004dfa:	4b03      	ldr	r3, [pc, #12]	; (8004e08 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr
 8004e08:	2000008c 	.word	0x2000008c

08004e0c <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	460b      	mov	r3, r1
 8004e16:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e1e:	2200      	movs	r2, #0
 8004e20:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	220a      	movs	r2, #10
 8004e3c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8004e3e:	4b03      	ldr	r3, [pc, #12]	; (8004e4c <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr
 8004e4c:	200000bc 	.word	0x200000bc

08004e50 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b086      	sub	sp, #24
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	60b9      	str	r1, [r7, #8]
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d101      	bne.n	8004e68 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e01f      	b.n	8004ea8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d003      	beq.n	8004e8e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	68ba      	ldr	r2, [r7, #8]
 8004e8a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2201      	movs	r2, #1
 8004e92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	79fa      	ldrb	r2, [r7, #7]
 8004e9a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004e9c:	68f8      	ldr	r0, [r7, #12]
 8004e9e:	f001 fc1b 	bl	80066d8 <USBD_LL_Init>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004ea6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3718      	adds	r7, #24
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d101      	bne.n	8004ec8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e016      	b.n	8004ef6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	683a      	ldr	r2, [r7, #0]
 8004ecc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d00b      	beq.n	8004ef4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee4:	f107 020e 	add.w	r2, r7, #14
 8004ee8:	4610      	mov	r0, r2
 8004eea:	4798      	blx	r3
 8004eec:	4602      	mov	r2, r0
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3710      	adds	r7, #16
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}

08004efe <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004efe:	b580      	push	{r7, lr}
 8004f00:	b082      	sub	sp, #8
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f001 fc32 	bl	8006770 <USBD_LL_Start>
 8004f0c:	4603      	mov	r3, r0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3708      	adds	r7, #8
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}

08004f16 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004f16:	b480      	push	{r7}
 8004f18:	b083      	sub	sp, #12
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	460b      	mov	r3, r1
 8004f36:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d009      	beq.n	8004f5a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	78fa      	ldrb	r2, [r7, #3]
 8004f50:	4611      	mov	r1, r2
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	4798      	blx	r3
 8004f56:	4603      	mov	r3, r0
 8004f58:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3710      	adds	r7, #16
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d007      	beq.n	8004f8a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	78fa      	ldrb	r2, [r7, #3]
 8004f84:	4611      	mov	r1, r2
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	4798      	blx	r3
  }

  return USBD_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3708      	adds	r7, #8
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004fa4:	6839      	ldr	r1, [r7, #0]
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f000 ffba 	bl	8005f20 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8004fba:	461a      	mov	r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004fc8:	f003 031f 	and.w	r3, r3, #31
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	d01a      	beq.n	8005006 <USBD_LL_SetupStage+0x72>
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d822      	bhi.n	800501a <USBD_LL_SetupStage+0x86>
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d002      	beq.n	8004fde <USBD_LL_SetupStage+0x4a>
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d00a      	beq.n	8004ff2 <USBD_LL_SetupStage+0x5e>
 8004fdc:	e01d      	b.n	800501a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 fa62 	bl	80054b0 <USBD_StdDevReq>
 8004fec:	4603      	mov	r3, r0
 8004fee:	73fb      	strb	r3, [r7, #15]
      break;
 8004ff0:	e020      	b.n	8005034 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 fac6 	bl	800558c <USBD_StdItfReq>
 8005000:	4603      	mov	r3, r0
 8005002:	73fb      	strb	r3, [r7, #15]
      break;
 8005004:	e016      	b.n	8005034 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800500c:	4619      	mov	r1, r3
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 fb05 	bl	800561e <USBD_StdEPReq>
 8005014:	4603      	mov	r3, r0
 8005016:	73fb      	strb	r3, [r7, #15]
      break;
 8005018:	e00c      	b.n	8005034 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005020:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005024:	b2db      	uxtb	r3, r3
 8005026:	4619      	mov	r1, r3
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f001 fc47 	bl	80068bc <USBD_LL_StallEP>
 800502e:	4603      	mov	r3, r0
 8005030:	73fb      	strb	r3, [r7, #15]
      break;
 8005032:	bf00      	nop
  }

  return ret;
 8005034:	7bfb      	ldrb	r3, [r7, #15]
}
 8005036:	4618      	mov	r0, r3
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}

0800503e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800503e:	b580      	push	{r7, lr}
 8005040:	b086      	sub	sp, #24
 8005042:	af00      	add	r7, sp, #0
 8005044:	60f8      	str	r0, [r7, #12]
 8005046:	460b      	mov	r3, r1
 8005048:	607a      	str	r2, [r7, #4]
 800504a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800504c:	7afb      	ldrb	r3, [r7, #11]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d138      	bne.n	80050c4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005058:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005060:	2b03      	cmp	r3, #3
 8005062:	d14a      	bne.n	80050fa <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	689a      	ldr	r2, [r3, #8]
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	429a      	cmp	r2, r3
 800506e:	d913      	bls.n	8005098 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	689a      	ldr	r2, [r3, #8]
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	1ad2      	subs	r2, r2, r3
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	68da      	ldr	r2, [r3, #12]
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	4293      	cmp	r3, r2
 8005088:	bf28      	it	cs
 800508a:	4613      	movcs	r3, r2
 800508c:	461a      	mov	r2, r3
 800508e:	6879      	ldr	r1, [r7, #4]
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	f001 f81c 	bl	80060ce <USBD_CtlContinueRx>
 8005096:	e030      	b.n	80050fa <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	2b03      	cmp	r3, #3
 80050a2:	d10b      	bne.n	80050bc <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d005      	beq.n	80050bc <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050b6:	691b      	ldr	r3, [r3, #16]
 80050b8:	68f8      	ldr	r0, [r7, #12]
 80050ba:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f001 f817 	bl	80060f0 <USBD_CtlSendStatus>
 80050c2:	e01a      	b.n	80050fa <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	2b03      	cmp	r3, #3
 80050ce:	d114      	bne.n	80050fa <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050d6:	699b      	ldr	r3, [r3, #24]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00e      	beq.n	80050fa <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050e2:	699b      	ldr	r3, [r3, #24]
 80050e4:	7afa      	ldrb	r2, [r7, #11]
 80050e6:	4611      	mov	r1, r2
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	4798      	blx	r3
 80050ec:	4603      	mov	r3, r0
 80050ee:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80050f0:	7dfb      	ldrb	r3, [r7, #23]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d001      	beq.n	80050fa <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80050f6:	7dfb      	ldrb	r3, [r7, #23]
 80050f8:	e000      	b.n	80050fc <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3718      	adds	r7, #24
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b086      	sub	sp, #24
 8005108:	af00      	add	r7, sp, #0
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	460b      	mov	r3, r1
 800510e:	607a      	str	r2, [r7, #4]
 8005110:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005112:	7afb      	ldrb	r3, [r7, #11]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d16b      	bne.n	80051f0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	3314      	adds	r3, #20
 800511c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005124:	2b02      	cmp	r3, #2
 8005126:	d156      	bne.n	80051d6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	689a      	ldr	r2, [r3, #8]
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	429a      	cmp	r2, r3
 8005132:	d914      	bls.n	800515e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	689a      	ldr	r2, [r3, #8]
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	1ad2      	subs	r2, r2, r3
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	461a      	mov	r2, r3
 8005148:	6879      	ldr	r1, [r7, #4]
 800514a:	68f8      	ldr	r0, [r7, #12]
 800514c:	f000 ffae 	bl	80060ac <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005150:	2300      	movs	r3, #0
 8005152:	2200      	movs	r2, #0
 8005154:	2100      	movs	r1, #0
 8005156:	68f8      	ldr	r0, [r7, #12]
 8005158:	f001 fcb6 	bl	8006ac8 <USBD_LL_PrepareReceive>
 800515c:	e03b      	b.n	80051d6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	68da      	ldr	r2, [r3, #12]
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	429a      	cmp	r2, r3
 8005168:	d11c      	bne.n	80051a4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	685a      	ldr	r2, [r3, #4]
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005172:	429a      	cmp	r2, r3
 8005174:	d316      	bcc.n	80051a4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	685a      	ldr	r2, [r3, #4]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005180:	429a      	cmp	r2, r3
 8005182:	d20f      	bcs.n	80051a4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005184:	2200      	movs	r2, #0
 8005186:	2100      	movs	r1, #0
 8005188:	68f8      	ldr	r0, [r7, #12]
 800518a:	f000 ff8f 	bl	80060ac <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2200      	movs	r2, #0
 8005192:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005196:	2300      	movs	r3, #0
 8005198:	2200      	movs	r2, #0
 800519a:	2100      	movs	r1, #0
 800519c:	68f8      	ldr	r0, [r7, #12]
 800519e:	f001 fc93 	bl	8006ac8 <USBD_LL_PrepareReceive>
 80051a2:	e018      	b.n	80051d6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	2b03      	cmp	r3, #3
 80051ae:	d10b      	bne.n	80051c8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d005      	beq.n	80051c8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	68f8      	ldr	r0, [r7, #12]
 80051c6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80051c8:	2180      	movs	r1, #128	; 0x80
 80051ca:	68f8      	ldr	r0, [r7, #12]
 80051cc:	f001 fb76 	bl	80068bc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	f000 ffa0 	bl	8006116 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d122      	bne.n	8005226 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80051e0:	68f8      	ldr	r0, [r7, #12]
 80051e2:	f7ff fe98 	bl	8004f16 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80051ee:	e01a      	b.n	8005226 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	2b03      	cmp	r3, #3
 80051fa:	d114      	bne.n	8005226 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005202:	695b      	ldr	r3, [r3, #20]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d00e      	beq.n	8005226 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800520e:	695b      	ldr	r3, [r3, #20]
 8005210:	7afa      	ldrb	r2, [r7, #11]
 8005212:	4611      	mov	r1, r2
 8005214:	68f8      	ldr	r0, [r7, #12]
 8005216:	4798      	blx	r3
 8005218:	4603      	mov	r3, r0
 800521a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800521c:	7dfb      	ldrb	r3, [r7, #23]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d001      	beq.n	8005226 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8005222:	7dfb      	ldrb	r3, [r7, #23]
 8005224:	e000      	b.n	8005228 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8005226:	2300      	movs	r3, #0
}
 8005228:	4618      	mov	r0, r3
 800522a:	3718      	adds	r7, #24
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b082      	sub	sp, #8
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800525c:	2b00      	cmp	r3, #0
 800525e:	d101      	bne.n	8005264 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8005260:	2303      	movs	r3, #3
 8005262:	e02f      	b.n	80052c4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00f      	beq.n	800528e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d009      	beq.n	800528e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	6852      	ldr	r2, [r2, #4]
 8005286:	b2d2      	uxtb	r2, r2
 8005288:	4611      	mov	r1, r2
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800528e:	2340      	movs	r3, #64	; 0x40
 8005290:	2200      	movs	r2, #0
 8005292:	2100      	movs	r1, #0
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f001 fa9d 	bl	80067d4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2201      	movs	r2, #1
 800529e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2240      	movs	r2, #64	; 0x40
 80052a6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80052aa:	2340      	movs	r3, #64	; 0x40
 80052ac:	2200      	movs	r2, #0
 80052ae:	2180      	movs	r1, #128	; 0x80
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f001 fa8f 	bl	80067d4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2201      	movs	r2, #1
 80052ba:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2240      	movs	r2, #64	; 0x40
 80052c0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80052c2:	2300      	movs	r3, #0
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3708      	adds	r7, #8
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	460b      	mov	r3, r1
 80052d6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	78fa      	ldrb	r2, [r7, #3]
 80052dc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80052de:	2300      	movs	r3, #0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	370c      	adds	r7, #12
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052fa:	b2da      	uxtb	r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2204      	movs	r2, #4
 8005306:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005326:	b2db      	uxtb	r3, r3
 8005328:	2b04      	cmp	r3, #4
 800532a:	d106      	bne.n	800533a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005332:	b2da      	uxtb	r2, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005356:	2b00      	cmp	r3, #0
 8005358:	d101      	bne.n	800535e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800535a:	2303      	movs	r3, #3
 800535c:	e012      	b.n	8005384 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005364:	b2db      	uxtb	r3, r3
 8005366:	2b03      	cmp	r3, #3
 8005368:	d10b      	bne.n	8005382 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005370:	69db      	ldr	r3, [r3, #28]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d005      	beq.n	8005382 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800537c:	69db      	ldr	r3, [r3, #28]
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3708      	adds	r7, #8
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b082      	sub	sp, #8
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	460b      	mov	r3, r1
 8005396:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d101      	bne.n	80053a6 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e014      	b.n	80053d0 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	2b03      	cmp	r3, #3
 80053b0:	d10d      	bne.n	80053ce <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053b8:	6a1b      	ldr	r3, [r3, #32]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d007      	beq.n	80053ce <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053c4:	6a1b      	ldr	r3, [r3, #32]
 80053c6:	78fa      	ldrb	r2, [r7, #3]
 80053c8:	4611      	mov	r1, r2
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3708      	adds	r7, #8
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	460b      	mov	r3, r1
 80053e2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d101      	bne.n	80053f2 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e014      	b.n	800541c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	2b03      	cmp	r3, #3
 80053fc:	d10d      	bne.n	800541a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005406:	2b00      	cmp	r3, #0
 8005408:	d007      	beq.n	800541a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005412:	78fa      	ldrb	r2, [r7, #3]
 8005414:	4611      	mov	r1, r2
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3708      	adds	r7, #8
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	370c      	adds	r7, #12
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr

0800543a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800543a:	b580      	push	{r7, lr}
 800543c:	b082      	sub	sp, #8
 800543e:	af00      	add	r7, sp, #0
 8005440:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2201      	movs	r2, #1
 8005446:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005450:	2b00      	cmp	r3, #0
 8005452:	d009      	beq.n	8005468 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	6852      	ldr	r2, [r2, #4]
 8005460:	b2d2      	uxtb	r2, r2
 8005462:	4611      	mov	r1, r2
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	4798      	blx	r3
  }

  return USBD_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	3708      	adds	r7, #8
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}

08005472 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005472:	b480      	push	{r7}
 8005474:	b087      	sub	sp, #28
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	3301      	adds	r3, #1
 8005488:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005490:	8a3b      	ldrh	r3, [r7, #16]
 8005492:	021b      	lsls	r3, r3, #8
 8005494:	b21a      	sxth	r2, r3
 8005496:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800549a:	4313      	orrs	r3, r2
 800549c:	b21b      	sxth	r3, r3
 800549e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80054a0:	89fb      	ldrh	r3, [r7, #14]
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	371c      	adds	r7, #28
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr
	...

080054b0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80054ba:	2300      	movs	r3, #0
 80054bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80054c6:	2b40      	cmp	r3, #64	; 0x40
 80054c8:	d005      	beq.n	80054d6 <USBD_StdDevReq+0x26>
 80054ca:	2b40      	cmp	r3, #64	; 0x40
 80054cc:	d853      	bhi.n	8005576 <USBD_StdDevReq+0xc6>
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00b      	beq.n	80054ea <USBD_StdDevReq+0x3a>
 80054d2:	2b20      	cmp	r3, #32
 80054d4:	d14f      	bne.n	8005576 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	6839      	ldr	r1, [r7, #0]
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	4798      	blx	r3
 80054e4:	4603      	mov	r3, r0
 80054e6:	73fb      	strb	r3, [r7, #15]
      break;
 80054e8:	e04a      	b.n	8005580 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	785b      	ldrb	r3, [r3, #1]
 80054ee:	2b09      	cmp	r3, #9
 80054f0:	d83b      	bhi.n	800556a <USBD_StdDevReq+0xba>
 80054f2:	a201      	add	r2, pc, #4	; (adr r2, 80054f8 <USBD_StdDevReq+0x48>)
 80054f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f8:	0800554d 	.word	0x0800554d
 80054fc:	08005561 	.word	0x08005561
 8005500:	0800556b 	.word	0x0800556b
 8005504:	08005557 	.word	0x08005557
 8005508:	0800556b 	.word	0x0800556b
 800550c:	0800552b 	.word	0x0800552b
 8005510:	08005521 	.word	0x08005521
 8005514:	0800556b 	.word	0x0800556b
 8005518:	08005543 	.word	0x08005543
 800551c:	08005535 	.word	0x08005535
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005520:	6839      	ldr	r1, [r7, #0]
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 f9de 	bl	80058e4 <USBD_GetDescriptor>
          break;
 8005528:	e024      	b.n	8005574 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800552a:	6839      	ldr	r1, [r7, #0]
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f000 fb6d 	bl	8005c0c <USBD_SetAddress>
          break;
 8005532:	e01f      	b.n	8005574 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005534:	6839      	ldr	r1, [r7, #0]
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 fbac 	bl	8005c94 <USBD_SetConfig>
 800553c:	4603      	mov	r3, r0
 800553e:	73fb      	strb	r3, [r7, #15]
          break;
 8005540:	e018      	b.n	8005574 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005542:	6839      	ldr	r1, [r7, #0]
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 fc4b 	bl	8005de0 <USBD_GetConfig>
          break;
 800554a:	e013      	b.n	8005574 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800554c:	6839      	ldr	r1, [r7, #0]
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 fc7c 	bl	8005e4c <USBD_GetStatus>
          break;
 8005554:	e00e      	b.n	8005574 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005556:	6839      	ldr	r1, [r7, #0]
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 fcab 	bl	8005eb4 <USBD_SetFeature>
          break;
 800555e:	e009      	b.n	8005574 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005560:	6839      	ldr	r1, [r7, #0]
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 fcba 	bl	8005edc <USBD_ClrFeature>
          break;
 8005568:	e004      	b.n	8005574 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800556a:	6839      	ldr	r1, [r7, #0]
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f000 fd11 	bl	8005f94 <USBD_CtlError>
          break;
 8005572:	bf00      	nop
      }
      break;
 8005574:	e004      	b.n	8005580 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8005576:	6839      	ldr	r1, [r7, #0]
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 fd0b 	bl	8005f94 <USBD_CtlError>
      break;
 800557e:	bf00      	nop
  }

  return ret;
 8005580:	7bfb      	ldrb	r3, [r7, #15]
}
 8005582:	4618      	mov	r0, r3
 8005584:	3710      	adds	r7, #16
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop

0800558c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005596:	2300      	movs	r3, #0
 8005598:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80055a2:	2b40      	cmp	r3, #64	; 0x40
 80055a4:	d005      	beq.n	80055b2 <USBD_StdItfReq+0x26>
 80055a6:	2b40      	cmp	r3, #64	; 0x40
 80055a8:	d82f      	bhi.n	800560a <USBD_StdItfReq+0x7e>
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d001      	beq.n	80055b2 <USBD_StdItfReq+0x26>
 80055ae:	2b20      	cmp	r3, #32
 80055b0:	d12b      	bne.n	800560a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	3b01      	subs	r3, #1
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d81d      	bhi.n	80055fc <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	889b      	ldrh	r3, [r3, #4]
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d813      	bhi.n	80055f2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	6839      	ldr	r1, [r7, #0]
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	4798      	blx	r3
 80055d8:	4603      	mov	r3, r0
 80055da:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	88db      	ldrh	r3, [r3, #6]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d110      	bne.n	8005606 <USBD_StdItfReq+0x7a>
 80055e4:	7bfb      	ldrb	r3, [r7, #15]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d10d      	bne.n	8005606 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 fd80 	bl	80060f0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80055f0:	e009      	b.n	8005606 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80055f2:	6839      	ldr	r1, [r7, #0]
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 fccd 	bl	8005f94 <USBD_CtlError>
          break;
 80055fa:	e004      	b.n	8005606 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80055fc:	6839      	ldr	r1, [r7, #0]
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 fcc8 	bl	8005f94 <USBD_CtlError>
          break;
 8005604:	e000      	b.n	8005608 <USBD_StdItfReq+0x7c>
          break;
 8005606:	bf00      	nop
      }
      break;
 8005608:	e004      	b.n	8005614 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800560a:	6839      	ldr	r1, [r7, #0]
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f000 fcc1 	bl	8005f94 <USBD_CtlError>
      break;
 8005612:	bf00      	nop
  }

  return ret;
 8005614:	7bfb      	ldrb	r3, [r7, #15]
}
 8005616:	4618      	mov	r0, r3
 8005618:	3710      	adds	r7, #16
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}

0800561e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800561e:	b580      	push	{r7, lr}
 8005620:	b084      	sub	sp, #16
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
 8005626:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005628:	2300      	movs	r3, #0
 800562a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	889b      	ldrh	r3, [r3, #4]
 8005630:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800563a:	2b40      	cmp	r3, #64	; 0x40
 800563c:	d007      	beq.n	800564e <USBD_StdEPReq+0x30>
 800563e:	2b40      	cmp	r3, #64	; 0x40
 8005640:	f200 8145 	bhi.w	80058ce <USBD_StdEPReq+0x2b0>
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00c      	beq.n	8005662 <USBD_StdEPReq+0x44>
 8005648:	2b20      	cmp	r3, #32
 800564a:	f040 8140 	bne.w	80058ce <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	6839      	ldr	r1, [r7, #0]
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	4798      	blx	r3
 800565c:	4603      	mov	r3, r0
 800565e:	73fb      	strb	r3, [r7, #15]
      break;
 8005660:	e13a      	b.n	80058d8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	785b      	ldrb	r3, [r3, #1]
 8005666:	2b03      	cmp	r3, #3
 8005668:	d007      	beq.n	800567a <USBD_StdEPReq+0x5c>
 800566a:	2b03      	cmp	r3, #3
 800566c:	f300 8129 	bgt.w	80058c2 <USBD_StdEPReq+0x2a4>
 8005670:	2b00      	cmp	r3, #0
 8005672:	d07f      	beq.n	8005774 <USBD_StdEPReq+0x156>
 8005674:	2b01      	cmp	r3, #1
 8005676:	d03c      	beq.n	80056f2 <USBD_StdEPReq+0xd4>
 8005678:	e123      	b.n	80058c2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005680:	b2db      	uxtb	r3, r3
 8005682:	2b02      	cmp	r3, #2
 8005684:	d002      	beq.n	800568c <USBD_StdEPReq+0x6e>
 8005686:	2b03      	cmp	r3, #3
 8005688:	d016      	beq.n	80056b8 <USBD_StdEPReq+0x9a>
 800568a:	e02c      	b.n	80056e6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800568c:	7bbb      	ldrb	r3, [r7, #14]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00d      	beq.n	80056ae <USBD_StdEPReq+0x90>
 8005692:	7bbb      	ldrb	r3, [r7, #14]
 8005694:	2b80      	cmp	r3, #128	; 0x80
 8005696:	d00a      	beq.n	80056ae <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005698:	7bbb      	ldrb	r3, [r7, #14]
 800569a:	4619      	mov	r1, r3
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f001 f90d 	bl	80068bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80056a2:	2180      	movs	r1, #128	; 0x80
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f001 f909 	bl	80068bc <USBD_LL_StallEP>
 80056aa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80056ac:	e020      	b.n	80056f0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80056ae:	6839      	ldr	r1, [r7, #0]
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 fc6f 	bl	8005f94 <USBD_CtlError>
              break;
 80056b6:	e01b      	b.n	80056f0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	885b      	ldrh	r3, [r3, #2]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d10e      	bne.n	80056de <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80056c0:	7bbb      	ldrb	r3, [r7, #14]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00b      	beq.n	80056de <USBD_StdEPReq+0xc0>
 80056c6:	7bbb      	ldrb	r3, [r7, #14]
 80056c8:	2b80      	cmp	r3, #128	; 0x80
 80056ca:	d008      	beq.n	80056de <USBD_StdEPReq+0xc0>
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	88db      	ldrh	r3, [r3, #6]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d104      	bne.n	80056de <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80056d4:	7bbb      	ldrb	r3, [r7, #14]
 80056d6:	4619      	mov	r1, r3
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f001 f8ef 	bl	80068bc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 fd06 	bl	80060f0 <USBD_CtlSendStatus>

              break;
 80056e4:	e004      	b.n	80056f0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80056e6:	6839      	ldr	r1, [r7, #0]
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 fc53 	bl	8005f94 <USBD_CtlError>
              break;
 80056ee:	bf00      	nop
          }
          break;
 80056f0:	e0ec      	b.n	80058cc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d002      	beq.n	8005704 <USBD_StdEPReq+0xe6>
 80056fe:	2b03      	cmp	r3, #3
 8005700:	d016      	beq.n	8005730 <USBD_StdEPReq+0x112>
 8005702:	e030      	b.n	8005766 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005704:	7bbb      	ldrb	r3, [r7, #14]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d00d      	beq.n	8005726 <USBD_StdEPReq+0x108>
 800570a:	7bbb      	ldrb	r3, [r7, #14]
 800570c:	2b80      	cmp	r3, #128	; 0x80
 800570e:	d00a      	beq.n	8005726 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005710:	7bbb      	ldrb	r3, [r7, #14]
 8005712:	4619      	mov	r1, r3
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f001 f8d1 	bl	80068bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800571a:	2180      	movs	r1, #128	; 0x80
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f001 f8cd 	bl	80068bc <USBD_LL_StallEP>
 8005722:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005724:	e025      	b.n	8005772 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8005726:	6839      	ldr	r1, [r7, #0]
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 fc33 	bl	8005f94 <USBD_CtlError>
              break;
 800572e:	e020      	b.n	8005772 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	885b      	ldrh	r3, [r3, #2]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d11b      	bne.n	8005770 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005738:	7bbb      	ldrb	r3, [r7, #14]
 800573a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800573e:	2b00      	cmp	r3, #0
 8005740:	d004      	beq.n	800574c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005742:	7bbb      	ldrb	r3, [r7, #14]
 8005744:	4619      	mov	r1, r3
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f001 f8ee 	bl	8006928 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 fccf 	bl	80060f0 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	6839      	ldr	r1, [r7, #0]
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	4798      	blx	r3
 8005760:	4603      	mov	r3, r0
 8005762:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8005764:	e004      	b.n	8005770 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8005766:	6839      	ldr	r1, [r7, #0]
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 fc13 	bl	8005f94 <USBD_CtlError>
              break;
 800576e:	e000      	b.n	8005772 <USBD_StdEPReq+0x154>
              break;
 8005770:	bf00      	nop
          }
          break;
 8005772:	e0ab      	b.n	80058cc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800577a:	b2db      	uxtb	r3, r3
 800577c:	2b02      	cmp	r3, #2
 800577e:	d002      	beq.n	8005786 <USBD_StdEPReq+0x168>
 8005780:	2b03      	cmp	r3, #3
 8005782:	d032      	beq.n	80057ea <USBD_StdEPReq+0x1cc>
 8005784:	e097      	b.n	80058b6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005786:	7bbb      	ldrb	r3, [r7, #14]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d007      	beq.n	800579c <USBD_StdEPReq+0x17e>
 800578c:	7bbb      	ldrb	r3, [r7, #14]
 800578e:	2b80      	cmp	r3, #128	; 0x80
 8005790:	d004      	beq.n	800579c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8005792:	6839      	ldr	r1, [r7, #0]
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 fbfd 	bl	8005f94 <USBD_CtlError>
                break;
 800579a:	e091      	b.n	80058c0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800579c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	da0b      	bge.n	80057bc <USBD_StdEPReq+0x19e>
 80057a4:	7bbb      	ldrb	r3, [r7, #14]
 80057a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80057aa:	4613      	mov	r3, r2
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	4413      	add	r3, r2
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	3310      	adds	r3, #16
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	4413      	add	r3, r2
 80057b8:	3304      	adds	r3, #4
 80057ba:	e00b      	b.n	80057d4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80057bc:	7bbb      	ldrb	r3, [r7, #14]
 80057be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80057c2:	4613      	mov	r3, r2
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	4413      	add	r3, r2
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	4413      	add	r3, r2
 80057d2:	3304      	adds	r3, #4
 80057d4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	2200      	movs	r2, #0
 80057da:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	2202      	movs	r2, #2
 80057e0:	4619      	mov	r1, r3
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 fc47 	bl	8006076 <USBD_CtlSendData>
              break;
 80057e8:	e06a      	b.n	80058c0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80057ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	da11      	bge.n	8005816 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80057f2:	7bbb      	ldrb	r3, [r7, #14]
 80057f4:	f003 020f 	and.w	r2, r3, #15
 80057f8:	6879      	ldr	r1, [r7, #4]
 80057fa:	4613      	mov	r3, r2
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	4413      	add	r3, r2
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	440b      	add	r3, r1
 8005804:	3324      	adds	r3, #36	; 0x24
 8005806:	881b      	ldrh	r3, [r3, #0]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d117      	bne.n	800583c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800580c:	6839      	ldr	r1, [r7, #0]
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 fbc0 	bl	8005f94 <USBD_CtlError>
                  break;
 8005814:	e054      	b.n	80058c0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005816:	7bbb      	ldrb	r3, [r7, #14]
 8005818:	f003 020f 	and.w	r2, r3, #15
 800581c:	6879      	ldr	r1, [r7, #4]
 800581e:	4613      	mov	r3, r2
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	4413      	add	r3, r2
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	440b      	add	r3, r1
 8005828:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800582c:	881b      	ldrh	r3, [r3, #0]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d104      	bne.n	800583c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005832:	6839      	ldr	r1, [r7, #0]
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 fbad 	bl	8005f94 <USBD_CtlError>
                  break;
 800583a:	e041      	b.n	80058c0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800583c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005840:	2b00      	cmp	r3, #0
 8005842:	da0b      	bge.n	800585c <USBD_StdEPReq+0x23e>
 8005844:	7bbb      	ldrb	r3, [r7, #14]
 8005846:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800584a:	4613      	mov	r3, r2
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	4413      	add	r3, r2
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	3310      	adds	r3, #16
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	4413      	add	r3, r2
 8005858:	3304      	adds	r3, #4
 800585a:	e00b      	b.n	8005874 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800585c:	7bbb      	ldrb	r3, [r7, #14]
 800585e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005862:	4613      	mov	r3, r2
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	4413      	add	r3, r2
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	4413      	add	r3, r2
 8005872:	3304      	adds	r3, #4
 8005874:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005876:	7bbb      	ldrb	r3, [r7, #14]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d002      	beq.n	8005882 <USBD_StdEPReq+0x264>
 800587c:	7bbb      	ldrb	r3, [r7, #14]
 800587e:	2b80      	cmp	r3, #128	; 0x80
 8005880:	d103      	bne.n	800588a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	2200      	movs	r2, #0
 8005886:	601a      	str	r2, [r3, #0]
 8005888:	e00e      	b.n	80058a8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800588a:	7bbb      	ldrb	r3, [r7, #14]
 800588c:	4619      	mov	r1, r3
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f001 f880 	bl	8006994 <USBD_LL_IsStallEP>
 8005894:	4603      	mov	r3, r0
 8005896:	2b00      	cmp	r3, #0
 8005898:	d003      	beq.n	80058a2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	2201      	movs	r2, #1
 800589e:	601a      	str	r2, [r3, #0]
 80058a0:	e002      	b.n	80058a8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	2200      	movs	r2, #0
 80058a6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	2202      	movs	r2, #2
 80058ac:	4619      	mov	r1, r3
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 fbe1 	bl	8006076 <USBD_CtlSendData>
              break;
 80058b4:	e004      	b.n	80058c0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80058b6:	6839      	ldr	r1, [r7, #0]
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f000 fb6b 	bl	8005f94 <USBD_CtlError>
              break;
 80058be:	bf00      	nop
          }
          break;
 80058c0:	e004      	b.n	80058cc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80058c2:	6839      	ldr	r1, [r7, #0]
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f000 fb65 	bl	8005f94 <USBD_CtlError>
          break;
 80058ca:	bf00      	nop
      }
      break;
 80058cc:	e004      	b.n	80058d8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80058ce:	6839      	ldr	r1, [r7, #0]
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f000 fb5f 	bl	8005f94 <USBD_CtlError>
      break;
 80058d6:	bf00      	nop
  }

  return ret;
 80058d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3710      	adds	r7, #16
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
	...

080058e4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b084      	sub	sp, #16
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80058ee:	2300      	movs	r3, #0
 80058f0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80058f2:	2300      	movs	r3, #0
 80058f4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80058f6:	2300      	movs	r3, #0
 80058f8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	885b      	ldrh	r3, [r3, #2]
 80058fe:	0a1b      	lsrs	r3, r3, #8
 8005900:	b29b      	uxth	r3, r3
 8005902:	3b01      	subs	r3, #1
 8005904:	2b0e      	cmp	r3, #14
 8005906:	f200 8152 	bhi.w	8005bae <USBD_GetDescriptor+0x2ca>
 800590a:	a201      	add	r2, pc, #4	; (adr r2, 8005910 <USBD_GetDescriptor+0x2c>)
 800590c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005910:	08005981 	.word	0x08005981
 8005914:	08005999 	.word	0x08005999
 8005918:	080059d9 	.word	0x080059d9
 800591c:	08005baf 	.word	0x08005baf
 8005920:	08005baf 	.word	0x08005baf
 8005924:	08005b4f 	.word	0x08005b4f
 8005928:	08005b7b 	.word	0x08005b7b
 800592c:	08005baf 	.word	0x08005baf
 8005930:	08005baf 	.word	0x08005baf
 8005934:	08005baf 	.word	0x08005baf
 8005938:	08005baf 	.word	0x08005baf
 800593c:	08005baf 	.word	0x08005baf
 8005940:	08005baf 	.word	0x08005baf
 8005944:	08005baf 	.word	0x08005baf
 8005948:	0800594d 	.word	0x0800594d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005952:	69db      	ldr	r3, [r3, #28]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d00b      	beq.n	8005970 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800595e:	69db      	ldr	r3, [r3, #28]
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	7c12      	ldrb	r2, [r2, #16]
 8005964:	f107 0108 	add.w	r1, r7, #8
 8005968:	4610      	mov	r0, r2
 800596a:	4798      	blx	r3
 800596c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800596e:	e126      	b.n	8005bbe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8005970:	6839      	ldr	r1, [r7, #0]
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 fb0e 	bl	8005f94 <USBD_CtlError>
        err++;
 8005978:	7afb      	ldrb	r3, [r7, #11]
 800597a:	3301      	adds	r3, #1
 800597c:	72fb      	strb	r3, [r7, #11]
      break;
 800597e:	e11e      	b.n	8005bbe <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	7c12      	ldrb	r2, [r2, #16]
 800598c:	f107 0108 	add.w	r1, r7, #8
 8005990:	4610      	mov	r0, r2
 8005992:	4798      	blx	r3
 8005994:	60f8      	str	r0, [r7, #12]
      break;
 8005996:	e112      	b.n	8005bbe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	7c1b      	ldrb	r3, [r3, #16]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d10d      	bne.n	80059bc <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a8:	f107 0208 	add.w	r2, r7, #8
 80059ac:	4610      	mov	r0, r2
 80059ae:	4798      	blx	r3
 80059b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	3301      	adds	r3, #1
 80059b6:	2202      	movs	r2, #2
 80059b8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80059ba:	e100      	b.n	8005bbe <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c4:	f107 0208 	add.w	r2, r7, #8
 80059c8:	4610      	mov	r0, r2
 80059ca:	4798      	blx	r3
 80059cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	3301      	adds	r3, #1
 80059d2:	2202      	movs	r2, #2
 80059d4:	701a      	strb	r2, [r3, #0]
      break;
 80059d6:	e0f2      	b.n	8005bbe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	885b      	ldrh	r3, [r3, #2]
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	2b05      	cmp	r3, #5
 80059e0:	f200 80ac 	bhi.w	8005b3c <USBD_GetDescriptor+0x258>
 80059e4:	a201      	add	r2, pc, #4	; (adr r2, 80059ec <USBD_GetDescriptor+0x108>)
 80059e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ea:	bf00      	nop
 80059ec:	08005a05 	.word	0x08005a05
 80059f0:	08005a39 	.word	0x08005a39
 80059f4:	08005a6d 	.word	0x08005a6d
 80059f8:	08005aa1 	.word	0x08005aa1
 80059fc:	08005ad5 	.word	0x08005ad5
 8005a00:	08005b09 	.word	0x08005b09
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d00b      	beq.n	8005a28 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	7c12      	ldrb	r2, [r2, #16]
 8005a1c:	f107 0108 	add.w	r1, r7, #8
 8005a20:	4610      	mov	r0, r2
 8005a22:	4798      	blx	r3
 8005a24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005a26:	e091      	b.n	8005b4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005a28:	6839      	ldr	r1, [r7, #0]
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 fab2 	bl	8005f94 <USBD_CtlError>
            err++;
 8005a30:	7afb      	ldrb	r3, [r7, #11]
 8005a32:	3301      	adds	r3, #1
 8005a34:	72fb      	strb	r3, [r7, #11]
          break;
 8005a36:	e089      	b.n	8005b4c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d00b      	beq.n	8005a5c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	7c12      	ldrb	r2, [r2, #16]
 8005a50:	f107 0108 	add.w	r1, r7, #8
 8005a54:	4610      	mov	r0, r2
 8005a56:	4798      	blx	r3
 8005a58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005a5a:	e077      	b.n	8005b4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005a5c:	6839      	ldr	r1, [r7, #0]
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 fa98 	bl	8005f94 <USBD_CtlError>
            err++;
 8005a64:	7afb      	ldrb	r3, [r7, #11]
 8005a66:	3301      	adds	r3, #1
 8005a68:	72fb      	strb	r3, [r7, #11]
          break;
 8005a6a:	e06f      	b.n	8005b4c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d00b      	beq.n	8005a90 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	7c12      	ldrb	r2, [r2, #16]
 8005a84:	f107 0108 	add.w	r1, r7, #8
 8005a88:	4610      	mov	r0, r2
 8005a8a:	4798      	blx	r3
 8005a8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005a8e:	e05d      	b.n	8005b4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005a90:	6839      	ldr	r1, [r7, #0]
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 fa7e 	bl	8005f94 <USBD_CtlError>
            err++;
 8005a98:	7afb      	ldrb	r3, [r7, #11]
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	72fb      	strb	r3, [r7, #11]
          break;
 8005a9e:	e055      	b.n	8005b4c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005aa6:	691b      	ldr	r3, [r3, #16]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d00b      	beq.n	8005ac4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	7c12      	ldrb	r2, [r2, #16]
 8005ab8:	f107 0108 	add.w	r1, r7, #8
 8005abc:	4610      	mov	r0, r2
 8005abe:	4798      	blx	r3
 8005ac0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005ac2:	e043      	b.n	8005b4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005ac4:	6839      	ldr	r1, [r7, #0]
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 fa64 	bl	8005f94 <USBD_CtlError>
            err++;
 8005acc:	7afb      	ldrb	r3, [r7, #11]
 8005ace:	3301      	adds	r3, #1
 8005ad0:	72fb      	strb	r3, [r7, #11]
          break;
 8005ad2:	e03b      	b.n	8005b4c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ada:	695b      	ldr	r3, [r3, #20]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d00b      	beq.n	8005af8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ae6:	695b      	ldr	r3, [r3, #20]
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	7c12      	ldrb	r2, [r2, #16]
 8005aec:	f107 0108 	add.w	r1, r7, #8
 8005af0:	4610      	mov	r0, r2
 8005af2:	4798      	blx	r3
 8005af4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005af6:	e029      	b.n	8005b4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005af8:	6839      	ldr	r1, [r7, #0]
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 fa4a 	bl	8005f94 <USBD_CtlError>
            err++;
 8005b00:	7afb      	ldrb	r3, [r7, #11]
 8005b02:	3301      	adds	r3, #1
 8005b04:	72fb      	strb	r3, [r7, #11]
          break;
 8005b06:	e021      	b.n	8005b4c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b0e:	699b      	ldr	r3, [r3, #24]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d00b      	beq.n	8005b2c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b1a:	699b      	ldr	r3, [r3, #24]
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	7c12      	ldrb	r2, [r2, #16]
 8005b20:	f107 0108 	add.w	r1, r7, #8
 8005b24:	4610      	mov	r0, r2
 8005b26:	4798      	blx	r3
 8005b28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b2a:	e00f      	b.n	8005b4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005b2c:	6839      	ldr	r1, [r7, #0]
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 fa30 	bl	8005f94 <USBD_CtlError>
            err++;
 8005b34:	7afb      	ldrb	r3, [r7, #11]
 8005b36:	3301      	adds	r3, #1
 8005b38:	72fb      	strb	r3, [r7, #11]
          break;
 8005b3a:	e007      	b.n	8005b4c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005b3c:	6839      	ldr	r1, [r7, #0]
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 fa28 	bl	8005f94 <USBD_CtlError>
          err++;
 8005b44:	7afb      	ldrb	r3, [r7, #11]
 8005b46:	3301      	adds	r3, #1
 8005b48:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8005b4a:	bf00      	nop
      }
      break;
 8005b4c:	e037      	b.n	8005bbe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	7c1b      	ldrb	r3, [r3, #16]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d109      	bne.n	8005b6a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b5e:	f107 0208 	add.w	r2, r7, #8
 8005b62:	4610      	mov	r0, r2
 8005b64:	4798      	blx	r3
 8005b66:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005b68:	e029      	b.n	8005bbe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8005b6a:	6839      	ldr	r1, [r7, #0]
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f000 fa11 	bl	8005f94 <USBD_CtlError>
        err++;
 8005b72:	7afb      	ldrb	r3, [r7, #11]
 8005b74:	3301      	adds	r3, #1
 8005b76:	72fb      	strb	r3, [r7, #11]
      break;
 8005b78:	e021      	b.n	8005bbe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	7c1b      	ldrb	r3, [r3, #16]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d10d      	bne.n	8005b9e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b8a:	f107 0208 	add.w	r2, r7, #8
 8005b8e:	4610      	mov	r0, r2
 8005b90:	4798      	blx	r3
 8005b92:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	3301      	adds	r3, #1
 8005b98:	2207      	movs	r2, #7
 8005b9a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005b9c:	e00f      	b.n	8005bbe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8005b9e:	6839      	ldr	r1, [r7, #0]
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 f9f7 	bl	8005f94 <USBD_CtlError>
        err++;
 8005ba6:	7afb      	ldrb	r3, [r7, #11]
 8005ba8:	3301      	adds	r3, #1
 8005baa:	72fb      	strb	r3, [r7, #11]
      break;
 8005bac:	e007      	b.n	8005bbe <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8005bae:	6839      	ldr	r1, [r7, #0]
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f000 f9ef 	bl	8005f94 <USBD_CtlError>
      err++;
 8005bb6:	7afb      	ldrb	r3, [r7, #11]
 8005bb8:	3301      	adds	r3, #1
 8005bba:	72fb      	strb	r3, [r7, #11]
      break;
 8005bbc:	bf00      	nop
  }

  if (err != 0U)
 8005bbe:	7afb      	ldrb	r3, [r7, #11]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d11e      	bne.n	8005c02 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	88db      	ldrh	r3, [r3, #6]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d016      	beq.n	8005bfa <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8005bcc:	893b      	ldrh	r3, [r7, #8]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00e      	beq.n	8005bf0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	88da      	ldrh	r2, [r3, #6]
 8005bd6:	893b      	ldrh	r3, [r7, #8]
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	bf28      	it	cs
 8005bdc:	4613      	movcs	r3, r2
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005be2:	893b      	ldrh	r3, [r7, #8]
 8005be4:	461a      	mov	r2, r3
 8005be6:	68f9      	ldr	r1, [r7, #12]
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 fa44 	bl	8006076 <USBD_CtlSendData>
 8005bee:	e009      	b.n	8005c04 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005bf0:	6839      	ldr	r1, [r7, #0]
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 f9ce 	bl	8005f94 <USBD_CtlError>
 8005bf8:	e004      	b.n	8005c04 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 fa78 	bl	80060f0 <USBD_CtlSendStatus>
 8005c00:	e000      	b.n	8005c04 <USBD_GetDescriptor+0x320>
    return;
 8005c02:	bf00      	nop
  }
}
 8005c04:	3710      	adds	r7, #16
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop

08005c0c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	889b      	ldrh	r3, [r3, #4]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d131      	bne.n	8005c82 <USBD_SetAddress+0x76>
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	88db      	ldrh	r3, [r3, #6]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d12d      	bne.n	8005c82 <USBD_SetAddress+0x76>
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	885b      	ldrh	r3, [r3, #2]
 8005c2a:	2b7f      	cmp	r3, #127	; 0x7f
 8005c2c:	d829      	bhi.n	8005c82 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	885b      	ldrh	r3, [r3, #2]
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c38:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	2b03      	cmp	r3, #3
 8005c44:	d104      	bne.n	8005c50 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005c46:	6839      	ldr	r1, [r7, #0]
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f000 f9a3 	bl	8005f94 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c4e:	e01d      	b.n	8005c8c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	7bfa      	ldrb	r2, [r7, #15]
 8005c54:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005c58:	7bfb      	ldrb	r3, [r7, #15]
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f000 fec5 	bl	80069ec <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 fa44 	bl	80060f0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005c68:	7bfb      	ldrb	r3, [r7, #15]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d004      	beq.n	8005c78 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2202      	movs	r2, #2
 8005c72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c76:	e009      	b.n	8005c8c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c80:	e004      	b.n	8005c8c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005c82:	6839      	ldr	r1, [r7, #0]
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f000 f985 	bl	8005f94 <USBD_CtlError>
  }
}
 8005c8a:	bf00      	nop
 8005c8c:	bf00      	nop
 8005c8e:	3710      	adds	r7, #16
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	885b      	ldrh	r3, [r3, #2]
 8005ca6:	b2da      	uxtb	r2, r3
 8005ca8:	4b4c      	ldr	r3, [pc, #304]	; (8005ddc <USBD_SetConfig+0x148>)
 8005caa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005cac:	4b4b      	ldr	r3, [pc, #300]	; (8005ddc <USBD_SetConfig+0x148>)
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d905      	bls.n	8005cc0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005cb4:	6839      	ldr	r1, [r7, #0]
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 f96c 	bl	8005f94 <USBD_CtlError>
    return USBD_FAIL;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	e088      	b.n	8005dd2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	2b02      	cmp	r3, #2
 8005cca:	d002      	beq.n	8005cd2 <USBD_SetConfig+0x3e>
 8005ccc:	2b03      	cmp	r3, #3
 8005cce:	d025      	beq.n	8005d1c <USBD_SetConfig+0x88>
 8005cd0:	e071      	b.n	8005db6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005cd2:	4b42      	ldr	r3, [pc, #264]	; (8005ddc <USBD_SetConfig+0x148>)
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d01c      	beq.n	8005d14 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8005cda:	4b40      	ldr	r3, [pc, #256]	; (8005ddc <USBD_SetConfig+0x148>)
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	461a      	mov	r2, r3
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005ce4:	4b3d      	ldr	r3, [pc, #244]	; (8005ddc <USBD_SetConfig+0x148>)
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	4619      	mov	r1, r3
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f7ff f91e 	bl	8004f2c <USBD_SetClassConfig>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005cf4:	7bfb      	ldrb	r3, [r7, #15]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d004      	beq.n	8005d04 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8005cfa:	6839      	ldr	r1, [r7, #0]
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 f949 	bl	8005f94 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005d02:	e065      	b.n	8005dd0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 f9f3 	bl	80060f0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2203      	movs	r2, #3
 8005d0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005d12:	e05d      	b.n	8005dd0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 f9eb 	bl	80060f0 <USBD_CtlSendStatus>
      break;
 8005d1a:	e059      	b.n	8005dd0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005d1c:	4b2f      	ldr	r3, [pc, #188]	; (8005ddc <USBD_SetConfig+0x148>)
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d112      	bne.n	8005d4a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2202      	movs	r2, #2
 8005d28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8005d2c:	4b2b      	ldr	r3, [pc, #172]	; (8005ddc <USBD_SetConfig+0x148>)
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	461a      	mov	r2, r3
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005d36:	4b29      	ldr	r3, [pc, #164]	; (8005ddc <USBD_SetConfig+0x148>)
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f7ff f911 	bl	8004f64 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 f9d4 	bl	80060f0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005d48:	e042      	b.n	8005dd0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8005d4a:	4b24      	ldr	r3, [pc, #144]	; (8005ddc <USBD_SetConfig+0x148>)
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	461a      	mov	r2, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d02a      	beq.n	8005dae <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	4619      	mov	r1, r3
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f7ff f8ff 	bl	8004f64 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005d66:	4b1d      	ldr	r3, [pc, #116]	; (8005ddc <USBD_SetConfig+0x148>)
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005d70:	4b1a      	ldr	r3, [pc, #104]	; (8005ddc <USBD_SetConfig+0x148>)
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	4619      	mov	r1, r3
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f7ff f8d8 	bl	8004f2c <USBD_SetClassConfig>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005d80:	7bfb      	ldrb	r3, [r7, #15]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d00f      	beq.n	8005da6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8005d86:	6839      	ldr	r1, [r7, #0]
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f000 f903 	bl	8005f94 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	4619      	mov	r1, r3
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f7ff f8e4 	bl	8004f64 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2202      	movs	r2, #2
 8005da0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005da4:	e014      	b.n	8005dd0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 f9a2 	bl	80060f0 <USBD_CtlSendStatus>
      break;
 8005dac:	e010      	b.n	8005dd0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 f99e 	bl	80060f0 <USBD_CtlSendStatus>
      break;
 8005db4:	e00c      	b.n	8005dd0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8005db6:	6839      	ldr	r1, [r7, #0]
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 f8eb 	bl	8005f94 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005dbe:	4b07      	ldr	r3, [pc, #28]	; (8005ddc <USBD_SetConfig+0x148>)
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f7ff f8cd 	bl	8004f64 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	73fb      	strb	r3, [r7, #15]
      break;
 8005dce:	bf00      	nop
  }

  return ret;
 8005dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	20000198 	.word	0x20000198

08005de0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	88db      	ldrh	r3, [r3, #6]
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d004      	beq.n	8005dfc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005df2:	6839      	ldr	r1, [r7, #0]
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f000 f8cd 	bl	8005f94 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005dfa:	e023      	b.n	8005e44 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	2b02      	cmp	r3, #2
 8005e06:	dc02      	bgt.n	8005e0e <USBD_GetConfig+0x2e>
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	dc03      	bgt.n	8005e14 <USBD_GetConfig+0x34>
 8005e0c:	e015      	b.n	8005e3a <USBD_GetConfig+0x5a>
 8005e0e:	2b03      	cmp	r3, #3
 8005e10:	d00b      	beq.n	8005e2a <USBD_GetConfig+0x4a>
 8005e12:	e012      	b.n	8005e3a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	3308      	adds	r3, #8
 8005e1e:	2201      	movs	r2, #1
 8005e20:	4619      	mov	r1, r3
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 f927 	bl	8006076 <USBD_CtlSendData>
        break;
 8005e28:	e00c      	b.n	8005e44 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	3304      	adds	r3, #4
 8005e2e:	2201      	movs	r2, #1
 8005e30:	4619      	mov	r1, r3
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 f91f 	bl	8006076 <USBD_CtlSendData>
        break;
 8005e38:	e004      	b.n	8005e44 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8005e3a:	6839      	ldr	r1, [r7, #0]
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 f8a9 	bl	8005f94 <USBD_CtlError>
        break;
 8005e42:	bf00      	nop
}
 8005e44:	bf00      	nop
 8005e46:	3708      	adds	r7, #8
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	2b02      	cmp	r3, #2
 8005e62:	d81e      	bhi.n	8005ea2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	88db      	ldrh	r3, [r3, #6]
 8005e68:	2b02      	cmp	r3, #2
 8005e6a:	d004      	beq.n	8005e76 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8005e6c:	6839      	ldr	r1, [r7, #0]
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 f890 	bl	8005f94 <USBD_CtlError>
        break;
 8005e74:	e01a      	b.n	8005eac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d005      	beq.n	8005e92 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	f043 0202 	orr.w	r2, r3, #2
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	330c      	adds	r3, #12
 8005e96:	2202      	movs	r2, #2
 8005e98:	4619      	mov	r1, r3
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 f8eb 	bl	8006076 <USBD_CtlSendData>
      break;
 8005ea0:	e004      	b.n	8005eac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005ea2:	6839      	ldr	r1, [r7, #0]
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 f875 	bl	8005f94 <USBD_CtlError>
      break;
 8005eaa:	bf00      	nop
  }
}
 8005eac:	bf00      	nop
 8005eae:	3708      	adds	r7, #8
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b082      	sub	sp, #8
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	885b      	ldrh	r3, [r3, #2]
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d106      	bne.n	8005ed4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 f90e 	bl	80060f0 <USBD_CtlSendStatus>
  }
}
 8005ed4:	bf00      	nop
 8005ed6:	3708      	adds	r7, #8
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b082      	sub	sp, #8
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	2b02      	cmp	r3, #2
 8005ef2:	d80b      	bhi.n	8005f0c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	885b      	ldrh	r3, [r3, #2]
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d10c      	bne.n	8005f16 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f000 f8f3 	bl	80060f0 <USBD_CtlSendStatus>
      }
      break;
 8005f0a:	e004      	b.n	8005f16 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8005f0c:	6839      	ldr	r1, [r7, #0]
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f000 f840 	bl	8005f94 <USBD_CtlError>
      break;
 8005f14:	e000      	b.n	8005f18 <USBD_ClrFeature+0x3c>
      break;
 8005f16:	bf00      	nop
  }
}
 8005f18:	bf00      	nop
 8005f1a:	3708      	adds	r7, #8
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	781a      	ldrb	r2, [r3, #0]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	3301      	adds	r3, #1
 8005f3a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	781a      	ldrb	r2, [r3, #0]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	3301      	adds	r3, #1
 8005f48:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005f4a:	68f8      	ldr	r0, [r7, #12]
 8005f4c:	f7ff fa91 	bl	8005472 <SWAPBYTE>
 8005f50:	4603      	mov	r3, r0
 8005f52:	461a      	mov	r2, r3
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	3301      	adds	r3, #1
 8005f62:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005f64:	68f8      	ldr	r0, [r7, #12]
 8005f66:	f7ff fa84 	bl	8005472 <SWAPBYTE>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	3301      	adds	r3, #1
 8005f76:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005f7e:	68f8      	ldr	r0, [r7, #12]
 8005f80:	f7ff fa77 	bl	8005472 <SWAPBYTE>
 8005f84:	4603      	mov	r3, r0
 8005f86:	461a      	mov	r2, r3
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	80da      	strh	r2, [r3, #6]
}
 8005f8c:	bf00      	nop
 8005f8e:	3710      	adds	r7, #16
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b082      	sub	sp, #8
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005f9e:	2180      	movs	r1, #128	; 0x80
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 fc8b 	bl	80068bc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005fa6:	2100      	movs	r1, #0
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 fc87 	bl	80068bc <USBD_LL_StallEP>
}
 8005fae:	bf00      	nop
 8005fb0:	3708      	adds	r7, #8
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}

08005fb6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005fb6:	b580      	push	{r7, lr}
 8005fb8:	b086      	sub	sp, #24
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	60f8      	str	r0, [r7, #12]
 8005fbe:	60b9      	str	r1, [r7, #8]
 8005fc0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d036      	beq.n	800603a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005fd0:	6938      	ldr	r0, [r7, #16]
 8005fd2:	f000 f836 	bl	8006042 <USBD_GetLen>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	3301      	adds	r3, #1
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	005b      	lsls	r3, r3, #1
 8005fde:	b29a      	uxth	r2, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005fe4:	7dfb      	ldrb	r3, [r7, #23]
 8005fe6:	68ba      	ldr	r2, [r7, #8]
 8005fe8:	4413      	add	r3, r2
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	7812      	ldrb	r2, [r2, #0]
 8005fee:	701a      	strb	r2, [r3, #0]
  idx++;
 8005ff0:	7dfb      	ldrb	r3, [r7, #23]
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005ff6:	7dfb      	ldrb	r3, [r7, #23]
 8005ff8:	68ba      	ldr	r2, [r7, #8]
 8005ffa:	4413      	add	r3, r2
 8005ffc:	2203      	movs	r2, #3
 8005ffe:	701a      	strb	r2, [r3, #0]
  idx++;
 8006000:	7dfb      	ldrb	r3, [r7, #23]
 8006002:	3301      	adds	r3, #1
 8006004:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006006:	e013      	b.n	8006030 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006008:	7dfb      	ldrb	r3, [r7, #23]
 800600a:	68ba      	ldr	r2, [r7, #8]
 800600c:	4413      	add	r3, r2
 800600e:	693a      	ldr	r2, [r7, #16]
 8006010:	7812      	ldrb	r2, [r2, #0]
 8006012:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	3301      	adds	r3, #1
 8006018:	613b      	str	r3, [r7, #16]
    idx++;
 800601a:	7dfb      	ldrb	r3, [r7, #23]
 800601c:	3301      	adds	r3, #1
 800601e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006020:	7dfb      	ldrb	r3, [r7, #23]
 8006022:	68ba      	ldr	r2, [r7, #8]
 8006024:	4413      	add	r3, r2
 8006026:	2200      	movs	r2, #0
 8006028:	701a      	strb	r2, [r3, #0]
    idx++;
 800602a:	7dfb      	ldrb	r3, [r7, #23]
 800602c:	3301      	adds	r3, #1
 800602e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d1e7      	bne.n	8006008 <USBD_GetString+0x52>
 8006038:	e000      	b.n	800603c <USBD_GetString+0x86>
    return;
 800603a:	bf00      	nop
  }
}
 800603c:	3718      	adds	r7, #24
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006042:	b480      	push	{r7}
 8006044:	b085      	sub	sp, #20
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800604a:	2300      	movs	r3, #0
 800604c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006052:	e005      	b.n	8006060 <USBD_GetLen+0x1e>
  {
    len++;
 8006054:	7bfb      	ldrb	r3, [r7, #15]
 8006056:	3301      	adds	r3, #1
 8006058:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	3301      	adds	r3, #1
 800605e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d1f5      	bne.n	8006054 <USBD_GetLen+0x12>
  }

  return len;
 8006068:	7bfb      	ldrb	r3, [r7, #15]
}
 800606a:	4618      	mov	r0, r3
 800606c:	3714      	adds	r7, #20
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr

08006076 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006076:	b580      	push	{r7, lr}
 8006078:	b084      	sub	sp, #16
 800607a:	af00      	add	r7, sp, #0
 800607c:	60f8      	str	r0, [r7, #12]
 800607e:	60b9      	str	r1, [r7, #8]
 8006080:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2202      	movs	r2, #2
 8006086:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	68ba      	ldr	r2, [r7, #8]
 800609a:	2100      	movs	r1, #0
 800609c:	68f8      	ldr	r0, [r7, #12]
 800609e:	f000 fcdb 	bl	8006a58 <USBD_LL_Transmit>

  return USBD_OK;
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3710      	adds	r7, #16
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b084      	sub	sp, #16
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	68ba      	ldr	r2, [r7, #8]
 80060bc:	2100      	movs	r1, #0
 80060be:	68f8      	ldr	r0, [r7, #12]
 80060c0:	f000 fcca 	bl	8006a58 <USBD_LL_Transmit>

  return USBD_OK;
 80060c4:	2300      	movs	r3, #0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3710      	adds	r7, #16
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}

080060ce <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b084      	sub	sp, #16
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	60f8      	str	r0, [r7, #12]
 80060d6:	60b9      	str	r1, [r7, #8]
 80060d8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	68ba      	ldr	r2, [r7, #8]
 80060de:	2100      	movs	r1, #0
 80060e0:	68f8      	ldr	r0, [r7, #12]
 80060e2:	f000 fcf1 	bl	8006ac8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80060e6:	2300      	movs	r3, #0
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3710      	adds	r7, #16
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b082      	sub	sp, #8
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2204      	movs	r2, #4
 80060fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006100:	2300      	movs	r3, #0
 8006102:	2200      	movs	r2, #0
 8006104:	2100      	movs	r1, #0
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 fca6 	bl	8006a58 <USBD_LL_Transmit>

  return USBD_OK;
 800610c:	2300      	movs	r3, #0
}
 800610e:	4618      	mov	r0, r3
 8006110:	3708      	adds	r7, #8
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}

08006116 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006116:	b580      	push	{r7, lr}
 8006118:	b082      	sub	sp, #8
 800611a:	af00      	add	r7, sp, #0
 800611c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2205      	movs	r2, #5
 8006122:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006126:	2300      	movs	r3, #0
 8006128:	2200      	movs	r2, #0
 800612a:	2100      	movs	r1, #0
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 fccb 	bl	8006ac8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	3708      	adds	r7, #8
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006140:	2200      	movs	r2, #0
 8006142:	490e      	ldr	r1, [pc, #56]	; (800617c <MX_USB_DEVICE_Init+0x40>)
 8006144:	480e      	ldr	r0, [pc, #56]	; (8006180 <MX_USB_DEVICE_Init+0x44>)
 8006146:	f7fe fe83 	bl	8004e50 <USBD_Init>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d001      	beq.n	8006154 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006150:	f7fa f8d2 	bl	80002f8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8006154:	490b      	ldr	r1, [pc, #44]	; (8006184 <MX_USB_DEVICE_Init+0x48>)
 8006156:	480a      	ldr	r0, [pc, #40]	; (8006180 <MX_USB_DEVICE_Init+0x44>)
 8006158:	f7fe feaa 	bl	8004eb0 <USBD_RegisterClass>
 800615c:	4603      	mov	r3, r0
 800615e:	2b00      	cmp	r3, #0
 8006160:	d001      	beq.n	8006166 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006162:	f7fa f8c9 	bl	80002f8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006166:	4806      	ldr	r0, [pc, #24]	; (8006180 <MX_USB_DEVICE_Init+0x44>)
 8006168:	f7fe fec9 	bl	8004efe <USBD_Start>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d001      	beq.n	8006176 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8006172:	f7fa f8c1 	bl	80002f8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006176:	bf00      	nop
 8006178:	bd80      	pop	{r7, pc}
 800617a:	bf00      	nop
 800617c:	20000114 	.word	0x20000114
 8006180:	2000019c 	.word	0x2000019c
 8006184:	2000000c 	.word	0x2000000c

08006188 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
 800618e:	4603      	mov	r3, r0
 8006190:	6039      	str	r1, [r7, #0]
 8006192:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	2212      	movs	r2, #18
 8006198:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800619a:	4b03      	ldr	r3, [pc, #12]	; (80061a8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800619c:	4618      	mov	r0, r3
 800619e:	370c      	adds	r7, #12
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr
 80061a8:	20000134 	.word	0x20000134

080061ac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	4603      	mov	r3, r0
 80061b4:	6039      	str	r1, [r7, #0]
 80061b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	2204      	movs	r2, #4
 80061bc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80061be:	4b03      	ldr	r3, [pc, #12]	; (80061cc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	370c      	adds	r7, #12
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr
 80061cc:	20000154 	.word	0x20000154

080061d0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	4603      	mov	r3, r0
 80061d8:	6039      	str	r1, [r7, #0]
 80061da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80061dc:	79fb      	ldrb	r3, [r7, #7]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d105      	bne.n	80061ee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80061e2:	683a      	ldr	r2, [r7, #0]
 80061e4:	4907      	ldr	r1, [pc, #28]	; (8006204 <USBD_FS_ProductStrDescriptor+0x34>)
 80061e6:	4808      	ldr	r0, [pc, #32]	; (8006208 <USBD_FS_ProductStrDescriptor+0x38>)
 80061e8:	f7ff fee5 	bl	8005fb6 <USBD_GetString>
 80061ec:	e004      	b.n	80061f8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80061ee:	683a      	ldr	r2, [r7, #0]
 80061f0:	4904      	ldr	r1, [pc, #16]	; (8006204 <USBD_FS_ProductStrDescriptor+0x34>)
 80061f2:	4805      	ldr	r0, [pc, #20]	; (8006208 <USBD_FS_ProductStrDescriptor+0x38>)
 80061f4:	f7ff fedf 	bl	8005fb6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80061f8:	4b02      	ldr	r3, [pc, #8]	; (8006204 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3708      	adds	r7, #8
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	2000046c 	.word	0x2000046c
 8006208:	08006c80 	.word	0x08006c80

0800620c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b082      	sub	sp, #8
 8006210:	af00      	add	r7, sp, #0
 8006212:	4603      	mov	r3, r0
 8006214:	6039      	str	r1, [r7, #0]
 8006216:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006218:	683a      	ldr	r2, [r7, #0]
 800621a:	4904      	ldr	r1, [pc, #16]	; (800622c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800621c:	4804      	ldr	r0, [pc, #16]	; (8006230 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800621e:	f7ff feca 	bl	8005fb6 <USBD_GetString>
  return USBD_StrDesc;
 8006222:	4b02      	ldr	r3, [pc, #8]	; (800622c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006224:	4618      	mov	r0, r3
 8006226:	3708      	adds	r7, #8
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}
 800622c:	2000046c 	.word	0x2000046c
 8006230:	08006c98 	.word	0x08006c98

08006234 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b082      	sub	sp, #8
 8006238:	af00      	add	r7, sp, #0
 800623a:	4603      	mov	r3, r0
 800623c:	6039      	str	r1, [r7, #0]
 800623e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	221a      	movs	r2, #26
 8006244:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006246:	f000 f855 	bl	80062f4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800624a:	4b02      	ldr	r3, [pc, #8]	; (8006254 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800624c:	4618      	mov	r0, r3
 800624e:	3708      	adds	r7, #8
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}
 8006254:	20000158 	.word	0x20000158

08006258 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
 800625e:	4603      	mov	r3, r0
 8006260:	6039      	str	r1, [r7, #0]
 8006262:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006264:	79fb      	ldrb	r3, [r7, #7]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d105      	bne.n	8006276 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800626a:	683a      	ldr	r2, [r7, #0]
 800626c:	4907      	ldr	r1, [pc, #28]	; (800628c <USBD_FS_ConfigStrDescriptor+0x34>)
 800626e:	4808      	ldr	r0, [pc, #32]	; (8006290 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006270:	f7ff fea1 	bl	8005fb6 <USBD_GetString>
 8006274:	e004      	b.n	8006280 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006276:	683a      	ldr	r2, [r7, #0]
 8006278:	4904      	ldr	r1, [pc, #16]	; (800628c <USBD_FS_ConfigStrDescriptor+0x34>)
 800627a:	4805      	ldr	r0, [pc, #20]	; (8006290 <USBD_FS_ConfigStrDescriptor+0x38>)
 800627c:	f7ff fe9b 	bl	8005fb6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006280:	4b02      	ldr	r3, [pc, #8]	; (800628c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006282:	4618      	mov	r0, r3
 8006284:	3708      	adds	r7, #8
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
 800628a:	bf00      	nop
 800628c:	2000046c 	.word	0x2000046c
 8006290:	08006cac 	.word	0x08006cac

08006294 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b082      	sub	sp, #8
 8006298:	af00      	add	r7, sp, #0
 800629a:	4603      	mov	r3, r0
 800629c:	6039      	str	r1, [r7, #0]
 800629e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80062a0:	79fb      	ldrb	r3, [r7, #7]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d105      	bne.n	80062b2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80062a6:	683a      	ldr	r2, [r7, #0]
 80062a8:	4907      	ldr	r1, [pc, #28]	; (80062c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80062aa:	4808      	ldr	r0, [pc, #32]	; (80062cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80062ac:	f7ff fe83 	bl	8005fb6 <USBD_GetString>
 80062b0:	e004      	b.n	80062bc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80062b2:	683a      	ldr	r2, [r7, #0]
 80062b4:	4904      	ldr	r1, [pc, #16]	; (80062c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80062b6:	4805      	ldr	r0, [pc, #20]	; (80062cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80062b8:	f7ff fe7d 	bl	8005fb6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80062bc:	4b02      	ldr	r3, [pc, #8]	; (80062c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3708      	adds	r7, #8
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	2000046c 	.word	0x2000046c
 80062cc:	08006cb8 	.word	0x08006cb8

080062d0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	4603      	mov	r3, r0
 80062d8:	6039      	str	r1, [r7, #0]
 80062da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	220c      	movs	r2, #12
 80062e0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80062e2:	4b03      	ldr	r3, [pc, #12]	; (80062f0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr
 80062f0:	20000148 	.word	0x20000148

080062f4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80062fa:	4b0f      	ldr	r3, [pc, #60]	; (8006338 <Get_SerialNum+0x44>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006300:	4b0e      	ldr	r3, [pc, #56]	; (800633c <Get_SerialNum+0x48>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006306:	4b0e      	ldr	r3, [pc, #56]	; (8006340 <Get_SerialNum+0x4c>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800630c:	68fa      	ldr	r2, [r7, #12]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4413      	add	r3, r2
 8006312:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d009      	beq.n	800632e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800631a:	2208      	movs	r2, #8
 800631c:	4909      	ldr	r1, [pc, #36]	; (8006344 <Get_SerialNum+0x50>)
 800631e:	68f8      	ldr	r0, [r7, #12]
 8006320:	f000 f814 	bl	800634c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006324:	2204      	movs	r2, #4
 8006326:	4908      	ldr	r1, [pc, #32]	; (8006348 <Get_SerialNum+0x54>)
 8006328:	68b8      	ldr	r0, [r7, #8]
 800632a:	f000 f80f 	bl	800634c <IntToUnicode>
  }
}
 800632e:	bf00      	nop
 8006330:	3710      	adds	r7, #16
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	1fff7590 	.word	0x1fff7590
 800633c:	1fff7594 	.word	0x1fff7594
 8006340:	1fff7598 	.word	0x1fff7598
 8006344:	2000015a 	.word	0x2000015a
 8006348:	2000016a 	.word	0x2000016a

0800634c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800634c:	b480      	push	{r7}
 800634e:	b087      	sub	sp, #28
 8006350:	af00      	add	r7, sp, #0
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	60b9      	str	r1, [r7, #8]
 8006356:	4613      	mov	r3, r2
 8006358:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800635a:	2300      	movs	r3, #0
 800635c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800635e:	2300      	movs	r3, #0
 8006360:	75fb      	strb	r3, [r7, #23]
 8006362:	e027      	b.n	80063b4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	0f1b      	lsrs	r3, r3, #28
 8006368:	2b09      	cmp	r3, #9
 800636a:	d80b      	bhi.n	8006384 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	0f1b      	lsrs	r3, r3, #28
 8006370:	b2da      	uxtb	r2, r3
 8006372:	7dfb      	ldrb	r3, [r7, #23]
 8006374:	005b      	lsls	r3, r3, #1
 8006376:	4619      	mov	r1, r3
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	440b      	add	r3, r1
 800637c:	3230      	adds	r2, #48	; 0x30
 800637e:	b2d2      	uxtb	r2, r2
 8006380:	701a      	strb	r2, [r3, #0]
 8006382:	e00a      	b.n	800639a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	0f1b      	lsrs	r3, r3, #28
 8006388:	b2da      	uxtb	r2, r3
 800638a:	7dfb      	ldrb	r3, [r7, #23]
 800638c:	005b      	lsls	r3, r3, #1
 800638e:	4619      	mov	r1, r3
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	440b      	add	r3, r1
 8006394:	3237      	adds	r2, #55	; 0x37
 8006396:	b2d2      	uxtb	r2, r2
 8006398:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	011b      	lsls	r3, r3, #4
 800639e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80063a0:	7dfb      	ldrb	r3, [r7, #23]
 80063a2:	005b      	lsls	r3, r3, #1
 80063a4:	3301      	adds	r3, #1
 80063a6:	68ba      	ldr	r2, [r7, #8]
 80063a8:	4413      	add	r3, r2
 80063aa:	2200      	movs	r2, #0
 80063ac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80063ae:	7dfb      	ldrb	r3, [r7, #23]
 80063b0:	3301      	adds	r3, #1
 80063b2:	75fb      	strb	r3, [r7, #23]
 80063b4:	7dfa      	ldrb	r2, [r7, #23]
 80063b6:	79fb      	ldrb	r3, [r7, #7]
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d3d3      	bcc.n	8006364 <IntToUnicode+0x18>
  }
}
 80063bc:	bf00      	nop
 80063be:	bf00      	nop
 80063c0:	371c      	adds	r7, #28
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr
	...

080063cc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b0ac      	sub	sp, #176	; 0xb0
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063d4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80063d8:	2200      	movs	r2, #0
 80063da:	601a      	str	r2, [r3, #0]
 80063dc:	605a      	str	r2, [r3, #4]
 80063de:	609a      	str	r2, [r3, #8]
 80063e0:	60da      	str	r2, [r3, #12]
 80063e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80063e4:	f107 0314 	add.w	r3, r7, #20
 80063e8:	2288      	movs	r2, #136	; 0x88
 80063ea:	2100      	movs	r1, #0
 80063ec:	4618      	mov	r0, r3
 80063ee:	f000 fc33 	bl	8006c58 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80063fa:	d164      	bne.n	80064c6 <HAL_PCD_MspInit+0xfa>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80063fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006400:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8006402:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006406:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800640a:	f107 0314 	add.w	r3, r7, #20
 800640e:	4618      	mov	r0, r3
 8006410:	f7fc fb50 	bl	8002ab4 <HAL_RCCEx_PeriphCLKConfig>
 8006414:	4603      	mov	r3, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d001      	beq.n	800641e <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 800641a:	f7f9 ff6d 	bl	80002f8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800641e:	4b2c      	ldr	r3, [pc, #176]	; (80064d0 <HAL_PCD_MspInit+0x104>)
 8006420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006422:	4a2b      	ldr	r2, [pc, #172]	; (80064d0 <HAL_PCD_MspInit+0x104>)
 8006424:	f043 0301 	orr.w	r3, r3, #1
 8006428:	64d3      	str	r3, [r2, #76]	; 0x4c
 800642a:	4b29      	ldr	r3, [pc, #164]	; (80064d0 <HAL_PCD_MspInit+0x104>)
 800642c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800642e:	f003 0301 	and.w	r3, r3, #1
 8006432:	613b      	str	r3, [r7, #16]
 8006434:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006436:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800643a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800643e:	2302      	movs	r3, #2
 8006440:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006444:	2300      	movs	r3, #0
 8006446:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800644a:	2303      	movs	r3, #3
 800644c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006450:	230a      	movs	r3, #10
 8006452:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006456:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800645a:	4619      	mov	r1, r3
 800645c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006460:	f7fa f98e 	bl	8000780 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006464:	4b1a      	ldr	r3, [pc, #104]	; (80064d0 <HAL_PCD_MspInit+0x104>)
 8006466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006468:	4a19      	ldr	r2, [pc, #100]	; (80064d0 <HAL_PCD_MspInit+0x104>)
 800646a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800646e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006470:	4b17      	ldr	r3, [pc, #92]	; (80064d0 <HAL_PCD_MspInit+0x104>)
 8006472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006474:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006478:	60fb      	str	r3, [r7, #12]
 800647a:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800647c:	4b14      	ldr	r3, [pc, #80]	; (80064d0 <HAL_PCD_MspInit+0x104>)
 800647e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006480:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006484:	2b00      	cmp	r3, #0
 8006486:	d114      	bne.n	80064b2 <HAL_PCD_MspInit+0xe6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006488:	4b11      	ldr	r3, [pc, #68]	; (80064d0 <HAL_PCD_MspInit+0x104>)
 800648a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800648c:	4a10      	ldr	r2, [pc, #64]	; (80064d0 <HAL_PCD_MspInit+0x104>)
 800648e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006492:	6593      	str	r3, [r2, #88]	; 0x58
 8006494:	4b0e      	ldr	r3, [pc, #56]	; (80064d0 <HAL_PCD_MspInit+0x104>)
 8006496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006498:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800649c:	60bb      	str	r3, [r7, #8]
 800649e:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80064a0:	f7fb fd24 	bl	8001eec <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80064a4:	4b0a      	ldr	r3, [pc, #40]	; (80064d0 <HAL_PCD_MspInit+0x104>)
 80064a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064a8:	4a09      	ldr	r2, [pc, #36]	; (80064d0 <HAL_PCD_MspInit+0x104>)
 80064aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064ae:	6593      	str	r3, [r2, #88]	; 0x58
 80064b0:	e001      	b.n	80064b6 <HAL_PCD_MspInit+0xea>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 80064b2:	f7fb fd1b 	bl	8001eec <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80064b6:	2200      	movs	r2, #0
 80064b8:	2100      	movs	r1, #0
 80064ba:	2043      	movs	r0, #67	; 0x43
 80064bc:	f7fa f929 	bl	8000712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80064c0:	2043      	movs	r0, #67	; 0x43
 80064c2:	f7fa f942 	bl	800074a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80064c6:	bf00      	nop
 80064c8:	37b0      	adds	r7, #176	; 0xb0
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
 80064ce:	bf00      	nop
 80064d0:	40021000 	.word	0x40021000

080064d4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b082      	sub	sp, #8
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80064e8:	4619      	mov	r1, r3
 80064ea:	4610      	mov	r0, r2
 80064ec:	f7fe fd52 	bl	8004f94 <USBD_LL_SetupStage>
}
 80064f0:	bf00      	nop
 80064f2:	3708      	adds	r7, #8
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	460b      	mov	r3, r1
 8006502:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800650a:	78fa      	ldrb	r2, [r7, #3]
 800650c:	6879      	ldr	r1, [r7, #4]
 800650e:	4613      	mov	r3, r2
 8006510:	00db      	lsls	r3, r3, #3
 8006512:	4413      	add	r3, r2
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	440b      	add	r3, r1
 8006518:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	78fb      	ldrb	r3, [r7, #3]
 8006520:	4619      	mov	r1, r3
 8006522:	f7fe fd8c 	bl	800503e <USBD_LL_DataOutStage>
}
 8006526:	bf00      	nop
 8006528:	3708      	adds	r7, #8
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}

0800652e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800652e:	b580      	push	{r7, lr}
 8006530:	b082      	sub	sp, #8
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
 8006536:	460b      	mov	r3, r1
 8006538:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006540:	78fa      	ldrb	r2, [r7, #3]
 8006542:	6879      	ldr	r1, [r7, #4]
 8006544:	4613      	mov	r3, r2
 8006546:	00db      	lsls	r3, r3, #3
 8006548:	4413      	add	r3, r2
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	440b      	add	r3, r1
 800654e:	334c      	adds	r3, #76	; 0x4c
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	78fb      	ldrb	r3, [r7, #3]
 8006554:	4619      	mov	r1, r3
 8006556:	f7fe fdd5 	bl	8005104 <USBD_LL_DataInStage>
}
 800655a:	bf00      	nop
 800655c:	3708      	adds	r7, #8
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}

08006562 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006562:	b580      	push	{r7, lr}
 8006564:	b082      	sub	sp, #8
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006570:	4618      	mov	r0, r3
 8006572:	f7fe fee9 	bl	8005348 <USBD_LL_SOF>
}
 8006576:	bf00      	nop
 8006578:	3708      	adds	r7, #8
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}

0800657e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800657e:	b580      	push	{r7, lr}
 8006580:	b084      	sub	sp, #16
 8006582:	af00      	add	r7, sp, #0
 8006584:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006586:	2301      	movs	r3, #1
 8006588:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	2b02      	cmp	r3, #2
 8006590:	d001      	beq.n	8006596 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006592:	f7f9 feb1 	bl	80002f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800659c:	7bfa      	ldrb	r2, [r7, #15]
 800659e:	4611      	mov	r1, r2
 80065a0:	4618      	mov	r0, r3
 80065a2:	f7fe fe93 	bl	80052cc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80065ac:	4618      	mov	r0, r3
 80065ae:	f7fe fe3f 	bl	8005230 <USBD_LL_Reset>
}
 80065b2:	bf00      	nop
 80065b4:	3710      	adds	r7, #16
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
	...

080065bc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b082      	sub	sp, #8
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	6812      	ldr	r2, [r2, #0]
 80065d2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80065d6:	f043 0301 	orr.w	r3, r3, #1
 80065da:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80065e2:	4618      	mov	r0, r3
 80065e4:	f7fe fe82 	bl	80052ec <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6a1b      	ldr	r3, [r3, #32]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d005      	beq.n	80065fc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80065f0:	4b04      	ldr	r3, [pc, #16]	; (8006604 <HAL_PCD_SuspendCallback+0x48>)
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	4a03      	ldr	r2, [pc, #12]	; (8006604 <HAL_PCD_SuspendCallback+0x48>)
 80065f6:	f043 0306 	orr.w	r3, r3, #6
 80065fa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80065fc:	bf00      	nop
 80065fe:	3708      	adds	r7, #8
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}
 8006604:	e000ed00 	.word	0xe000ed00

08006608 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	6812      	ldr	r2, [r2, #0]
 800661e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006622:	f023 0301 	bic.w	r3, r3, #1
 8006626:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6a1b      	ldr	r3, [r3, #32]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d007      	beq.n	8006640 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006630:	4b08      	ldr	r3, [pc, #32]	; (8006654 <HAL_PCD_ResumeCallback+0x4c>)
 8006632:	691b      	ldr	r3, [r3, #16]
 8006634:	4a07      	ldr	r2, [pc, #28]	; (8006654 <HAL_PCD_ResumeCallback+0x4c>)
 8006636:	f023 0306 	bic.w	r3, r3, #6
 800663a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800663c:	f000 fae2 	bl	8006c04 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006646:	4618      	mov	r0, r3
 8006648:	f7fe fe66 	bl	8005318 <USBD_LL_Resume>
}
 800664c:	bf00      	nop
 800664e:	3708      	adds	r7, #8
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}
 8006654:	e000ed00 	.word	0xe000ed00

08006658 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b082      	sub	sp, #8
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	460b      	mov	r3, r1
 8006662:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800666a:	78fa      	ldrb	r2, [r7, #3]
 800666c:	4611      	mov	r1, r2
 800666e:	4618      	mov	r0, r3
 8006670:	f7fe feb2 	bl	80053d8 <USBD_LL_IsoOUTIncomplete>
}
 8006674:	bf00      	nop
 8006676:	3708      	adds	r7, #8
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b082      	sub	sp, #8
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	460b      	mov	r3, r1
 8006686:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800668e:	78fa      	ldrb	r2, [r7, #3]
 8006690:	4611      	mov	r1, r2
 8006692:	4618      	mov	r0, r3
 8006694:	f7fe fe7a 	bl	800538c <USBD_LL_IsoINIncomplete>
}
 8006698:	bf00      	nop
 800669a:	3708      	adds	r7, #8
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b082      	sub	sp, #8
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80066ae:	4618      	mov	r0, r3
 80066b0:	f7fe feb8 	bl	8005424 <USBD_LL_DevConnected>
}
 80066b4:	bf00      	nop
 80066b6:	3708      	adds	r7, #8
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b082      	sub	sp, #8
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80066ca:	4618      	mov	r0, r3
 80066cc:	f7fe feb5 	bl	800543a <USBD_LL_DevDisconnected>
}
 80066d0:	bf00      	nop
 80066d2:	3708      	adds	r7, #8
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	781b      	ldrb	r3, [r3, #0]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d13c      	bne.n	8006762 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80066e8:	4a20      	ldr	r2, [pc, #128]	; (800676c <USBD_LL_Init+0x94>)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	4a1e      	ldr	r2, [pc, #120]	; (800676c <USBD_LL_Init+0x94>)
 80066f4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80066f8:	4b1c      	ldr	r3, [pc, #112]	; (800676c <USBD_LL_Init+0x94>)
 80066fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80066fe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8006700:	4b1a      	ldr	r3, [pc, #104]	; (800676c <USBD_LL_Init+0x94>)
 8006702:	2206      	movs	r2, #6
 8006704:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006706:	4b19      	ldr	r3, [pc, #100]	; (800676c <USBD_LL_Init+0x94>)
 8006708:	2202      	movs	r2, #2
 800670a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800670c:	4b17      	ldr	r3, [pc, #92]	; (800676c <USBD_LL_Init+0x94>)
 800670e:	2202      	movs	r2, #2
 8006710:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006712:	4b16      	ldr	r3, [pc, #88]	; (800676c <USBD_LL_Init+0x94>)
 8006714:	2200      	movs	r2, #0
 8006716:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006718:	4b14      	ldr	r3, [pc, #80]	; (800676c <USBD_LL_Init+0x94>)
 800671a:	2200      	movs	r2, #0
 800671c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800671e:	4b13      	ldr	r3, [pc, #76]	; (800676c <USBD_LL_Init+0x94>)
 8006720:	2200      	movs	r2, #0
 8006722:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8006724:	4b11      	ldr	r3, [pc, #68]	; (800676c <USBD_LL_Init+0x94>)
 8006726:	2200      	movs	r2, #0
 8006728:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800672a:	4b10      	ldr	r3, [pc, #64]	; (800676c <USBD_LL_Init+0x94>)
 800672c:	2200      	movs	r2, #0
 800672e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006730:	4b0e      	ldr	r3, [pc, #56]	; (800676c <USBD_LL_Init+0x94>)
 8006732:	2200      	movs	r2, #0
 8006734:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006736:	480d      	ldr	r0, [pc, #52]	; (800676c <USBD_LL_Init+0x94>)
 8006738:	f7fa f9cc 	bl	8000ad4 <HAL_PCD_Init>
 800673c:	4603      	mov	r3, r0
 800673e:	2b00      	cmp	r3, #0
 8006740:	d001      	beq.n	8006746 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006742:	f7f9 fdd9 	bl	80002f8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006746:	2180      	movs	r1, #128	; 0x80
 8006748:	4808      	ldr	r0, [pc, #32]	; (800676c <USBD_LL_Init+0x94>)
 800674a:	f7fb fb36 	bl	8001dba <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800674e:	2240      	movs	r2, #64	; 0x40
 8006750:	2100      	movs	r1, #0
 8006752:	4806      	ldr	r0, [pc, #24]	; (800676c <USBD_LL_Init+0x94>)
 8006754:	f7fb faea 	bl	8001d2c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006758:	2280      	movs	r2, #128	; 0x80
 800675a:	2101      	movs	r1, #1
 800675c:	4803      	ldr	r0, [pc, #12]	; (800676c <USBD_LL_Init+0x94>)
 800675e:	f7fb fae5 	bl	8001d2c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006762:	2300      	movs	r3, #0
}
 8006764:	4618      	mov	r0, r3
 8006766:	3708      	adds	r7, #8
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}
 800676c:	2000066c 	.word	0x2000066c

08006770 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006778:	2300      	movs	r3, #0
 800677a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800677c:	2300      	movs	r3, #0
 800677e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006786:	4618      	mov	r0, r3
 8006788:	f7fa fac8 	bl	8000d1c <HAL_PCD_Start>
 800678c:	4603      	mov	r3, r0
 800678e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006790:	7bbb      	ldrb	r3, [r7, #14]
 8006792:	2b03      	cmp	r3, #3
 8006794:	d816      	bhi.n	80067c4 <USBD_LL_Start+0x54>
 8006796:	a201      	add	r2, pc, #4	; (adr r2, 800679c <USBD_LL_Start+0x2c>)
 8006798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800679c:	080067ad 	.word	0x080067ad
 80067a0:	080067b3 	.word	0x080067b3
 80067a4:	080067b9 	.word	0x080067b9
 80067a8:	080067bf 	.word	0x080067bf
    case HAL_OK :
      usb_status = USBD_OK;
 80067ac:	2300      	movs	r3, #0
 80067ae:	73fb      	strb	r3, [r7, #15]
    break;
 80067b0:	e00b      	b.n	80067ca <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80067b2:	2303      	movs	r3, #3
 80067b4:	73fb      	strb	r3, [r7, #15]
    break;
 80067b6:	e008      	b.n	80067ca <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80067b8:	2301      	movs	r3, #1
 80067ba:	73fb      	strb	r3, [r7, #15]
    break;
 80067bc:	e005      	b.n	80067ca <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80067be:	2303      	movs	r3, #3
 80067c0:	73fb      	strb	r3, [r7, #15]
    break;
 80067c2:	e002      	b.n	80067ca <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 80067c4:	2303      	movs	r3, #3
 80067c6:	73fb      	strb	r3, [r7, #15]
    break;
 80067c8:	bf00      	nop
  }
  return usb_status;
 80067ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3710      	adds	r7, #16
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	4608      	mov	r0, r1
 80067de:	4611      	mov	r1, r2
 80067e0:	461a      	mov	r2, r3
 80067e2:	4603      	mov	r3, r0
 80067e4:	70fb      	strb	r3, [r7, #3]
 80067e6:	460b      	mov	r3, r1
 80067e8:	70bb      	strb	r3, [r7, #2]
 80067ea:	4613      	mov	r3, r2
 80067ec:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80067ee:	2300      	movs	r3, #0
 80067f0:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80067f2:	2300      	movs	r3, #0
 80067f4:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80067fc:	78bb      	ldrb	r3, [r7, #2]
 80067fe:	883a      	ldrh	r2, [r7, #0]
 8006800:	78f9      	ldrb	r1, [r7, #3]
 8006802:	f7fa ff72 	bl	80016ea <HAL_PCD_EP_Open>
 8006806:	4603      	mov	r3, r0
 8006808:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800680a:	7bbb      	ldrb	r3, [r7, #14]
 800680c:	2b03      	cmp	r3, #3
 800680e:	d817      	bhi.n	8006840 <USBD_LL_OpenEP+0x6c>
 8006810:	a201      	add	r2, pc, #4	; (adr r2, 8006818 <USBD_LL_OpenEP+0x44>)
 8006812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006816:	bf00      	nop
 8006818:	08006829 	.word	0x08006829
 800681c:	0800682f 	.word	0x0800682f
 8006820:	08006835 	.word	0x08006835
 8006824:	0800683b 	.word	0x0800683b
    case HAL_OK :
      usb_status = USBD_OK;
 8006828:	2300      	movs	r3, #0
 800682a:	73fb      	strb	r3, [r7, #15]
    break;
 800682c:	e00b      	b.n	8006846 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800682e:	2303      	movs	r3, #3
 8006830:	73fb      	strb	r3, [r7, #15]
    break;
 8006832:	e008      	b.n	8006846 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006834:	2301      	movs	r3, #1
 8006836:	73fb      	strb	r3, [r7, #15]
    break;
 8006838:	e005      	b.n	8006846 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800683a:	2303      	movs	r3, #3
 800683c:	73fb      	strb	r3, [r7, #15]
    break;
 800683e:	e002      	b.n	8006846 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8006840:	2303      	movs	r3, #3
 8006842:	73fb      	strb	r3, [r7, #15]
    break;
 8006844:	bf00      	nop
  }
  return usb_status;
 8006846:	7bfb      	ldrb	r3, [r7, #15]
}
 8006848:	4618      	mov	r0, r3
 800684a:	3710      	adds	r7, #16
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}

08006850 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	460b      	mov	r3, r1
 800685a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800685c:	2300      	movs	r3, #0
 800685e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006860:	2300      	movs	r3, #0
 8006862:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800686a:	78fa      	ldrb	r2, [r7, #3]
 800686c:	4611      	mov	r1, r2
 800686e:	4618      	mov	r0, r3
 8006870:	f7fa ffa3 	bl	80017ba <HAL_PCD_EP_Close>
 8006874:	4603      	mov	r3, r0
 8006876:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006878:	7bbb      	ldrb	r3, [r7, #14]
 800687a:	2b03      	cmp	r3, #3
 800687c:	d816      	bhi.n	80068ac <USBD_LL_CloseEP+0x5c>
 800687e:	a201      	add	r2, pc, #4	; (adr r2, 8006884 <USBD_LL_CloseEP+0x34>)
 8006880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006884:	08006895 	.word	0x08006895
 8006888:	0800689b 	.word	0x0800689b
 800688c:	080068a1 	.word	0x080068a1
 8006890:	080068a7 	.word	0x080068a7
    case HAL_OK :
      usb_status = USBD_OK;
 8006894:	2300      	movs	r3, #0
 8006896:	73fb      	strb	r3, [r7, #15]
    break;
 8006898:	e00b      	b.n	80068b2 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800689a:	2303      	movs	r3, #3
 800689c:	73fb      	strb	r3, [r7, #15]
    break;
 800689e:	e008      	b.n	80068b2 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80068a0:	2301      	movs	r3, #1
 80068a2:	73fb      	strb	r3, [r7, #15]
    break;
 80068a4:	e005      	b.n	80068b2 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80068a6:	2303      	movs	r3, #3
 80068a8:	73fb      	strb	r3, [r7, #15]
    break;
 80068aa:	e002      	b.n	80068b2 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80068ac:	2303      	movs	r3, #3
 80068ae:	73fb      	strb	r3, [r7, #15]
    break;
 80068b0:	bf00      	nop
  }
  return usb_status;
 80068b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3710      	adds	r7, #16
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b084      	sub	sp, #16
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	460b      	mov	r3, r1
 80068c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80068c8:	2300      	movs	r3, #0
 80068ca:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80068cc:	2300      	movs	r3, #0
 80068ce:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80068d6:	78fa      	ldrb	r2, [r7, #3]
 80068d8:	4611      	mov	r1, r2
 80068da:	4618      	mov	r0, r3
 80068dc:	f7fb f832 	bl	8001944 <HAL_PCD_EP_SetStall>
 80068e0:	4603      	mov	r3, r0
 80068e2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80068e4:	7bbb      	ldrb	r3, [r7, #14]
 80068e6:	2b03      	cmp	r3, #3
 80068e8:	d816      	bhi.n	8006918 <USBD_LL_StallEP+0x5c>
 80068ea:	a201      	add	r2, pc, #4	; (adr r2, 80068f0 <USBD_LL_StallEP+0x34>)
 80068ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f0:	08006901 	.word	0x08006901
 80068f4:	08006907 	.word	0x08006907
 80068f8:	0800690d 	.word	0x0800690d
 80068fc:	08006913 	.word	0x08006913
    case HAL_OK :
      usb_status = USBD_OK;
 8006900:	2300      	movs	r3, #0
 8006902:	73fb      	strb	r3, [r7, #15]
    break;
 8006904:	e00b      	b.n	800691e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006906:	2303      	movs	r3, #3
 8006908:	73fb      	strb	r3, [r7, #15]
    break;
 800690a:	e008      	b.n	800691e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800690c:	2301      	movs	r3, #1
 800690e:	73fb      	strb	r3, [r7, #15]
    break;
 8006910:	e005      	b.n	800691e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006912:	2303      	movs	r3, #3
 8006914:	73fb      	strb	r3, [r7, #15]
    break;
 8006916:	e002      	b.n	800691e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8006918:	2303      	movs	r3, #3
 800691a:	73fb      	strb	r3, [r7, #15]
    break;
 800691c:	bf00      	nop
  }
  return usb_status;
 800691e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006920:	4618      	mov	r0, r3
 8006922:	3710      	adds	r7, #16
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b084      	sub	sp, #16
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	460b      	mov	r3, r1
 8006932:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006934:	2300      	movs	r3, #0
 8006936:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006938:	2300      	movs	r3, #0
 800693a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006942:	78fa      	ldrb	r2, [r7, #3]
 8006944:	4611      	mov	r1, r2
 8006946:	4618      	mov	r0, r3
 8006948:	f7fb f85e 	bl	8001a08 <HAL_PCD_EP_ClrStall>
 800694c:	4603      	mov	r3, r0
 800694e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006950:	7bbb      	ldrb	r3, [r7, #14]
 8006952:	2b03      	cmp	r3, #3
 8006954:	d816      	bhi.n	8006984 <USBD_LL_ClearStallEP+0x5c>
 8006956:	a201      	add	r2, pc, #4	; (adr r2, 800695c <USBD_LL_ClearStallEP+0x34>)
 8006958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800695c:	0800696d 	.word	0x0800696d
 8006960:	08006973 	.word	0x08006973
 8006964:	08006979 	.word	0x08006979
 8006968:	0800697f 	.word	0x0800697f
    case HAL_OK :
      usb_status = USBD_OK;
 800696c:	2300      	movs	r3, #0
 800696e:	73fb      	strb	r3, [r7, #15]
    break;
 8006970:	e00b      	b.n	800698a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006972:	2303      	movs	r3, #3
 8006974:	73fb      	strb	r3, [r7, #15]
    break;
 8006976:	e008      	b.n	800698a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006978:	2301      	movs	r3, #1
 800697a:	73fb      	strb	r3, [r7, #15]
    break;
 800697c:	e005      	b.n	800698a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800697e:	2303      	movs	r3, #3
 8006980:	73fb      	strb	r3, [r7, #15]
    break;
 8006982:	e002      	b.n	800698a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8006984:	2303      	movs	r3, #3
 8006986:	73fb      	strb	r3, [r7, #15]
    break;
 8006988:	bf00      	nop
  }
  return usb_status;
 800698a:	7bfb      	ldrb	r3, [r7, #15]
}
 800698c:	4618      	mov	r0, r3
 800698e:	3710      	adds	r7, #16
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006994:	b480      	push	{r7}
 8006996:	b085      	sub	sp, #20
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	460b      	mov	r3, r1
 800699e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80069a6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80069a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	da0b      	bge.n	80069c8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80069b0:	78fb      	ldrb	r3, [r7, #3]
 80069b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80069b6:	68f9      	ldr	r1, [r7, #12]
 80069b8:	4613      	mov	r3, r2
 80069ba:	00db      	lsls	r3, r3, #3
 80069bc:	4413      	add	r3, r2
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	440b      	add	r3, r1
 80069c2:	333e      	adds	r3, #62	; 0x3e
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	e00b      	b.n	80069e0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80069c8:	78fb      	ldrb	r3, [r7, #3]
 80069ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80069ce:	68f9      	ldr	r1, [r7, #12]
 80069d0:	4613      	mov	r3, r2
 80069d2:	00db      	lsls	r3, r3, #3
 80069d4:	4413      	add	r3, r2
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	440b      	add	r3, r1
 80069da:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80069de:	781b      	ldrb	r3, [r3, #0]
  }
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3714      	adds	r7, #20
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b084      	sub	sp, #16
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	460b      	mov	r3, r1
 80069f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80069f8:	2300      	movs	r3, #0
 80069fa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80069fc:	2300      	movs	r3, #0
 80069fe:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006a06:	78fa      	ldrb	r2, [r7, #3]
 8006a08:	4611      	mov	r1, r2
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f7fa fe48 	bl	80016a0 <HAL_PCD_SetAddress>
 8006a10:	4603      	mov	r3, r0
 8006a12:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006a14:	7bbb      	ldrb	r3, [r7, #14]
 8006a16:	2b03      	cmp	r3, #3
 8006a18:	d816      	bhi.n	8006a48 <USBD_LL_SetUSBAddress+0x5c>
 8006a1a:	a201      	add	r2, pc, #4	; (adr r2, 8006a20 <USBD_LL_SetUSBAddress+0x34>)
 8006a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a20:	08006a31 	.word	0x08006a31
 8006a24:	08006a37 	.word	0x08006a37
 8006a28:	08006a3d 	.word	0x08006a3d
 8006a2c:	08006a43 	.word	0x08006a43
    case HAL_OK :
      usb_status = USBD_OK;
 8006a30:	2300      	movs	r3, #0
 8006a32:	73fb      	strb	r3, [r7, #15]
    break;
 8006a34:	e00b      	b.n	8006a4e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006a36:	2303      	movs	r3, #3
 8006a38:	73fb      	strb	r3, [r7, #15]
    break;
 8006a3a:	e008      	b.n	8006a4e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	73fb      	strb	r3, [r7, #15]
    break;
 8006a40:	e005      	b.n	8006a4e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006a42:	2303      	movs	r3, #3
 8006a44:	73fb      	strb	r3, [r7, #15]
    break;
 8006a46:	e002      	b.n	8006a4e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8006a48:	2303      	movs	r3, #3
 8006a4a:	73fb      	strb	r3, [r7, #15]
    break;
 8006a4c:	bf00      	nop
  }
  return usb_status;
 8006a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3710      	adds	r7, #16
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b086      	sub	sp, #24
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	607a      	str	r2, [r7, #4]
 8006a62:	603b      	str	r3, [r7, #0]
 8006a64:	460b      	mov	r3, r1
 8006a66:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006a76:	7af9      	ldrb	r1, [r7, #11]
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	f7fa ff25 	bl	80018ca <HAL_PCD_EP_Transmit>
 8006a80:	4603      	mov	r3, r0
 8006a82:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8006a84:	7dbb      	ldrb	r3, [r7, #22]
 8006a86:	2b03      	cmp	r3, #3
 8006a88:	d816      	bhi.n	8006ab8 <USBD_LL_Transmit+0x60>
 8006a8a:	a201      	add	r2, pc, #4	; (adr r2, 8006a90 <USBD_LL_Transmit+0x38>)
 8006a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a90:	08006aa1 	.word	0x08006aa1
 8006a94:	08006aa7 	.word	0x08006aa7
 8006a98:	08006aad 	.word	0x08006aad
 8006a9c:	08006ab3 	.word	0x08006ab3
    case HAL_OK :
      usb_status = USBD_OK;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	75fb      	strb	r3, [r7, #23]
    break;
 8006aa4:	e00b      	b.n	8006abe <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	75fb      	strb	r3, [r7, #23]
    break;
 8006aaa:	e008      	b.n	8006abe <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006aac:	2301      	movs	r3, #1
 8006aae:	75fb      	strb	r3, [r7, #23]
    break;
 8006ab0:	e005      	b.n	8006abe <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006ab2:	2303      	movs	r3, #3
 8006ab4:	75fb      	strb	r3, [r7, #23]
    break;
 8006ab6:	e002      	b.n	8006abe <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8006ab8:	2303      	movs	r3, #3
 8006aba:	75fb      	strb	r3, [r7, #23]
    break;
 8006abc:	bf00      	nop
  }
  return usb_status;
 8006abe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3718      	adds	r7, #24
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b086      	sub	sp, #24
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	607a      	str	r2, [r7, #4]
 8006ad2:	603b      	str	r3, [r7, #0]
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006adc:	2300      	movs	r3, #0
 8006ade:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006ae6:	7af9      	ldrb	r1, [r7, #11]
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	f7fa feaf 	bl	800184e <HAL_PCD_EP_Receive>
 8006af0:	4603      	mov	r3, r0
 8006af2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8006af4:	7dbb      	ldrb	r3, [r7, #22]
 8006af6:	2b03      	cmp	r3, #3
 8006af8:	d816      	bhi.n	8006b28 <USBD_LL_PrepareReceive+0x60>
 8006afa:	a201      	add	r2, pc, #4	; (adr r2, 8006b00 <USBD_LL_PrepareReceive+0x38>)
 8006afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b00:	08006b11 	.word	0x08006b11
 8006b04:	08006b17 	.word	0x08006b17
 8006b08:	08006b1d 	.word	0x08006b1d
 8006b0c:	08006b23 	.word	0x08006b23
    case HAL_OK :
      usb_status = USBD_OK;
 8006b10:	2300      	movs	r3, #0
 8006b12:	75fb      	strb	r3, [r7, #23]
    break;
 8006b14:	e00b      	b.n	8006b2e <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006b16:	2303      	movs	r3, #3
 8006b18:	75fb      	strb	r3, [r7, #23]
    break;
 8006b1a:	e008      	b.n	8006b2e <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	75fb      	strb	r3, [r7, #23]
    break;
 8006b20:	e005      	b.n	8006b2e <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006b22:	2303      	movs	r3, #3
 8006b24:	75fb      	strb	r3, [r7, #23]
    break;
 8006b26:	e002      	b.n	8006b2e <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8006b28:	2303      	movs	r3, #3
 8006b2a:	75fb      	strb	r3, [r7, #23]
    break;
 8006b2c:	bf00      	nop
  }
  return usb_status;
 8006b2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3718      	adds	r7, #24
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	460b      	mov	r3, r1
 8006b42:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8006b44:	78fb      	ldrb	r3, [r7, #3]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d002      	beq.n	8006b50 <HAL_PCDEx_LPM_Callback+0x18>
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d01f      	beq.n	8006b8e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8006b4e:	e03b      	b.n	8006bc8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6a1b      	ldr	r3, [r3, #32]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d007      	beq.n	8006b68 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8006b58:	f000 f854 	bl	8006c04 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006b5c:	4b1c      	ldr	r3, [pc, #112]	; (8006bd0 <HAL_PCDEx_LPM_Callback+0x98>)
 8006b5e:	691b      	ldr	r3, [r3, #16]
 8006b60:	4a1b      	ldr	r2, [pc, #108]	; (8006bd0 <HAL_PCDEx_LPM_Callback+0x98>)
 8006b62:	f023 0306 	bic.w	r3, r3, #6
 8006b66:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	6812      	ldr	r2, [r2, #0]
 8006b76:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006b7a:	f023 0301 	bic.w	r3, r3, #1
 8006b7e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006b86:	4618      	mov	r0, r3
 8006b88:	f7fe fbc6 	bl	8005318 <USBD_LL_Resume>
    break;
 8006b8c:	e01c      	b.n	8006bc8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	6812      	ldr	r2, [r2, #0]
 8006b9c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006ba0:	f043 0301 	orr.w	r3, r3, #1
 8006ba4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006bac:	4618      	mov	r0, r3
 8006bae:	f7fe fb9d 	bl	80052ec <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6a1b      	ldr	r3, [r3, #32]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d005      	beq.n	8006bc6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006bba:	4b05      	ldr	r3, [pc, #20]	; (8006bd0 <HAL_PCDEx_LPM_Callback+0x98>)
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	4a04      	ldr	r2, [pc, #16]	; (8006bd0 <HAL_PCDEx_LPM_Callback+0x98>)
 8006bc0:	f043 0306 	orr.w	r3, r3, #6
 8006bc4:	6113      	str	r3, [r2, #16]
    break;
 8006bc6:	bf00      	nop
}
 8006bc8:	bf00      	nop
 8006bca:	3708      	adds	r7, #8
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}
 8006bd0:	e000ed00 	.word	0xe000ed00

08006bd4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006bdc:	4b03      	ldr	r3, [pc, #12]	; (8006bec <USBD_static_malloc+0x18>)
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	370c      	adds	r7, #12
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr
 8006bea:	bf00      	nop
 8006bec:	20000b78 	.word	0x20000b78

08006bf0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]

}
 8006bf8:	bf00      	nop
 8006bfa:	370c      	adds	r7, #12
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8006c08:	f7f9 fb02 	bl	8000210 <SystemClock_Config>
}
 8006c0c:	bf00      	nop
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <__libc_init_array>:
 8006c10:	b570      	push	{r4, r5, r6, lr}
 8006c12:	4d0d      	ldr	r5, [pc, #52]	; (8006c48 <__libc_init_array+0x38>)
 8006c14:	4c0d      	ldr	r4, [pc, #52]	; (8006c4c <__libc_init_array+0x3c>)
 8006c16:	1b64      	subs	r4, r4, r5
 8006c18:	10a4      	asrs	r4, r4, #2
 8006c1a:	2600      	movs	r6, #0
 8006c1c:	42a6      	cmp	r6, r4
 8006c1e:	d109      	bne.n	8006c34 <__libc_init_array+0x24>
 8006c20:	4d0b      	ldr	r5, [pc, #44]	; (8006c50 <__libc_init_array+0x40>)
 8006c22:	4c0c      	ldr	r4, [pc, #48]	; (8006c54 <__libc_init_array+0x44>)
 8006c24:	f000 f820 	bl	8006c68 <_init>
 8006c28:	1b64      	subs	r4, r4, r5
 8006c2a:	10a4      	asrs	r4, r4, #2
 8006c2c:	2600      	movs	r6, #0
 8006c2e:	42a6      	cmp	r6, r4
 8006c30:	d105      	bne.n	8006c3e <__libc_init_array+0x2e>
 8006c32:	bd70      	pop	{r4, r5, r6, pc}
 8006c34:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c38:	4798      	blx	r3
 8006c3a:	3601      	adds	r6, #1
 8006c3c:	e7ee      	b.n	8006c1c <__libc_init_array+0xc>
 8006c3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c42:	4798      	blx	r3
 8006c44:	3601      	adds	r6, #1
 8006c46:	e7f2      	b.n	8006c2e <__libc_init_array+0x1e>
 8006c48:	08006d08 	.word	0x08006d08
 8006c4c:	08006d08 	.word	0x08006d08
 8006c50:	08006d08 	.word	0x08006d08
 8006c54:	08006d0c 	.word	0x08006d0c

08006c58 <memset>:
 8006c58:	4402      	add	r2, r0
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d100      	bne.n	8006c62 <memset+0xa>
 8006c60:	4770      	bx	lr
 8006c62:	f803 1b01 	strb.w	r1, [r3], #1
 8006c66:	e7f9      	b.n	8006c5c <memset+0x4>

08006c68 <_init>:
 8006c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c6a:	bf00      	nop
 8006c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c6e:	bc08      	pop	{r3}
 8006c70:	469e      	mov	lr, r3
 8006c72:	4770      	bx	lr

08006c74 <_fini>:
 8006c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c76:	bf00      	nop
 8006c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c7a:	bc08      	pop	{r3}
 8006c7c:	469e      	mov	lr, r3
 8006c7e:	4770      	bx	lr
