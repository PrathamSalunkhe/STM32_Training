
03_USB_HID_Keyboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007600  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08007790  08007790  00017790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007864  08007864  000201cc  2**0
                  CONTENTS
  4 .ARM          00000000  08007864  08007864  000201cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007864  08007864  000201cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007864  08007864  00017864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007868  08007868  00017868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  20000000  0800786c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a94  200001cc  08007a38  000201cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c60  08007a38  00020c60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f2ed  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c4b  00000000  00000000  0002f4e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d60  00000000  00000000  00032138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c08  00000000  00000000  00032e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027e88  00000000  00000000  00033aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001020e  00000000  00000000  0005b928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6357  00000000  00000000  0006bb36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00151e8d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038c0  00000000  00000000  00151ee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001cc 	.word	0x200001cc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007778 	.word	0x08007778

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d0 	.word	0x200001d0
 80001cc:	08007778 	.word	0x08007778

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <KeyBoardPrint>:
}
*/

         /* print the contents of msg buf */

void KeyBoardPrint(char *data, uint16_t length) {
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
 8000288:	460b      	mov	r3, r1
 800028a:	807b      	strh	r3, [r7, #2]
    for (uint16_t count = 0; count < length; count++)
 800028c:	2300      	movs	r3, #0
 800028e:	81fb      	strh	r3, [r7, #14]
 8000290:	e066      	b.n	8000360 <KeyBoardPrint+0xe0>
    {
        if (data[count] >= 0x41 && data[count] <= 0x5A)	//uppercase A - Z
 8000292:	89fb      	ldrh	r3, [r7, #14]
 8000294:	687a      	ldr	r2, [r7, #4]
 8000296:	4413      	add	r3, r2
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	2b40      	cmp	r3, #64	; 0x40
 800029c:	d911      	bls.n	80002c2 <KeyBoardPrint+0x42>
 800029e:	89fb      	ldrh	r3, [r7, #14]
 80002a0:	687a      	ldr	r2, [r7, #4]
 80002a2:	4413      	add	r3, r2
 80002a4:	781b      	ldrb	r3, [r3, #0]
 80002a6:	2b5a      	cmp	r3, #90	; 0x5a
 80002a8:	d80b      	bhi.n	80002c2 <KeyBoardPrint+0x42>
        {
            HIDkeyBoard.MODIFIER = 0x02;  //print capital letters
 80002aa:	4b32      	ldr	r3, [pc, #200]	; (8000374 <KeyBoardPrint+0xf4>)
 80002ac:	2202      	movs	r2, #2
 80002ae:	701a      	strb	r2, [r3, #0]
            HIDkeyBoard.KEYCODE1 = data[count] - 0x3D;
 80002b0:	89fb      	ldrh	r3, [r7, #14]
 80002b2:	687a      	ldr	r2, [r7, #4]
 80002b4:	4413      	add	r3, r2
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	3b3d      	subs	r3, #61	; 0x3d
 80002ba:	b2da      	uxtb	r2, r3
 80002bc:	4b2d      	ldr	r3, [pc, #180]	; (8000374 <KeyBoardPrint+0xf4>)
 80002be:	709a      	strb	r2, [r3, #2]
 80002c0:	e035      	b.n	800032e <KeyBoardPrint+0xae>
        }
        else if(data[count] >= 0x61 && data[count] <= 0x7A)	//lowercase a - z
 80002c2:	89fb      	ldrh	r3, [r7, #14]
 80002c4:	687a      	ldr	r2, [r7, #4]
 80002c6:	4413      	add	r3, r2
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	2b60      	cmp	r3, #96	; 0x60
 80002cc:	d90e      	bls.n	80002ec <KeyBoardPrint+0x6c>
 80002ce:	89fb      	ldrh	r3, [r7, #14]
 80002d0:	687a      	ldr	r2, [r7, #4]
 80002d2:	4413      	add	r3, r2
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	2b7a      	cmp	r3, #122	; 0x7a
 80002d8:	d808      	bhi.n	80002ec <KeyBoardPrint+0x6c>
        {
            HIDkeyBoard.KEYCODE1 = data[count] - 0x5D;
 80002da:	89fb      	ldrh	r3, [r7, #14]
 80002dc:	687a      	ldr	r2, [r7, #4]
 80002de:	4413      	add	r3, r2
 80002e0:	781b      	ldrb	r3, [r3, #0]
 80002e2:	3b5d      	subs	r3, #93	; 0x5d
 80002e4:	b2da      	uxtb	r2, r3
 80002e6:	4b23      	ldr	r3, [pc, #140]	; (8000374 <KeyBoardPrint+0xf4>)
 80002e8:	709a      	strb	r2, [r3, #2]
 80002ea:	e020      	b.n	800032e <KeyBoardPrint+0xae>
        }
        else if (data[count] == 0x20)		//space
 80002ec:	89fb      	ldrh	r3, [r7, #14]
 80002ee:	687a      	ldr	r2, [r7, #4]
 80002f0:	4413      	add	r3, r2
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	2b20      	cmp	r3, #32
 80002f6:	d103      	bne.n	8000300 <KeyBoardPrint+0x80>
        {
            HIDkeyBoard.KEYCODE1 = 0x2C;
 80002f8:	4b1e      	ldr	r3, [pc, #120]	; (8000374 <KeyBoardPrint+0xf4>)
 80002fa:	222c      	movs	r2, #44	; 0x2c
 80002fc:	709a      	strb	r2, [r3, #2]
 80002fe:	e016      	b.n	800032e <KeyBoardPrint+0xae>
        }
        else if (data[count] == 0x0A)		//new line (enter)
 8000300:	89fb      	ldrh	r3, [r7, #14]
 8000302:	687a      	ldr	r2, [r7, #4]
 8000304:	4413      	add	r3, r2
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	2b0a      	cmp	r3, #10
 800030a:	d103      	bne.n	8000314 <KeyBoardPrint+0x94>
        {
            HIDkeyBoard.KEYCODE1 = 0x28;
 800030c:	4b19      	ldr	r3, [pc, #100]	; (8000374 <KeyBoardPrint+0xf4>)
 800030e:	2228      	movs	r2, #40	; 0x28
 8000310:	709a      	strb	r2, [r3, #2]
 8000312:	e00c      	b.n	800032e <KeyBoardPrint+0xae>
        }
        else if (data[count] == 0x2C)		//comma(,)
 8000314:	89fb      	ldrh	r3, [r7, #14]
 8000316:	687a      	ldr	r2, [r7, #4]
 8000318:	4413      	add	r3, r2
 800031a:	781b      	ldrb	r3, [r3, #0]
 800031c:	2b2c      	cmp	r3, #44	; 0x2c
 800031e:	d103      	bne.n	8000328 <KeyBoardPrint+0xa8>
        {
        	HIDkeyBoard.KEYCODE1 = 0x36;
 8000320:	4b14      	ldr	r3, [pc, #80]	; (8000374 <KeyBoardPrint+0xf4>)
 8000322:	2236      	movs	r2, #54	; 0x36
 8000324:	709a      	strb	r2, [r3, #2]
 8000326:	e002      	b.n	800032e <KeyBoardPrint+0xae>
        }
        else
        {
            HIDkeyBoard.KEYCODE1 = 0x00;
 8000328:	4b12      	ldr	r3, [pc, #72]	; (8000374 <KeyBoardPrint+0xf4>)
 800032a:	2200      	movs	r2, #0
 800032c:	709a      	strb	r2, [r3, #2]
        }

        USBD_HID_SendReport(&hUsbDeviceFS, &HIDkeyBoard, sizeof(HIDkeyBoard));
 800032e:	2208      	movs	r2, #8
 8000330:	4910      	ldr	r1, [pc, #64]	; (8000374 <KeyBoardPrint+0xf4>)
 8000332:	4811      	ldr	r0, [pc, #68]	; (8000378 <KeyBoardPrint+0xf8>)
 8000334:	f004 fe26 	bl	8004f84 <USBD_HID_SendReport>
        HAL_Delay(50);
 8000338:	2032      	movs	r0, #50	; 0x32
 800033a:	f000 f9ff 	bl	800073c <HAL_Delay>

        HIDkeyBoard.MODIFIER = 0x00;
 800033e:	4b0d      	ldr	r3, [pc, #52]	; (8000374 <KeyBoardPrint+0xf4>)
 8000340:	2200      	movs	r2, #0
 8000342:	701a      	strb	r2, [r3, #0]
        HIDkeyBoard.KEYCODE1 = 0x00;
 8000344:	4b0b      	ldr	r3, [pc, #44]	; (8000374 <KeyBoardPrint+0xf4>)
 8000346:	2200      	movs	r2, #0
 8000348:	709a      	strb	r2, [r3, #2]
        USBD_HID_SendReport(&hUsbDeviceFS, &HIDkeyBoard, sizeof(HIDkeyBoard));
 800034a:	2208      	movs	r2, #8
 800034c:	4909      	ldr	r1, [pc, #36]	; (8000374 <KeyBoardPrint+0xf4>)
 800034e:	480a      	ldr	r0, [pc, #40]	; (8000378 <KeyBoardPrint+0xf8>)
 8000350:	f004 fe18 	bl	8004f84 <USBD_HID_SendReport>
        HAL_Delay(50);
 8000354:	2032      	movs	r0, #50	; 0x32
 8000356:	f000 f9f1 	bl	800073c <HAL_Delay>
    for (uint16_t count = 0; count < length; count++)
 800035a:	89fb      	ldrh	r3, [r7, #14]
 800035c:	3301      	adds	r3, #1
 800035e:	81fb      	strh	r3, [r7, #14]
 8000360:	89fa      	ldrh	r2, [r7, #14]
 8000362:	887b      	ldrh	r3, [r7, #2]
 8000364:	429a      	cmp	r2, r3
 8000366:	d394      	bcc.n	8000292 <KeyBoardPrint+0x12>
    }
}
 8000368:	bf00      	nop
 800036a:	bf00      	nop
 800036c:	3710      	adds	r7, #16
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	200001e8 	.word	0x200001e8
 8000378:	20000260 	.word	0x20000260

0800037c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000380:	f000 f960 	bl	8000644 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000384:	f000 f81a 	bl	80003bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000388:	f000 f868 	bl	800045c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800038c:	f005 ffea 	bl	8006364 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  /* store the msg into buf */
  sprintf(Msg_Buf, "Hii, this is Pratham\r\n");
 8000390:	4908      	ldr	r1, [pc, #32]	; (80003b4 <main+0x38>)
 8000392:	4809      	ldr	r0, [pc, #36]	; (80003b8 <main+0x3c>)
 8000394:	f006 fd82 	bl	8006e9c <siprintf>
	  USBD_HID_SendReport(&hUsbDeviceFS, &HIDkeyBoard, sizeof(HIDkeyBoard));
	  HAL_Delay(50);
	  */

	  /* call the function to print the msg using keyboard */
	  KeyBoardPrint(Msg_Buf, strlen(Msg_Buf));
 8000398:	4807      	ldr	r0, [pc, #28]	; (80003b8 <main+0x3c>)
 800039a:	f7ff ff19 	bl	80001d0 <strlen>
 800039e:	4603      	mov	r3, r0
 80003a0:	b29b      	uxth	r3, r3
 80003a2:	4619      	mov	r1, r3
 80003a4:	4804      	ldr	r0, [pc, #16]	; (80003b8 <main+0x3c>)
 80003a6:	f7ff ff6b 	bl	8000280 <KeyBoardPrint>
	  HAL_Delay(1000);
 80003aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003ae:	f000 f9c5 	bl	800073c <HAL_Delay>
	  KeyBoardPrint(Msg_Buf, strlen(Msg_Buf));
 80003b2:	e7f1      	b.n	8000398 <main+0x1c>
 80003b4:	08007790 	.word	0x08007790
 80003b8:	200001f0 	.word	0x200001f0

080003bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b096      	sub	sp, #88	; 0x58
 80003c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003c2:	f107 0314 	add.w	r3, r7, #20
 80003c6:	2244      	movs	r2, #68	; 0x44
 80003c8:	2100      	movs	r1, #0
 80003ca:	4618      	mov	r0, r3
 80003cc:	f006 fd5e 	bl	8006e8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003d0:	463b      	mov	r3, r7
 80003d2:	2200      	movs	r2, #0
 80003d4:	601a      	str	r2, [r3, #0]
 80003d6:	605a      	str	r2, [r3, #4]
 80003d8:	609a      	str	r2, [r3, #8]
 80003da:	60da      	str	r2, [r3, #12]
 80003dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80003de:	f44f 7000 	mov.w	r0, #512	; 0x200
 80003e2:	f001 fe41 	bl	8002068 <HAL_PWREx_ControlVoltageScaling>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80003ec:	f000 f85a 	bl	80004a4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003f0:	2301      	movs	r3, #1
 80003f2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003fa:	2302      	movs	r3, #2
 80003fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003fe:	2303      	movs	r3, #3
 8000400:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000402:	2301      	movs	r3, #1
 8000404:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000406:	230c      	movs	r3, #12
 8000408:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800040a:	2307      	movs	r3, #7
 800040c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800040e:	2302      	movs	r3, #2
 8000410:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000412:	2302      	movs	r3, #2
 8000414:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000416:	f107 0314 	add.w	r3, r7, #20
 800041a:	4618      	mov	r0, r3
 800041c:	f001 fe8a 	bl	8002134 <HAL_RCC_OscConfig>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000426:	f000 f83d 	bl	80004a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800042a:	230f      	movs	r3, #15
 800042c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800042e:	2303      	movs	r3, #3
 8000430:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000432:	2300      	movs	r3, #0
 8000434:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000436:	2300      	movs	r3, #0
 8000438:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800043a:	2300      	movs	r3, #0
 800043c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800043e:	463b      	mov	r3, r7
 8000440:	2102      	movs	r1, #2
 8000442:	4618      	mov	r0, r3
 8000444:	f002 fa52 	bl	80028ec <HAL_RCC_ClockConfig>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800044e:	f000 f829 	bl	80004a4 <Error_Handler>
  }
}
 8000452:	bf00      	nop
 8000454:	3758      	adds	r7, #88	; 0x58
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
	...

0800045c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000462:	4b0f      	ldr	r3, [pc, #60]	; (80004a0 <MX_GPIO_Init+0x44>)
 8000464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000466:	4a0e      	ldr	r2, [pc, #56]	; (80004a0 <MX_GPIO_Init+0x44>)
 8000468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800046c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800046e:	4b0c      	ldr	r3, [pc, #48]	; (80004a0 <MX_GPIO_Init+0x44>)
 8000470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000476:	607b      	str	r3, [r7, #4]
 8000478:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800047a:	4b09      	ldr	r3, [pc, #36]	; (80004a0 <MX_GPIO_Init+0x44>)
 800047c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800047e:	4a08      	ldr	r2, [pc, #32]	; (80004a0 <MX_GPIO_Init+0x44>)
 8000480:	f043 0301 	orr.w	r3, r3, #1
 8000484:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000486:	4b06      	ldr	r3, [pc, #24]	; (80004a0 <MX_GPIO_Init+0x44>)
 8000488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800048a:	f003 0301 	and.w	r3, r3, #1
 800048e:	603b      	str	r3, [r7, #0]
 8000490:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000492:	bf00      	nop
 8000494:	370c      	adds	r7, #12
 8000496:	46bd      	mov	sp, r7
 8000498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop
 80004a0:	40021000 	.word	0x40021000

080004a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004a8:	b672      	cpsid	i
}
 80004aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004ac:	e7fe      	b.n	80004ac <Error_Handler+0x8>
	...

080004b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b083      	sub	sp, #12
 80004b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004b6:	4b0f      	ldr	r3, [pc, #60]	; (80004f4 <HAL_MspInit+0x44>)
 80004b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004ba:	4a0e      	ldr	r2, [pc, #56]	; (80004f4 <HAL_MspInit+0x44>)
 80004bc:	f043 0301 	orr.w	r3, r3, #1
 80004c0:	6613      	str	r3, [r2, #96]	; 0x60
 80004c2:	4b0c      	ldr	r3, [pc, #48]	; (80004f4 <HAL_MspInit+0x44>)
 80004c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004c6:	f003 0301 	and.w	r3, r3, #1
 80004ca:	607b      	str	r3, [r7, #4]
 80004cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ce:	4b09      	ldr	r3, [pc, #36]	; (80004f4 <HAL_MspInit+0x44>)
 80004d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004d2:	4a08      	ldr	r2, [pc, #32]	; (80004f4 <HAL_MspInit+0x44>)
 80004d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004d8:	6593      	str	r3, [r2, #88]	; 0x58
 80004da:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <HAL_MspInit+0x44>)
 80004dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004e2:	603b      	str	r3, [r7, #0]
 80004e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004e6:	bf00      	nop
 80004e8:	370c      	adds	r7, #12
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	40021000 	.word	0x40021000

080004f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004fc:	e7fe      	b.n	80004fc <NMI_Handler+0x4>

080004fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004fe:	b480      	push	{r7}
 8000500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000502:	e7fe      	b.n	8000502 <HardFault_Handler+0x4>

08000504 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000508:	e7fe      	b.n	8000508 <MemManage_Handler+0x4>

0800050a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800050a:	b480      	push	{r7}
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800050e:	e7fe      	b.n	800050e <BusFault_Handler+0x4>

08000510 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000514:	e7fe      	b.n	8000514 <UsageFault_Handler+0x4>

08000516 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000516:	b480      	push	{r7}
 8000518:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800051a:	bf00      	nop
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr

08000524 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr

08000532 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000532:	b480      	push	{r7}
 8000534:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000536:	bf00      	nop
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr

08000540 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000544:	f000 f8da 	bl	80006fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000548:	bf00      	nop
 800054a:	bd80      	pop	{r7, pc}

0800054c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000550:	4802      	ldr	r0, [pc, #8]	; (800055c <OTG_FS_IRQHandler+0x10>)
 8000552:	f000 fd26 	bl	8000fa2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000556:	bf00      	nop
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	20000730 	.word	0x20000730

08000560 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b086      	sub	sp, #24
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000568:	4a14      	ldr	r2, [pc, #80]	; (80005bc <_sbrk+0x5c>)
 800056a:	4b15      	ldr	r3, [pc, #84]	; (80005c0 <_sbrk+0x60>)
 800056c:	1ad3      	subs	r3, r2, r3
 800056e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000570:	697b      	ldr	r3, [r7, #20]
 8000572:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000574:	4b13      	ldr	r3, [pc, #76]	; (80005c4 <_sbrk+0x64>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d102      	bne.n	8000582 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800057c:	4b11      	ldr	r3, [pc, #68]	; (80005c4 <_sbrk+0x64>)
 800057e:	4a12      	ldr	r2, [pc, #72]	; (80005c8 <_sbrk+0x68>)
 8000580:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000582:	4b10      	ldr	r3, [pc, #64]	; (80005c4 <_sbrk+0x64>)
 8000584:	681a      	ldr	r2, [r3, #0]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	4413      	add	r3, r2
 800058a:	693a      	ldr	r2, [r7, #16]
 800058c:	429a      	cmp	r2, r3
 800058e:	d207      	bcs.n	80005a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000590:	f006 fc52 	bl	8006e38 <__errno>
 8000594:	4603      	mov	r3, r0
 8000596:	220c      	movs	r2, #12
 8000598:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800059a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800059e:	e009      	b.n	80005b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005a0:	4b08      	ldr	r3, [pc, #32]	; (80005c4 <_sbrk+0x64>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005a6:	4b07      	ldr	r3, [pc, #28]	; (80005c4 <_sbrk+0x64>)
 80005a8:	681a      	ldr	r2, [r3, #0]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4413      	add	r3, r2
 80005ae:	4a05      	ldr	r2, [pc, #20]	; (80005c4 <_sbrk+0x64>)
 80005b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005b2:	68fb      	ldr	r3, [r7, #12]
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3718      	adds	r7, #24
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	20018000 	.word	0x20018000
 80005c0:	00000400 	.word	0x00000400
 80005c4:	20000254 	.word	0x20000254
 80005c8:	20000c60 	.word	0x20000c60

080005cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80005d0:	4b06      	ldr	r3, [pc, #24]	; (80005ec <SystemInit+0x20>)
 80005d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005d6:	4a05      	ldr	r2, [pc, #20]	; (80005ec <SystemInit+0x20>)
 80005d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	e000ed00 	.word	0xe000ed00

080005f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80005f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000628 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005f4:	f7ff ffea 	bl	80005cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005f8:	480c      	ldr	r0, [pc, #48]	; (800062c <LoopForever+0x6>)
  ldr r1, =_edata
 80005fa:	490d      	ldr	r1, [pc, #52]	; (8000630 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005fc:	4a0d      	ldr	r2, [pc, #52]	; (8000634 <LoopForever+0xe>)
  movs r3, #0
 80005fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000600:	e002      	b.n	8000608 <LoopCopyDataInit>

08000602 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000602:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000604:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000606:	3304      	adds	r3, #4

08000608 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000608:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800060a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800060c:	d3f9      	bcc.n	8000602 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800060e:	4a0a      	ldr	r2, [pc, #40]	; (8000638 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000610:	4c0a      	ldr	r4, [pc, #40]	; (800063c <LoopForever+0x16>)
  movs r3, #0
 8000612:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000614:	e001      	b.n	800061a <LoopFillZerobss>

08000616 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000616:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000618:	3204      	adds	r2, #4

0800061a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800061a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800061c:	d3fb      	bcc.n	8000616 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800061e:	f006 fc11 	bl	8006e44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000622:	f7ff feab 	bl	800037c <main>

08000626 <LoopForever>:

LoopForever:
    b LoopForever
 8000626:	e7fe      	b.n	8000626 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000628:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800062c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000630:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 8000634:	0800786c 	.word	0x0800786c
  ldr r2, =_sbss
 8000638:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 800063c:	20000c60 	.word	0x20000c60

08000640 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000640:	e7fe      	b.n	8000640 <ADC1_2_IRQHandler>
	...

08000644 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800064a:	2300      	movs	r3, #0
 800064c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800064e:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <HAL_Init+0x3c>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a0b      	ldr	r2, [pc, #44]	; (8000680 <HAL_Init+0x3c>)
 8000654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000658:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800065a:	2003      	movs	r0, #3
 800065c:	f000 f962 	bl	8000924 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000660:	2000      	movs	r0, #0
 8000662:	f000 f80f 	bl	8000684 <HAL_InitTick>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d002      	beq.n	8000672 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800066c:	2301      	movs	r3, #1
 800066e:	71fb      	strb	r3, [r7, #7]
 8000670:	e001      	b.n	8000676 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000672:	f7ff ff1d 	bl	80004b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000676:	79fb      	ldrb	r3, [r7, #7]
}
 8000678:	4618      	mov	r0, r3
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40022000 	.word	0x40022000

08000684 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800068c:	2300      	movs	r3, #0
 800068e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000690:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <HAL_InitTick+0x6c>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d023      	beq.n	80006e0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000698:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <HAL_InitTick+0x70>)
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <HAL_InitTick+0x6c>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	4619      	mov	r1, r3
 80006a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80006aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ae:	4618      	mov	r0, r3
 80006b0:	f000 f96d 	bl	800098e <HAL_SYSTICK_Config>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d10f      	bne.n	80006da <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	2b0f      	cmp	r3, #15
 80006be:	d809      	bhi.n	80006d4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006c0:	2200      	movs	r2, #0
 80006c2:	6879      	ldr	r1, [r7, #4]
 80006c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006c8:	f000 f937 	bl	800093a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006cc:	4a0a      	ldr	r2, [pc, #40]	; (80006f8 <HAL_InitTick+0x74>)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	6013      	str	r3, [r2, #0]
 80006d2:	e007      	b.n	80006e4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80006d4:	2301      	movs	r3, #1
 80006d6:	73fb      	strb	r3, [r7, #15]
 80006d8:	e004      	b.n	80006e4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006da:	2301      	movs	r3, #1
 80006dc:	73fb      	strb	r3, [r7, #15]
 80006de:	e001      	b.n	80006e4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006e0:	2301      	movs	r3, #1
 80006e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80006e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	3710      	adds	r7, #16
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000008 	.word	0x20000008
 80006f4:	20000000 	.word	0x20000000
 80006f8:	20000004 	.word	0x20000004

080006fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <HAL_IncTick+0x20>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	461a      	mov	r2, r3
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <HAL_IncTick+0x24>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4413      	add	r3, r2
 800070c:	4a04      	ldr	r2, [pc, #16]	; (8000720 <HAL_IncTick+0x24>)
 800070e:	6013      	str	r3, [r2, #0]
}
 8000710:	bf00      	nop
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	20000008 	.word	0x20000008
 8000720:	20000258 	.word	0x20000258

08000724 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  return uwTick;
 8000728:	4b03      	ldr	r3, [pc, #12]	; (8000738 <HAL_GetTick+0x14>)
 800072a:	681b      	ldr	r3, [r3, #0]
}
 800072c:	4618      	mov	r0, r3
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	20000258 	.word	0x20000258

0800073c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000744:	f7ff ffee 	bl	8000724 <HAL_GetTick>
 8000748:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000754:	d005      	beq.n	8000762 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000756:	4b0a      	ldr	r3, [pc, #40]	; (8000780 <HAL_Delay+0x44>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	461a      	mov	r2, r3
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	4413      	add	r3, r2
 8000760:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000762:	bf00      	nop
 8000764:	f7ff ffde 	bl	8000724 <HAL_GetTick>
 8000768:	4602      	mov	r2, r0
 800076a:	68bb      	ldr	r3, [r7, #8]
 800076c:	1ad3      	subs	r3, r2, r3
 800076e:	68fa      	ldr	r2, [r7, #12]
 8000770:	429a      	cmp	r2, r3
 8000772:	d8f7      	bhi.n	8000764 <HAL_Delay+0x28>
  {
  }
}
 8000774:	bf00      	nop
 8000776:	bf00      	nop
 8000778:	3710      	adds	r7, #16
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000008 	.word	0x20000008

08000784 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000784:	b480      	push	{r7}
 8000786:	b085      	sub	sp, #20
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	f003 0307 	and.w	r3, r3, #7
 8000792:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000794:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <__NVIC_SetPriorityGrouping+0x44>)
 8000796:	68db      	ldr	r3, [r3, #12]
 8000798:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800079a:	68ba      	ldr	r2, [r7, #8]
 800079c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007a0:	4013      	ands	r3, r2
 80007a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007b6:	4a04      	ldr	r2, [pc, #16]	; (80007c8 <__NVIC_SetPriorityGrouping+0x44>)
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	60d3      	str	r3, [r2, #12]
}
 80007bc:	bf00      	nop
 80007be:	3714      	adds	r7, #20
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr
 80007c8:	e000ed00 	.word	0xe000ed00

080007cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007d0:	4b04      	ldr	r3, [pc, #16]	; (80007e4 <__NVIC_GetPriorityGrouping+0x18>)
 80007d2:	68db      	ldr	r3, [r3, #12]
 80007d4:	0a1b      	lsrs	r3, r3, #8
 80007d6:	f003 0307 	and.w	r3, r3, #7
}
 80007da:	4618      	mov	r0, r3
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr
 80007e4:	e000ed00 	.word	0xe000ed00

080007e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	db0b      	blt.n	8000812 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	f003 021f 	and.w	r2, r3, #31
 8000800:	4907      	ldr	r1, [pc, #28]	; (8000820 <__NVIC_EnableIRQ+0x38>)
 8000802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000806:	095b      	lsrs	r3, r3, #5
 8000808:	2001      	movs	r0, #1
 800080a:	fa00 f202 	lsl.w	r2, r0, r2
 800080e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000812:	bf00      	nop
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	e000e100 	.word	0xe000e100

08000824 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	6039      	str	r1, [r7, #0]
 800082e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000834:	2b00      	cmp	r3, #0
 8000836:	db0a      	blt.n	800084e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	b2da      	uxtb	r2, r3
 800083c:	490c      	ldr	r1, [pc, #48]	; (8000870 <__NVIC_SetPriority+0x4c>)
 800083e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000842:	0112      	lsls	r2, r2, #4
 8000844:	b2d2      	uxtb	r2, r2
 8000846:	440b      	add	r3, r1
 8000848:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800084c:	e00a      	b.n	8000864 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	b2da      	uxtb	r2, r3
 8000852:	4908      	ldr	r1, [pc, #32]	; (8000874 <__NVIC_SetPriority+0x50>)
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	f003 030f 	and.w	r3, r3, #15
 800085a:	3b04      	subs	r3, #4
 800085c:	0112      	lsls	r2, r2, #4
 800085e:	b2d2      	uxtb	r2, r2
 8000860:	440b      	add	r3, r1
 8000862:	761a      	strb	r2, [r3, #24]
}
 8000864:	bf00      	nop
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	e000e100 	.word	0xe000e100
 8000874:	e000ed00 	.word	0xe000ed00

08000878 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000878:	b480      	push	{r7}
 800087a:	b089      	sub	sp, #36	; 0x24
 800087c:	af00      	add	r7, sp, #0
 800087e:	60f8      	str	r0, [r7, #12]
 8000880:	60b9      	str	r1, [r7, #8]
 8000882:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	f003 0307 	and.w	r3, r3, #7
 800088a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800088c:	69fb      	ldr	r3, [r7, #28]
 800088e:	f1c3 0307 	rsb	r3, r3, #7
 8000892:	2b04      	cmp	r3, #4
 8000894:	bf28      	it	cs
 8000896:	2304      	movcs	r3, #4
 8000898:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800089a:	69fb      	ldr	r3, [r7, #28]
 800089c:	3304      	adds	r3, #4
 800089e:	2b06      	cmp	r3, #6
 80008a0:	d902      	bls.n	80008a8 <NVIC_EncodePriority+0x30>
 80008a2:	69fb      	ldr	r3, [r7, #28]
 80008a4:	3b03      	subs	r3, #3
 80008a6:	e000      	b.n	80008aa <NVIC_EncodePriority+0x32>
 80008a8:	2300      	movs	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008b0:	69bb      	ldr	r3, [r7, #24]
 80008b2:	fa02 f303 	lsl.w	r3, r2, r3
 80008b6:	43da      	mvns	r2, r3
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	401a      	ands	r2, r3
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	fa01 f303 	lsl.w	r3, r1, r3
 80008ca:	43d9      	mvns	r1, r3
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008d0:	4313      	orrs	r3, r2
         );
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3724      	adds	r7, #36	; 0x24
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
	...

080008e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	3b01      	subs	r3, #1
 80008ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008f0:	d301      	bcc.n	80008f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008f2:	2301      	movs	r3, #1
 80008f4:	e00f      	b.n	8000916 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008f6:	4a0a      	ldr	r2, [pc, #40]	; (8000920 <SysTick_Config+0x40>)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	3b01      	subs	r3, #1
 80008fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008fe:	210f      	movs	r1, #15
 8000900:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000904:	f7ff ff8e 	bl	8000824 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000908:	4b05      	ldr	r3, [pc, #20]	; (8000920 <SysTick_Config+0x40>)
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800090e:	4b04      	ldr	r3, [pc, #16]	; (8000920 <SysTick_Config+0x40>)
 8000910:	2207      	movs	r2, #7
 8000912:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000914:	2300      	movs	r3, #0
}
 8000916:	4618      	mov	r0, r3
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	e000e010 	.word	0xe000e010

08000924 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800092c:	6878      	ldr	r0, [r7, #4]
 800092e:	f7ff ff29 	bl	8000784 <__NVIC_SetPriorityGrouping>
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800093a:	b580      	push	{r7, lr}
 800093c:	b086      	sub	sp, #24
 800093e:	af00      	add	r7, sp, #0
 8000940:	4603      	mov	r3, r0
 8000942:	60b9      	str	r1, [r7, #8]
 8000944:	607a      	str	r2, [r7, #4]
 8000946:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000948:	2300      	movs	r3, #0
 800094a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800094c:	f7ff ff3e 	bl	80007cc <__NVIC_GetPriorityGrouping>
 8000950:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000952:	687a      	ldr	r2, [r7, #4]
 8000954:	68b9      	ldr	r1, [r7, #8]
 8000956:	6978      	ldr	r0, [r7, #20]
 8000958:	f7ff ff8e 	bl	8000878 <NVIC_EncodePriority>
 800095c:	4602      	mov	r2, r0
 800095e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000962:	4611      	mov	r1, r2
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff ff5d 	bl	8000824 <__NVIC_SetPriority>
}
 800096a:	bf00      	nop
 800096c:	3718      	adds	r7, #24
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	b082      	sub	sp, #8
 8000976:	af00      	add	r7, sp, #0
 8000978:	4603      	mov	r3, r0
 800097a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800097c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000980:	4618      	mov	r0, r3
 8000982:	f7ff ff31 	bl	80007e8 <__NVIC_EnableIRQ>
}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800098e:	b580      	push	{r7, lr}
 8000990:	b082      	sub	sp, #8
 8000992:	af00      	add	r7, sp, #0
 8000994:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f7ff ffa2 	bl	80008e0 <SysTick_Config>
 800099c:	4603      	mov	r3, r0
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
	...

080009a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b087      	sub	sp, #28
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009b2:	2300      	movs	r3, #0
 80009b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009b6:	e17f      	b.n	8000cb8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	2101      	movs	r1, #1
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	fa01 f303 	lsl.w	r3, r1, r3
 80009c4:	4013      	ands	r3, r2
 80009c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	f000 8171 	beq.w	8000cb2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	f003 0303 	and.w	r3, r3, #3
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d005      	beq.n	80009e8 <HAL_GPIO_Init+0x40>
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	f003 0303 	and.w	r3, r3, #3
 80009e4:	2b02      	cmp	r3, #2
 80009e6:	d130      	bne.n	8000a4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	689b      	ldr	r3, [r3, #8]
 80009ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	005b      	lsls	r3, r3, #1
 80009f2:	2203      	movs	r2, #3
 80009f4:	fa02 f303 	lsl.w	r3, r2, r3
 80009f8:	43db      	mvns	r3, r3
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	4013      	ands	r3, r2
 80009fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	68da      	ldr	r2, [r3, #12]
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	005b      	lsls	r3, r3, #1
 8000a08:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0c:	693a      	ldr	r2, [r7, #16]
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	693a      	ldr	r2, [r7, #16]
 8000a16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a1e:	2201      	movs	r2, #1
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	fa02 f303 	lsl.w	r3, r2, r3
 8000a26:	43db      	mvns	r3, r3
 8000a28:	693a      	ldr	r2, [r7, #16]
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	091b      	lsrs	r3, r3, #4
 8000a34:	f003 0201 	and.w	r2, r3, #1
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	f003 0303 	and.w	r3, r3, #3
 8000a52:	2b03      	cmp	r3, #3
 8000a54:	d118      	bne.n	8000a88 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	fa02 f303 	lsl.w	r3, r2, r3
 8000a64:	43db      	mvns	r3, r3
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	4013      	ands	r3, r2
 8000a6a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	08db      	lsrs	r3, r3, #3
 8000a72:	f003 0201 	and.w	r2, r3, #1
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7c:	693a      	ldr	r2, [r7, #16]
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	693a      	ldr	r2, [r7, #16]
 8000a86:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	f003 0303 	and.w	r3, r3, #3
 8000a90:	2b03      	cmp	r3, #3
 8000a92:	d017      	beq.n	8000ac4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	005b      	lsls	r3, r3, #1
 8000a9e:	2203      	movs	r2, #3
 8000aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa4:	43db      	mvns	r3, r3
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	689a      	ldr	r2, [r3, #8]
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	005b      	lsls	r3, r3, #1
 8000ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab8:	693a      	ldr	r2, [r7, #16]
 8000aba:	4313      	orrs	r3, r2
 8000abc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	693a      	ldr	r2, [r7, #16]
 8000ac2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	f003 0303 	and.w	r3, r3, #3
 8000acc:	2b02      	cmp	r3, #2
 8000ace:	d123      	bne.n	8000b18 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	08da      	lsrs	r2, r3, #3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	3208      	adds	r2, #8
 8000ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000adc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	f003 0307 	and.w	r3, r3, #7
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	220f      	movs	r2, #15
 8000ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aec:	43db      	mvns	r3, r3
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	4013      	ands	r3, r2
 8000af2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	691a      	ldr	r2, [r3, #16]
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	f003 0307 	and.w	r3, r3, #7
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	fa02 f303 	lsl.w	r3, r2, r3
 8000b04:	693a      	ldr	r2, [r7, #16]
 8000b06:	4313      	orrs	r3, r2
 8000b08:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	08da      	lsrs	r2, r3, #3
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	3208      	adds	r2, #8
 8000b12:	6939      	ldr	r1, [r7, #16]
 8000b14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	005b      	lsls	r3, r3, #1
 8000b22:	2203      	movs	r2, #3
 8000b24:	fa02 f303 	lsl.w	r3, r2, r3
 8000b28:	43db      	mvns	r3, r3
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	f003 0203 	and.w	r2, r3, #3
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	005b      	lsls	r3, r3, #1
 8000b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b40:	693a      	ldr	r2, [r7, #16]
 8000b42:	4313      	orrs	r3, r2
 8000b44:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	f000 80ac 	beq.w	8000cb2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5a:	4b5f      	ldr	r3, [pc, #380]	; (8000cd8 <HAL_GPIO_Init+0x330>)
 8000b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b5e:	4a5e      	ldr	r2, [pc, #376]	; (8000cd8 <HAL_GPIO_Init+0x330>)
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	6613      	str	r3, [r2, #96]	; 0x60
 8000b66:	4b5c      	ldr	r3, [pc, #368]	; (8000cd8 <HAL_GPIO_Init+0x330>)
 8000b68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	60bb      	str	r3, [r7, #8]
 8000b70:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b72:	4a5a      	ldr	r2, [pc, #360]	; (8000cdc <HAL_GPIO_Init+0x334>)
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	089b      	lsrs	r3, r3, #2
 8000b78:	3302      	adds	r3, #2
 8000b7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	f003 0303 	and.w	r3, r3, #3
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	220f      	movs	r2, #15
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	43db      	mvns	r3, r3
 8000b90:	693a      	ldr	r2, [r7, #16]
 8000b92:	4013      	ands	r3, r2
 8000b94:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b9c:	d025      	beq.n	8000bea <HAL_GPIO_Init+0x242>
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4a4f      	ldr	r2, [pc, #316]	; (8000ce0 <HAL_GPIO_Init+0x338>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d01f      	beq.n	8000be6 <HAL_GPIO_Init+0x23e>
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4a4e      	ldr	r2, [pc, #312]	; (8000ce4 <HAL_GPIO_Init+0x33c>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d019      	beq.n	8000be2 <HAL_GPIO_Init+0x23a>
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4a4d      	ldr	r2, [pc, #308]	; (8000ce8 <HAL_GPIO_Init+0x340>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d013      	beq.n	8000bde <HAL_GPIO_Init+0x236>
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4a4c      	ldr	r2, [pc, #304]	; (8000cec <HAL_GPIO_Init+0x344>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d00d      	beq.n	8000bda <HAL_GPIO_Init+0x232>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4a4b      	ldr	r2, [pc, #300]	; (8000cf0 <HAL_GPIO_Init+0x348>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d007      	beq.n	8000bd6 <HAL_GPIO_Init+0x22e>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4a4a      	ldr	r2, [pc, #296]	; (8000cf4 <HAL_GPIO_Init+0x34c>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d101      	bne.n	8000bd2 <HAL_GPIO_Init+0x22a>
 8000bce:	2306      	movs	r3, #6
 8000bd0:	e00c      	b.n	8000bec <HAL_GPIO_Init+0x244>
 8000bd2:	2307      	movs	r3, #7
 8000bd4:	e00a      	b.n	8000bec <HAL_GPIO_Init+0x244>
 8000bd6:	2305      	movs	r3, #5
 8000bd8:	e008      	b.n	8000bec <HAL_GPIO_Init+0x244>
 8000bda:	2304      	movs	r3, #4
 8000bdc:	e006      	b.n	8000bec <HAL_GPIO_Init+0x244>
 8000bde:	2303      	movs	r3, #3
 8000be0:	e004      	b.n	8000bec <HAL_GPIO_Init+0x244>
 8000be2:	2302      	movs	r3, #2
 8000be4:	e002      	b.n	8000bec <HAL_GPIO_Init+0x244>
 8000be6:	2301      	movs	r3, #1
 8000be8:	e000      	b.n	8000bec <HAL_GPIO_Init+0x244>
 8000bea:	2300      	movs	r3, #0
 8000bec:	697a      	ldr	r2, [r7, #20]
 8000bee:	f002 0203 	and.w	r2, r2, #3
 8000bf2:	0092      	lsls	r2, r2, #2
 8000bf4:	4093      	lsls	r3, r2
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bfc:	4937      	ldr	r1, [pc, #220]	; (8000cdc <HAL_GPIO_Init+0x334>)
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	089b      	lsrs	r3, r3, #2
 8000c02:	3302      	adds	r3, #2
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c0a:	4b3b      	ldr	r3, [pc, #236]	; (8000cf8 <HAL_GPIO_Init+0x350>)
 8000c0c:	689b      	ldr	r3, [r3, #8]
 8000c0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	43db      	mvns	r3, r3
 8000c14:	693a      	ldr	r2, [r7, #16]
 8000c16:	4013      	ands	r3, r2
 8000c18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d003      	beq.n	8000c2e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c2e:	4a32      	ldr	r2, [pc, #200]	; (8000cf8 <HAL_GPIO_Init+0x350>)
 8000c30:	693b      	ldr	r3, [r7, #16]
 8000c32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000c34:	4b30      	ldr	r3, [pc, #192]	; (8000cf8 <HAL_GPIO_Init+0x350>)
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	43db      	mvns	r3, r3
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	4013      	ands	r3, r2
 8000c42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d003      	beq.n	8000c58 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000c50:	693a      	ldr	r2, [r7, #16]
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c58:	4a27      	ldr	r2, [pc, #156]	; (8000cf8 <HAL_GPIO_Init+0x350>)
 8000c5a:	693b      	ldr	r3, [r7, #16]
 8000c5c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000c5e:	4b26      	ldr	r3, [pc, #152]	; (8000cf8 <HAL_GPIO_Init+0x350>)
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	43db      	mvns	r3, r3
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d003      	beq.n	8000c82 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000c82:	4a1d      	ldr	r2, [pc, #116]	; (8000cf8 <HAL_GPIO_Init+0x350>)
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000c88:	4b1b      	ldr	r3, [pc, #108]	; (8000cf8 <HAL_GPIO_Init+0x350>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	43db      	mvns	r3, r3
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	4013      	ands	r3, r2
 8000c96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d003      	beq.n	8000cac <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000ca4:	693a      	ldr	r2, [r7, #16]
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000cac:	4a12      	ldr	r2, [pc, #72]	; (8000cf8 <HAL_GPIO_Init+0x350>)
 8000cae:	693b      	ldr	r3, [r7, #16]
 8000cb0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f47f ae78 	bne.w	80009b8 <HAL_GPIO_Init+0x10>
  }
}
 8000cc8:	bf00      	nop
 8000cca:	bf00      	nop
 8000ccc:	371c      	adds	r7, #28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	40010000 	.word	0x40010000
 8000ce0:	48000400 	.word	0x48000400
 8000ce4:	48000800 	.word	0x48000800
 8000ce8:	48000c00 	.word	0x48000c00
 8000cec:	48001000 	.word	0x48001000
 8000cf0:	48001400 	.word	0x48001400
 8000cf4:	48001800 	.word	0x48001800
 8000cf8:	40010400 	.word	0x40010400

08000cfc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cfe:	b08f      	sub	sp, #60	; 0x3c
 8000d00:	af0a      	add	r7, sp, #40	; 0x28
 8000d02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d101      	bne.n	8000d0e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e116      	b.n	8000f3c <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d106      	bne.n	8000d2e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2200      	movs	r2, #0
 8000d24:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	f005 fc63 	bl	80065f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2203      	movs	r2, #3
 8000d32:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d102      	bne.n	8000d48 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2200      	movs	r2, #0
 8000d46:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f002 fd5a 	bl	8003806 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	603b      	str	r3, [r7, #0]
 8000d58:	687e      	ldr	r6, [r7, #4]
 8000d5a:	466d      	mov	r5, sp
 8000d5c:	f106 0410 	add.w	r4, r6, #16
 8000d60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d68:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d6c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000d70:	1d33      	adds	r3, r6, #4
 8000d72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d74:	6838      	ldr	r0, [r7, #0]
 8000d76:	f002 fc6d 	bl	8003654 <USB_CoreInit>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d005      	beq.n	8000d8c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2202      	movs	r2, #2
 8000d84:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	e0d7      	b.n	8000f3c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2100      	movs	r1, #0
 8000d92:	4618      	mov	r0, r3
 8000d94:	f002 fd48 	bl	8003828 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d98:	2300      	movs	r3, #0
 8000d9a:	73fb      	strb	r3, [r7, #15]
 8000d9c:	e04a      	b.n	8000e34 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000d9e:	7bfa      	ldrb	r2, [r7, #15]
 8000da0:	6879      	ldr	r1, [r7, #4]
 8000da2:	4613      	mov	r3, r2
 8000da4:	00db      	lsls	r3, r3, #3
 8000da6:	4413      	add	r3, r2
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	440b      	add	r3, r1
 8000dac:	333d      	adds	r3, #61	; 0x3d
 8000dae:	2201      	movs	r2, #1
 8000db0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000db2:	7bfa      	ldrb	r2, [r7, #15]
 8000db4:	6879      	ldr	r1, [r7, #4]
 8000db6:	4613      	mov	r3, r2
 8000db8:	00db      	lsls	r3, r3, #3
 8000dba:	4413      	add	r3, r2
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	440b      	add	r3, r1
 8000dc0:	333c      	adds	r3, #60	; 0x3c
 8000dc2:	7bfa      	ldrb	r2, [r7, #15]
 8000dc4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000dc6:	7bfa      	ldrb	r2, [r7, #15]
 8000dc8:	7bfb      	ldrb	r3, [r7, #15]
 8000dca:	b298      	uxth	r0, r3
 8000dcc:	6879      	ldr	r1, [r7, #4]
 8000dce:	4613      	mov	r3, r2
 8000dd0:	00db      	lsls	r3, r3, #3
 8000dd2:	4413      	add	r3, r2
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	440b      	add	r3, r1
 8000dd8:	3344      	adds	r3, #68	; 0x44
 8000dda:	4602      	mov	r2, r0
 8000ddc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000dde:	7bfa      	ldrb	r2, [r7, #15]
 8000de0:	6879      	ldr	r1, [r7, #4]
 8000de2:	4613      	mov	r3, r2
 8000de4:	00db      	lsls	r3, r3, #3
 8000de6:	4413      	add	r3, r2
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	440b      	add	r3, r1
 8000dec:	3340      	adds	r3, #64	; 0x40
 8000dee:	2200      	movs	r2, #0
 8000df0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000df2:	7bfa      	ldrb	r2, [r7, #15]
 8000df4:	6879      	ldr	r1, [r7, #4]
 8000df6:	4613      	mov	r3, r2
 8000df8:	00db      	lsls	r3, r3, #3
 8000dfa:	4413      	add	r3, r2
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	440b      	add	r3, r1
 8000e00:	3348      	adds	r3, #72	; 0x48
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000e06:	7bfa      	ldrb	r2, [r7, #15]
 8000e08:	6879      	ldr	r1, [r7, #4]
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	00db      	lsls	r3, r3, #3
 8000e0e:	4413      	add	r3, r2
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	440b      	add	r3, r1
 8000e14:	334c      	adds	r3, #76	; 0x4c
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000e1a:	7bfa      	ldrb	r2, [r7, #15]
 8000e1c:	6879      	ldr	r1, [r7, #4]
 8000e1e:	4613      	mov	r3, r2
 8000e20:	00db      	lsls	r3, r3, #3
 8000e22:	4413      	add	r3, r2
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	440b      	add	r3, r1
 8000e28:	3354      	adds	r3, #84	; 0x54
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e2e:	7bfb      	ldrb	r3, [r7, #15]
 8000e30:	3301      	adds	r3, #1
 8000e32:	73fb      	strb	r3, [r7, #15]
 8000e34:	7bfa      	ldrb	r2, [r7, #15]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d3af      	bcc.n	8000d9e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e3e:	2300      	movs	r3, #0
 8000e40:	73fb      	strb	r3, [r7, #15]
 8000e42:	e044      	b.n	8000ece <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000e44:	7bfa      	ldrb	r2, [r7, #15]
 8000e46:	6879      	ldr	r1, [r7, #4]
 8000e48:	4613      	mov	r3, r2
 8000e4a:	00db      	lsls	r3, r3, #3
 8000e4c:	4413      	add	r3, r2
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	440b      	add	r3, r1
 8000e52:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8000e56:	2200      	movs	r2, #0
 8000e58:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000e5a:	7bfa      	ldrb	r2, [r7, #15]
 8000e5c:	6879      	ldr	r1, [r7, #4]
 8000e5e:	4613      	mov	r3, r2
 8000e60:	00db      	lsls	r3, r3, #3
 8000e62:	4413      	add	r3, r2
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	440b      	add	r3, r1
 8000e68:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8000e6c:	7bfa      	ldrb	r2, [r7, #15]
 8000e6e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000e70:	7bfa      	ldrb	r2, [r7, #15]
 8000e72:	6879      	ldr	r1, [r7, #4]
 8000e74:	4613      	mov	r3, r2
 8000e76:	00db      	lsls	r3, r3, #3
 8000e78:	4413      	add	r3, r2
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	440b      	add	r3, r1
 8000e7e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8000e82:	2200      	movs	r2, #0
 8000e84:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000e86:	7bfa      	ldrb	r2, [r7, #15]
 8000e88:	6879      	ldr	r1, [r7, #4]
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	00db      	lsls	r3, r3, #3
 8000e8e:	4413      	add	r3, r2
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	440b      	add	r3, r1
 8000e94:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000e9c:	7bfa      	ldrb	r2, [r7, #15]
 8000e9e:	6879      	ldr	r1, [r7, #4]
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	00db      	lsls	r3, r3, #3
 8000ea4:	4413      	add	r3, r2
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	440b      	add	r3, r1
 8000eaa:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000eb2:	7bfa      	ldrb	r2, [r7, #15]
 8000eb4:	6879      	ldr	r1, [r7, #4]
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	00db      	lsls	r3, r3, #3
 8000eba:	4413      	add	r3, r2
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	440b      	add	r3, r1
 8000ec0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ec8:	7bfb      	ldrb	r3, [r7, #15]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	73fb      	strb	r3, [r7, #15]
 8000ece:	7bfa      	ldrb	r2, [r7, #15]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d3b5      	bcc.n	8000e44 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	603b      	str	r3, [r7, #0]
 8000ede:	687e      	ldr	r6, [r7, #4]
 8000ee0:	466d      	mov	r5, sp
 8000ee2:	f106 0410 	add.w	r4, r6, #16
 8000ee6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ee8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000eea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000eec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000eee:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000ef2:	e885 0003 	stmia.w	r5, {r0, r1}
 8000ef6:	1d33      	adds	r3, r6, #4
 8000ef8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000efa:	6838      	ldr	r0, [r7, #0]
 8000efc:	f002 fce0 	bl	80038c0 <USB_DevInit>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d005      	beq.n	8000f12 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2202      	movs	r2, #2
 8000f0a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e014      	b.n	8000f3c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2200      	movs	r2, #0
 8000f16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d102      	bne.n	8000f30 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f001 f86a 	bl	8002004 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f003 fd68 	bl	8004a0a <USB_DevDisconnect>

  return HAL_OK;
 8000f3a:	2300      	movs	r3, #0
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3714      	adds	r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000f44 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d101      	bne.n	8000f60 <HAL_PCD_Start+0x1c>
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	e01c      	b.n	8000f9a <HAL_PCD_Start+0x56>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2201      	movs	r2, #1
 8000f64:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d105      	bne.n	8000f7c <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f74:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f002 fc2f 	bl	80037e4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f003 fd1c 	bl	80049c8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2200      	movs	r2, #0
 8000f94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000fa2:	b590      	push	{r4, r7, lr}
 8000fa4:	b08d      	sub	sp, #52	; 0x34
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000fb0:	6a3b      	ldr	r3, [r7, #32]
 8000fb2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f003 fdda 	bl	8004b72 <USB_GetMode>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	f040 847e 	bne.w	80018c2 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f003 fd3e 	bl	8004a4c <USB_ReadInterrupts>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	f000 8474 	beq.w	80018c0 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	0a1b      	lsrs	r3, r3, #8
 8000fe2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f003 fd2b 	bl	8004a4c <USB_ReadInterrupts>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	f003 0302 	and.w	r3, r3, #2
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d107      	bne.n	8001010 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	695a      	ldr	r2, [r3, #20]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f002 0202 	and.w	r2, r2, #2
 800100e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4618      	mov	r0, r3
 8001016:	f003 fd19 	bl	8004a4c <USB_ReadInterrupts>
 800101a:	4603      	mov	r3, r0
 800101c:	f003 0310 	and.w	r3, r3, #16
 8001020:	2b10      	cmp	r3, #16
 8001022:	d161      	bne.n	80010e8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	699a      	ldr	r2, [r3, #24]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f022 0210 	bic.w	r2, r2, #16
 8001032:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001034:	6a3b      	ldr	r3, [r7, #32]
 8001036:	6a1b      	ldr	r3, [r3, #32]
 8001038:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	f003 020f 	and.w	r2, r3, #15
 8001040:	4613      	mov	r3, r2
 8001042:	00db      	lsls	r3, r3, #3
 8001044:	4413      	add	r3, r2
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	4413      	add	r3, r2
 8001050:	3304      	adds	r3, #4
 8001052:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	0c5b      	lsrs	r3, r3, #17
 8001058:	f003 030f 	and.w	r3, r3, #15
 800105c:	2b02      	cmp	r3, #2
 800105e:	d124      	bne.n	80010aa <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001066:	4013      	ands	r3, r2
 8001068:	2b00      	cmp	r3, #0
 800106a:	d035      	beq.n	80010d8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	091b      	lsrs	r3, r3, #4
 8001074:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001076:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800107a:	b29b      	uxth	r3, r3
 800107c:	461a      	mov	r2, r3
 800107e:	6a38      	ldr	r0, [r7, #32]
 8001080:	f003 fb50 	bl	8004724 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	691a      	ldr	r2, [r3, #16]
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	091b      	lsrs	r3, r3, #4
 800108c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001090:	441a      	add	r2, r3
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	6a1a      	ldr	r2, [r3, #32]
 800109a:	69bb      	ldr	r3, [r7, #24]
 800109c:	091b      	lsrs	r3, r3, #4
 800109e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010a2:	441a      	add	r2, r3
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	621a      	str	r2, [r3, #32]
 80010a8:	e016      	b.n	80010d8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	0c5b      	lsrs	r3, r3, #17
 80010ae:	f003 030f 	and.w	r3, r3, #15
 80010b2:	2b06      	cmp	r3, #6
 80010b4:	d110      	bne.n	80010d8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80010bc:	2208      	movs	r2, #8
 80010be:	4619      	mov	r1, r3
 80010c0:	6a38      	ldr	r0, [r7, #32]
 80010c2:	f003 fb2f 	bl	8004724 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	6a1a      	ldr	r2, [r3, #32]
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	091b      	lsrs	r3, r3, #4
 80010ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010d2:	441a      	add	r2, r3
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	699a      	ldr	r2, [r3, #24]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f042 0210 	orr.w	r2, r2, #16
 80010e6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f003 fcad 	bl	8004a4c <USB_ReadInterrupts>
 80010f2:	4603      	mov	r3, r0
 80010f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80010f8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80010fc:	f040 80a7 	bne.w	800124e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001100:	2300      	movs	r3, #0
 8001102:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4618      	mov	r0, r3
 800110a:	f003 fcb2 	bl	8004a72 <USB_ReadDevAllOutEpInterrupt>
 800110e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001110:	e099      	b.n	8001246 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001114:	f003 0301 	and.w	r3, r3, #1
 8001118:	2b00      	cmp	r3, #0
 800111a:	f000 808e 	beq.w	800123a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001124:	b2d2      	uxtb	r2, r2
 8001126:	4611      	mov	r1, r2
 8001128:	4618      	mov	r0, r3
 800112a:	f003 fcd6 	bl	8004ada <USB_ReadDevOutEPInterrupt>
 800112e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	2b00      	cmp	r3, #0
 8001138:	d00c      	beq.n	8001154 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800113a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113c:	015a      	lsls	r2, r3, #5
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	4413      	add	r3, r2
 8001142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001146:	461a      	mov	r2, r3
 8001148:	2301      	movs	r3, #1
 800114a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800114c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f000 fe7e 	bl	8001e50 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	f003 0308 	and.w	r3, r3, #8
 800115a:	2b00      	cmp	r3, #0
 800115c:	d00c      	beq.n	8001178 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800115e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001160:	015a      	lsls	r2, r3, #5
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	4413      	add	r3, r2
 8001166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800116a:	461a      	mov	r2, r3
 800116c:	2308      	movs	r3, #8
 800116e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001170:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f000 feba 	bl	8001eec <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	f003 0310 	and.w	r3, r3, #16
 800117e:	2b00      	cmp	r3, #0
 8001180:	d008      	beq.n	8001194 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001184:	015a      	lsls	r2, r3, #5
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	4413      	add	r3, r2
 800118a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800118e:	461a      	mov	r2, r3
 8001190:	2310      	movs	r3, #16
 8001192:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	2b00      	cmp	r3, #0
 800119c:	d030      	beq.n	8001200 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800119e:	6a3b      	ldr	r3, [r7, #32]
 80011a0:	695b      	ldr	r3, [r3, #20]
 80011a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011a6:	2b80      	cmp	r3, #128	; 0x80
 80011a8:	d109      	bne.n	80011be <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	69fa      	ldr	r2, [r7, #28]
 80011b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80011b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011bc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80011be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011c0:	4613      	mov	r3, r2
 80011c2:	00db      	lsls	r3, r3, #3
 80011c4:	4413      	add	r3, r2
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	4413      	add	r3, r2
 80011d0:	3304      	adds	r3, #4
 80011d2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	78db      	ldrb	r3, [r3, #3]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d108      	bne.n	80011ee <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	2200      	movs	r2, #0
 80011e0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80011e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	4619      	mov	r1, r3
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f005 fb49 	bl	8006880 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80011ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f0:	015a      	lsls	r2, r3, #5
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	4413      	add	r3, r2
 80011f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80011fa:	461a      	mov	r2, r3
 80011fc:	2302      	movs	r3, #2
 80011fe:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	f003 0320 	and.w	r3, r3, #32
 8001206:	2b00      	cmp	r3, #0
 8001208:	d008      	beq.n	800121c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800120a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120c:	015a      	lsls	r2, r3, #5
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	4413      	add	r3, r2
 8001212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001216:	461a      	mov	r2, r3
 8001218:	2320      	movs	r3, #32
 800121a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d009      	beq.n	800123a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001228:	015a      	lsls	r2, r3, #5
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	4413      	add	r3, r2
 800122e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001232:	461a      	mov	r2, r3
 8001234:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001238:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800123a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123c:	3301      	adds	r3, #1
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001242:	085b      	lsrs	r3, r3, #1
 8001244:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001248:	2b00      	cmp	r3, #0
 800124a:	f47f af62 	bne.w	8001112 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4618      	mov	r0, r3
 8001254:	f003 fbfa 	bl	8004a4c <USB_ReadInterrupts>
 8001258:	4603      	mov	r3, r0
 800125a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800125e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001262:	f040 80a4 	bne.w	80013ae <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4618      	mov	r0, r3
 800126c:	f003 fc1b 	bl	8004aa6 <USB_ReadDevAllInEpInterrupt>
 8001270:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001272:	2300      	movs	r3, #0
 8001274:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001276:	e096      	b.n	80013a6 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	2b00      	cmp	r3, #0
 8001280:	f000 808b 	beq.w	800139a <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800128a:	b2d2      	uxtb	r2, r2
 800128c:	4611      	mov	r1, r2
 800128e:	4618      	mov	r0, r3
 8001290:	f003 fc41 	bl	8004b16 <USB_ReadDevInEPInterrupt>
 8001294:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	f003 0301 	and.w	r3, r3, #1
 800129c:	2b00      	cmp	r3, #0
 800129e:	d020      	beq.n	80012e2 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80012a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a2:	f003 030f 	and.w	r3, r3, #15
 80012a6:	2201      	movs	r2, #1
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	43db      	mvns	r3, r3
 80012ba:	69f9      	ldr	r1, [r7, #28]
 80012bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80012c0:	4013      	ands	r3, r2
 80012c2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80012c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c6:	015a      	lsls	r2, r3, #5
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	4413      	add	r3, r2
 80012cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80012d0:	461a      	mov	r2, r3
 80012d2:	2301      	movs	r3, #1
 80012d4:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80012d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	4619      	mov	r1, r3
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f005 fa3a 	bl	8006756 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	f003 0308 	and.w	r3, r3, #8
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d008      	beq.n	80012fe <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80012ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ee:	015a      	lsls	r2, r3, #5
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	4413      	add	r3, r2
 80012f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80012f8:	461a      	mov	r2, r3
 80012fa:	2308      	movs	r3, #8
 80012fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	f003 0310 	and.w	r3, r3, #16
 8001304:	2b00      	cmp	r3, #0
 8001306:	d008      	beq.n	800131a <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130a:	015a      	lsls	r2, r3, #5
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	4413      	add	r3, r2
 8001310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001314:	461a      	mov	r2, r3
 8001316:	2310      	movs	r3, #16
 8001318:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001320:	2b00      	cmp	r3, #0
 8001322:	d008      	beq.n	8001336 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001326:	015a      	lsls	r2, r3, #5
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	4413      	add	r3, r2
 800132c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001330:	461a      	mov	r2, r3
 8001332:	2340      	movs	r3, #64	; 0x40
 8001334:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	f003 0302 	and.w	r3, r3, #2
 800133c:	2b00      	cmp	r3, #0
 800133e:	d023      	beq.n	8001388 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001340:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001342:	6a38      	ldr	r0, [r7, #32]
 8001344:	f002 fc08 	bl	8003b58 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800134a:	4613      	mov	r3, r2
 800134c:	00db      	lsls	r3, r3, #3
 800134e:	4413      	add	r3, r2
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	3338      	adds	r3, #56	; 0x38
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	4413      	add	r3, r2
 8001358:	3304      	adds	r3, #4
 800135a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	78db      	ldrb	r3, [r3, #3]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d108      	bne.n	8001376 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	2200      	movs	r2, #0
 8001368:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800136a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136c:	b2db      	uxtb	r3, r3
 800136e:	4619      	mov	r1, r3
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f005 fa97 	bl	80068a4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001378:	015a      	lsls	r2, r3, #5
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	4413      	add	r3, r2
 800137e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001382:	461a      	mov	r2, r3
 8001384:	2302      	movs	r3, #2
 8001386:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800138e:	2b00      	cmp	r3, #0
 8001390:	d003      	beq.n	800139a <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001392:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f000 fcd2 	bl	8001d3e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800139a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139c:	3301      	adds	r3, #1
 800139e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80013a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013a2:	085b      	lsrs	r3, r3, #1
 80013a4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80013a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	f47f af65 	bne.w	8001278 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f003 fb4a 	bl	8004a4c <USB_ReadInterrupts>
 80013b8:	4603      	mov	r3, r0
 80013ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80013be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80013c2:	d122      	bne.n	800140a <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	69fa      	ldr	r2, [r7, #28]
 80013ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80013d2:	f023 0301 	bic.w	r3, r3, #1
 80013d6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d108      	bne.n	80013f4 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2200      	movs	r2, #0
 80013e6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80013ea:	2100      	movs	r1, #0
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f005 fcb7 	bl	8006d60 <HAL_PCDEx_LPM_Callback>
 80013f2:	e002      	b.n	80013fa <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f005 fa1b 	bl	8006830 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	695a      	ldr	r2, [r3, #20]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001408:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4618      	mov	r0, r3
 8001410:	f003 fb1c 	bl	8004a4c <USB_ReadInterrupts>
 8001414:	4603      	mov	r3, r0
 8001416:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800141a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800141e:	d112      	bne.n	8001446 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	f003 0301 	and.w	r3, r3, #1
 800142c:	2b01      	cmp	r3, #1
 800142e:	d102      	bne.n	8001436 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f005 f9d7 	bl	80067e4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	695a      	ldr	r2, [r3, #20]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001444:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4618      	mov	r0, r3
 800144c:	f003 fafe 	bl	8004a4c <USB_ReadInterrupts>
 8001450:	4603      	mov	r3, r0
 8001452:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001456:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800145a:	d121      	bne.n	80014a0 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	695a      	ldr	r2, [r3, #20]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800146a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001472:	2b00      	cmp	r3, #0
 8001474:	d111      	bne.n	800149a <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2201      	movs	r2, #1
 800147a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001484:	089b      	lsrs	r3, r3, #2
 8001486:	f003 020f 	and.w	r2, r3, #15
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001490:	2101      	movs	r1, #1
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f005 fc64 	bl	8006d60 <HAL_PCDEx_LPM_Callback>
 8001498:	e002      	b.n	80014a0 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f005 f9a2 	bl	80067e4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f003 fad1 	bl	8004a4c <USB_ReadInterrupts>
 80014aa:	4603      	mov	r3, r0
 80014ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014b4:	f040 80b5 	bne.w	8001622 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	69fa      	ldr	r2, [r7, #28]
 80014c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80014c6:	f023 0301 	bic.w	r3, r3, #1
 80014ca:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2110      	movs	r1, #16
 80014d2:	4618      	mov	r0, r3
 80014d4:	f002 fb40 	bl	8003b58 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014d8:	2300      	movs	r3, #0
 80014da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014dc:	e046      	b.n	800156c <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80014de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014e0:	015a      	lsls	r2, r3, #5
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	4413      	add	r3, r2
 80014e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014ea:	461a      	mov	r2, r3
 80014ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80014f0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80014f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014f4:	015a      	lsls	r2, r3, #5
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	4413      	add	r3, r2
 80014fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001502:	0151      	lsls	r1, r2, #5
 8001504:	69fa      	ldr	r2, [r7, #28]
 8001506:	440a      	add	r2, r1
 8001508:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800150c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001510:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001514:	015a      	lsls	r2, r3, #5
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	4413      	add	r3, r2
 800151a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800151e:	461a      	mov	r2, r3
 8001520:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001524:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001528:	015a      	lsls	r2, r3, #5
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	4413      	add	r3, r2
 800152e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001536:	0151      	lsls	r1, r2, #5
 8001538:	69fa      	ldr	r2, [r7, #28]
 800153a:	440a      	add	r2, r1
 800153c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001540:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001544:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001548:	015a      	lsls	r2, r3, #5
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	4413      	add	r3, r2
 800154e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001556:	0151      	lsls	r1, r2, #5
 8001558:	69fa      	ldr	r2, [r7, #28]
 800155a:	440a      	add	r2, r1
 800155c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001560:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001564:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001568:	3301      	adds	r3, #1
 800156a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001572:	429a      	cmp	r2, r3
 8001574:	d3b3      	bcc.n	80014de <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	69fa      	ldr	r2, [r7, #28]
 8001580:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001584:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001588:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	2b00      	cmp	r3, #0
 8001590:	d016      	beq.n	80015c0 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001598:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800159c:	69fa      	ldr	r2, [r7, #28]
 800159e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015a2:	f043 030b 	orr.w	r3, r3, #11
 80015a6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b2:	69fa      	ldr	r2, [r7, #28]
 80015b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015b8:	f043 030b 	orr.w	r3, r3, #11
 80015bc:	6453      	str	r3, [r2, #68]	; 0x44
 80015be:	e015      	b.n	80015ec <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015c6:	695b      	ldr	r3, [r3, #20]
 80015c8:	69fa      	ldr	r2, [r7, #28]
 80015ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015d2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80015d6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015de:	691b      	ldr	r3, [r3, #16]
 80015e0:	69fa      	ldr	r2, [r7, #28]
 80015e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015e6:	f043 030b 	orr.w	r3, r3, #11
 80015ea:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	69fa      	ldr	r2, [r7, #28]
 80015f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015fa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80015fe:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800160a:	4619      	mov	r1, r3
 800160c:	4610      	mov	r0, r2
 800160e:	f003 fae1 	bl	8004bd4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	695a      	ldr	r2, [r3, #20]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001620:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f003 fa10 	bl	8004a4c <USB_ReadInterrupts>
 800162c:	4603      	mov	r3, r0
 800162e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001632:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001636:	d124      	bne.n	8001682 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4618      	mov	r0, r3
 800163e:	f003 faa6 	bl	8004b8e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4618      	mov	r0, r3
 8001648:	f002 fb03 	bl	8003c52 <USB_GetDevSpeed>
 800164c:	4603      	mov	r3, r0
 800164e:	461a      	mov	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681c      	ldr	r4, [r3, #0]
 8001658:	f001 fad4 	bl	8002c04 <HAL_RCC_GetHCLKFreq>
 800165c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001662:	b2db      	uxtb	r3, r3
 8001664:	461a      	mov	r2, r3
 8001666:	4620      	mov	r0, r4
 8001668:	f002 f820 	bl	80036ac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f005 f89a 	bl	80067a6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	695a      	ldr	r2, [r3, #20]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001680:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4618      	mov	r0, r3
 8001688:	f003 f9e0 	bl	8004a4c <USB_ReadInterrupts>
 800168c:	4603      	mov	r3, r0
 800168e:	f003 0308 	and.w	r3, r3, #8
 8001692:	2b08      	cmp	r3, #8
 8001694:	d10a      	bne.n	80016ac <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f005 f877 	bl	800678a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	695a      	ldr	r2, [r3, #20]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f002 0208 	and.w	r2, r2, #8
 80016aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f003 f9cb 	bl	8004a4c <USB_ReadInterrupts>
 80016b6:	4603      	mov	r3, r0
 80016b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016bc:	2b80      	cmp	r3, #128	; 0x80
 80016be:	d122      	bne.n	8001706 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80016c0:	6a3b      	ldr	r3, [r7, #32]
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80016c8:	6a3b      	ldr	r3, [r7, #32]
 80016ca:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80016cc:	2301      	movs	r3, #1
 80016ce:	627b      	str	r3, [r7, #36]	; 0x24
 80016d0:	e014      	b.n	80016fc <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80016d2:	6879      	ldr	r1, [r7, #4]
 80016d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016d6:	4613      	mov	r3, r2
 80016d8:	00db      	lsls	r3, r3, #3
 80016da:	4413      	add	r3, r2
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	440b      	add	r3, r1
 80016e0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d105      	bne.n	80016f6 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80016ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	4619      	mov	r1, r3
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f000 faf3 	bl	8001cdc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80016f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f8:	3301      	adds	r3, #1
 80016fa:	627b      	str	r3, [r7, #36]	; 0x24
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001702:	429a      	cmp	r2, r3
 8001704:	d3e5      	bcc.n	80016d2 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4618      	mov	r0, r3
 800170c:	f003 f99e 	bl	8004a4c <USB_ReadInterrupts>
 8001710:	4603      	mov	r3, r0
 8001712:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001716:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800171a:	d13b      	bne.n	8001794 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800171c:	2301      	movs	r3, #1
 800171e:	627b      	str	r3, [r7, #36]	; 0x24
 8001720:	e02b      	b.n	800177a <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001724:	015a      	lsls	r2, r3, #5
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	4413      	add	r3, r2
 800172a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001732:	6879      	ldr	r1, [r7, #4]
 8001734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001736:	4613      	mov	r3, r2
 8001738:	00db      	lsls	r3, r3, #3
 800173a:	4413      	add	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	440b      	add	r3, r1
 8001740:	3340      	adds	r3, #64	; 0x40
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d115      	bne.n	8001774 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001748:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800174a:	2b00      	cmp	r3, #0
 800174c:	da12      	bge.n	8001774 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800174e:	6879      	ldr	r1, [r7, #4]
 8001750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001752:	4613      	mov	r3, r2
 8001754:	00db      	lsls	r3, r3, #3
 8001756:	4413      	add	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	440b      	add	r3, r1
 800175c:	333f      	adds	r3, #63	; 0x3f
 800175e:	2201      	movs	r2, #1
 8001760:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001764:	b2db      	uxtb	r3, r3
 8001766:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800176a:	b2db      	uxtb	r3, r3
 800176c:	4619      	mov	r1, r3
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f000 fab4 	bl	8001cdc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001776:	3301      	adds	r3, #1
 8001778:	627b      	str	r3, [r7, #36]	; 0x24
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001780:	429a      	cmp	r2, r3
 8001782:	d3ce      	bcc.n	8001722 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	695a      	ldr	r2, [r3, #20]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001792:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4618      	mov	r0, r3
 800179a:	f003 f957 	bl	8004a4c <USB_ReadInterrupts>
 800179e:	4603      	mov	r3, r0
 80017a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80017a8:	d155      	bne.n	8001856 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80017aa:	2301      	movs	r3, #1
 80017ac:	627b      	str	r3, [r7, #36]	; 0x24
 80017ae:	e045      	b.n	800183c <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80017b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b2:	015a      	lsls	r2, r3, #5
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	4413      	add	r3, r2
 80017b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80017c0:	6879      	ldr	r1, [r7, #4]
 80017c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017c4:	4613      	mov	r3, r2
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	4413      	add	r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	440b      	add	r3, r1
 80017ce:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d12e      	bne.n	8001836 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80017d8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80017da:	2b00      	cmp	r3, #0
 80017dc:	da2b      	bge.n	8001836 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80017ea:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d121      	bne.n	8001836 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80017f2:	6879      	ldr	r1, [r7, #4]
 80017f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017f6:	4613      	mov	r3, r2
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	4413      	add	r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	440b      	add	r3, r1
 8001800:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001804:	2201      	movs	r2, #1
 8001806:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001808:	6a3b      	ldr	r3, [r7, #32]
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001810:	6a3b      	ldr	r3, [r7, #32]
 8001812:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001814:	6a3b      	ldr	r3, [r7, #32]
 8001816:	695b      	ldr	r3, [r3, #20]
 8001818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800181c:	2b00      	cmp	r3, #0
 800181e:	d10a      	bne.n	8001836 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	69fa      	ldr	r2, [r7, #28]
 800182a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800182e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001832:	6053      	str	r3, [r2, #4]
            break;
 8001834:	e007      	b.n	8001846 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	3301      	adds	r3, #1
 800183a:	627b      	str	r3, [r7, #36]	; 0x24
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001842:	429a      	cmp	r2, r3
 8001844:	d3b4      	bcc.n	80017b0 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	695a      	ldr	r2, [r3, #20]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001854:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4618      	mov	r0, r3
 800185c:	f003 f8f6 	bl	8004a4c <USB_ReadInterrupts>
 8001860:	4603      	mov	r3, r0
 8001862:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800186a:	d10a      	bne.n	8001882 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f005 f82b 	bl	80068c8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	695a      	ldr	r2, [r3, #20]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001880:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f003 f8e0 	bl	8004a4c <USB_ReadInterrupts>
 800188c:	4603      	mov	r3, r0
 800188e:	f003 0304 	and.w	r3, r3, #4
 8001892:	2b04      	cmp	r3, #4
 8001894:	d115      	bne.n	80018c2 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	f003 0304 	and.w	r3, r3, #4
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d002      	beq.n	80018ae <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f005 f81b 	bl	80068e4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	6859      	ldr	r1, [r3, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	430a      	orrs	r2, r1
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	e000      	b.n	80018c2 <HAL_PCD_IRQHandler+0x920>
      return;
 80018c0:	bf00      	nop
    }
  }
}
 80018c2:	3734      	adds	r7, #52	; 0x34
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd90      	pop	{r4, r7, pc}

080018c8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	460b      	mov	r3, r1
 80018d2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d101      	bne.n	80018e2 <HAL_PCD_SetAddress+0x1a>
 80018de:	2302      	movs	r3, #2
 80018e0:	e013      	b.n	800190a <HAL_PCD_SetAddress+0x42>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2201      	movs	r2, #1
 80018e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	78fa      	ldrb	r2, [r7, #3]
 80018ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	78fa      	ldrb	r2, [r7, #3]
 80018f8:	4611      	mov	r1, r2
 80018fa:	4618      	mov	r0, r3
 80018fc:	f003 f83e 	bl	800497c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b084      	sub	sp, #16
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
 800191a:	4608      	mov	r0, r1
 800191c:	4611      	mov	r1, r2
 800191e:	461a      	mov	r2, r3
 8001920:	4603      	mov	r3, r0
 8001922:	70fb      	strb	r3, [r7, #3]
 8001924:	460b      	mov	r3, r1
 8001926:	803b      	strh	r3, [r7, #0]
 8001928:	4613      	mov	r3, r2
 800192a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800192c:	2300      	movs	r3, #0
 800192e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001930:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001934:	2b00      	cmp	r3, #0
 8001936:	da0f      	bge.n	8001958 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001938:	78fb      	ldrb	r3, [r7, #3]
 800193a:	f003 020f 	and.w	r2, r3, #15
 800193e:	4613      	mov	r3, r2
 8001940:	00db      	lsls	r3, r3, #3
 8001942:	4413      	add	r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	3338      	adds	r3, #56	; 0x38
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	4413      	add	r3, r2
 800194c:	3304      	adds	r3, #4
 800194e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2201      	movs	r2, #1
 8001954:	705a      	strb	r2, [r3, #1]
 8001956:	e00f      	b.n	8001978 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001958:	78fb      	ldrb	r3, [r7, #3]
 800195a:	f003 020f 	and.w	r2, r3, #15
 800195e:	4613      	mov	r3, r2
 8001960:	00db      	lsls	r3, r3, #3
 8001962:	4413      	add	r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	4413      	add	r3, r2
 800196e:	3304      	adds	r3, #4
 8001970:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2200      	movs	r2, #0
 8001976:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001978:	78fb      	ldrb	r3, [r7, #3]
 800197a:	f003 030f 	and.w	r3, r3, #15
 800197e:	b2da      	uxtb	r2, r3
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001984:	883a      	ldrh	r2, [r7, #0]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	78ba      	ldrb	r2, [r7, #2]
 800198e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	785b      	ldrb	r3, [r3, #1]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d004      	beq.n	80019a2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	b29a      	uxth	r2, r3
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80019a2:	78bb      	ldrb	r3, [r7, #2]
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d102      	bne.n	80019ae <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2200      	movs	r2, #0
 80019ac:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d101      	bne.n	80019bc <HAL_PCD_EP_Open+0xaa>
 80019b8:	2302      	movs	r3, #2
 80019ba:	e00e      	b.n	80019da <HAL_PCD_EP_Open+0xc8>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	68f9      	ldr	r1, [r7, #12]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f002 f960 	bl	8003c90 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80019d8:	7afb      	ldrb	r3, [r7, #11]
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b084      	sub	sp, #16
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
 80019ea:	460b      	mov	r3, r1
 80019ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80019ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	da0f      	bge.n	8001a16 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019f6:	78fb      	ldrb	r3, [r7, #3]
 80019f8:	f003 020f 	and.w	r2, r3, #15
 80019fc:	4613      	mov	r3, r2
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	4413      	add	r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	3338      	adds	r3, #56	; 0x38
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	4413      	add	r3, r2
 8001a0a:	3304      	adds	r3, #4
 8001a0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2201      	movs	r2, #1
 8001a12:	705a      	strb	r2, [r3, #1]
 8001a14:	e00f      	b.n	8001a36 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a16:	78fb      	ldrb	r3, [r7, #3]
 8001a18:	f003 020f 	and.w	r2, r3, #15
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	4413      	add	r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	3304      	adds	r3, #4
 8001a2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2200      	movs	r2, #0
 8001a34:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001a36:	78fb      	ldrb	r3, [r7, #3]
 8001a38:	f003 030f 	and.w	r3, r3, #15
 8001a3c:	b2da      	uxtb	r2, r3
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d101      	bne.n	8001a50 <HAL_PCD_EP_Close+0x6e>
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	e00e      	b.n	8001a6e <HAL_PCD_EP_Close+0x8c>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	68f9      	ldr	r1, [r7, #12]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f002 f99e 	bl	8003da0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b086      	sub	sp, #24
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	60f8      	str	r0, [r7, #12]
 8001a7e:	607a      	str	r2, [r7, #4]
 8001a80:	603b      	str	r3, [r7, #0]
 8001a82:	460b      	mov	r3, r1
 8001a84:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a86:	7afb      	ldrb	r3, [r7, #11]
 8001a88:	f003 020f 	and.w	r2, r3, #15
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	4413      	add	r3, r2
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001a98:	68fa      	ldr	r2, [r7, #12]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	683a      	ldr	r2, [r7, #0]
 8001aaa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ab8:	7afb      	ldrb	r3, [r7, #11]
 8001aba:	f003 030f 	and.w	r3, r3, #15
 8001abe:	b2da      	uxtb	r2, r3
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ac4:	7afb      	ldrb	r3, [r7, #11]
 8001ac6:	f003 030f 	and.w	r3, r3, #15
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d106      	bne.n	8001adc <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	6979      	ldr	r1, [r7, #20]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f002 fc1f 	bl	8004318 <USB_EP0StartXfer>
 8001ada:	e005      	b.n	8001ae8 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	6979      	ldr	r1, [r7, #20]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f002 fa38 	bl	8003f58 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3718      	adds	r7, #24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b086      	sub	sp, #24
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	60f8      	str	r0, [r7, #12]
 8001afa:	607a      	str	r2, [r7, #4]
 8001afc:	603b      	str	r3, [r7, #0]
 8001afe:	460b      	mov	r3, r1
 8001b00:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b02:	7afb      	ldrb	r3, [r7, #11]
 8001b04:	f003 020f 	and.w	r2, r3, #15
 8001b08:	4613      	mov	r3, r2
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	4413      	add	r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	3338      	adds	r3, #56	; 0x38
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	4413      	add	r3, r2
 8001b16:	3304      	adds	r3, #4
 8001b18:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	683a      	ldr	r2, [r7, #0]
 8001b24:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b32:	7afb      	ldrb	r3, [r7, #11]
 8001b34:	f003 030f 	and.w	r3, r3, #15
 8001b38:	b2da      	uxtb	r2, r3
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b3e:	7afb      	ldrb	r3, [r7, #11]
 8001b40:	f003 030f 	and.w	r3, r3, #15
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d106      	bne.n	8001b56 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6979      	ldr	r1, [r7, #20]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f002 fbe2 	bl	8004318 <USB_EP0StartXfer>
 8001b54:	e005      	b.n	8001b62 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	6979      	ldr	r1, [r7, #20]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f002 f9fb 	bl	8003f58 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3718      	adds	r7, #24
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	460b      	mov	r3, r1
 8001b76:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001b78:	78fb      	ldrb	r3, [r7, #3]
 8001b7a:	f003 020f 	and.w	r2, r3, #15
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d901      	bls.n	8001b8a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e04e      	b.n	8001c28 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	da0f      	bge.n	8001bb2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b92:	78fb      	ldrb	r3, [r7, #3]
 8001b94:	f003 020f 	and.w	r2, r3, #15
 8001b98:	4613      	mov	r3, r2
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	4413      	add	r3, r2
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	3338      	adds	r3, #56	; 0x38
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	3304      	adds	r3, #4
 8001ba8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2201      	movs	r2, #1
 8001bae:	705a      	strb	r2, [r3, #1]
 8001bb0:	e00d      	b.n	8001bce <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001bb2:	78fa      	ldrb	r2, [r7, #3]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	00db      	lsls	r3, r3, #3
 8001bb8:	4413      	add	r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	3304      	adds	r3, #4
 8001bc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bd4:	78fb      	ldrb	r3, [r7, #3]
 8001bd6:	f003 030f 	and.w	r3, r3, #15
 8001bda:	b2da      	uxtb	r2, r3
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d101      	bne.n	8001bee <HAL_PCD_EP_SetStall+0x82>
 8001bea:	2302      	movs	r3, #2
 8001bec:	e01c      	b.n	8001c28 <HAL_PCD_EP_SetStall+0xbc>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	68f9      	ldr	r1, [r7, #12]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f002 fde9 	bl	80047d4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c02:	78fb      	ldrb	r3, [r7, #3]
 8001c04:	f003 030f 	and.w	r3, r3, #15
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d108      	bne.n	8001c1e <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001c16:	4619      	mov	r1, r3
 8001c18:	4610      	mov	r0, r2
 8001c1a:	f002 ffdb 	bl	8004bd4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3710      	adds	r7, #16
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001c3c:	78fb      	ldrb	r3, [r7, #3]
 8001c3e:	f003 020f 	and.w	r2, r3, #15
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d901      	bls.n	8001c4e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e042      	b.n	8001cd4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	da0f      	bge.n	8001c76 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c56:	78fb      	ldrb	r3, [r7, #3]
 8001c58:	f003 020f 	and.w	r2, r3, #15
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	4413      	add	r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	3338      	adds	r3, #56	; 0x38
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	4413      	add	r3, r2
 8001c6a:	3304      	adds	r3, #4
 8001c6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2201      	movs	r2, #1
 8001c72:	705a      	strb	r2, [r3, #1]
 8001c74:	e00f      	b.n	8001c96 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c76:	78fb      	ldrb	r3, [r7, #3]
 8001c78:	f003 020f 	and.w	r2, r3, #15
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	00db      	lsls	r3, r3, #3
 8001c80:	4413      	add	r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	3304      	adds	r3, #4
 8001c8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2200      	movs	r2, #0
 8001c94:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c9c:	78fb      	ldrb	r3, [r7, #3]
 8001c9e:	f003 030f 	and.w	r3, r3, #15
 8001ca2:	b2da      	uxtb	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d101      	bne.n	8001cb6 <HAL_PCD_EP_ClrStall+0x86>
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	e00e      	b.n	8001cd4 <HAL_PCD_EP_ClrStall+0xa4>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68f9      	ldr	r1, [r7, #12]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f002 fdf3 	bl	80048b0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3710      	adds	r7, #16
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001ce8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	da0c      	bge.n	8001d0a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cf0:	78fb      	ldrb	r3, [r7, #3]
 8001cf2:	f003 020f 	and.w	r2, r3, #15
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	4413      	add	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	3338      	adds	r3, #56	; 0x38
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	4413      	add	r3, r2
 8001d04:	3304      	adds	r3, #4
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	e00c      	b.n	8001d24 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d0a:	78fb      	ldrb	r3, [r7, #3]
 8001d0c:	f003 020f 	and.w	r2, r3, #15
 8001d10:	4613      	mov	r3, r2
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	4413      	add	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	4413      	add	r3, r2
 8001d20:	3304      	adds	r3, #4
 8001d22:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	68f9      	ldr	r1, [r7, #12]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f002 fc16 	bl	800455c <USB_EPStopXfer>
 8001d30:	4603      	mov	r3, r0
 8001d32:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001d34:	7afb      	ldrb	r3, [r7, #11]
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b088      	sub	sp, #32
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
 8001d46:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	4613      	mov	r3, r2
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	4413      	add	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	3338      	adds	r3, #56	; 0x38
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	4413      	add	r3, r2
 8001d62:	3304      	adds	r3, #4
 8001d64:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	6a1a      	ldr	r2, [r3, #32]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	699b      	ldr	r3, [r3, #24]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d901      	bls.n	8001d76 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e067      	b.n	8001e46 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	699a      	ldr	r2, [r3, #24]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6a1b      	ldr	r3, [r3, #32]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	69fa      	ldr	r2, [r7, #28]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d902      	bls.n	8001d92 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	3303      	adds	r3, #3
 8001d96:	089b      	lsrs	r3, r3, #2
 8001d98:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d9a:	e026      	b.n	8001dea <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	699a      	ldr	r2, [r3, #24]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	69fa      	ldr	r2, [r7, #28]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d902      	bls.n	8001db8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	3303      	adds	r3, #3
 8001dbc:	089b      	lsrs	r3, r3, #2
 8001dbe:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6919      	ldr	r1, [r3, #16]
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	b2da      	uxtb	r2, r3
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	6978      	ldr	r0, [r7, #20]
 8001dce:	f002 fc6f 	bl	80046b0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	691a      	ldr	r2, [r3, #16]
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	441a      	add	r2, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	6a1a      	ldr	r2, [r3, #32]
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	441a      	add	r2, r3
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	015a      	lsls	r2, r3, #5
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	4413      	add	r3, r2
 8001df2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d809      	bhi.n	8001e14 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6a1a      	ldr	r2, [r3, #32]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d203      	bcs.n	8001e14 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d1c3      	bne.n	8001d9c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	699a      	ldr	r2, [r3, #24]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6a1b      	ldr	r3, [r3, #32]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d811      	bhi.n	8001e44 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	2201      	movs	r2, #1
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	6939      	ldr	r1, [r7, #16]
 8001e3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001e40:	4013      	ands	r3, r2
 8001e42:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3720      	adds	r7, #32
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
	...

08001e50 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	333c      	adds	r3, #60	; 0x3c
 8001e68:	3304      	adds	r3, #4
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	015a      	lsls	r2, r3, #5
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	4413      	add	r3, r2
 8001e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	4a19      	ldr	r2, [pc, #100]	; (8001ee8 <PCD_EP_OutXfrComplete_int+0x98>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d124      	bne.n	8001ed0 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d00a      	beq.n	8001ea6 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	015a      	lsls	r2, r3, #5
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	4413      	add	r3, r2
 8001e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ea2:	6093      	str	r3, [r2, #8]
 8001ea4:	e01a      	b.n	8001edc <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	f003 0320 	and.w	r3, r3, #32
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d008      	beq.n	8001ec2 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	015a      	lsls	r2, r3, #5
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	2320      	movs	r3, #32
 8001ec0:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f004 fc29 	bl	8006720 <HAL_PCD_DataOutStageCallback>
 8001ece:	e005      	b.n	8001edc <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f004 fc22 	bl	8006720 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3718      	adds	r7, #24
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	4f54310a 	.word	0x4f54310a

08001eec <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	333c      	adds	r3, #60	; 0x3c
 8001f04:	3304      	adds	r3, #4
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	015a      	lsls	r2, r3, #5
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	4413      	add	r3, r2
 8001f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	4a0c      	ldr	r2, [pc, #48]	; (8001f50 <PCD_EP_OutSetupPacket_int+0x64>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d90e      	bls.n	8001f40 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d009      	beq.n	8001f40 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	015a      	lsls	r2, r3, #5
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	4413      	add	r3, r2
 8001f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f38:	461a      	mov	r2, r3
 8001f3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f3e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f004 fbdb 	bl	80066fc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3718      	adds	r7, #24
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	4f54300a 	.word	0x4f54300a

08001f54 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	70fb      	strb	r3, [r7, #3]
 8001f60:	4613      	mov	r3, r2
 8001f62:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8001f6c:	78fb      	ldrb	r3, [r7, #3]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d107      	bne.n	8001f82 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001f72:	883b      	ldrh	r3, [r7, #0]
 8001f74:	0419      	lsls	r1, r3, #16
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68ba      	ldr	r2, [r7, #8]
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	629a      	str	r2, [r3, #40]	; 0x28
 8001f80:	e028      	b.n	8001fd4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f88:	0c1b      	lsrs	r3, r3, #16
 8001f8a:	68ba      	ldr	r2, [r7, #8]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001f90:	2300      	movs	r3, #0
 8001f92:	73fb      	strb	r3, [r7, #15]
 8001f94:	e00d      	b.n	8001fb2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	7bfb      	ldrb	r3, [r7, #15]
 8001f9c:	3340      	adds	r3, #64	; 0x40
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	4413      	add	r3, r2
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	0c1b      	lsrs	r3, r3, #16
 8001fa6:	68ba      	ldr	r2, [r7, #8]
 8001fa8:	4413      	add	r3, r2
 8001faa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001fac:	7bfb      	ldrb	r3, [r7, #15]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	73fb      	strb	r3, [r7, #15]
 8001fb2:	7bfa      	ldrb	r2, [r7, #15]
 8001fb4:	78fb      	ldrb	r3, [r7, #3]
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d3ec      	bcc.n	8001f96 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8001fbc:	883b      	ldrh	r3, [r7, #0]
 8001fbe:	0418      	lsls	r0, r3, #16
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6819      	ldr	r1, [r3, #0]
 8001fc4:	78fb      	ldrb	r3, [r7, #3]
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	68ba      	ldr	r2, [r7, #8]
 8001fca:	4302      	orrs	r2, r0
 8001fcc:	3340      	adds	r3, #64	; 0x40
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	440b      	add	r3, r1
 8001fd2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3714      	adds	r7, #20
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr

08001fe2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	b083      	sub	sp, #12
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
 8001fea:	460b      	mov	r3, r1
 8001fec:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	887a      	ldrh	r2, [r7, #2]
 8001ff4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2201      	movs	r2, #1
 8002016:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002032:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002036:	f043 0303 	orr.w	r3, r3, #3
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002050:	4b04      	ldr	r3, [pc, #16]	; (8002064 <HAL_PWREx_GetVoltageRange+0x18>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002058:	4618      	mov	r0, r3
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	40007000 	.word	0x40007000

08002068 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002076:	d130      	bne.n	80020da <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002078:	4b23      	ldr	r3, [pc, #140]	; (8002108 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002080:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002084:	d038      	beq.n	80020f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002086:	4b20      	ldr	r3, [pc, #128]	; (8002108 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800208e:	4a1e      	ldr	r2, [pc, #120]	; (8002108 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002090:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002094:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002096:	4b1d      	ldr	r3, [pc, #116]	; (800210c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2232      	movs	r2, #50	; 0x32
 800209c:	fb02 f303 	mul.w	r3, r2, r3
 80020a0:	4a1b      	ldr	r2, [pc, #108]	; (8002110 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80020a2:	fba2 2303 	umull	r2, r3, r2, r3
 80020a6:	0c9b      	lsrs	r3, r3, #18
 80020a8:	3301      	adds	r3, #1
 80020aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020ac:	e002      	b.n	80020b4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	3b01      	subs	r3, #1
 80020b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020b4:	4b14      	ldr	r3, [pc, #80]	; (8002108 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020b6:	695b      	ldr	r3, [r3, #20]
 80020b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020c0:	d102      	bne.n	80020c8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1f2      	bne.n	80020ae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020c8:	4b0f      	ldr	r3, [pc, #60]	; (8002108 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020ca:	695b      	ldr	r3, [r3, #20]
 80020cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020d4:	d110      	bne.n	80020f8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e00f      	b.n	80020fa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80020da:	4b0b      	ldr	r3, [pc, #44]	; (8002108 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020e6:	d007      	beq.n	80020f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80020e8:	4b07      	ldr	r3, [pc, #28]	; (8002108 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020f0:	4a05      	ldr	r2, [pc, #20]	; (8002108 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020f6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3714      	adds	r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	40007000 	.word	0x40007000
 800210c:	20000000 	.word	0x20000000
 8002110:	431bde83 	.word	0x431bde83

08002114 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002118:	4b05      	ldr	r3, [pc, #20]	; (8002130 <HAL_PWREx_EnableVddUSB+0x1c>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	4a04      	ldr	r2, [pc, #16]	; (8002130 <HAL_PWREx_EnableVddUSB+0x1c>)
 800211e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002122:	6053      	str	r3, [r2, #4]
}
 8002124:	bf00      	nop
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	40007000 	.word	0x40007000

08002134 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b088      	sub	sp, #32
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e3ca      	b.n	80028dc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002146:	4b97      	ldr	r3, [pc, #604]	; (80023a4 <HAL_RCC_OscConfig+0x270>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f003 030c 	and.w	r3, r3, #12
 800214e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002150:	4b94      	ldr	r3, [pc, #592]	; (80023a4 <HAL_RCC_OscConfig+0x270>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	f003 0303 	and.w	r3, r3, #3
 8002158:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0310 	and.w	r3, r3, #16
 8002162:	2b00      	cmp	r3, #0
 8002164:	f000 80e4 	beq.w	8002330 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d007      	beq.n	800217e <HAL_RCC_OscConfig+0x4a>
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	2b0c      	cmp	r3, #12
 8002172:	f040 808b 	bne.w	800228c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	2b01      	cmp	r3, #1
 800217a:	f040 8087 	bne.w	800228c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800217e:	4b89      	ldr	r3, [pc, #548]	; (80023a4 <HAL_RCC_OscConfig+0x270>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d005      	beq.n	8002196 <HAL_RCC_OscConfig+0x62>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e3a2      	b.n	80028dc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a1a      	ldr	r2, [r3, #32]
 800219a:	4b82      	ldr	r3, [pc, #520]	; (80023a4 <HAL_RCC_OscConfig+0x270>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0308 	and.w	r3, r3, #8
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d004      	beq.n	80021b0 <HAL_RCC_OscConfig+0x7c>
 80021a6:	4b7f      	ldr	r3, [pc, #508]	; (80023a4 <HAL_RCC_OscConfig+0x270>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021ae:	e005      	b.n	80021bc <HAL_RCC_OscConfig+0x88>
 80021b0:	4b7c      	ldr	r3, [pc, #496]	; (80023a4 <HAL_RCC_OscConfig+0x270>)
 80021b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021b6:	091b      	lsrs	r3, r3, #4
 80021b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021bc:	4293      	cmp	r3, r2
 80021be:	d223      	bcs.n	8002208 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f000 fd29 	bl	8002c1c <RCC_SetFlashLatencyFromMSIRange>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e383      	b.n	80028dc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021d4:	4b73      	ldr	r3, [pc, #460]	; (80023a4 <HAL_RCC_OscConfig+0x270>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a72      	ldr	r2, [pc, #456]	; (80023a4 <HAL_RCC_OscConfig+0x270>)
 80021da:	f043 0308 	orr.w	r3, r3, #8
 80021de:	6013      	str	r3, [r2, #0]
 80021e0:	4b70      	ldr	r3, [pc, #448]	; (80023a4 <HAL_RCC_OscConfig+0x270>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a1b      	ldr	r3, [r3, #32]
 80021ec:	496d      	ldr	r1, [pc, #436]	; (80023a4 <HAL_RCC_OscConfig+0x270>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021f2:	4b6c      	ldr	r3, [pc, #432]	; (80023a4 <HAL_RCC_OscConfig+0x270>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	69db      	ldr	r3, [r3, #28]
 80021fe:	021b      	lsls	r3, r3, #8
 8002200:	4968      	ldr	r1, [pc, #416]	; (80023a4 <HAL_RCC_OscConfig+0x270>)
 8002202:	4313      	orrs	r3, r2
 8002204:	604b      	str	r3, [r1, #4]
 8002206:	e025      	b.n	8002254 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002208:	4b66      	ldr	r3, [pc, #408]	; (80023a4 <HAL_RCC_OscConfig+0x270>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a65      	ldr	r2, [pc, #404]	; (80023a4 <HAL_RCC_OscConfig+0x270>)
 800220e:	f043 0308 	orr.w	r3, r3, #8
 8002212:	6013      	str	r3, [r2, #0]
 8002214:	4b63      	ldr	r3, [pc, #396]	; (80023a4 <HAL_RCC_OscConfig+0x270>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	4960      	ldr	r1, [pc, #384]	; (80023a4 <HAL_RCC_OscConfig+0x270>)
 8002222:	4313      	orrs	r3, r2
 8002224:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002226:	4b5f      	ldr	r3, [pc, #380]	; (80023a4 <HAL_RCC_OscConfig+0x270>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	69db      	ldr	r3, [r3, #28]
 8002232:	021b      	lsls	r3, r3, #8
 8002234:	495b      	ldr	r1, [pc, #364]	; (80023a4 <HAL_RCC_OscConfig+0x270>)
 8002236:	4313      	orrs	r3, r2
 8002238:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d109      	bne.n	8002254 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	4618      	mov	r0, r3
 8002246:	f000 fce9 	bl	8002c1c <RCC_SetFlashLatencyFromMSIRange>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e343      	b.n	80028dc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002254:	f000 fc4a 	bl	8002aec <HAL_RCC_GetSysClockFreq>
 8002258:	4602      	mov	r2, r0
 800225a:	4b52      	ldr	r3, [pc, #328]	; (80023a4 <HAL_RCC_OscConfig+0x270>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	091b      	lsrs	r3, r3, #4
 8002260:	f003 030f 	and.w	r3, r3, #15
 8002264:	4950      	ldr	r1, [pc, #320]	; (80023a8 <HAL_RCC_OscConfig+0x274>)
 8002266:	5ccb      	ldrb	r3, [r1, r3]
 8002268:	f003 031f 	and.w	r3, r3, #31
 800226c:	fa22 f303 	lsr.w	r3, r2, r3
 8002270:	4a4e      	ldr	r2, [pc, #312]	; (80023ac <HAL_RCC_OscConfig+0x278>)
 8002272:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002274:	4b4e      	ldr	r3, [pc, #312]	; (80023b0 <HAL_RCC_OscConfig+0x27c>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4618      	mov	r0, r3
 800227a:	f7fe fa03 	bl	8000684 <HAL_InitTick>
 800227e:	4603      	mov	r3, r0
 8002280:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002282:	7bfb      	ldrb	r3, [r7, #15]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d052      	beq.n	800232e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002288:	7bfb      	ldrb	r3, [r7, #15]
 800228a:	e327      	b.n	80028dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d032      	beq.n	80022fa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002294:	4b43      	ldr	r3, [pc, #268]	; (80023a4 <HAL_RCC_OscConfig+0x270>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a42      	ldr	r2, [pc, #264]	; (80023a4 <HAL_RCC_OscConfig+0x270>)
 800229a:	f043 0301 	orr.w	r3, r3, #1
 800229e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022a0:	f7fe fa40 	bl	8000724 <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022a8:	f7fe fa3c 	bl	8000724 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e310      	b.n	80028dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022ba:	4b3a      	ldr	r3, [pc, #232]	; (80023a4 <HAL_RCC_OscConfig+0x270>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d0f0      	beq.n	80022a8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022c6:	4b37      	ldr	r3, [pc, #220]	; (80023a4 <HAL_RCC_OscConfig+0x270>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a36      	ldr	r2, [pc, #216]	; (80023a4 <HAL_RCC_OscConfig+0x270>)
 80022cc:	f043 0308 	orr.w	r3, r3, #8
 80022d0:	6013      	str	r3, [r2, #0]
 80022d2:	4b34      	ldr	r3, [pc, #208]	; (80023a4 <HAL_RCC_OscConfig+0x270>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a1b      	ldr	r3, [r3, #32]
 80022de:	4931      	ldr	r1, [pc, #196]	; (80023a4 <HAL_RCC_OscConfig+0x270>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022e4:	4b2f      	ldr	r3, [pc, #188]	; (80023a4 <HAL_RCC_OscConfig+0x270>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	69db      	ldr	r3, [r3, #28]
 80022f0:	021b      	lsls	r3, r3, #8
 80022f2:	492c      	ldr	r1, [pc, #176]	; (80023a4 <HAL_RCC_OscConfig+0x270>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	604b      	str	r3, [r1, #4]
 80022f8:	e01a      	b.n	8002330 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80022fa:	4b2a      	ldr	r3, [pc, #168]	; (80023a4 <HAL_RCC_OscConfig+0x270>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a29      	ldr	r2, [pc, #164]	; (80023a4 <HAL_RCC_OscConfig+0x270>)
 8002300:	f023 0301 	bic.w	r3, r3, #1
 8002304:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002306:	f7fe fa0d 	bl	8000724 <HAL_GetTick>
 800230a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800230c:	e008      	b.n	8002320 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800230e:	f7fe fa09 	bl	8000724 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d901      	bls.n	8002320 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e2dd      	b.n	80028dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002320:	4b20      	ldr	r3, [pc, #128]	; (80023a4 <HAL_RCC_OscConfig+0x270>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1f0      	bne.n	800230e <HAL_RCC_OscConfig+0x1da>
 800232c:	e000      	b.n	8002330 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800232e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	2b00      	cmp	r3, #0
 800233a:	d074      	beq.n	8002426 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	2b08      	cmp	r3, #8
 8002340:	d005      	beq.n	800234e <HAL_RCC_OscConfig+0x21a>
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	2b0c      	cmp	r3, #12
 8002346:	d10e      	bne.n	8002366 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	2b03      	cmp	r3, #3
 800234c:	d10b      	bne.n	8002366 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800234e:	4b15      	ldr	r3, [pc, #84]	; (80023a4 <HAL_RCC_OscConfig+0x270>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d064      	beq.n	8002424 <HAL_RCC_OscConfig+0x2f0>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d160      	bne.n	8002424 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e2ba      	b.n	80028dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800236e:	d106      	bne.n	800237e <HAL_RCC_OscConfig+0x24a>
 8002370:	4b0c      	ldr	r3, [pc, #48]	; (80023a4 <HAL_RCC_OscConfig+0x270>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a0b      	ldr	r2, [pc, #44]	; (80023a4 <HAL_RCC_OscConfig+0x270>)
 8002376:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800237a:	6013      	str	r3, [r2, #0]
 800237c:	e026      	b.n	80023cc <HAL_RCC_OscConfig+0x298>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002386:	d115      	bne.n	80023b4 <HAL_RCC_OscConfig+0x280>
 8002388:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <HAL_RCC_OscConfig+0x270>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a05      	ldr	r2, [pc, #20]	; (80023a4 <HAL_RCC_OscConfig+0x270>)
 800238e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002392:	6013      	str	r3, [r2, #0]
 8002394:	4b03      	ldr	r3, [pc, #12]	; (80023a4 <HAL_RCC_OscConfig+0x270>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a02      	ldr	r2, [pc, #8]	; (80023a4 <HAL_RCC_OscConfig+0x270>)
 800239a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800239e:	6013      	str	r3, [r2, #0]
 80023a0:	e014      	b.n	80023cc <HAL_RCC_OscConfig+0x298>
 80023a2:	bf00      	nop
 80023a4:	40021000 	.word	0x40021000
 80023a8:	080077f0 	.word	0x080077f0
 80023ac:	20000000 	.word	0x20000000
 80023b0:	20000004 	.word	0x20000004
 80023b4:	4ba0      	ldr	r3, [pc, #640]	; (8002638 <HAL_RCC_OscConfig+0x504>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a9f      	ldr	r2, [pc, #636]	; (8002638 <HAL_RCC_OscConfig+0x504>)
 80023ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023be:	6013      	str	r3, [r2, #0]
 80023c0:	4b9d      	ldr	r3, [pc, #628]	; (8002638 <HAL_RCC_OscConfig+0x504>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a9c      	ldr	r2, [pc, #624]	; (8002638 <HAL_RCC_OscConfig+0x504>)
 80023c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d013      	beq.n	80023fc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d4:	f7fe f9a6 	bl	8000724 <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023dc:	f7fe f9a2 	bl	8000724 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b64      	cmp	r3, #100	; 0x64
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e276      	b.n	80028dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023ee:	4b92      	ldr	r3, [pc, #584]	; (8002638 <HAL_RCC_OscConfig+0x504>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d0f0      	beq.n	80023dc <HAL_RCC_OscConfig+0x2a8>
 80023fa:	e014      	b.n	8002426 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023fc:	f7fe f992 	bl	8000724 <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002404:	f7fe f98e 	bl	8000724 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b64      	cmp	r3, #100	; 0x64
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e262      	b.n	80028dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002416:	4b88      	ldr	r3, [pc, #544]	; (8002638 <HAL_RCC_OscConfig+0x504>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d1f0      	bne.n	8002404 <HAL_RCC_OscConfig+0x2d0>
 8002422:	e000      	b.n	8002426 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002424:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d060      	beq.n	80024f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	2b04      	cmp	r3, #4
 8002436:	d005      	beq.n	8002444 <HAL_RCC_OscConfig+0x310>
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	2b0c      	cmp	r3, #12
 800243c:	d119      	bne.n	8002472 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	2b02      	cmp	r3, #2
 8002442:	d116      	bne.n	8002472 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002444:	4b7c      	ldr	r3, [pc, #496]	; (8002638 <HAL_RCC_OscConfig+0x504>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800244c:	2b00      	cmp	r3, #0
 800244e:	d005      	beq.n	800245c <HAL_RCC_OscConfig+0x328>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d101      	bne.n	800245c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e23f      	b.n	80028dc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800245c:	4b76      	ldr	r3, [pc, #472]	; (8002638 <HAL_RCC_OscConfig+0x504>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	691b      	ldr	r3, [r3, #16]
 8002468:	061b      	lsls	r3, r3, #24
 800246a:	4973      	ldr	r1, [pc, #460]	; (8002638 <HAL_RCC_OscConfig+0x504>)
 800246c:	4313      	orrs	r3, r2
 800246e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002470:	e040      	b.n	80024f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d023      	beq.n	80024c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800247a:	4b6f      	ldr	r3, [pc, #444]	; (8002638 <HAL_RCC_OscConfig+0x504>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a6e      	ldr	r2, [pc, #440]	; (8002638 <HAL_RCC_OscConfig+0x504>)
 8002480:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002484:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002486:	f7fe f94d 	bl	8000724 <HAL_GetTick>
 800248a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800248c:	e008      	b.n	80024a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800248e:	f7fe f949 	bl	8000724 <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	2b02      	cmp	r3, #2
 800249a:	d901      	bls.n	80024a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e21d      	b.n	80028dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024a0:	4b65      	ldr	r3, [pc, #404]	; (8002638 <HAL_RCC_OscConfig+0x504>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d0f0      	beq.n	800248e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ac:	4b62      	ldr	r3, [pc, #392]	; (8002638 <HAL_RCC_OscConfig+0x504>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	061b      	lsls	r3, r3, #24
 80024ba:	495f      	ldr	r1, [pc, #380]	; (8002638 <HAL_RCC_OscConfig+0x504>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	604b      	str	r3, [r1, #4]
 80024c0:	e018      	b.n	80024f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024c2:	4b5d      	ldr	r3, [pc, #372]	; (8002638 <HAL_RCC_OscConfig+0x504>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a5c      	ldr	r2, [pc, #368]	; (8002638 <HAL_RCC_OscConfig+0x504>)
 80024c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ce:	f7fe f929 	bl	8000724 <HAL_GetTick>
 80024d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024d4:	e008      	b.n	80024e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024d6:	f7fe f925 	bl	8000724 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e1f9      	b.n	80028dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024e8:	4b53      	ldr	r3, [pc, #332]	; (8002638 <HAL_RCC_OscConfig+0x504>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d1f0      	bne.n	80024d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0308 	and.w	r3, r3, #8
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d03c      	beq.n	800257a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	695b      	ldr	r3, [r3, #20]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d01c      	beq.n	8002542 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002508:	4b4b      	ldr	r3, [pc, #300]	; (8002638 <HAL_RCC_OscConfig+0x504>)
 800250a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800250e:	4a4a      	ldr	r2, [pc, #296]	; (8002638 <HAL_RCC_OscConfig+0x504>)
 8002510:	f043 0301 	orr.w	r3, r3, #1
 8002514:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002518:	f7fe f904 	bl	8000724 <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002520:	f7fe f900 	bl	8000724 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e1d4      	b.n	80028dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002532:	4b41      	ldr	r3, [pc, #260]	; (8002638 <HAL_RCC_OscConfig+0x504>)
 8002534:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d0ef      	beq.n	8002520 <HAL_RCC_OscConfig+0x3ec>
 8002540:	e01b      	b.n	800257a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002542:	4b3d      	ldr	r3, [pc, #244]	; (8002638 <HAL_RCC_OscConfig+0x504>)
 8002544:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002548:	4a3b      	ldr	r2, [pc, #236]	; (8002638 <HAL_RCC_OscConfig+0x504>)
 800254a:	f023 0301 	bic.w	r3, r3, #1
 800254e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002552:	f7fe f8e7 	bl	8000724 <HAL_GetTick>
 8002556:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002558:	e008      	b.n	800256c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800255a:	f7fe f8e3 	bl	8000724 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e1b7      	b.n	80028dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800256c:	4b32      	ldr	r3, [pc, #200]	; (8002638 <HAL_RCC_OscConfig+0x504>)
 800256e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1ef      	bne.n	800255a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0304 	and.w	r3, r3, #4
 8002582:	2b00      	cmp	r3, #0
 8002584:	f000 80a6 	beq.w	80026d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002588:	2300      	movs	r3, #0
 800258a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800258c:	4b2a      	ldr	r3, [pc, #168]	; (8002638 <HAL_RCC_OscConfig+0x504>)
 800258e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d10d      	bne.n	80025b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002598:	4b27      	ldr	r3, [pc, #156]	; (8002638 <HAL_RCC_OscConfig+0x504>)
 800259a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800259c:	4a26      	ldr	r2, [pc, #152]	; (8002638 <HAL_RCC_OscConfig+0x504>)
 800259e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025a2:	6593      	str	r3, [r2, #88]	; 0x58
 80025a4:	4b24      	ldr	r3, [pc, #144]	; (8002638 <HAL_RCC_OscConfig+0x504>)
 80025a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ac:	60bb      	str	r3, [r7, #8]
 80025ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025b0:	2301      	movs	r3, #1
 80025b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025b4:	4b21      	ldr	r3, [pc, #132]	; (800263c <HAL_RCC_OscConfig+0x508>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d118      	bne.n	80025f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025c0:	4b1e      	ldr	r3, [pc, #120]	; (800263c <HAL_RCC_OscConfig+0x508>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a1d      	ldr	r2, [pc, #116]	; (800263c <HAL_RCC_OscConfig+0x508>)
 80025c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025cc:	f7fe f8aa 	bl	8000724 <HAL_GetTick>
 80025d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025d4:	f7fe f8a6 	bl	8000724 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e17a      	b.n	80028dc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025e6:	4b15      	ldr	r3, [pc, #84]	; (800263c <HAL_RCC_OscConfig+0x508>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d0f0      	beq.n	80025d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d108      	bne.n	800260c <HAL_RCC_OscConfig+0x4d8>
 80025fa:	4b0f      	ldr	r3, [pc, #60]	; (8002638 <HAL_RCC_OscConfig+0x504>)
 80025fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002600:	4a0d      	ldr	r2, [pc, #52]	; (8002638 <HAL_RCC_OscConfig+0x504>)
 8002602:	f043 0301 	orr.w	r3, r3, #1
 8002606:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800260a:	e029      	b.n	8002660 <HAL_RCC_OscConfig+0x52c>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	2b05      	cmp	r3, #5
 8002612:	d115      	bne.n	8002640 <HAL_RCC_OscConfig+0x50c>
 8002614:	4b08      	ldr	r3, [pc, #32]	; (8002638 <HAL_RCC_OscConfig+0x504>)
 8002616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800261a:	4a07      	ldr	r2, [pc, #28]	; (8002638 <HAL_RCC_OscConfig+0x504>)
 800261c:	f043 0304 	orr.w	r3, r3, #4
 8002620:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002624:	4b04      	ldr	r3, [pc, #16]	; (8002638 <HAL_RCC_OscConfig+0x504>)
 8002626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800262a:	4a03      	ldr	r2, [pc, #12]	; (8002638 <HAL_RCC_OscConfig+0x504>)
 800262c:	f043 0301 	orr.w	r3, r3, #1
 8002630:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002634:	e014      	b.n	8002660 <HAL_RCC_OscConfig+0x52c>
 8002636:	bf00      	nop
 8002638:	40021000 	.word	0x40021000
 800263c:	40007000 	.word	0x40007000
 8002640:	4b9c      	ldr	r3, [pc, #624]	; (80028b4 <HAL_RCC_OscConfig+0x780>)
 8002642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002646:	4a9b      	ldr	r2, [pc, #620]	; (80028b4 <HAL_RCC_OscConfig+0x780>)
 8002648:	f023 0301 	bic.w	r3, r3, #1
 800264c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002650:	4b98      	ldr	r3, [pc, #608]	; (80028b4 <HAL_RCC_OscConfig+0x780>)
 8002652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002656:	4a97      	ldr	r2, [pc, #604]	; (80028b4 <HAL_RCC_OscConfig+0x780>)
 8002658:	f023 0304 	bic.w	r3, r3, #4
 800265c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d016      	beq.n	8002696 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002668:	f7fe f85c 	bl	8000724 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800266e:	e00a      	b.n	8002686 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002670:	f7fe f858 	bl	8000724 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	f241 3288 	movw	r2, #5000	; 0x1388
 800267e:	4293      	cmp	r3, r2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e12a      	b.n	80028dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002686:	4b8b      	ldr	r3, [pc, #556]	; (80028b4 <HAL_RCC_OscConfig+0x780>)
 8002688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d0ed      	beq.n	8002670 <HAL_RCC_OscConfig+0x53c>
 8002694:	e015      	b.n	80026c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002696:	f7fe f845 	bl	8000724 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800269c:	e00a      	b.n	80026b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800269e:	f7fe f841 	bl	8000724 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e113      	b.n	80028dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026b4:	4b7f      	ldr	r3, [pc, #508]	; (80028b4 <HAL_RCC_OscConfig+0x780>)
 80026b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1ed      	bne.n	800269e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026c2:	7ffb      	ldrb	r3, [r7, #31]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d105      	bne.n	80026d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026c8:	4b7a      	ldr	r3, [pc, #488]	; (80028b4 <HAL_RCC_OscConfig+0x780>)
 80026ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026cc:	4a79      	ldr	r2, [pc, #484]	; (80028b4 <HAL_RCC_OscConfig+0x780>)
 80026ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026d2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f000 80fe 	beq.w	80028da <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	f040 80d0 	bne.w	8002888 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80026e8:	4b72      	ldr	r3, [pc, #456]	; (80028b4 <HAL_RCC_OscConfig+0x780>)
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	f003 0203 	and.w	r2, r3, #3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d130      	bne.n	800275e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002706:	3b01      	subs	r3, #1
 8002708:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800270a:	429a      	cmp	r2, r3
 800270c:	d127      	bne.n	800275e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002718:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800271a:	429a      	cmp	r2, r3
 800271c:	d11f      	bne.n	800275e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002728:	2a07      	cmp	r2, #7
 800272a:	bf14      	ite	ne
 800272c:	2201      	movne	r2, #1
 800272e:	2200      	moveq	r2, #0
 8002730:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002732:	4293      	cmp	r3, r2
 8002734:	d113      	bne.n	800275e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002740:	085b      	lsrs	r3, r3, #1
 8002742:	3b01      	subs	r3, #1
 8002744:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002746:	429a      	cmp	r2, r3
 8002748:	d109      	bne.n	800275e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002754:	085b      	lsrs	r3, r3, #1
 8002756:	3b01      	subs	r3, #1
 8002758:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800275a:	429a      	cmp	r2, r3
 800275c:	d06e      	beq.n	800283c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	2b0c      	cmp	r3, #12
 8002762:	d069      	beq.n	8002838 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002764:	4b53      	ldr	r3, [pc, #332]	; (80028b4 <HAL_RCC_OscConfig+0x780>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d105      	bne.n	800277c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002770:	4b50      	ldr	r3, [pc, #320]	; (80028b4 <HAL_RCC_OscConfig+0x780>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e0ad      	b.n	80028dc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002780:	4b4c      	ldr	r3, [pc, #304]	; (80028b4 <HAL_RCC_OscConfig+0x780>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a4b      	ldr	r2, [pc, #300]	; (80028b4 <HAL_RCC_OscConfig+0x780>)
 8002786:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800278a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800278c:	f7fd ffca 	bl	8000724 <HAL_GetTick>
 8002790:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002792:	e008      	b.n	80027a6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002794:	f7fd ffc6 	bl	8000724 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e09a      	b.n	80028dc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027a6:	4b43      	ldr	r3, [pc, #268]	; (80028b4 <HAL_RCC_OscConfig+0x780>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1f0      	bne.n	8002794 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027b2:	4b40      	ldr	r3, [pc, #256]	; (80028b4 <HAL_RCC_OscConfig+0x780>)
 80027b4:	68da      	ldr	r2, [r3, #12]
 80027b6:	4b40      	ldr	r3, [pc, #256]	; (80028b8 <HAL_RCC_OscConfig+0x784>)
 80027b8:	4013      	ands	r3, r2
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80027c2:	3a01      	subs	r2, #1
 80027c4:	0112      	lsls	r2, r2, #4
 80027c6:	4311      	orrs	r1, r2
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80027cc:	0212      	lsls	r2, r2, #8
 80027ce:	4311      	orrs	r1, r2
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80027d4:	0852      	lsrs	r2, r2, #1
 80027d6:	3a01      	subs	r2, #1
 80027d8:	0552      	lsls	r2, r2, #21
 80027da:	4311      	orrs	r1, r2
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80027e0:	0852      	lsrs	r2, r2, #1
 80027e2:	3a01      	subs	r2, #1
 80027e4:	0652      	lsls	r2, r2, #25
 80027e6:	4311      	orrs	r1, r2
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80027ec:	0912      	lsrs	r2, r2, #4
 80027ee:	0452      	lsls	r2, r2, #17
 80027f0:	430a      	orrs	r2, r1
 80027f2:	4930      	ldr	r1, [pc, #192]	; (80028b4 <HAL_RCC_OscConfig+0x780>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80027f8:	4b2e      	ldr	r3, [pc, #184]	; (80028b4 <HAL_RCC_OscConfig+0x780>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a2d      	ldr	r2, [pc, #180]	; (80028b4 <HAL_RCC_OscConfig+0x780>)
 80027fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002802:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002804:	4b2b      	ldr	r3, [pc, #172]	; (80028b4 <HAL_RCC_OscConfig+0x780>)
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	4a2a      	ldr	r2, [pc, #168]	; (80028b4 <HAL_RCC_OscConfig+0x780>)
 800280a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800280e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002810:	f7fd ff88 	bl	8000724 <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002818:	f7fd ff84 	bl	8000724 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e058      	b.n	80028dc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800282a:	4b22      	ldr	r3, [pc, #136]	; (80028b4 <HAL_RCC_OscConfig+0x780>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d0f0      	beq.n	8002818 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002836:	e050      	b.n	80028da <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e04f      	b.n	80028dc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800283c:	4b1d      	ldr	r3, [pc, #116]	; (80028b4 <HAL_RCC_OscConfig+0x780>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d148      	bne.n	80028da <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002848:	4b1a      	ldr	r3, [pc, #104]	; (80028b4 <HAL_RCC_OscConfig+0x780>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a19      	ldr	r2, [pc, #100]	; (80028b4 <HAL_RCC_OscConfig+0x780>)
 800284e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002852:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002854:	4b17      	ldr	r3, [pc, #92]	; (80028b4 <HAL_RCC_OscConfig+0x780>)
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	4a16      	ldr	r2, [pc, #88]	; (80028b4 <HAL_RCC_OscConfig+0x780>)
 800285a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800285e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002860:	f7fd ff60 	bl	8000724 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002868:	f7fd ff5c 	bl	8000724 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e030      	b.n	80028dc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800287a:	4b0e      	ldr	r3, [pc, #56]	; (80028b4 <HAL_RCC_OscConfig+0x780>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d0f0      	beq.n	8002868 <HAL_RCC_OscConfig+0x734>
 8002886:	e028      	b.n	80028da <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	2b0c      	cmp	r3, #12
 800288c:	d023      	beq.n	80028d6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800288e:	4b09      	ldr	r3, [pc, #36]	; (80028b4 <HAL_RCC_OscConfig+0x780>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a08      	ldr	r2, [pc, #32]	; (80028b4 <HAL_RCC_OscConfig+0x780>)
 8002894:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002898:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289a:	f7fd ff43 	bl	8000724 <HAL_GetTick>
 800289e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028a0:	e00c      	b.n	80028bc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a2:	f7fd ff3f 	bl	8000724 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d905      	bls.n	80028bc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e013      	b.n	80028dc <HAL_RCC_OscConfig+0x7a8>
 80028b4:	40021000 	.word	0x40021000
 80028b8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028bc:	4b09      	ldr	r3, [pc, #36]	; (80028e4 <HAL_RCC_OscConfig+0x7b0>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d1ec      	bne.n	80028a2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80028c8:	4b06      	ldr	r3, [pc, #24]	; (80028e4 <HAL_RCC_OscConfig+0x7b0>)
 80028ca:	68da      	ldr	r2, [r3, #12]
 80028cc:	4905      	ldr	r1, [pc, #20]	; (80028e4 <HAL_RCC_OscConfig+0x7b0>)
 80028ce:	4b06      	ldr	r3, [pc, #24]	; (80028e8 <HAL_RCC_OscConfig+0x7b4>)
 80028d0:	4013      	ands	r3, r2
 80028d2:	60cb      	str	r3, [r1, #12]
 80028d4:	e001      	b.n	80028da <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e000      	b.n	80028dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3720      	adds	r7, #32
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	40021000 	.word	0x40021000
 80028e8:	feeefffc 	.word	0xfeeefffc

080028ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d101      	bne.n	8002900 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e0e7      	b.n	8002ad0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002900:	4b75      	ldr	r3, [pc, #468]	; (8002ad8 <HAL_RCC_ClockConfig+0x1ec>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0307 	and.w	r3, r3, #7
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	429a      	cmp	r2, r3
 800290c:	d910      	bls.n	8002930 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800290e:	4b72      	ldr	r3, [pc, #456]	; (8002ad8 <HAL_RCC_ClockConfig+0x1ec>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f023 0207 	bic.w	r2, r3, #7
 8002916:	4970      	ldr	r1, [pc, #448]	; (8002ad8 <HAL_RCC_ClockConfig+0x1ec>)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	4313      	orrs	r3, r2
 800291c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800291e:	4b6e      	ldr	r3, [pc, #440]	; (8002ad8 <HAL_RCC_ClockConfig+0x1ec>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0307 	and.w	r3, r3, #7
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	429a      	cmp	r2, r3
 800292a:	d001      	beq.n	8002930 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e0cf      	b.n	8002ad0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d010      	beq.n	800295e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689a      	ldr	r2, [r3, #8]
 8002940:	4b66      	ldr	r3, [pc, #408]	; (8002adc <HAL_RCC_ClockConfig+0x1f0>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002948:	429a      	cmp	r2, r3
 800294a:	d908      	bls.n	800295e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800294c:	4b63      	ldr	r3, [pc, #396]	; (8002adc <HAL_RCC_ClockConfig+0x1f0>)
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	4960      	ldr	r1, [pc, #384]	; (8002adc <HAL_RCC_ClockConfig+0x1f0>)
 800295a:	4313      	orrs	r3, r2
 800295c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	2b00      	cmp	r3, #0
 8002968:	d04c      	beq.n	8002a04 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	2b03      	cmp	r3, #3
 8002970:	d107      	bne.n	8002982 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002972:	4b5a      	ldr	r3, [pc, #360]	; (8002adc <HAL_RCC_ClockConfig+0x1f0>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d121      	bne.n	80029c2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e0a6      	b.n	8002ad0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	2b02      	cmp	r3, #2
 8002988:	d107      	bne.n	800299a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800298a:	4b54      	ldr	r3, [pc, #336]	; (8002adc <HAL_RCC_ClockConfig+0x1f0>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d115      	bne.n	80029c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e09a      	b.n	8002ad0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d107      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029a2:	4b4e      	ldr	r3, [pc, #312]	; (8002adc <HAL_RCC_ClockConfig+0x1f0>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d109      	bne.n	80029c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e08e      	b.n	8002ad0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029b2:	4b4a      	ldr	r3, [pc, #296]	; (8002adc <HAL_RCC_ClockConfig+0x1f0>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e086      	b.n	8002ad0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029c2:	4b46      	ldr	r3, [pc, #280]	; (8002adc <HAL_RCC_ClockConfig+0x1f0>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f023 0203 	bic.w	r2, r3, #3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	4943      	ldr	r1, [pc, #268]	; (8002adc <HAL_RCC_ClockConfig+0x1f0>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029d4:	f7fd fea6 	bl	8000724 <HAL_GetTick>
 80029d8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029da:	e00a      	b.n	80029f2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029dc:	f7fd fea2 	bl	8000724 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e06e      	b.n	8002ad0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029f2:	4b3a      	ldr	r3, [pc, #232]	; (8002adc <HAL_RCC_ClockConfig+0x1f0>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f003 020c 	and.w	r2, r3, #12
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d1eb      	bne.n	80029dc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d010      	beq.n	8002a32 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689a      	ldr	r2, [r3, #8]
 8002a14:	4b31      	ldr	r3, [pc, #196]	; (8002adc <HAL_RCC_ClockConfig+0x1f0>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d208      	bcs.n	8002a32 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a20:	4b2e      	ldr	r3, [pc, #184]	; (8002adc <HAL_RCC_ClockConfig+0x1f0>)
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	492b      	ldr	r1, [pc, #172]	; (8002adc <HAL_RCC_ClockConfig+0x1f0>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a32:	4b29      	ldr	r3, [pc, #164]	; (8002ad8 <HAL_RCC_ClockConfig+0x1ec>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d210      	bcs.n	8002a62 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a40:	4b25      	ldr	r3, [pc, #148]	; (8002ad8 <HAL_RCC_ClockConfig+0x1ec>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f023 0207 	bic.w	r2, r3, #7
 8002a48:	4923      	ldr	r1, [pc, #140]	; (8002ad8 <HAL_RCC_ClockConfig+0x1ec>)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a50:	4b21      	ldr	r3, [pc, #132]	; (8002ad8 <HAL_RCC_ClockConfig+0x1ec>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0307 	and.w	r3, r3, #7
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d001      	beq.n	8002a62 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e036      	b.n	8002ad0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0304 	and.w	r3, r3, #4
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d008      	beq.n	8002a80 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a6e:	4b1b      	ldr	r3, [pc, #108]	; (8002adc <HAL_RCC_ClockConfig+0x1f0>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	4918      	ldr	r1, [pc, #96]	; (8002adc <HAL_RCC_ClockConfig+0x1f0>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0308 	and.w	r3, r3, #8
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d009      	beq.n	8002aa0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a8c:	4b13      	ldr	r3, [pc, #76]	; (8002adc <HAL_RCC_ClockConfig+0x1f0>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	00db      	lsls	r3, r3, #3
 8002a9a:	4910      	ldr	r1, [pc, #64]	; (8002adc <HAL_RCC_ClockConfig+0x1f0>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002aa0:	f000 f824 	bl	8002aec <HAL_RCC_GetSysClockFreq>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	4b0d      	ldr	r3, [pc, #52]	; (8002adc <HAL_RCC_ClockConfig+0x1f0>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	091b      	lsrs	r3, r3, #4
 8002aac:	f003 030f 	and.w	r3, r3, #15
 8002ab0:	490b      	ldr	r1, [pc, #44]	; (8002ae0 <HAL_RCC_ClockConfig+0x1f4>)
 8002ab2:	5ccb      	ldrb	r3, [r1, r3]
 8002ab4:	f003 031f 	and.w	r3, r3, #31
 8002ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8002abc:	4a09      	ldr	r2, [pc, #36]	; (8002ae4 <HAL_RCC_ClockConfig+0x1f8>)
 8002abe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ac0:	4b09      	ldr	r3, [pc, #36]	; (8002ae8 <HAL_RCC_ClockConfig+0x1fc>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7fd fddd 	bl	8000684 <HAL_InitTick>
 8002aca:	4603      	mov	r3, r0
 8002acc:	72fb      	strb	r3, [r7, #11]

  return status;
 8002ace:	7afb      	ldrb	r3, [r7, #11]
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3710      	adds	r7, #16
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40022000 	.word	0x40022000
 8002adc:	40021000 	.word	0x40021000
 8002ae0:	080077f0 	.word	0x080077f0
 8002ae4:	20000000 	.word	0x20000000
 8002ae8:	20000004 	.word	0x20000004

08002aec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b089      	sub	sp, #36	; 0x24
 8002af0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002af2:	2300      	movs	r3, #0
 8002af4:	61fb      	str	r3, [r7, #28]
 8002af6:	2300      	movs	r3, #0
 8002af8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002afa:	4b3e      	ldr	r3, [pc, #248]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f003 030c 	and.w	r3, r3, #12
 8002b02:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b04:	4b3b      	ldr	r3, [pc, #236]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	f003 0303 	and.w	r3, r3, #3
 8002b0c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d005      	beq.n	8002b20 <HAL_RCC_GetSysClockFreq+0x34>
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	2b0c      	cmp	r3, #12
 8002b18:	d121      	bne.n	8002b5e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d11e      	bne.n	8002b5e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b20:	4b34      	ldr	r3, [pc, #208]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0308 	and.w	r3, r3, #8
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d107      	bne.n	8002b3c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b2c:	4b31      	ldr	r3, [pc, #196]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b32:	0a1b      	lsrs	r3, r3, #8
 8002b34:	f003 030f 	and.w	r3, r3, #15
 8002b38:	61fb      	str	r3, [r7, #28]
 8002b3a:	e005      	b.n	8002b48 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b3c:	4b2d      	ldr	r3, [pc, #180]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	091b      	lsrs	r3, r3, #4
 8002b42:	f003 030f 	and.w	r3, r3, #15
 8002b46:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002b48:	4a2b      	ldr	r2, [pc, #172]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b50:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d10d      	bne.n	8002b74 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b5c:	e00a      	b.n	8002b74 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	2b04      	cmp	r3, #4
 8002b62:	d102      	bne.n	8002b6a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b64:	4b25      	ldr	r3, [pc, #148]	; (8002bfc <HAL_RCC_GetSysClockFreq+0x110>)
 8002b66:	61bb      	str	r3, [r7, #24]
 8002b68:	e004      	b.n	8002b74 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	2b08      	cmp	r3, #8
 8002b6e:	d101      	bne.n	8002b74 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b70:	4b23      	ldr	r3, [pc, #140]	; (8002c00 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b72:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	2b0c      	cmp	r3, #12
 8002b78:	d134      	bne.n	8002be4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b7a:	4b1e      	ldr	r3, [pc, #120]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	f003 0303 	and.w	r3, r3, #3
 8002b82:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d003      	beq.n	8002b92 <HAL_RCC_GetSysClockFreq+0xa6>
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	2b03      	cmp	r3, #3
 8002b8e:	d003      	beq.n	8002b98 <HAL_RCC_GetSysClockFreq+0xac>
 8002b90:	e005      	b.n	8002b9e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b92:	4b1a      	ldr	r3, [pc, #104]	; (8002bfc <HAL_RCC_GetSysClockFreq+0x110>)
 8002b94:	617b      	str	r3, [r7, #20]
      break;
 8002b96:	e005      	b.n	8002ba4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002b98:	4b19      	ldr	r3, [pc, #100]	; (8002c00 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b9a:	617b      	str	r3, [r7, #20]
      break;
 8002b9c:	e002      	b.n	8002ba4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	617b      	str	r3, [r7, #20]
      break;
 8002ba2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ba4:	4b13      	ldr	r3, [pc, #76]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	091b      	lsrs	r3, r3, #4
 8002baa:	f003 0307 	and.w	r3, r3, #7
 8002bae:	3301      	adds	r3, #1
 8002bb0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002bb2:	4b10      	ldr	r3, [pc, #64]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	0a1b      	lsrs	r3, r3, #8
 8002bb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	fb03 f202 	mul.w	r2, r3, r2
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002bca:	4b0a      	ldr	r3, [pc, #40]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	0e5b      	lsrs	r3, r3, #25
 8002bd0:	f003 0303 	and.w	r3, r3, #3
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002bda:	697a      	ldr	r2, [r7, #20]
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002be4:	69bb      	ldr	r3, [r7, #24]
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3724      	adds	r7, #36	; 0x24
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	08007800 	.word	0x08007800
 8002bfc:	00f42400 	.word	0x00f42400
 8002c00:	007a1200 	.word	0x007a1200

08002c04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c08:	4b03      	ldr	r3, [pc, #12]	; (8002c18 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	20000000 	.word	0x20000000

08002c1c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c24:	2300      	movs	r3, #0
 8002c26:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c28:	4b2a      	ldr	r3, [pc, #168]	; (8002cd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d003      	beq.n	8002c3c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c34:	f7ff fa0a 	bl	800204c <HAL_PWREx_GetVoltageRange>
 8002c38:	6178      	str	r0, [r7, #20]
 8002c3a:	e014      	b.n	8002c66 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c3c:	4b25      	ldr	r3, [pc, #148]	; (8002cd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c40:	4a24      	ldr	r2, [pc, #144]	; (8002cd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c46:	6593      	str	r3, [r2, #88]	; 0x58
 8002c48:	4b22      	ldr	r3, [pc, #136]	; (8002cd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c50:	60fb      	str	r3, [r7, #12]
 8002c52:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c54:	f7ff f9fa 	bl	800204c <HAL_PWREx_GetVoltageRange>
 8002c58:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c5a:	4b1e      	ldr	r3, [pc, #120]	; (8002cd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c5e:	4a1d      	ldr	r2, [pc, #116]	; (8002cd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c64:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c6c:	d10b      	bne.n	8002c86 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2b80      	cmp	r3, #128	; 0x80
 8002c72:	d919      	bls.n	8002ca8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2ba0      	cmp	r3, #160	; 0xa0
 8002c78:	d902      	bls.n	8002c80 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	613b      	str	r3, [r7, #16]
 8002c7e:	e013      	b.n	8002ca8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c80:	2301      	movs	r3, #1
 8002c82:	613b      	str	r3, [r7, #16]
 8002c84:	e010      	b.n	8002ca8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2b80      	cmp	r3, #128	; 0x80
 8002c8a:	d902      	bls.n	8002c92 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	613b      	str	r3, [r7, #16]
 8002c90:	e00a      	b.n	8002ca8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2b80      	cmp	r3, #128	; 0x80
 8002c96:	d102      	bne.n	8002c9e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c98:	2302      	movs	r3, #2
 8002c9a:	613b      	str	r3, [r7, #16]
 8002c9c:	e004      	b.n	8002ca8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2b70      	cmp	r3, #112	; 0x70
 8002ca2:	d101      	bne.n	8002ca8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ca8:	4b0b      	ldr	r3, [pc, #44]	; (8002cd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f023 0207 	bic.w	r2, r3, #7
 8002cb0:	4909      	ldr	r1, [pc, #36]	; (8002cd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002cb8:	4b07      	ldr	r3, [pc, #28]	; (8002cd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0307 	and.w	r3, r3, #7
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d001      	beq.n	8002cca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e000      	b.n	8002ccc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3718      	adds	r7, #24
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40021000 	.word	0x40021000
 8002cd8:	40022000 	.word	0x40022000

08002cdc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ce8:	2300      	movs	r3, #0
 8002cea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d041      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cfc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d00:	d02a      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002d02:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d06:	d824      	bhi.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002d08:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d0c:	d008      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002d0e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d12:	d81e      	bhi.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00a      	beq.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002d18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d1c:	d010      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002d1e:	e018      	b.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d20:	4b86      	ldr	r3, [pc, #536]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	4a85      	ldr	r2, [pc, #532]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d2a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d2c:	e015      	b.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	3304      	adds	r3, #4
 8002d32:	2100      	movs	r1, #0
 8002d34:	4618      	mov	r0, r3
 8002d36:	f000 fabb 	bl	80032b0 <RCCEx_PLLSAI1_Config>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d3e:	e00c      	b.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	3320      	adds	r3, #32
 8002d44:	2100      	movs	r1, #0
 8002d46:	4618      	mov	r0, r3
 8002d48:	f000 fba6 	bl	8003498 <RCCEx_PLLSAI2_Config>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d50:	e003      	b.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	74fb      	strb	r3, [r7, #19]
      break;
 8002d56:	e000      	b.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002d58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d5a:	7cfb      	ldrb	r3, [r7, #19]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d10b      	bne.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d60:	4b76      	ldr	r3, [pc, #472]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d66:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d6e:	4973      	ldr	r1, [pc, #460]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002d76:	e001      	b.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d78:	7cfb      	ldrb	r3, [r7, #19]
 8002d7a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d041      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d8c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002d90:	d02a      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002d92:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002d96:	d824      	bhi.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002d98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d9c:	d008      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002d9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002da2:	d81e      	bhi.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00a      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002da8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dac:	d010      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002dae:	e018      	b.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002db0:	4b62      	ldr	r3, [pc, #392]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	4a61      	ldr	r2, [pc, #388]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002db6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dba:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002dbc:	e015      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	3304      	adds	r3, #4
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f000 fa73 	bl	80032b0 <RCCEx_PLLSAI1_Config>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002dce:	e00c      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	3320      	adds	r3, #32
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f000 fb5e 	bl	8003498 <RCCEx_PLLSAI2_Config>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002de0:	e003      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	74fb      	strb	r3, [r7, #19]
      break;
 8002de6:	e000      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002de8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dea:	7cfb      	ldrb	r3, [r7, #19]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d10b      	bne.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002df0:	4b52      	ldr	r3, [pc, #328]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dfe:	494f      	ldr	r1, [pc, #316]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002e06:	e001      	b.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e08:	7cfb      	ldrb	r3, [r7, #19]
 8002e0a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f000 80a0 	beq.w	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e1e:	4b47      	ldr	r3, [pc, #284]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e000      	b.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002e2e:	2300      	movs	r3, #0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00d      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e34:	4b41      	ldr	r3, [pc, #260]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e38:	4a40      	ldr	r2, [pc, #256]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e3e:	6593      	str	r3, [r2, #88]	; 0x58
 8002e40:	4b3e      	ldr	r3, [pc, #248]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e48:	60bb      	str	r3, [r7, #8]
 8002e4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e50:	4b3b      	ldr	r3, [pc, #236]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a3a      	ldr	r2, [pc, #232]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e5a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e5c:	f7fd fc62 	bl	8000724 <HAL_GetTick>
 8002e60:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e62:	e009      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e64:	f7fd fc5e 	bl	8000724 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d902      	bls.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	74fb      	strb	r3, [r7, #19]
        break;
 8002e76:	e005      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e78:	4b31      	ldr	r3, [pc, #196]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d0ef      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002e84:	7cfb      	ldrb	r3, [r7, #19]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d15c      	bne.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e8a:	4b2c      	ldr	r3, [pc, #176]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e94:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d01f      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ea2:	697a      	ldr	r2, [r7, #20]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d019      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ea8:	4b24      	ldr	r3, [pc, #144]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eb2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002eb4:	4b21      	ldr	r3, [pc, #132]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eba:	4a20      	ldr	r2, [pc, #128]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ec0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ec4:	4b1d      	ldr	r3, [pc, #116]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eca:	4a1c      	ldr	r2, [pc, #112]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ecc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ed0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ed4:	4a19      	ldr	r2, [pc, #100]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d016      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee6:	f7fd fc1d 	bl	8000724 <HAL_GetTick>
 8002eea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002eec:	e00b      	b.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eee:	f7fd fc19 	bl	8000724 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d902      	bls.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	74fb      	strb	r3, [r7, #19]
            break;
 8002f04:	e006      	b.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f06:	4b0d      	ldr	r3, [pc, #52]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f0c:	f003 0302 	and.w	r3, r3, #2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d0ec      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002f14:	7cfb      	ldrb	r3, [r7, #19]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d10c      	bne.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f1a:	4b08      	ldr	r3, [pc, #32]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f2a:	4904      	ldr	r1, [pc, #16]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002f32:	e009      	b.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f34:	7cfb      	ldrb	r3, [r7, #19]
 8002f36:	74bb      	strb	r3, [r7, #18]
 8002f38:	e006      	b.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002f3a:	bf00      	nop
 8002f3c:	40021000 	.word	0x40021000
 8002f40:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f44:	7cfb      	ldrb	r3, [r7, #19]
 8002f46:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f48:	7c7b      	ldrb	r3, [r7, #17]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d105      	bne.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f4e:	4b9e      	ldr	r3, [pc, #632]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f52:	4a9d      	ldr	r2, [pc, #628]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f58:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00a      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f66:	4b98      	ldr	r3, [pc, #608]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f6c:	f023 0203 	bic.w	r2, r3, #3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f74:	4994      	ldr	r1, [pc, #592]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00a      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f88:	4b8f      	ldr	r3, [pc, #572]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8e:	f023 020c 	bic.w	r2, r3, #12
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f96:	498c      	ldr	r1, [pc, #560]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0304 	and.w	r3, r3, #4
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00a      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002faa:	4b87      	ldr	r3, [pc, #540]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fb0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb8:	4983      	ldr	r1, [pc, #524]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0308 	and.w	r3, r3, #8
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00a      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002fcc:	4b7e      	ldr	r3, [pc, #504]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fda:	497b      	ldr	r1, [pc, #492]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0310 	and.w	r3, r3, #16
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00a      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002fee:	4b76      	ldr	r3, [pc, #472]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ffc:	4972      	ldr	r1, [pc, #456]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0320 	and.w	r3, r3, #32
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00a      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003010:	4b6d      	ldr	r3, [pc, #436]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003016:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800301e:	496a      	ldr	r1, [pc, #424]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003020:	4313      	orrs	r3, r2
 8003022:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00a      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003032:	4b65      	ldr	r3, [pc, #404]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003038:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003040:	4961      	ldr	r1, [pc, #388]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003042:	4313      	orrs	r3, r2
 8003044:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00a      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003054:	4b5c      	ldr	r3, [pc, #368]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800305a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003062:	4959      	ldr	r1, [pc, #356]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003064:	4313      	orrs	r3, r2
 8003066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00a      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003076:	4b54      	ldr	r3, [pc, #336]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800307c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003084:	4950      	ldr	r1, [pc, #320]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003086:	4313      	orrs	r3, r2
 8003088:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00a      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003098:	4b4b      	ldr	r3, [pc, #300]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800309a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800309e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a6:	4948      	ldr	r1, [pc, #288]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00a      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80030ba:	4b43      	ldr	r3, [pc, #268]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c8:	493f      	ldr	r1, [pc, #252]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d028      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030dc:	4b3a      	ldr	r3, [pc, #232]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030ea:	4937      	ldr	r1, [pc, #220]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030fa:	d106      	bne.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030fc:	4b32      	ldr	r3, [pc, #200]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	4a31      	ldr	r2, [pc, #196]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003102:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003106:	60d3      	str	r3, [r2, #12]
 8003108:	e011      	b.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800310e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003112:	d10c      	bne.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	3304      	adds	r3, #4
 8003118:	2101      	movs	r1, #1
 800311a:	4618      	mov	r0, r3
 800311c:	f000 f8c8 	bl	80032b0 <RCCEx_PLLSAI1_Config>
 8003120:	4603      	mov	r3, r0
 8003122:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003124:	7cfb      	ldrb	r3, [r7, #19]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800312a:	7cfb      	ldrb	r3, [r7, #19]
 800312c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d028      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800313a:	4b23      	ldr	r3, [pc, #140]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800313c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003140:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003148:	491f      	ldr	r1, [pc, #124]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800314a:	4313      	orrs	r3, r2
 800314c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003154:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003158:	d106      	bne.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800315a:	4b1b      	ldr	r3, [pc, #108]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	4a1a      	ldr	r2, [pc, #104]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003160:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003164:	60d3      	str	r3, [r2, #12]
 8003166:	e011      	b.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800316c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003170:	d10c      	bne.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	3304      	adds	r3, #4
 8003176:	2101      	movs	r1, #1
 8003178:	4618      	mov	r0, r3
 800317a:	f000 f899 	bl	80032b0 <RCCEx_PLLSAI1_Config>
 800317e:	4603      	mov	r3, r0
 8003180:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003182:	7cfb      	ldrb	r3, [r7, #19]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003188:	7cfb      	ldrb	r3, [r7, #19]
 800318a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d02b      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003198:	4b0b      	ldr	r3, [pc, #44]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800319a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800319e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031a6:	4908      	ldr	r1, [pc, #32]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031b6:	d109      	bne.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031b8:	4b03      	ldr	r3, [pc, #12]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	4a02      	ldr	r2, [pc, #8]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031c2:	60d3      	str	r3, [r2, #12]
 80031c4:	e014      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80031c6:	bf00      	nop
 80031c8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031d4:	d10c      	bne.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	3304      	adds	r3, #4
 80031da:	2101      	movs	r1, #1
 80031dc:	4618      	mov	r0, r3
 80031de:	f000 f867 	bl	80032b0 <RCCEx_PLLSAI1_Config>
 80031e2:	4603      	mov	r3, r0
 80031e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031e6:	7cfb      	ldrb	r3, [r7, #19]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d001      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80031ec:	7cfb      	ldrb	r3, [r7, #19]
 80031ee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d02f      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031fc:	4b2b      	ldr	r3, [pc, #172]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003202:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800320a:	4928      	ldr	r1, [pc, #160]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800320c:	4313      	orrs	r3, r2
 800320e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003216:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800321a:	d10d      	bne.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3304      	adds	r3, #4
 8003220:	2102      	movs	r1, #2
 8003222:	4618      	mov	r0, r3
 8003224:	f000 f844 	bl	80032b0 <RCCEx_PLLSAI1_Config>
 8003228:	4603      	mov	r3, r0
 800322a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800322c:	7cfb      	ldrb	r3, [r7, #19]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d014      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003232:	7cfb      	ldrb	r3, [r7, #19]
 8003234:	74bb      	strb	r3, [r7, #18]
 8003236:	e011      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800323c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003240:	d10c      	bne.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	3320      	adds	r3, #32
 8003246:	2102      	movs	r1, #2
 8003248:	4618      	mov	r0, r3
 800324a:	f000 f925 	bl	8003498 <RCCEx_PLLSAI2_Config>
 800324e:	4603      	mov	r3, r0
 8003250:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003252:	7cfb      	ldrb	r3, [r7, #19]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003258:	7cfb      	ldrb	r3, [r7, #19]
 800325a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00a      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003268:	4b10      	ldr	r3, [pc, #64]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800326a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800326e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003276:	490d      	ldr	r1, [pc, #52]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003278:	4313      	orrs	r3, r2
 800327a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00b      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800328a:	4b08      	ldr	r3, [pc, #32]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800328c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003290:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800329a:	4904      	ldr	r1, [pc, #16]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800329c:	4313      	orrs	r3, r2
 800329e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80032a2:	7cbb      	ldrb	r3, [r7, #18]
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3718      	adds	r7, #24
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	40021000 	.word	0x40021000

080032b0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80032ba:	2300      	movs	r3, #0
 80032bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80032be:	4b75      	ldr	r3, [pc, #468]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	f003 0303 	and.w	r3, r3, #3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d018      	beq.n	80032fc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80032ca:	4b72      	ldr	r3, [pc, #456]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	f003 0203 	and.w	r2, r3, #3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d10d      	bne.n	80032f6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
       ||
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d009      	beq.n	80032f6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80032e2:	4b6c      	ldr	r3, [pc, #432]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	091b      	lsrs	r3, r3, #4
 80032e8:	f003 0307 	and.w	r3, r3, #7
 80032ec:	1c5a      	adds	r2, r3, #1
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
       ||
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d047      	beq.n	8003386 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	73fb      	strb	r3, [r7, #15]
 80032fa:	e044      	b.n	8003386 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2b03      	cmp	r3, #3
 8003302:	d018      	beq.n	8003336 <RCCEx_PLLSAI1_Config+0x86>
 8003304:	2b03      	cmp	r3, #3
 8003306:	d825      	bhi.n	8003354 <RCCEx_PLLSAI1_Config+0xa4>
 8003308:	2b01      	cmp	r3, #1
 800330a:	d002      	beq.n	8003312 <RCCEx_PLLSAI1_Config+0x62>
 800330c:	2b02      	cmp	r3, #2
 800330e:	d009      	beq.n	8003324 <RCCEx_PLLSAI1_Config+0x74>
 8003310:	e020      	b.n	8003354 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003312:	4b60      	ldr	r3, [pc, #384]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d11d      	bne.n	800335a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003322:	e01a      	b.n	800335a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003324:	4b5b      	ldr	r3, [pc, #364]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800332c:	2b00      	cmp	r3, #0
 800332e:	d116      	bne.n	800335e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003334:	e013      	b.n	800335e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003336:	4b57      	ldr	r3, [pc, #348]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10f      	bne.n	8003362 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003342:	4b54      	ldr	r3, [pc, #336]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d109      	bne.n	8003362 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003352:	e006      	b.n	8003362 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	73fb      	strb	r3, [r7, #15]
      break;
 8003358:	e004      	b.n	8003364 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800335a:	bf00      	nop
 800335c:	e002      	b.n	8003364 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800335e:	bf00      	nop
 8003360:	e000      	b.n	8003364 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003362:	bf00      	nop
    }

    if(status == HAL_OK)
 8003364:	7bfb      	ldrb	r3, [r7, #15]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d10d      	bne.n	8003386 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800336a:	4b4a      	ldr	r3, [pc, #296]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6819      	ldr	r1, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	3b01      	subs	r3, #1
 800337c:	011b      	lsls	r3, r3, #4
 800337e:	430b      	orrs	r3, r1
 8003380:	4944      	ldr	r1, [pc, #272]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003382:	4313      	orrs	r3, r2
 8003384:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003386:	7bfb      	ldrb	r3, [r7, #15]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d17d      	bne.n	8003488 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800338c:	4b41      	ldr	r3, [pc, #260]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a40      	ldr	r2, [pc, #256]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003392:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003396:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003398:	f7fd f9c4 	bl	8000724 <HAL_GetTick>
 800339c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800339e:	e009      	b.n	80033b4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033a0:	f7fd f9c0 	bl	8000724 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d902      	bls.n	80033b4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	73fb      	strb	r3, [r7, #15]
        break;
 80033b2:	e005      	b.n	80033c0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80033b4:	4b37      	ldr	r3, [pc, #220]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1ef      	bne.n	80033a0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80033c0:	7bfb      	ldrb	r3, [r7, #15]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d160      	bne.n	8003488 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d111      	bne.n	80033f0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033cc:	4b31      	ldr	r3, [pc, #196]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80033d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	6892      	ldr	r2, [r2, #8]
 80033dc:	0211      	lsls	r1, r2, #8
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	68d2      	ldr	r2, [r2, #12]
 80033e2:	0912      	lsrs	r2, r2, #4
 80033e4:	0452      	lsls	r2, r2, #17
 80033e6:	430a      	orrs	r2, r1
 80033e8:	492a      	ldr	r1, [pc, #168]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	610b      	str	r3, [r1, #16]
 80033ee:	e027      	b.n	8003440 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d112      	bne.n	800341c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033f6:	4b27      	ldr	r3, [pc, #156]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80033fe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	6892      	ldr	r2, [r2, #8]
 8003406:	0211      	lsls	r1, r2, #8
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	6912      	ldr	r2, [r2, #16]
 800340c:	0852      	lsrs	r2, r2, #1
 800340e:	3a01      	subs	r2, #1
 8003410:	0552      	lsls	r2, r2, #21
 8003412:	430a      	orrs	r2, r1
 8003414:	491f      	ldr	r1, [pc, #124]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003416:	4313      	orrs	r3, r2
 8003418:	610b      	str	r3, [r1, #16]
 800341a:	e011      	b.n	8003440 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800341c:	4b1d      	ldr	r3, [pc, #116]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003424:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	6892      	ldr	r2, [r2, #8]
 800342c:	0211      	lsls	r1, r2, #8
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	6952      	ldr	r2, [r2, #20]
 8003432:	0852      	lsrs	r2, r2, #1
 8003434:	3a01      	subs	r2, #1
 8003436:	0652      	lsls	r2, r2, #25
 8003438:	430a      	orrs	r2, r1
 800343a:	4916      	ldr	r1, [pc, #88]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 800343c:	4313      	orrs	r3, r2
 800343e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003440:	4b14      	ldr	r3, [pc, #80]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a13      	ldr	r2, [pc, #76]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003446:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800344a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800344c:	f7fd f96a 	bl	8000724 <HAL_GetTick>
 8003450:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003452:	e009      	b.n	8003468 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003454:	f7fd f966 	bl	8000724 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b02      	cmp	r3, #2
 8003460:	d902      	bls.n	8003468 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	73fb      	strb	r3, [r7, #15]
          break;
 8003466:	e005      	b.n	8003474 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003468:	4b0a      	ldr	r3, [pc, #40]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d0ef      	beq.n	8003454 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003474:	7bfb      	ldrb	r3, [r7, #15]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d106      	bne.n	8003488 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800347a:	4b06      	ldr	r3, [pc, #24]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 800347c:	691a      	ldr	r2, [r3, #16]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	4904      	ldr	r1, [pc, #16]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003484:	4313      	orrs	r3, r2
 8003486:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003488:	7bfb      	ldrb	r3, [r7, #15]
}
 800348a:	4618      	mov	r0, r3
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	40021000 	.word	0x40021000

08003498 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034a2:	2300      	movs	r3, #0
 80034a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80034a6:	4b6a      	ldr	r3, [pc, #424]	; (8003650 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	f003 0303 	and.w	r3, r3, #3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d018      	beq.n	80034e4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80034b2:	4b67      	ldr	r3, [pc, #412]	; (8003650 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	f003 0203 	and.w	r2, r3, #3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d10d      	bne.n	80034de <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
       ||
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d009      	beq.n	80034de <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80034ca:	4b61      	ldr	r3, [pc, #388]	; (8003650 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	091b      	lsrs	r3, r3, #4
 80034d0:	f003 0307 	and.w	r3, r3, #7
 80034d4:	1c5a      	adds	r2, r3, #1
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
       ||
 80034da:	429a      	cmp	r2, r3
 80034dc:	d047      	beq.n	800356e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	73fb      	strb	r3, [r7, #15]
 80034e2:	e044      	b.n	800356e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2b03      	cmp	r3, #3
 80034ea:	d018      	beq.n	800351e <RCCEx_PLLSAI2_Config+0x86>
 80034ec:	2b03      	cmp	r3, #3
 80034ee:	d825      	bhi.n	800353c <RCCEx_PLLSAI2_Config+0xa4>
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d002      	beq.n	80034fa <RCCEx_PLLSAI2_Config+0x62>
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d009      	beq.n	800350c <RCCEx_PLLSAI2_Config+0x74>
 80034f8:	e020      	b.n	800353c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80034fa:	4b55      	ldr	r3, [pc, #340]	; (8003650 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d11d      	bne.n	8003542 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800350a:	e01a      	b.n	8003542 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800350c:	4b50      	ldr	r3, [pc, #320]	; (8003650 <RCCEx_PLLSAI2_Config+0x1b8>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003514:	2b00      	cmp	r3, #0
 8003516:	d116      	bne.n	8003546 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800351c:	e013      	b.n	8003546 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800351e:	4b4c      	ldr	r3, [pc, #304]	; (8003650 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d10f      	bne.n	800354a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800352a:	4b49      	ldr	r3, [pc, #292]	; (8003650 <RCCEx_PLLSAI2_Config+0x1b8>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d109      	bne.n	800354a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800353a:	e006      	b.n	800354a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	73fb      	strb	r3, [r7, #15]
      break;
 8003540:	e004      	b.n	800354c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003542:	bf00      	nop
 8003544:	e002      	b.n	800354c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003546:	bf00      	nop
 8003548:	e000      	b.n	800354c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800354a:	bf00      	nop
    }

    if(status == HAL_OK)
 800354c:	7bfb      	ldrb	r3, [r7, #15]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10d      	bne.n	800356e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003552:	4b3f      	ldr	r3, [pc, #252]	; (8003650 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6819      	ldr	r1, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	3b01      	subs	r3, #1
 8003564:	011b      	lsls	r3, r3, #4
 8003566:	430b      	orrs	r3, r1
 8003568:	4939      	ldr	r1, [pc, #228]	; (8003650 <RCCEx_PLLSAI2_Config+0x1b8>)
 800356a:	4313      	orrs	r3, r2
 800356c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800356e:	7bfb      	ldrb	r3, [r7, #15]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d167      	bne.n	8003644 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003574:	4b36      	ldr	r3, [pc, #216]	; (8003650 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a35      	ldr	r2, [pc, #212]	; (8003650 <RCCEx_PLLSAI2_Config+0x1b8>)
 800357a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800357e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003580:	f7fd f8d0 	bl	8000724 <HAL_GetTick>
 8003584:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003586:	e009      	b.n	800359c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003588:	f7fd f8cc 	bl	8000724 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b02      	cmp	r3, #2
 8003594:	d902      	bls.n	800359c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	73fb      	strb	r3, [r7, #15]
        break;
 800359a:	e005      	b.n	80035a8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800359c:	4b2c      	ldr	r3, [pc, #176]	; (8003650 <RCCEx_PLLSAI2_Config+0x1b8>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1ef      	bne.n	8003588 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80035a8:	7bfb      	ldrb	r3, [r7, #15]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d14a      	bne.n	8003644 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d111      	bne.n	80035d8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80035b4:	4b26      	ldr	r3, [pc, #152]	; (8003650 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035b6:	695b      	ldr	r3, [r3, #20]
 80035b8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80035bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	6892      	ldr	r2, [r2, #8]
 80035c4:	0211      	lsls	r1, r2, #8
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	68d2      	ldr	r2, [r2, #12]
 80035ca:	0912      	lsrs	r2, r2, #4
 80035cc:	0452      	lsls	r2, r2, #17
 80035ce:	430a      	orrs	r2, r1
 80035d0:	491f      	ldr	r1, [pc, #124]	; (8003650 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	614b      	str	r3, [r1, #20]
 80035d6:	e011      	b.n	80035fc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80035d8:	4b1d      	ldr	r3, [pc, #116]	; (8003650 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035da:	695b      	ldr	r3, [r3, #20]
 80035dc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80035e0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	6892      	ldr	r2, [r2, #8]
 80035e8:	0211      	lsls	r1, r2, #8
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	6912      	ldr	r2, [r2, #16]
 80035ee:	0852      	lsrs	r2, r2, #1
 80035f0:	3a01      	subs	r2, #1
 80035f2:	0652      	lsls	r2, r2, #25
 80035f4:	430a      	orrs	r2, r1
 80035f6:	4916      	ldr	r1, [pc, #88]	; (8003650 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80035fc:	4b14      	ldr	r3, [pc, #80]	; (8003650 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a13      	ldr	r2, [pc, #76]	; (8003650 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003606:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003608:	f7fd f88c 	bl	8000724 <HAL_GetTick>
 800360c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800360e:	e009      	b.n	8003624 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003610:	f7fd f888 	bl	8000724 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b02      	cmp	r3, #2
 800361c:	d902      	bls.n	8003624 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	73fb      	strb	r3, [r7, #15]
          break;
 8003622:	e005      	b.n	8003630 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003624:	4b0a      	ldr	r3, [pc, #40]	; (8003650 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d0ef      	beq.n	8003610 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003630:	7bfb      	ldrb	r3, [r7, #15]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d106      	bne.n	8003644 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003636:	4b06      	ldr	r3, [pc, #24]	; (8003650 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003638:	695a      	ldr	r2, [r3, #20]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	4904      	ldr	r1, [pc, #16]	; (8003650 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003640:	4313      	orrs	r3, r2
 8003642:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003644:	7bfb      	ldrb	r3, [r7, #15]
}
 8003646:	4618      	mov	r0, r3
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	40021000 	.word	0x40021000

08003654 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003654:	b084      	sub	sp, #16
 8003656:	b580      	push	{r7, lr}
 8003658:	b084      	sub	sp, #16
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
 800365e:	f107 001c 	add.w	r0, r7, #28
 8003662:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f001 faf6 	bl	8004c64 <USB_CoreReset>
 8003678:	4603      	mov	r3, r0
 800367a:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800367c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800367e:	2b00      	cmp	r3, #0
 8003680:	d106      	bne.n	8003690 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003686:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	639a      	str	r2, [r3, #56]	; 0x38
 800368e:	e005      	b.n	800369c <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003694:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800369c:	7bfb      	ldrb	r3, [r7, #15]
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3710      	adds	r7, #16
 80036a2:	46bd      	mov	sp, r7
 80036a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80036a8:	b004      	add	sp, #16
 80036aa:	4770      	bx	lr

080036ac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b087      	sub	sp, #28
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	4613      	mov	r3, r2
 80036b8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80036ba:	79fb      	ldrb	r3, [r7, #7]
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d165      	bne.n	800378c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	4a3e      	ldr	r2, [pc, #248]	; (80037bc <USB_SetTurnaroundTime+0x110>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d906      	bls.n	80036d6 <USB_SetTurnaroundTime+0x2a>
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	4a3d      	ldr	r2, [pc, #244]	; (80037c0 <USB_SetTurnaroundTime+0x114>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d202      	bcs.n	80036d6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80036d0:	230f      	movs	r3, #15
 80036d2:	617b      	str	r3, [r7, #20]
 80036d4:	e05c      	b.n	8003790 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	4a39      	ldr	r2, [pc, #228]	; (80037c0 <USB_SetTurnaroundTime+0x114>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d306      	bcc.n	80036ec <USB_SetTurnaroundTime+0x40>
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	4a38      	ldr	r2, [pc, #224]	; (80037c4 <USB_SetTurnaroundTime+0x118>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d202      	bcs.n	80036ec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80036e6:	230e      	movs	r3, #14
 80036e8:	617b      	str	r3, [r7, #20]
 80036ea:	e051      	b.n	8003790 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	4a35      	ldr	r2, [pc, #212]	; (80037c4 <USB_SetTurnaroundTime+0x118>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d306      	bcc.n	8003702 <USB_SetTurnaroundTime+0x56>
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	4a34      	ldr	r2, [pc, #208]	; (80037c8 <USB_SetTurnaroundTime+0x11c>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d202      	bcs.n	8003702 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80036fc:	230d      	movs	r3, #13
 80036fe:	617b      	str	r3, [r7, #20]
 8003700:	e046      	b.n	8003790 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	4a30      	ldr	r2, [pc, #192]	; (80037c8 <USB_SetTurnaroundTime+0x11c>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d306      	bcc.n	8003718 <USB_SetTurnaroundTime+0x6c>
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	4a2f      	ldr	r2, [pc, #188]	; (80037cc <USB_SetTurnaroundTime+0x120>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d802      	bhi.n	8003718 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003712:	230c      	movs	r3, #12
 8003714:	617b      	str	r3, [r7, #20]
 8003716:	e03b      	b.n	8003790 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	4a2c      	ldr	r2, [pc, #176]	; (80037cc <USB_SetTurnaroundTime+0x120>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d906      	bls.n	800372e <USB_SetTurnaroundTime+0x82>
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	4a2b      	ldr	r2, [pc, #172]	; (80037d0 <USB_SetTurnaroundTime+0x124>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d802      	bhi.n	800372e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003728:	230b      	movs	r3, #11
 800372a:	617b      	str	r3, [r7, #20]
 800372c:	e030      	b.n	8003790 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	4a27      	ldr	r2, [pc, #156]	; (80037d0 <USB_SetTurnaroundTime+0x124>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d906      	bls.n	8003744 <USB_SetTurnaroundTime+0x98>
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	4a26      	ldr	r2, [pc, #152]	; (80037d4 <USB_SetTurnaroundTime+0x128>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d802      	bhi.n	8003744 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800373e:	230a      	movs	r3, #10
 8003740:	617b      	str	r3, [r7, #20]
 8003742:	e025      	b.n	8003790 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	4a23      	ldr	r2, [pc, #140]	; (80037d4 <USB_SetTurnaroundTime+0x128>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d906      	bls.n	800375a <USB_SetTurnaroundTime+0xae>
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	4a22      	ldr	r2, [pc, #136]	; (80037d8 <USB_SetTurnaroundTime+0x12c>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d202      	bcs.n	800375a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003754:	2309      	movs	r3, #9
 8003756:	617b      	str	r3, [r7, #20]
 8003758:	e01a      	b.n	8003790 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	4a1e      	ldr	r2, [pc, #120]	; (80037d8 <USB_SetTurnaroundTime+0x12c>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d306      	bcc.n	8003770 <USB_SetTurnaroundTime+0xc4>
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	4a1d      	ldr	r2, [pc, #116]	; (80037dc <USB_SetTurnaroundTime+0x130>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d802      	bhi.n	8003770 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800376a:	2308      	movs	r3, #8
 800376c:	617b      	str	r3, [r7, #20]
 800376e:	e00f      	b.n	8003790 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	4a1a      	ldr	r2, [pc, #104]	; (80037dc <USB_SetTurnaroundTime+0x130>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d906      	bls.n	8003786 <USB_SetTurnaroundTime+0xda>
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	4a19      	ldr	r2, [pc, #100]	; (80037e0 <USB_SetTurnaroundTime+0x134>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d202      	bcs.n	8003786 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003780:	2307      	movs	r3, #7
 8003782:	617b      	str	r3, [r7, #20]
 8003784:	e004      	b.n	8003790 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003786:	2306      	movs	r3, #6
 8003788:	617b      	str	r3, [r7, #20]
 800378a:	e001      	b.n	8003790 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800378c:	2309      	movs	r3, #9
 800378e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	68da      	ldr	r2, [r3, #12]
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	029b      	lsls	r3, r3, #10
 80037a4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80037a8:	431a      	orrs	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	371c      	adds	r7, #28
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr
 80037bc:	00d8acbf 	.word	0x00d8acbf
 80037c0:	00e4e1c0 	.word	0x00e4e1c0
 80037c4:	00f42400 	.word	0x00f42400
 80037c8:	01067380 	.word	0x01067380
 80037cc:	011a499f 	.word	0x011a499f
 80037d0:	01312cff 	.word	0x01312cff
 80037d4:	014ca43f 	.word	0x014ca43f
 80037d8:	016e3600 	.word	0x016e3600
 80037dc:	01a6ab1f 	.word	0x01a6ab1f
 80037e0:	01e84800 	.word	0x01e84800

080037e4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f043 0201 	orr.w	r2, r3, #1
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr

08003806 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003806:	b480      	push	{r7}
 8003808:	b083      	sub	sp, #12
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f023 0201 	bic.w	r2, r3, #1
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	460b      	mov	r3, r1
 8003832:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003834:	2300      	movs	r3, #0
 8003836:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003844:	78fb      	ldrb	r3, [r7, #3]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d115      	bne.n	8003876 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003856:	2001      	movs	r0, #1
 8003858:	f7fc ff70 	bl	800073c <HAL_Delay>
      ms++;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	3301      	adds	r3, #1
 8003860:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f001 f985 	bl	8004b72 <USB_GetMode>
 8003868:	4603      	mov	r3, r0
 800386a:	2b01      	cmp	r3, #1
 800386c:	d01e      	beq.n	80038ac <USB_SetCurrentMode+0x84>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2b31      	cmp	r3, #49	; 0x31
 8003872:	d9f0      	bls.n	8003856 <USB_SetCurrentMode+0x2e>
 8003874:	e01a      	b.n	80038ac <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003876:	78fb      	ldrb	r3, [r7, #3]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d115      	bne.n	80038a8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003888:	2001      	movs	r0, #1
 800388a:	f7fc ff57 	bl	800073c <HAL_Delay>
      ms++;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	3301      	adds	r3, #1
 8003892:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f001 f96c 	bl	8004b72 <USB_GetMode>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d005      	beq.n	80038ac <USB_SetCurrentMode+0x84>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2b31      	cmp	r3, #49	; 0x31
 80038a4:	d9f0      	bls.n	8003888 <USB_SetCurrentMode+0x60>
 80038a6:	e001      	b.n	80038ac <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e005      	b.n	80038b8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2b32      	cmp	r3, #50	; 0x32
 80038b0:	d101      	bne.n	80038b6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e000      	b.n	80038b8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3710      	adds	r7, #16
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80038c0:	b084      	sub	sp, #16
 80038c2:	b580      	push	{r7, lr}
 80038c4:	b086      	sub	sp, #24
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
 80038ca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80038ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80038d2:	2300      	movs	r3, #0
 80038d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80038da:	2300      	movs	r3, #0
 80038dc:	613b      	str	r3, [r7, #16]
 80038de:	e009      	b.n	80038f4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	3340      	adds	r3, #64	; 0x40
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	4413      	add	r3, r2
 80038ea:	2200      	movs	r2, #0
 80038ec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	3301      	adds	r3, #1
 80038f2:	613b      	str	r3, [r7, #16]
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	2b0e      	cmp	r3, #14
 80038f8:	d9f2      	bls.n	80038e0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80038fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d11c      	bne.n	800393a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800390e:	f043 0302 	orr.w	r3, r3, #2
 8003912:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003918:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	e005      	b.n	8003946 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800394c:	461a      	mov	r2, r3
 800394e:	2300      	movs	r3, #0
 8003950:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003958:	4619      	mov	r1, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003960:	461a      	mov	r2, r3
 8003962:	680b      	ldr	r3, [r1, #0]
 8003964:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003966:	2103      	movs	r1, #3
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 f959 	bl	8003c20 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800396e:	2110      	movs	r1, #16
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 f8f1 	bl	8003b58 <USB_FlushTxFifo>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d001      	beq.n	8003980 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 f91d 	bl	8003bc0 <USB_FlushRxFifo>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003996:	461a      	mov	r2, r3
 8003998:	2300      	movs	r3, #0
 800399a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039a2:	461a      	mov	r2, r3
 80039a4:	2300      	movs	r3, #0
 80039a6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ae:	461a      	mov	r2, r3
 80039b0:	2300      	movs	r3, #0
 80039b2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039b4:	2300      	movs	r3, #0
 80039b6:	613b      	str	r3, [r7, #16]
 80039b8:	e043      	b.n	8003a42 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	015a      	lsls	r2, r3, #5
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	4413      	add	r3, r2
 80039c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80039cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039d0:	d118      	bne.n	8003a04 <USB_DevInit+0x144>
    {
      if (i == 0U)
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d10a      	bne.n	80039ee <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	015a      	lsls	r2, r3, #5
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	4413      	add	r3, r2
 80039e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039e4:	461a      	mov	r2, r3
 80039e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80039ea:	6013      	str	r3, [r2, #0]
 80039ec:	e013      	b.n	8003a16 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	015a      	lsls	r2, r3, #5
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	4413      	add	r3, r2
 80039f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039fa:	461a      	mov	r2, r3
 80039fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a00:	6013      	str	r3, [r2, #0]
 8003a02:	e008      	b.n	8003a16 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	015a      	lsls	r2, r3, #5
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a10:	461a      	mov	r2, r3
 8003a12:	2300      	movs	r3, #0
 8003a14:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	015a      	lsls	r2, r3, #5
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a22:	461a      	mov	r2, r3
 8003a24:	2300      	movs	r3, #0
 8003a26:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	015a      	lsls	r2, r3, #5
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	4413      	add	r3, r2
 8003a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a34:	461a      	mov	r2, r3
 8003a36:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a3a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	3301      	adds	r3, #1
 8003a40:	613b      	str	r3, [r7, #16]
 8003a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d3b7      	bcc.n	80039ba <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	613b      	str	r3, [r7, #16]
 8003a4e:	e043      	b.n	8003ad8 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	015a      	lsls	r2, r3, #5
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	4413      	add	r3, r2
 8003a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a66:	d118      	bne.n	8003a9a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d10a      	bne.n	8003a84 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	015a      	lsls	r2, r3, #5
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	4413      	add	r3, r2
 8003a76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a80:	6013      	str	r3, [r2, #0]
 8003a82:	e013      	b.n	8003aac <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	015a      	lsls	r2, r3, #5
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a90:	461a      	mov	r2, r3
 8003a92:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a96:	6013      	str	r3, [r2, #0]
 8003a98:	e008      	b.n	8003aac <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	015a      	lsls	r2, r3, #5
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	015a      	lsls	r2, r3, #5
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ab8:	461a      	mov	r2, r3
 8003aba:	2300      	movs	r3, #0
 8003abc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	015a      	lsls	r2, r3, #5
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aca:	461a      	mov	r2, r3
 8003acc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ad0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	613b      	str	r3, [r7, #16]
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d3b7      	bcc.n	8003a50 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	68fa      	ldr	r2, [r7, #12]
 8003aea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003aee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003af2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003b00:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	f043 0210 	orr.w	r2, r3, #16
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	699a      	ldr	r2, [r3, #24]
 8003b12:	4b10      	ldr	r3, [pc, #64]	; (8003b54 <USB_DevInit+0x294>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003b1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d005      	beq.n	8003b2c <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	f043 0208 	orr.w	r2, r3, #8
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003b2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d107      	bne.n	8003b42 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b3a:	f043 0304 	orr.w	r3, r3, #4
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003b42:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3718      	adds	r7, #24
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b4e:	b004      	add	sp, #16
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	803c3800 	.word	0x803c3800

08003b58 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003b62:	2300      	movs	r3, #0
 8003b64:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	3301      	adds	r3, #1
 8003b6a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	4a13      	ldr	r2, [pc, #76]	; (8003bbc <USB_FlushTxFifo+0x64>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d901      	bls.n	8003b78 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e01b      	b.n	8003bb0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	daf2      	bge.n	8003b66 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003b80:	2300      	movs	r3, #0
 8003b82:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	019b      	lsls	r3, r3, #6
 8003b88:	f043 0220 	orr.w	r2, r3, #32
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	3301      	adds	r3, #1
 8003b94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	4a08      	ldr	r2, [pc, #32]	; (8003bbc <USB_FlushTxFifo+0x64>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d901      	bls.n	8003ba2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e006      	b.n	8003bb0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	f003 0320 	and.w	r3, r3, #32
 8003baa:	2b20      	cmp	r3, #32
 8003bac:	d0f0      	beq.n	8003b90 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3714      	adds	r7, #20
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr
 8003bbc:	00030d40 	.word	0x00030d40

08003bc0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	3301      	adds	r3, #1
 8003bd0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	4a11      	ldr	r2, [pc, #68]	; (8003c1c <USB_FlushRxFifo+0x5c>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d901      	bls.n	8003bde <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e018      	b.n	8003c10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	daf2      	bge.n	8003bcc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003be6:	2300      	movs	r3, #0
 8003be8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2210      	movs	r2, #16
 8003bee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	4a08      	ldr	r2, [pc, #32]	; (8003c1c <USB_FlushRxFifo+0x5c>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d901      	bls.n	8003c02 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e006      	b.n	8003c10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	f003 0310 	and.w	r3, r3, #16
 8003c0a:	2b10      	cmp	r3, #16
 8003c0c:	d0f0      	beq.n	8003bf0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3714      	adds	r7, #20
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr
 8003c1c:	00030d40 	.word	0x00030d40

08003c20 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	460b      	mov	r3, r1
 8003c2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	78fb      	ldrb	r3, [r7, #3]
 8003c3a:	68f9      	ldr	r1, [r7, #12]
 8003c3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c40:	4313      	orrs	r3, r2
 8003c42:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3714      	adds	r7, #20
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003c52:	b480      	push	{r7}
 8003c54:	b087      	sub	sp, #28
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f003 0306 	and.w	r3, r3, #6
 8003c6a:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d002      	beq.n	8003c78 <USB_GetDevSpeed+0x26>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2b06      	cmp	r3, #6
 8003c76:	d102      	bne.n	8003c7e <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003c78:	2302      	movs	r3, #2
 8003c7a:	75fb      	strb	r3, [r7, #23]
 8003c7c:	e001      	b.n	8003c82 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8003c7e:	230f      	movs	r3, #15
 8003c80:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003c82:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	371c      	adds	r7, #28
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	785b      	ldrb	r3, [r3, #1]
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d13a      	bne.n	8003d22 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cb2:	69da      	ldr	r2, [r3, #28]
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	f003 030f 	and.w	r3, r3, #15
 8003cbc:	2101      	movs	r1, #1
 8003cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	68f9      	ldr	r1, [r7, #12]
 8003cc6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	015a      	lsls	r2, r3, #5
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d155      	bne.n	8003d90 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	015a      	lsls	r2, r3, #5
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	4413      	add	r3, r2
 8003cec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	791b      	ldrb	r3, [r3, #4]
 8003cfe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d00:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	059b      	lsls	r3, r3, #22
 8003d06:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	68ba      	ldr	r2, [r7, #8]
 8003d0c:	0151      	lsls	r1, r2, #5
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	440a      	add	r2, r1
 8003d12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d1e:	6013      	str	r3, [r2, #0]
 8003d20:	e036      	b.n	8003d90 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d28:	69da      	ldr	r2, [r3, #28]
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	f003 030f 	and.w	r3, r3, #15
 8003d32:	2101      	movs	r1, #1
 8003d34:	fa01 f303 	lsl.w	r3, r1, r3
 8003d38:	041b      	lsls	r3, r3, #16
 8003d3a:	68f9      	ldr	r1, [r7, #12]
 8003d3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d40:	4313      	orrs	r3, r2
 8003d42:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	015a      	lsls	r2, r3, #5
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d11a      	bne.n	8003d90 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	015a      	lsls	r2, r3, #5
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	4413      	add	r3, r2
 8003d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	791b      	ldrb	r3, [r3, #4]
 8003d74:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003d76:	430b      	orrs	r3, r1
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	68ba      	ldr	r2, [r7, #8]
 8003d7c:	0151      	lsls	r1, r2, #5
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	440a      	add	r2, r1
 8003d82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d8e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3714      	adds	r7, #20
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
	...

08003da0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b085      	sub	sp, #20
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	785b      	ldrb	r3, [r3, #1]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d161      	bne.n	8003e80 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	015a      	lsls	r2, r3, #5
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003dce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003dd2:	d11f      	bne.n	8003e14 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	015a      	lsls	r2, r3, #5
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	4413      	add	r3, r2
 8003ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68ba      	ldr	r2, [r7, #8]
 8003de4:	0151      	lsls	r1, r2, #5
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	440a      	add	r2, r1
 8003dea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003df2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	015a      	lsls	r2, r3, #5
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68ba      	ldr	r2, [r7, #8]
 8003e04:	0151      	lsls	r1, r2, #5
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	440a      	add	r2, r1
 8003e0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e12:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	f003 030f 	and.w	r3, r3, #15
 8003e24:	2101      	movs	r1, #1
 8003e26:	fa01 f303 	lsl.w	r3, r1, r3
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	43db      	mvns	r3, r3
 8003e2e:	68f9      	ldr	r1, [r7, #12]
 8003e30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e34:	4013      	ands	r3, r2
 8003e36:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e3e:	69da      	ldr	r2, [r3, #28]
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	f003 030f 	and.w	r3, r3, #15
 8003e48:	2101      	movs	r1, #1
 8003e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	43db      	mvns	r3, r3
 8003e52:	68f9      	ldr	r1, [r7, #12]
 8003e54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e58:	4013      	ands	r3, r2
 8003e5a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	015a      	lsls	r2, r3, #5
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	4413      	add	r3, r2
 8003e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	0159      	lsls	r1, r3, #5
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	440b      	add	r3, r1
 8003e72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e76:	4619      	mov	r1, r3
 8003e78:	4b35      	ldr	r3, [pc, #212]	; (8003f50 <USB_DeactivateEndpoint+0x1b0>)
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	600b      	str	r3, [r1, #0]
 8003e7e:	e060      	b.n	8003f42 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	015a      	lsls	r2, r3, #5
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	4413      	add	r3, r2
 8003e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e96:	d11f      	bne.n	8003ed8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	015a      	lsls	r2, r3, #5
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68ba      	ldr	r2, [r7, #8]
 8003ea8:	0151      	lsls	r1, r2, #5
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	440a      	add	r2, r1
 8003eae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003eb2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003eb6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	015a      	lsls	r2, r3, #5
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68ba      	ldr	r2, [r7, #8]
 8003ec8:	0151      	lsls	r1, r2, #5
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	440a      	add	r2, r1
 8003ece:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ed2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ed6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ede:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	f003 030f 	and.w	r3, r3, #15
 8003ee8:	2101      	movs	r1, #1
 8003eea:	fa01 f303 	lsl.w	r3, r1, r3
 8003eee:	041b      	lsls	r3, r3, #16
 8003ef0:	43db      	mvns	r3, r3
 8003ef2:	68f9      	ldr	r1, [r7, #12]
 8003ef4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ef8:	4013      	ands	r3, r2
 8003efa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f02:	69da      	ldr	r2, [r3, #28]
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	f003 030f 	and.w	r3, r3, #15
 8003f0c:	2101      	movs	r1, #1
 8003f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f12:	041b      	lsls	r3, r3, #16
 8003f14:	43db      	mvns	r3, r3
 8003f16:	68f9      	ldr	r1, [r7, #12]
 8003f18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	015a      	lsls	r2, r3, #5
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	4413      	add	r3, r2
 8003f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	0159      	lsls	r1, r3, #5
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	440b      	add	r3, r1
 8003f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	4b05      	ldr	r3, [pc, #20]	; (8003f54 <USB_DeactivateEndpoint+0x1b4>)
 8003f3e:	4013      	ands	r3, r2
 8003f40:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003f42:	2300      	movs	r3, #0
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3714      	adds	r7, #20
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr
 8003f50:	ec337800 	.word	0xec337800
 8003f54:	eff37800 	.word	0xeff37800

08003f58 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	785b      	ldrb	r3, [r3, #1]
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	f040 810a 	bne.w	800418a <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d132      	bne.n	8003fe4 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	015a      	lsls	r2, r3, #5
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	4413      	add	r3, r2
 8003f86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	0151      	lsls	r1, r2, #5
 8003f90:	697a      	ldr	r2, [r7, #20]
 8003f92:	440a      	add	r2, r1
 8003f94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f98:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003f9c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003fa0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	015a      	lsls	r2, r3, #5
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	4413      	add	r3, r2
 8003faa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	0151      	lsls	r1, r2, #5
 8003fb4:	697a      	ldr	r2, [r7, #20]
 8003fb6:	440a      	add	r2, r1
 8003fb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fbc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003fc0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	015a      	lsls	r2, r3, #5
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	4413      	add	r3, r2
 8003fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	0151      	lsls	r1, r2, #5
 8003fd4:	697a      	ldr	r2, [r7, #20]
 8003fd6:	440a      	add	r2, r1
 8003fd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fdc:	0cdb      	lsrs	r3, r3, #19
 8003fde:	04db      	lsls	r3, r3, #19
 8003fe0:	6113      	str	r3, [r2, #16]
 8003fe2:	e074      	b.n	80040ce <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	015a      	lsls	r2, r3, #5
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	4413      	add	r3, r2
 8003fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	693a      	ldr	r2, [r7, #16]
 8003ff4:	0151      	lsls	r1, r2, #5
 8003ff6:	697a      	ldr	r2, [r7, #20]
 8003ff8:	440a      	add	r2, r1
 8003ffa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ffe:	0cdb      	lsrs	r3, r3, #19
 8004000:	04db      	lsls	r3, r3, #19
 8004002:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	015a      	lsls	r2, r3, #5
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	4413      	add	r3, r2
 800400c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	693a      	ldr	r2, [r7, #16]
 8004014:	0151      	lsls	r1, r2, #5
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	440a      	add	r2, r1
 800401a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800401e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004022:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004026:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	015a      	lsls	r2, r3, #5
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	4413      	add	r3, r2
 8004030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004034:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	6999      	ldr	r1, [r3, #24]
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	440b      	add	r3, r1
 8004040:	1e59      	subs	r1, r3, #1
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	fbb1 f3f3 	udiv	r3, r1, r3
 800404a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800404c:	4b9e      	ldr	r3, [pc, #632]	; (80042c8 <USB_EPStartXfer+0x370>)
 800404e:	400b      	ands	r3, r1
 8004050:	6939      	ldr	r1, [r7, #16]
 8004052:	0148      	lsls	r0, r1, #5
 8004054:	6979      	ldr	r1, [r7, #20]
 8004056:	4401      	add	r1, r0
 8004058:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800405c:	4313      	orrs	r3, r2
 800405e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	015a      	lsls	r2, r3, #5
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	4413      	add	r3, r2
 8004068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800406c:	691a      	ldr	r2, [r3, #16]
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004076:	6939      	ldr	r1, [r7, #16]
 8004078:	0148      	lsls	r0, r1, #5
 800407a:	6979      	ldr	r1, [r7, #20]
 800407c:	4401      	add	r1, r0
 800407e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004082:	4313      	orrs	r3, r2
 8004084:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	791b      	ldrb	r3, [r3, #4]
 800408a:	2b01      	cmp	r3, #1
 800408c:	d11f      	bne.n	80040ce <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	015a      	lsls	r2, r3, #5
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	4413      	add	r3, r2
 8004096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	693a      	ldr	r2, [r7, #16]
 800409e:	0151      	lsls	r1, r2, #5
 80040a0:	697a      	ldr	r2, [r7, #20]
 80040a2:	440a      	add	r2, r1
 80040a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040a8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80040ac:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	015a      	lsls	r2, r3, #5
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	4413      	add	r3, r2
 80040b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	0151      	lsls	r1, r2, #5
 80040c0:	697a      	ldr	r2, [r7, #20]
 80040c2:	440a      	add	r2, r1
 80040c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80040cc:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	015a      	lsls	r2, r3, #5
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	4413      	add	r3, r2
 80040d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	693a      	ldr	r2, [r7, #16]
 80040de:	0151      	lsls	r1, r2, #5
 80040e0:	697a      	ldr	r2, [r7, #20]
 80040e2:	440a      	add	r2, r1
 80040e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80040ec:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	791b      	ldrb	r3, [r3, #4]
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d015      	beq.n	8004122 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	f000 8106 	beq.w	800430c <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004106:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	f003 030f 	and.w	r3, r3, #15
 8004110:	2101      	movs	r1, #1
 8004112:	fa01 f303 	lsl.w	r3, r1, r3
 8004116:	6979      	ldr	r1, [r7, #20]
 8004118:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800411c:	4313      	orrs	r3, r2
 800411e:	634b      	str	r3, [r1, #52]	; 0x34
 8004120:	e0f4      	b.n	800430c <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800412e:	2b00      	cmp	r3, #0
 8004130:	d110      	bne.n	8004154 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	015a      	lsls	r2, r3, #5
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	4413      	add	r3, r2
 800413a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	693a      	ldr	r2, [r7, #16]
 8004142:	0151      	lsls	r1, r2, #5
 8004144:	697a      	ldr	r2, [r7, #20]
 8004146:	440a      	add	r2, r1
 8004148:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800414c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004150:	6013      	str	r3, [r2, #0]
 8004152:	e00f      	b.n	8004174 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	015a      	lsls	r2, r3, #5
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	4413      	add	r3, r2
 800415c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	693a      	ldr	r2, [r7, #16]
 8004164:	0151      	lsls	r1, r2, #5
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	440a      	add	r2, r1
 800416a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800416e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004172:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	6919      	ldr	r1, [r3, #16]
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	781a      	ldrb	r2, [r3, #0]
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	699b      	ldr	r3, [r3, #24]
 8004180:	b29b      	uxth	r3, r3
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 fa94 	bl	80046b0 <USB_WritePacket>
 8004188:	e0c0      	b.n	800430c <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	015a      	lsls	r2, r3, #5
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	4413      	add	r3, r2
 8004192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	0151      	lsls	r1, r2, #5
 800419c:	697a      	ldr	r2, [r7, #20]
 800419e:	440a      	add	r2, r1
 80041a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041a4:	0cdb      	lsrs	r3, r3, #19
 80041a6:	04db      	lsls	r3, r3, #19
 80041a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	015a      	lsls	r2, r3, #5
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	4413      	add	r3, r2
 80041b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	693a      	ldr	r2, [r7, #16]
 80041ba:	0151      	lsls	r1, r2, #5
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	440a      	add	r2, r1
 80041c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80041c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80041cc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d123      	bne.n	800421e <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	015a      	lsls	r2, r3, #5
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	4413      	add	r3, r2
 80041de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041e2:	691a      	ldr	r2, [r3, #16]
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041ec:	6939      	ldr	r1, [r7, #16]
 80041ee:	0148      	lsls	r0, r1, #5
 80041f0:	6979      	ldr	r1, [r7, #20]
 80041f2:	4401      	add	r1, r0
 80041f4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80041f8:	4313      	orrs	r3, r2
 80041fa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	015a      	lsls	r2, r3, #5
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	4413      	add	r3, r2
 8004204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	0151      	lsls	r1, r2, #5
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	440a      	add	r2, r1
 8004212:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004216:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800421a:	6113      	str	r3, [r2, #16]
 800421c:	e037      	b.n	800428e <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	699a      	ldr	r2, [r3, #24]
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	4413      	add	r3, r2
 8004228:	1e5a      	subs	r2, r3, #1
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004232:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	89fa      	ldrh	r2, [r7, #14]
 800423a:	fb03 f202 	mul.w	r2, r3, r2
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	015a      	lsls	r2, r3, #5
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	4413      	add	r3, r2
 800424a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800424e:	691a      	ldr	r2, [r3, #16]
 8004250:	89fb      	ldrh	r3, [r7, #14]
 8004252:	04d9      	lsls	r1, r3, #19
 8004254:	4b1c      	ldr	r3, [pc, #112]	; (80042c8 <USB_EPStartXfer+0x370>)
 8004256:	400b      	ands	r3, r1
 8004258:	6939      	ldr	r1, [r7, #16]
 800425a:	0148      	lsls	r0, r1, #5
 800425c:	6979      	ldr	r1, [r7, #20]
 800425e:	4401      	add	r1, r0
 8004260:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004264:	4313      	orrs	r3, r2
 8004266:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	015a      	lsls	r2, r3, #5
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	4413      	add	r3, r2
 8004270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004274:	691a      	ldr	r2, [r3, #16]
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	69db      	ldr	r3, [r3, #28]
 800427a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800427e:	6939      	ldr	r1, [r7, #16]
 8004280:	0148      	lsls	r0, r1, #5
 8004282:	6979      	ldr	r1, [r7, #20]
 8004284:	4401      	add	r1, r0
 8004286:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800428a:	4313      	orrs	r3, r2
 800428c:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	791b      	ldrb	r3, [r3, #4]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d12a      	bne.n	80042ec <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d112      	bne.n	80042cc <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	015a      	lsls	r2, r3, #5
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	4413      	add	r3, r2
 80042ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	693a      	ldr	r2, [r7, #16]
 80042b6:	0151      	lsls	r1, r2, #5
 80042b8:	697a      	ldr	r2, [r7, #20]
 80042ba:	440a      	add	r2, r1
 80042bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80042c4:	6013      	str	r3, [r2, #0]
 80042c6:	e011      	b.n	80042ec <USB_EPStartXfer+0x394>
 80042c8:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	015a      	lsls	r2, r3, #5
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	4413      	add	r3, r2
 80042d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	693a      	ldr	r2, [r7, #16]
 80042dc:	0151      	lsls	r1, r2, #5
 80042de:	697a      	ldr	r2, [r7, #20]
 80042e0:	440a      	add	r2, r1
 80042e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ea:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	015a      	lsls	r2, r3, #5
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	4413      	add	r3, r2
 80042f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	0151      	lsls	r1, r2, #5
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	440a      	add	r2, r1
 8004302:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004306:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800430a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3718      	adds	r7, #24
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop

08004318 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004318:	b480      	push	{r7}
 800431a:	b085      	sub	sp, #20
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	785b      	ldrb	r3, [r3, #1]
 8004330:	2b01      	cmp	r3, #1
 8004332:	f040 80ab 	bne.w	800448c <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d132      	bne.n	80043a4 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	015a      	lsls	r2, r3, #5
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	4413      	add	r3, r2
 8004346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	68ba      	ldr	r2, [r7, #8]
 800434e:	0151      	lsls	r1, r2, #5
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	440a      	add	r2, r1
 8004354:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004358:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800435c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004360:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	015a      	lsls	r2, r3, #5
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	4413      	add	r3, r2
 800436a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	68ba      	ldr	r2, [r7, #8]
 8004372:	0151      	lsls	r1, r2, #5
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	440a      	add	r2, r1
 8004378:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800437c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004380:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	015a      	lsls	r2, r3, #5
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	4413      	add	r3, r2
 800438a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	68ba      	ldr	r2, [r7, #8]
 8004392:	0151      	lsls	r1, r2, #5
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	440a      	add	r2, r1
 8004398:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800439c:	0cdb      	lsrs	r3, r3, #19
 800439e:	04db      	lsls	r3, r3, #19
 80043a0:	6113      	str	r3, [r2, #16]
 80043a2:	e04e      	b.n	8004442 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	015a      	lsls	r2, r3, #5
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	4413      	add	r3, r2
 80043ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	68ba      	ldr	r2, [r7, #8]
 80043b4:	0151      	lsls	r1, r2, #5
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	440a      	add	r2, r1
 80043ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043be:	0cdb      	lsrs	r3, r3, #19
 80043c0:	04db      	lsls	r3, r3, #19
 80043c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	015a      	lsls	r2, r3, #5
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	4413      	add	r3, r2
 80043cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	0151      	lsls	r1, r2, #5
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	440a      	add	r2, r1
 80043da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043de:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80043e2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80043e6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	699a      	ldr	r2, [r3, #24]
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d903      	bls.n	80043fc <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	68da      	ldr	r2, [r3, #12]
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	015a      	lsls	r2, r3, #5
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	4413      	add	r3, r2
 8004404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	68ba      	ldr	r2, [r7, #8]
 800440c:	0151      	lsls	r1, r2, #5
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	440a      	add	r2, r1
 8004412:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004416:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800441a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	015a      	lsls	r2, r3, #5
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	4413      	add	r3, r2
 8004424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004428:	691a      	ldr	r2, [r3, #16]
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004432:	68b9      	ldr	r1, [r7, #8]
 8004434:	0148      	lsls	r0, r1, #5
 8004436:	68f9      	ldr	r1, [r7, #12]
 8004438:	4401      	add	r1, r0
 800443a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800443e:	4313      	orrs	r3, r2
 8004440:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	015a      	lsls	r2, r3, #5
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	4413      	add	r3, r2
 800444a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68ba      	ldr	r2, [r7, #8]
 8004452:	0151      	lsls	r1, r2, #5
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	440a      	add	r2, r1
 8004458:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800445c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004460:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	699b      	ldr	r3, [r3, #24]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d071      	beq.n	800454e <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004470:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	f003 030f 	and.w	r3, r3, #15
 800447a:	2101      	movs	r1, #1
 800447c:	fa01 f303 	lsl.w	r3, r1, r3
 8004480:	68f9      	ldr	r1, [r7, #12]
 8004482:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004486:	4313      	orrs	r3, r2
 8004488:	634b      	str	r3, [r1, #52]	; 0x34
 800448a:	e060      	b.n	800454e <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	015a      	lsls	r2, r3, #5
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	4413      	add	r3, r2
 8004494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	68ba      	ldr	r2, [r7, #8]
 800449c:	0151      	lsls	r1, r2, #5
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	440a      	add	r2, r1
 80044a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044a6:	0cdb      	lsrs	r3, r3, #19
 80044a8:	04db      	lsls	r3, r3, #19
 80044aa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	015a      	lsls	r2, r3, #5
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	4413      	add	r3, r2
 80044b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	68ba      	ldr	r2, [r7, #8]
 80044bc:	0151      	lsls	r1, r2, #5
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	440a      	add	r2, r1
 80044c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044c6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80044ca:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80044ce:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d003      	beq.n	80044e0 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	68da      	ldr	r2, [r3, #12]
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	68da      	ldr	r2, [r3, #12]
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	015a      	lsls	r2, r3, #5
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	4413      	add	r3, r2
 80044f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	68ba      	ldr	r2, [r7, #8]
 80044f8:	0151      	lsls	r1, r2, #5
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	440a      	add	r2, r1
 80044fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004502:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004506:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	015a      	lsls	r2, r3, #5
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	4413      	add	r3, r2
 8004510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004514:	691a      	ldr	r2, [r3, #16]
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	69db      	ldr	r3, [r3, #28]
 800451a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800451e:	68b9      	ldr	r1, [r7, #8]
 8004520:	0148      	lsls	r0, r1, #5
 8004522:	68f9      	ldr	r1, [r7, #12]
 8004524:	4401      	add	r1, r0
 8004526:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800452a:	4313      	orrs	r3, r2
 800452c:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	015a      	lsls	r2, r3, #5
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	4413      	add	r3, r2
 8004536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68ba      	ldr	r2, [r7, #8]
 800453e:	0151      	lsls	r1, r2, #5
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	440a      	add	r2, r1
 8004544:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004548:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800454c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3714      	adds	r7, #20
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800455c:	b480      	push	{r7}
 800455e:	b087      	sub	sp, #28
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004566:	2300      	movs	r3, #0
 8004568:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800456a:	2300      	movs	r3, #0
 800456c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	785b      	ldrb	r3, [r3, #1]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d14a      	bne.n	8004610 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	015a      	lsls	r2, r3, #5
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	4413      	add	r3, r2
 8004584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800458e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004592:	f040 8086 	bne.w	80046a2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	015a      	lsls	r2, r3, #5
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	4413      	add	r3, r2
 80045a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	683a      	ldr	r2, [r7, #0]
 80045a8:	7812      	ldrb	r2, [r2, #0]
 80045aa:	0151      	lsls	r1, r2, #5
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	440a      	add	r2, r1
 80045b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80045b8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	015a      	lsls	r2, r3, #5
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	4413      	add	r3, r2
 80045c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	683a      	ldr	r2, [r7, #0]
 80045cc:	7812      	ldrb	r2, [r2, #0]
 80045ce:	0151      	lsls	r1, r2, #5
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	440a      	add	r2, r1
 80045d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80045dc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	3301      	adds	r3, #1
 80045e2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f242 7210 	movw	r2, #10000	; 0x2710
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d902      	bls.n	80045f4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	75fb      	strb	r3, [r7, #23]
          break;
 80045f2:	e056      	b.n	80046a2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	015a      	lsls	r2, r3, #5
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	4413      	add	r3, r2
 80045fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004608:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800460c:	d0e7      	beq.n	80045de <USB_EPStopXfer+0x82>
 800460e:	e048      	b.n	80046a2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	015a      	lsls	r2, r3, #5
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	4413      	add	r3, r2
 800461a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004624:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004628:	d13b      	bne.n	80046a2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	015a      	lsls	r2, r3, #5
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	4413      	add	r3, r2
 8004634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	683a      	ldr	r2, [r7, #0]
 800463c:	7812      	ldrb	r2, [r2, #0]
 800463e:	0151      	lsls	r1, r2, #5
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	440a      	add	r2, r1
 8004644:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004648:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800464c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	015a      	lsls	r2, r3, #5
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	4413      	add	r3, r2
 8004658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	683a      	ldr	r2, [r7, #0]
 8004660:	7812      	ldrb	r2, [r2, #0]
 8004662:	0151      	lsls	r1, r2, #5
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	440a      	add	r2, r1
 8004668:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800466c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004670:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	3301      	adds	r3, #1
 8004676:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f242 7210 	movw	r2, #10000	; 0x2710
 800467e:	4293      	cmp	r3, r2
 8004680:	d902      	bls.n	8004688 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	75fb      	strb	r3, [r7, #23]
          break;
 8004686:	e00c      	b.n	80046a2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	015a      	lsls	r2, r3, #5
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	4413      	add	r3, r2
 8004692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800469c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046a0:	d0e7      	beq.n	8004672 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80046a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	371c      	adds	r7, #28
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b089      	sub	sp, #36	; 0x24
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	4611      	mov	r1, r2
 80046bc:	461a      	mov	r2, r3
 80046be:	460b      	mov	r3, r1
 80046c0:	71fb      	strb	r3, [r7, #7]
 80046c2:	4613      	mov	r3, r2
 80046c4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80046ce:	88bb      	ldrh	r3, [r7, #4]
 80046d0:	3303      	adds	r3, #3
 80046d2:	089b      	lsrs	r3, r3, #2
 80046d4:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80046d6:	2300      	movs	r3, #0
 80046d8:	61bb      	str	r3, [r7, #24]
 80046da:	e018      	b.n	800470e <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80046dc:	79fb      	ldrb	r3, [r7, #7]
 80046de:	031a      	lsls	r2, r3, #12
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	4413      	add	r3, r2
 80046e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046e8:	461a      	mov	r2, r3
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	6013      	str	r3, [r2, #0]
    pSrc++;
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	3301      	adds	r3, #1
 80046f4:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	3301      	adds	r3, #1
 80046fa:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	3301      	adds	r3, #1
 8004700:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	3301      	adds	r3, #1
 8004706:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	3301      	adds	r3, #1
 800470c:	61bb      	str	r3, [r7, #24]
 800470e:	69ba      	ldr	r2, [r7, #24]
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	429a      	cmp	r2, r3
 8004714:	d3e2      	bcc.n	80046dc <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3724      	adds	r7, #36	; 0x24
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004724:	b480      	push	{r7}
 8004726:	b08b      	sub	sp, #44	; 0x2c
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	4613      	mov	r3, r2
 8004730:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800473a:	88fb      	ldrh	r3, [r7, #6]
 800473c:	089b      	lsrs	r3, r3, #2
 800473e:	b29b      	uxth	r3, r3
 8004740:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004742:	88fb      	ldrh	r3, [r7, #6]
 8004744:	f003 0303 	and.w	r3, r3, #3
 8004748:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800474a:	2300      	movs	r3, #0
 800474c:	623b      	str	r3, [r7, #32]
 800474e:	e014      	b.n	800477a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475a:	601a      	str	r2, [r3, #0]
    pDest++;
 800475c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475e:	3301      	adds	r3, #1
 8004760:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004764:	3301      	adds	r3, #1
 8004766:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476a:	3301      	adds	r3, #1
 800476c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800476e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004770:	3301      	adds	r3, #1
 8004772:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004774:	6a3b      	ldr	r3, [r7, #32]
 8004776:	3301      	adds	r3, #1
 8004778:	623b      	str	r3, [r7, #32]
 800477a:	6a3a      	ldr	r2, [r7, #32]
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	429a      	cmp	r2, r3
 8004780:	d3e6      	bcc.n	8004750 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004782:	8bfb      	ldrh	r3, [r7, #30]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d01e      	beq.n	80047c6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004788:	2300      	movs	r3, #0
 800478a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004792:	461a      	mov	r2, r3
 8004794:	f107 0310 	add.w	r3, r7, #16
 8004798:	6812      	ldr	r2, [r2, #0]
 800479a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800479c:	693a      	ldr	r2, [r7, #16]
 800479e:	6a3b      	ldr	r3, [r7, #32]
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	00db      	lsls	r3, r3, #3
 80047a4:	fa22 f303 	lsr.w	r3, r2, r3
 80047a8:	b2da      	uxtb	r2, r3
 80047aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ac:	701a      	strb	r2, [r3, #0]
      i++;
 80047ae:	6a3b      	ldr	r3, [r7, #32]
 80047b0:	3301      	adds	r3, #1
 80047b2:	623b      	str	r3, [r7, #32]
      pDest++;
 80047b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b6:	3301      	adds	r3, #1
 80047b8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80047ba:	8bfb      	ldrh	r3, [r7, #30]
 80047bc:	3b01      	subs	r3, #1
 80047be:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80047c0:	8bfb      	ldrh	r3, [r7, #30]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1ea      	bne.n	800479c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80047c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	372c      	adds	r7, #44	; 0x2c
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b085      	sub	sp, #20
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	785b      	ldrb	r3, [r3, #1]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d12c      	bne.n	800484a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	015a      	lsls	r2, r3, #5
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	4413      	add	r3, r2
 80047f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	db12      	blt.n	8004828 <USB_EPSetStall+0x54>
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d00f      	beq.n	8004828 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	015a      	lsls	r2, r3, #5
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	4413      	add	r3, r2
 8004810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68ba      	ldr	r2, [r7, #8]
 8004818:	0151      	lsls	r1, r2, #5
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	440a      	add	r2, r1
 800481e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004822:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004826:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	015a      	lsls	r2, r3, #5
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	4413      	add	r3, r2
 8004830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68ba      	ldr	r2, [r7, #8]
 8004838:	0151      	lsls	r1, r2, #5
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	440a      	add	r2, r1
 800483e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004842:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004846:	6013      	str	r3, [r2, #0]
 8004848:	e02b      	b.n	80048a2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	015a      	lsls	r2, r3, #5
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	4413      	add	r3, r2
 8004852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2b00      	cmp	r3, #0
 800485a:	db12      	blt.n	8004882 <USB_EPSetStall+0xae>
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00f      	beq.n	8004882 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	015a      	lsls	r2, r3, #5
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	4413      	add	r3, r2
 800486a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68ba      	ldr	r2, [r7, #8]
 8004872:	0151      	lsls	r1, r2, #5
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	440a      	add	r2, r1
 8004878:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800487c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004880:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	015a      	lsls	r2, r3, #5
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	4413      	add	r3, r2
 800488a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68ba      	ldr	r2, [r7, #8]
 8004892:	0151      	lsls	r1, r2, #5
 8004894:	68fa      	ldr	r2, [r7, #12]
 8004896:	440a      	add	r2, r1
 8004898:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800489c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80048a0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3714      	adds	r7, #20
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b085      	sub	sp, #20
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	785b      	ldrb	r3, [r3, #1]
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d128      	bne.n	800491e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	015a      	lsls	r2, r3, #5
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	4413      	add	r3, r2
 80048d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68ba      	ldr	r2, [r7, #8]
 80048dc:	0151      	lsls	r1, r2, #5
 80048de:	68fa      	ldr	r2, [r7, #12]
 80048e0:	440a      	add	r2, r1
 80048e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80048ea:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	791b      	ldrb	r3, [r3, #4]
 80048f0:	2b03      	cmp	r3, #3
 80048f2:	d003      	beq.n	80048fc <USB_EPClearStall+0x4c>
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	791b      	ldrb	r3, [r3, #4]
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d138      	bne.n	800496e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	015a      	lsls	r2, r3, #5
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	4413      	add	r3, r2
 8004904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68ba      	ldr	r2, [r7, #8]
 800490c:	0151      	lsls	r1, r2, #5
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	440a      	add	r2, r1
 8004912:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004916:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800491a:	6013      	str	r3, [r2, #0]
 800491c:	e027      	b.n	800496e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	015a      	lsls	r2, r3, #5
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	4413      	add	r3, r2
 8004926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68ba      	ldr	r2, [r7, #8]
 800492e:	0151      	lsls	r1, r2, #5
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	440a      	add	r2, r1
 8004934:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004938:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800493c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	791b      	ldrb	r3, [r3, #4]
 8004942:	2b03      	cmp	r3, #3
 8004944:	d003      	beq.n	800494e <USB_EPClearStall+0x9e>
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	791b      	ldrb	r3, [r3, #4]
 800494a:	2b02      	cmp	r3, #2
 800494c:	d10f      	bne.n	800496e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	015a      	lsls	r2, r3, #5
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	4413      	add	r3, r2
 8004956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68ba      	ldr	r2, [r7, #8]
 800495e:	0151      	lsls	r1, r2, #5
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	440a      	add	r2, r1
 8004964:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800496c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	3714      	adds	r7, #20
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800497c:	b480      	push	{r7}
 800497e:	b085      	sub	sp, #20
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	460b      	mov	r3, r1
 8004986:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800499a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800499e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	78fb      	ldrb	r3, [r7, #3]
 80049aa:	011b      	lsls	r3, r3, #4
 80049ac:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80049b0:	68f9      	ldr	r1, [r7, #12]
 80049b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049b6:	4313      	orrs	r3, r2
 80049b8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3714      	adds	r7, #20
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80049e2:	f023 0303 	bic.w	r3, r3, #3
 80049e6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049f6:	f023 0302 	bic.w	r3, r3, #2
 80049fa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3714      	adds	r7, #20
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr

08004a0a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b085      	sub	sp, #20
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004a24:	f023 0303 	bic.w	r3, r3, #3
 8004a28:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a38:	f043 0302 	orr.w	r3, r3, #2
 8004a3c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3714      	adds	r7, #20
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b085      	sub	sp, #20
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	695b      	ldr	r3, [r3, #20]
 8004a58:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	4013      	ands	r3, r2
 8004a62:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004a64:	68fb      	ldr	r3, [r7, #12]
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3714      	adds	r7, #20
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr

08004a72 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a72:	b480      	push	{r7}
 8004a74:	b085      	sub	sp, #20
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a8e:	69db      	ldr	r3, [r3, #28]
 8004a90:	68ba      	ldr	r2, [r7, #8]
 8004a92:	4013      	ands	r3, r2
 8004a94:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	0c1b      	lsrs	r3, r3, #16
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3714      	adds	r7, #20
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr

08004aa6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	b085      	sub	sp, #20
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ac2:	69db      	ldr	r3, [r3, #28]
 8004ac4:	68ba      	ldr	r2, [r7, #8]
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	b29b      	uxth	r3, r3
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3714      	adds	r7, #20
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr

08004ada <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004ada:	b480      	push	{r7}
 8004adc:	b085      	sub	sp, #20
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004aea:	78fb      	ldrb	r3, [r7, #3]
 8004aec:	015a      	lsls	r2, r3, #5
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	4413      	add	r3, r2
 8004af2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b00:	695b      	ldr	r3, [r3, #20]
 8004b02:	68ba      	ldr	r2, [r7, #8]
 8004b04:	4013      	ands	r3, r2
 8004b06:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004b08:	68bb      	ldr	r3, [r7, #8]
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3714      	adds	r7, #20
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr

08004b16 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004b16:	b480      	push	{r7}
 8004b18:	b087      	sub	sp, #28
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
 8004b1e:	460b      	mov	r3, r1
 8004b20:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b38:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004b3a:	78fb      	ldrb	r3, [r7, #3]
 8004b3c:	f003 030f 	and.w	r3, r3, #15
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	fa22 f303 	lsr.w	r3, r2, r3
 8004b46:	01db      	lsls	r3, r3, #7
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	693a      	ldr	r2, [r7, #16]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004b50:	78fb      	ldrb	r3, [r7, #3]
 8004b52:	015a      	lsls	r2, r3, #5
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	4413      	add	r3, r2
 8004b58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	4013      	ands	r3, r2
 8004b62:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004b64:	68bb      	ldr	r3, [r7, #8]
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	371c      	adds	r7, #28
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr

08004b72 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004b72:	b480      	push	{r7}
 8004b74:	b083      	sub	sp, #12
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	f003 0301 	and.w	r3, r3, #1
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	370c      	adds	r7, #12
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr

08004b8e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004b8e:	b480      	push	{r7}
 8004b90:	b085      	sub	sp, #20
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ba8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004bac:	f023 0307 	bic.w	r3, r3, #7
 8004bb0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bc4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3714      	adds	r7, #20
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	333c      	adds	r3, #60	; 0x3c
 8004be6:	3304      	adds	r3, #4
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	4a1c      	ldr	r2, [pc, #112]	; (8004c60 <USB_EP0_OutStart+0x8c>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d90a      	bls.n	8004c0a <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c04:	d101      	bne.n	8004c0a <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8004c06:	2300      	movs	r3, #0
 8004c08:	e024      	b.n	8004c54 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c10:	461a      	mov	r2, r3
 8004c12:	2300      	movs	r3, #0
 8004c14:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c28:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c38:	f043 0318 	orr.w	r3, r3, #24
 8004c3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c4c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004c50:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3714      	adds	r7, #20
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr
 8004c60:	4f54300a 	.word	0x4f54300a

08004c64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	3301      	adds	r3, #1
 8004c74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	4a13      	ldr	r2, [pc, #76]	; (8004cc8 <USB_CoreReset+0x64>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d901      	bls.n	8004c82 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e01b      	b.n	8004cba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	daf2      	bge.n	8004c70 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	f043 0201 	orr.w	r2, r3, #1
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	4a09      	ldr	r2, [pc, #36]	; (8004cc8 <USB_CoreReset+0x64>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d901      	bls.n	8004cac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e006      	b.n	8004cba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	f003 0301 	and.w	r3, r3, #1
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d0f0      	beq.n	8004c9a <USB_CoreReset+0x36>

  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3714      	adds	r7, #20
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	00030d40 	.word	0x00030d40

08004ccc <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8004cd8:	2010      	movs	r0, #16
 8004cda:	f002 f88f 	bl	8006dfc <USBD_static_malloc>
 8004cde:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d105      	bne.n	8004cf2 <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004cee:	2302      	movs	r3, #2
 8004cf0:	e01b      	b.n	8004d2a <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	7c1b      	ldrb	r3, [r3, #16]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d103      	bne.n	8004d0a <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2207      	movs	r2, #7
 8004d06:	875a      	strh	r2, [r3, #58]	; 0x3a
 8004d08:	e002      	b.n	8004d10 <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	220a      	movs	r2, #10
 8004d0e:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8004d10:	2304      	movs	r3, #4
 8004d12:	2203      	movs	r2, #3
 8004d14:	2181      	movs	r1, #129	; 0x81
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f001 fe70 	bl	80069fc <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3710      	adds	r7, #16
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b082      	sub	sp, #8
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
 8004d3a:	460b      	mov	r3, r1
 8004d3c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8004d3e:	2181      	movs	r1, #129	; 0x81
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f001 fe99 	bl	8006a78 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d009      	beq.n	8004d70 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004d62:	4618      	mov	r0, r3
 8004d64:	f002 f858 	bl	8006e18 <USBD_static_free>
    pdev->pClassData = NULL;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3708      	adds	r7, #8
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
	...

08004d7c <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b086      	sub	sp, #24
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004d8c:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8004d92:	2300      	movs	r3, #0
 8004d94:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d101      	bne.n	8004da0 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	e0e8      	b.n	8004f72 <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d046      	beq.n	8004e3a <USBD_HID_Setup+0xbe>
 8004dac:	2b20      	cmp	r3, #32
 8004dae:	f040 80d8 	bne.w	8004f62 <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	785b      	ldrb	r3, [r3, #1]
 8004db6:	3b02      	subs	r3, #2
 8004db8:	2b09      	cmp	r3, #9
 8004dba:	d836      	bhi.n	8004e2a <USBD_HID_Setup+0xae>
 8004dbc:	a201      	add	r2, pc, #4	; (adr r2, 8004dc4 <USBD_HID_Setup+0x48>)
 8004dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc2:	bf00      	nop
 8004dc4:	08004e1b 	.word	0x08004e1b
 8004dc8:	08004dfb 	.word	0x08004dfb
 8004dcc:	08004e2b 	.word	0x08004e2b
 8004dd0:	08004e2b 	.word	0x08004e2b
 8004dd4:	08004e2b 	.word	0x08004e2b
 8004dd8:	08004e2b 	.word	0x08004e2b
 8004ddc:	08004e2b 	.word	0x08004e2b
 8004de0:	08004e2b 	.word	0x08004e2b
 8004de4:	08004e09 	.word	0x08004e09
 8004de8:	08004ded 	.word	0x08004ded
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	885b      	ldrh	r3, [r3, #2]
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	461a      	mov	r2, r3
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	601a      	str	r2, [r3, #0]
          break;
 8004df8:	e01e      	b.n	8004e38 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	4619      	mov	r1, r3
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f001 fa4c 	bl	800629e <USBD_CtlSendData>
          break;
 8004e06:	e017      	b.n	8004e38 <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	885b      	ldrh	r3, [r3, #2]
 8004e0c:	0a1b      	lsrs	r3, r3, #8
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	461a      	mov	r2, r3
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	605a      	str	r2, [r3, #4]
          break;
 8004e18:	e00e      	b.n	8004e38 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	3304      	adds	r3, #4
 8004e1e:	2201      	movs	r2, #1
 8004e20:	4619      	mov	r1, r3
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f001 fa3b 	bl	800629e <USBD_CtlSendData>
          break;
 8004e28:	e006      	b.n	8004e38 <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8004e2a:	6839      	ldr	r1, [r7, #0]
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f001 f9c5 	bl	80061bc <USBD_CtlError>
          ret = USBD_FAIL;
 8004e32:	2303      	movs	r3, #3
 8004e34:	75fb      	strb	r3, [r7, #23]
          break;
 8004e36:	bf00      	nop
      }
      break;
 8004e38:	e09a      	b.n	8004f70 <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	785b      	ldrb	r3, [r3, #1]
 8004e3e:	2b0b      	cmp	r3, #11
 8004e40:	f200 8086 	bhi.w	8004f50 <USBD_HID_Setup+0x1d4>
 8004e44:	a201      	add	r2, pc, #4	; (adr r2, 8004e4c <USBD_HID_Setup+0xd0>)
 8004e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e4a:	bf00      	nop
 8004e4c:	08004e7d 	.word	0x08004e7d
 8004e50:	08004f5f 	.word	0x08004f5f
 8004e54:	08004f51 	.word	0x08004f51
 8004e58:	08004f51 	.word	0x08004f51
 8004e5c:	08004f51 	.word	0x08004f51
 8004e60:	08004f51 	.word	0x08004f51
 8004e64:	08004ea7 	.word	0x08004ea7
 8004e68:	08004f51 	.word	0x08004f51
 8004e6c:	08004f51 	.word	0x08004f51
 8004e70:	08004f51 	.word	0x08004f51
 8004e74:	08004eff 	.word	0x08004eff
 8004e78:	08004f29 	.word	0x08004f29
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	2b03      	cmp	r3, #3
 8004e86:	d107      	bne.n	8004e98 <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004e88:	f107 030a 	add.w	r3, r7, #10
 8004e8c:	2202      	movs	r2, #2
 8004e8e:	4619      	mov	r1, r3
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f001 fa04 	bl	800629e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004e96:	e063      	b.n	8004f60 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8004e98:	6839      	ldr	r1, [r7, #0]
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f001 f98e 	bl	80061bc <USBD_CtlError>
            ret = USBD_FAIL;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	75fb      	strb	r3, [r7, #23]
          break;
 8004ea4:	e05c      	b.n	8004f60 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	885b      	ldrh	r3, [r3, #2]
 8004eaa:	0a1b      	lsrs	r3, r3, #8
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	2b22      	cmp	r3, #34	; 0x22
 8004eb0:	d108      	bne.n	8004ec4 <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	88db      	ldrh	r3, [r3, #6]
 8004eb6:	2b3f      	cmp	r3, #63	; 0x3f
 8004eb8:	bf28      	it	cs
 8004eba:	233f      	movcs	r3, #63	; 0x3f
 8004ebc:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8004ebe:	4b2f      	ldr	r3, [pc, #188]	; (8004f7c <USBD_HID_Setup+0x200>)
 8004ec0:	613b      	str	r3, [r7, #16]
 8004ec2:	e015      	b.n	8004ef0 <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	885b      	ldrh	r3, [r3, #2]
 8004ec8:	0a1b      	lsrs	r3, r3, #8
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	2b21      	cmp	r3, #33	; 0x21
 8004ece:	d108      	bne.n	8004ee2 <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 8004ed0:	4b2b      	ldr	r3, [pc, #172]	; (8004f80 <USBD_HID_Setup+0x204>)
 8004ed2:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	88db      	ldrh	r3, [r3, #6]
 8004ed8:	2b09      	cmp	r3, #9
 8004eda:	bf28      	it	cs
 8004edc:	2309      	movcs	r3, #9
 8004ede:	82bb      	strh	r3, [r7, #20]
 8004ee0:	e006      	b.n	8004ef0 <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8004ee2:	6839      	ldr	r1, [r7, #0]
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f001 f969 	bl	80061bc <USBD_CtlError>
            ret = USBD_FAIL;
 8004eea:	2303      	movs	r3, #3
 8004eec:	75fb      	strb	r3, [r7, #23]
            break;
 8004eee:	e037      	b.n	8004f60 <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8004ef0:	8abb      	ldrh	r3, [r7, #20]
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	6939      	ldr	r1, [r7, #16]
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f001 f9d1 	bl	800629e <USBD_CtlSendData>
          break;
 8004efc:	e030      	b.n	8004f60 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b03      	cmp	r3, #3
 8004f08:	d107      	bne.n	8004f1a <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	3308      	adds	r3, #8
 8004f0e:	2201      	movs	r2, #1
 8004f10:	4619      	mov	r1, r3
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f001 f9c3 	bl	800629e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004f18:	e022      	b.n	8004f60 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8004f1a:	6839      	ldr	r1, [r7, #0]
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f001 f94d 	bl	80061bc <USBD_CtlError>
            ret = USBD_FAIL;
 8004f22:	2303      	movs	r3, #3
 8004f24:	75fb      	strb	r3, [r7, #23]
          break;
 8004f26:	e01b      	b.n	8004f60 <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	2b03      	cmp	r3, #3
 8004f32:	d106      	bne.n	8004f42 <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	885b      	ldrh	r3, [r3, #2]
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004f40:	e00e      	b.n	8004f60 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8004f42:	6839      	ldr	r1, [r7, #0]
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f001 f939 	bl	80061bc <USBD_CtlError>
            ret = USBD_FAIL;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	75fb      	strb	r3, [r7, #23]
          break;
 8004f4e:	e007      	b.n	8004f60 <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004f50:	6839      	ldr	r1, [r7, #0]
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f001 f932 	bl	80061bc <USBD_CtlError>
          ret = USBD_FAIL;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	75fb      	strb	r3, [r7, #23]
          break;
 8004f5c:	e000      	b.n	8004f60 <USBD_HID_Setup+0x1e4>
          break;
 8004f5e:	bf00      	nop
      }
      break;
 8004f60:	e006      	b.n	8004f70 <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 8004f62:	6839      	ldr	r1, [r7, #0]
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f001 f929 	bl	80061bc <USBD_CtlError>
      ret = USBD_FAIL;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	75fb      	strb	r3, [r7, #23]
      break;
 8004f6e:	bf00      	nop
  }

  return (uint8_t)ret;
 8004f70:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3718      	adds	r7, #24
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	200000c8 	.word	0x200000c8
 8004f80:	200000b0 	.word	0x200000b0

08004f84 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b086      	sub	sp, #24
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	4613      	mov	r3, r2
 8004f90:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f98:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d101      	bne.n	8004fa4 <USBD_HID_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e013      	b.n	8004fcc <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	2b03      	cmp	r3, #3
 8004fae:	d10c      	bne.n	8004fca <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	7b1b      	ldrb	r3, [r3, #12]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d108      	bne.n	8004fca <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 8004fbe:	88fb      	ldrh	r3, [r7, #6]
 8004fc0:	68ba      	ldr	r2, [r7, #8]
 8004fc2:	2181      	movs	r1, #129	; 0x81
 8004fc4:	68f8      	ldr	r0, [r7, #12]
 8004fc6:	f001 fe5b 	bl	8006c80 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3718      	adds	r7, #24
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2222      	movs	r2, #34	; 0x22
 8004fe0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8004fe2:	4b03      	ldr	r3, [pc, #12]	; (8004ff0 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr
 8004ff0:	20000044 	.word	0x20000044

08004ff4 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2222      	movs	r2, #34	; 0x22
 8005000:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 8005002:	4b03      	ldr	r3, [pc, #12]	; (8005010 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8005004:	4618      	mov	r0, r3
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr
 8005010:	20000068 	.word	0x20000068

08005014 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2222      	movs	r2, #34	; 0x22
 8005020:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8005022:	4b03      	ldr	r3, [pc, #12]	; (8005030 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8005024:	4618      	mov	r0, r3
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr
 8005030:	2000008c 	.word	0x2000008c

08005034 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	460b      	mov	r3, r1
 800503e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005046:	2200      	movs	r2, #0
 8005048:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	220a      	movs	r2, #10
 8005064:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8005066:	4b03      	ldr	r3, [pc, #12]	; (8005074 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005068:	4618      	mov	r0, r3
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr
 8005074:	200000bc 	.word	0x200000bc

08005078 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b086      	sub	sp, #24
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	4613      	mov	r3, r2
 8005084:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d101      	bne.n	8005090 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800508c:	2303      	movs	r3, #3
 800508e:	e01f      	b.n	80050d0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2200      	movs	r2, #0
 8005094:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d003      	beq.n	80050b6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	68ba      	ldr	r2, [r7, #8]
 80050b2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	79fa      	ldrb	r2, [r7, #7]
 80050c2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80050c4:	68f8      	ldr	r0, [r7, #12]
 80050c6:	f001 fc1b 	bl	8006900 <USBD_LL_Init>
 80050ca:	4603      	mov	r3, r0
 80050cc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80050ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3718      	adds	r7, #24
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80050e2:	2300      	movs	r3, #0
 80050e4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d101      	bne.n	80050f0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80050ec:	2303      	movs	r3, #3
 80050ee:	e016      	b.n	800511e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	683a      	ldr	r2, [r7, #0]
 80050f4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005100:	2b00      	cmp	r3, #0
 8005102:	d00b      	beq.n	800511c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800510a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510c:	f107 020e 	add.w	r2, r7, #14
 8005110:	4610      	mov	r0, r2
 8005112:	4798      	blx	r3
 8005114:	4602      	mov	r2, r0
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3710      	adds	r7, #16
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}

08005126 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005126:	b580      	push	{r7, lr}
 8005128:	b082      	sub	sp, #8
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f001 fc32 	bl	8006998 <USBD_LL_Start>
 8005134:	4603      	mov	r3, r0
}
 8005136:	4618      	mov	r0, r3
 8005138:	3708      	adds	r7, #8
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}

0800513e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800513e:	b480      	push	{r7}
 8005140:	b083      	sub	sp, #12
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005146:	2300      	movs	r3, #0
}
 8005148:	4618      	mov	r0, r3
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	460b      	mov	r3, r1
 800515e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005160:	2303      	movs	r3, #3
 8005162:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800516a:	2b00      	cmp	r3, #0
 800516c:	d009      	beq.n	8005182 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	78fa      	ldrb	r2, [r7, #3]
 8005178:	4611      	mov	r1, r2
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	4798      	blx	r3
 800517e:	4603      	mov	r3, r0
 8005180:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005182:	7bfb      	ldrb	r3, [r7, #15]
}
 8005184:	4618      	mov	r0, r3
 8005186:	3710      	adds	r7, #16
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	460b      	mov	r3, r1
 8005196:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d007      	beq.n	80051b2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	78fa      	ldrb	r2, [r7, #3]
 80051ac:	4611      	mov	r1, r2
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	4798      	blx	r3
  }

  return USBD_OK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3708      	adds	r7, #8
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80051cc:	6839      	ldr	r1, [r7, #0]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f000 ffba 	bl	8006148 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80051e2:	461a      	mov	r2, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80051f0:	f003 031f 	and.w	r3, r3, #31
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d01a      	beq.n	800522e <USBD_LL_SetupStage+0x72>
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d822      	bhi.n	8005242 <USBD_LL_SetupStage+0x86>
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d002      	beq.n	8005206 <USBD_LL_SetupStage+0x4a>
 8005200:	2b01      	cmp	r3, #1
 8005202:	d00a      	beq.n	800521a <USBD_LL_SetupStage+0x5e>
 8005204:	e01d      	b.n	8005242 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800520c:	4619      	mov	r1, r3
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 fa62 	bl	80056d8 <USBD_StdDevReq>
 8005214:	4603      	mov	r3, r0
 8005216:	73fb      	strb	r3, [r7, #15]
      break;
 8005218:	e020      	b.n	800525c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005220:	4619      	mov	r1, r3
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 fac6 	bl	80057b4 <USBD_StdItfReq>
 8005228:	4603      	mov	r3, r0
 800522a:	73fb      	strb	r3, [r7, #15]
      break;
 800522c:	e016      	b.n	800525c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005234:	4619      	mov	r1, r3
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 fb05 	bl	8005846 <USBD_StdEPReq>
 800523c:	4603      	mov	r3, r0
 800523e:	73fb      	strb	r3, [r7, #15]
      break;
 8005240:	e00c      	b.n	800525c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005248:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800524c:	b2db      	uxtb	r3, r3
 800524e:	4619      	mov	r1, r3
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f001 fc47 	bl	8006ae4 <USBD_LL_StallEP>
 8005256:	4603      	mov	r3, r0
 8005258:	73fb      	strb	r3, [r7, #15]
      break;
 800525a:	bf00      	nop
  }

  return ret;
 800525c:	7bfb      	ldrb	r3, [r7, #15]
}
 800525e:	4618      	mov	r0, r3
 8005260:	3710      	adds	r7, #16
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005266:	b580      	push	{r7, lr}
 8005268:	b086      	sub	sp, #24
 800526a:	af00      	add	r7, sp, #0
 800526c:	60f8      	str	r0, [r7, #12]
 800526e:	460b      	mov	r3, r1
 8005270:	607a      	str	r2, [r7, #4]
 8005272:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005274:	7afb      	ldrb	r3, [r7, #11]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d138      	bne.n	80052ec <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005280:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005288:	2b03      	cmp	r3, #3
 800528a:	d14a      	bne.n	8005322 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	689a      	ldr	r2, [r3, #8]
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	429a      	cmp	r2, r3
 8005296:	d913      	bls.n	80052c0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	689a      	ldr	r2, [r3, #8]
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	1ad2      	subs	r2, r2, r3
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	68da      	ldr	r2, [r3, #12]
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	4293      	cmp	r3, r2
 80052b0:	bf28      	it	cs
 80052b2:	4613      	movcs	r3, r2
 80052b4:	461a      	mov	r2, r3
 80052b6:	6879      	ldr	r1, [r7, #4]
 80052b8:	68f8      	ldr	r0, [r7, #12]
 80052ba:	f001 f81c 	bl	80062f6 <USBD_CtlContinueRx>
 80052be:	e030      	b.n	8005322 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	2b03      	cmp	r3, #3
 80052ca:	d10b      	bne.n	80052e4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d005      	beq.n	80052e4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052de:	691b      	ldr	r3, [r3, #16]
 80052e0:	68f8      	ldr	r0, [r7, #12]
 80052e2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80052e4:	68f8      	ldr	r0, [r7, #12]
 80052e6:	f001 f817 	bl	8006318 <USBD_CtlSendStatus>
 80052ea:	e01a      	b.n	8005322 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	2b03      	cmp	r3, #3
 80052f6:	d114      	bne.n	8005322 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052fe:	699b      	ldr	r3, [r3, #24]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d00e      	beq.n	8005322 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800530a:	699b      	ldr	r3, [r3, #24]
 800530c:	7afa      	ldrb	r2, [r7, #11]
 800530e:	4611      	mov	r1, r2
 8005310:	68f8      	ldr	r0, [r7, #12]
 8005312:	4798      	blx	r3
 8005314:	4603      	mov	r3, r0
 8005316:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005318:	7dfb      	ldrb	r3, [r7, #23]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d001      	beq.n	8005322 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800531e:	7dfb      	ldrb	r3, [r7, #23]
 8005320:	e000      	b.n	8005324 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	3718      	adds	r7, #24
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b086      	sub	sp, #24
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	460b      	mov	r3, r1
 8005336:	607a      	str	r2, [r7, #4]
 8005338:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800533a:	7afb      	ldrb	r3, [r7, #11]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d16b      	bne.n	8005418 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	3314      	adds	r3, #20
 8005344:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800534c:	2b02      	cmp	r3, #2
 800534e:	d156      	bne.n	80053fe <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	689a      	ldr	r2, [r3, #8]
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	429a      	cmp	r2, r3
 800535a:	d914      	bls.n	8005386 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	689a      	ldr	r2, [r3, #8]
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	1ad2      	subs	r2, r2, r3
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	461a      	mov	r2, r3
 8005370:	6879      	ldr	r1, [r7, #4]
 8005372:	68f8      	ldr	r0, [r7, #12]
 8005374:	f000 ffae 	bl	80062d4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005378:	2300      	movs	r3, #0
 800537a:	2200      	movs	r2, #0
 800537c:	2100      	movs	r1, #0
 800537e:	68f8      	ldr	r0, [r7, #12]
 8005380:	f001 fcb6 	bl	8006cf0 <USBD_LL_PrepareReceive>
 8005384:	e03b      	b.n	80053fe <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	68da      	ldr	r2, [r3, #12]
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	429a      	cmp	r2, r3
 8005390:	d11c      	bne.n	80053cc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	685a      	ldr	r2, [r3, #4]
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800539a:	429a      	cmp	r2, r3
 800539c:	d316      	bcc.n	80053cc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	685a      	ldr	r2, [r3, #4]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d20f      	bcs.n	80053cc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80053ac:	2200      	movs	r2, #0
 80053ae:	2100      	movs	r1, #0
 80053b0:	68f8      	ldr	r0, [r7, #12]
 80053b2:	f000 ff8f 	bl	80062d4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80053be:	2300      	movs	r3, #0
 80053c0:	2200      	movs	r2, #0
 80053c2:	2100      	movs	r1, #0
 80053c4:	68f8      	ldr	r0, [r7, #12]
 80053c6:	f001 fc93 	bl	8006cf0 <USBD_LL_PrepareReceive>
 80053ca:	e018      	b.n	80053fe <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	2b03      	cmp	r3, #3
 80053d6:	d10b      	bne.n	80053f0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d005      	beq.n	80053f0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	68f8      	ldr	r0, [r7, #12]
 80053ee:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80053f0:	2180      	movs	r1, #128	; 0x80
 80053f2:	68f8      	ldr	r0, [r7, #12]
 80053f4:	f001 fb76 	bl	8006ae4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80053f8:	68f8      	ldr	r0, [r7, #12]
 80053fa:	f000 ffa0 	bl	800633e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005404:	2b01      	cmp	r3, #1
 8005406:	d122      	bne.n	800544e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005408:	68f8      	ldr	r0, [r7, #12]
 800540a:	f7ff fe98 	bl	800513e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005416:	e01a      	b.n	800544e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800541e:	b2db      	uxtb	r3, r3
 8005420:	2b03      	cmp	r3, #3
 8005422:	d114      	bne.n	800544e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800542a:	695b      	ldr	r3, [r3, #20]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d00e      	beq.n	800544e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005436:	695b      	ldr	r3, [r3, #20]
 8005438:	7afa      	ldrb	r2, [r7, #11]
 800543a:	4611      	mov	r1, r2
 800543c:	68f8      	ldr	r0, [r7, #12]
 800543e:	4798      	blx	r3
 8005440:	4603      	mov	r3, r0
 8005442:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005444:	7dfb      	ldrb	r3, [r7, #23]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d001      	beq.n	800544e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800544a:	7dfb      	ldrb	r3, [r7, #23]
 800544c:	e000      	b.n	8005450 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	3718      	adds	r7, #24
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}

08005458 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b082      	sub	sp, #8
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005484:	2b00      	cmp	r3, #0
 8005486:	d101      	bne.n	800548c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8005488:	2303      	movs	r3, #3
 800548a:	e02f      	b.n	80054ec <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00f      	beq.n	80054b6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d009      	beq.n	80054b6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	6852      	ldr	r2, [r2, #4]
 80054ae:	b2d2      	uxtb	r2, r2
 80054b0:	4611      	mov	r1, r2
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80054b6:	2340      	movs	r3, #64	; 0x40
 80054b8:	2200      	movs	r2, #0
 80054ba:	2100      	movs	r1, #0
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f001 fa9d 	bl	80069fc <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2201      	movs	r2, #1
 80054c6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2240      	movs	r2, #64	; 0x40
 80054ce:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80054d2:	2340      	movs	r3, #64	; 0x40
 80054d4:	2200      	movs	r2, #0
 80054d6:	2180      	movs	r1, #128	; 0x80
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f001 fa8f 	bl	80069fc <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2201      	movs	r2, #1
 80054e2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2240      	movs	r2, #64	; 0x40
 80054e8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3708      	adds	r7, #8
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	460b      	mov	r3, r1
 80054fe:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	78fa      	ldrb	r2, [r7, #3]
 8005504:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	370c      	adds	r7, #12
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005522:	b2da      	uxtb	r2, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2204      	movs	r2, #4
 800552e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005532:	2300      	movs	r3, #0
}
 8005534:	4618      	mov	r0, r3
 8005536:	370c      	adds	r7, #12
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800554e:	b2db      	uxtb	r3, r3
 8005550:	2b04      	cmp	r3, #4
 8005552:	d106      	bne.n	8005562 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800555a:	b2da      	uxtb	r2, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005562:	2300      	movs	r3, #0
}
 8005564:	4618      	mov	r0, r3
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b082      	sub	sp, #8
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800557e:	2b00      	cmp	r3, #0
 8005580:	d101      	bne.n	8005586 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8005582:	2303      	movs	r3, #3
 8005584:	e012      	b.n	80055ac <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800558c:	b2db      	uxtb	r3, r3
 800558e:	2b03      	cmp	r3, #3
 8005590:	d10b      	bne.n	80055aa <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005598:	69db      	ldr	r3, [r3, #28]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d005      	beq.n	80055aa <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055a4:	69db      	ldr	r3, [r3, #28]
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80055aa:	2300      	movs	r3, #0
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3708      	adds	r7, #8
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	460b      	mov	r3, r1
 80055be:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d101      	bne.n	80055ce <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80055ca:	2303      	movs	r3, #3
 80055cc:	e014      	b.n	80055f8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	2b03      	cmp	r3, #3
 80055d8:	d10d      	bne.n	80055f6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d007      	beq.n	80055f6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	78fa      	ldrb	r2, [r7, #3]
 80055f0:	4611      	mov	r1, r2
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80055f6:	2300      	movs	r3, #0
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3708      	adds	r7, #8
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	460b      	mov	r3, r1
 800560a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005612:	2b00      	cmp	r3, #0
 8005614:	d101      	bne.n	800561a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005616:	2303      	movs	r3, #3
 8005618:	e014      	b.n	8005644 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005620:	b2db      	uxtb	r3, r3
 8005622:	2b03      	cmp	r3, #3
 8005624:	d10d      	bne.n	8005642 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800562c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562e:	2b00      	cmp	r3, #0
 8005630:	d007      	beq.n	8005642 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563a:	78fa      	ldrb	r2, [r7, #3]
 800563c:	4611      	mov	r1, r2
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	3708      	adds	r7, #8
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	370c      	adds	r7, #12
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr

08005662 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005662:	b580      	push	{r7, lr}
 8005664:	b082      	sub	sp, #8
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2201      	movs	r2, #1
 800566e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005678:	2b00      	cmp	r3, #0
 800567a:	d009      	beq.n	8005690 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	6852      	ldr	r2, [r2, #4]
 8005688:	b2d2      	uxtb	r2, r2
 800568a:	4611      	mov	r1, r2
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	4798      	blx	r3
  }

  return USBD_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3708      	adds	r7, #8
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800569a:	b480      	push	{r7}
 800569c:	b087      	sub	sp, #28
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	3301      	adds	r3, #1
 80056b0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80056b8:	8a3b      	ldrh	r3, [r7, #16]
 80056ba:	021b      	lsls	r3, r3, #8
 80056bc:	b21a      	sxth	r2, r3
 80056be:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	b21b      	sxth	r3, r3
 80056c6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80056c8:	89fb      	ldrh	r3, [r7, #14]
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	371c      	adds	r7, #28
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
	...

080056d8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80056e2:	2300      	movs	r3, #0
 80056e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80056ee:	2b40      	cmp	r3, #64	; 0x40
 80056f0:	d005      	beq.n	80056fe <USBD_StdDevReq+0x26>
 80056f2:	2b40      	cmp	r3, #64	; 0x40
 80056f4:	d853      	bhi.n	800579e <USBD_StdDevReq+0xc6>
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00b      	beq.n	8005712 <USBD_StdDevReq+0x3a>
 80056fa:	2b20      	cmp	r3, #32
 80056fc:	d14f      	bne.n	800579e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	6839      	ldr	r1, [r7, #0]
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	4798      	blx	r3
 800570c:	4603      	mov	r3, r0
 800570e:	73fb      	strb	r3, [r7, #15]
      break;
 8005710:	e04a      	b.n	80057a8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	785b      	ldrb	r3, [r3, #1]
 8005716:	2b09      	cmp	r3, #9
 8005718:	d83b      	bhi.n	8005792 <USBD_StdDevReq+0xba>
 800571a:	a201      	add	r2, pc, #4	; (adr r2, 8005720 <USBD_StdDevReq+0x48>)
 800571c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005720:	08005775 	.word	0x08005775
 8005724:	08005789 	.word	0x08005789
 8005728:	08005793 	.word	0x08005793
 800572c:	0800577f 	.word	0x0800577f
 8005730:	08005793 	.word	0x08005793
 8005734:	08005753 	.word	0x08005753
 8005738:	08005749 	.word	0x08005749
 800573c:	08005793 	.word	0x08005793
 8005740:	0800576b 	.word	0x0800576b
 8005744:	0800575d 	.word	0x0800575d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005748:	6839      	ldr	r1, [r7, #0]
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 f9de 	bl	8005b0c <USBD_GetDescriptor>
          break;
 8005750:	e024      	b.n	800579c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005752:	6839      	ldr	r1, [r7, #0]
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 fb6d 	bl	8005e34 <USBD_SetAddress>
          break;
 800575a:	e01f      	b.n	800579c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800575c:	6839      	ldr	r1, [r7, #0]
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 fbac 	bl	8005ebc <USBD_SetConfig>
 8005764:	4603      	mov	r3, r0
 8005766:	73fb      	strb	r3, [r7, #15]
          break;
 8005768:	e018      	b.n	800579c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800576a:	6839      	ldr	r1, [r7, #0]
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 fc4b 	bl	8006008 <USBD_GetConfig>
          break;
 8005772:	e013      	b.n	800579c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005774:	6839      	ldr	r1, [r7, #0]
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 fc7c 	bl	8006074 <USBD_GetStatus>
          break;
 800577c:	e00e      	b.n	800579c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800577e:	6839      	ldr	r1, [r7, #0]
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f000 fcab 	bl	80060dc <USBD_SetFeature>
          break;
 8005786:	e009      	b.n	800579c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005788:	6839      	ldr	r1, [r7, #0]
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 fcba 	bl	8006104 <USBD_ClrFeature>
          break;
 8005790:	e004      	b.n	800579c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8005792:	6839      	ldr	r1, [r7, #0]
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 fd11 	bl	80061bc <USBD_CtlError>
          break;
 800579a:	bf00      	nop
      }
      break;
 800579c:	e004      	b.n	80057a8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800579e:	6839      	ldr	r1, [r7, #0]
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 fd0b 	bl	80061bc <USBD_CtlError>
      break;
 80057a6:	bf00      	nop
  }

  return ret;
 80057a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3710      	adds	r7, #16
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop

080057b4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80057be:	2300      	movs	r3, #0
 80057c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80057ca:	2b40      	cmp	r3, #64	; 0x40
 80057cc:	d005      	beq.n	80057da <USBD_StdItfReq+0x26>
 80057ce:	2b40      	cmp	r3, #64	; 0x40
 80057d0:	d82f      	bhi.n	8005832 <USBD_StdItfReq+0x7e>
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d001      	beq.n	80057da <USBD_StdItfReq+0x26>
 80057d6:	2b20      	cmp	r3, #32
 80057d8:	d12b      	bne.n	8005832 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	3b01      	subs	r3, #1
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	d81d      	bhi.n	8005824 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	889b      	ldrh	r3, [r3, #4]
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d813      	bhi.n	800581a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	6839      	ldr	r1, [r7, #0]
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	4798      	blx	r3
 8005800:	4603      	mov	r3, r0
 8005802:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	88db      	ldrh	r3, [r3, #6]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d110      	bne.n	800582e <USBD_StdItfReq+0x7a>
 800580c:	7bfb      	ldrb	r3, [r7, #15]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d10d      	bne.n	800582e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 fd80 	bl	8006318 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005818:	e009      	b.n	800582e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800581a:	6839      	ldr	r1, [r7, #0]
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 fccd 	bl	80061bc <USBD_CtlError>
          break;
 8005822:	e004      	b.n	800582e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8005824:	6839      	ldr	r1, [r7, #0]
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 fcc8 	bl	80061bc <USBD_CtlError>
          break;
 800582c:	e000      	b.n	8005830 <USBD_StdItfReq+0x7c>
          break;
 800582e:	bf00      	nop
      }
      break;
 8005830:	e004      	b.n	800583c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8005832:	6839      	ldr	r1, [r7, #0]
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 fcc1 	bl	80061bc <USBD_CtlError>
      break;
 800583a:	bf00      	nop
  }

  return ret;
 800583c:	7bfb      	ldrb	r3, [r7, #15]
}
 800583e:	4618      	mov	r0, r3
 8005840:	3710      	adds	r7, #16
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005846:	b580      	push	{r7, lr}
 8005848:	b084      	sub	sp, #16
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
 800584e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005850:	2300      	movs	r3, #0
 8005852:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	889b      	ldrh	r3, [r3, #4]
 8005858:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005862:	2b40      	cmp	r3, #64	; 0x40
 8005864:	d007      	beq.n	8005876 <USBD_StdEPReq+0x30>
 8005866:	2b40      	cmp	r3, #64	; 0x40
 8005868:	f200 8145 	bhi.w	8005af6 <USBD_StdEPReq+0x2b0>
 800586c:	2b00      	cmp	r3, #0
 800586e:	d00c      	beq.n	800588a <USBD_StdEPReq+0x44>
 8005870:	2b20      	cmp	r3, #32
 8005872:	f040 8140 	bne.w	8005af6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	6839      	ldr	r1, [r7, #0]
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	4798      	blx	r3
 8005884:	4603      	mov	r3, r0
 8005886:	73fb      	strb	r3, [r7, #15]
      break;
 8005888:	e13a      	b.n	8005b00 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	785b      	ldrb	r3, [r3, #1]
 800588e:	2b03      	cmp	r3, #3
 8005890:	d007      	beq.n	80058a2 <USBD_StdEPReq+0x5c>
 8005892:	2b03      	cmp	r3, #3
 8005894:	f300 8129 	bgt.w	8005aea <USBD_StdEPReq+0x2a4>
 8005898:	2b00      	cmp	r3, #0
 800589a:	d07f      	beq.n	800599c <USBD_StdEPReq+0x156>
 800589c:	2b01      	cmp	r3, #1
 800589e:	d03c      	beq.n	800591a <USBD_StdEPReq+0xd4>
 80058a0:	e123      	b.n	8005aea <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	d002      	beq.n	80058b4 <USBD_StdEPReq+0x6e>
 80058ae:	2b03      	cmp	r3, #3
 80058b0:	d016      	beq.n	80058e0 <USBD_StdEPReq+0x9a>
 80058b2:	e02c      	b.n	800590e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80058b4:	7bbb      	ldrb	r3, [r7, #14]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00d      	beq.n	80058d6 <USBD_StdEPReq+0x90>
 80058ba:	7bbb      	ldrb	r3, [r7, #14]
 80058bc:	2b80      	cmp	r3, #128	; 0x80
 80058be:	d00a      	beq.n	80058d6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80058c0:	7bbb      	ldrb	r3, [r7, #14]
 80058c2:	4619      	mov	r1, r3
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f001 f90d 	bl	8006ae4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80058ca:	2180      	movs	r1, #128	; 0x80
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f001 f909 	bl	8006ae4 <USBD_LL_StallEP>
 80058d2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80058d4:	e020      	b.n	8005918 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80058d6:	6839      	ldr	r1, [r7, #0]
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 fc6f 	bl	80061bc <USBD_CtlError>
              break;
 80058de:	e01b      	b.n	8005918 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	885b      	ldrh	r3, [r3, #2]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d10e      	bne.n	8005906 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80058e8:	7bbb      	ldrb	r3, [r7, #14]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00b      	beq.n	8005906 <USBD_StdEPReq+0xc0>
 80058ee:	7bbb      	ldrb	r3, [r7, #14]
 80058f0:	2b80      	cmp	r3, #128	; 0x80
 80058f2:	d008      	beq.n	8005906 <USBD_StdEPReq+0xc0>
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	88db      	ldrh	r3, [r3, #6]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d104      	bne.n	8005906 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80058fc:	7bbb      	ldrb	r3, [r7, #14]
 80058fe:	4619      	mov	r1, r3
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f001 f8ef 	bl	8006ae4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 fd06 	bl	8006318 <USBD_CtlSendStatus>

              break;
 800590c:	e004      	b.n	8005918 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800590e:	6839      	ldr	r1, [r7, #0]
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f000 fc53 	bl	80061bc <USBD_CtlError>
              break;
 8005916:	bf00      	nop
          }
          break;
 8005918:	e0ec      	b.n	8005af4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005920:	b2db      	uxtb	r3, r3
 8005922:	2b02      	cmp	r3, #2
 8005924:	d002      	beq.n	800592c <USBD_StdEPReq+0xe6>
 8005926:	2b03      	cmp	r3, #3
 8005928:	d016      	beq.n	8005958 <USBD_StdEPReq+0x112>
 800592a:	e030      	b.n	800598e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800592c:	7bbb      	ldrb	r3, [r7, #14]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d00d      	beq.n	800594e <USBD_StdEPReq+0x108>
 8005932:	7bbb      	ldrb	r3, [r7, #14]
 8005934:	2b80      	cmp	r3, #128	; 0x80
 8005936:	d00a      	beq.n	800594e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005938:	7bbb      	ldrb	r3, [r7, #14]
 800593a:	4619      	mov	r1, r3
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f001 f8d1 	bl	8006ae4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005942:	2180      	movs	r1, #128	; 0x80
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f001 f8cd 	bl	8006ae4 <USBD_LL_StallEP>
 800594a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800594c:	e025      	b.n	800599a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800594e:	6839      	ldr	r1, [r7, #0]
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f000 fc33 	bl	80061bc <USBD_CtlError>
              break;
 8005956:	e020      	b.n	800599a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	885b      	ldrh	r3, [r3, #2]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d11b      	bne.n	8005998 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005960:	7bbb      	ldrb	r3, [r7, #14]
 8005962:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005966:	2b00      	cmp	r3, #0
 8005968:	d004      	beq.n	8005974 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800596a:	7bbb      	ldrb	r3, [r7, #14]
 800596c:	4619      	mov	r1, r3
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f001 f8ee 	bl	8006b50 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f000 fccf 	bl	8006318 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	6839      	ldr	r1, [r7, #0]
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	4798      	blx	r3
 8005988:	4603      	mov	r3, r0
 800598a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800598c:	e004      	b.n	8005998 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800598e:	6839      	ldr	r1, [r7, #0]
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 fc13 	bl	80061bc <USBD_CtlError>
              break;
 8005996:	e000      	b.n	800599a <USBD_StdEPReq+0x154>
              break;
 8005998:	bf00      	nop
          }
          break;
 800599a:	e0ab      	b.n	8005af4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	2b02      	cmp	r3, #2
 80059a6:	d002      	beq.n	80059ae <USBD_StdEPReq+0x168>
 80059a8:	2b03      	cmp	r3, #3
 80059aa:	d032      	beq.n	8005a12 <USBD_StdEPReq+0x1cc>
 80059ac:	e097      	b.n	8005ade <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80059ae:	7bbb      	ldrb	r3, [r7, #14]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d007      	beq.n	80059c4 <USBD_StdEPReq+0x17e>
 80059b4:	7bbb      	ldrb	r3, [r7, #14]
 80059b6:	2b80      	cmp	r3, #128	; 0x80
 80059b8:	d004      	beq.n	80059c4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80059ba:	6839      	ldr	r1, [r7, #0]
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 fbfd 	bl	80061bc <USBD_CtlError>
                break;
 80059c2:	e091      	b.n	8005ae8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80059c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	da0b      	bge.n	80059e4 <USBD_StdEPReq+0x19e>
 80059cc:	7bbb      	ldrb	r3, [r7, #14]
 80059ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80059d2:	4613      	mov	r3, r2
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	4413      	add	r3, r2
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	3310      	adds	r3, #16
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	4413      	add	r3, r2
 80059e0:	3304      	adds	r3, #4
 80059e2:	e00b      	b.n	80059fc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80059e4:	7bbb      	ldrb	r3, [r7, #14]
 80059e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80059ea:	4613      	mov	r3, r2
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	4413      	add	r3, r2
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	4413      	add	r3, r2
 80059fa:	3304      	adds	r3, #4
 80059fc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	2200      	movs	r2, #0
 8005a02:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	2202      	movs	r2, #2
 8005a08:	4619      	mov	r1, r3
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 fc47 	bl	800629e <USBD_CtlSendData>
              break;
 8005a10:	e06a      	b.n	8005ae8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005a12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	da11      	bge.n	8005a3e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005a1a:	7bbb      	ldrb	r3, [r7, #14]
 8005a1c:	f003 020f 	and.w	r2, r3, #15
 8005a20:	6879      	ldr	r1, [r7, #4]
 8005a22:	4613      	mov	r3, r2
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	4413      	add	r3, r2
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	440b      	add	r3, r1
 8005a2c:	3324      	adds	r3, #36	; 0x24
 8005a2e:	881b      	ldrh	r3, [r3, #0]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d117      	bne.n	8005a64 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005a34:	6839      	ldr	r1, [r7, #0]
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 fbc0 	bl	80061bc <USBD_CtlError>
                  break;
 8005a3c:	e054      	b.n	8005ae8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005a3e:	7bbb      	ldrb	r3, [r7, #14]
 8005a40:	f003 020f 	and.w	r2, r3, #15
 8005a44:	6879      	ldr	r1, [r7, #4]
 8005a46:	4613      	mov	r3, r2
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	4413      	add	r3, r2
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	440b      	add	r3, r1
 8005a50:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005a54:	881b      	ldrh	r3, [r3, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d104      	bne.n	8005a64 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005a5a:	6839      	ldr	r1, [r7, #0]
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 fbad 	bl	80061bc <USBD_CtlError>
                  break;
 8005a62:	e041      	b.n	8005ae8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	da0b      	bge.n	8005a84 <USBD_StdEPReq+0x23e>
 8005a6c:	7bbb      	ldrb	r3, [r7, #14]
 8005a6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a72:	4613      	mov	r3, r2
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	4413      	add	r3, r2
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	3310      	adds	r3, #16
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	4413      	add	r3, r2
 8005a80:	3304      	adds	r3, #4
 8005a82:	e00b      	b.n	8005a9c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005a84:	7bbb      	ldrb	r3, [r7, #14]
 8005a86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	4413      	add	r3, r2
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	4413      	add	r3, r2
 8005a9a:	3304      	adds	r3, #4
 8005a9c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005a9e:	7bbb      	ldrb	r3, [r7, #14]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d002      	beq.n	8005aaa <USBD_StdEPReq+0x264>
 8005aa4:	7bbb      	ldrb	r3, [r7, #14]
 8005aa6:	2b80      	cmp	r3, #128	; 0x80
 8005aa8:	d103      	bne.n	8005ab2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	2200      	movs	r2, #0
 8005aae:	601a      	str	r2, [r3, #0]
 8005ab0:	e00e      	b.n	8005ad0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005ab2:	7bbb      	ldrb	r3, [r7, #14]
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f001 f880 	bl	8006bbc <USBD_LL_IsStallEP>
 8005abc:	4603      	mov	r3, r0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d003      	beq.n	8005aca <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	601a      	str	r2, [r3, #0]
 8005ac8:	e002      	b.n	8005ad0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	2200      	movs	r2, #0
 8005ace:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	2202      	movs	r2, #2
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 fbe1 	bl	800629e <USBD_CtlSendData>
              break;
 8005adc:	e004      	b.n	8005ae8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8005ade:	6839      	ldr	r1, [r7, #0]
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f000 fb6b 	bl	80061bc <USBD_CtlError>
              break;
 8005ae6:	bf00      	nop
          }
          break;
 8005ae8:	e004      	b.n	8005af4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8005aea:	6839      	ldr	r1, [r7, #0]
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 fb65 	bl	80061bc <USBD_CtlError>
          break;
 8005af2:	bf00      	nop
      }
      break;
 8005af4:	e004      	b.n	8005b00 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8005af6:	6839      	ldr	r1, [r7, #0]
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 fb5f 	bl	80061bc <USBD_CtlError>
      break;
 8005afe:	bf00      	nop
  }

  return ret;
 8005b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3710      	adds	r7, #16
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
	...

08005b0c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005b16:	2300      	movs	r3, #0
 8005b18:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	885b      	ldrh	r3, [r3, #2]
 8005b26:	0a1b      	lsrs	r3, r3, #8
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	3b01      	subs	r3, #1
 8005b2c:	2b0e      	cmp	r3, #14
 8005b2e:	f200 8152 	bhi.w	8005dd6 <USBD_GetDescriptor+0x2ca>
 8005b32:	a201      	add	r2, pc, #4	; (adr r2, 8005b38 <USBD_GetDescriptor+0x2c>)
 8005b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b38:	08005ba9 	.word	0x08005ba9
 8005b3c:	08005bc1 	.word	0x08005bc1
 8005b40:	08005c01 	.word	0x08005c01
 8005b44:	08005dd7 	.word	0x08005dd7
 8005b48:	08005dd7 	.word	0x08005dd7
 8005b4c:	08005d77 	.word	0x08005d77
 8005b50:	08005da3 	.word	0x08005da3
 8005b54:	08005dd7 	.word	0x08005dd7
 8005b58:	08005dd7 	.word	0x08005dd7
 8005b5c:	08005dd7 	.word	0x08005dd7
 8005b60:	08005dd7 	.word	0x08005dd7
 8005b64:	08005dd7 	.word	0x08005dd7
 8005b68:	08005dd7 	.word	0x08005dd7
 8005b6c:	08005dd7 	.word	0x08005dd7
 8005b70:	08005b75 	.word	0x08005b75
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b7a:	69db      	ldr	r3, [r3, #28]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d00b      	beq.n	8005b98 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b86:	69db      	ldr	r3, [r3, #28]
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	7c12      	ldrb	r2, [r2, #16]
 8005b8c:	f107 0108 	add.w	r1, r7, #8
 8005b90:	4610      	mov	r0, r2
 8005b92:	4798      	blx	r3
 8005b94:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005b96:	e126      	b.n	8005de6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8005b98:	6839      	ldr	r1, [r7, #0]
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 fb0e 	bl	80061bc <USBD_CtlError>
        err++;
 8005ba0:	7afb      	ldrb	r3, [r7, #11]
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	72fb      	strb	r3, [r7, #11]
      break;
 8005ba6:	e11e      	b.n	8005de6 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	7c12      	ldrb	r2, [r2, #16]
 8005bb4:	f107 0108 	add.w	r1, r7, #8
 8005bb8:	4610      	mov	r0, r2
 8005bba:	4798      	blx	r3
 8005bbc:	60f8      	str	r0, [r7, #12]
      break;
 8005bbe:	e112      	b.n	8005de6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	7c1b      	ldrb	r3, [r3, #16]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d10d      	bne.n	8005be4 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bd0:	f107 0208 	add.w	r2, r7, #8
 8005bd4:	4610      	mov	r0, r2
 8005bd6:	4798      	blx	r3
 8005bd8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	3301      	adds	r3, #1
 8005bde:	2202      	movs	r2, #2
 8005be0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005be2:	e100      	b.n	8005de6 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bec:	f107 0208 	add.w	r2, r7, #8
 8005bf0:	4610      	mov	r0, r2
 8005bf2:	4798      	blx	r3
 8005bf4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	701a      	strb	r2, [r3, #0]
      break;
 8005bfe:	e0f2      	b.n	8005de6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	885b      	ldrh	r3, [r3, #2]
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	2b05      	cmp	r3, #5
 8005c08:	f200 80ac 	bhi.w	8005d64 <USBD_GetDescriptor+0x258>
 8005c0c:	a201      	add	r2, pc, #4	; (adr r2, 8005c14 <USBD_GetDescriptor+0x108>)
 8005c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c12:	bf00      	nop
 8005c14:	08005c2d 	.word	0x08005c2d
 8005c18:	08005c61 	.word	0x08005c61
 8005c1c:	08005c95 	.word	0x08005c95
 8005c20:	08005cc9 	.word	0x08005cc9
 8005c24:	08005cfd 	.word	0x08005cfd
 8005c28:	08005d31 	.word	0x08005d31
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d00b      	beq.n	8005c50 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	7c12      	ldrb	r2, [r2, #16]
 8005c44:	f107 0108 	add.w	r1, r7, #8
 8005c48:	4610      	mov	r0, r2
 8005c4a:	4798      	blx	r3
 8005c4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c4e:	e091      	b.n	8005d74 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005c50:	6839      	ldr	r1, [r7, #0]
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 fab2 	bl	80061bc <USBD_CtlError>
            err++;
 8005c58:	7afb      	ldrb	r3, [r7, #11]
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	72fb      	strb	r3, [r7, #11]
          break;
 8005c5e:	e089      	b.n	8005d74 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d00b      	beq.n	8005c84 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	7c12      	ldrb	r2, [r2, #16]
 8005c78:	f107 0108 	add.w	r1, r7, #8
 8005c7c:	4610      	mov	r0, r2
 8005c7e:	4798      	blx	r3
 8005c80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c82:	e077      	b.n	8005d74 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005c84:	6839      	ldr	r1, [r7, #0]
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 fa98 	bl	80061bc <USBD_CtlError>
            err++;
 8005c8c:	7afb      	ldrb	r3, [r7, #11]
 8005c8e:	3301      	adds	r3, #1
 8005c90:	72fb      	strb	r3, [r7, #11]
          break;
 8005c92:	e06f      	b.n	8005d74 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d00b      	beq.n	8005cb8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	7c12      	ldrb	r2, [r2, #16]
 8005cac:	f107 0108 	add.w	r1, r7, #8
 8005cb0:	4610      	mov	r0, r2
 8005cb2:	4798      	blx	r3
 8005cb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005cb6:	e05d      	b.n	8005d74 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005cb8:	6839      	ldr	r1, [r7, #0]
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 fa7e 	bl	80061bc <USBD_CtlError>
            err++;
 8005cc0:	7afb      	ldrb	r3, [r7, #11]
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	72fb      	strb	r3, [r7, #11]
          break;
 8005cc6:	e055      	b.n	8005d74 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d00b      	beq.n	8005cec <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cda:	691b      	ldr	r3, [r3, #16]
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	7c12      	ldrb	r2, [r2, #16]
 8005ce0:	f107 0108 	add.w	r1, r7, #8
 8005ce4:	4610      	mov	r0, r2
 8005ce6:	4798      	blx	r3
 8005ce8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005cea:	e043      	b.n	8005d74 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005cec:	6839      	ldr	r1, [r7, #0]
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 fa64 	bl	80061bc <USBD_CtlError>
            err++;
 8005cf4:	7afb      	ldrb	r3, [r7, #11]
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	72fb      	strb	r3, [r7, #11]
          break;
 8005cfa:	e03b      	b.n	8005d74 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d02:	695b      	ldr	r3, [r3, #20]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00b      	beq.n	8005d20 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d0e:	695b      	ldr	r3, [r3, #20]
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	7c12      	ldrb	r2, [r2, #16]
 8005d14:	f107 0108 	add.w	r1, r7, #8
 8005d18:	4610      	mov	r0, r2
 8005d1a:	4798      	blx	r3
 8005d1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d1e:	e029      	b.n	8005d74 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005d20:	6839      	ldr	r1, [r7, #0]
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 fa4a 	bl	80061bc <USBD_CtlError>
            err++;
 8005d28:	7afb      	ldrb	r3, [r7, #11]
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	72fb      	strb	r3, [r7, #11]
          break;
 8005d2e:	e021      	b.n	8005d74 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d36:	699b      	ldr	r3, [r3, #24]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d00b      	beq.n	8005d54 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d42:	699b      	ldr	r3, [r3, #24]
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	7c12      	ldrb	r2, [r2, #16]
 8005d48:	f107 0108 	add.w	r1, r7, #8
 8005d4c:	4610      	mov	r0, r2
 8005d4e:	4798      	blx	r3
 8005d50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d52:	e00f      	b.n	8005d74 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005d54:	6839      	ldr	r1, [r7, #0]
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 fa30 	bl	80061bc <USBD_CtlError>
            err++;
 8005d5c:	7afb      	ldrb	r3, [r7, #11]
 8005d5e:	3301      	adds	r3, #1
 8005d60:	72fb      	strb	r3, [r7, #11]
          break;
 8005d62:	e007      	b.n	8005d74 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005d64:	6839      	ldr	r1, [r7, #0]
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f000 fa28 	bl	80061bc <USBD_CtlError>
          err++;
 8005d6c:	7afb      	ldrb	r3, [r7, #11]
 8005d6e:	3301      	adds	r3, #1
 8005d70:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8005d72:	bf00      	nop
      }
      break;
 8005d74:	e037      	b.n	8005de6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	7c1b      	ldrb	r3, [r3, #16]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d109      	bne.n	8005d92 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d86:	f107 0208 	add.w	r2, r7, #8
 8005d8a:	4610      	mov	r0, r2
 8005d8c:	4798      	blx	r3
 8005d8e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005d90:	e029      	b.n	8005de6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8005d92:	6839      	ldr	r1, [r7, #0]
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f000 fa11 	bl	80061bc <USBD_CtlError>
        err++;
 8005d9a:	7afb      	ldrb	r3, [r7, #11]
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	72fb      	strb	r3, [r7, #11]
      break;
 8005da0:	e021      	b.n	8005de6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	7c1b      	ldrb	r3, [r3, #16]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d10d      	bne.n	8005dc6 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db2:	f107 0208 	add.w	r2, r7, #8
 8005db6:	4610      	mov	r0, r2
 8005db8:	4798      	blx	r3
 8005dba:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	2207      	movs	r2, #7
 8005dc2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005dc4:	e00f      	b.n	8005de6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8005dc6:	6839      	ldr	r1, [r7, #0]
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f000 f9f7 	bl	80061bc <USBD_CtlError>
        err++;
 8005dce:	7afb      	ldrb	r3, [r7, #11]
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	72fb      	strb	r3, [r7, #11]
      break;
 8005dd4:	e007      	b.n	8005de6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8005dd6:	6839      	ldr	r1, [r7, #0]
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 f9ef 	bl	80061bc <USBD_CtlError>
      err++;
 8005dde:	7afb      	ldrb	r3, [r7, #11]
 8005de0:	3301      	adds	r3, #1
 8005de2:	72fb      	strb	r3, [r7, #11]
      break;
 8005de4:	bf00      	nop
  }

  if (err != 0U)
 8005de6:	7afb      	ldrb	r3, [r7, #11]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d11e      	bne.n	8005e2a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	88db      	ldrh	r3, [r3, #6]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d016      	beq.n	8005e22 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8005df4:	893b      	ldrh	r3, [r7, #8]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00e      	beq.n	8005e18 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	88da      	ldrh	r2, [r3, #6]
 8005dfe:	893b      	ldrh	r3, [r7, #8]
 8005e00:	4293      	cmp	r3, r2
 8005e02:	bf28      	it	cs
 8005e04:	4613      	movcs	r3, r2
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005e0a:	893b      	ldrh	r3, [r7, #8]
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	68f9      	ldr	r1, [r7, #12]
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f000 fa44 	bl	800629e <USBD_CtlSendData>
 8005e16:	e009      	b.n	8005e2c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005e18:	6839      	ldr	r1, [r7, #0]
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 f9ce 	bl	80061bc <USBD_CtlError>
 8005e20:	e004      	b.n	8005e2c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 fa78 	bl	8006318 <USBD_CtlSendStatus>
 8005e28:	e000      	b.n	8005e2c <USBD_GetDescriptor+0x320>
    return;
 8005e2a:	bf00      	nop
  }
}
 8005e2c:	3710      	adds	r7, #16
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop

08005e34 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	889b      	ldrh	r3, [r3, #4]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d131      	bne.n	8005eaa <USBD_SetAddress+0x76>
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	88db      	ldrh	r3, [r3, #6]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d12d      	bne.n	8005eaa <USBD_SetAddress+0x76>
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	885b      	ldrh	r3, [r3, #2]
 8005e52:	2b7f      	cmp	r3, #127	; 0x7f
 8005e54:	d829      	bhi.n	8005eaa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	885b      	ldrh	r3, [r3, #2]
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e60:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	2b03      	cmp	r3, #3
 8005e6c:	d104      	bne.n	8005e78 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005e6e:	6839      	ldr	r1, [r7, #0]
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 f9a3 	bl	80061bc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e76:	e01d      	b.n	8005eb4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	7bfa      	ldrb	r2, [r7, #15]
 8005e7c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005e80:	7bfb      	ldrb	r3, [r7, #15]
 8005e82:	4619      	mov	r1, r3
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f000 fec5 	bl	8006c14 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 fa44 	bl	8006318 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005e90:	7bfb      	ldrb	r3, [r7, #15]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d004      	beq.n	8005ea0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2202      	movs	r2, #2
 8005e9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e9e:	e009      	b.n	8005eb4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ea8:	e004      	b.n	8005eb4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005eaa:	6839      	ldr	r1, [r7, #0]
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 f985 	bl	80061bc <USBD_CtlError>
  }
}
 8005eb2:	bf00      	nop
 8005eb4:	bf00      	nop
 8005eb6:	3710      	adds	r7, #16
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	885b      	ldrh	r3, [r3, #2]
 8005ece:	b2da      	uxtb	r2, r3
 8005ed0:	4b4c      	ldr	r3, [pc, #304]	; (8006004 <USBD_SetConfig+0x148>)
 8005ed2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005ed4:	4b4b      	ldr	r3, [pc, #300]	; (8006004 <USBD_SetConfig+0x148>)
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d905      	bls.n	8005ee8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005edc:	6839      	ldr	r1, [r7, #0]
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 f96c 	bl	80061bc <USBD_CtlError>
    return USBD_FAIL;
 8005ee4:	2303      	movs	r3, #3
 8005ee6:	e088      	b.n	8005ffa <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	2b02      	cmp	r3, #2
 8005ef2:	d002      	beq.n	8005efa <USBD_SetConfig+0x3e>
 8005ef4:	2b03      	cmp	r3, #3
 8005ef6:	d025      	beq.n	8005f44 <USBD_SetConfig+0x88>
 8005ef8:	e071      	b.n	8005fde <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005efa:	4b42      	ldr	r3, [pc, #264]	; (8006004 <USBD_SetConfig+0x148>)
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d01c      	beq.n	8005f3c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8005f02:	4b40      	ldr	r3, [pc, #256]	; (8006004 <USBD_SetConfig+0x148>)
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	461a      	mov	r2, r3
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005f0c:	4b3d      	ldr	r3, [pc, #244]	; (8006004 <USBD_SetConfig+0x148>)
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	4619      	mov	r1, r3
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f7ff f91e 	bl	8005154 <USBD_SetClassConfig>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005f1c:	7bfb      	ldrb	r3, [r7, #15]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d004      	beq.n	8005f2c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8005f22:	6839      	ldr	r1, [r7, #0]
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f000 f949 	bl	80061bc <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005f2a:	e065      	b.n	8005ff8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f000 f9f3 	bl	8006318 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2203      	movs	r2, #3
 8005f36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005f3a:	e05d      	b.n	8005ff8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 f9eb 	bl	8006318 <USBD_CtlSendStatus>
      break;
 8005f42:	e059      	b.n	8005ff8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005f44:	4b2f      	ldr	r3, [pc, #188]	; (8006004 <USBD_SetConfig+0x148>)
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d112      	bne.n	8005f72 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2202      	movs	r2, #2
 8005f50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8005f54:	4b2b      	ldr	r3, [pc, #172]	; (8006004 <USBD_SetConfig+0x148>)
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	461a      	mov	r2, r3
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005f5e:	4b29      	ldr	r3, [pc, #164]	; (8006004 <USBD_SetConfig+0x148>)
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	4619      	mov	r1, r3
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f7ff f911 	bl	800518c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 f9d4 	bl	8006318 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005f70:	e042      	b.n	8005ff8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8005f72:	4b24      	ldr	r3, [pc, #144]	; (8006004 <USBD_SetConfig+0x148>)
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	461a      	mov	r2, r3
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d02a      	beq.n	8005fd6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	4619      	mov	r1, r3
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f7ff f8ff 	bl	800518c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005f8e:	4b1d      	ldr	r3, [pc, #116]	; (8006004 <USBD_SetConfig+0x148>)
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	461a      	mov	r2, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005f98:	4b1a      	ldr	r3, [pc, #104]	; (8006004 <USBD_SetConfig+0x148>)
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f7ff f8d8 	bl	8005154 <USBD_SetClassConfig>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005fa8:	7bfb      	ldrb	r3, [r7, #15]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00f      	beq.n	8005fce <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8005fae:	6839      	ldr	r1, [r7, #0]
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 f903 	bl	80061bc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f7ff f8e4 	bl	800518c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2202      	movs	r2, #2
 8005fc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005fcc:	e014      	b.n	8005ff8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 f9a2 	bl	8006318 <USBD_CtlSendStatus>
      break;
 8005fd4:	e010      	b.n	8005ff8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 f99e 	bl	8006318 <USBD_CtlSendStatus>
      break;
 8005fdc:	e00c      	b.n	8005ff8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8005fde:	6839      	ldr	r1, [r7, #0]
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 f8eb 	bl	80061bc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005fe6:	4b07      	ldr	r3, [pc, #28]	; (8006004 <USBD_SetConfig+0x148>)
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	4619      	mov	r1, r3
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f7ff f8cd 	bl	800518c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8005ff2:	2303      	movs	r3, #3
 8005ff4:	73fb      	strb	r3, [r7, #15]
      break;
 8005ff6:	bf00      	nop
  }

  return ret;
 8005ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3710      	adds	r7, #16
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	2000025c 	.word	0x2000025c

08006008 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	88db      	ldrh	r3, [r3, #6]
 8006016:	2b01      	cmp	r3, #1
 8006018:	d004      	beq.n	8006024 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800601a:	6839      	ldr	r1, [r7, #0]
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f000 f8cd 	bl	80061bc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006022:	e023      	b.n	800606c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800602a:	b2db      	uxtb	r3, r3
 800602c:	2b02      	cmp	r3, #2
 800602e:	dc02      	bgt.n	8006036 <USBD_GetConfig+0x2e>
 8006030:	2b00      	cmp	r3, #0
 8006032:	dc03      	bgt.n	800603c <USBD_GetConfig+0x34>
 8006034:	e015      	b.n	8006062 <USBD_GetConfig+0x5a>
 8006036:	2b03      	cmp	r3, #3
 8006038:	d00b      	beq.n	8006052 <USBD_GetConfig+0x4a>
 800603a:	e012      	b.n	8006062 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	3308      	adds	r3, #8
 8006046:	2201      	movs	r2, #1
 8006048:	4619      	mov	r1, r3
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 f927 	bl	800629e <USBD_CtlSendData>
        break;
 8006050:	e00c      	b.n	800606c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	3304      	adds	r3, #4
 8006056:	2201      	movs	r2, #1
 8006058:	4619      	mov	r1, r3
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 f91f 	bl	800629e <USBD_CtlSendData>
        break;
 8006060:	e004      	b.n	800606c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006062:	6839      	ldr	r1, [r7, #0]
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f000 f8a9 	bl	80061bc <USBD_CtlError>
        break;
 800606a:	bf00      	nop
}
 800606c:	bf00      	nop
 800606e:	3708      	adds	r7, #8
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b082      	sub	sp, #8
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006084:	b2db      	uxtb	r3, r3
 8006086:	3b01      	subs	r3, #1
 8006088:	2b02      	cmp	r3, #2
 800608a:	d81e      	bhi.n	80060ca <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	88db      	ldrh	r3, [r3, #6]
 8006090:	2b02      	cmp	r3, #2
 8006092:	d004      	beq.n	800609e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006094:	6839      	ldr	r1, [r7, #0]
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 f890 	bl	80061bc <USBD_CtlError>
        break;
 800609c:	e01a      	b.n	80060d4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2201      	movs	r2, #1
 80060a2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d005      	beq.n	80060ba <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	f043 0202 	orr.w	r2, r3, #2
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	330c      	adds	r3, #12
 80060be:	2202      	movs	r2, #2
 80060c0:	4619      	mov	r1, r3
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 f8eb 	bl	800629e <USBD_CtlSendData>
      break;
 80060c8:	e004      	b.n	80060d4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80060ca:	6839      	ldr	r1, [r7, #0]
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f000 f875 	bl	80061bc <USBD_CtlError>
      break;
 80060d2:	bf00      	nop
  }
}
 80060d4:	bf00      	nop
 80060d6:	3708      	adds	r7, #8
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	885b      	ldrh	r3, [r3, #2]
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d106      	bne.n	80060fc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2201      	movs	r2, #1
 80060f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 f90e 	bl	8006318 <USBD_CtlSendStatus>
  }
}
 80060fc:	bf00      	nop
 80060fe:	3708      	adds	r7, #8
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b082      	sub	sp, #8
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006114:	b2db      	uxtb	r3, r3
 8006116:	3b01      	subs	r3, #1
 8006118:	2b02      	cmp	r3, #2
 800611a:	d80b      	bhi.n	8006134 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	885b      	ldrh	r3, [r3, #2]
 8006120:	2b01      	cmp	r3, #1
 8006122:	d10c      	bne.n	800613e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 f8f3 	bl	8006318 <USBD_CtlSendStatus>
      }
      break;
 8006132:	e004      	b.n	800613e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006134:	6839      	ldr	r1, [r7, #0]
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 f840 	bl	80061bc <USBD_CtlError>
      break;
 800613c:	e000      	b.n	8006140 <USBD_ClrFeature+0x3c>
      break;
 800613e:	bf00      	nop
  }
}
 8006140:	bf00      	nop
 8006142:	3708      	adds	r7, #8
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	781a      	ldrb	r2, [r3, #0]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	3301      	adds	r3, #1
 8006162:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	781a      	ldrb	r2, [r3, #0]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	3301      	adds	r3, #1
 8006170:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	f7ff fa91 	bl	800569a <SWAPBYTE>
 8006178:	4603      	mov	r3, r0
 800617a:	461a      	mov	r2, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	3301      	adds	r3, #1
 8006184:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	3301      	adds	r3, #1
 800618a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800618c:	68f8      	ldr	r0, [r7, #12]
 800618e:	f7ff fa84 	bl	800569a <SWAPBYTE>
 8006192:	4603      	mov	r3, r0
 8006194:	461a      	mov	r2, r3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	3301      	adds	r3, #1
 800619e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	3301      	adds	r3, #1
 80061a4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80061a6:	68f8      	ldr	r0, [r7, #12]
 80061a8:	f7ff fa77 	bl	800569a <SWAPBYTE>
 80061ac:	4603      	mov	r3, r0
 80061ae:	461a      	mov	r2, r3
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	80da      	strh	r2, [r3, #6]
}
 80061b4:	bf00      	nop
 80061b6:	3710      	adds	r7, #16
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80061c6:	2180      	movs	r1, #128	; 0x80
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f000 fc8b 	bl	8006ae4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80061ce:	2100      	movs	r1, #0
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 fc87 	bl	8006ae4 <USBD_LL_StallEP>
}
 80061d6:	bf00      	nop
 80061d8:	3708      	adds	r7, #8
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}

080061de <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80061de:	b580      	push	{r7, lr}
 80061e0:	b086      	sub	sp, #24
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	60f8      	str	r0, [r7, #12]
 80061e6:	60b9      	str	r1, [r7, #8]
 80061e8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80061ea:	2300      	movs	r3, #0
 80061ec:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d036      	beq.n	8006262 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80061f8:	6938      	ldr	r0, [r7, #16]
 80061fa:	f000 f836 	bl	800626a <USBD_GetLen>
 80061fe:	4603      	mov	r3, r0
 8006200:	3301      	adds	r3, #1
 8006202:	b29b      	uxth	r3, r3
 8006204:	005b      	lsls	r3, r3, #1
 8006206:	b29a      	uxth	r2, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800620c:	7dfb      	ldrb	r3, [r7, #23]
 800620e:	68ba      	ldr	r2, [r7, #8]
 8006210:	4413      	add	r3, r2
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	7812      	ldrb	r2, [r2, #0]
 8006216:	701a      	strb	r2, [r3, #0]
  idx++;
 8006218:	7dfb      	ldrb	r3, [r7, #23]
 800621a:	3301      	adds	r3, #1
 800621c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800621e:	7dfb      	ldrb	r3, [r7, #23]
 8006220:	68ba      	ldr	r2, [r7, #8]
 8006222:	4413      	add	r3, r2
 8006224:	2203      	movs	r2, #3
 8006226:	701a      	strb	r2, [r3, #0]
  idx++;
 8006228:	7dfb      	ldrb	r3, [r7, #23]
 800622a:	3301      	adds	r3, #1
 800622c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800622e:	e013      	b.n	8006258 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006230:	7dfb      	ldrb	r3, [r7, #23]
 8006232:	68ba      	ldr	r2, [r7, #8]
 8006234:	4413      	add	r3, r2
 8006236:	693a      	ldr	r2, [r7, #16]
 8006238:	7812      	ldrb	r2, [r2, #0]
 800623a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	3301      	adds	r3, #1
 8006240:	613b      	str	r3, [r7, #16]
    idx++;
 8006242:	7dfb      	ldrb	r3, [r7, #23]
 8006244:	3301      	adds	r3, #1
 8006246:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006248:	7dfb      	ldrb	r3, [r7, #23]
 800624a:	68ba      	ldr	r2, [r7, #8]
 800624c:	4413      	add	r3, r2
 800624e:	2200      	movs	r2, #0
 8006250:	701a      	strb	r2, [r3, #0]
    idx++;
 8006252:	7dfb      	ldrb	r3, [r7, #23]
 8006254:	3301      	adds	r3, #1
 8006256:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d1e7      	bne.n	8006230 <USBD_GetString+0x52>
 8006260:	e000      	b.n	8006264 <USBD_GetString+0x86>
    return;
 8006262:	bf00      	nop
  }
}
 8006264:	3718      	adds	r7, #24
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}

0800626a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800626a:	b480      	push	{r7}
 800626c:	b085      	sub	sp, #20
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006272:	2300      	movs	r3, #0
 8006274:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800627a:	e005      	b.n	8006288 <USBD_GetLen+0x1e>
  {
    len++;
 800627c:	7bfb      	ldrb	r3, [r7, #15]
 800627e:	3301      	adds	r3, #1
 8006280:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	3301      	adds	r3, #1
 8006286:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d1f5      	bne.n	800627c <USBD_GetLen+0x12>
  }

  return len;
 8006290:	7bfb      	ldrb	r3, [r7, #15]
}
 8006292:	4618      	mov	r0, r3
 8006294:	3714      	adds	r7, #20
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr

0800629e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800629e:	b580      	push	{r7, lr}
 80062a0:	b084      	sub	sp, #16
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	60f8      	str	r0, [r7, #12]
 80062a6:	60b9      	str	r1, [r7, #8]
 80062a8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2202      	movs	r2, #2
 80062ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	68ba      	ldr	r2, [r7, #8]
 80062c2:	2100      	movs	r1, #0
 80062c4:	68f8      	ldr	r0, [r7, #12]
 80062c6:	f000 fcdb 	bl	8006c80 <USBD_LL_Transmit>

  return USBD_OK;
 80062ca:	2300      	movs	r3, #0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3710      	adds	r7, #16
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	68ba      	ldr	r2, [r7, #8]
 80062e4:	2100      	movs	r1, #0
 80062e6:	68f8      	ldr	r0, [r7, #12]
 80062e8:	f000 fcca 	bl	8006c80 <USBD_LL_Transmit>

  return USBD_OK;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3710      	adds	r7, #16
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}

080062f6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b084      	sub	sp, #16
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	60f8      	str	r0, [r7, #12]
 80062fe:	60b9      	str	r1, [r7, #8]
 8006300:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	68ba      	ldr	r2, [r7, #8]
 8006306:	2100      	movs	r1, #0
 8006308:	68f8      	ldr	r0, [r7, #12]
 800630a:	f000 fcf1 	bl	8006cf0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800630e:	2300      	movs	r3, #0
}
 8006310:	4618      	mov	r0, r3
 8006312:	3710      	adds	r7, #16
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2204      	movs	r2, #4
 8006324:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006328:	2300      	movs	r3, #0
 800632a:	2200      	movs	r2, #0
 800632c:	2100      	movs	r1, #0
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 fca6 	bl	8006c80 <USBD_LL_Transmit>

  return USBD_OK;
 8006334:	2300      	movs	r3, #0
}
 8006336:	4618      	mov	r0, r3
 8006338:	3708      	adds	r7, #8
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}

0800633e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800633e:	b580      	push	{r7, lr}
 8006340:	b082      	sub	sp, #8
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2205      	movs	r2, #5
 800634a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800634e:	2300      	movs	r3, #0
 8006350:	2200      	movs	r2, #0
 8006352:	2100      	movs	r1, #0
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 fccb 	bl	8006cf0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	3708      	adds	r7, #8
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006368:	2200      	movs	r2, #0
 800636a:	490e      	ldr	r1, [pc, #56]	; (80063a4 <MX_USB_DEVICE_Init+0x40>)
 800636c:	480e      	ldr	r0, [pc, #56]	; (80063a8 <MX_USB_DEVICE_Init+0x44>)
 800636e:	f7fe fe83 	bl	8005078 <USBD_Init>
 8006372:	4603      	mov	r3, r0
 8006374:	2b00      	cmp	r3, #0
 8006376:	d001      	beq.n	800637c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006378:	f7fa f894 	bl	80004a4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800637c:	490b      	ldr	r1, [pc, #44]	; (80063ac <MX_USB_DEVICE_Init+0x48>)
 800637e:	480a      	ldr	r0, [pc, #40]	; (80063a8 <MX_USB_DEVICE_Init+0x44>)
 8006380:	f7fe feaa 	bl	80050d8 <USBD_RegisterClass>
 8006384:	4603      	mov	r3, r0
 8006386:	2b00      	cmp	r3, #0
 8006388:	d001      	beq.n	800638e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800638a:	f7fa f88b 	bl	80004a4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800638e:	4806      	ldr	r0, [pc, #24]	; (80063a8 <MX_USB_DEVICE_Init+0x44>)
 8006390:	f7fe fec9 	bl	8005126 <USBD_Start>
 8006394:	4603      	mov	r3, r0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d001      	beq.n	800639e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800639a:	f7fa f883 	bl	80004a4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800639e:	bf00      	nop
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop
 80063a4:	20000108 	.word	0x20000108
 80063a8:	20000260 	.word	0x20000260
 80063ac:	2000000c 	.word	0x2000000c

080063b0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	4603      	mov	r3, r0
 80063b8:	6039      	str	r1, [r7, #0]
 80063ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	2212      	movs	r2, #18
 80063c0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80063c2:	4b03      	ldr	r3, [pc, #12]	; (80063d0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	370c      	adds	r7, #12
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr
 80063d0:	20000128 	.word	0x20000128

080063d4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
 80063da:	4603      	mov	r3, r0
 80063dc:	6039      	str	r1, [r7, #0]
 80063de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	2204      	movs	r2, #4
 80063e4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80063e6:	4b03      	ldr	r3, [pc, #12]	; (80063f4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	370c      	adds	r7, #12
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr
 80063f4:	20000148 	.word	0x20000148

080063f8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b082      	sub	sp, #8
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	4603      	mov	r3, r0
 8006400:	6039      	str	r1, [r7, #0]
 8006402:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006404:	79fb      	ldrb	r3, [r7, #7]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d105      	bne.n	8006416 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800640a:	683a      	ldr	r2, [r7, #0]
 800640c:	4907      	ldr	r1, [pc, #28]	; (800642c <USBD_FS_ProductStrDescriptor+0x34>)
 800640e:	4808      	ldr	r0, [pc, #32]	; (8006430 <USBD_FS_ProductStrDescriptor+0x38>)
 8006410:	f7ff fee5 	bl	80061de <USBD_GetString>
 8006414:	e004      	b.n	8006420 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006416:	683a      	ldr	r2, [r7, #0]
 8006418:	4904      	ldr	r1, [pc, #16]	; (800642c <USBD_FS_ProductStrDescriptor+0x34>)
 800641a:	4805      	ldr	r0, [pc, #20]	; (8006430 <USBD_FS_ProductStrDescriptor+0x38>)
 800641c:	f7ff fedf 	bl	80061de <USBD_GetString>
  }
  return USBD_StrDesc;
 8006420:	4b02      	ldr	r3, [pc, #8]	; (800642c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006422:	4618      	mov	r0, r3
 8006424:	3708      	adds	r7, #8
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
 800642a:	bf00      	nop
 800642c:	20000530 	.word	0x20000530
 8006430:	080077a8 	.word	0x080077a8

08006434 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
 800643a:	4603      	mov	r3, r0
 800643c:	6039      	str	r1, [r7, #0]
 800643e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006440:	683a      	ldr	r2, [r7, #0]
 8006442:	4904      	ldr	r1, [pc, #16]	; (8006454 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006444:	4804      	ldr	r0, [pc, #16]	; (8006458 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006446:	f7ff feca 	bl	80061de <USBD_GetString>
  return USBD_StrDesc;
 800644a:	4b02      	ldr	r3, [pc, #8]	; (8006454 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800644c:	4618      	mov	r0, r3
 800644e:	3708      	adds	r7, #8
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}
 8006454:	20000530 	.word	0x20000530
 8006458:	080077c0 	.word	0x080077c0

0800645c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b082      	sub	sp, #8
 8006460:	af00      	add	r7, sp, #0
 8006462:	4603      	mov	r3, r0
 8006464:	6039      	str	r1, [r7, #0]
 8006466:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	221a      	movs	r2, #26
 800646c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800646e:	f000 f855 	bl	800651c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006472:	4b02      	ldr	r3, [pc, #8]	; (800647c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006474:	4618      	mov	r0, r3
 8006476:	3708      	adds	r7, #8
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}
 800647c:	2000014c 	.word	0x2000014c

08006480 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b082      	sub	sp, #8
 8006484:	af00      	add	r7, sp, #0
 8006486:	4603      	mov	r3, r0
 8006488:	6039      	str	r1, [r7, #0]
 800648a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800648c:	79fb      	ldrb	r3, [r7, #7]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d105      	bne.n	800649e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006492:	683a      	ldr	r2, [r7, #0]
 8006494:	4907      	ldr	r1, [pc, #28]	; (80064b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006496:	4808      	ldr	r0, [pc, #32]	; (80064b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006498:	f7ff fea1 	bl	80061de <USBD_GetString>
 800649c:	e004      	b.n	80064a8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800649e:	683a      	ldr	r2, [r7, #0]
 80064a0:	4904      	ldr	r1, [pc, #16]	; (80064b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80064a2:	4805      	ldr	r0, [pc, #20]	; (80064b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80064a4:	f7ff fe9b 	bl	80061de <USBD_GetString>
  }
  return USBD_StrDesc;
 80064a8:	4b02      	ldr	r3, [pc, #8]	; (80064b4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3708      	adds	r7, #8
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	20000530 	.word	0x20000530
 80064b8:	080077d4 	.word	0x080077d4

080064bc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b082      	sub	sp, #8
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	4603      	mov	r3, r0
 80064c4:	6039      	str	r1, [r7, #0]
 80064c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80064c8:	79fb      	ldrb	r3, [r7, #7]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d105      	bne.n	80064da <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80064ce:	683a      	ldr	r2, [r7, #0]
 80064d0:	4907      	ldr	r1, [pc, #28]	; (80064f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80064d2:	4808      	ldr	r0, [pc, #32]	; (80064f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80064d4:	f7ff fe83 	bl	80061de <USBD_GetString>
 80064d8:	e004      	b.n	80064e4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80064da:	683a      	ldr	r2, [r7, #0]
 80064dc:	4904      	ldr	r1, [pc, #16]	; (80064f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80064de:	4805      	ldr	r0, [pc, #20]	; (80064f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80064e0:	f7ff fe7d 	bl	80061de <USBD_GetString>
  }
  return USBD_StrDesc;
 80064e4:	4b02      	ldr	r3, [pc, #8]	; (80064f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3708      	adds	r7, #8
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	20000530 	.word	0x20000530
 80064f4:	080077e0 	.word	0x080077e0

080064f8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	4603      	mov	r3, r0
 8006500:	6039      	str	r1, [r7, #0]
 8006502:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	220c      	movs	r2, #12
 8006508:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800650a:	4b03      	ldr	r3, [pc, #12]	; (8006518 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800650c:	4618      	mov	r0, r3
 800650e:	370c      	adds	r7, #12
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr
 8006518:	2000013c 	.word	0x2000013c

0800651c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006522:	4b0f      	ldr	r3, [pc, #60]	; (8006560 <Get_SerialNum+0x44>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006528:	4b0e      	ldr	r3, [pc, #56]	; (8006564 <Get_SerialNum+0x48>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800652e:	4b0e      	ldr	r3, [pc, #56]	; (8006568 <Get_SerialNum+0x4c>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4413      	add	r3, r2
 800653a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d009      	beq.n	8006556 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006542:	2208      	movs	r2, #8
 8006544:	4909      	ldr	r1, [pc, #36]	; (800656c <Get_SerialNum+0x50>)
 8006546:	68f8      	ldr	r0, [r7, #12]
 8006548:	f000 f814 	bl	8006574 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800654c:	2204      	movs	r2, #4
 800654e:	4908      	ldr	r1, [pc, #32]	; (8006570 <Get_SerialNum+0x54>)
 8006550:	68b8      	ldr	r0, [r7, #8]
 8006552:	f000 f80f 	bl	8006574 <IntToUnicode>
  }
}
 8006556:	bf00      	nop
 8006558:	3710      	adds	r7, #16
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
 800655e:	bf00      	nop
 8006560:	1fff7590 	.word	0x1fff7590
 8006564:	1fff7594 	.word	0x1fff7594
 8006568:	1fff7598 	.word	0x1fff7598
 800656c:	2000014e 	.word	0x2000014e
 8006570:	2000015e 	.word	0x2000015e

08006574 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006574:	b480      	push	{r7}
 8006576:	b087      	sub	sp, #28
 8006578:	af00      	add	r7, sp, #0
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	60b9      	str	r1, [r7, #8]
 800657e:	4613      	mov	r3, r2
 8006580:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006582:	2300      	movs	r3, #0
 8006584:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006586:	2300      	movs	r3, #0
 8006588:	75fb      	strb	r3, [r7, #23]
 800658a:	e027      	b.n	80065dc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	0f1b      	lsrs	r3, r3, #28
 8006590:	2b09      	cmp	r3, #9
 8006592:	d80b      	bhi.n	80065ac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	0f1b      	lsrs	r3, r3, #28
 8006598:	b2da      	uxtb	r2, r3
 800659a:	7dfb      	ldrb	r3, [r7, #23]
 800659c:	005b      	lsls	r3, r3, #1
 800659e:	4619      	mov	r1, r3
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	440b      	add	r3, r1
 80065a4:	3230      	adds	r2, #48	; 0x30
 80065a6:	b2d2      	uxtb	r2, r2
 80065a8:	701a      	strb	r2, [r3, #0]
 80065aa:	e00a      	b.n	80065c2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	0f1b      	lsrs	r3, r3, #28
 80065b0:	b2da      	uxtb	r2, r3
 80065b2:	7dfb      	ldrb	r3, [r7, #23]
 80065b4:	005b      	lsls	r3, r3, #1
 80065b6:	4619      	mov	r1, r3
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	440b      	add	r3, r1
 80065bc:	3237      	adds	r2, #55	; 0x37
 80065be:	b2d2      	uxtb	r2, r2
 80065c0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	011b      	lsls	r3, r3, #4
 80065c6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80065c8:	7dfb      	ldrb	r3, [r7, #23]
 80065ca:	005b      	lsls	r3, r3, #1
 80065cc:	3301      	adds	r3, #1
 80065ce:	68ba      	ldr	r2, [r7, #8]
 80065d0:	4413      	add	r3, r2
 80065d2:	2200      	movs	r2, #0
 80065d4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80065d6:	7dfb      	ldrb	r3, [r7, #23]
 80065d8:	3301      	adds	r3, #1
 80065da:	75fb      	strb	r3, [r7, #23]
 80065dc:	7dfa      	ldrb	r2, [r7, #23]
 80065de:	79fb      	ldrb	r3, [r7, #7]
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d3d3      	bcc.n	800658c <IntToUnicode+0x18>
  }
}
 80065e4:	bf00      	nop
 80065e6:	bf00      	nop
 80065e8:	371c      	adds	r7, #28
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr
	...

080065f4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b0ac      	sub	sp, #176	; 0xb0
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80065fc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006600:	2200      	movs	r2, #0
 8006602:	601a      	str	r2, [r3, #0]
 8006604:	605a      	str	r2, [r3, #4]
 8006606:	609a      	str	r2, [r3, #8]
 8006608:	60da      	str	r2, [r3, #12]
 800660a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800660c:	f107 0314 	add.w	r3, r7, #20
 8006610:	2288      	movs	r2, #136	; 0x88
 8006612:	2100      	movs	r1, #0
 8006614:	4618      	mov	r0, r3
 8006616:	f000 fc39 	bl	8006e8c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006622:	d164      	bne.n	80066ee <HAL_PCD_MspInit+0xfa>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8006624:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006628:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800662a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800662e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006632:	f107 0314 	add.w	r3, r7, #20
 8006636:	4618      	mov	r0, r3
 8006638:	f7fc fb50 	bl	8002cdc <HAL_RCCEx_PeriphCLKConfig>
 800663c:	4603      	mov	r3, r0
 800663e:	2b00      	cmp	r3, #0
 8006640:	d001      	beq.n	8006646 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8006642:	f7f9 ff2f 	bl	80004a4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006646:	4b2c      	ldr	r3, [pc, #176]	; (80066f8 <HAL_PCD_MspInit+0x104>)
 8006648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800664a:	4a2b      	ldr	r2, [pc, #172]	; (80066f8 <HAL_PCD_MspInit+0x104>)
 800664c:	f043 0301 	orr.w	r3, r3, #1
 8006650:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006652:	4b29      	ldr	r3, [pc, #164]	; (80066f8 <HAL_PCD_MspInit+0x104>)
 8006654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006656:	f003 0301 	and.w	r3, r3, #1
 800665a:	613b      	str	r3, [r7, #16]
 800665c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800665e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006662:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006666:	2302      	movs	r3, #2
 8006668:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800666c:	2300      	movs	r3, #0
 800666e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006672:	2303      	movs	r3, #3
 8006674:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006678:	230a      	movs	r3, #10
 800667a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800667e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006682:	4619      	mov	r1, r3
 8006684:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006688:	f7fa f98e 	bl	80009a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800668c:	4b1a      	ldr	r3, [pc, #104]	; (80066f8 <HAL_PCD_MspInit+0x104>)
 800668e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006690:	4a19      	ldr	r2, [pc, #100]	; (80066f8 <HAL_PCD_MspInit+0x104>)
 8006692:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006696:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006698:	4b17      	ldr	r3, [pc, #92]	; (80066f8 <HAL_PCD_MspInit+0x104>)
 800669a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800669c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80066a0:	60fb      	str	r3, [r7, #12]
 80066a2:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066a4:	4b14      	ldr	r3, [pc, #80]	; (80066f8 <HAL_PCD_MspInit+0x104>)
 80066a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d114      	bne.n	80066da <HAL_PCD_MspInit+0xe6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066b0:	4b11      	ldr	r3, [pc, #68]	; (80066f8 <HAL_PCD_MspInit+0x104>)
 80066b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066b4:	4a10      	ldr	r2, [pc, #64]	; (80066f8 <HAL_PCD_MspInit+0x104>)
 80066b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066ba:	6593      	str	r3, [r2, #88]	; 0x58
 80066bc:	4b0e      	ldr	r3, [pc, #56]	; (80066f8 <HAL_PCD_MspInit+0x104>)
 80066be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066c4:	60bb      	str	r3, [r7, #8]
 80066c6:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80066c8:	f7fb fd24 	bl	8002114 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80066cc:	4b0a      	ldr	r3, [pc, #40]	; (80066f8 <HAL_PCD_MspInit+0x104>)
 80066ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066d0:	4a09      	ldr	r2, [pc, #36]	; (80066f8 <HAL_PCD_MspInit+0x104>)
 80066d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066d6:	6593      	str	r3, [r2, #88]	; 0x58
 80066d8:	e001      	b.n	80066de <HAL_PCD_MspInit+0xea>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 80066da:	f7fb fd1b 	bl	8002114 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80066de:	2200      	movs	r2, #0
 80066e0:	2100      	movs	r1, #0
 80066e2:	2043      	movs	r0, #67	; 0x43
 80066e4:	f7fa f929 	bl	800093a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80066e8:	2043      	movs	r0, #67	; 0x43
 80066ea:	f7fa f942 	bl	8000972 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80066ee:	bf00      	nop
 80066f0:	37b0      	adds	r7, #176	; 0xb0
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}
 80066f6:	bf00      	nop
 80066f8:	40021000 	.word	0x40021000

080066fc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006710:	4619      	mov	r1, r3
 8006712:	4610      	mov	r0, r2
 8006714:	f7fe fd52 	bl	80051bc <USBD_LL_SetupStage>
}
 8006718:	bf00      	nop
 800671a:	3708      	adds	r7, #8
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	460b      	mov	r3, r1
 800672a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006732:	78fa      	ldrb	r2, [r7, #3]
 8006734:	6879      	ldr	r1, [r7, #4]
 8006736:	4613      	mov	r3, r2
 8006738:	00db      	lsls	r3, r3, #3
 800673a:	4413      	add	r3, r2
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	440b      	add	r3, r1
 8006740:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	78fb      	ldrb	r3, [r7, #3]
 8006748:	4619      	mov	r1, r3
 800674a:	f7fe fd8c 	bl	8005266 <USBD_LL_DataOutStage>
}
 800674e:	bf00      	nop
 8006750:	3708      	adds	r7, #8
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}

08006756 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006756:	b580      	push	{r7, lr}
 8006758:	b082      	sub	sp, #8
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
 800675e:	460b      	mov	r3, r1
 8006760:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006768:	78fa      	ldrb	r2, [r7, #3]
 800676a:	6879      	ldr	r1, [r7, #4]
 800676c:	4613      	mov	r3, r2
 800676e:	00db      	lsls	r3, r3, #3
 8006770:	4413      	add	r3, r2
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	440b      	add	r3, r1
 8006776:	334c      	adds	r3, #76	; 0x4c
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	78fb      	ldrb	r3, [r7, #3]
 800677c:	4619      	mov	r1, r3
 800677e:	f7fe fdd5 	bl	800532c <USBD_LL_DataInStage>
}
 8006782:	bf00      	nop
 8006784:	3708      	adds	r7, #8
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}

0800678a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800678a:	b580      	push	{r7, lr}
 800678c:	b082      	sub	sp, #8
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006798:	4618      	mov	r0, r3
 800679a:	f7fe fee9 	bl	8005570 <USBD_LL_SOF>
}
 800679e:	bf00      	nop
 80067a0:	3708      	adds	r7, #8
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b084      	sub	sp, #16
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80067ae:	2301      	movs	r3, #1
 80067b0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	2b02      	cmp	r3, #2
 80067b8:	d001      	beq.n	80067be <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80067ba:	f7f9 fe73 	bl	80004a4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80067c4:	7bfa      	ldrb	r2, [r7, #15]
 80067c6:	4611      	mov	r1, r2
 80067c8:	4618      	mov	r0, r3
 80067ca:	f7fe fe93 	bl	80054f4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80067d4:	4618      	mov	r0, r3
 80067d6:	f7fe fe3f 	bl	8005458 <USBD_LL_Reset>
}
 80067da:	bf00      	nop
 80067dc:	3710      	adds	r7, #16
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
	...

080067e4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b082      	sub	sp, #8
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	6812      	ldr	r2, [r2, #0]
 80067fa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80067fe:	f043 0301 	orr.w	r3, r3, #1
 8006802:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800680a:	4618      	mov	r0, r3
 800680c:	f7fe fe82 	bl	8005514 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6a1b      	ldr	r3, [r3, #32]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d005      	beq.n	8006824 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006818:	4b04      	ldr	r3, [pc, #16]	; (800682c <HAL_PCD_SuspendCallback+0x48>)
 800681a:	691b      	ldr	r3, [r3, #16]
 800681c:	4a03      	ldr	r2, [pc, #12]	; (800682c <HAL_PCD_SuspendCallback+0x48>)
 800681e:	f043 0306 	orr.w	r3, r3, #6
 8006822:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006824:	bf00      	nop
 8006826:	3708      	adds	r7, #8
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}
 800682c:	e000ed00 	.word	0xe000ed00

08006830 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	6812      	ldr	r2, [r2, #0]
 8006846:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800684a:	f023 0301 	bic.w	r3, r3, #1
 800684e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6a1b      	ldr	r3, [r3, #32]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d007      	beq.n	8006868 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006858:	4b08      	ldr	r3, [pc, #32]	; (800687c <HAL_PCD_ResumeCallback+0x4c>)
 800685a:	691b      	ldr	r3, [r3, #16]
 800685c:	4a07      	ldr	r2, [pc, #28]	; (800687c <HAL_PCD_ResumeCallback+0x4c>)
 800685e:	f023 0306 	bic.w	r3, r3, #6
 8006862:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8006864:	f000 fae2 	bl	8006e2c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800686e:	4618      	mov	r0, r3
 8006870:	f7fe fe66 	bl	8005540 <USBD_LL_Resume>
}
 8006874:	bf00      	nop
 8006876:	3708      	adds	r7, #8
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}
 800687c:	e000ed00 	.word	0xe000ed00

08006880 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b082      	sub	sp, #8
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	460b      	mov	r3, r1
 800688a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006892:	78fa      	ldrb	r2, [r7, #3]
 8006894:	4611      	mov	r1, r2
 8006896:	4618      	mov	r0, r3
 8006898:	f7fe feb2 	bl	8005600 <USBD_LL_IsoOUTIncomplete>
}
 800689c:	bf00      	nop
 800689e:	3708      	adds	r7, #8
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b082      	sub	sp, #8
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	460b      	mov	r3, r1
 80068ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80068b6:	78fa      	ldrb	r2, [r7, #3]
 80068b8:	4611      	mov	r1, r2
 80068ba:	4618      	mov	r0, r3
 80068bc:	f7fe fe7a 	bl	80055b4 <USBD_LL_IsoINIncomplete>
}
 80068c0:	bf00      	nop
 80068c2:	3708      	adds	r7, #8
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80068d6:	4618      	mov	r0, r3
 80068d8:	f7fe feb8 	bl	800564c <USBD_LL_DevConnected>
}
 80068dc:	bf00      	nop
 80068de:	3708      	adds	r7, #8
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b082      	sub	sp, #8
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80068f2:	4618      	mov	r0, r3
 80068f4:	f7fe feb5 	bl	8005662 <USBD_LL_DevDisconnected>
}
 80068f8:	bf00      	nop
 80068fa:	3708      	adds	r7, #8
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}

08006900 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b082      	sub	sp, #8
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d13c      	bne.n	800698a <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006910:	4a20      	ldr	r2, [pc, #128]	; (8006994 <USBD_LL_Init+0x94>)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a1e      	ldr	r2, [pc, #120]	; (8006994 <USBD_LL_Init+0x94>)
 800691c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006920:	4b1c      	ldr	r3, [pc, #112]	; (8006994 <USBD_LL_Init+0x94>)
 8006922:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006926:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8006928:	4b1a      	ldr	r3, [pc, #104]	; (8006994 <USBD_LL_Init+0x94>)
 800692a:	2206      	movs	r2, #6
 800692c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800692e:	4b19      	ldr	r3, [pc, #100]	; (8006994 <USBD_LL_Init+0x94>)
 8006930:	2202      	movs	r2, #2
 8006932:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006934:	4b17      	ldr	r3, [pc, #92]	; (8006994 <USBD_LL_Init+0x94>)
 8006936:	2202      	movs	r2, #2
 8006938:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800693a:	4b16      	ldr	r3, [pc, #88]	; (8006994 <USBD_LL_Init+0x94>)
 800693c:	2200      	movs	r2, #0
 800693e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006940:	4b14      	ldr	r3, [pc, #80]	; (8006994 <USBD_LL_Init+0x94>)
 8006942:	2200      	movs	r2, #0
 8006944:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006946:	4b13      	ldr	r3, [pc, #76]	; (8006994 <USBD_LL_Init+0x94>)
 8006948:	2200      	movs	r2, #0
 800694a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800694c:	4b11      	ldr	r3, [pc, #68]	; (8006994 <USBD_LL_Init+0x94>)
 800694e:	2200      	movs	r2, #0
 8006950:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006952:	4b10      	ldr	r3, [pc, #64]	; (8006994 <USBD_LL_Init+0x94>)
 8006954:	2200      	movs	r2, #0
 8006956:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006958:	4b0e      	ldr	r3, [pc, #56]	; (8006994 <USBD_LL_Init+0x94>)
 800695a:	2200      	movs	r2, #0
 800695c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800695e:	480d      	ldr	r0, [pc, #52]	; (8006994 <USBD_LL_Init+0x94>)
 8006960:	f7fa f9cc 	bl	8000cfc <HAL_PCD_Init>
 8006964:	4603      	mov	r3, r0
 8006966:	2b00      	cmp	r3, #0
 8006968:	d001      	beq.n	800696e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800696a:	f7f9 fd9b 	bl	80004a4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800696e:	2180      	movs	r1, #128	; 0x80
 8006970:	4808      	ldr	r0, [pc, #32]	; (8006994 <USBD_LL_Init+0x94>)
 8006972:	f7fb fb36 	bl	8001fe2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006976:	2240      	movs	r2, #64	; 0x40
 8006978:	2100      	movs	r1, #0
 800697a:	4806      	ldr	r0, [pc, #24]	; (8006994 <USBD_LL_Init+0x94>)
 800697c:	f7fb faea 	bl	8001f54 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006980:	2280      	movs	r2, #128	; 0x80
 8006982:	2101      	movs	r1, #1
 8006984:	4803      	ldr	r0, [pc, #12]	; (8006994 <USBD_LL_Init+0x94>)
 8006986:	f7fb fae5 	bl	8001f54 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800698a:	2300      	movs	r3, #0
}
 800698c:	4618      	mov	r0, r3
 800698e:	3708      	adds	r7, #8
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}
 8006994:	20000730 	.word	0x20000730

08006998 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b084      	sub	sp, #16
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80069a0:	2300      	movs	r3, #0
 80069a2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80069a4:	2300      	movs	r3, #0
 80069a6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80069ae:	4618      	mov	r0, r3
 80069b0:	f7fa fac8 	bl	8000f44 <HAL_PCD_Start>
 80069b4:	4603      	mov	r3, r0
 80069b6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80069b8:	7bbb      	ldrb	r3, [r7, #14]
 80069ba:	2b03      	cmp	r3, #3
 80069bc:	d816      	bhi.n	80069ec <USBD_LL_Start+0x54>
 80069be:	a201      	add	r2, pc, #4	; (adr r2, 80069c4 <USBD_LL_Start+0x2c>)
 80069c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069c4:	080069d5 	.word	0x080069d5
 80069c8:	080069db 	.word	0x080069db
 80069cc:	080069e1 	.word	0x080069e1
 80069d0:	080069e7 	.word	0x080069e7
    case HAL_OK :
      usb_status = USBD_OK;
 80069d4:	2300      	movs	r3, #0
 80069d6:	73fb      	strb	r3, [r7, #15]
    break;
 80069d8:	e00b      	b.n	80069f2 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80069da:	2303      	movs	r3, #3
 80069dc:	73fb      	strb	r3, [r7, #15]
    break;
 80069de:	e008      	b.n	80069f2 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80069e0:	2301      	movs	r3, #1
 80069e2:	73fb      	strb	r3, [r7, #15]
    break;
 80069e4:	e005      	b.n	80069f2 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80069e6:	2303      	movs	r3, #3
 80069e8:	73fb      	strb	r3, [r7, #15]
    break;
 80069ea:	e002      	b.n	80069f2 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 80069ec:	2303      	movs	r3, #3
 80069ee:	73fb      	strb	r3, [r7, #15]
    break;
 80069f0:	bf00      	nop
  }
  return usb_status;
 80069f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3710      	adds	r7, #16
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	4608      	mov	r0, r1
 8006a06:	4611      	mov	r1, r2
 8006a08:	461a      	mov	r2, r3
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	70fb      	strb	r3, [r7, #3]
 8006a0e:	460b      	mov	r3, r1
 8006a10:	70bb      	strb	r3, [r7, #2]
 8006a12:	4613      	mov	r3, r2
 8006a14:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a16:	2300      	movs	r3, #0
 8006a18:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006a24:	78bb      	ldrb	r3, [r7, #2]
 8006a26:	883a      	ldrh	r2, [r7, #0]
 8006a28:	78f9      	ldrb	r1, [r7, #3]
 8006a2a:	f7fa ff72 	bl	8001912 <HAL_PCD_EP_Open>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006a32:	7bbb      	ldrb	r3, [r7, #14]
 8006a34:	2b03      	cmp	r3, #3
 8006a36:	d817      	bhi.n	8006a68 <USBD_LL_OpenEP+0x6c>
 8006a38:	a201      	add	r2, pc, #4	; (adr r2, 8006a40 <USBD_LL_OpenEP+0x44>)
 8006a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a3e:	bf00      	nop
 8006a40:	08006a51 	.word	0x08006a51
 8006a44:	08006a57 	.word	0x08006a57
 8006a48:	08006a5d 	.word	0x08006a5d
 8006a4c:	08006a63 	.word	0x08006a63
    case HAL_OK :
      usb_status = USBD_OK;
 8006a50:	2300      	movs	r3, #0
 8006a52:	73fb      	strb	r3, [r7, #15]
    break;
 8006a54:	e00b      	b.n	8006a6e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006a56:	2303      	movs	r3, #3
 8006a58:	73fb      	strb	r3, [r7, #15]
    break;
 8006a5a:	e008      	b.n	8006a6e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	73fb      	strb	r3, [r7, #15]
    break;
 8006a60:	e005      	b.n	8006a6e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006a62:	2303      	movs	r3, #3
 8006a64:	73fb      	strb	r3, [r7, #15]
    break;
 8006a66:	e002      	b.n	8006a6e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8006a68:	2303      	movs	r3, #3
 8006a6a:	73fb      	strb	r3, [r7, #15]
    break;
 8006a6c:	bf00      	nop
  }
  return usb_status;
 8006a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3710      	adds	r7, #16
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	460b      	mov	r3, r1
 8006a82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a84:	2300      	movs	r3, #0
 8006a86:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006a92:	78fa      	ldrb	r2, [r7, #3]
 8006a94:	4611      	mov	r1, r2
 8006a96:	4618      	mov	r0, r3
 8006a98:	f7fa ffa3 	bl	80019e2 <HAL_PCD_EP_Close>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006aa0:	7bbb      	ldrb	r3, [r7, #14]
 8006aa2:	2b03      	cmp	r3, #3
 8006aa4:	d816      	bhi.n	8006ad4 <USBD_LL_CloseEP+0x5c>
 8006aa6:	a201      	add	r2, pc, #4	; (adr r2, 8006aac <USBD_LL_CloseEP+0x34>)
 8006aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aac:	08006abd 	.word	0x08006abd
 8006ab0:	08006ac3 	.word	0x08006ac3
 8006ab4:	08006ac9 	.word	0x08006ac9
 8006ab8:	08006acf 	.word	0x08006acf
    case HAL_OK :
      usb_status = USBD_OK;
 8006abc:	2300      	movs	r3, #0
 8006abe:	73fb      	strb	r3, [r7, #15]
    break;
 8006ac0:	e00b      	b.n	8006ada <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006ac2:	2303      	movs	r3, #3
 8006ac4:	73fb      	strb	r3, [r7, #15]
    break;
 8006ac6:	e008      	b.n	8006ada <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	73fb      	strb	r3, [r7, #15]
    break;
 8006acc:	e005      	b.n	8006ada <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006ace:	2303      	movs	r3, #3
 8006ad0:	73fb      	strb	r3, [r7, #15]
    break;
 8006ad2:	e002      	b.n	8006ada <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8006ad4:	2303      	movs	r3, #3
 8006ad6:	73fb      	strb	r3, [r7, #15]
    break;
 8006ad8:	bf00      	nop
  }
  return usb_status;
 8006ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3710      	adds	r7, #16
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b084      	sub	sp, #16
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	460b      	mov	r3, r1
 8006aee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006af0:	2300      	movs	r3, #0
 8006af2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006af4:	2300      	movs	r3, #0
 8006af6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006afe:	78fa      	ldrb	r2, [r7, #3]
 8006b00:	4611      	mov	r1, r2
 8006b02:	4618      	mov	r0, r3
 8006b04:	f7fb f832 	bl	8001b6c <HAL_PCD_EP_SetStall>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006b0c:	7bbb      	ldrb	r3, [r7, #14]
 8006b0e:	2b03      	cmp	r3, #3
 8006b10:	d816      	bhi.n	8006b40 <USBD_LL_StallEP+0x5c>
 8006b12:	a201      	add	r2, pc, #4	; (adr r2, 8006b18 <USBD_LL_StallEP+0x34>)
 8006b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b18:	08006b29 	.word	0x08006b29
 8006b1c:	08006b2f 	.word	0x08006b2f
 8006b20:	08006b35 	.word	0x08006b35
 8006b24:	08006b3b 	.word	0x08006b3b
    case HAL_OK :
      usb_status = USBD_OK;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	73fb      	strb	r3, [r7, #15]
    break;
 8006b2c:	e00b      	b.n	8006b46 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006b2e:	2303      	movs	r3, #3
 8006b30:	73fb      	strb	r3, [r7, #15]
    break;
 8006b32:	e008      	b.n	8006b46 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006b34:	2301      	movs	r3, #1
 8006b36:	73fb      	strb	r3, [r7, #15]
    break;
 8006b38:	e005      	b.n	8006b46 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006b3a:	2303      	movs	r3, #3
 8006b3c:	73fb      	strb	r3, [r7, #15]
    break;
 8006b3e:	e002      	b.n	8006b46 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8006b40:	2303      	movs	r3, #3
 8006b42:	73fb      	strb	r3, [r7, #15]
    break;
 8006b44:	bf00      	nop
  }
  return usb_status;
 8006b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3710      	adds	r7, #16
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}

08006b50 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b084      	sub	sp, #16
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	460b      	mov	r3, r1
 8006b5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b60:	2300      	movs	r3, #0
 8006b62:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006b6a:	78fa      	ldrb	r2, [r7, #3]
 8006b6c:	4611      	mov	r1, r2
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f7fb f85e 	bl	8001c30 <HAL_PCD_EP_ClrStall>
 8006b74:	4603      	mov	r3, r0
 8006b76:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006b78:	7bbb      	ldrb	r3, [r7, #14]
 8006b7a:	2b03      	cmp	r3, #3
 8006b7c:	d816      	bhi.n	8006bac <USBD_LL_ClearStallEP+0x5c>
 8006b7e:	a201      	add	r2, pc, #4	; (adr r2, 8006b84 <USBD_LL_ClearStallEP+0x34>)
 8006b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b84:	08006b95 	.word	0x08006b95
 8006b88:	08006b9b 	.word	0x08006b9b
 8006b8c:	08006ba1 	.word	0x08006ba1
 8006b90:	08006ba7 	.word	0x08006ba7
    case HAL_OK :
      usb_status = USBD_OK;
 8006b94:	2300      	movs	r3, #0
 8006b96:	73fb      	strb	r3, [r7, #15]
    break;
 8006b98:	e00b      	b.n	8006bb2 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006b9a:	2303      	movs	r3, #3
 8006b9c:	73fb      	strb	r3, [r7, #15]
    break;
 8006b9e:	e008      	b.n	8006bb2 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	73fb      	strb	r3, [r7, #15]
    break;
 8006ba4:	e005      	b.n	8006bb2 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006ba6:	2303      	movs	r3, #3
 8006ba8:	73fb      	strb	r3, [r7, #15]
    break;
 8006baa:	e002      	b.n	8006bb2 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8006bac:	2303      	movs	r3, #3
 8006bae:	73fb      	strb	r3, [r7, #15]
    break;
 8006bb0:	bf00      	nop
  }
  return usb_status;
 8006bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3710      	adds	r7, #16
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b085      	sub	sp, #20
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	460b      	mov	r3, r1
 8006bc6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006bce:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006bd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	da0b      	bge.n	8006bf0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006bd8:	78fb      	ldrb	r3, [r7, #3]
 8006bda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006bde:	68f9      	ldr	r1, [r7, #12]
 8006be0:	4613      	mov	r3, r2
 8006be2:	00db      	lsls	r3, r3, #3
 8006be4:	4413      	add	r3, r2
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	440b      	add	r3, r1
 8006bea:	333e      	adds	r3, #62	; 0x3e
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	e00b      	b.n	8006c08 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006bf0:	78fb      	ldrb	r3, [r7, #3]
 8006bf2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006bf6:	68f9      	ldr	r1, [r7, #12]
 8006bf8:	4613      	mov	r3, r2
 8006bfa:	00db      	lsls	r3, r3, #3
 8006bfc:	4413      	add	r3, r2
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	440b      	add	r3, r1
 8006c02:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8006c06:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3714      	adds	r7, #20
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr

08006c14 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b084      	sub	sp, #16
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c20:	2300      	movs	r3, #0
 8006c22:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c24:	2300      	movs	r3, #0
 8006c26:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006c2e:	78fa      	ldrb	r2, [r7, #3]
 8006c30:	4611      	mov	r1, r2
 8006c32:	4618      	mov	r0, r3
 8006c34:	f7fa fe48 	bl	80018c8 <HAL_PCD_SetAddress>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006c3c:	7bbb      	ldrb	r3, [r7, #14]
 8006c3e:	2b03      	cmp	r3, #3
 8006c40:	d816      	bhi.n	8006c70 <USBD_LL_SetUSBAddress+0x5c>
 8006c42:	a201      	add	r2, pc, #4	; (adr r2, 8006c48 <USBD_LL_SetUSBAddress+0x34>)
 8006c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c48:	08006c59 	.word	0x08006c59
 8006c4c:	08006c5f 	.word	0x08006c5f
 8006c50:	08006c65 	.word	0x08006c65
 8006c54:	08006c6b 	.word	0x08006c6b
    case HAL_OK :
      usb_status = USBD_OK;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	73fb      	strb	r3, [r7, #15]
    break;
 8006c5c:	e00b      	b.n	8006c76 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006c5e:	2303      	movs	r3, #3
 8006c60:	73fb      	strb	r3, [r7, #15]
    break;
 8006c62:	e008      	b.n	8006c76 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006c64:	2301      	movs	r3, #1
 8006c66:	73fb      	strb	r3, [r7, #15]
    break;
 8006c68:	e005      	b.n	8006c76 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	73fb      	strb	r3, [r7, #15]
    break;
 8006c6e:	e002      	b.n	8006c76 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8006c70:	2303      	movs	r3, #3
 8006c72:	73fb      	strb	r3, [r7, #15]
    break;
 8006c74:	bf00      	nop
  }
  return usb_status;
 8006c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3710      	adds	r7, #16
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b086      	sub	sp, #24
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	607a      	str	r2, [r7, #4]
 8006c8a:	603b      	str	r3, [r7, #0]
 8006c8c:	460b      	mov	r3, r1
 8006c8e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c90:	2300      	movs	r3, #0
 8006c92:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c94:	2300      	movs	r3, #0
 8006c96:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006c9e:	7af9      	ldrb	r1, [r7, #11]
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	f7fa ff25 	bl	8001af2 <HAL_PCD_EP_Transmit>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8006cac:	7dbb      	ldrb	r3, [r7, #22]
 8006cae:	2b03      	cmp	r3, #3
 8006cb0:	d816      	bhi.n	8006ce0 <USBD_LL_Transmit+0x60>
 8006cb2:	a201      	add	r2, pc, #4	; (adr r2, 8006cb8 <USBD_LL_Transmit+0x38>)
 8006cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb8:	08006cc9 	.word	0x08006cc9
 8006cbc:	08006ccf 	.word	0x08006ccf
 8006cc0:	08006cd5 	.word	0x08006cd5
 8006cc4:	08006cdb 	.word	0x08006cdb
    case HAL_OK :
      usb_status = USBD_OK;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	75fb      	strb	r3, [r7, #23]
    break;
 8006ccc:	e00b      	b.n	8006ce6 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006cce:	2303      	movs	r3, #3
 8006cd0:	75fb      	strb	r3, [r7, #23]
    break;
 8006cd2:	e008      	b.n	8006ce6 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	75fb      	strb	r3, [r7, #23]
    break;
 8006cd8:	e005      	b.n	8006ce6 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006cda:	2303      	movs	r3, #3
 8006cdc:	75fb      	strb	r3, [r7, #23]
    break;
 8006cde:	e002      	b.n	8006ce6 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8006ce0:	2303      	movs	r3, #3
 8006ce2:	75fb      	strb	r3, [r7, #23]
    break;
 8006ce4:	bf00      	nop
  }
  return usb_status;
 8006ce6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3718      	adds	r7, #24
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b086      	sub	sp, #24
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	60f8      	str	r0, [r7, #12]
 8006cf8:	607a      	str	r2, [r7, #4]
 8006cfa:	603b      	str	r3, [r7, #0]
 8006cfc:	460b      	mov	r3, r1
 8006cfe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d00:	2300      	movs	r3, #0
 8006d02:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d04:	2300      	movs	r3, #0
 8006d06:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006d0e:	7af9      	ldrb	r1, [r7, #11]
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	f7fa feaf 	bl	8001a76 <HAL_PCD_EP_Receive>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8006d1c:	7dbb      	ldrb	r3, [r7, #22]
 8006d1e:	2b03      	cmp	r3, #3
 8006d20:	d816      	bhi.n	8006d50 <USBD_LL_PrepareReceive+0x60>
 8006d22:	a201      	add	r2, pc, #4	; (adr r2, 8006d28 <USBD_LL_PrepareReceive+0x38>)
 8006d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d28:	08006d39 	.word	0x08006d39
 8006d2c:	08006d3f 	.word	0x08006d3f
 8006d30:	08006d45 	.word	0x08006d45
 8006d34:	08006d4b 	.word	0x08006d4b
    case HAL_OK :
      usb_status = USBD_OK;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	75fb      	strb	r3, [r7, #23]
    break;
 8006d3c:	e00b      	b.n	8006d56 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006d3e:	2303      	movs	r3, #3
 8006d40:	75fb      	strb	r3, [r7, #23]
    break;
 8006d42:	e008      	b.n	8006d56 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006d44:	2301      	movs	r3, #1
 8006d46:	75fb      	strb	r3, [r7, #23]
    break;
 8006d48:	e005      	b.n	8006d56 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006d4a:	2303      	movs	r3, #3
 8006d4c:	75fb      	strb	r3, [r7, #23]
    break;
 8006d4e:	e002      	b.n	8006d56 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8006d50:	2303      	movs	r3, #3
 8006d52:	75fb      	strb	r3, [r7, #23]
    break;
 8006d54:	bf00      	nop
  }
  return usb_status;
 8006d56:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3718      	adds	r7, #24
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b082      	sub	sp, #8
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	460b      	mov	r3, r1
 8006d6a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8006d6c:	78fb      	ldrb	r3, [r7, #3]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d002      	beq.n	8006d78 <HAL_PCDEx_LPM_Callback+0x18>
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d01f      	beq.n	8006db6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8006d76:	e03b      	b.n	8006df0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6a1b      	ldr	r3, [r3, #32]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d007      	beq.n	8006d90 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8006d80:	f000 f854 	bl	8006e2c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006d84:	4b1c      	ldr	r3, [pc, #112]	; (8006df8 <HAL_PCDEx_LPM_Callback+0x98>)
 8006d86:	691b      	ldr	r3, [r3, #16]
 8006d88:	4a1b      	ldr	r2, [pc, #108]	; (8006df8 <HAL_PCDEx_LPM_Callback+0x98>)
 8006d8a:	f023 0306 	bic.w	r3, r3, #6
 8006d8e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	6812      	ldr	r2, [r2, #0]
 8006d9e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006da2:	f023 0301 	bic.w	r3, r3, #1
 8006da6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006dae:	4618      	mov	r0, r3
 8006db0:	f7fe fbc6 	bl	8005540 <USBD_LL_Resume>
    break;
 8006db4:	e01c      	b.n	8006df0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	6812      	ldr	r2, [r2, #0]
 8006dc4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006dc8:	f043 0301 	orr.w	r3, r3, #1
 8006dcc:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f7fe fb9d 	bl	8005514 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a1b      	ldr	r3, [r3, #32]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d005      	beq.n	8006dee <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006de2:	4b05      	ldr	r3, [pc, #20]	; (8006df8 <HAL_PCDEx_LPM_Callback+0x98>)
 8006de4:	691b      	ldr	r3, [r3, #16]
 8006de6:	4a04      	ldr	r2, [pc, #16]	; (8006df8 <HAL_PCDEx_LPM_Callback+0x98>)
 8006de8:	f043 0306 	orr.w	r3, r3, #6
 8006dec:	6113      	str	r3, [r2, #16]
    break;
 8006dee:	bf00      	nop
}
 8006df0:	bf00      	nop
 8006df2:	3708      	adds	r7, #8
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}
 8006df8:	e000ed00 	.word	0xe000ed00

08006dfc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006e04:	4b03      	ldr	r3, [pc, #12]	; (8006e14 <USBD_static_malloc+0x18>)
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	370c      	adds	r7, #12
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr
 8006e12:	bf00      	nop
 8006e14:	20000c3c 	.word	0x20000c3c

08006e18 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b083      	sub	sp, #12
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]

}
 8006e20:	bf00      	nop
 8006e22:	370c      	adds	r7, #12
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8006e30:	f7f9 fac4 	bl	80003bc <SystemClock_Config>
}
 8006e34:	bf00      	nop
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <__errno>:
 8006e38:	4b01      	ldr	r3, [pc, #4]	; (8006e40 <__errno+0x8>)
 8006e3a:	6818      	ldr	r0, [r3, #0]
 8006e3c:	4770      	bx	lr
 8006e3e:	bf00      	nop
 8006e40:	20000168 	.word	0x20000168

08006e44 <__libc_init_array>:
 8006e44:	b570      	push	{r4, r5, r6, lr}
 8006e46:	4d0d      	ldr	r5, [pc, #52]	; (8006e7c <__libc_init_array+0x38>)
 8006e48:	4c0d      	ldr	r4, [pc, #52]	; (8006e80 <__libc_init_array+0x3c>)
 8006e4a:	1b64      	subs	r4, r4, r5
 8006e4c:	10a4      	asrs	r4, r4, #2
 8006e4e:	2600      	movs	r6, #0
 8006e50:	42a6      	cmp	r6, r4
 8006e52:	d109      	bne.n	8006e68 <__libc_init_array+0x24>
 8006e54:	4d0b      	ldr	r5, [pc, #44]	; (8006e84 <__libc_init_array+0x40>)
 8006e56:	4c0c      	ldr	r4, [pc, #48]	; (8006e88 <__libc_init_array+0x44>)
 8006e58:	f000 fc8e 	bl	8007778 <_init>
 8006e5c:	1b64      	subs	r4, r4, r5
 8006e5e:	10a4      	asrs	r4, r4, #2
 8006e60:	2600      	movs	r6, #0
 8006e62:	42a6      	cmp	r6, r4
 8006e64:	d105      	bne.n	8006e72 <__libc_init_array+0x2e>
 8006e66:	bd70      	pop	{r4, r5, r6, pc}
 8006e68:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e6c:	4798      	blx	r3
 8006e6e:	3601      	adds	r6, #1
 8006e70:	e7ee      	b.n	8006e50 <__libc_init_array+0xc>
 8006e72:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e76:	4798      	blx	r3
 8006e78:	3601      	adds	r6, #1
 8006e7a:	e7f2      	b.n	8006e62 <__libc_init_array+0x1e>
 8006e7c:	08007864 	.word	0x08007864
 8006e80:	08007864 	.word	0x08007864
 8006e84:	08007864 	.word	0x08007864
 8006e88:	08007868 	.word	0x08007868

08006e8c <memset>:
 8006e8c:	4402      	add	r2, r0
 8006e8e:	4603      	mov	r3, r0
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d100      	bne.n	8006e96 <memset+0xa>
 8006e94:	4770      	bx	lr
 8006e96:	f803 1b01 	strb.w	r1, [r3], #1
 8006e9a:	e7f9      	b.n	8006e90 <memset+0x4>

08006e9c <siprintf>:
 8006e9c:	b40e      	push	{r1, r2, r3}
 8006e9e:	b500      	push	{lr}
 8006ea0:	b09c      	sub	sp, #112	; 0x70
 8006ea2:	ab1d      	add	r3, sp, #116	; 0x74
 8006ea4:	9002      	str	r0, [sp, #8]
 8006ea6:	9006      	str	r0, [sp, #24]
 8006ea8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006eac:	4809      	ldr	r0, [pc, #36]	; (8006ed4 <siprintf+0x38>)
 8006eae:	9107      	str	r1, [sp, #28]
 8006eb0:	9104      	str	r1, [sp, #16]
 8006eb2:	4909      	ldr	r1, [pc, #36]	; (8006ed8 <siprintf+0x3c>)
 8006eb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006eb8:	9105      	str	r1, [sp, #20]
 8006eba:	6800      	ldr	r0, [r0, #0]
 8006ebc:	9301      	str	r3, [sp, #4]
 8006ebe:	a902      	add	r1, sp, #8
 8006ec0:	f000 f868 	bl	8006f94 <_svfiprintf_r>
 8006ec4:	9b02      	ldr	r3, [sp, #8]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	701a      	strb	r2, [r3, #0]
 8006eca:	b01c      	add	sp, #112	; 0x70
 8006ecc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ed0:	b003      	add	sp, #12
 8006ed2:	4770      	bx	lr
 8006ed4:	20000168 	.word	0x20000168
 8006ed8:	ffff0208 	.word	0xffff0208

08006edc <__ssputs_r>:
 8006edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ee0:	688e      	ldr	r6, [r1, #8]
 8006ee2:	429e      	cmp	r6, r3
 8006ee4:	4682      	mov	sl, r0
 8006ee6:	460c      	mov	r4, r1
 8006ee8:	4690      	mov	r8, r2
 8006eea:	461f      	mov	r7, r3
 8006eec:	d838      	bhi.n	8006f60 <__ssputs_r+0x84>
 8006eee:	898a      	ldrh	r2, [r1, #12]
 8006ef0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006ef4:	d032      	beq.n	8006f5c <__ssputs_r+0x80>
 8006ef6:	6825      	ldr	r5, [r4, #0]
 8006ef8:	6909      	ldr	r1, [r1, #16]
 8006efa:	eba5 0901 	sub.w	r9, r5, r1
 8006efe:	6965      	ldr	r5, [r4, #20]
 8006f00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006f08:	3301      	adds	r3, #1
 8006f0a:	444b      	add	r3, r9
 8006f0c:	106d      	asrs	r5, r5, #1
 8006f0e:	429d      	cmp	r5, r3
 8006f10:	bf38      	it	cc
 8006f12:	461d      	movcc	r5, r3
 8006f14:	0553      	lsls	r3, r2, #21
 8006f16:	d531      	bpl.n	8006f7c <__ssputs_r+0xa0>
 8006f18:	4629      	mov	r1, r5
 8006f1a:	f000 fb63 	bl	80075e4 <_malloc_r>
 8006f1e:	4606      	mov	r6, r0
 8006f20:	b950      	cbnz	r0, 8006f38 <__ssputs_r+0x5c>
 8006f22:	230c      	movs	r3, #12
 8006f24:	f8ca 3000 	str.w	r3, [sl]
 8006f28:	89a3      	ldrh	r3, [r4, #12]
 8006f2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f2e:	81a3      	strh	r3, [r4, #12]
 8006f30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f38:	6921      	ldr	r1, [r4, #16]
 8006f3a:	464a      	mov	r2, r9
 8006f3c:	f000 fabe 	bl	80074bc <memcpy>
 8006f40:	89a3      	ldrh	r3, [r4, #12]
 8006f42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006f46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f4a:	81a3      	strh	r3, [r4, #12]
 8006f4c:	6126      	str	r6, [r4, #16]
 8006f4e:	6165      	str	r5, [r4, #20]
 8006f50:	444e      	add	r6, r9
 8006f52:	eba5 0509 	sub.w	r5, r5, r9
 8006f56:	6026      	str	r6, [r4, #0]
 8006f58:	60a5      	str	r5, [r4, #8]
 8006f5a:	463e      	mov	r6, r7
 8006f5c:	42be      	cmp	r6, r7
 8006f5e:	d900      	bls.n	8006f62 <__ssputs_r+0x86>
 8006f60:	463e      	mov	r6, r7
 8006f62:	6820      	ldr	r0, [r4, #0]
 8006f64:	4632      	mov	r2, r6
 8006f66:	4641      	mov	r1, r8
 8006f68:	f000 fab6 	bl	80074d8 <memmove>
 8006f6c:	68a3      	ldr	r3, [r4, #8]
 8006f6e:	1b9b      	subs	r3, r3, r6
 8006f70:	60a3      	str	r3, [r4, #8]
 8006f72:	6823      	ldr	r3, [r4, #0]
 8006f74:	4433      	add	r3, r6
 8006f76:	6023      	str	r3, [r4, #0]
 8006f78:	2000      	movs	r0, #0
 8006f7a:	e7db      	b.n	8006f34 <__ssputs_r+0x58>
 8006f7c:	462a      	mov	r2, r5
 8006f7e:	f000 fba5 	bl	80076cc <_realloc_r>
 8006f82:	4606      	mov	r6, r0
 8006f84:	2800      	cmp	r0, #0
 8006f86:	d1e1      	bne.n	8006f4c <__ssputs_r+0x70>
 8006f88:	6921      	ldr	r1, [r4, #16]
 8006f8a:	4650      	mov	r0, sl
 8006f8c:	f000 fabe 	bl	800750c <_free_r>
 8006f90:	e7c7      	b.n	8006f22 <__ssputs_r+0x46>
	...

08006f94 <_svfiprintf_r>:
 8006f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f98:	4698      	mov	r8, r3
 8006f9a:	898b      	ldrh	r3, [r1, #12]
 8006f9c:	061b      	lsls	r3, r3, #24
 8006f9e:	b09d      	sub	sp, #116	; 0x74
 8006fa0:	4607      	mov	r7, r0
 8006fa2:	460d      	mov	r5, r1
 8006fa4:	4614      	mov	r4, r2
 8006fa6:	d50e      	bpl.n	8006fc6 <_svfiprintf_r+0x32>
 8006fa8:	690b      	ldr	r3, [r1, #16]
 8006faa:	b963      	cbnz	r3, 8006fc6 <_svfiprintf_r+0x32>
 8006fac:	2140      	movs	r1, #64	; 0x40
 8006fae:	f000 fb19 	bl	80075e4 <_malloc_r>
 8006fb2:	6028      	str	r0, [r5, #0]
 8006fb4:	6128      	str	r0, [r5, #16]
 8006fb6:	b920      	cbnz	r0, 8006fc2 <_svfiprintf_r+0x2e>
 8006fb8:	230c      	movs	r3, #12
 8006fba:	603b      	str	r3, [r7, #0]
 8006fbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006fc0:	e0d1      	b.n	8007166 <_svfiprintf_r+0x1d2>
 8006fc2:	2340      	movs	r3, #64	; 0x40
 8006fc4:	616b      	str	r3, [r5, #20]
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	9309      	str	r3, [sp, #36]	; 0x24
 8006fca:	2320      	movs	r3, #32
 8006fcc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006fd0:	f8cd 800c 	str.w	r8, [sp, #12]
 8006fd4:	2330      	movs	r3, #48	; 0x30
 8006fd6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007180 <_svfiprintf_r+0x1ec>
 8006fda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006fde:	f04f 0901 	mov.w	r9, #1
 8006fe2:	4623      	mov	r3, r4
 8006fe4:	469a      	mov	sl, r3
 8006fe6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006fea:	b10a      	cbz	r2, 8006ff0 <_svfiprintf_r+0x5c>
 8006fec:	2a25      	cmp	r2, #37	; 0x25
 8006fee:	d1f9      	bne.n	8006fe4 <_svfiprintf_r+0x50>
 8006ff0:	ebba 0b04 	subs.w	fp, sl, r4
 8006ff4:	d00b      	beq.n	800700e <_svfiprintf_r+0x7a>
 8006ff6:	465b      	mov	r3, fp
 8006ff8:	4622      	mov	r2, r4
 8006ffa:	4629      	mov	r1, r5
 8006ffc:	4638      	mov	r0, r7
 8006ffe:	f7ff ff6d 	bl	8006edc <__ssputs_r>
 8007002:	3001      	adds	r0, #1
 8007004:	f000 80aa 	beq.w	800715c <_svfiprintf_r+0x1c8>
 8007008:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800700a:	445a      	add	r2, fp
 800700c:	9209      	str	r2, [sp, #36]	; 0x24
 800700e:	f89a 3000 	ldrb.w	r3, [sl]
 8007012:	2b00      	cmp	r3, #0
 8007014:	f000 80a2 	beq.w	800715c <_svfiprintf_r+0x1c8>
 8007018:	2300      	movs	r3, #0
 800701a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800701e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007022:	f10a 0a01 	add.w	sl, sl, #1
 8007026:	9304      	str	r3, [sp, #16]
 8007028:	9307      	str	r3, [sp, #28]
 800702a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800702e:	931a      	str	r3, [sp, #104]	; 0x68
 8007030:	4654      	mov	r4, sl
 8007032:	2205      	movs	r2, #5
 8007034:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007038:	4851      	ldr	r0, [pc, #324]	; (8007180 <_svfiprintf_r+0x1ec>)
 800703a:	f7f9 f8d1 	bl	80001e0 <memchr>
 800703e:	9a04      	ldr	r2, [sp, #16]
 8007040:	b9d8      	cbnz	r0, 800707a <_svfiprintf_r+0xe6>
 8007042:	06d0      	lsls	r0, r2, #27
 8007044:	bf44      	itt	mi
 8007046:	2320      	movmi	r3, #32
 8007048:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800704c:	0711      	lsls	r1, r2, #28
 800704e:	bf44      	itt	mi
 8007050:	232b      	movmi	r3, #43	; 0x2b
 8007052:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007056:	f89a 3000 	ldrb.w	r3, [sl]
 800705a:	2b2a      	cmp	r3, #42	; 0x2a
 800705c:	d015      	beq.n	800708a <_svfiprintf_r+0xf6>
 800705e:	9a07      	ldr	r2, [sp, #28]
 8007060:	4654      	mov	r4, sl
 8007062:	2000      	movs	r0, #0
 8007064:	f04f 0c0a 	mov.w	ip, #10
 8007068:	4621      	mov	r1, r4
 800706a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800706e:	3b30      	subs	r3, #48	; 0x30
 8007070:	2b09      	cmp	r3, #9
 8007072:	d94e      	bls.n	8007112 <_svfiprintf_r+0x17e>
 8007074:	b1b0      	cbz	r0, 80070a4 <_svfiprintf_r+0x110>
 8007076:	9207      	str	r2, [sp, #28]
 8007078:	e014      	b.n	80070a4 <_svfiprintf_r+0x110>
 800707a:	eba0 0308 	sub.w	r3, r0, r8
 800707e:	fa09 f303 	lsl.w	r3, r9, r3
 8007082:	4313      	orrs	r3, r2
 8007084:	9304      	str	r3, [sp, #16]
 8007086:	46a2      	mov	sl, r4
 8007088:	e7d2      	b.n	8007030 <_svfiprintf_r+0x9c>
 800708a:	9b03      	ldr	r3, [sp, #12]
 800708c:	1d19      	adds	r1, r3, #4
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	9103      	str	r1, [sp, #12]
 8007092:	2b00      	cmp	r3, #0
 8007094:	bfbb      	ittet	lt
 8007096:	425b      	neglt	r3, r3
 8007098:	f042 0202 	orrlt.w	r2, r2, #2
 800709c:	9307      	strge	r3, [sp, #28]
 800709e:	9307      	strlt	r3, [sp, #28]
 80070a0:	bfb8      	it	lt
 80070a2:	9204      	strlt	r2, [sp, #16]
 80070a4:	7823      	ldrb	r3, [r4, #0]
 80070a6:	2b2e      	cmp	r3, #46	; 0x2e
 80070a8:	d10c      	bne.n	80070c4 <_svfiprintf_r+0x130>
 80070aa:	7863      	ldrb	r3, [r4, #1]
 80070ac:	2b2a      	cmp	r3, #42	; 0x2a
 80070ae:	d135      	bne.n	800711c <_svfiprintf_r+0x188>
 80070b0:	9b03      	ldr	r3, [sp, #12]
 80070b2:	1d1a      	adds	r2, r3, #4
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	9203      	str	r2, [sp, #12]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	bfb8      	it	lt
 80070bc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80070c0:	3402      	adds	r4, #2
 80070c2:	9305      	str	r3, [sp, #20]
 80070c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007190 <_svfiprintf_r+0x1fc>
 80070c8:	7821      	ldrb	r1, [r4, #0]
 80070ca:	2203      	movs	r2, #3
 80070cc:	4650      	mov	r0, sl
 80070ce:	f7f9 f887 	bl	80001e0 <memchr>
 80070d2:	b140      	cbz	r0, 80070e6 <_svfiprintf_r+0x152>
 80070d4:	2340      	movs	r3, #64	; 0x40
 80070d6:	eba0 000a 	sub.w	r0, r0, sl
 80070da:	fa03 f000 	lsl.w	r0, r3, r0
 80070de:	9b04      	ldr	r3, [sp, #16]
 80070e0:	4303      	orrs	r3, r0
 80070e2:	3401      	adds	r4, #1
 80070e4:	9304      	str	r3, [sp, #16]
 80070e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070ea:	4826      	ldr	r0, [pc, #152]	; (8007184 <_svfiprintf_r+0x1f0>)
 80070ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80070f0:	2206      	movs	r2, #6
 80070f2:	f7f9 f875 	bl	80001e0 <memchr>
 80070f6:	2800      	cmp	r0, #0
 80070f8:	d038      	beq.n	800716c <_svfiprintf_r+0x1d8>
 80070fa:	4b23      	ldr	r3, [pc, #140]	; (8007188 <_svfiprintf_r+0x1f4>)
 80070fc:	bb1b      	cbnz	r3, 8007146 <_svfiprintf_r+0x1b2>
 80070fe:	9b03      	ldr	r3, [sp, #12]
 8007100:	3307      	adds	r3, #7
 8007102:	f023 0307 	bic.w	r3, r3, #7
 8007106:	3308      	adds	r3, #8
 8007108:	9303      	str	r3, [sp, #12]
 800710a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800710c:	4433      	add	r3, r6
 800710e:	9309      	str	r3, [sp, #36]	; 0x24
 8007110:	e767      	b.n	8006fe2 <_svfiprintf_r+0x4e>
 8007112:	fb0c 3202 	mla	r2, ip, r2, r3
 8007116:	460c      	mov	r4, r1
 8007118:	2001      	movs	r0, #1
 800711a:	e7a5      	b.n	8007068 <_svfiprintf_r+0xd4>
 800711c:	2300      	movs	r3, #0
 800711e:	3401      	adds	r4, #1
 8007120:	9305      	str	r3, [sp, #20]
 8007122:	4619      	mov	r1, r3
 8007124:	f04f 0c0a 	mov.w	ip, #10
 8007128:	4620      	mov	r0, r4
 800712a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800712e:	3a30      	subs	r2, #48	; 0x30
 8007130:	2a09      	cmp	r2, #9
 8007132:	d903      	bls.n	800713c <_svfiprintf_r+0x1a8>
 8007134:	2b00      	cmp	r3, #0
 8007136:	d0c5      	beq.n	80070c4 <_svfiprintf_r+0x130>
 8007138:	9105      	str	r1, [sp, #20]
 800713a:	e7c3      	b.n	80070c4 <_svfiprintf_r+0x130>
 800713c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007140:	4604      	mov	r4, r0
 8007142:	2301      	movs	r3, #1
 8007144:	e7f0      	b.n	8007128 <_svfiprintf_r+0x194>
 8007146:	ab03      	add	r3, sp, #12
 8007148:	9300      	str	r3, [sp, #0]
 800714a:	462a      	mov	r2, r5
 800714c:	4b0f      	ldr	r3, [pc, #60]	; (800718c <_svfiprintf_r+0x1f8>)
 800714e:	a904      	add	r1, sp, #16
 8007150:	4638      	mov	r0, r7
 8007152:	f3af 8000 	nop.w
 8007156:	1c42      	adds	r2, r0, #1
 8007158:	4606      	mov	r6, r0
 800715a:	d1d6      	bne.n	800710a <_svfiprintf_r+0x176>
 800715c:	89ab      	ldrh	r3, [r5, #12]
 800715e:	065b      	lsls	r3, r3, #25
 8007160:	f53f af2c 	bmi.w	8006fbc <_svfiprintf_r+0x28>
 8007164:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007166:	b01d      	add	sp, #116	; 0x74
 8007168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800716c:	ab03      	add	r3, sp, #12
 800716e:	9300      	str	r3, [sp, #0]
 8007170:	462a      	mov	r2, r5
 8007172:	4b06      	ldr	r3, [pc, #24]	; (800718c <_svfiprintf_r+0x1f8>)
 8007174:	a904      	add	r1, sp, #16
 8007176:	4638      	mov	r0, r7
 8007178:	f000 f87a 	bl	8007270 <_printf_i>
 800717c:	e7eb      	b.n	8007156 <_svfiprintf_r+0x1c2>
 800717e:	bf00      	nop
 8007180:	08007830 	.word	0x08007830
 8007184:	0800783a 	.word	0x0800783a
 8007188:	00000000 	.word	0x00000000
 800718c:	08006edd 	.word	0x08006edd
 8007190:	08007836 	.word	0x08007836

08007194 <_printf_common>:
 8007194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007198:	4616      	mov	r6, r2
 800719a:	4699      	mov	r9, r3
 800719c:	688a      	ldr	r2, [r1, #8]
 800719e:	690b      	ldr	r3, [r1, #16]
 80071a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80071a4:	4293      	cmp	r3, r2
 80071a6:	bfb8      	it	lt
 80071a8:	4613      	movlt	r3, r2
 80071aa:	6033      	str	r3, [r6, #0]
 80071ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80071b0:	4607      	mov	r7, r0
 80071b2:	460c      	mov	r4, r1
 80071b4:	b10a      	cbz	r2, 80071ba <_printf_common+0x26>
 80071b6:	3301      	adds	r3, #1
 80071b8:	6033      	str	r3, [r6, #0]
 80071ba:	6823      	ldr	r3, [r4, #0]
 80071bc:	0699      	lsls	r1, r3, #26
 80071be:	bf42      	ittt	mi
 80071c0:	6833      	ldrmi	r3, [r6, #0]
 80071c2:	3302      	addmi	r3, #2
 80071c4:	6033      	strmi	r3, [r6, #0]
 80071c6:	6825      	ldr	r5, [r4, #0]
 80071c8:	f015 0506 	ands.w	r5, r5, #6
 80071cc:	d106      	bne.n	80071dc <_printf_common+0x48>
 80071ce:	f104 0a19 	add.w	sl, r4, #25
 80071d2:	68e3      	ldr	r3, [r4, #12]
 80071d4:	6832      	ldr	r2, [r6, #0]
 80071d6:	1a9b      	subs	r3, r3, r2
 80071d8:	42ab      	cmp	r3, r5
 80071da:	dc26      	bgt.n	800722a <_printf_common+0x96>
 80071dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80071e0:	1e13      	subs	r3, r2, #0
 80071e2:	6822      	ldr	r2, [r4, #0]
 80071e4:	bf18      	it	ne
 80071e6:	2301      	movne	r3, #1
 80071e8:	0692      	lsls	r2, r2, #26
 80071ea:	d42b      	bmi.n	8007244 <_printf_common+0xb0>
 80071ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80071f0:	4649      	mov	r1, r9
 80071f2:	4638      	mov	r0, r7
 80071f4:	47c0      	blx	r8
 80071f6:	3001      	adds	r0, #1
 80071f8:	d01e      	beq.n	8007238 <_printf_common+0xa4>
 80071fa:	6823      	ldr	r3, [r4, #0]
 80071fc:	68e5      	ldr	r5, [r4, #12]
 80071fe:	6832      	ldr	r2, [r6, #0]
 8007200:	f003 0306 	and.w	r3, r3, #6
 8007204:	2b04      	cmp	r3, #4
 8007206:	bf08      	it	eq
 8007208:	1aad      	subeq	r5, r5, r2
 800720a:	68a3      	ldr	r3, [r4, #8]
 800720c:	6922      	ldr	r2, [r4, #16]
 800720e:	bf0c      	ite	eq
 8007210:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007214:	2500      	movne	r5, #0
 8007216:	4293      	cmp	r3, r2
 8007218:	bfc4      	itt	gt
 800721a:	1a9b      	subgt	r3, r3, r2
 800721c:	18ed      	addgt	r5, r5, r3
 800721e:	2600      	movs	r6, #0
 8007220:	341a      	adds	r4, #26
 8007222:	42b5      	cmp	r5, r6
 8007224:	d11a      	bne.n	800725c <_printf_common+0xc8>
 8007226:	2000      	movs	r0, #0
 8007228:	e008      	b.n	800723c <_printf_common+0xa8>
 800722a:	2301      	movs	r3, #1
 800722c:	4652      	mov	r2, sl
 800722e:	4649      	mov	r1, r9
 8007230:	4638      	mov	r0, r7
 8007232:	47c0      	blx	r8
 8007234:	3001      	adds	r0, #1
 8007236:	d103      	bne.n	8007240 <_printf_common+0xac>
 8007238:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800723c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007240:	3501      	adds	r5, #1
 8007242:	e7c6      	b.n	80071d2 <_printf_common+0x3e>
 8007244:	18e1      	adds	r1, r4, r3
 8007246:	1c5a      	adds	r2, r3, #1
 8007248:	2030      	movs	r0, #48	; 0x30
 800724a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800724e:	4422      	add	r2, r4
 8007250:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007254:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007258:	3302      	adds	r3, #2
 800725a:	e7c7      	b.n	80071ec <_printf_common+0x58>
 800725c:	2301      	movs	r3, #1
 800725e:	4622      	mov	r2, r4
 8007260:	4649      	mov	r1, r9
 8007262:	4638      	mov	r0, r7
 8007264:	47c0      	blx	r8
 8007266:	3001      	adds	r0, #1
 8007268:	d0e6      	beq.n	8007238 <_printf_common+0xa4>
 800726a:	3601      	adds	r6, #1
 800726c:	e7d9      	b.n	8007222 <_printf_common+0x8e>
	...

08007270 <_printf_i>:
 8007270:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007274:	7e0f      	ldrb	r7, [r1, #24]
 8007276:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007278:	2f78      	cmp	r7, #120	; 0x78
 800727a:	4691      	mov	r9, r2
 800727c:	4680      	mov	r8, r0
 800727e:	460c      	mov	r4, r1
 8007280:	469a      	mov	sl, r3
 8007282:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007286:	d807      	bhi.n	8007298 <_printf_i+0x28>
 8007288:	2f62      	cmp	r7, #98	; 0x62
 800728a:	d80a      	bhi.n	80072a2 <_printf_i+0x32>
 800728c:	2f00      	cmp	r7, #0
 800728e:	f000 80d8 	beq.w	8007442 <_printf_i+0x1d2>
 8007292:	2f58      	cmp	r7, #88	; 0x58
 8007294:	f000 80a3 	beq.w	80073de <_printf_i+0x16e>
 8007298:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800729c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80072a0:	e03a      	b.n	8007318 <_printf_i+0xa8>
 80072a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80072a6:	2b15      	cmp	r3, #21
 80072a8:	d8f6      	bhi.n	8007298 <_printf_i+0x28>
 80072aa:	a101      	add	r1, pc, #4	; (adr r1, 80072b0 <_printf_i+0x40>)
 80072ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80072b0:	08007309 	.word	0x08007309
 80072b4:	0800731d 	.word	0x0800731d
 80072b8:	08007299 	.word	0x08007299
 80072bc:	08007299 	.word	0x08007299
 80072c0:	08007299 	.word	0x08007299
 80072c4:	08007299 	.word	0x08007299
 80072c8:	0800731d 	.word	0x0800731d
 80072cc:	08007299 	.word	0x08007299
 80072d0:	08007299 	.word	0x08007299
 80072d4:	08007299 	.word	0x08007299
 80072d8:	08007299 	.word	0x08007299
 80072dc:	08007429 	.word	0x08007429
 80072e0:	0800734d 	.word	0x0800734d
 80072e4:	0800740b 	.word	0x0800740b
 80072e8:	08007299 	.word	0x08007299
 80072ec:	08007299 	.word	0x08007299
 80072f0:	0800744b 	.word	0x0800744b
 80072f4:	08007299 	.word	0x08007299
 80072f8:	0800734d 	.word	0x0800734d
 80072fc:	08007299 	.word	0x08007299
 8007300:	08007299 	.word	0x08007299
 8007304:	08007413 	.word	0x08007413
 8007308:	682b      	ldr	r3, [r5, #0]
 800730a:	1d1a      	adds	r2, r3, #4
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	602a      	str	r2, [r5, #0]
 8007310:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007314:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007318:	2301      	movs	r3, #1
 800731a:	e0a3      	b.n	8007464 <_printf_i+0x1f4>
 800731c:	6820      	ldr	r0, [r4, #0]
 800731e:	6829      	ldr	r1, [r5, #0]
 8007320:	0606      	lsls	r6, r0, #24
 8007322:	f101 0304 	add.w	r3, r1, #4
 8007326:	d50a      	bpl.n	800733e <_printf_i+0xce>
 8007328:	680e      	ldr	r6, [r1, #0]
 800732a:	602b      	str	r3, [r5, #0]
 800732c:	2e00      	cmp	r6, #0
 800732e:	da03      	bge.n	8007338 <_printf_i+0xc8>
 8007330:	232d      	movs	r3, #45	; 0x2d
 8007332:	4276      	negs	r6, r6
 8007334:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007338:	485e      	ldr	r0, [pc, #376]	; (80074b4 <_printf_i+0x244>)
 800733a:	230a      	movs	r3, #10
 800733c:	e019      	b.n	8007372 <_printf_i+0x102>
 800733e:	680e      	ldr	r6, [r1, #0]
 8007340:	602b      	str	r3, [r5, #0]
 8007342:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007346:	bf18      	it	ne
 8007348:	b236      	sxthne	r6, r6
 800734a:	e7ef      	b.n	800732c <_printf_i+0xbc>
 800734c:	682b      	ldr	r3, [r5, #0]
 800734e:	6820      	ldr	r0, [r4, #0]
 8007350:	1d19      	adds	r1, r3, #4
 8007352:	6029      	str	r1, [r5, #0]
 8007354:	0601      	lsls	r1, r0, #24
 8007356:	d501      	bpl.n	800735c <_printf_i+0xec>
 8007358:	681e      	ldr	r6, [r3, #0]
 800735a:	e002      	b.n	8007362 <_printf_i+0xf2>
 800735c:	0646      	lsls	r6, r0, #25
 800735e:	d5fb      	bpl.n	8007358 <_printf_i+0xe8>
 8007360:	881e      	ldrh	r6, [r3, #0]
 8007362:	4854      	ldr	r0, [pc, #336]	; (80074b4 <_printf_i+0x244>)
 8007364:	2f6f      	cmp	r7, #111	; 0x6f
 8007366:	bf0c      	ite	eq
 8007368:	2308      	moveq	r3, #8
 800736a:	230a      	movne	r3, #10
 800736c:	2100      	movs	r1, #0
 800736e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007372:	6865      	ldr	r5, [r4, #4]
 8007374:	60a5      	str	r5, [r4, #8]
 8007376:	2d00      	cmp	r5, #0
 8007378:	bfa2      	ittt	ge
 800737a:	6821      	ldrge	r1, [r4, #0]
 800737c:	f021 0104 	bicge.w	r1, r1, #4
 8007380:	6021      	strge	r1, [r4, #0]
 8007382:	b90e      	cbnz	r6, 8007388 <_printf_i+0x118>
 8007384:	2d00      	cmp	r5, #0
 8007386:	d04d      	beq.n	8007424 <_printf_i+0x1b4>
 8007388:	4615      	mov	r5, r2
 800738a:	fbb6 f1f3 	udiv	r1, r6, r3
 800738e:	fb03 6711 	mls	r7, r3, r1, r6
 8007392:	5dc7      	ldrb	r7, [r0, r7]
 8007394:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007398:	4637      	mov	r7, r6
 800739a:	42bb      	cmp	r3, r7
 800739c:	460e      	mov	r6, r1
 800739e:	d9f4      	bls.n	800738a <_printf_i+0x11a>
 80073a0:	2b08      	cmp	r3, #8
 80073a2:	d10b      	bne.n	80073bc <_printf_i+0x14c>
 80073a4:	6823      	ldr	r3, [r4, #0]
 80073a6:	07de      	lsls	r6, r3, #31
 80073a8:	d508      	bpl.n	80073bc <_printf_i+0x14c>
 80073aa:	6923      	ldr	r3, [r4, #16]
 80073ac:	6861      	ldr	r1, [r4, #4]
 80073ae:	4299      	cmp	r1, r3
 80073b0:	bfde      	ittt	le
 80073b2:	2330      	movle	r3, #48	; 0x30
 80073b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80073b8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80073bc:	1b52      	subs	r2, r2, r5
 80073be:	6122      	str	r2, [r4, #16]
 80073c0:	f8cd a000 	str.w	sl, [sp]
 80073c4:	464b      	mov	r3, r9
 80073c6:	aa03      	add	r2, sp, #12
 80073c8:	4621      	mov	r1, r4
 80073ca:	4640      	mov	r0, r8
 80073cc:	f7ff fee2 	bl	8007194 <_printf_common>
 80073d0:	3001      	adds	r0, #1
 80073d2:	d14c      	bne.n	800746e <_printf_i+0x1fe>
 80073d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80073d8:	b004      	add	sp, #16
 80073da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073de:	4835      	ldr	r0, [pc, #212]	; (80074b4 <_printf_i+0x244>)
 80073e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80073e4:	6829      	ldr	r1, [r5, #0]
 80073e6:	6823      	ldr	r3, [r4, #0]
 80073e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80073ec:	6029      	str	r1, [r5, #0]
 80073ee:	061d      	lsls	r5, r3, #24
 80073f0:	d514      	bpl.n	800741c <_printf_i+0x1ac>
 80073f2:	07df      	lsls	r7, r3, #31
 80073f4:	bf44      	itt	mi
 80073f6:	f043 0320 	orrmi.w	r3, r3, #32
 80073fa:	6023      	strmi	r3, [r4, #0]
 80073fc:	b91e      	cbnz	r6, 8007406 <_printf_i+0x196>
 80073fe:	6823      	ldr	r3, [r4, #0]
 8007400:	f023 0320 	bic.w	r3, r3, #32
 8007404:	6023      	str	r3, [r4, #0]
 8007406:	2310      	movs	r3, #16
 8007408:	e7b0      	b.n	800736c <_printf_i+0xfc>
 800740a:	6823      	ldr	r3, [r4, #0]
 800740c:	f043 0320 	orr.w	r3, r3, #32
 8007410:	6023      	str	r3, [r4, #0]
 8007412:	2378      	movs	r3, #120	; 0x78
 8007414:	4828      	ldr	r0, [pc, #160]	; (80074b8 <_printf_i+0x248>)
 8007416:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800741a:	e7e3      	b.n	80073e4 <_printf_i+0x174>
 800741c:	0659      	lsls	r1, r3, #25
 800741e:	bf48      	it	mi
 8007420:	b2b6      	uxthmi	r6, r6
 8007422:	e7e6      	b.n	80073f2 <_printf_i+0x182>
 8007424:	4615      	mov	r5, r2
 8007426:	e7bb      	b.n	80073a0 <_printf_i+0x130>
 8007428:	682b      	ldr	r3, [r5, #0]
 800742a:	6826      	ldr	r6, [r4, #0]
 800742c:	6961      	ldr	r1, [r4, #20]
 800742e:	1d18      	adds	r0, r3, #4
 8007430:	6028      	str	r0, [r5, #0]
 8007432:	0635      	lsls	r5, r6, #24
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	d501      	bpl.n	800743c <_printf_i+0x1cc>
 8007438:	6019      	str	r1, [r3, #0]
 800743a:	e002      	b.n	8007442 <_printf_i+0x1d2>
 800743c:	0670      	lsls	r0, r6, #25
 800743e:	d5fb      	bpl.n	8007438 <_printf_i+0x1c8>
 8007440:	8019      	strh	r1, [r3, #0]
 8007442:	2300      	movs	r3, #0
 8007444:	6123      	str	r3, [r4, #16]
 8007446:	4615      	mov	r5, r2
 8007448:	e7ba      	b.n	80073c0 <_printf_i+0x150>
 800744a:	682b      	ldr	r3, [r5, #0]
 800744c:	1d1a      	adds	r2, r3, #4
 800744e:	602a      	str	r2, [r5, #0]
 8007450:	681d      	ldr	r5, [r3, #0]
 8007452:	6862      	ldr	r2, [r4, #4]
 8007454:	2100      	movs	r1, #0
 8007456:	4628      	mov	r0, r5
 8007458:	f7f8 fec2 	bl	80001e0 <memchr>
 800745c:	b108      	cbz	r0, 8007462 <_printf_i+0x1f2>
 800745e:	1b40      	subs	r0, r0, r5
 8007460:	6060      	str	r0, [r4, #4]
 8007462:	6863      	ldr	r3, [r4, #4]
 8007464:	6123      	str	r3, [r4, #16]
 8007466:	2300      	movs	r3, #0
 8007468:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800746c:	e7a8      	b.n	80073c0 <_printf_i+0x150>
 800746e:	6923      	ldr	r3, [r4, #16]
 8007470:	462a      	mov	r2, r5
 8007472:	4649      	mov	r1, r9
 8007474:	4640      	mov	r0, r8
 8007476:	47d0      	blx	sl
 8007478:	3001      	adds	r0, #1
 800747a:	d0ab      	beq.n	80073d4 <_printf_i+0x164>
 800747c:	6823      	ldr	r3, [r4, #0]
 800747e:	079b      	lsls	r3, r3, #30
 8007480:	d413      	bmi.n	80074aa <_printf_i+0x23a>
 8007482:	68e0      	ldr	r0, [r4, #12]
 8007484:	9b03      	ldr	r3, [sp, #12]
 8007486:	4298      	cmp	r0, r3
 8007488:	bfb8      	it	lt
 800748a:	4618      	movlt	r0, r3
 800748c:	e7a4      	b.n	80073d8 <_printf_i+0x168>
 800748e:	2301      	movs	r3, #1
 8007490:	4632      	mov	r2, r6
 8007492:	4649      	mov	r1, r9
 8007494:	4640      	mov	r0, r8
 8007496:	47d0      	blx	sl
 8007498:	3001      	adds	r0, #1
 800749a:	d09b      	beq.n	80073d4 <_printf_i+0x164>
 800749c:	3501      	adds	r5, #1
 800749e:	68e3      	ldr	r3, [r4, #12]
 80074a0:	9903      	ldr	r1, [sp, #12]
 80074a2:	1a5b      	subs	r3, r3, r1
 80074a4:	42ab      	cmp	r3, r5
 80074a6:	dcf2      	bgt.n	800748e <_printf_i+0x21e>
 80074a8:	e7eb      	b.n	8007482 <_printf_i+0x212>
 80074aa:	2500      	movs	r5, #0
 80074ac:	f104 0619 	add.w	r6, r4, #25
 80074b0:	e7f5      	b.n	800749e <_printf_i+0x22e>
 80074b2:	bf00      	nop
 80074b4:	08007841 	.word	0x08007841
 80074b8:	08007852 	.word	0x08007852

080074bc <memcpy>:
 80074bc:	440a      	add	r2, r1
 80074be:	4291      	cmp	r1, r2
 80074c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80074c4:	d100      	bne.n	80074c8 <memcpy+0xc>
 80074c6:	4770      	bx	lr
 80074c8:	b510      	push	{r4, lr}
 80074ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074d2:	4291      	cmp	r1, r2
 80074d4:	d1f9      	bne.n	80074ca <memcpy+0xe>
 80074d6:	bd10      	pop	{r4, pc}

080074d8 <memmove>:
 80074d8:	4288      	cmp	r0, r1
 80074da:	b510      	push	{r4, lr}
 80074dc:	eb01 0402 	add.w	r4, r1, r2
 80074e0:	d902      	bls.n	80074e8 <memmove+0x10>
 80074e2:	4284      	cmp	r4, r0
 80074e4:	4623      	mov	r3, r4
 80074e6:	d807      	bhi.n	80074f8 <memmove+0x20>
 80074e8:	1e43      	subs	r3, r0, #1
 80074ea:	42a1      	cmp	r1, r4
 80074ec:	d008      	beq.n	8007500 <memmove+0x28>
 80074ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80074f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80074f6:	e7f8      	b.n	80074ea <memmove+0x12>
 80074f8:	4402      	add	r2, r0
 80074fa:	4601      	mov	r1, r0
 80074fc:	428a      	cmp	r2, r1
 80074fe:	d100      	bne.n	8007502 <memmove+0x2a>
 8007500:	bd10      	pop	{r4, pc}
 8007502:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007506:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800750a:	e7f7      	b.n	80074fc <memmove+0x24>

0800750c <_free_r>:
 800750c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800750e:	2900      	cmp	r1, #0
 8007510:	d044      	beq.n	800759c <_free_r+0x90>
 8007512:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007516:	9001      	str	r0, [sp, #4]
 8007518:	2b00      	cmp	r3, #0
 800751a:	f1a1 0404 	sub.w	r4, r1, #4
 800751e:	bfb8      	it	lt
 8007520:	18e4      	addlt	r4, r4, r3
 8007522:	f000 f913 	bl	800774c <__malloc_lock>
 8007526:	4a1e      	ldr	r2, [pc, #120]	; (80075a0 <_free_r+0x94>)
 8007528:	9801      	ldr	r0, [sp, #4]
 800752a:	6813      	ldr	r3, [r2, #0]
 800752c:	b933      	cbnz	r3, 800753c <_free_r+0x30>
 800752e:	6063      	str	r3, [r4, #4]
 8007530:	6014      	str	r4, [r2, #0]
 8007532:	b003      	add	sp, #12
 8007534:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007538:	f000 b90e 	b.w	8007758 <__malloc_unlock>
 800753c:	42a3      	cmp	r3, r4
 800753e:	d908      	bls.n	8007552 <_free_r+0x46>
 8007540:	6825      	ldr	r5, [r4, #0]
 8007542:	1961      	adds	r1, r4, r5
 8007544:	428b      	cmp	r3, r1
 8007546:	bf01      	itttt	eq
 8007548:	6819      	ldreq	r1, [r3, #0]
 800754a:	685b      	ldreq	r3, [r3, #4]
 800754c:	1949      	addeq	r1, r1, r5
 800754e:	6021      	streq	r1, [r4, #0]
 8007550:	e7ed      	b.n	800752e <_free_r+0x22>
 8007552:	461a      	mov	r2, r3
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	b10b      	cbz	r3, 800755c <_free_r+0x50>
 8007558:	42a3      	cmp	r3, r4
 800755a:	d9fa      	bls.n	8007552 <_free_r+0x46>
 800755c:	6811      	ldr	r1, [r2, #0]
 800755e:	1855      	adds	r5, r2, r1
 8007560:	42a5      	cmp	r5, r4
 8007562:	d10b      	bne.n	800757c <_free_r+0x70>
 8007564:	6824      	ldr	r4, [r4, #0]
 8007566:	4421      	add	r1, r4
 8007568:	1854      	adds	r4, r2, r1
 800756a:	42a3      	cmp	r3, r4
 800756c:	6011      	str	r1, [r2, #0]
 800756e:	d1e0      	bne.n	8007532 <_free_r+0x26>
 8007570:	681c      	ldr	r4, [r3, #0]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	6053      	str	r3, [r2, #4]
 8007576:	4421      	add	r1, r4
 8007578:	6011      	str	r1, [r2, #0]
 800757a:	e7da      	b.n	8007532 <_free_r+0x26>
 800757c:	d902      	bls.n	8007584 <_free_r+0x78>
 800757e:	230c      	movs	r3, #12
 8007580:	6003      	str	r3, [r0, #0]
 8007582:	e7d6      	b.n	8007532 <_free_r+0x26>
 8007584:	6825      	ldr	r5, [r4, #0]
 8007586:	1961      	adds	r1, r4, r5
 8007588:	428b      	cmp	r3, r1
 800758a:	bf04      	itt	eq
 800758c:	6819      	ldreq	r1, [r3, #0]
 800758e:	685b      	ldreq	r3, [r3, #4]
 8007590:	6063      	str	r3, [r4, #4]
 8007592:	bf04      	itt	eq
 8007594:	1949      	addeq	r1, r1, r5
 8007596:	6021      	streq	r1, [r4, #0]
 8007598:	6054      	str	r4, [r2, #4]
 800759a:	e7ca      	b.n	8007532 <_free_r+0x26>
 800759c:	b003      	add	sp, #12
 800759e:	bd30      	pop	{r4, r5, pc}
 80075a0:	20000c50 	.word	0x20000c50

080075a4 <sbrk_aligned>:
 80075a4:	b570      	push	{r4, r5, r6, lr}
 80075a6:	4e0e      	ldr	r6, [pc, #56]	; (80075e0 <sbrk_aligned+0x3c>)
 80075a8:	460c      	mov	r4, r1
 80075aa:	6831      	ldr	r1, [r6, #0]
 80075ac:	4605      	mov	r5, r0
 80075ae:	b911      	cbnz	r1, 80075b6 <sbrk_aligned+0x12>
 80075b0:	f000 f8bc 	bl	800772c <_sbrk_r>
 80075b4:	6030      	str	r0, [r6, #0]
 80075b6:	4621      	mov	r1, r4
 80075b8:	4628      	mov	r0, r5
 80075ba:	f000 f8b7 	bl	800772c <_sbrk_r>
 80075be:	1c43      	adds	r3, r0, #1
 80075c0:	d00a      	beq.n	80075d8 <sbrk_aligned+0x34>
 80075c2:	1cc4      	adds	r4, r0, #3
 80075c4:	f024 0403 	bic.w	r4, r4, #3
 80075c8:	42a0      	cmp	r0, r4
 80075ca:	d007      	beq.n	80075dc <sbrk_aligned+0x38>
 80075cc:	1a21      	subs	r1, r4, r0
 80075ce:	4628      	mov	r0, r5
 80075d0:	f000 f8ac 	bl	800772c <_sbrk_r>
 80075d4:	3001      	adds	r0, #1
 80075d6:	d101      	bne.n	80075dc <sbrk_aligned+0x38>
 80075d8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80075dc:	4620      	mov	r0, r4
 80075de:	bd70      	pop	{r4, r5, r6, pc}
 80075e0:	20000c54 	.word	0x20000c54

080075e4 <_malloc_r>:
 80075e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075e8:	1ccd      	adds	r5, r1, #3
 80075ea:	f025 0503 	bic.w	r5, r5, #3
 80075ee:	3508      	adds	r5, #8
 80075f0:	2d0c      	cmp	r5, #12
 80075f2:	bf38      	it	cc
 80075f4:	250c      	movcc	r5, #12
 80075f6:	2d00      	cmp	r5, #0
 80075f8:	4607      	mov	r7, r0
 80075fa:	db01      	blt.n	8007600 <_malloc_r+0x1c>
 80075fc:	42a9      	cmp	r1, r5
 80075fe:	d905      	bls.n	800760c <_malloc_r+0x28>
 8007600:	230c      	movs	r3, #12
 8007602:	603b      	str	r3, [r7, #0]
 8007604:	2600      	movs	r6, #0
 8007606:	4630      	mov	r0, r6
 8007608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800760c:	4e2e      	ldr	r6, [pc, #184]	; (80076c8 <_malloc_r+0xe4>)
 800760e:	f000 f89d 	bl	800774c <__malloc_lock>
 8007612:	6833      	ldr	r3, [r6, #0]
 8007614:	461c      	mov	r4, r3
 8007616:	bb34      	cbnz	r4, 8007666 <_malloc_r+0x82>
 8007618:	4629      	mov	r1, r5
 800761a:	4638      	mov	r0, r7
 800761c:	f7ff ffc2 	bl	80075a4 <sbrk_aligned>
 8007620:	1c43      	adds	r3, r0, #1
 8007622:	4604      	mov	r4, r0
 8007624:	d14d      	bne.n	80076c2 <_malloc_r+0xde>
 8007626:	6834      	ldr	r4, [r6, #0]
 8007628:	4626      	mov	r6, r4
 800762a:	2e00      	cmp	r6, #0
 800762c:	d140      	bne.n	80076b0 <_malloc_r+0xcc>
 800762e:	6823      	ldr	r3, [r4, #0]
 8007630:	4631      	mov	r1, r6
 8007632:	4638      	mov	r0, r7
 8007634:	eb04 0803 	add.w	r8, r4, r3
 8007638:	f000 f878 	bl	800772c <_sbrk_r>
 800763c:	4580      	cmp	r8, r0
 800763e:	d13a      	bne.n	80076b6 <_malloc_r+0xd2>
 8007640:	6821      	ldr	r1, [r4, #0]
 8007642:	3503      	adds	r5, #3
 8007644:	1a6d      	subs	r5, r5, r1
 8007646:	f025 0503 	bic.w	r5, r5, #3
 800764a:	3508      	adds	r5, #8
 800764c:	2d0c      	cmp	r5, #12
 800764e:	bf38      	it	cc
 8007650:	250c      	movcc	r5, #12
 8007652:	4629      	mov	r1, r5
 8007654:	4638      	mov	r0, r7
 8007656:	f7ff ffa5 	bl	80075a4 <sbrk_aligned>
 800765a:	3001      	adds	r0, #1
 800765c:	d02b      	beq.n	80076b6 <_malloc_r+0xd2>
 800765e:	6823      	ldr	r3, [r4, #0]
 8007660:	442b      	add	r3, r5
 8007662:	6023      	str	r3, [r4, #0]
 8007664:	e00e      	b.n	8007684 <_malloc_r+0xa0>
 8007666:	6822      	ldr	r2, [r4, #0]
 8007668:	1b52      	subs	r2, r2, r5
 800766a:	d41e      	bmi.n	80076aa <_malloc_r+0xc6>
 800766c:	2a0b      	cmp	r2, #11
 800766e:	d916      	bls.n	800769e <_malloc_r+0xba>
 8007670:	1961      	adds	r1, r4, r5
 8007672:	42a3      	cmp	r3, r4
 8007674:	6025      	str	r5, [r4, #0]
 8007676:	bf18      	it	ne
 8007678:	6059      	strne	r1, [r3, #4]
 800767a:	6863      	ldr	r3, [r4, #4]
 800767c:	bf08      	it	eq
 800767e:	6031      	streq	r1, [r6, #0]
 8007680:	5162      	str	r2, [r4, r5]
 8007682:	604b      	str	r3, [r1, #4]
 8007684:	4638      	mov	r0, r7
 8007686:	f104 060b 	add.w	r6, r4, #11
 800768a:	f000 f865 	bl	8007758 <__malloc_unlock>
 800768e:	f026 0607 	bic.w	r6, r6, #7
 8007692:	1d23      	adds	r3, r4, #4
 8007694:	1af2      	subs	r2, r6, r3
 8007696:	d0b6      	beq.n	8007606 <_malloc_r+0x22>
 8007698:	1b9b      	subs	r3, r3, r6
 800769a:	50a3      	str	r3, [r4, r2]
 800769c:	e7b3      	b.n	8007606 <_malloc_r+0x22>
 800769e:	6862      	ldr	r2, [r4, #4]
 80076a0:	42a3      	cmp	r3, r4
 80076a2:	bf0c      	ite	eq
 80076a4:	6032      	streq	r2, [r6, #0]
 80076a6:	605a      	strne	r2, [r3, #4]
 80076a8:	e7ec      	b.n	8007684 <_malloc_r+0xa0>
 80076aa:	4623      	mov	r3, r4
 80076ac:	6864      	ldr	r4, [r4, #4]
 80076ae:	e7b2      	b.n	8007616 <_malloc_r+0x32>
 80076b0:	4634      	mov	r4, r6
 80076b2:	6876      	ldr	r6, [r6, #4]
 80076b4:	e7b9      	b.n	800762a <_malloc_r+0x46>
 80076b6:	230c      	movs	r3, #12
 80076b8:	603b      	str	r3, [r7, #0]
 80076ba:	4638      	mov	r0, r7
 80076bc:	f000 f84c 	bl	8007758 <__malloc_unlock>
 80076c0:	e7a1      	b.n	8007606 <_malloc_r+0x22>
 80076c2:	6025      	str	r5, [r4, #0]
 80076c4:	e7de      	b.n	8007684 <_malloc_r+0xa0>
 80076c6:	bf00      	nop
 80076c8:	20000c50 	.word	0x20000c50

080076cc <_realloc_r>:
 80076cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076d0:	4680      	mov	r8, r0
 80076d2:	4614      	mov	r4, r2
 80076d4:	460e      	mov	r6, r1
 80076d6:	b921      	cbnz	r1, 80076e2 <_realloc_r+0x16>
 80076d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076dc:	4611      	mov	r1, r2
 80076de:	f7ff bf81 	b.w	80075e4 <_malloc_r>
 80076e2:	b92a      	cbnz	r2, 80076f0 <_realloc_r+0x24>
 80076e4:	f7ff ff12 	bl	800750c <_free_r>
 80076e8:	4625      	mov	r5, r4
 80076ea:	4628      	mov	r0, r5
 80076ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076f0:	f000 f838 	bl	8007764 <_malloc_usable_size_r>
 80076f4:	4284      	cmp	r4, r0
 80076f6:	4607      	mov	r7, r0
 80076f8:	d802      	bhi.n	8007700 <_realloc_r+0x34>
 80076fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80076fe:	d812      	bhi.n	8007726 <_realloc_r+0x5a>
 8007700:	4621      	mov	r1, r4
 8007702:	4640      	mov	r0, r8
 8007704:	f7ff ff6e 	bl	80075e4 <_malloc_r>
 8007708:	4605      	mov	r5, r0
 800770a:	2800      	cmp	r0, #0
 800770c:	d0ed      	beq.n	80076ea <_realloc_r+0x1e>
 800770e:	42bc      	cmp	r4, r7
 8007710:	4622      	mov	r2, r4
 8007712:	4631      	mov	r1, r6
 8007714:	bf28      	it	cs
 8007716:	463a      	movcs	r2, r7
 8007718:	f7ff fed0 	bl	80074bc <memcpy>
 800771c:	4631      	mov	r1, r6
 800771e:	4640      	mov	r0, r8
 8007720:	f7ff fef4 	bl	800750c <_free_r>
 8007724:	e7e1      	b.n	80076ea <_realloc_r+0x1e>
 8007726:	4635      	mov	r5, r6
 8007728:	e7df      	b.n	80076ea <_realloc_r+0x1e>
	...

0800772c <_sbrk_r>:
 800772c:	b538      	push	{r3, r4, r5, lr}
 800772e:	4d06      	ldr	r5, [pc, #24]	; (8007748 <_sbrk_r+0x1c>)
 8007730:	2300      	movs	r3, #0
 8007732:	4604      	mov	r4, r0
 8007734:	4608      	mov	r0, r1
 8007736:	602b      	str	r3, [r5, #0]
 8007738:	f7f8 ff12 	bl	8000560 <_sbrk>
 800773c:	1c43      	adds	r3, r0, #1
 800773e:	d102      	bne.n	8007746 <_sbrk_r+0x1a>
 8007740:	682b      	ldr	r3, [r5, #0]
 8007742:	b103      	cbz	r3, 8007746 <_sbrk_r+0x1a>
 8007744:	6023      	str	r3, [r4, #0]
 8007746:	bd38      	pop	{r3, r4, r5, pc}
 8007748:	20000c58 	.word	0x20000c58

0800774c <__malloc_lock>:
 800774c:	4801      	ldr	r0, [pc, #4]	; (8007754 <__malloc_lock+0x8>)
 800774e:	f000 b811 	b.w	8007774 <__retarget_lock_acquire_recursive>
 8007752:	bf00      	nop
 8007754:	20000c5c 	.word	0x20000c5c

08007758 <__malloc_unlock>:
 8007758:	4801      	ldr	r0, [pc, #4]	; (8007760 <__malloc_unlock+0x8>)
 800775a:	f000 b80c 	b.w	8007776 <__retarget_lock_release_recursive>
 800775e:	bf00      	nop
 8007760:	20000c5c 	.word	0x20000c5c

08007764 <_malloc_usable_size_r>:
 8007764:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007768:	1f18      	subs	r0, r3, #4
 800776a:	2b00      	cmp	r3, #0
 800776c:	bfbc      	itt	lt
 800776e:	580b      	ldrlt	r3, [r1, r0]
 8007770:	18c0      	addlt	r0, r0, r3
 8007772:	4770      	bx	lr

08007774 <__retarget_lock_acquire_recursive>:
 8007774:	4770      	bx	lr

08007776 <__retarget_lock_release_recursive>:
 8007776:	4770      	bx	lr

08007778 <_init>:
 8007778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800777a:	bf00      	nop
 800777c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800777e:	bc08      	pop	{r3}
 8007780:	469e      	mov	lr, r3
 8007782:	4770      	bx	lr

08007784 <_fini>:
 8007784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007786:	bf00      	nop
 8007788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800778a:	bc08      	pop	{r3}
 800778c:	469e      	mov	lr, r3
 800778e:	4770      	bx	lr
