
04_USB_MSC_Host.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db68  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b10  0800dcf8  0800dcf8  0001dcf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e808  0800e808  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800e808  0800e808  0001e808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e810  0800e810  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e810  0800e810  0001e810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e814  0800e814  0001e814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800e818  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002b6c  20000090  0800e8a8  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002bfc  0800e8a8  00022bfc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d538  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004586  00000000  00000000  0003d5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001340  00000000  00000000  00041b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001198  00000000  00000000  00042ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b67a  00000000  00000000  00044058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d599  00000000  00000000  0006f6d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee330  00000000  00000000  0008cc6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017af9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005288  00000000  00000000  0017afec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dce0 	.word	0x0800dce0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	0800dce0 	.word	0x0800dce0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_dmul>:
 80002a0:	b570      	push	{r4, r5, r6, lr}
 80002a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ae:	bf1d      	ittte	ne
 80002b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002b4:	ea94 0f0c 	teqne	r4, ip
 80002b8:	ea95 0f0c 	teqne	r5, ip
 80002bc:	f000 f8de 	bleq	800047c <__aeabi_dmul+0x1dc>
 80002c0:	442c      	add	r4, r5
 80002c2:	ea81 0603 	eor.w	r6, r1, r3
 80002c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002d2:	bf18      	it	ne
 80002d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002e0:	d038      	beq.n	8000354 <__aeabi_dmul+0xb4>
 80002e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002e6:	f04f 0500 	mov.w	r5, #0
 80002ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002f6:	f04f 0600 	mov.w	r6, #0
 80002fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002fe:	f09c 0f00 	teq	ip, #0
 8000302:	bf18      	it	ne
 8000304:	f04e 0e01 	orrne.w	lr, lr, #1
 8000308:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800030c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000310:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000314:	d204      	bcs.n	8000320 <__aeabi_dmul+0x80>
 8000316:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800031a:	416d      	adcs	r5, r5
 800031c:	eb46 0606 	adc.w	r6, r6, r6
 8000320:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000324:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000328:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800032c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000330:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000334:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000338:	bf88      	it	hi
 800033a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800033e:	d81e      	bhi.n	800037e <__aeabi_dmul+0xde>
 8000340:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000358:	ea46 0101 	orr.w	r1, r6, r1
 800035c:	ea40 0002 	orr.w	r0, r0, r2
 8000360:	ea81 0103 	eor.w	r1, r1, r3
 8000364:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000368:	bfc2      	ittt	gt
 800036a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800036e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000372:	bd70      	popgt	{r4, r5, r6, pc}
 8000374:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000378:	f04f 0e00 	mov.w	lr, #0
 800037c:	3c01      	subs	r4, #1
 800037e:	f300 80ab 	bgt.w	80004d8 <__aeabi_dmul+0x238>
 8000382:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000386:	bfde      	ittt	le
 8000388:	2000      	movle	r0, #0
 800038a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800038e:	bd70      	pople	{r4, r5, r6, pc}
 8000390:	f1c4 0400 	rsb	r4, r4, #0
 8000394:	3c20      	subs	r4, #32
 8000396:	da35      	bge.n	8000404 <__aeabi_dmul+0x164>
 8000398:	340c      	adds	r4, #12
 800039a:	dc1b      	bgt.n	80003d4 <__aeabi_dmul+0x134>
 800039c:	f104 0414 	add.w	r4, r4, #20
 80003a0:	f1c4 0520 	rsb	r5, r4, #32
 80003a4:	fa00 f305 	lsl.w	r3, r0, r5
 80003a8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ac:	fa01 f205 	lsl.w	r2, r1, r5
 80003b0:	ea40 0002 	orr.w	r0, r0, r2
 80003b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c0:	fa21 f604 	lsr.w	r6, r1, r4
 80003c4:	eb42 0106 	adc.w	r1, r2, r6
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 040c 	rsb	r4, r4, #12
 80003d8:	f1c4 0520 	rsb	r5, r4, #32
 80003dc:	fa00 f304 	lsl.w	r3, r0, r4
 80003e0:	fa20 f005 	lsr.w	r0, r0, r5
 80003e4:	fa01 f204 	lsl.w	r2, r1, r4
 80003e8:	ea40 0002 	orr.w	r0, r0, r2
 80003ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003f4:	f141 0100 	adc.w	r1, r1, #0
 80003f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003fc:	bf08      	it	eq
 80003fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f1c4 0520 	rsb	r5, r4, #32
 8000408:	fa00 f205 	lsl.w	r2, r0, r5
 800040c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000410:	fa20 f304 	lsr.w	r3, r0, r4
 8000414:	fa01 f205 	lsl.w	r2, r1, r5
 8000418:	ea43 0302 	orr.w	r3, r3, r2
 800041c:	fa21 f004 	lsr.w	r0, r1, r4
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	fa21 f204 	lsr.w	r2, r1, r4
 8000428:	ea20 0002 	bic.w	r0, r0, r2
 800042c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000430:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000434:	bf08      	it	eq
 8000436:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800043a:	bd70      	pop	{r4, r5, r6, pc}
 800043c:	f094 0f00 	teq	r4, #0
 8000440:	d10f      	bne.n	8000462 <__aeabi_dmul+0x1c2>
 8000442:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000446:	0040      	lsls	r0, r0, #1
 8000448:	eb41 0101 	adc.w	r1, r1, r1
 800044c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3c01      	subeq	r4, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1a6>
 8000456:	ea41 0106 	orr.w	r1, r1, r6
 800045a:	f095 0f00 	teq	r5, #0
 800045e:	bf18      	it	ne
 8000460:	4770      	bxne	lr
 8000462:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000466:	0052      	lsls	r2, r2, #1
 8000468:	eb43 0303 	adc.w	r3, r3, r3
 800046c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3d01      	subeq	r5, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1c6>
 8000476:	ea43 0306 	orr.w	r3, r3, r6
 800047a:	4770      	bx	lr
 800047c:	ea94 0f0c 	teq	r4, ip
 8000480:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000484:	bf18      	it	ne
 8000486:	ea95 0f0c 	teqne	r5, ip
 800048a:	d00c      	beq.n	80004a6 <__aeabi_dmul+0x206>
 800048c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000490:	bf18      	it	ne
 8000492:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000496:	d1d1      	bne.n	800043c <__aeabi_dmul+0x19c>
 8000498:	ea81 0103 	eor.w	r1, r1, r3
 800049c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd70      	pop	{r4, r5, r6, pc}
 80004a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004aa:	bf06      	itte	eq
 80004ac:	4610      	moveq	r0, r2
 80004ae:	4619      	moveq	r1, r3
 80004b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b4:	d019      	beq.n	80004ea <__aeabi_dmul+0x24a>
 80004b6:	ea94 0f0c 	teq	r4, ip
 80004ba:	d102      	bne.n	80004c2 <__aeabi_dmul+0x222>
 80004bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004c0:	d113      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004c2:	ea95 0f0c 	teq	r5, ip
 80004c6:	d105      	bne.n	80004d4 <__aeabi_dmul+0x234>
 80004c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004cc:	bf1c      	itt	ne
 80004ce:	4610      	movne	r0, r2
 80004d0:	4619      	movne	r1, r3
 80004d2:	d10a      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004d4:	ea81 0103 	eor.w	r1, r1, r3
 80004d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd70      	pop	{r4, r5, r6, pc}
 80004ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004f2:	bd70      	pop	{r4, r5, r6, pc}

080004f4 <__aeabi_drsub>:
 80004f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e002      	b.n	8000500 <__adddf3>
 80004fa:	bf00      	nop

080004fc <__aeabi_dsub>:
 80004fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000500 <__adddf3>:
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000506:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800050a:	ea94 0f05 	teq	r4, r5
 800050e:	bf08      	it	eq
 8000510:	ea90 0f02 	teqeq	r0, r2
 8000514:	bf1f      	itttt	ne
 8000516:	ea54 0c00 	orrsne.w	ip, r4, r0
 800051a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800051e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000522:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000526:	f000 80e2 	beq.w	80006ee <__adddf3+0x1ee>
 800052a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800052e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000532:	bfb8      	it	lt
 8000534:	426d      	neglt	r5, r5
 8000536:	dd0c      	ble.n	8000552 <__adddf3+0x52>
 8000538:	442c      	add	r4, r5
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	ea82 0000 	eor.w	r0, r2, r0
 8000546:	ea83 0101 	eor.w	r1, r3, r1
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	2d36      	cmp	r5, #54	; 0x36
 8000554:	bf88      	it	hi
 8000556:	bd30      	pophi	{r4, r5, pc}
 8000558:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800055c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000560:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000564:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000568:	d002      	beq.n	8000570 <__adddf3+0x70>
 800056a:	4240      	negs	r0, r0
 800056c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000570:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000574:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000578:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800057c:	d002      	beq.n	8000584 <__adddf3+0x84>
 800057e:	4252      	negs	r2, r2
 8000580:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000584:	ea94 0f05 	teq	r4, r5
 8000588:	f000 80a7 	beq.w	80006da <__adddf3+0x1da>
 800058c:	f1a4 0401 	sub.w	r4, r4, #1
 8000590:	f1d5 0e20 	rsbs	lr, r5, #32
 8000594:	db0d      	blt.n	80005b2 <__adddf3+0xb2>
 8000596:	fa02 fc0e 	lsl.w	ip, r2, lr
 800059a:	fa22 f205 	lsr.w	r2, r2, r5
 800059e:	1880      	adds	r0, r0, r2
 80005a0:	f141 0100 	adc.w	r1, r1, #0
 80005a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005a8:	1880      	adds	r0, r0, r2
 80005aa:	fa43 f305 	asr.w	r3, r3, r5
 80005ae:	4159      	adcs	r1, r3
 80005b0:	e00e      	b.n	80005d0 <__adddf3+0xd0>
 80005b2:	f1a5 0520 	sub.w	r5, r5, #32
 80005b6:	f10e 0e20 	add.w	lr, lr, #32
 80005ba:	2a01      	cmp	r2, #1
 80005bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005c0:	bf28      	it	cs
 80005c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005c6:	fa43 f305 	asr.w	r3, r3, r5
 80005ca:	18c0      	adds	r0, r0, r3
 80005cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	d507      	bpl.n	80005e6 <__adddf3+0xe6>
 80005d6:	f04f 0e00 	mov.w	lr, #0
 80005da:	f1dc 0c00 	rsbs	ip, ip, #0
 80005de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ea:	d31b      	bcc.n	8000624 <__adddf3+0x124>
 80005ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005f0:	d30c      	bcc.n	800060c <__adddf3+0x10c>
 80005f2:	0849      	lsrs	r1, r1, #1
 80005f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005fc:	f104 0401 	add.w	r4, r4, #1
 8000600:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000604:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000608:	f080 809a 	bcs.w	8000740 <__adddf3+0x240>
 800060c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000610:	bf08      	it	eq
 8000612:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000616:	f150 0000 	adcs.w	r0, r0, #0
 800061a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061e:	ea41 0105 	orr.w	r1, r1, r5
 8000622:	bd30      	pop	{r4, r5, pc}
 8000624:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000628:	4140      	adcs	r0, r0
 800062a:	eb41 0101 	adc.w	r1, r1, r1
 800062e:	3c01      	subs	r4, #1
 8000630:	bf28      	it	cs
 8000632:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000636:	d2e9      	bcs.n	800060c <__adddf3+0x10c>
 8000638:	f091 0f00 	teq	r1, #0
 800063c:	bf04      	itt	eq
 800063e:	4601      	moveq	r1, r0
 8000640:	2000      	moveq	r0, #0
 8000642:	fab1 f381 	clz	r3, r1
 8000646:	bf08      	it	eq
 8000648:	3320      	addeq	r3, #32
 800064a:	f1a3 030b 	sub.w	r3, r3, #11
 800064e:	f1b3 0220 	subs.w	r2, r3, #32
 8000652:	da0c      	bge.n	800066e <__adddf3+0x16e>
 8000654:	320c      	adds	r2, #12
 8000656:	dd08      	ble.n	800066a <__adddf3+0x16a>
 8000658:	f102 0c14 	add.w	ip, r2, #20
 800065c:	f1c2 020c 	rsb	r2, r2, #12
 8000660:	fa01 f00c 	lsl.w	r0, r1, ip
 8000664:	fa21 f102 	lsr.w	r1, r1, r2
 8000668:	e00c      	b.n	8000684 <__adddf3+0x184>
 800066a:	f102 0214 	add.w	r2, r2, #20
 800066e:	bfd8      	it	le
 8000670:	f1c2 0c20 	rsble	ip, r2, #32
 8000674:	fa01 f102 	lsl.w	r1, r1, r2
 8000678:	fa20 fc0c 	lsr.w	ip, r0, ip
 800067c:	bfdc      	itt	le
 800067e:	ea41 010c 	orrle.w	r1, r1, ip
 8000682:	4090      	lslle	r0, r2
 8000684:	1ae4      	subs	r4, r4, r3
 8000686:	bfa2      	ittt	ge
 8000688:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800068c:	4329      	orrge	r1, r5
 800068e:	bd30      	popge	{r4, r5, pc}
 8000690:	ea6f 0404 	mvn.w	r4, r4
 8000694:	3c1f      	subs	r4, #31
 8000696:	da1c      	bge.n	80006d2 <__adddf3+0x1d2>
 8000698:	340c      	adds	r4, #12
 800069a:	dc0e      	bgt.n	80006ba <__adddf3+0x1ba>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0220 	rsb	r2, r4, #32
 80006a4:	fa20 f004 	lsr.w	r0, r0, r4
 80006a8:	fa01 f302 	lsl.w	r3, r1, r2
 80006ac:	ea40 0003 	orr.w	r0, r0, r3
 80006b0:	fa21 f304 	lsr.w	r3, r1, r4
 80006b4:	ea45 0103 	orr.w	r1, r5, r3
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f1c4 040c 	rsb	r4, r4, #12
 80006be:	f1c4 0220 	rsb	r2, r4, #32
 80006c2:	fa20 f002 	lsr.w	r0, r0, r2
 80006c6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ca:	ea40 0003 	orr.w	r0, r0, r3
 80006ce:	4629      	mov	r1, r5
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	fa21 f004 	lsr.w	r0, r1, r4
 80006d6:	4629      	mov	r1, r5
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f094 0f00 	teq	r4, #0
 80006de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006e2:	bf06      	itte	eq
 80006e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006e8:	3401      	addeq	r4, #1
 80006ea:	3d01      	subne	r5, #1
 80006ec:	e74e      	b.n	800058c <__adddf3+0x8c>
 80006ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006f2:	bf18      	it	ne
 80006f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006f8:	d029      	beq.n	800074e <__adddf3+0x24e>
 80006fa:	ea94 0f05 	teq	r4, r5
 80006fe:	bf08      	it	eq
 8000700:	ea90 0f02 	teqeq	r0, r2
 8000704:	d005      	beq.n	8000712 <__adddf3+0x212>
 8000706:	ea54 0c00 	orrs.w	ip, r4, r0
 800070a:	bf04      	itt	eq
 800070c:	4619      	moveq	r1, r3
 800070e:	4610      	moveq	r0, r2
 8000710:	bd30      	pop	{r4, r5, pc}
 8000712:	ea91 0f03 	teq	r1, r3
 8000716:	bf1e      	ittt	ne
 8000718:	2100      	movne	r1, #0
 800071a:	2000      	movne	r0, #0
 800071c:	bd30      	popne	{r4, r5, pc}
 800071e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000722:	d105      	bne.n	8000730 <__adddf3+0x230>
 8000724:	0040      	lsls	r0, r0, #1
 8000726:	4149      	adcs	r1, r1
 8000728:	bf28      	it	cs
 800072a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd30      	pop	{r4, r5, pc}
 8000730:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000734:	bf3c      	itt	cc
 8000736:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800073a:	bd30      	popcc	{r4, r5, pc}
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000744:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd30      	pop	{r4, r5, pc}
 800074e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000752:	bf1a      	itte	ne
 8000754:	4619      	movne	r1, r3
 8000756:	4610      	movne	r0, r2
 8000758:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800075c:	bf1c      	itt	ne
 800075e:	460b      	movne	r3, r1
 8000760:	4602      	movne	r2, r0
 8000762:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000766:	bf06      	itte	eq
 8000768:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800076c:	ea91 0f03 	teqeq	r1, r3
 8000770:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000774:	bd30      	pop	{r4, r5, pc}
 8000776:	bf00      	nop

08000778 <__aeabi_ui2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f04f 0500 	mov.w	r5, #0
 8000790:	f04f 0100 	mov.w	r1, #0
 8000794:	e750      	b.n	8000638 <__adddf3+0x138>
 8000796:	bf00      	nop

08000798 <__aeabi_i2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007b0:	bf48      	it	mi
 80007b2:	4240      	negmi	r0, r0
 80007b4:	f04f 0100 	mov.w	r1, #0
 80007b8:	e73e      	b.n	8000638 <__adddf3+0x138>
 80007ba:	bf00      	nop

080007bc <__aeabi_f2d>:
 80007bc:	0042      	lsls	r2, r0, #1
 80007be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ca:	bf1f      	itttt	ne
 80007cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007d8:	4770      	bxne	lr
 80007da:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007de:	bf08      	it	eq
 80007e0:	4770      	bxeq	lr
 80007e2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007e6:	bf04      	itt	eq
 80007e8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007ec:	4770      	bxeq	lr
 80007ee:	b530      	push	{r4, r5, lr}
 80007f0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007fc:	e71c      	b.n	8000638 <__adddf3+0x138>
 80007fe:	bf00      	nop

08000800 <__aeabi_ul2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f04f 0500 	mov.w	r5, #0
 800080e:	e00a      	b.n	8000826 <__aeabi_l2d+0x16>

08000810 <__aeabi_l2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800081e:	d502      	bpl.n	8000826 <__aeabi_l2d+0x16>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800082a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800082e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000832:	f43f aed8 	beq.w	80005e6 <__adddf3+0xe6>
 8000836:	f04f 0203 	mov.w	r2, #3
 800083a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800083e:	bf18      	it	ne
 8000840:	3203      	addne	r2, #3
 8000842:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000846:	bf18      	it	ne
 8000848:	3203      	addne	r2, #3
 800084a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800084e:	f1c2 0320 	rsb	r3, r2, #32
 8000852:	fa00 fc03 	lsl.w	ip, r0, r3
 8000856:	fa20 f002 	lsr.w	r0, r0, r2
 800085a:	fa01 fe03 	lsl.w	lr, r1, r3
 800085e:	ea40 000e 	orr.w	r0, r0, lr
 8000862:	fa21 f102 	lsr.w	r1, r1, r2
 8000866:	4414      	add	r4, r2
 8000868:	e6bd      	b.n	80005e6 <__adddf3+0xe6>
 800086a:	bf00      	nop

0800086c <__aeabi_d2uiz>:
 800086c:	004a      	lsls	r2, r1, #1
 800086e:	d211      	bcs.n	8000894 <__aeabi_d2uiz+0x28>
 8000870:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000874:	d211      	bcs.n	800089a <__aeabi_d2uiz+0x2e>
 8000876:	d50d      	bpl.n	8000894 <__aeabi_d2uiz+0x28>
 8000878:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800087c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000880:	d40e      	bmi.n	80008a0 <__aeabi_d2uiz+0x34>
 8000882:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000886:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800088a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800088e:	fa23 f002 	lsr.w	r0, r3, r2
 8000892:	4770      	bx	lr
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	4770      	bx	lr
 800089a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800089e:	d102      	bne.n	80008a6 <__aeabi_d2uiz+0x3a>
 80008a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008a4:	4770      	bx	lr
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	4770      	bx	lr

080008ac <__aeabi_uldivmod>:
 80008ac:	b953      	cbnz	r3, 80008c4 <__aeabi_uldivmod+0x18>
 80008ae:	b94a      	cbnz	r2, 80008c4 <__aeabi_uldivmod+0x18>
 80008b0:	2900      	cmp	r1, #0
 80008b2:	bf08      	it	eq
 80008b4:	2800      	cmpeq	r0, #0
 80008b6:	bf1c      	itt	ne
 80008b8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80008bc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80008c0:	f000 b974 	b.w	8000bac <__aeabi_idiv0>
 80008c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008cc:	f000 f806 	bl	80008dc <__udivmoddi4>
 80008d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008d8:	b004      	add	sp, #16
 80008da:	4770      	bx	lr

080008dc <__udivmoddi4>:
 80008dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008e0:	9d08      	ldr	r5, [sp, #32]
 80008e2:	4604      	mov	r4, r0
 80008e4:	468e      	mov	lr, r1
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d14d      	bne.n	8000986 <__udivmoddi4+0xaa>
 80008ea:	428a      	cmp	r2, r1
 80008ec:	4694      	mov	ip, r2
 80008ee:	d969      	bls.n	80009c4 <__udivmoddi4+0xe8>
 80008f0:	fab2 f282 	clz	r2, r2
 80008f4:	b152      	cbz	r2, 800090c <__udivmoddi4+0x30>
 80008f6:	fa01 f302 	lsl.w	r3, r1, r2
 80008fa:	f1c2 0120 	rsb	r1, r2, #32
 80008fe:	fa20 f101 	lsr.w	r1, r0, r1
 8000902:	fa0c fc02 	lsl.w	ip, ip, r2
 8000906:	ea41 0e03 	orr.w	lr, r1, r3
 800090a:	4094      	lsls	r4, r2
 800090c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000910:	0c21      	lsrs	r1, r4, #16
 8000912:	fbbe f6f8 	udiv	r6, lr, r8
 8000916:	fa1f f78c 	uxth.w	r7, ip
 800091a:	fb08 e316 	mls	r3, r8, r6, lr
 800091e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000922:	fb06 f107 	mul.w	r1, r6, r7
 8000926:	4299      	cmp	r1, r3
 8000928:	d90a      	bls.n	8000940 <__udivmoddi4+0x64>
 800092a:	eb1c 0303 	adds.w	r3, ip, r3
 800092e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000932:	f080 811f 	bcs.w	8000b74 <__udivmoddi4+0x298>
 8000936:	4299      	cmp	r1, r3
 8000938:	f240 811c 	bls.w	8000b74 <__udivmoddi4+0x298>
 800093c:	3e02      	subs	r6, #2
 800093e:	4463      	add	r3, ip
 8000940:	1a5b      	subs	r3, r3, r1
 8000942:	b2a4      	uxth	r4, r4
 8000944:	fbb3 f0f8 	udiv	r0, r3, r8
 8000948:	fb08 3310 	mls	r3, r8, r0, r3
 800094c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000950:	fb00 f707 	mul.w	r7, r0, r7
 8000954:	42a7      	cmp	r7, r4
 8000956:	d90a      	bls.n	800096e <__udivmoddi4+0x92>
 8000958:	eb1c 0404 	adds.w	r4, ip, r4
 800095c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000960:	f080 810a 	bcs.w	8000b78 <__udivmoddi4+0x29c>
 8000964:	42a7      	cmp	r7, r4
 8000966:	f240 8107 	bls.w	8000b78 <__udivmoddi4+0x29c>
 800096a:	4464      	add	r4, ip
 800096c:	3802      	subs	r0, #2
 800096e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000972:	1be4      	subs	r4, r4, r7
 8000974:	2600      	movs	r6, #0
 8000976:	b11d      	cbz	r5, 8000980 <__udivmoddi4+0xa4>
 8000978:	40d4      	lsrs	r4, r2
 800097a:	2300      	movs	r3, #0
 800097c:	e9c5 4300 	strd	r4, r3, [r5]
 8000980:	4631      	mov	r1, r6
 8000982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000986:	428b      	cmp	r3, r1
 8000988:	d909      	bls.n	800099e <__udivmoddi4+0xc2>
 800098a:	2d00      	cmp	r5, #0
 800098c:	f000 80ef 	beq.w	8000b6e <__udivmoddi4+0x292>
 8000990:	2600      	movs	r6, #0
 8000992:	e9c5 0100 	strd	r0, r1, [r5]
 8000996:	4630      	mov	r0, r6
 8000998:	4631      	mov	r1, r6
 800099a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800099e:	fab3 f683 	clz	r6, r3
 80009a2:	2e00      	cmp	r6, #0
 80009a4:	d14a      	bne.n	8000a3c <__udivmoddi4+0x160>
 80009a6:	428b      	cmp	r3, r1
 80009a8:	d302      	bcc.n	80009b0 <__udivmoddi4+0xd4>
 80009aa:	4282      	cmp	r2, r0
 80009ac:	f200 80f9 	bhi.w	8000ba2 <__udivmoddi4+0x2c6>
 80009b0:	1a84      	subs	r4, r0, r2
 80009b2:	eb61 0303 	sbc.w	r3, r1, r3
 80009b6:	2001      	movs	r0, #1
 80009b8:	469e      	mov	lr, r3
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	d0e0      	beq.n	8000980 <__udivmoddi4+0xa4>
 80009be:	e9c5 4e00 	strd	r4, lr, [r5]
 80009c2:	e7dd      	b.n	8000980 <__udivmoddi4+0xa4>
 80009c4:	b902      	cbnz	r2, 80009c8 <__udivmoddi4+0xec>
 80009c6:	deff      	udf	#255	; 0xff
 80009c8:	fab2 f282 	clz	r2, r2
 80009cc:	2a00      	cmp	r2, #0
 80009ce:	f040 8092 	bne.w	8000af6 <__udivmoddi4+0x21a>
 80009d2:	eba1 010c 	sub.w	r1, r1, ip
 80009d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009da:	fa1f fe8c 	uxth.w	lr, ip
 80009de:	2601      	movs	r6, #1
 80009e0:	0c20      	lsrs	r0, r4, #16
 80009e2:	fbb1 f3f7 	udiv	r3, r1, r7
 80009e6:	fb07 1113 	mls	r1, r7, r3, r1
 80009ea:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009ee:	fb0e f003 	mul.w	r0, lr, r3
 80009f2:	4288      	cmp	r0, r1
 80009f4:	d908      	bls.n	8000a08 <__udivmoddi4+0x12c>
 80009f6:	eb1c 0101 	adds.w	r1, ip, r1
 80009fa:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80009fe:	d202      	bcs.n	8000a06 <__udivmoddi4+0x12a>
 8000a00:	4288      	cmp	r0, r1
 8000a02:	f200 80cb 	bhi.w	8000b9c <__udivmoddi4+0x2c0>
 8000a06:	4643      	mov	r3, r8
 8000a08:	1a09      	subs	r1, r1, r0
 8000a0a:	b2a4      	uxth	r4, r4
 8000a0c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a10:	fb07 1110 	mls	r1, r7, r0, r1
 8000a14:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a18:	fb0e fe00 	mul.w	lr, lr, r0
 8000a1c:	45a6      	cmp	lr, r4
 8000a1e:	d908      	bls.n	8000a32 <__udivmoddi4+0x156>
 8000a20:	eb1c 0404 	adds.w	r4, ip, r4
 8000a24:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000a28:	d202      	bcs.n	8000a30 <__udivmoddi4+0x154>
 8000a2a:	45a6      	cmp	lr, r4
 8000a2c:	f200 80bb 	bhi.w	8000ba6 <__udivmoddi4+0x2ca>
 8000a30:	4608      	mov	r0, r1
 8000a32:	eba4 040e 	sub.w	r4, r4, lr
 8000a36:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a3a:	e79c      	b.n	8000976 <__udivmoddi4+0x9a>
 8000a3c:	f1c6 0720 	rsb	r7, r6, #32
 8000a40:	40b3      	lsls	r3, r6
 8000a42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a46:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a4a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a4e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a52:	431c      	orrs	r4, r3
 8000a54:	40f9      	lsrs	r1, r7
 8000a56:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a5a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a5e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a62:	0c20      	lsrs	r0, r4, #16
 8000a64:	fa1f fe8c 	uxth.w	lr, ip
 8000a68:	fb09 1118 	mls	r1, r9, r8, r1
 8000a6c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a70:	fb08 f00e 	mul.w	r0, r8, lr
 8000a74:	4288      	cmp	r0, r1
 8000a76:	fa02 f206 	lsl.w	r2, r2, r6
 8000a7a:	d90b      	bls.n	8000a94 <__udivmoddi4+0x1b8>
 8000a7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a80:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000a84:	f080 8088 	bcs.w	8000b98 <__udivmoddi4+0x2bc>
 8000a88:	4288      	cmp	r0, r1
 8000a8a:	f240 8085 	bls.w	8000b98 <__udivmoddi4+0x2bc>
 8000a8e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a92:	4461      	add	r1, ip
 8000a94:	1a09      	subs	r1, r1, r0
 8000a96:	b2a4      	uxth	r4, r4
 8000a98:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a9c:	fb09 1110 	mls	r1, r9, r0, r1
 8000aa0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000aa4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000aa8:	458e      	cmp	lr, r1
 8000aaa:	d908      	bls.n	8000abe <__udivmoddi4+0x1e2>
 8000aac:	eb1c 0101 	adds.w	r1, ip, r1
 8000ab0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000ab4:	d26c      	bcs.n	8000b90 <__udivmoddi4+0x2b4>
 8000ab6:	458e      	cmp	lr, r1
 8000ab8:	d96a      	bls.n	8000b90 <__udivmoddi4+0x2b4>
 8000aba:	3802      	subs	r0, #2
 8000abc:	4461      	add	r1, ip
 8000abe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ac2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ac6:	eba1 010e 	sub.w	r1, r1, lr
 8000aca:	42a1      	cmp	r1, r4
 8000acc:	46c8      	mov	r8, r9
 8000ace:	46a6      	mov	lr, r4
 8000ad0:	d356      	bcc.n	8000b80 <__udivmoddi4+0x2a4>
 8000ad2:	d053      	beq.n	8000b7c <__udivmoddi4+0x2a0>
 8000ad4:	b15d      	cbz	r5, 8000aee <__udivmoddi4+0x212>
 8000ad6:	ebb3 0208 	subs.w	r2, r3, r8
 8000ada:	eb61 010e 	sbc.w	r1, r1, lr
 8000ade:	fa01 f707 	lsl.w	r7, r1, r7
 8000ae2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ae6:	40f1      	lsrs	r1, r6
 8000ae8:	431f      	orrs	r7, r3
 8000aea:	e9c5 7100 	strd	r7, r1, [r5]
 8000aee:	2600      	movs	r6, #0
 8000af0:	4631      	mov	r1, r6
 8000af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af6:	f1c2 0320 	rsb	r3, r2, #32
 8000afa:	40d8      	lsrs	r0, r3
 8000afc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b00:	fa21 f303 	lsr.w	r3, r1, r3
 8000b04:	4091      	lsls	r1, r2
 8000b06:	4301      	orrs	r1, r0
 8000b08:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b0c:	fa1f fe8c 	uxth.w	lr, ip
 8000b10:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b14:	fb07 3610 	mls	r6, r7, r0, r3
 8000b18:	0c0b      	lsrs	r3, r1, #16
 8000b1a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b1e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b22:	429e      	cmp	r6, r3
 8000b24:	fa04 f402 	lsl.w	r4, r4, r2
 8000b28:	d908      	bls.n	8000b3c <__udivmoddi4+0x260>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000b32:	d22f      	bcs.n	8000b94 <__udivmoddi4+0x2b8>
 8000b34:	429e      	cmp	r6, r3
 8000b36:	d92d      	bls.n	8000b94 <__udivmoddi4+0x2b8>
 8000b38:	3802      	subs	r0, #2
 8000b3a:	4463      	add	r3, ip
 8000b3c:	1b9b      	subs	r3, r3, r6
 8000b3e:	b289      	uxth	r1, r1
 8000b40:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b44:	fb07 3316 	mls	r3, r7, r6, r3
 8000b48:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b4c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b50:	428b      	cmp	r3, r1
 8000b52:	d908      	bls.n	8000b66 <__udivmoddi4+0x28a>
 8000b54:	eb1c 0101 	adds.w	r1, ip, r1
 8000b58:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000b5c:	d216      	bcs.n	8000b8c <__udivmoddi4+0x2b0>
 8000b5e:	428b      	cmp	r3, r1
 8000b60:	d914      	bls.n	8000b8c <__udivmoddi4+0x2b0>
 8000b62:	3e02      	subs	r6, #2
 8000b64:	4461      	add	r1, ip
 8000b66:	1ac9      	subs	r1, r1, r3
 8000b68:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b6c:	e738      	b.n	80009e0 <__udivmoddi4+0x104>
 8000b6e:	462e      	mov	r6, r5
 8000b70:	4628      	mov	r0, r5
 8000b72:	e705      	b.n	8000980 <__udivmoddi4+0xa4>
 8000b74:	4606      	mov	r6, r0
 8000b76:	e6e3      	b.n	8000940 <__udivmoddi4+0x64>
 8000b78:	4618      	mov	r0, r3
 8000b7a:	e6f8      	b.n	800096e <__udivmoddi4+0x92>
 8000b7c:	454b      	cmp	r3, r9
 8000b7e:	d2a9      	bcs.n	8000ad4 <__udivmoddi4+0x1f8>
 8000b80:	ebb9 0802 	subs.w	r8, r9, r2
 8000b84:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b88:	3801      	subs	r0, #1
 8000b8a:	e7a3      	b.n	8000ad4 <__udivmoddi4+0x1f8>
 8000b8c:	4646      	mov	r6, r8
 8000b8e:	e7ea      	b.n	8000b66 <__udivmoddi4+0x28a>
 8000b90:	4620      	mov	r0, r4
 8000b92:	e794      	b.n	8000abe <__udivmoddi4+0x1e2>
 8000b94:	4640      	mov	r0, r8
 8000b96:	e7d1      	b.n	8000b3c <__udivmoddi4+0x260>
 8000b98:	46d0      	mov	r8, sl
 8000b9a:	e77b      	b.n	8000a94 <__udivmoddi4+0x1b8>
 8000b9c:	3b02      	subs	r3, #2
 8000b9e:	4461      	add	r1, ip
 8000ba0:	e732      	b.n	8000a08 <__udivmoddi4+0x12c>
 8000ba2:	4630      	mov	r0, r6
 8000ba4:	e709      	b.n	80009ba <__udivmoddi4+0xde>
 8000ba6:	4464      	add	r4, ip
 8000ba8:	3802      	subs	r0, #2
 8000baa:	e742      	b.n	8000a32 <__udivmoddi4+0x156>

08000bac <__aeabi_idiv0>:
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bb4:	f000 fdec 	bl	8001790 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb8:	f000 f80b 	bl	8000bd2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bbc:	f000 f884 	bl	8000cc8 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000bc0:	f000 f856 	bl	8000c70 <MX_LPUART1_UART_Init>
  MX_FATFS_Init();
 8000bc4:	f005 fc22 	bl	800640c <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8000bc8:	f00c f832 	bl	800cc30 <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000bcc:	f00c f856 	bl	800cc7c <MX_USB_HOST_Process>
 8000bd0:	e7fc      	b.n	8000bcc <main+0x1c>

08000bd2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b096      	sub	sp, #88	; 0x58
 8000bd6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	2244      	movs	r2, #68	; 0x44
 8000bde:	2100      	movs	r1, #0
 8000be0:	4618      	mov	r0, r3
 8000be2:	f00c fc15 	bl	800d410 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000be6:	463b      	mov	r3, r7
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
 8000bf2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000bf4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000bf8:	f002 fcca 	bl	8003590 <HAL_PWREx_ControlVoltageScaling>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000c02:	f000 f8ad 	bl	8000d60 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c06:	2301      	movs	r3, #1
 8000c08:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c0e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c10:	2302      	movs	r3, #2
 8000c12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c14:	2303      	movs	r3, #3
 8000c16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000c1c:	230c      	movs	r3, #12
 8000c1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000c20:	2307      	movs	r3, #7
 8000c22:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c24:	2302      	movs	r3, #2
 8000c26:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	4618      	mov	r0, r3
 8000c32:	f002 fd13 	bl	800365c <HAL_RCC_OscConfig>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c3c:	f000 f890 	bl	8000d60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c40:	230f      	movs	r3, #15
 8000c42:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c44:	2303      	movs	r3, #3
 8000c46:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c50:	2300      	movs	r3, #0
 8000c52:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c54:	463b      	mov	r3, r7
 8000c56:	2102      	movs	r1, #2
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f003 f8db 	bl	8003e14 <HAL_RCC_ClockConfig>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000c64:	f000 f87c 	bl	8000d60 <Error_Handler>
  }
}
 8000c68:	bf00      	nop
 8000c6a:	3758      	adds	r7, #88	; 0x58
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000c74:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <MX_LPUART1_UART_Init+0x50>)
 8000c76:	4a13      	ldr	r2, [pc, #76]	; (8000cc4 <MX_LPUART1_UART_Init+0x54>)
 8000c78:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000c7a:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <MX_LPUART1_UART_Init+0x50>)
 8000c7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c80:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c82:	4b0f      	ldr	r3, [pc, #60]	; (8000cc0 <MX_LPUART1_UART_Init+0x50>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000c88:	4b0d      	ldr	r3, [pc, #52]	; (8000cc0 <MX_LPUART1_UART_Init+0x50>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <MX_LPUART1_UART_Init+0x50>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000c94:	4b0a      	ldr	r3, [pc, #40]	; (8000cc0 <MX_LPUART1_UART_Init+0x50>)
 8000c96:	220c      	movs	r2, #12
 8000c98:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c9a:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <MX_LPUART1_UART_Init+0x50>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ca0:	4b07      	ldr	r3, [pc, #28]	; (8000cc0 <MX_LPUART1_UART_Init+0x50>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ca6:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <MX_LPUART1_UART_Init+0x50>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000cac:	4804      	ldr	r0, [pc, #16]	; (8000cc0 <MX_LPUART1_UART_Init+0x50>)
 8000cae:	f003 ff91 	bl	8004bd4 <HAL_UART_Init>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000cb8:	f000 f852 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	200000ac 	.word	0x200000ac
 8000cc4:	40008000 	.word	0x40008000

08000cc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b088      	sub	sp, #32
 8000ccc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cce:	f107 030c 	add.w	r3, r7, #12
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]
 8000cdc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cde:	4b1e      	ldr	r3, [pc, #120]	; (8000d58 <MX_GPIO_Init+0x90>)
 8000ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce2:	4a1d      	ldr	r2, [pc, #116]	; (8000d58 <MX_GPIO_Init+0x90>)
 8000ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ce8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cea:	4b1b      	ldr	r3, [pc, #108]	; (8000d58 <MX_GPIO_Init+0x90>)
 8000cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cf2:	60bb      	str	r3, [r7, #8]
 8000cf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf6:	4b18      	ldr	r3, [pc, #96]	; (8000d58 <MX_GPIO_Init+0x90>)
 8000cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfa:	4a17      	ldr	r2, [pc, #92]	; (8000d58 <MX_GPIO_Init+0x90>)
 8000cfc:	f043 0304 	orr.w	r3, r3, #4
 8000d00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d02:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <MX_GPIO_Init+0x90>)
 8000d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d06:	f003 0304 	and.w	r3, r3, #4
 8000d0a:	607b      	str	r3, [r7, #4]
 8000d0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0e:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <MX_GPIO_Init+0x90>)
 8000d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d12:	4a11      	ldr	r2, [pc, #68]	; (8000d58 <MX_GPIO_Init+0x90>)
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d1a:	4b0f      	ldr	r3, [pc, #60]	; (8000d58 <MX_GPIO_Init+0x90>)
 8000d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	603b      	str	r3, [r7, #0]
 8000d24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8000d26:	2200      	movs	r2, #0
 8000d28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d2c:	480b      	ldr	r0, [pc, #44]	; (8000d5c <MX_GPIO_Init+0x94>)
 8000d2e:	f001 f88b 	bl	8001e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d40:	2300      	movs	r3, #0
 8000d42:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d44:	f107 030c 	add.w	r3, r7, #12
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4804      	ldr	r0, [pc, #16]	; (8000d5c <MX_GPIO_Init+0x94>)
 8000d4c:	f000 fed2 	bl	8001af4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d50:	bf00      	nop
 8000d52:	3720      	adds	r7, #32
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	48000800 	.word	0x48000800

08000d60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d64:	b672      	cpsid	i
}
 8000d66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d68:	e7fe      	b.n	8000d68 <Error_Handler+0x8>
	...

08000d6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d72:	4b0f      	ldr	r3, [pc, #60]	; (8000db0 <HAL_MspInit+0x44>)
 8000d74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d76:	4a0e      	ldr	r2, [pc, #56]	; (8000db0 <HAL_MspInit+0x44>)
 8000d78:	f043 0301 	orr.w	r3, r3, #1
 8000d7c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d7e:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <HAL_MspInit+0x44>)
 8000d80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8a:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <HAL_MspInit+0x44>)
 8000d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d8e:	4a08      	ldr	r2, [pc, #32]	; (8000db0 <HAL_MspInit+0x44>)
 8000d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d94:	6593      	str	r3, [r2, #88]	; 0x58
 8000d96:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <HAL_MspInit+0x44>)
 8000d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d9e:	603b      	str	r3, [r7, #0]
 8000da0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da2:	bf00      	nop
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	40021000 	.word	0x40021000

08000db4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b0ac      	sub	sp, #176	; 0xb0
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	2288      	movs	r2, #136	; 0x88
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f00c fb1b 	bl	800d410 <memset>
  if(huart->Instance==LPUART1)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a21      	ldr	r2, [pc, #132]	; (8000e64 <HAL_UART_MspInit+0xb0>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d13a      	bne.n	8000e5a <HAL_UART_MspInit+0xa6>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000de4:	2320      	movs	r3, #32
 8000de6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000de8:	2300      	movs	r3, #0
 8000dea:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	4618      	mov	r0, r3
 8000df2:	f003 fa33 	bl	800425c <HAL_RCCEx_PeriphCLKConfig>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000dfc:	f7ff ffb0 	bl	8000d60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000e00:	4b19      	ldr	r3, [pc, #100]	; (8000e68 <HAL_UART_MspInit+0xb4>)
 8000e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e04:	4a18      	ldr	r2, [pc, #96]	; (8000e68 <HAL_UART_MspInit+0xb4>)
 8000e06:	f043 0301 	orr.w	r3, r3, #1
 8000e0a:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000e0c:	4b16      	ldr	r3, [pc, #88]	; (8000e68 <HAL_UART_MspInit+0xb4>)
 8000e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e10:	f003 0301 	and.w	r3, r3, #1
 8000e14:	613b      	str	r3, [r7, #16]
 8000e16:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e18:	4b13      	ldr	r3, [pc, #76]	; (8000e68 <HAL_UART_MspInit+0xb4>)
 8000e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1c:	4a12      	ldr	r2, [pc, #72]	; (8000e68 <HAL_UART_MspInit+0xb4>)
 8000e1e:	f043 0304 	orr.w	r3, r3, #4
 8000e22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e24:	4b10      	ldr	r3, [pc, #64]	; (8000e68 <HAL_UART_MspInit+0xb4>)
 8000e26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e28:	f003 0304 	and.w	r3, r3, #4
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e30:	2303      	movs	r3, #3
 8000e32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e36:	2302      	movs	r3, #2
 8000e38:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e42:	2303      	movs	r3, #3
 8000e44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000e48:	2308      	movs	r3, #8
 8000e4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e4e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e52:	4619      	mov	r1, r3
 8000e54:	4805      	ldr	r0, [pc, #20]	; (8000e6c <HAL_UART_MspInit+0xb8>)
 8000e56:	f000 fe4d 	bl	8001af4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000e5a:	bf00      	nop
 8000e5c:	37b0      	adds	r7, #176	; 0xb0
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40008000 	.word	0x40008000
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	48000800 	.word	0x48000800

08000e70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e74:	e7fe      	b.n	8000e74 <NMI_Handler+0x4>

08000e76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e7a:	e7fe      	b.n	8000e7a <HardFault_Handler+0x4>

08000e7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e80:	e7fe      	b.n	8000e80 <MemManage_Handler+0x4>

08000e82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e86:	e7fe      	b.n	8000e86 <BusFault_Handler+0x4>

08000e88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <UsageFault_Handler+0x4>

08000e8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr

08000eaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ebc:	f000 fcc4 	bl	8001848 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000ec8:	4802      	ldr	r0, [pc, #8]	; (8000ed4 <OTG_FS_IRQHandler+0x10>)
 8000eca:	f001 fa3b 	bl	8002344 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	200028e8 	.word	0x200028e8

08000ed8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ee0:	4a14      	ldr	r2, [pc, #80]	; (8000f34 <_sbrk+0x5c>)
 8000ee2:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <_sbrk+0x60>)
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eec:	4b13      	ldr	r3, [pc, #76]	; (8000f3c <_sbrk+0x64>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d102      	bne.n	8000efa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ef4:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <_sbrk+0x64>)
 8000ef6:	4a12      	ldr	r2, [pc, #72]	; (8000f40 <_sbrk+0x68>)
 8000ef8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000efa:	4b10      	ldr	r3, [pc, #64]	; (8000f3c <_sbrk+0x64>)
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4413      	add	r3, r2
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d207      	bcs.n	8000f18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f08:	f00c fa3a 	bl	800d380 <__errno>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	220c      	movs	r2, #12
 8000f10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f16:	e009      	b.n	8000f2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f18:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <_sbrk+0x64>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f1e:	4b07      	ldr	r3, [pc, #28]	; (8000f3c <_sbrk+0x64>)
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4413      	add	r3, r2
 8000f26:	4a05      	ldr	r2, [pc, #20]	; (8000f3c <_sbrk+0x64>)
 8000f28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3718      	adds	r7, #24
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20018000 	.word	0x20018000
 8000f38:	00000400 	.word	0x00000400
 8000f3c:	20000130 	.word	0x20000130
 8000f40:	20002c00 	.word	0x20002c00

08000f44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <SystemInit+0x20>)
 8000f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f4e:	4a05      	ldr	r2, [pc, #20]	; (8000f64 <SystemInit+0x20>)
 8000f50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fa0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f6c:	f7ff ffea 	bl	8000f44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f70:	480c      	ldr	r0, [pc, #48]	; (8000fa4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f72:	490d      	ldr	r1, [pc, #52]	; (8000fa8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f74:	4a0d      	ldr	r2, [pc, #52]	; (8000fac <LoopForever+0xe>)
  movs r3, #0
 8000f76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f78:	e002      	b.n	8000f80 <LoopCopyDataInit>

08000f7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f7e:	3304      	adds	r3, #4

08000f80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f84:	d3f9      	bcc.n	8000f7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f86:	4a0a      	ldr	r2, [pc, #40]	; (8000fb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f88:	4c0a      	ldr	r4, [pc, #40]	; (8000fb4 <LoopForever+0x16>)
  movs r3, #0
 8000f8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f8c:	e001      	b.n	8000f92 <LoopFillZerobss>

08000f8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f90:	3204      	adds	r2, #4

08000f92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f94:	d3fb      	bcc.n	8000f8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f96:	f00c f9f9 	bl	800d38c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f9a:	f7ff fe09 	bl	8000bb0 <main>

08000f9e <LoopForever>:

LoopForever:
    b LoopForever
 8000f9e:	e7fe      	b.n	8000f9e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fa0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000fa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa8:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000fac:	0800e818 	.word	0x0800e818
  ldr r2, =_sbss
 8000fb0:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000fb4:	20002bfc 	.word	0x20002bfc

08000fb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fb8:	e7fe      	b.n	8000fb8 <ADC1_2_IRQHandler>
	...

08000fbc <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f7ff f90d 	bl	80001e4 <strlen>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fd2:	6879      	ldr	r1, [r7, #4]
 8000fd4:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <Send_Uart+0x28>)
 8000fd6:	f003 fe4b 	bl	8004c70 <HAL_UART_Transmit>
}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	200000ac 	.word	0x200000ac

08000fe8 <Mount_USB>:



void Mount_USB (void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
	fresult = f_mount(&USBHFatFS, USBHPath, 1);
 8000fec:	2201      	movs	r2, #1
 8000fee:	490a      	ldr	r1, [pc, #40]	; (8001018 <Mount_USB+0x30>)
 8000ff0:	480a      	ldr	r0, [pc, #40]	; (800101c <Mount_USB+0x34>)
 8000ff2:	f00a fddb 	bl	800bbac <f_mount>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	4b09      	ldr	r3, [pc, #36]	; (8001020 <Mount_USB+0x38>)
 8000ffc:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) Send_Uart ("ERROR!!! in mounting USB ...\n\n");
 8000ffe:	4b08      	ldr	r3, [pc, #32]	; (8001020 <Mount_USB+0x38>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d003      	beq.n	800100e <Mount_USB+0x26>
 8001006:	4807      	ldr	r0, [pc, #28]	; (8001024 <Mount_USB+0x3c>)
 8001008:	f7ff ffd8 	bl	8000fbc <Send_Uart>
	else Send_Uart("USB mounted successfully...\n");
}
 800100c:	e002      	b.n	8001014 <Mount_USB+0x2c>
	else Send_Uart("USB mounted successfully...\n");
 800100e:	4806      	ldr	r0, [pc, #24]	; (8001028 <Mount_USB+0x40>)
 8001010:	f7ff ffd4 	bl	8000fbc <Send_Uart>
}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}
 8001018:	2000026c 	.word	0x2000026c
 800101c:	20000270 	.word	0x20000270
 8001020:	2000024c 	.word	0x2000024c
 8001024:	0800dcf8 	.word	0x0800dcf8
 8001028:	0800dd18 	.word	0x0800dd18

0800102c <Unmount_USB>:

void Unmount_USB (void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
	fresult = f_mount(NULL, USBHPath, 1);
 8001030:	2201      	movs	r2, #1
 8001032:	490a      	ldr	r1, [pc, #40]	; (800105c <Unmount_USB+0x30>)
 8001034:	2000      	movs	r0, #0
 8001036:	f00a fdb9 	bl	800bbac <f_mount>
 800103a:	4603      	mov	r3, r0
 800103c:	461a      	mov	r2, r3
 800103e:	4b08      	ldr	r3, [pc, #32]	; (8001060 <Unmount_USB+0x34>)
 8001040:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) Send_Uart ("USB UNMOUNTED successfully...\n\n\n");
 8001042:	4b07      	ldr	r3, [pc, #28]	; (8001060 <Unmount_USB+0x34>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d103      	bne.n	8001052 <Unmount_USB+0x26>
 800104a:	4806      	ldr	r0, [pc, #24]	; (8001064 <Unmount_USB+0x38>)
 800104c:	f7ff ffb6 	bl	8000fbc <Send_Uart>
	else Send_Uart("ERROR!!! in UNMOUNTING USB \n\n\n");
}
 8001050:	e002      	b.n	8001058 <Unmount_USB+0x2c>
	else Send_Uart("ERROR!!! in UNMOUNTING USB \n\n\n");
 8001052:	4805      	ldr	r0, [pc, #20]	; (8001068 <Unmount_USB+0x3c>)
 8001054:	f7ff ffb2 	bl	8000fbc <Send_Uart>
}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}
 800105c:	2000026c 	.word	0x2000026c
 8001060:	2000024c 	.word	0x2000024c
 8001064:	0800dd38 	.word	0x0800dd38
 8001068:	0800dd5c 	.word	0x0800dd5c

0800106c <Scan_USB>:

/* Start node to be scanned (***also used as work area***) */
FRESULT Scan_USB (char* pat)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b094      	sub	sp, #80	; 0x50
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
    DIR dir;
    UINT i;
    char *path = malloc(20*sizeof (char));
 8001074:	2014      	movs	r0, #20
 8001076:	f00c f9ad 	bl	800d3d4 <malloc>
 800107a:	4603      	mov	r3, r0
 800107c:	64fb      	str	r3, [r7, #76]	; 0x4c
    sprintf (path, "%s",pat);
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	4944      	ldr	r1, [pc, #272]	; (8001194 <Scan_USB+0x128>)
 8001082:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001084:	f00c fabc 	bl	800d600 <siprintf>

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 8001088:	f107 030c 	add.w	r3, r7, #12
 800108c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800108e:	4618      	mov	r0, r3
 8001090:	f00b f9da 	bl	800c448 <f_opendir>
 8001094:	4603      	mov	r3, r0
 8001096:	461a      	mov	r2, r3
 8001098:	4b3f      	ldr	r3, [pc, #252]	; (8001198 <Scan_USB+0x12c>)
 800109a:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 800109c:	4b3e      	ldr	r3, [pc, #248]	; (8001198 <Scan_USB+0x12c>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d16e      	bne.n	8001182 <Scan_USB+0x116>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &USBHfno);                   /* Read a directory item */
 80010a4:	f107 030c 	add.w	r3, r7, #12
 80010a8:	493c      	ldr	r1, [pc, #240]	; (800119c <Scan_USB+0x130>)
 80010aa:	4618      	mov	r0, r3
 80010ac:	f00b fa65 	bl	800c57a <f_readdir>
 80010b0:	4603      	mov	r3, r0
 80010b2:	461a      	mov	r2, r3
 80010b4:	4b38      	ldr	r3, [pc, #224]	; (8001198 <Scan_USB+0x12c>)
 80010b6:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || USBHfno.fname[0] == 0) break;  /* Break on error or end of dir */
 80010b8:	4b37      	ldr	r3, [pc, #220]	; (8001198 <Scan_USB+0x12c>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d15b      	bne.n	8001178 <Scan_USB+0x10c>
 80010c0:	4b36      	ldr	r3, [pc, #216]	; (800119c <Scan_USB+0x130>)
 80010c2:	7d9b      	ldrb	r3, [r3, #22]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d057      	beq.n	8001178 <Scan_USB+0x10c>
            if (USBHfno.fattrib & AM_DIR)     /* It is a directory */
 80010c8:	4b34      	ldr	r3, [pc, #208]	; (800119c <Scan_USB+0x130>)
 80010ca:	7a1b      	ldrb	r3, [r3, #8]
 80010cc:	f003 0310 	and.w	r3, r3, #16
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d03a      	beq.n	800114a <Scan_USB+0xde>
            {
            	if (!(strcmp ("SYSTEM~1", USBHfno.fname))) continue;
 80010d4:	4932      	ldr	r1, [pc, #200]	; (80011a0 <Scan_USB+0x134>)
 80010d6:	4833      	ldr	r0, [pc, #204]	; (80011a4 <Scan_USB+0x138>)
 80010d8:	f7ff f87a 	bl	80001d0 <strcmp>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d045      	beq.n	800116e <Scan_USB+0x102>
            	if (!(strcmp("System Volume Information", USBHfno.fname))) continue;
 80010e2:	492f      	ldr	r1, [pc, #188]	; (80011a0 <Scan_USB+0x134>)
 80010e4:	4830      	ldr	r0, [pc, #192]	; (80011a8 <Scan_USB+0x13c>)
 80010e6:	f7ff f873 	bl	80001d0 <strcmp>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d040      	beq.n	8001172 <Scan_USB+0x106>
            	char *buf = malloc(30*sizeof(char));
 80010f0:	201e      	movs	r0, #30
 80010f2:	f00c f96f 	bl	800d3d4 <malloc>
 80010f6:	4603      	mov	r3, r0
 80010f8:	647b      	str	r3, [r7, #68]	; 0x44
            	sprintf (buf, "Dir: %s\r\n", USBHfno.fname);
 80010fa:	4a29      	ldr	r2, [pc, #164]	; (80011a0 <Scan_USB+0x134>)
 80010fc:	492b      	ldr	r1, [pc, #172]	; (80011ac <Scan_USB+0x140>)
 80010fe:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001100:	f00c fa7e 	bl	800d600 <siprintf>
            	Send_Uart(buf);
 8001104:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001106:	f7ff ff59 	bl	8000fbc <Send_Uart>
            	free(buf);
 800110a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800110c:	f00c f96a 	bl	800d3e4 <free>
                i = strlen(path);
 8001110:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001112:	f7ff f867 	bl	80001e4 <strlen>
 8001116:	6438      	str	r0, [r7, #64]	; 0x40
                sprintf(&path[i], "/%s", USBHfno.fname);
 8001118:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800111a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800111c:	4413      	add	r3, r2
 800111e:	4a20      	ldr	r2, [pc, #128]	; (80011a0 <Scan_USB+0x134>)
 8001120:	4923      	ldr	r1, [pc, #140]	; (80011b0 <Scan_USB+0x144>)
 8001122:	4618      	mov	r0, r3
 8001124:	f00c fa6c 	bl	800d600 <siprintf>
                fresult = Scan_USB(path);                     /* Enter the directory */
 8001128:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800112a:	f7ff ff9f 	bl	800106c <Scan_USB>
 800112e:	4603      	mov	r3, r0
 8001130:	461a      	mov	r2, r3
 8001132:	4b19      	ldr	r3, [pc, #100]	; (8001198 <Scan_USB+0x12c>)
 8001134:	701a      	strb	r2, [r3, #0]
                if (fresult != FR_OK) break;
 8001136:	4b18      	ldr	r3, [pc, #96]	; (8001198 <Scan_USB+0x12c>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d11b      	bne.n	8001176 <Scan_USB+0x10a>
                path[i] = 0;
 800113e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001140:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001142:	4413      	add	r3, r2
 8001144:	2200      	movs	r2, #0
 8001146:	701a      	strb	r2, [r3, #0]
 8001148:	e7ac      	b.n	80010a4 <Scan_USB+0x38>
            }
            else
            {   /* It is a file. */
           	   char *buf = malloc(30*sizeof(char));
 800114a:	201e      	movs	r0, #30
 800114c:	f00c f942 	bl	800d3d4 <malloc>
 8001150:	4603      	mov	r3, r0
 8001152:	64bb      	str	r3, [r7, #72]	; 0x48
               sprintf(buf,"File: %s/%s\n", path, USBHfno.fname);
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <Scan_USB+0x134>)
 8001156:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001158:	4916      	ldr	r1, [pc, #88]	; (80011b4 <Scan_USB+0x148>)
 800115a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800115c:	f00c fa50 	bl	800d600 <siprintf>
               Send_Uart(buf);
 8001160:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001162:	f7ff ff2b 	bl	8000fbc <Send_Uart>
               free(buf);
 8001166:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001168:	f00c f93c 	bl	800d3e4 <free>
 800116c:	e79a      	b.n	80010a4 <Scan_USB+0x38>
            	if (!(strcmp ("SYSTEM~1", USBHfno.fname))) continue;
 800116e:	bf00      	nop
 8001170:	e798      	b.n	80010a4 <Scan_USB+0x38>
            	if (!(strcmp("System Volume Information", USBHfno.fname))) continue;
 8001172:	bf00      	nop
            fresult = f_readdir(&dir, &USBHfno);                   /* Read a directory item */
 8001174:	e796      	b.n	80010a4 <Scan_USB+0x38>
                if (fresult != FR_OK) break;
 8001176:	bf00      	nop
            }
        }
        f_closedir(&dir);
 8001178:	f107 030c 	add.w	r3, r7, #12
 800117c:	4618      	mov	r0, r3
 800117e:	f00b f9d6 	bl	800c52e <f_closedir>
    }
    free(path);
 8001182:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001184:	f00c f92e 	bl	800d3e4 <free>
    return fresult;
 8001188:	4b03      	ldr	r3, [pc, #12]	; (8001198 <Scan_USB+0x12c>)
 800118a:	781b      	ldrb	r3, [r3, #0]
}
 800118c:	4618      	mov	r0, r3
 800118e:	3750      	adds	r7, #80	; 0x50
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	0800dd7c 	.word	0x0800dd7c
 8001198:	2000024c 	.word	0x2000024c
 800119c:	20000134 	.word	0x20000134
 80011a0:	2000014a 	.word	0x2000014a
 80011a4:	0800dd80 	.word	0x0800dd80
 80011a8:	0800dd8c 	.word	0x0800dd8c
 80011ac:	0800dda8 	.word	0x0800dda8
 80011b0:	0800ddb4 	.word	0x0800ddb4
 80011b4:	0800ddb8 	.word	0x0800ddb8

080011b8 <Write_File>:




FRESULT Write_File (char *name, char *data)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b088      	sub	sp, #32
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]

	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &USBHfno);
 80011c2:	4955      	ldr	r1, [pc, #340]	; (8001318 <Write_File+0x160>)
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f00b fa15 	bl	800c5f4 <f_stat>
 80011ca:	4603      	mov	r3, r0
 80011cc:	461a      	mov	r2, r3
 80011ce:	4b53      	ldr	r3, [pc, #332]	; (800131c <Write_File+0x164>)
 80011d0:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80011d2:	4b52      	ldr	r3, [pc, #328]	; (800131c <Write_File+0x164>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d012      	beq.n	8001200 <Write_File+0x48>
	{
		char *buf = malloc(100*sizeof(char));
 80011da:	2064      	movs	r0, #100	; 0x64
 80011dc:	f00c f8fa 	bl	800d3d4 <malloc>
 80011e0:	4603      	mov	r3, r0
 80011e2:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	494e      	ldr	r1, [pc, #312]	; (8001320 <Write_File+0x168>)
 80011e8:	68b8      	ldr	r0, [r7, #8]
 80011ea:	f00c fa09 	bl	800d600 <siprintf>
		Send_Uart (buf);
 80011ee:	68b8      	ldr	r0, [r7, #8]
 80011f0:	f7ff fee4 	bl	8000fbc <Send_Uart>
	    free(buf);
 80011f4:	68b8      	ldr	r0, [r7, #8]
 80011f6:	f00c f8f5 	bl	800d3e4 <free>
	    return fresult;
 80011fa:	4b48      	ldr	r3, [pc, #288]	; (800131c <Write_File+0x164>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	e087      	b.n	8001310 <Write_File+0x158>
	}

	else
	{
	    /* Create a file with read write access and open it */
	    fresult = f_open(&USBHFile, name, FA_OPEN_EXISTING | FA_WRITE);
 8001200:	2202      	movs	r2, #2
 8001202:	6879      	ldr	r1, [r7, #4]
 8001204:	4847      	ldr	r0, [pc, #284]	; (8001324 <Write_File+0x16c>)
 8001206:	f00a fd17 	bl	800bc38 <f_open>
 800120a:	4603      	mov	r3, r0
 800120c:	461a      	mov	r2, r3
 800120e:	4b43      	ldr	r3, [pc, #268]	; (800131c <Write_File+0x164>)
 8001210:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8001212:	4b42      	ldr	r3, [pc, #264]	; (800131c <Write_File+0x164>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d015      	beq.n	8001246 <Write_File+0x8e>
	    {
	    	char *buf = malloc(100*sizeof(char));
 800121a:	2064      	movs	r0, #100	; 0x64
 800121c:	f00c f8da 	bl	800d3d4 <malloc>
 8001220:	4603      	mov	r3, r0
 8001222:	60fb      	str	r3, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 8001224:	4b3d      	ldr	r3, [pc, #244]	; (800131c <Write_File+0x164>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	461a      	mov	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	493e      	ldr	r1, [pc, #248]	; (8001328 <Write_File+0x170>)
 800122e:	68f8      	ldr	r0, [r7, #12]
 8001230:	f00c f9e6 	bl	800d600 <siprintf>
	    	Send_Uart(buf);
 8001234:	68f8      	ldr	r0, [r7, #12]
 8001236:	f7ff fec1 	bl	8000fbc <Send_Uart>
	        free(buf);
 800123a:	68f8      	ldr	r0, [r7, #12]
 800123c:	f00c f8d2 	bl	800d3e4 <free>
	        return fresult;
 8001240:	4b36      	ldr	r3, [pc, #216]	; (800131c <Write_File+0x164>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	e064      	b.n	8001310 <Write_File+0x158>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001246:	2064      	movs	r0, #100	; 0x64
 8001248:	f00c f8c4 	bl	800d3d4 <malloc>
 800124c:	4603      	mov	r3, r0
 800124e:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "Opening file-->  *%s*  To WRITE data in it\n", name);
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	4936      	ldr	r1, [pc, #216]	; (800132c <Write_File+0x174>)
 8001254:	69f8      	ldr	r0, [r7, #28]
 8001256:	f00c f9d3 	bl	800d600 <siprintf>
	    	Send_Uart(buf);
 800125a:	69f8      	ldr	r0, [r7, #28]
 800125c:	f7ff feae 	bl	8000fbc <Send_Uart>
	        free(buf);
 8001260:	69f8      	ldr	r0, [r7, #28]
 8001262:	f00c f8bf 	bl	800d3e4 <free>

	    	fresult = f_write(&USBHFile, data, strlen(data), &bw);
 8001266:	6838      	ldr	r0, [r7, #0]
 8001268:	f7fe ffbc 	bl	80001e4 <strlen>
 800126c:	4602      	mov	r2, r0
 800126e:	4b30      	ldr	r3, [pc, #192]	; (8001330 <Write_File+0x178>)
 8001270:	6839      	ldr	r1, [r7, #0]
 8001272:	482c      	ldr	r0, [pc, #176]	; (8001324 <Write_File+0x16c>)
 8001274:	f00a feac 	bl	800bfd0 <f_write>
 8001278:	4603      	mov	r3, r0
 800127a:	461a      	mov	r2, r3
 800127c:	4b27      	ldr	r3, [pc, #156]	; (800131c <Write_File+0x164>)
 800127e:	701a      	strb	r2, [r3, #0]
	    	if (fresult != FR_OK)
 8001280:	4b26      	ldr	r3, [pc, #152]	; (800131c <Write_File+0x164>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d012      	beq.n	80012ae <Write_File+0xf6>
	    	{
	    		char *buf = malloc(100*sizeof(char));
 8001288:	2064      	movs	r0, #100	; 0x64
 800128a:	f00c f8a3 	bl	800d3d4 <malloc>
 800128e:	4603      	mov	r3, r0
 8001290:	61bb      	str	r3, [r7, #24]
	    		sprintf (buf, "ERROR!!! No. %d while writing to the FILE *%s*\n\n", fresult, name);
 8001292:	4b22      	ldr	r3, [pc, #136]	; (800131c <Write_File+0x164>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	461a      	mov	r2, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4926      	ldr	r1, [pc, #152]	; (8001334 <Write_File+0x17c>)
 800129c:	69b8      	ldr	r0, [r7, #24]
 800129e:	f00c f9af 	bl	800d600 <siprintf>
	    		Send_Uart(buf);
 80012a2:	69b8      	ldr	r0, [r7, #24]
 80012a4:	f7ff fe8a 	bl	8000fbc <Send_Uart>
	    		free(buf);
 80012a8:	69b8      	ldr	r0, [r7, #24]
 80012aa:	f00c f89b 	bl	800d3e4 <free>
	    	}

	    	/* Close file */
	    	fresult = f_close(&USBHFile);
 80012ae:	481d      	ldr	r0, [pc, #116]	; (8001324 <Write_File+0x16c>)
 80012b0:	f00b f8a0 	bl	800c3f4 <f_close>
 80012b4:	4603      	mov	r3, r0
 80012b6:	461a      	mov	r2, r3
 80012b8:	4b18      	ldr	r3, [pc, #96]	; (800131c <Write_File+0x164>)
 80012ba:	701a      	strb	r2, [r3, #0]
	    	if (fresult != FR_OK)
 80012bc:	4b17      	ldr	r3, [pc, #92]	; (800131c <Write_File+0x164>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d013      	beq.n	80012ec <Write_File+0x134>
	    	{
	    		char *buf = malloc(100*sizeof(char));
 80012c4:	2064      	movs	r0, #100	; 0x64
 80012c6:	f00c f885 	bl	800d3d4 <malloc>
 80012ca:	4603      	mov	r3, r0
 80012cc:	613b      	str	r3, [r7, #16]
	    		sprintf (buf, "ERROR!!! No. %d in closing file *%s* after writing it\n\n", fresult, name);
 80012ce:	4b13      	ldr	r3, [pc, #76]	; (800131c <Write_File+0x164>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	461a      	mov	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4918      	ldr	r1, [pc, #96]	; (8001338 <Write_File+0x180>)
 80012d8:	6938      	ldr	r0, [r7, #16]
 80012da:	f00c f991 	bl	800d600 <siprintf>
	    		Send_Uart(buf);
 80012de:	6938      	ldr	r0, [r7, #16]
 80012e0:	f7ff fe6c 	bl	8000fbc <Send_Uart>
	    		free(buf);
 80012e4:	6938      	ldr	r0, [r7, #16]
 80012e6:	f00c f87d 	bl	800d3e4 <free>
 80012ea:	e00f      	b.n	800130c <Write_File+0x154>
	    	}
	    	else
	    	{
	    		char *buf = malloc(100*sizeof(char));
 80012ec:	2064      	movs	r0, #100	; 0x64
 80012ee:	f00c f871 	bl	800d3d4 <malloc>
 80012f2:	4603      	mov	r3, r0
 80012f4:	617b      	str	r3, [r7, #20]
	    		sprintf (buf, "File *%s* is WRITTEN and CLOSED successfully\n\n", name);
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	4910      	ldr	r1, [pc, #64]	; (800133c <Write_File+0x184>)
 80012fa:	6978      	ldr	r0, [r7, #20]
 80012fc:	f00c f980 	bl	800d600 <siprintf>
	    		Send_Uart(buf);
 8001300:	6978      	ldr	r0, [r7, #20]
 8001302:	f7ff fe5b 	bl	8000fbc <Send_Uart>
	    		free(buf);
 8001306:	6978      	ldr	r0, [r7, #20]
 8001308:	f00c f86c 	bl	800d3e4 <free>
	    	}
	    }
	    return fresult;
 800130c:	4b03      	ldr	r3, [pc, #12]	; (800131c <Write_File+0x164>)
 800130e:	781b      	ldrb	r3, [r3, #0]
	}
}
 8001310:	4618      	mov	r0, r3
 8001312:	3720      	adds	r7, #32
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20000134 	.word	0x20000134
 800131c:	2000024c 	.word	0x2000024c
 8001320:	0800ddcc 	.word	0x0800ddcc
 8001324:	200012a8 	.word	0x200012a8
 8001328:	0800ddec 	.word	0x0800ddec
 800132c:	0800de14 	.word	0x0800de14
 8001330:	20000250 	.word	0x20000250
 8001334:	0800de40 	.word	0x0800de40
 8001338:	0800de74 	.word	0x0800de74
 800133c:	0800deac 	.word	0x0800deac

08001340 <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b088      	sub	sp, #32
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &USBHfno);
 8001348:	4943      	ldr	r1, [pc, #268]	; (8001458 <Create_File+0x118>)
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f00b f952 	bl	800c5f4 <f_stat>
 8001350:	4603      	mov	r3, r0
 8001352:	461a      	mov	r2, r3
 8001354:	4b41      	ldr	r3, [pc, #260]	; (800145c <Create_File+0x11c>)
 8001356:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8001358:	4b40      	ldr	r3, [pc, #256]	; (800145c <Create_File+0x11c>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d112      	bne.n	8001386 <Create_File+0x46>
	{
		char *buf = malloc(100*sizeof(char));
 8001360:	2064      	movs	r0, #100	; 0x64
 8001362:	f00c f837 	bl	800d3d4 <malloc>
 8001366:	4603      	mov	r3, r0
 8001368:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	493c      	ldr	r1, [pc, #240]	; (8001460 <Create_File+0x120>)
 800136e:	68f8      	ldr	r0, [r7, #12]
 8001370:	f00c f946 	bl	800d600 <siprintf>
		Send_Uart(buf);
 8001374:	68f8      	ldr	r0, [r7, #12]
 8001376:	f7ff fe21 	bl	8000fbc <Send_Uart>
		free(buf);
 800137a:	68f8      	ldr	r0, [r7, #12]
 800137c:	f00c f832 	bl	800d3e4 <free>
	    return fresult;
 8001380:	4b36      	ldr	r3, [pc, #216]	; (800145c <Create_File+0x11c>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	e063      	b.n	800144e <Create_File+0x10e>
	}
	else
	{
		fresult = f_open(&USBHFile, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8001386:	220b      	movs	r2, #11
 8001388:	6879      	ldr	r1, [r7, #4]
 800138a:	4836      	ldr	r0, [pc, #216]	; (8001464 <Create_File+0x124>)
 800138c:	f00a fc54 	bl	800bc38 <f_open>
 8001390:	4603      	mov	r3, r0
 8001392:	461a      	mov	r2, r3
 8001394:	4b31      	ldr	r3, [pc, #196]	; (800145c <Create_File+0x11c>)
 8001396:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001398:	4b30      	ldr	r3, [pc, #192]	; (800145c <Create_File+0x11c>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d015      	beq.n	80013cc <Create_File+0x8c>
		{
			char *buf = malloc(100*sizeof(char));
 80013a0:	2064      	movs	r0, #100	; 0x64
 80013a2:	f00c f817 	bl	800d3d4 <malloc>
 80013a6:	4603      	mov	r3, r0
 80013a8:	613b      	str	r3, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 80013aa:	4b2c      	ldr	r3, [pc, #176]	; (800145c <Create_File+0x11c>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	461a      	mov	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	492d      	ldr	r1, [pc, #180]	; (8001468 <Create_File+0x128>)
 80013b4:	6938      	ldr	r0, [r7, #16]
 80013b6:	f00c f923 	bl	800d600 <siprintf>
			Send_Uart(buf);
 80013ba:	6938      	ldr	r0, [r7, #16]
 80013bc:	f7ff fdfe 	bl	8000fbc <Send_Uart>
			free(buf);
 80013c0:	6938      	ldr	r0, [r7, #16]
 80013c2:	f00c f80f 	bl	800d3e4 <free>
		    return fresult;
 80013c6:	4b25      	ldr	r3, [pc, #148]	; (800145c <Create_File+0x11c>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	e040      	b.n	800144e <Create_File+0x10e>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 80013cc:	2064      	movs	r0, #100	; 0x64
 80013ce:	f00c f801 	bl	800d3d4 <malloc>
 80013d2:	4603      	mov	r3, r0
 80013d4:	61fb      	str	r3, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	4924      	ldr	r1, [pc, #144]	; (800146c <Create_File+0x12c>)
 80013da:	69f8      	ldr	r0, [r7, #28]
 80013dc:	f00c f910 	bl	800d600 <siprintf>
			Send_Uart(buf);
 80013e0:	69f8      	ldr	r0, [r7, #28]
 80013e2:	f7ff fdeb 	bl	8000fbc <Send_Uart>
			free(buf);
 80013e6:	69f8      	ldr	r0, [r7, #28]
 80013e8:	f00b fffc 	bl	800d3e4 <free>
		}

		fresult = f_close(&USBHFile);
 80013ec:	481d      	ldr	r0, [pc, #116]	; (8001464 <Create_File+0x124>)
 80013ee:	f00b f801 	bl	800c3f4 <f_close>
 80013f2:	4603      	mov	r3, r0
 80013f4:	461a      	mov	r2, r3
 80013f6:	4b19      	ldr	r3, [pc, #100]	; (800145c <Create_File+0x11c>)
 80013f8:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80013fa:	4b18      	ldr	r3, [pc, #96]	; (800145c <Create_File+0x11c>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d013      	beq.n	800142a <Create_File+0xea>
		{
			char *buf = malloc(100*sizeof(char));
 8001402:	2064      	movs	r0, #100	; 0x64
 8001404:	f00b ffe6 	bl	800d3d4 <malloc>
 8001408:	4603      	mov	r3, r0
 800140a:	617b      	str	r3, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 800140c:	4b13      	ldr	r3, [pc, #76]	; (800145c <Create_File+0x11c>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	461a      	mov	r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4916      	ldr	r1, [pc, #88]	; (8001470 <Create_File+0x130>)
 8001416:	6978      	ldr	r0, [r7, #20]
 8001418:	f00c f8f2 	bl	800d600 <siprintf>
			Send_Uart(buf);
 800141c:	6978      	ldr	r0, [r7, #20]
 800141e:	f7ff fdcd 	bl	8000fbc <Send_Uart>
			free(buf);
 8001422:	6978      	ldr	r0, [r7, #20]
 8001424:	f00b ffde 	bl	800d3e4 <free>
 8001428:	e00f      	b.n	800144a <Create_File+0x10a>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 800142a:	2064      	movs	r0, #100	; 0x64
 800142c:	f00b ffd2 	bl	800d3d4 <malloc>
 8001430:	4603      	mov	r3, r0
 8001432:	61bb      	str	r3, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n\n", name);
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	490f      	ldr	r1, [pc, #60]	; (8001474 <Create_File+0x134>)
 8001438:	69b8      	ldr	r0, [r7, #24]
 800143a:	f00c f8e1 	bl	800d600 <siprintf>
			Send_Uart(buf);
 800143e:	69b8      	ldr	r0, [r7, #24]
 8001440:	f7ff fdbc 	bl	8000fbc <Send_Uart>
			free(buf);
 8001444:	69b8      	ldr	r0, [r7, #24]
 8001446:	f00b ffcd 	bl	800d3e4 <free>
		}
	}
    return fresult;
 800144a:	4b04      	ldr	r3, [pc, #16]	; (800145c <Create_File+0x11c>)
 800144c:	781b      	ldrb	r3, [r3, #0]
}
 800144e:	4618      	mov	r0, r3
 8001450:	3720      	adds	r7, #32
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000134 	.word	0x20000134
 800145c:	2000024c 	.word	0x2000024c
 8001460:	0800dfa0 	.word	0x0800dfa0
 8001464:	200012a8 	.word	0x200012a8
 8001468:	0800dfd8 	.word	0x0800dfd8
 800146c:	0800e000 	.word	0x0800e000
 8001470:	0800e040 	.word	0x0800e040
 8001474:	0800df80 	.word	0x0800df80

08001478 <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08a      	sub	sp, #40	; 0x28
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &USBHfno);
 8001482:	495e      	ldr	r1, [pc, #376]	; (80015fc <Update_File+0x184>)
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f00b f8b5 	bl	800c5f4 <f_stat>
 800148a:	4603      	mov	r3, r0
 800148c:	461a      	mov	r2, r3
 800148e:	4b5c      	ldr	r3, [pc, #368]	; (8001600 <Update_File+0x188>)
 8001490:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8001492:	4b5b      	ldr	r3, [pc, #364]	; (8001600 <Update_File+0x188>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d012      	beq.n	80014c0 <Update_File+0x48>
	{
		char *buf = malloc(100*sizeof(char));
 800149a:	2064      	movs	r0, #100	; 0x64
 800149c:	f00b ff9a 	bl	800d3d4 <malloc>
 80014a0:	4603      	mov	r3, r0
 80014a2:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	4957      	ldr	r1, [pc, #348]	; (8001604 <Update_File+0x18c>)
 80014a8:	68f8      	ldr	r0, [r7, #12]
 80014aa:	f00c f8a9 	bl	800d600 <siprintf>
		Send_Uart (buf);
 80014ae:	68f8      	ldr	r0, [r7, #12]
 80014b0:	f7ff fd84 	bl	8000fbc <Send_Uart>
		free(buf);
 80014b4:	68f8      	ldr	r0, [r7, #12]
 80014b6:	f00b ff95 	bl	800d3e4 <free>
	    return fresult;
 80014ba:	4b51      	ldr	r3, [pc, #324]	; (8001600 <Update_File+0x188>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	e098      	b.n	80015f2 <Update_File+0x17a>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&USBHFile, name, FA_OPEN_APPEND | FA_WRITE);
 80014c0:	2232      	movs	r2, #50	; 0x32
 80014c2:	6879      	ldr	r1, [r7, #4]
 80014c4:	4850      	ldr	r0, [pc, #320]	; (8001608 <Update_File+0x190>)
 80014c6:	f00a fbb7 	bl	800bc38 <f_open>
 80014ca:	4603      	mov	r3, r0
 80014cc:	461a      	mov	r2, r3
 80014ce:	4b4c      	ldr	r3, [pc, #304]	; (8001600 <Update_File+0x188>)
 80014d0:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80014d2:	4b4b      	ldr	r3, [pc, #300]	; (8001600 <Update_File+0x188>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d015      	beq.n	8001506 <Update_File+0x8e>
	    {
	    	char *buf = malloc(100*sizeof(char));
 80014da:	2064      	movs	r0, #100	; 0x64
 80014dc:	f00b ff7a 	bl	800d3d4 <malloc>
 80014e0:	4603      	mov	r3, r0
 80014e2:	613b      	str	r3, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 80014e4:	4b46      	ldr	r3, [pc, #280]	; (8001600 <Update_File+0x188>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	461a      	mov	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4947      	ldr	r1, [pc, #284]	; (800160c <Update_File+0x194>)
 80014ee:	6938      	ldr	r0, [r7, #16]
 80014f0:	f00c f886 	bl	800d600 <siprintf>
	    	Send_Uart(buf);
 80014f4:	6938      	ldr	r0, [r7, #16]
 80014f6:	f7ff fd61 	bl	8000fbc <Send_Uart>
	        free(buf);
 80014fa:	6938      	ldr	r0, [r7, #16]
 80014fc:	f00b ff72 	bl	800d3e4 <free>
	        return fresult;
 8001500:	4b3f      	ldr	r3, [pc, #252]	; (8001600 <Update_File+0x188>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	e075      	b.n	80015f2 <Update_File+0x17a>
	    }

    	char *buf = malloc(100*sizeof(char));
 8001506:	2064      	movs	r0, #100	; 0x64
 8001508:	f00b ff64 	bl	800d3d4 <malloc>
 800150c:	4603      	mov	r3, r0
 800150e:	627b      	str	r3, [r7, #36]	; 0x24
    	sprintf (buf, "Opening file-->  *%s*  To UPDATE data in it\n", name);
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	493f      	ldr	r1, [pc, #252]	; (8001610 <Update_File+0x198>)
 8001514:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001516:	f00c f873 	bl	800d600 <siprintf>
    	Send_Uart(buf);
 800151a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800151c:	f7ff fd4e 	bl	8000fbc <Send_Uart>
        free(buf);
 8001520:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001522:	f00b ff5f 	bl	800d3e4 <free>

	    /* Writing text */
	    fresult = f_write(&USBHFile, data, strlen (data), &bw);
 8001526:	6838      	ldr	r0, [r7, #0]
 8001528:	f7fe fe5c 	bl	80001e4 <strlen>
 800152c:	4602      	mov	r2, r0
 800152e:	4b39      	ldr	r3, [pc, #228]	; (8001614 <Update_File+0x19c>)
 8001530:	6839      	ldr	r1, [r7, #0]
 8001532:	4835      	ldr	r0, [pc, #212]	; (8001608 <Update_File+0x190>)
 8001534:	f00a fd4c 	bl	800bfd0 <f_write>
 8001538:	4603      	mov	r3, r0
 800153a:	461a      	mov	r2, r3
 800153c:	4b30      	ldr	r3, [pc, #192]	; (8001600 <Update_File+0x188>)
 800153e:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8001540:	4b2f      	ldr	r3, [pc, #188]	; (8001600 <Update_File+0x188>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d013      	beq.n	8001570 <Update_File+0xf8>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001548:	2064      	movs	r0, #100	; 0x64
 800154a:	f00b ff43 	bl	800d3d4 <malloc>
 800154e:	4603      	mov	r3, r0
 8001550:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n\n", fresult, name);
 8001552:	4b2b      	ldr	r3, [pc, #172]	; (8001600 <Update_File+0x188>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	461a      	mov	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	492f      	ldr	r1, [pc, #188]	; (8001618 <Update_File+0x1a0>)
 800155c:	69f8      	ldr	r0, [r7, #28]
 800155e:	f00c f84f 	bl	800d600 <siprintf>
	    	Send_Uart(buf);
 8001562:	69f8      	ldr	r0, [r7, #28]
 8001564:	f7ff fd2a 	bl	8000fbc <Send_Uart>
	    	free(buf);
 8001568:	69f8      	ldr	r0, [r7, #28]
 800156a:	f00b ff3b 	bl	800d3e4 <free>
 800156e:	e00f      	b.n	8001590 <Update_File+0x118>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001570:	2064      	movs	r0, #100	; 0x64
 8001572:	f00b ff2f 	bl	800d3d4 <malloc>
 8001576:	4603      	mov	r3, r0
 8001578:	623b      	str	r3, [r7, #32]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	4927      	ldr	r1, [pc, #156]	; (800161c <Update_File+0x1a4>)
 800157e:	6a38      	ldr	r0, [r7, #32]
 8001580:	f00c f83e 	bl	800d600 <siprintf>
	    	Send_Uart(buf);
 8001584:	6a38      	ldr	r0, [r7, #32]
 8001586:	f7ff fd19 	bl	8000fbc <Send_Uart>
	    	free(buf);
 800158a:	6a38      	ldr	r0, [r7, #32]
 800158c:	f00b ff2a 	bl	800d3e4 <free>
	    }

	    /* Close file */
	    fresult = f_close(&USBHFile);
 8001590:	481d      	ldr	r0, [pc, #116]	; (8001608 <Update_File+0x190>)
 8001592:	f00a ff2f 	bl	800c3f4 <f_close>
 8001596:	4603      	mov	r3, r0
 8001598:	461a      	mov	r2, r3
 800159a:	4b19      	ldr	r3, [pc, #100]	; (8001600 <Update_File+0x188>)
 800159c:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 800159e:	4b18      	ldr	r3, [pc, #96]	; (8001600 <Update_File+0x188>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d013      	beq.n	80015ce <Update_File+0x156>
	    {
	    	char *buf = malloc(100*sizeof(char));
 80015a6:	2064      	movs	r0, #100	; 0x64
 80015a8:	f00b ff14 	bl	800d3d4 <malloc>
 80015ac:	4603      	mov	r3, r0
 80015ae:	617b      	str	r3, [r7, #20]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 80015b0:	4b13      	ldr	r3, [pc, #76]	; (8001600 <Update_File+0x188>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	461a      	mov	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4919      	ldr	r1, [pc, #100]	; (8001620 <Update_File+0x1a8>)
 80015ba:	6978      	ldr	r0, [r7, #20]
 80015bc:	f00c f820 	bl	800d600 <siprintf>
	    	Send_Uart(buf);
 80015c0:	6978      	ldr	r0, [r7, #20]
 80015c2:	f7ff fcfb 	bl	8000fbc <Send_Uart>
	    	free(buf);
 80015c6:	6978      	ldr	r0, [r7, #20]
 80015c8:	f00b ff0c 	bl	800d3e4 <free>
 80015cc:	e00f      	b.n	80015ee <Update_File+0x176>
	    }
	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 80015ce:	2064      	movs	r0, #100	; 0x64
 80015d0:	f00b ff00 	bl	800d3d4 <malloc>
 80015d4:	4603      	mov	r3, r0
 80015d6:	61bb      	str	r3, [r7, #24]
	    	sprintf (buf, "File *%s* CLOSED successfully\n\n", name);
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	4912      	ldr	r1, [pc, #72]	; (8001624 <Update_File+0x1ac>)
 80015dc:	69b8      	ldr	r0, [r7, #24]
 80015de:	f00c f80f 	bl	800d600 <siprintf>
	    	Send_Uart(buf);
 80015e2:	69b8      	ldr	r0, [r7, #24]
 80015e4:	f7ff fcea 	bl	8000fbc <Send_Uart>
	    	free(buf);
 80015e8:	69b8      	ldr	r0, [r7, #24]
 80015ea:	f00b fefb 	bl	800d3e4 <free>
	     }
	}
    return fresult;
 80015ee:	4b04      	ldr	r3, [pc, #16]	; (8001600 <Update_File+0x188>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3728      	adds	r7, #40	; 0x28
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000134 	.word	0x20000134
 8001600:	2000024c 	.word	0x2000024c
 8001604:	0800ddcc 	.word	0x0800ddcc
 8001608:	200012a8 	.word	0x200012a8
 800160c:	0800ddec 	.word	0x0800ddec
 8001610:	0800e064 	.word	0x0800e064
 8001614:	20000250 	.word	0x20000250
 8001618:	0800e094 	.word	0x0800e094
 800161c:	0800e0bc 	.word	0x0800e0bc
 8001620:	0800df58 	.word	0x0800df58
 8001624:	0800df80 	.word	0x0800df80

08001628 <Create_Dir>:
	}
	return fresult;
}

FRESULT Create_Dir (char *name)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
    fresult = f_mkdir(name);
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f00b f8cd 	bl	800c7d0 <f_mkdir>
 8001636:	4603      	mov	r3, r0
 8001638:	461a      	mov	r2, r3
 800163a:	4b18      	ldr	r3, [pc, #96]	; (800169c <Create_Dir+0x74>)
 800163c:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 800163e:	4b17      	ldr	r3, [pc, #92]	; (800169c <Create_Dir+0x74>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d110      	bne.n	8001668 <Create_Dir+0x40>
    {
    	char *buf = malloc(100*sizeof(char));
 8001646:	2064      	movs	r0, #100	; 0x64
 8001648:	f00b fec4 	bl	800d3d4 <malloc>
 800164c:	4603      	mov	r3, r0
 800164e:	60bb      	str	r3, [r7, #8]
    	sprintf (buf, "*%s* has been created successfully\n\n", name);
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	4913      	ldr	r1, [pc, #76]	; (80016a0 <Create_Dir+0x78>)
 8001654:	68b8      	ldr	r0, [r7, #8]
 8001656:	f00b ffd3 	bl	800d600 <siprintf>
    	Send_Uart (buf);
 800165a:	68b8      	ldr	r0, [r7, #8]
 800165c:	f7ff fcae 	bl	8000fbc <Send_Uart>
    	free(buf);
 8001660:	68b8      	ldr	r0, [r7, #8]
 8001662:	f00b febf 	bl	800d3e4 <free>
 8001666:	e012      	b.n	800168e <Create_Dir+0x66>
    }
    else
    {
    	char *buf = malloc(100*sizeof(char));
 8001668:	2064      	movs	r0, #100	; 0x64
 800166a:	f00b feb3 	bl	800d3d4 <malloc>
 800166e:	4603      	mov	r3, r0
 8001670:	60fb      	str	r3, [r7, #12]
    	sprintf (buf, "ERROR No. %d in creating directory *%s*\n\n", fresult,name);
 8001672:	4b0a      	ldr	r3, [pc, #40]	; (800169c <Create_Dir+0x74>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	461a      	mov	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	490a      	ldr	r1, [pc, #40]	; (80016a4 <Create_Dir+0x7c>)
 800167c:	68f8      	ldr	r0, [r7, #12]
 800167e:	f00b ffbf 	bl	800d600 <siprintf>
    	Send_Uart(buf);
 8001682:	68f8      	ldr	r0, [r7, #12]
 8001684:	f7ff fc9a 	bl	8000fbc <Send_Uart>
    	free(buf);
 8001688:	68f8      	ldr	r0, [r7, #12]
 800168a:	f00b feab 	bl	800d3e4 <free>
    }
    return fresult;
 800168e:	4b03      	ldr	r3, [pc, #12]	; (800169c <Create_Dir+0x74>)
 8001690:	781b      	ldrb	r3, [r3, #0]
}
 8001692:	4618      	mov	r0, r3
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	2000024c 	.word	0x2000024c
 80016a0:	0800e120 	.word	0x0800e120
 80016a4:	0800e148 	.word	0x0800e148

080016a8 <Check_USB_Details>:

void Check_USB_Details (void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
    /* Check free space */
    f_getfree("", &fre_clust, &pUSBHFatFS);
 80016ae:	4a30      	ldr	r2, [pc, #192]	; (8001770 <Check_USB_Details+0xc8>)
 80016b0:	4930      	ldr	r1, [pc, #192]	; (8001774 <Check_USB_Details+0xcc>)
 80016b2:	4831      	ldr	r0, [pc, #196]	; (8001778 <Check_USB_Details+0xd0>)
 80016b4:	f00a ffd7 	bl	800c666 <f_getfree>

    total = (uint32_t)((pUSBHFatFS->n_fatent - 2) * pUSBHFatFS->csize * 0.5);
 80016b8:	4b2d      	ldr	r3, [pc, #180]	; (8001770 <Check_USB_Details+0xc8>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	69db      	ldr	r3, [r3, #28]
 80016be:	3b02      	subs	r3, #2
 80016c0:	4a2b      	ldr	r2, [pc, #172]	; (8001770 <Check_USB_Details+0xc8>)
 80016c2:	6812      	ldr	r2, [r2, #0]
 80016c4:	8952      	ldrh	r2, [r2, #10]
 80016c6:	fb02 f303 	mul.w	r3, r2, r3
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff f854 	bl	8000778 <__aeabi_ui2d>
 80016d0:	f04f 0200 	mov.w	r2, #0
 80016d4:	4b29      	ldr	r3, [pc, #164]	; (800177c <Check_USB_Details+0xd4>)
 80016d6:	f7fe fde3 	bl	80002a0 <__aeabi_dmul>
 80016da:	4602      	mov	r2, r0
 80016dc:	460b      	mov	r3, r1
 80016de:	4610      	mov	r0, r2
 80016e0:	4619      	mov	r1, r3
 80016e2:	f7ff f8c3 	bl	800086c <__aeabi_d2uiz>
 80016e6:	4603      	mov	r3, r0
 80016e8:	4a25      	ldr	r2, [pc, #148]	; (8001780 <Check_USB_Details+0xd8>)
 80016ea:	6013      	str	r3, [r2, #0]
    char *buf = malloc(30*sizeof(char));
 80016ec:	201e      	movs	r0, #30
 80016ee:	f00b fe71 	bl	800d3d4 <malloc>
 80016f2:	4603      	mov	r3, r0
 80016f4:	607b      	str	r3, [r7, #4]
    sprintf (buf, "USB  Total Size: \t%lu\n",total);
 80016f6:	4b22      	ldr	r3, [pc, #136]	; (8001780 <Check_USB_Details+0xd8>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	461a      	mov	r2, r3
 80016fc:	4921      	ldr	r1, [pc, #132]	; (8001784 <Check_USB_Details+0xdc>)
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f00b ff7e 	bl	800d600 <siprintf>
    Send_Uart(buf);
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7ff fc59 	bl	8000fbc <Send_Uart>
    free(buf);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f00b fe6a 	bl	800d3e4 <free>
    free_space = (uint32_t)(fre_clust * pUSBHFatFS->csize * 0.5);
 8001710:	4b17      	ldr	r3, [pc, #92]	; (8001770 <Check_USB_Details+0xc8>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	895b      	ldrh	r3, [r3, #10]
 8001716:	461a      	mov	r2, r3
 8001718:	4b16      	ldr	r3, [pc, #88]	; (8001774 <Check_USB_Details+0xcc>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	fb02 f303 	mul.w	r3, r2, r3
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff f829 	bl	8000778 <__aeabi_ui2d>
 8001726:	f04f 0200 	mov.w	r2, #0
 800172a:	4b14      	ldr	r3, [pc, #80]	; (800177c <Check_USB_Details+0xd4>)
 800172c:	f7fe fdb8 	bl	80002a0 <__aeabi_dmul>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4610      	mov	r0, r2
 8001736:	4619      	mov	r1, r3
 8001738:	f7ff f898 	bl	800086c <__aeabi_d2uiz>
 800173c:	4603      	mov	r3, r0
 800173e:	4a12      	ldr	r2, [pc, #72]	; (8001788 <Check_USB_Details+0xe0>)
 8001740:	6013      	str	r3, [r2, #0]
    buf = malloc(30*sizeof(char));
 8001742:	201e      	movs	r0, #30
 8001744:	f00b fe46 	bl	800d3d4 <malloc>
 8001748:	4603      	mov	r3, r0
 800174a:	607b      	str	r3, [r7, #4]
    sprintf (buf, "USB Free Space: \t%lu\n",free_space);
 800174c:	4b0e      	ldr	r3, [pc, #56]	; (8001788 <Check_USB_Details+0xe0>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	461a      	mov	r2, r3
 8001752:	490e      	ldr	r1, [pc, #56]	; (800178c <Check_USB_Details+0xe4>)
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f00b ff53 	bl	800d600 <siprintf>
    Send_Uart(buf);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f7ff fc2e 	bl	8000fbc <Send_Uart>
    free(buf);
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f00b fe3f 	bl	800d3e4 <free>
}
 8001766:	bf00      	nop
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	20000254 	.word	0x20000254
 8001774:	20000258 	.word	0x20000258
 8001778:	0800e174 	.word	0x0800e174
 800177c:	3fe00000 	.word	0x3fe00000
 8001780:	2000025c 	.word	0x2000025c
 8001784:	0800e178 	.word	0x0800e178
 8001788:	20000260 	.word	0x20000260
 800178c:	0800e190 	.word	0x0800e190

08001790 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001796:	2300      	movs	r3, #0
 8001798:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800179a:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <HAL_Init+0x3c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a0b      	ldr	r2, [pc, #44]	; (80017cc <HAL_Init+0x3c>)
 80017a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017a4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017a6:	2003      	movs	r0, #3
 80017a8:	f000 f962 	bl	8001a70 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017ac:	2000      	movs	r0, #0
 80017ae:	f000 f80f 	bl	80017d0 <HAL_InitTick>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d002      	beq.n	80017be <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	71fb      	strb	r3, [r7, #7]
 80017bc:	e001      	b.n	80017c2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017be:	f7ff fad5 	bl	8000d6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017c2:	79fb      	ldrb	r3, [r7, #7]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40022000 	.word	0x40022000

080017d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017d8:	2300      	movs	r3, #0
 80017da:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80017dc:	4b17      	ldr	r3, [pc, #92]	; (800183c <HAL_InitTick+0x6c>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d023      	beq.n	800182c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80017e4:	4b16      	ldr	r3, [pc, #88]	; (8001840 <HAL_InitTick+0x70>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	4b14      	ldr	r3, [pc, #80]	; (800183c <HAL_InitTick+0x6c>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	4619      	mov	r1, r3
 80017ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017fa:	4618      	mov	r0, r3
 80017fc:	f000 f96d 	bl	8001ada <HAL_SYSTICK_Config>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d10f      	bne.n	8001826 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2b0f      	cmp	r3, #15
 800180a:	d809      	bhi.n	8001820 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800180c:	2200      	movs	r2, #0
 800180e:	6879      	ldr	r1, [r7, #4]
 8001810:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001814:	f000 f937 	bl	8001a86 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001818:	4a0a      	ldr	r2, [pc, #40]	; (8001844 <HAL_InitTick+0x74>)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6013      	str	r3, [r2, #0]
 800181e:	e007      	b.n	8001830 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	73fb      	strb	r3, [r7, #15]
 8001824:	e004      	b.n	8001830 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	73fb      	strb	r3, [r7, #15]
 800182a:	e001      	b.n	8001830 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001830:	7bfb      	ldrb	r3, [r7, #15]
}
 8001832:	4618      	mov	r0, r3
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20000008 	.word	0x20000008
 8001840:	20000000 	.word	0x20000000
 8001844:	20000004 	.word	0x20000004

08001848 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800184c:	4b06      	ldr	r3, [pc, #24]	; (8001868 <HAL_IncTick+0x20>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	461a      	mov	r2, r3
 8001852:	4b06      	ldr	r3, [pc, #24]	; (800186c <HAL_IncTick+0x24>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4413      	add	r3, r2
 8001858:	4a04      	ldr	r2, [pc, #16]	; (800186c <HAL_IncTick+0x24>)
 800185a:	6013      	str	r3, [r2, #0]
}
 800185c:	bf00      	nop
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	20000008 	.word	0x20000008
 800186c:	20000264 	.word	0x20000264

08001870 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  return uwTick;
 8001874:	4b03      	ldr	r3, [pc, #12]	; (8001884 <HAL_GetTick+0x14>)
 8001876:	681b      	ldr	r3, [r3, #0]
}
 8001878:	4618      	mov	r0, r3
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	20000264 	.word	0x20000264

08001888 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001890:	f7ff ffee 	bl	8001870 <HAL_GetTick>
 8001894:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018a0:	d005      	beq.n	80018ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80018a2:	4b0a      	ldr	r3, [pc, #40]	; (80018cc <HAL_Delay+0x44>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	461a      	mov	r2, r3
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	4413      	add	r3, r2
 80018ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018ae:	bf00      	nop
 80018b0:	f7ff ffde 	bl	8001870 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	68fa      	ldr	r2, [r7, #12]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d8f7      	bhi.n	80018b0 <HAL_Delay+0x28>
  {
  }
}
 80018c0:	bf00      	nop
 80018c2:	bf00      	nop
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20000008 	.word	0x20000008

080018d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f003 0307 	and.w	r3, r3, #7
 80018de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018e0:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <__NVIC_SetPriorityGrouping+0x44>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018e6:	68ba      	ldr	r2, [r7, #8]
 80018e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018ec:	4013      	ands	r3, r2
 80018ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001902:	4a04      	ldr	r2, [pc, #16]	; (8001914 <__NVIC_SetPriorityGrouping+0x44>)
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	60d3      	str	r3, [r2, #12]
}
 8001908:	bf00      	nop
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	e000ed00 	.word	0xe000ed00

08001918 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800191c:	4b04      	ldr	r3, [pc, #16]	; (8001930 <__NVIC_GetPriorityGrouping+0x18>)
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	0a1b      	lsrs	r3, r3, #8
 8001922:	f003 0307 	and.w	r3, r3, #7
}
 8001926:	4618      	mov	r0, r3
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	e000ed00 	.word	0xe000ed00

08001934 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800193e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001942:	2b00      	cmp	r3, #0
 8001944:	db0b      	blt.n	800195e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	f003 021f 	and.w	r2, r3, #31
 800194c:	4907      	ldr	r1, [pc, #28]	; (800196c <__NVIC_EnableIRQ+0x38>)
 800194e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001952:	095b      	lsrs	r3, r3, #5
 8001954:	2001      	movs	r0, #1
 8001956:	fa00 f202 	lsl.w	r2, r0, r2
 800195a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	e000e100 	.word	0xe000e100

08001970 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	6039      	str	r1, [r7, #0]
 800197a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800197c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001980:	2b00      	cmp	r3, #0
 8001982:	db0a      	blt.n	800199a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	b2da      	uxtb	r2, r3
 8001988:	490c      	ldr	r1, [pc, #48]	; (80019bc <__NVIC_SetPriority+0x4c>)
 800198a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198e:	0112      	lsls	r2, r2, #4
 8001990:	b2d2      	uxtb	r2, r2
 8001992:	440b      	add	r3, r1
 8001994:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001998:	e00a      	b.n	80019b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	b2da      	uxtb	r2, r3
 800199e:	4908      	ldr	r1, [pc, #32]	; (80019c0 <__NVIC_SetPriority+0x50>)
 80019a0:	79fb      	ldrb	r3, [r7, #7]
 80019a2:	f003 030f 	and.w	r3, r3, #15
 80019a6:	3b04      	subs	r3, #4
 80019a8:	0112      	lsls	r2, r2, #4
 80019aa:	b2d2      	uxtb	r2, r2
 80019ac:	440b      	add	r3, r1
 80019ae:	761a      	strb	r2, [r3, #24]
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	e000e100 	.word	0xe000e100
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b089      	sub	sp, #36	; 0x24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	f1c3 0307 	rsb	r3, r3, #7
 80019de:	2b04      	cmp	r3, #4
 80019e0:	bf28      	it	cs
 80019e2:	2304      	movcs	r3, #4
 80019e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	3304      	adds	r3, #4
 80019ea:	2b06      	cmp	r3, #6
 80019ec:	d902      	bls.n	80019f4 <NVIC_EncodePriority+0x30>
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	3b03      	subs	r3, #3
 80019f2:	e000      	b.n	80019f6 <NVIC_EncodePriority+0x32>
 80019f4:	2300      	movs	r3, #0
 80019f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	43da      	mvns	r2, r3
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	401a      	ands	r2, r3
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	fa01 f303 	lsl.w	r3, r1, r3
 8001a16:	43d9      	mvns	r1, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a1c:	4313      	orrs	r3, r2
         );
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3724      	adds	r7, #36	; 0x24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
	...

08001a2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	3b01      	subs	r3, #1
 8001a38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a3c:	d301      	bcc.n	8001a42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e00f      	b.n	8001a62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a42:	4a0a      	ldr	r2, [pc, #40]	; (8001a6c <SysTick_Config+0x40>)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3b01      	subs	r3, #1
 8001a48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a4a:	210f      	movs	r1, #15
 8001a4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a50:	f7ff ff8e 	bl	8001970 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a54:	4b05      	ldr	r3, [pc, #20]	; (8001a6c <SysTick_Config+0x40>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a5a:	4b04      	ldr	r3, [pc, #16]	; (8001a6c <SysTick_Config+0x40>)
 8001a5c:	2207      	movs	r2, #7
 8001a5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	e000e010 	.word	0xe000e010

08001a70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f7ff ff29 	bl	80018d0 <__NVIC_SetPriorityGrouping>
}
 8001a7e:	bf00      	nop
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b086      	sub	sp, #24
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	60b9      	str	r1, [r7, #8]
 8001a90:	607a      	str	r2, [r7, #4]
 8001a92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a94:	2300      	movs	r3, #0
 8001a96:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a98:	f7ff ff3e 	bl	8001918 <__NVIC_GetPriorityGrouping>
 8001a9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	68b9      	ldr	r1, [r7, #8]
 8001aa2:	6978      	ldr	r0, [r7, #20]
 8001aa4:	f7ff ff8e 	bl	80019c4 <NVIC_EncodePriority>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aae:	4611      	mov	r1, r2
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff ff5d 	bl	8001970 <__NVIC_SetPriority>
}
 8001ab6:	bf00      	nop
 8001ab8:	3718      	adds	r7, #24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b082      	sub	sp, #8
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff ff31 	bl	8001934 <__NVIC_EnableIRQ>
}
 8001ad2:	bf00      	nop
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b082      	sub	sp, #8
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f7ff ffa2 	bl	8001a2c <SysTick_Config>
 8001ae8:	4603      	mov	r3, r0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
	...

08001af4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b087      	sub	sp, #28
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001afe:	2300      	movs	r3, #0
 8001b00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b02:	e17f      	b.n	8001e04 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	2101      	movs	r1, #1
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b10:	4013      	ands	r3, r2
 8001b12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f000 8171 	beq.w	8001dfe <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 0303 	and.w	r3, r3, #3
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d005      	beq.n	8001b34 <HAL_GPIO_Init+0x40>
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f003 0303 	and.w	r3, r3, #3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d130      	bne.n	8001b96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	2203      	movs	r2, #3
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	43db      	mvns	r3, r3
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	68da      	ldr	r2, [r3, #12]
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	693a      	ldr	r2, [r7, #16]
 8001b62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	43db      	mvns	r3, r3
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	4013      	ands	r3, r2
 8001b78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	091b      	lsrs	r3, r3, #4
 8001b80:	f003 0201 	and.w	r2, r3, #1
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f003 0303 	and.w	r3, r3, #3
 8001b9e:	2b03      	cmp	r3, #3
 8001ba0:	d118      	bne.n	8001bd4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001ba8:	2201      	movs	r2, #1
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	08db      	lsrs	r3, r3, #3
 8001bbe:	f003 0201 	and.w	r2, r3, #1
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f003 0303 	and.w	r3, r3, #3
 8001bdc:	2b03      	cmp	r3, #3
 8001bde:	d017      	beq.n	8001c10 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	2203      	movs	r2, #3
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	689a      	ldr	r2, [r3, #8]
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f003 0303 	and.w	r3, r3, #3
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d123      	bne.n	8001c64 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	08da      	lsrs	r2, r3, #3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3208      	adds	r2, #8
 8001c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c28:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	f003 0307 	and.w	r3, r3, #7
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	220f      	movs	r2, #15
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	691a      	ldr	r2, [r3, #16]
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	f003 0307 	and.w	r3, r3, #7
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	08da      	lsrs	r2, r3, #3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	3208      	adds	r2, #8
 8001c5e:	6939      	ldr	r1, [r7, #16]
 8001c60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	2203      	movs	r2, #3
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	43db      	mvns	r3, r3
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f003 0203 	and.w	r2, r3, #3
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	f000 80ac 	beq.w	8001dfe <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ca6:	4b5f      	ldr	r3, [pc, #380]	; (8001e24 <HAL_GPIO_Init+0x330>)
 8001ca8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001caa:	4a5e      	ldr	r2, [pc, #376]	; (8001e24 <HAL_GPIO_Init+0x330>)
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	6613      	str	r3, [r2, #96]	; 0x60
 8001cb2:	4b5c      	ldr	r3, [pc, #368]	; (8001e24 <HAL_GPIO_Init+0x330>)
 8001cb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	60bb      	str	r3, [r7, #8]
 8001cbc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001cbe:	4a5a      	ldr	r2, [pc, #360]	; (8001e28 <HAL_GPIO_Init+0x334>)
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	089b      	lsrs	r3, r3, #2
 8001cc4:	3302      	adds	r3, #2
 8001cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cca:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	f003 0303 	and.w	r3, r3, #3
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	220f      	movs	r2, #15
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ce8:	d025      	beq.n	8001d36 <HAL_GPIO_Init+0x242>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a4f      	ldr	r2, [pc, #316]	; (8001e2c <HAL_GPIO_Init+0x338>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d01f      	beq.n	8001d32 <HAL_GPIO_Init+0x23e>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a4e      	ldr	r2, [pc, #312]	; (8001e30 <HAL_GPIO_Init+0x33c>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d019      	beq.n	8001d2e <HAL_GPIO_Init+0x23a>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a4d      	ldr	r2, [pc, #308]	; (8001e34 <HAL_GPIO_Init+0x340>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d013      	beq.n	8001d2a <HAL_GPIO_Init+0x236>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a4c      	ldr	r2, [pc, #304]	; (8001e38 <HAL_GPIO_Init+0x344>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d00d      	beq.n	8001d26 <HAL_GPIO_Init+0x232>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a4b      	ldr	r2, [pc, #300]	; (8001e3c <HAL_GPIO_Init+0x348>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d007      	beq.n	8001d22 <HAL_GPIO_Init+0x22e>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a4a      	ldr	r2, [pc, #296]	; (8001e40 <HAL_GPIO_Init+0x34c>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d101      	bne.n	8001d1e <HAL_GPIO_Init+0x22a>
 8001d1a:	2306      	movs	r3, #6
 8001d1c:	e00c      	b.n	8001d38 <HAL_GPIO_Init+0x244>
 8001d1e:	2307      	movs	r3, #7
 8001d20:	e00a      	b.n	8001d38 <HAL_GPIO_Init+0x244>
 8001d22:	2305      	movs	r3, #5
 8001d24:	e008      	b.n	8001d38 <HAL_GPIO_Init+0x244>
 8001d26:	2304      	movs	r3, #4
 8001d28:	e006      	b.n	8001d38 <HAL_GPIO_Init+0x244>
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e004      	b.n	8001d38 <HAL_GPIO_Init+0x244>
 8001d2e:	2302      	movs	r3, #2
 8001d30:	e002      	b.n	8001d38 <HAL_GPIO_Init+0x244>
 8001d32:	2301      	movs	r3, #1
 8001d34:	e000      	b.n	8001d38 <HAL_GPIO_Init+0x244>
 8001d36:	2300      	movs	r3, #0
 8001d38:	697a      	ldr	r2, [r7, #20]
 8001d3a:	f002 0203 	and.w	r2, r2, #3
 8001d3e:	0092      	lsls	r2, r2, #2
 8001d40:	4093      	lsls	r3, r2
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d48:	4937      	ldr	r1, [pc, #220]	; (8001e28 <HAL_GPIO_Init+0x334>)
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	089b      	lsrs	r3, r3, #2
 8001d4e:	3302      	adds	r3, #2
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d56:	4b3b      	ldr	r3, [pc, #236]	; (8001e44 <HAL_GPIO_Init+0x350>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	4013      	ands	r3, r2
 8001d64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d7a:	4a32      	ldr	r2, [pc, #200]	; (8001e44 <HAL_GPIO_Init+0x350>)
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d80:	4b30      	ldr	r3, [pc, #192]	; (8001e44 <HAL_GPIO_Init+0x350>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d003      	beq.n	8001da4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001da4:	4a27      	ldr	r2, [pc, #156]	; (8001e44 <HAL_GPIO_Init+0x350>)
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001daa:	4b26      	ldr	r3, [pc, #152]	; (8001e44 <HAL_GPIO_Init+0x350>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	43db      	mvns	r3, r3
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	4013      	ands	r3, r2
 8001db8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d003      	beq.n	8001dce <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001dce:	4a1d      	ldr	r2, [pc, #116]	; (8001e44 <HAL_GPIO_Init+0x350>)
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001dd4:	4b1b      	ldr	r3, [pc, #108]	; (8001e44 <HAL_GPIO_Init+0x350>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	4013      	ands	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d003      	beq.n	8001df8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001df8:	4a12      	ldr	r2, [pc, #72]	; (8001e44 <HAL_GPIO_Init+0x350>)
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	3301      	adds	r3, #1
 8001e02:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f47f ae78 	bne.w	8001b04 <HAL_GPIO_Init+0x10>
  }
}
 8001e14:	bf00      	nop
 8001e16:	bf00      	nop
 8001e18:	371c      	adds	r7, #28
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	40021000 	.word	0x40021000
 8001e28:	40010000 	.word	0x40010000
 8001e2c:	48000400 	.word	0x48000400
 8001e30:	48000800 	.word	0x48000800
 8001e34:	48000c00 	.word	0x48000c00
 8001e38:	48001000 	.word	0x48001000
 8001e3c:	48001400 	.word	0x48001400
 8001e40:	48001800 	.word	0x48001800
 8001e44:	40010400 	.word	0x40010400

08001e48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	460b      	mov	r3, r1
 8001e52:	807b      	strh	r3, [r7, #2]
 8001e54:	4613      	mov	r3, r2
 8001e56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e58:	787b      	ldrb	r3, [r7, #1]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d003      	beq.n	8001e66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e5e:	887a      	ldrh	r2, [r7, #2]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e64:	e002      	b.n	8001e6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e66:	887a      	ldrh	r2, [r7, #2]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e7a:	b08f      	sub	sp, #60	; 0x3c
 8001e7c:	af0a      	add	r7, sp, #40	; 0x28
 8001e7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e054      	b.n	8001f34 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d106      	bne.n	8001eaa <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f00a ff5f 	bl	800cd68 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2203      	movs	r2, #3
 8001eae:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d102      	bne.n	8001ec4 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f003 fc09 	bl	80056e0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	603b      	str	r3, [r7, #0]
 8001ed4:	687e      	ldr	r6, [r7, #4]
 8001ed6:	466d      	mov	r5, sp
 8001ed8:	f106 0410 	add.w	r4, r6, #16
 8001edc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ede:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ee0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ee2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ee4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ee8:	e885 0003 	stmia.w	r5, {r0, r1}
 8001eec:	1d33      	adds	r3, r6, #4
 8001eee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ef0:	6838      	ldr	r0, [r7, #0]
 8001ef2:	f003 fbb8 	bl	8005666 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2101      	movs	r1, #1
 8001efc:	4618      	mov	r0, r3
 8001efe:	f003 fc00 	bl	8005702 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	603b      	str	r3, [r7, #0]
 8001f08:	687e      	ldr	r6, [r7, #4]
 8001f0a:	466d      	mov	r5, sp
 8001f0c:	f106 0410 	add.w	r4, r6, #16
 8001f10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f18:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f1c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f20:	1d33      	adds	r3, r6, #4
 8001f22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f24:	6838      	ldr	r0, [r7, #0]
 8001f26:	f003 fd85 	bl	8005a34 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3714      	adds	r7, #20
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f3c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001f3c:	b590      	push	{r4, r7, lr}
 8001f3e:	b089      	sub	sp, #36	; 0x24
 8001f40:	af04      	add	r7, sp, #16
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	4608      	mov	r0, r1
 8001f46:	4611      	mov	r1, r2
 8001f48:	461a      	mov	r2, r3
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	70fb      	strb	r3, [r7, #3]
 8001f4e:	460b      	mov	r3, r1
 8001f50:	70bb      	strb	r3, [r7, #2]
 8001f52:	4613      	mov	r3, r2
 8001f54:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d101      	bne.n	8001f64 <HAL_HCD_HC_Init+0x28>
 8001f60:	2302      	movs	r3, #2
 8001f62:	e076      	b.n	8002052 <HAL_HCD_HC_Init+0x116>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001f6c:	78fb      	ldrb	r3, [r7, #3]
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	212c      	movs	r1, #44	; 0x2c
 8001f72:	fb01 f303 	mul.w	r3, r1, r3
 8001f76:	4413      	add	r3, r2
 8001f78:	333d      	adds	r3, #61	; 0x3d
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001f7e:	78fb      	ldrb	r3, [r7, #3]
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	212c      	movs	r1, #44	; 0x2c
 8001f84:	fb01 f303 	mul.w	r3, r1, r3
 8001f88:	4413      	add	r3, r2
 8001f8a:	3338      	adds	r3, #56	; 0x38
 8001f8c:	787a      	ldrb	r2, [r7, #1]
 8001f8e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001f90:	78fb      	ldrb	r3, [r7, #3]
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	212c      	movs	r1, #44	; 0x2c
 8001f96:	fb01 f303 	mul.w	r3, r1, r3
 8001f9a:	4413      	add	r3, r2
 8001f9c:	3340      	adds	r3, #64	; 0x40
 8001f9e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001fa0:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001fa2:	78fb      	ldrb	r3, [r7, #3]
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	212c      	movs	r1, #44	; 0x2c
 8001fa8:	fb01 f303 	mul.w	r3, r1, r3
 8001fac:	4413      	add	r3, r2
 8001fae:	3339      	adds	r3, #57	; 0x39
 8001fb0:	78fa      	ldrb	r2, [r7, #3]
 8001fb2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001fb4:	78fb      	ldrb	r3, [r7, #3]
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	212c      	movs	r1, #44	; 0x2c
 8001fba:	fb01 f303 	mul.w	r3, r1, r3
 8001fbe:	4413      	add	r3, r2
 8001fc0:	333f      	adds	r3, #63	; 0x3f
 8001fc2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001fc6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001fc8:	78fb      	ldrb	r3, [r7, #3]
 8001fca:	78ba      	ldrb	r2, [r7, #2]
 8001fcc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001fd0:	b2d0      	uxtb	r0, r2
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	212c      	movs	r1, #44	; 0x2c
 8001fd6:	fb01 f303 	mul.w	r3, r1, r3
 8001fda:	4413      	add	r3, r2
 8001fdc:	333a      	adds	r3, #58	; 0x3a
 8001fde:	4602      	mov	r2, r0
 8001fe0:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001fe2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	da09      	bge.n	8001ffe <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001fea:	78fb      	ldrb	r3, [r7, #3]
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	212c      	movs	r1, #44	; 0x2c
 8001ff0:	fb01 f303 	mul.w	r3, r1, r3
 8001ff4:	4413      	add	r3, r2
 8001ff6:	333b      	adds	r3, #59	; 0x3b
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	701a      	strb	r2, [r3, #0]
 8001ffc:	e008      	b.n	8002010 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001ffe:	78fb      	ldrb	r3, [r7, #3]
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	212c      	movs	r1, #44	; 0x2c
 8002004:	fb01 f303 	mul.w	r3, r1, r3
 8002008:	4413      	add	r3, r2
 800200a:	333b      	adds	r3, #59	; 0x3b
 800200c:	2200      	movs	r2, #0
 800200e:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002010:	78fb      	ldrb	r3, [r7, #3]
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	212c      	movs	r1, #44	; 0x2c
 8002016:	fb01 f303 	mul.w	r3, r1, r3
 800201a:	4413      	add	r3, r2
 800201c:	333c      	adds	r3, #60	; 0x3c
 800201e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002022:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6818      	ldr	r0, [r3, #0]
 8002028:	787c      	ldrb	r4, [r7, #1]
 800202a:	78ba      	ldrb	r2, [r7, #2]
 800202c:	78f9      	ldrb	r1, [r7, #3]
 800202e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002030:	9302      	str	r3, [sp, #8]
 8002032:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002036:	9301      	str	r3, [sp, #4]
 8002038:	f897 3020 	ldrb.w	r3, [r7, #32]
 800203c:	9300      	str	r3, [sp, #0]
 800203e:	4623      	mov	r3, r4
 8002040:	f003 fe40 	bl	8005cc4 <USB_HC_Init>
 8002044:	4603      	mov	r3, r0
 8002046:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002050:	7bfb      	ldrb	r3, [r7, #15]
}
 8002052:	4618      	mov	r0, r3
 8002054:	3714      	adds	r7, #20
 8002056:	46bd      	mov	sp, r7
 8002058:	bd90      	pop	{r4, r7, pc}

0800205a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b084      	sub	sp, #16
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
 8002062:	460b      	mov	r3, r1
 8002064:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002066:	2300      	movs	r3, #0
 8002068:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002070:	2b01      	cmp	r3, #1
 8002072:	d101      	bne.n	8002078 <HAL_HCD_HC_Halt+0x1e>
 8002074:	2302      	movs	r3, #2
 8002076:	e00f      	b.n	8002098 <HAL_HCD_HC_Halt+0x3e>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	78fa      	ldrb	r2, [r7, #3]
 8002086:	4611      	mov	r1, r2
 8002088:	4618      	mov	r0, r3
 800208a:	f004 f830 	bl	80060ee <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002096:	7bfb      	ldrb	r3, [r7, #15]
}
 8002098:	4618      	mov	r0, r3
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	4608      	mov	r0, r1
 80020aa:	4611      	mov	r1, r2
 80020ac:	461a      	mov	r2, r3
 80020ae:	4603      	mov	r3, r0
 80020b0:	70fb      	strb	r3, [r7, #3]
 80020b2:	460b      	mov	r3, r1
 80020b4:	70bb      	strb	r3, [r7, #2]
 80020b6:	4613      	mov	r3, r2
 80020b8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80020ba:	78fb      	ldrb	r3, [r7, #3]
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	212c      	movs	r1, #44	; 0x2c
 80020c0:	fb01 f303 	mul.w	r3, r1, r3
 80020c4:	4413      	add	r3, r2
 80020c6:	333b      	adds	r3, #59	; 0x3b
 80020c8:	78ba      	ldrb	r2, [r7, #2]
 80020ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80020cc:	78fb      	ldrb	r3, [r7, #3]
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	212c      	movs	r1, #44	; 0x2c
 80020d2:	fb01 f303 	mul.w	r3, r1, r3
 80020d6:	4413      	add	r3, r2
 80020d8:	333f      	adds	r3, #63	; 0x3f
 80020da:	787a      	ldrb	r2, [r7, #1]
 80020dc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80020de:	7c3b      	ldrb	r3, [r7, #16]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d112      	bne.n	800210a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80020e4:	78fb      	ldrb	r3, [r7, #3]
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	212c      	movs	r1, #44	; 0x2c
 80020ea:	fb01 f303 	mul.w	r3, r1, r3
 80020ee:	4413      	add	r3, r2
 80020f0:	3342      	adds	r3, #66	; 0x42
 80020f2:	2203      	movs	r2, #3
 80020f4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80020f6:	78fb      	ldrb	r3, [r7, #3]
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	212c      	movs	r1, #44	; 0x2c
 80020fc:	fb01 f303 	mul.w	r3, r1, r3
 8002100:	4413      	add	r3, r2
 8002102:	333d      	adds	r3, #61	; 0x3d
 8002104:	7f3a      	ldrb	r2, [r7, #28]
 8002106:	701a      	strb	r2, [r3, #0]
 8002108:	e008      	b.n	800211c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800210a:	78fb      	ldrb	r3, [r7, #3]
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	212c      	movs	r1, #44	; 0x2c
 8002110:	fb01 f303 	mul.w	r3, r1, r3
 8002114:	4413      	add	r3, r2
 8002116:	3342      	adds	r3, #66	; 0x42
 8002118:	2202      	movs	r2, #2
 800211a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800211c:	787b      	ldrb	r3, [r7, #1]
 800211e:	2b03      	cmp	r3, #3
 8002120:	f200 80c6 	bhi.w	80022b0 <HAL_HCD_HC_SubmitRequest+0x210>
 8002124:	a201      	add	r2, pc, #4	; (adr r2, 800212c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800212a:	bf00      	nop
 800212c:	0800213d 	.word	0x0800213d
 8002130:	0800229d 	.word	0x0800229d
 8002134:	080021a1 	.word	0x080021a1
 8002138:	0800221f 	.word	0x0800221f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800213c:	7c3b      	ldrb	r3, [r7, #16]
 800213e:	2b01      	cmp	r3, #1
 8002140:	f040 80b8 	bne.w	80022b4 <HAL_HCD_HC_SubmitRequest+0x214>
 8002144:	78bb      	ldrb	r3, [r7, #2]
 8002146:	2b00      	cmp	r3, #0
 8002148:	f040 80b4 	bne.w	80022b4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800214c:	8b3b      	ldrh	r3, [r7, #24]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d108      	bne.n	8002164 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002152:	78fb      	ldrb	r3, [r7, #3]
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	212c      	movs	r1, #44	; 0x2c
 8002158:	fb01 f303 	mul.w	r3, r1, r3
 800215c:	4413      	add	r3, r2
 800215e:	3355      	adds	r3, #85	; 0x55
 8002160:	2201      	movs	r2, #1
 8002162:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002164:	78fb      	ldrb	r3, [r7, #3]
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	212c      	movs	r1, #44	; 0x2c
 800216a:	fb01 f303 	mul.w	r3, r1, r3
 800216e:	4413      	add	r3, r2
 8002170:	3355      	adds	r3, #85	; 0x55
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d109      	bne.n	800218c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002178:	78fb      	ldrb	r3, [r7, #3]
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	212c      	movs	r1, #44	; 0x2c
 800217e:	fb01 f303 	mul.w	r3, r1, r3
 8002182:	4413      	add	r3, r2
 8002184:	3342      	adds	r3, #66	; 0x42
 8002186:	2200      	movs	r2, #0
 8002188:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800218a:	e093      	b.n	80022b4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800218c:	78fb      	ldrb	r3, [r7, #3]
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	212c      	movs	r1, #44	; 0x2c
 8002192:	fb01 f303 	mul.w	r3, r1, r3
 8002196:	4413      	add	r3, r2
 8002198:	3342      	adds	r3, #66	; 0x42
 800219a:	2202      	movs	r2, #2
 800219c:	701a      	strb	r2, [r3, #0]
      break;
 800219e:	e089      	b.n	80022b4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80021a0:	78bb      	ldrb	r3, [r7, #2]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d11d      	bne.n	80021e2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80021a6:	78fb      	ldrb	r3, [r7, #3]
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	212c      	movs	r1, #44	; 0x2c
 80021ac:	fb01 f303 	mul.w	r3, r1, r3
 80021b0:	4413      	add	r3, r2
 80021b2:	3355      	adds	r3, #85	; 0x55
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d109      	bne.n	80021ce <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021ba:	78fb      	ldrb	r3, [r7, #3]
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	212c      	movs	r1, #44	; 0x2c
 80021c0:	fb01 f303 	mul.w	r3, r1, r3
 80021c4:	4413      	add	r3, r2
 80021c6:	3342      	adds	r3, #66	; 0x42
 80021c8:	2200      	movs	r2, #0
 80021ca:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80021cc:	e073      	b.n	80022b6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021ce:	78fb      	ldrb	r3, [r7, #3]
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	212c      	movs	r1, #44	; 0x2c
 80021d4:	fb01 f303 	mul.w	r3, r1, r3
 80021d8:	4413      	add	r3, r2
 80021da:	3342      	adds	r3, #66	; 0x42
 80021dc:	2202      	movs	r2, #2
 80021de:	701a      	strb	r2, [r3, #0]
      break;
 80021e0:	e069      	b.n	80022b6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80021e2:	78fb      	ldrb	r3, [r7, #3]
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	212c      	movs	r1, #44	; 0x2c
 80021e8:	fb01 f303 	mul.w	r3, r1, r3
 80021ec:	4413      	add	r3, r2
 80021ee:	3354      	adds	r3, #84	; 0x54
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d109      	bne.n	800220a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021f6:	78fb      	ldrb	r3, [r7, #3]
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	212c      	movs	r1, #44	; 0x2c
 80021fc:	fb01 f303 	mul.w	r3, r1, r3
 8002200:	4413      	add	r3, r2
 8002202:	3342      	adds	r3, #66	; 0x42
 8002204:	2200      	movs	r2, #0
 8002206:	701a      	strb	r2, [r3, #0]
      break;
 8002208:	e055      	b.n	80022b6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800220a:	78fb      	ldrb	r3, [r7, #3]
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	212c      	movs	r1, #44	; 0x2c
 8002210:	fb01 f303 	mul.w	r3, r1, r3
 8002214:	4413      	add	r3, r2
 8002216:	3342      	adds	r3, #66	; 0x42
 8002218:	2202      	movs	r2, #2
 800221a:	701a      	strb	r2, [r3, #0]
      break;
 800221c:	e04b      	b.n	80022b6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800221e:	78bb      	ldrb	r3, [r7, #2]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d11d      	bne.n	8002260 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002224:	78fb      	ldrb	r3, [r7, #3]
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	212c      	movs	r1, #44	; 0x2c
 800222a:	fb01 f303 	mul.w	r3, r1, r3
 800222e:	4413      	add	r3, r2
 8002230:	3355      	adds	r3, #85	; 0x55
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d109      	bne.n	800224c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002238:	78fb      	ldrb	r3, [r7, #3]
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	212c      	movs	r1, #44	; 0x2c
 800223e:	fb01 f303 	mul.w	r3, r1, r3
 8002242:	4413      	add	r3, r2
 8002244:	3342      	adds	r3, #66	; 0x42
 8002246:	2200      	movs	r2, #0
 8002248:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800224a:	e034      	b.n	80022b6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800224c:	78fb      	ldrb	r3, [r7, #3]
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	212c      	movs	r1, #44	; 0x2c
 8002252:	fb01 f303 	mul.w	r3, r1, r3
 8002256:	4413      	add	r3, r2
 8002258:	3342      	adds	r3, #66	; 0x42
 800225a:	2202      	movs	r2, #2
 800225c:	701a      	strb	r2, [r3, #0]
      break;
 800225e:	e02a      	b.n	80022b6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002260:	78fb      	ldrb	r3, [r7, #3]
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	212c      	movs	r1, #44	; 0x2c
 8002266:	fb01 f303 	mul.w	r3, r1, r3
 800226a:	4413      	add	r3, r2
 800226c:	3354      	adds	r3, #84	; 0x54
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d109      	bne.n	8002288 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002274:	78fb      	ldrb	r3, [r7, #3]
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	212c      	movs	r1, #44	; 0x2c
 800227a:	fb01 f303 	mul.w	r3, r1, r3
 800227e:	4413      	add	r3, r2
 8002280:	3342      	adds	r3, #66	; 0x42
 8002282:	2200      	movs	r2, #0
 8002284:	701a      	strb	r2, [r3, #0]
      break;
 8002286:	e016      	b.n	80022b6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002288:	78fb      	ldrb	r3, [r7, #3]
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	212c      	movs	r1, #44	; 0x2c
 800228e:	fb01 f303 	mul.w	r3, r1, r3
 8002292:	4413      	add	r3, r2
 8002294:	3342      	adds	r3, #66	; 0x42
 8002296:	2202      	movs	r2, #2
 8002298:	701a      	strb	r2, [r3, #0]
      break;
 800229a:	e00c      	b.n	80022b6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800229c:	78fb      	ldrb	r3, [r7, #3]
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	212c      	movs	r1, #44	; 0x2c
 80022a2:	fb01 f303 	mul.w	r3, r1, r3
 80022a6:	4413      	add	r3, r2
 80022a8:	3342      	adds	r3, #66	; 0x42
 80022aa:	2200      	movs	r2, #0
 80022ac:	701a      	strb	r2, [r3, #0]
      break;
 80022ae:	e002      	b.n	80022b6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80022b0:	bf00      	nop
 80022b2:	e000      	b.n	80022b6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80022b4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80022b6:	78fb      	ldrb	r3, [r7, #3]
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	212c      	movs	r1, #44	; 0x2c
 80022bc:	fb01 f303 	mul.w	r3, r1, r3
 80022c0:	4413      	add	r3, r2
 80022c2:	3344      	adds	r3, #68	; 0x44
 80022c4:	697a      	ldr	r2, [r7, #20]
 80022c6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80022c8:	78fb      	ldrb	r3, [r7, #3]
 80022ca:	8b3a      	ldrh	r2, [r7, #24]
 80022cc:	6879      	ldr	r1, [r7, #4]
 80022ce:	202c      	movs	r0, #44	; 0x2c
 80022d0:	fb00 f303 	mul.w	r3, r0, r3
 80022d4:	440b      	add	r3, r1
 80022d6:	334c      	adds	r3, #76	; 0x4c
 80022d8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80022da:	78fb      	ldrb	r3, [r7, #3]
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	212c      	movs	r1, #44	; 0x2c
 80022e0:	fb01 f303 	mul.w	r3, r1, r3
 80022e4:	4413      	add	r3, r2
 80022e6:	3360      	adds	r3, #96	; 0x60
 80022e8:	2200      	movs	r2, #0
 80022ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80022ec:	78fb      	ldrb	r3, [r7, #3]
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	212c      	movs	r1, #44	; 0x2c
 80022f2:	fb01 f303 	mul.w	r3, r1, r3
 80022f6:	4413      	add	r3, r2
 80022f8:	3350      	adds	r3, #80	; 0x50
 80022fa:	2200      	movs	r2, #0
 80022fc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80022fe:	78fb      	ldrb	r3, [r7, #3]
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	212c      	movs	r1, #44	; 0x2c
 8002304:	fb01 f303 	mul.w	r3, r1, r3
 8002308:	4413      	add	r3, r2
 800230a:	3339      	adds	r3, #57	; 0x39
 800230c:	78fa      	ldrb	r2, [r7, #3]
 800230e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002310:	78fb      	ldrb	r3, [r7, #3]
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	212c      	movs	r1, #44	; 0x2c
 8002316:	fb01 f303 	mul.w	r3, r1, r3
 800231a:	4413      	add	r3, r2
 800231c:	3361      	adds	r3, #97	; 0x61
 800231e:	2200      	movs	r2, #0
 8002320:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6818      	ldr	r0, [r3, #0]
 8002326:	78fb      	ldrb	r3, [r7, #3]
 8002328:	222c      	movs	r2, #44	; 0x2c
 800232a:	fb02 f303 	mul.w	r3, r2, r3
 800232e:	3338      	adds	r3, #56	; 0x38
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	4413      	add	r3, r2
 8002334:	4619      	mov	r1, r3
 8002336:	f003 fdd1 	bl	8005edc <USB_HC_StartXfer>
 800233a:	4603      	mov	r3, r0
}
 800233c:	4618      	mov	r0, r3
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4618      	mov	r0, r3
 800235c:	f003 fb27 	bl	80059ae <USB_GetMode>
 8002360:	4603      	mov	r3, r0
 8002362:	2b01      	cmp	r3, #1
 8002364:	f040 80f6 	bne.w	8002554 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4618      	mov	r0, r3
 800236e:	f003 fb0b 	bl	8005988 <USB_ReadInterrupts>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	f000 80ec 	beq.w	8002552 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f003 fb02 	bl	8005988 <USB_ReadInterrupts>
 8002384:	4603      	mov	r3, r0
 8002386:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800238a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800238e:	d104      	bne.n	800239a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002398:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f003 faf2 	bl	8005988 <USB_ReadInterrupts>
 80023a4:	4603      	mov	r3, r0
 80023a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023ae:	d104      	bne.n	80023ba <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80023b8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f003 fae2 	bl	8005988 <USB_ReadInterrupts>
 80023c4:	4603      	mov	r3, r0
 80023c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80023ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023ce:	d104      	bne.n	80023da <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80023d8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4618      	mov	r0, r3
 80023e0:	f003 fad2 	bl	8005988 <USB_ReadInterrupts>
 80023e4:	4603      	mov	r3, r0
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d103      	bne.n	80023f6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2202      	movs	r2, #2
 80023f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f003 fac4 	bl	8005988 <USB_ReadInterrupts>
 8002400:	4603      	mov	r3, r0
 8002402:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002406:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800240a:	d11c      	bne.n	8002446 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002414:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b00      	cmp	r3, #0
 8002424:	d10f      	bne.n	8002446 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002426:	2110      	movs	r1, #16
 8002428:	6938      	ldr	r0, [r7, #16]
 800242a:	f003 f9b7 	bl	800579c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800242e:	6938      	ldr	r0, [r7, #16]
 8002430:	f003 f9e8 	bl	8005804 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2101      	movs	r1, #1
 800243a:	4618      	mov	r0, r3
 800243c:	f003 fb7c 	bl	8005b38 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f00a fd41 	bl	800cec8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4618      	mov	r0, r3
 800244c:	f003 fa9c 	bl	8005988 <USB_ReadInterrupts>
 8002450:	4603      	mov	r3, r0
 8002452:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002456:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800245a:	d102      	bne.n	8002462 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f001 f815 	bl	800348c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4618      	mov	r0, r3
 8002468:	f003 fa8e 	bl	8005988 <USB_ReadInterrupts>
 800246c:	4603      	mov	r3, r0
 800246e:	f003 0308 	and.w	r3, r3, #8
 8002472:	2b08      	cmp	r3, #8
 8002474:	d106      	bne.n	8002484 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f00a fd0a 	bl	800ce90 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2208      	movs	r2, #8
 8002482:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4618      	mov	r0, r3
 800248a:	f003 fa7d 	bl	8005988 <USB_ReadInterrupts>
 800248e:	4603      	mov	r3, r0
 8002490:	f003 0310 	and.w	r3, r3, #16
 8002494:	2b10      	cmp	r3, #16
 8002496:	d101      	bne.n	800249c <HAL_HCD_IRQHandler+0x158>
 8002498:	2301      	movs	r3, #1
 800249a:	e000      	b.n	800249e <HAL_HCD_IRQHandler+0x15a>
 800249c:	2300      	movs	r3, #0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d012      	beq.n	80024c8 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	699a      	ldr	r2, [r3, #24]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f022 0210 	bic.w	r2, r2, #16
 80024b0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 ff18 	bl	80032e8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	699a      	ldr	r2, [r3, #24]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f042 0210 	orr.w	r2, r2, #16
 80024c6:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f003 fa5b 	bl	8005988 <USB_ReadInterrupts>
 80024d2:	4603      	mov	r3, r0
 80024d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80024dc:	d13a      	bne.n	8002554 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f003 fdf2 	bl	80060cc <USB_HC_ReadInterrupt>
 80024e8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80024ea:	2300      	movs	r3, #0
 80024ec:	617b      	str	r3, [r7, #20]
 80024ee:	e025      	b.n	800253c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	68ba      	ldr	r2, [r7, #8]
 80024f8:	fa22 f303 	lsr.w	r3, r2, r3
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	2b00      	cmp	r3, #0
 8002502:	d018      	beq.n	8002536 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	015a      	lsls	r2, r3, #5
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	4413      	add	r3, r2
 800250c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002516:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800251a:	d106      	bne.n	800252a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	b2db      	uxtb	r3, r3
 8002520:	4619      	mov	r1, r3
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 f8ab 	bl	800267e <HCD_HC_IN_IRQHandler>
 8002528:	e005      	b.n	8002536 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	b2db      	uxtb	r3, r3
 800252e:	4619      	mov	r1, r3
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 fbd7 	bl	8002ce4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	3301      	adds	r3, #1
 800253a:	617b      	str	r3, [r7, #20]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	697a      	ldr	r2, [r7, #20]
 8002542:	429a      	cmp	r2, r3
 8002544:	d3d4      	bcc.n	80024f0 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800254e:	615a      	str	r2, [r3, #20]
 8002550:	e000      	b.n	8002554 <HAL_HCD_IRQHandler+0x210>
      return;
 8002552:	bf00      	nop
    }
  }
}
 8002554:	3718      	adds	r7, #24
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b082      	sub	sp, #8
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002568:	2b01      	cmp	r3, #1
 800256a:	d101      	bne.n	8002570 <HAL_HCD_Start+0x16>
 800256c:	2302      	movs	r3, #2
 800256e:	e013      	b.n	8002598 <HAL_HCD_Start+0x3e>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2101      	movs	r1, #1
 800257e:	4618      	mov	r0, r3
 8002580:	f003 fb3e 	bl	8005c00 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4618      	mov	r0, r3
 800258a:	f003 f898 	bl	80056be <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	3708      	adds	r7, #8
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d101      	bne.n	80025b6 <HAL_HCD_Stop+0x16>
 80025b2:	2302      	movs	r3, #2
 80025b4:	e00d      	b.n	80025d2 <HAL_HCD_Stop+0x32>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2201      	movs	r2, #1
 80025ba:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f003 fe8f 	bl	80062e6 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b082      	sub	sp, #8
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f003 fae0 	bl	8005bac <USB_ResetPort>
 80025ec:	4603      	mov	r3, r0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80025f6:	b480      	push	{r7}
 80025f8:	b083      	sub	sp, #12
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
 80025fe:	460b      	mov	r3, r1
 8002600:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002602:	78fb      	ldrb	r3, [r7, #3]
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	212c      	movs	r1, #44	; 0x2c
 8002608:	fb01 f303 	mul.w	r3, r1, r3
 800260c:	4413      	add	r3, r2
 800260e:	3360      	adds	r3, #96	; 0x60
 8002610:	781b      	ldrb	r3, [r3, #0]
}
 8002612:	4618      	mov	r0, r3
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr

0800261e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800261e:	b480      	push	{r7}
 8002620:	b083      	sub	sp, #12
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
 8002626:	460b      	mov	r3, r1
 8002628:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800262a:	78fb      	ldrb	r3, [r7, #3]
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	212c      	movs	r1, #44	; 0x2c
 8002630:	fb01 f303 	mul.w	r3, r1, r3
 8002634:	4413      	add	r3, r2
 8002636:	3350      	adds	r3, #80	; 0x50
 8002638:	681b      	ldr	r3, [r3, #0]
}
 800263a:	4618      	mov	r0, r3
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr

08002646 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b082      	sub	sp, #8
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f003 fb24 	bl	8005ca0 <USB_GetCurrentFrame>
 8002658:	4603      	mov	r3, r0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b082      	sub	sp, #8
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f003 faff 	bl	8005c72 <USB_GetHostSpeed>
 8002674:	4603      	mov	r3, r0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b086      	sub	sp, #24
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
 8002686:	460b      	mov	r3, r1
 8002688:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002694:	78fb      	ldrb	r3, [r7, #3]
 8002696:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	015a      	lsls	r2, r3, #5
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	4413      	add	r3, r2
 80026a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f003 0304 	and.w	r3, r3, #4
 80026aa:	2b04      	cmp	r3, #4
 80026ac:	d11a      	bne.n	80026e4 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	015a      	lsls	r2, r3, #5
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	4413      	add	r3, r2
 80026b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ba:	461a      	mov	r2, r3
 80026bc:	2304      	movs	r3, #4
 80026be:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	212c      	movs	r1, #44	; 0x2c
 80026c6:	fb01 f303 	mul.w	r3, r1, r3
 80026ca:	4413      	add	r3, r2
 80026cc:	3361      	adds	r3, #97	; 0x61
 80026ce:	2206      	movs	r2, #6
 80026d0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	b2d2      	uxtb	r2, r2
 80026da:	4611      	mov	r1, r2
 80026dc:	4618      	mov	r0, r3
 80026de:	f003 fd06 	bl	80060ee <USB_HC_Halt>
 80026e2:	e0af      	b.n	8002844 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	015a      	lsls	r2, r3, #5
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	4413      	add	r3, r2
 80026ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026fa:	d11b      	bne.n	8002734 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	015a      	lsls	r2, r3, #5
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	4413      	add	r3, r2
 8002704:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002708:	461a      	mov	r2, r3
 800270a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800270e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	212c      	movs	r1, #44	; 0x2c
 8002716:	fb01 f303 	mul.w	r3, r1, r3
 800271a:	4413      	add	r3, r2
 800271c:	3361      	adds	r3, #97	; 0x61
 800271e:	2207      	movs	r2, #7
 8002720:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	b2d2      	uxtb	r2, r2
 800272a:	4611      	mov	r1, r2
 800272c:	4618      	mov	r0, r3
 800272e:	f003 fcde 	bl	80060ee <USB_HC_Halt>
 8002732:	e087      	b.n	8002844 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	015a      	lsls	r2, r3, #5
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	4413      	add	r3, r2
 800273c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 0320 	and.w	r3, r3, #32
 8002746:	2b20      	cmp	r3, #32
 8002748:	d109      	bne.n	800275e <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	015a      	lsls	r2, r3, #5
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	4413      	add	r3, r2
 8002752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002756:	461a      	mov	r2, r3
 8002758:	2320      	movs	r3, #32
 800275a:	6093      	str	r3, [r2, #8]
 800275c:	e072      	b.n	8002844 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	015a      	lsls	r2, r3, #5
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	4413      	add	r3, r2
 8002766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f003 0308 	and.w	r3, r3, #8
 8002770:	2b08      	cmp	r3, #8
 8002772:	d11a      	bne.n	80027aa <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	015a      	lsls	r2, r3, #5
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	4413      	add	r3, r2
 800277c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002780:	461a      	mov	r2, r3
 8002782:	2308      	movs	r3, #8
 8002784:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	212c      	movs	r1, #44	; 0x2c
 800278c:	fb01 f303 	mul.w	r3, r1, r3
 8002790:	4413      	add	r3, r2
 8002792:	3361      	adds	r3, #97	; 0x61
 8002794:	2205      	movs	r2, #5
 8002796:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	b2d2      	uxtb	r2, r2
 80027a0:	4611      	mov	r1, r2
 80027a2:	4618      	mov	r0, r3
 80027a4:	f003 fca3 	bl	80060ee <USB_HC_Halt>
 80027a8:	e04c      	b.n	8002844 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	015a      	lsls	r2, r3, #5
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	4413      	add	r3, r2
 80027b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027c0:	d11b      	bne.n	80027fa <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	015a      	lsls	r2, r3, #5
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	4413      	add	r3, r2
 80027ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ce:	461a      	mov	r2, r3
 80027d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027d4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	212c      	movs	r1, #44	; 0x2c
 80027dc:	fb01 f303 	mul.w	r3, r1, r3
 80027e0:	4413      	add	r3, r2
 80027e2:	3361      	adds	r3, #97	; 0x61
 80027e4:	2208      	movs	r2, #8
 80027e6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	4611      	mov	r1, r2
 80027f2:	4618      	mov	r0, r3
 80027f4:	f003 fc7b 	bl	80060ee <USB_HC_Halt>
 80027f8:	e024      	b.n	8002844 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	015a      	lsls	r2, r3, #5
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	4413      	add	r3, r2
 8002802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800280c:	2b80      	cmp	r3, #128	; 0x80
 800280e:	d119      	bne.n	8002844 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	015a      	lsls	r2, r3, #5
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	4413      	add	r3, r2
 8002818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800281c:	461a      	mov	r2, r3
 800281e:	2380      	movs	r3, #128	; 0x80
 8002820:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	212c      	movs	r1, #44	; 0x2c
 8002828:	fb01 f303 	mul.w	r3, r1, r3
 800282c:	4413      	add	r3, r2
 800282e:	3361      	adds	r3, #97	; 0x61
 8002830:	2206      	movs	r2, #6
 8002832:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	b2d2      	uxtb	r2, r2
 800283c:	4611      	mov	r1, r2
 800283e:	4618      	mov	r0, r3
 8002840:	f003 fc55 	bl	80060ee <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	015a      	lsls	r2, r3, #5
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	4413      	add	r3, r2
 800284c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002856:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800285a:	d112      	bne.n	8002882 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	b2d2      	uxtb	r2, r2
 8002864:	4611      	mov	r1, r2
 8002866:	4618      	mov	r0, r3
 8002868:	f003 fc41 	bl	80060ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	015a      	lsls	r2, r3, #5
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	4413      	add	r3, r2
 8002874:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002878:	461a      	mov	r2, r3
 800287a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800287e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002880:	e22c      	b.n	8002cdc <HCD_HC_IN_IRQHandler+0x65e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	015a      	lsls	r2, r3, #5
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	4413      	add	r3, r2
 800288a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	2b01      	cmp	r3, #1
 8002896:	f040 80c1 	bne.w	8002a1c <HCD_HC_IN_IRQHandler+0x39e>
    hhcd->hc[ch_num].state = HC_XFRC;
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	212c      	movs	r1, #44	; 0x2c
 80028a0:	fb01 f303 	mul.w	r3, r1, r3
 80028a4:	4413      	add	r3, r2
 80028a6:	3361      	adds	r3, #97	; 0x61
 80028a8:	2201      	movs	r2, #1
 80028aa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	212c      	movs	r1, #44	; 0x2c
 80028b2:	fb01 f303 	mul.w	r3, r1, r3
 80028b6:	4413      	add	r3, r2
 80028b8:	335c      	adds	r3, #92	; 0x5c
 80028ba:	2200      	movs	r2, #0
 80028bc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	015a      	lsls	r2, r3, #5
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	4413      	add	r3, r2
 80028c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ca:	461a      	mov	r2, r3
 80028cc:	2301      	movs	r3, #1
 80028ce:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	212c      	movs	r1, #44	; 0x2c
 80028d6:	fb01 f303 	mul.w	r3, r1, r3
 80028da:	4413      	add	r3, r2
 80028dc:	333f      	adds	r3, #63	; 0x3f
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d009      	beq.n	80028f8 <HCD_HC_IN_IRQHandler+0x27a>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	212c      	movs	r1, #44	; 0x2c
 80028ea:	fb01 f303 	mul.w	r3, r1, r3
 80028ee:	4413      	add	r3, r2
 80028f0:	333f      	adds	r3, #63	; 0x3f
 80028f2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d111      	bne.n	800291c <HCD_HC_IN_IRQHandler+0x29e>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	b2d2      	uxtb	r2, r2
 8002900:	4611      	mov	r1, r2
 8002902:	4618      	mov	r0, r3
 8002904:	f003 fbf3 	bl	80060ee <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	015a      	lsls	r2, r3, #5
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	4413      	add	r3, r2
 8002910:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002914:	461a      	mov	r2, r3
 8002916:	2310      	movs	r3, #16
 8002918:	6093      	str	r3, [r2, #8]
 800291a:	e03a      	b.n	8002992 <HCD_HC_IN_IRQHandler+0x314>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	212c      	movs	r1, #44	; 0x2c
 8002922:	fb01 f303 	mul.w	r3, r1, r3
 8002926:	4413      	add	r3, r2
 8002928:	333f      	adds	r3, #63	; 0x3f
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	2b03      	cmp	r3, #3
 800292e:	d009      	beq.n	8002944 <HCD_HC_IN_IRQHandler+0x2c6>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	212c      	movs	r1, #44	; 0x2c
 8002936:	fb01 f303 	mul.w	r3, r1, r3
 800293a:	4413      	add	r3, r2
 800293c:	333f      	adds	r3, #63	; 0x3f
 800293e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002940:	2b01      	cmp	r3, #1
 8002942:	d126      	bne.n	8002992 <HCD_HC_IN_IRQHandler+0x314>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	015a      	lsls	r2, r3, #5
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	4413      	add	r3, r2
 800294c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	0151      	lsls	r1, r2, #5
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	440a      	add	r2, r1
 800295a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800295e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002962:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	212c      	movs	r1, #44	; 0x2c
 800296a:	fb01 f303 	mul.w	r3, r1, r3
 800296e:	4413      	add	r3, r2
 8002970:	3360      	adds	r3, #96	; 0x60
 8002972:	2201      	movs	r2, #1
 8002974:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	b2d9      	uxtb	r1, r3
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	202c      	movs	r0, #44	; 0x2c
 8002980:	fb00 f303 	mul.w	r3, r0, r3
 8002984:	4413      	add	r3, r2
 8002986:	3360      	adds	r3, #96	; 0x60
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	461a      	mov	r2, r3
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f00a faa9 	bl	800cee4 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d12b      	bne.n	80029f2 <HCD_HC_IN_IRQHandler+0x374>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	212c      	movs	r1, #44	; 0x2c
 80029a0:	fb01 f303 	mul.w	r3, r1, r3
 80029a4:	4413      	add	r3, r2
 80029a6:	3348      	adds	r3, #72	; 0x48
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	202c      	movs	r0, #44	; 0x2c
 80029b0:	fb00 f202 	mul.w	r2, r0, r2
 80029b4:	440a      	add	r2, r1
 80029b6:	3240      	adds	r2, #64	; 0x40
 80029b8:	8812      	ldrh	r2, [r2, #0]
 80029ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f000 818a 	beq.w	8002cdc <HCD_HC_IN_IRQHandler+0x65e>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	212c      	movs	r1, #44	; 0x2c
 80029ce:	fb01 f303 	mul.w	r3, r1, r3
 80029d2:	4413      	add	r3, r2
 80029d4:	3354      	adds	r3, #84	; 0x54
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	f083 0301 	eor.w	r3, r3, #1
 80029dc:	b2d8      	uxtb	r0, r3
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	212c      	movs	r1, #44	; 0x2c
 80029e4:	fb01 f303 	mul.w	r3, r1, r3
 80029e8:	4413      	add	r3, r2
 80029ea:	3354      	adds	r3, #84	; 0x54
 80029ec:	4602      	mov	r2, r0
 80029ee:	701a      	strb	r2, [r3, #0]
}
 80029f0:	e174      	b.n	8002cdc <HCD_HC_IN_IRQHandler+0x65e>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	212c      	movs	r1, #44	; 0x2c
 80029f8:	fb01 f303 	mul.w	r3, r1, r3
 80029fc:	4413      	add	r3, r2
 80029fe:	3354      	adds	r3, #84	; 0x54
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	f083 0301 	eor.w	r3, r3, #1
 8002a06:	b2d8      	uxtb	r0, r3
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	212c      	movs	r1, #44	; 0x2c
 8002a0e:	fb01 f303 	mul.w	r3, r1, r3
 8002a12:	4413      	add	r3, r2
 8002a14:	3354      	adds	r3, #84	; 0x54
 8002a16:	4602      	mov	r2, r0
 8002a18:	701a      	strb	r2, [r3, #0]
}
 8002a1a:	e15f      	b.n	8002cdc <HCD_HC_IN_IRQHandler+0x65e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	015a      	lsls	r2, r3, #5
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	4413      	add	r3, r2
 8002a24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	f040 80f6 	bne.w	8002c20 <HCD_HC_IN_IRQHandler+0x5a2>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	212c      	movs	r1, #44	; 0x2c
 8002a3a:	fb01 f303 	mul.w	r3, r1, r3
 8002a3e:	4413      	add	r3, r2
 8002a40:	3361      	adds	r3, #97	; 0x61
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d109      	bne.n	8002a5c <HCD_HC_IN_IRQHandler+0x3de>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	212c      	movs	r1, #44	; 0x2c
 8002a4e:	fb01 f303 	mul.w	r3, r1, r3
 8002a52:	4413      	add	r3, r2
 8002a54:	3360      	adds	r3, #96	; 0x60
 8002a56:	2201      	movs	r2, #1
 8002a58:	701a      	strb	r2, [r3, #0]
 8002a5a:	e0c9      	b.n	8002bf0 <HCD_HC_IN_IRQHandler+0x572>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	212c      	movs	r1, #44	; 0x2c
 8002a62:	fb01 f303 	mul.w	r3, r1, r3
 8002a66:	4413      	add	r3, r2
 8002a68:	3361      	adds	r3, #97	; 0x61
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	2b05      	cmp	r3, #5
 8002a6e:	d109      	bne.n	8002a84 <HCD_HC_IN_IRQHandler+0x406>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	212c      	movs	r1, #44	; 0x2c
 8002a76:	fb01 f303 	mul.w	r3, r1, r3
 8002a7a:	4413      	add	r3, r2
 8002a7c:	3360      	adds	r3, #96	; 0x60
 8002a7e:	2205      	movs	r2, #5
 8002a80:	701a      	strb	r2, [r3, #0]
 8002a82:	e0b5      	b.n	8002bf0 <HCD_HC_IN_IRQHandler+0x572>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	212c      	movs	r1, #44	; 0x2c
 8002a8a:	fb01 f303 	mul.w	r3, r1, r3
 8002a8e:	4413      	add	r3, r2
 8002a90:	3361      	adds	r3, #97	; 0x61
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2b06      	cmp	r3, #6
 8002a96:	d009      	beq.n	8002aac <HCD_HC_IN_IRQHandler+0x42e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	212c      	movs	r1, #44	; 0x2c
 8002a9e:	fb01 f303 	mul.w	r3, r1, r3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	3361      	adds	r3, #97	; 0x61
 8002aa6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002aa8:	2b08      	cmp	r3, #8
 8002aaa:	d150      	bne.n	8002b4e <HCD_HC_IN_IRQHandler+0x4d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	212c      	movs	r1, #44	; 0x2c
 8002ab2:	fb01 f303 	mul.w	r3, r1, r3
 8002ab6:	4413      	add	r3, r2
 8002ab8:	335c      	adds	r3, #92	; 0x5c
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	1c5a      	adds	r2, r3, #1
 8002abe:	6879      	ldr	r1, [r7, #4]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	202c      	movs	r0, #44	; 0x2c
 8002ac4:	fb00 f303 	mul.w	r3, r0, r3
 8002ac8:	440b      	add	r3, r1
 8002aca:	335c      	adds	r3, #92	; 0x5c
 8002acc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	212c      	movs	r1, #44	; 0x2c
 8002ad4:	fb01 f303 	mul.w	r3, r1, r3
 8002ad8:	4413      	add	r3, r2
 8002ada:	335c      	adds	r3, #92	; 0x5c
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d912      	bls.n	8002b08 <HCD_HC_IN_IRQHandler+0x48a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	212c      	movs	r1, #44	; 0x2c
 8002ae8:	fb01 f303 	mul.w	r3, r1, r3
 8002aec:	4413      	add	r3, r2
 8002aee:	335c      	adds	r3, #92	; 0x5c
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	212c      	movs	r1, #44	; 0x2c
 8002afa:	fb01 f303 	mul.w	r3, r1, r3
 8002afe:	4413      	add	r3, r2
 8002b00:	3360      	adds	r3, #96	; 0x60
 8002b02:	2204      	movs	r2, #4
 8002b04:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b06:	e073      	b.n	8002bf0 <HCD_HC_IN_IRQHandler+0x572>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	212c      	movs	r1, #44	; 0x2c
 8002b0e:	fb01 f303 	mul.w	r3, r1, r3
 8002b12:	4413      	add	r3, r2
 8002b14:	3360      	adds	r3, #96	; 0x60
 8002b16:	2202      	movs	r2, #2
 8002b18:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	015a      	lsls	r2, r3, #5
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	4413      	add	r3, r2
 8002b22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b30:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b38:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	015a      	lsls	r2, r3, #5
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	4413      	add	r3, r2
 8002b42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b46:	461a      	mov	r2, r3
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b4c:	e050      	b.n	8002bf0 <HCD_HC_IN_IRQHandler+0x572>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	212c      	movs	r1, #44	; 0x2c
 8002b54:	fb01 f303 	mul.w	r3, r1, r3
 8002b58:	4413      	add	r3, r2
 8002b5a:	3361      	adds	r3, #97	; 0x61
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	2b03      	cmp	r3, #3
 8002b60:	d122      	bne.n	8002ba8 <HCD_HC_IN_IRQHandler+0x52a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	212c      	movs	r1, #44	; 0x2c
 8002b68:	fb01 f303 	mul.w	r3, r1, r3
 8002b6c:	4413      	add	r3, r2
 8002b6e:	3360      	adds	r3, #96	; 0x60
 8002b70:	2202      	movs	r2, #2
 8002b72:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	015a      	lsls	r2, r3, #5
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b8a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b92:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	015a      	lsls	r2, r3, #5
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	6013      	str	r3, [r2, #0]
 8002ba6:	e023      	b.n	8002bf0 <HCD_HC_IN_IRQHandler+0x572>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	212c      	movs	r1, #44	; 0x2c
 8002bae:	fb01 f303 	mul.w	r3, r1, r3
 8002bb2:	4413      	add	r3, r2
 8002bb4:	3361      	adds	r3, #97	; 0x61
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	2b07      	cmp	r3, #7
 8002bba:	d119      	bne.n	8002bf0 <HCD_HC_IN_IRQHandler+0x572>
      hhcd->hc[ch_num].ErrCnt++;
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	212c      	movs	r1, #44	; 0x2c
 8002bc2:	fb01 f303 	mul.w	r3, r1, r3
 8002bc6:	4413      	add	r3, r2
 8002bc8:	335c      	adds	r3, #92	; 0x5c
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	1c5a      	adds	r2, r3, #1
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	202c      	movs	r0, #44	; 0x2c
 8002bd4:	fb00 f303 	mul.w	r3, r0, r3
 8002bd8:	440b      	add	r3, r1
 8002bda:	335c      	adds	r3, #92	; 0x5c
 8002bdc:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	212c      	movs	r1, #44	; 0x2c
 8002be4:	fb01 f303 	mul.w	r3, r1, r3
 8002be8:	4413      	add	r3, r2
 8002bea:	3360      	adds	r3, #96	; 0x60
 8002bec:	2204      	movs	r2, #4
 8002bee:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	015a      	lsls	r2, r3, #5
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	2302      	movs	r3, #2
 8002c00:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	b2d9      	uxtb	r1, r3
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	202c      	movs	r0, #44	; 0x2c
 8002c0c:	fb00 f303 	mul.w	r3, r0, r3
 8002c10:	4413      	add	r3, r2
 8002c12:	3360      	adds	r3, #96	; 0x60
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	461a      	mov	r2, r3
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f00a f963 	bl	800cee4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002c1e:	e05d      	b.n	8002cdc <HCD_HC_IN_IRQHandler+0x65e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	015a      	lsls	r2, r3, #5
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	4413      	add	r3, r2
 8002c28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f003 0310 	and.w	r3, r3, #16
 8002c32:	2b10      	cmp	r3, #16
 8002c34:	d152      	bne.n	8002cdc <HCD_HC_IN_IRQHandler+0x65e>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	212c      	movs	r1, #44	; 0x2c
 8002c3c:	fb01 f303 	mul.w	r3, r1, r3
 8002c40:	4413      	add	r3, r2
 8002c42:	333f      	adds	r3, #63	; 0x3f
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	2b03      	cmp	r3, #3
 8002c48:	d111      	bne.n	8002c6e <HCD_HC_IN_IRQHandler+0x5f0>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	212c      	movs	r1, #44	; 0x2c
 8002c50:	fb01 f303 	mul.w	r3, r1, r3
 8002c54:	4413      	add	r3, r2
 8002c56:	335c      	adds	r3, #92	; 0x5c
 8002c58:	2200      	movs	r2, #0
 8002c5a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	b2d2      	uxtb	r2, r2
 8002c64:	4611      	mov	r1, r2
 8002c66:	4618      	mov	r0, r3
 8002c68:	f003 fa41 	bl	80060ee <USB_HC_Halt>
 8002c6c:	e02d      	b.n	8002cca <HCD_HC_IN_IRQHandler+0x64c>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	212c      	movs	r1, #44	; 0x2c
 8002c74:	fb01 f303 	mul.w	r3, r1, r3
 8002c78:	4413      	add	r3, r2
 8002c7a:	333f      	adds	r3, #63	; 0x3f
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d009      	beq.n	8002c96 <HCD_HC_IN_IRQHandler+0x618>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	212c      	movs	r1, #44	; 0x2c
 8002c88:	fb01 f303 	mul.w	r3, r1, r3
 8002c8c:	4413      	add	r3, r2
 8002c8e:	333f      	adds	r3, #63	; 0x3f
 8002c90:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d119      	bne.n	8002cca <HCD_HC_IN_IRQHandler+0x64c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	212c      	movs	r1, #44	; 0x2c
 8002c9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ca0:	4413      	add	r3, r2
 8002ca2:	335c      	adds	r3, #92	; 0x5c
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	212c      	movs	r1, #44	; 0x2c
 8002cae:	fb01 f303 	mul.w	r3, r1, r3
 8002cb2:	4413      	add	r3, r2
 8002cb4:	3361      	adds	r3, #97	; 0x61
 8002cb6:	2203      	movs	r2, #3
 8002cb8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	b2d2      	uxtb	r2, r2
 8002cc2:	4611      	mov	r1, r2
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f003 fa12 	bl	80060ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	015a      	lsls	r2, r3, #5
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	2310      	movs	r3, #16
 8002cda:	6093      	str	r3, [r2, #8]
}
 8002cdc:	bf00      	nop
 8002cde:	3718      	adds	r7, #24
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b088      	sub	sp, #32
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	460b      	mov	r3, r1
 8002cee:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002cfa:	78fb      	ldrb	r3, [r7, #3]
 8002cfc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	015a      	lsls	r2, r3, #5
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	4413      	add	r3, r2
 8002d06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f003 0304 	and.w	r3, r3, #4
 8002d10:	2b04      	cmp	r3, #4
 8002d12:	d11a      	bne.n	8002d4a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	015a      	lsls	r2, r3, #5
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d20:	461a      	mov	r2, r3
 8002d22:	2304      	movs	r3, #4
 8002d24:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	212c      	movs	r1, #44	; 0x2c
 8002d2c:	fb01 f303 	mul.w	r3, r1, r3
 8002d30:	4413      	add	r3, r2
 8002d32:	3361      	adds	r3, #97	; 0x61
 8002d34:	2206      	movs	r2, #6
 8002d36:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	697a      	ldr	r2, [r7, #20]
 8002d3e:	b2d2      	uxtb	r2, r2
 8002d40:	4611      	mov	r1, r2
 8002d42:	4618      	mov	r0, r3
 8002d44:	f003 f9d3 	bl	80060ee <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002d48:	e2ca      	b.n	80032e0 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	015a      	lsls	r2, r3, #5
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	4413      	add	r3, r2
 8002d52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f003 0320 	and.w	r3, r3, #32
 8002d5c:	2b20      	cmp	r3, #32
 8002d5e:	d12e      	bne.n	8002dbe <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	015a      	lsls	r2, r3, #5
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	4413      	add	r3, r2
 8002d68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	2320      	movs	r3, #32
 8002d70:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	212c      	movs	r1, #44	; 0x2c
 8002d78:	fb01 f303 	mul.w	r3, r1, r3
 8002d7c:	4413      	add	r3, r2
 8002d7e:	333d      	adds	r3, #61	; 0x3d
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	f040 82ac 	bne.w	80032e0 <HCD_HC_OUT_IRQHandler+0x5fc>
      hhcd->hc[ch_num].do_ping = 0U;
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	212c      	movs	r1, #44	; 0x2c
 8002d8e:	fb01 f303 	mul.w	r3, r1, r3
 8002d92:	4413      	add	r3, r2
 8002d94:	333d      	adds	r3, #61	; 0x3d
 8002d96:	2200      	movs	r2, #0
 8002d98:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	212c      	movs	r1, #44	; 0x2c
 8002da0:	fb01 f303 	mul.w	r3, r1, r3
 8002da4:	4413      	add	r3, r2
 8002da6:	3360      	adds	r3, #96	; 0x60
 8002da8:	2202      	movs	r2, #2
 8002daa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	697a      	ldr	r2, [r7, #20]
 8002db2:	b2d2      	uxtb	r2, r2
 8002db4:	4611      	mov	r1, r2
 8002db6:	4618      	mov	r0, r3
 8002db8:	f003 f999 	bl	80060ee <USB_HC_Halt>
}
 8002dbc:	e290      	b.n	80032e0 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	015a      	lsls	r2, r3, #5
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dd4:	d112      	bne.n	8002dfc <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	015a      	lsls	r2, r3, #5
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	4413      	add	r3, r2
 8002dde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de2:	461a      	mov	r2, r3
 8002de4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002de8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	697a      	ldr	r2, [r7, #20]
 8002df0:	b2d2      	uxtb	r2, r2
 8002df2:	4611      	mov	r1, r2
 8002df4:	4618      	mov	r0, r3
 8002df6:	f003 f97a 	bl	80060ee <USB_HC_Halt>
}
 8002dfa:	e271      	b.n	80032e0 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	015a      	lsls	r2, r3, #5
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	4413      	add	r3, r2
 8002e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d140      	bne.n	8002e94 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	212c      	movs	r1, #44	; 0x2c
 8002e18:	fb01 f303 	mul.w	r3, r1, r3
 8002e1c:	4413      	add	r3, r2
 8002e1e:	335c      	adds	r3, #92	; 0x5c
 8002e20:	2200      	movs	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	015a      	lsls	r2, r3, #5
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e36:	2b40      	cmp	r3, #64	; 0x40
 8002e38:	d111      	bne.n	8002e5e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	212c      	movs	r1, #44	; 0x2c
 8002e40:	fb01 f303 	mul.w	r3, r1, r3
 8002e44:	4413      	add	r3, r2
 8002e46:	333d      	adds	r3, #61	; 0x3d
 8002e48:	2201      	movs	r2, #1
 8002e4a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	015a      	lsls	r2, r3, #5
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	4413      	add	r3, r2
 8002e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e58:	461a      	mov	r2, r3
 8002e5a:	2340      	movs	r3, #64	; 0x40
 8002e5c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	015a      	lsls	r2, r3, #5
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	4413      	add	r3, r2
 8002e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	212c      	movs	r1, #44	; 0x2c
 8002e76:	fb01 f303 	mul.w	r3, r1, r3
 8002e7a:	4413      	add	r3, r2
 8002e7c:	3361      	adds	r3, #97	; 0x61
 8002e7e:	2201      	movs	r2, #1
 8002e80:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	b2d2      	uxtb	r2, r2
 8002e8a:	4611      	mov	r1, r2
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f003 f92e 	bl	80060ee <USB_HC_Halt>
}
 8002e92:	e225      	b.n	80032e0 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	015a      	lsls	r2, r3, #5
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea6:	2b40      	cmp	r3, #64	; 0x40
 8002ea8:	d12c      	bne.n	8002f04 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	212c      	movs	r1, #44	; 0x2c
 8002eb0:	fb01 f303 	mul.w	r3, r1, r3
 8002eb4:	4413      	add	r3, r2
 8002eb6:	3361      	adds	r3, #97	; 0x61
 8002eb8:	2204      	movs	r2, #4
 8002eba:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	212c      	movs	r1, #44	; 0x2c
 8002ec2:	fb01 f303 	mul.w	r3, r1, r3
 8002ec6:	4413      	add	r3, r2
 8002ec8:	333d      	adds	r3, #61	; 0x3d
 8002eca:	2201      	movs	r2, #1
 8002ecc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	212c      	movs	r1, #44	; 0x2c
 8002ed4:	fb01 f303 	mul.w	r3, r1, r3
 8002ed8:	4413      	add	r3, r2
 8002eda:	335c      	adds	r3, #92	; 0x5c
 8002edc:	2200      	movs	r2, #0
 8002ede:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	697a      	ldr	r2, [r7, #20]
 8002ee6:	b2d2      	uxtb	r2, r2
 8002ee8:	4611      	mov	r1, r2
 8002eea:	4618      	mov	r0, r3
 8002eec:	f003 f8ff 	bl	80060ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	015a      	lsls	r2, r3, #5
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002efc:	461a      	mov	r2, r3
 8002efe:	2340      	movs	r3, #64	; 0x40
 8002f00:	6093      	str	r3, [r2, #8]
}
 8002f02:	e1ed      	b.n	80032e0 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	015a      	lsls	r2, r3, #5
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f003 0308 	and.w	r3, r3, #8
 8002f16:	2b08      	cmp	r3, #8
 8002f18:	d11a      	bne.n	8002f50 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	015a      	lsls	r2, r3, #5
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	4413      	add	r3, r2
 8002f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f26:	461a      	mov	r2, r3
 8002f28:	2308      	movs	r3, #8
 8002f2a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	212c      	movs	r1, #44	; 0x2c
 8002f32:	fb01 f303 	mul.w	r3, r1, r3
 8002f36:	4413      	add	r3, r2
 8002f38:	3361      	adds	r3, #97	; 0x61
 8002f3a:	2205      	movs	r2, #5
 8002f3c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	b2d2      	uxtb	r2, r2
 8002f46:	4611      	mov	r1, r2
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f003 f8d0 	bl	80060ee <USB_HC_Halt>
}
 8002f4e:	e1c7      	b.n	80032e0 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	015a      	lsls	r2, r3, #5
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	4413      	add	r3, r2
 8002f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f003 0310 	and.w	r3, r3, #16
 8002f62:	2b10      	cmp	r3, #16
 8002f64:	d123      	bne.n	8002fae <HCD_HC_OUT_IRQHandler+0x2ca>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	212c      	movs	r1, #44	; 0x2c
 8002f6c:	fb01 f303 	mul.w	r3, r1, r3
 8002f70:	4413      	add	r3, r2
 8002f72:	335c      	adds	r3, #92	; 0x5c
 8002f74:	2200      	movs	r2, #0
 8002f76:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	212c      	movs	r1, #44	; 0x2c
 8002f7e:	fb01 f303 	mul.w	r3, r1, r3
 8002f82:	4413      	add	r3, r2
 8002f84:	3361      	adds	r3, #97	; 0x61
 8002f86:	2203      	movs	r2, #3
 8002f88:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	b2d2      	uxtb	r2, r2
 8002f92:	4611      	mov	r1, r2
 8002f94:	4618      	mov	r0, r3
 8002f96:	f003 f8aa 	bl	80060ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	015a      	lsls	r2, r3, #5
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	2310      	movs	r3, #16
 8002faa:	6093      	str	r3, [r2, #8]
}
 8002fac:	e198      	b.n	80032e0 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	015a      	lsls	r2, r3, #5
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc0:	2b80      	cmp	r3, #128	; 0x80
 8002fc2:	d11a      	bne.n	8002ffa <HCD_HC_OUT_IRQHandler+0x316>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	212c      	movs	r1, #44	; 0x2c
 8002fca:	fb01 f303 	mul.w	r3, r1, r3
 8002fce:	4413      	add	r3, r2
 8002fd0:	3361      	adds	r3, #97	; 0x61
 8002fd2:	2206      	movs	r2, #6
 8002fd4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	b2d2      	uxtb	r2, r2
 8002fde:	4611      	mov	r1, r2
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f003 f884 	bl	80060ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	015a      	lsls	r2, r3, #5
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	4413      	add	r3, r2
 8002fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	2380      	movs	r3, #128	; 0x80
 8002ff6:	6093      	str	r3, [r2, #8]
}
 8002ff8:	e172      	b.n	80032e0 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	015a      	lsls	r2, r3, #5
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	4413      	add	r3, r2
 8003002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800300c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003010:	d11b      	bne.n	800304a <HCD_HC_OUT_IRQHandler+0x366>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	212c      	movs	r1, #44	; 0x2c
 8003018:	fb01 f303 	mul.w	r3, r1, r3
 800301c:	4413      	add	r3, r2
 800301e:	3361      	adds	r3, #97	; 0x61
 8003020:	2208      	movs	r2, #8
 8003022:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	b2d2      	uxtb	r2, r2
 800302c:	4611      	mov	r1, r2
 800302e:	4618      	mov	r0, r3
 8003030:	f003 f85d 	bl	80060ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	015a      	lsls	r2, r3, #5
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	4413      	add	r3, r2
 800303c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003040:	461a      	mov	r2, r3
 8003042:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003046:	6093      	str	r3, [r2, #8]
}
 8003048:	e14a      	b.n	80032e0 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	015a      	lsls	r2, r3, #5
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	4413      	add	r3, r2
 8003052:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	2b02      	cmp	r3, #2
 800305e:	f040 813f 	bne.w	80032e0 <HCD_HC_OUT_IRQHandler+0x5fc>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	212c      	movs	r1, #44	; 0x2c
 8003068:	fb01 f303 	mul.w	r3, r1, r3
 800306c:	4413      	add	r3, r2
 800306e:	3361      	adds	r3, #97	; 0x61
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d17d      	bne.n	8003172 <HCD_HC_OUT_IRQHandler+0x48e>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	212c      	movs	r1, #44	; 0x2c
 800307c:	fb01 f303 	mul.w	r3, r1, r3
 8003080:	4413      	add	r3, r2
 8003082:	3360      	adds	r3, #96	; 0x60
 8003084:	2201      	movs	r2, #1
 8003086:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	212c      	movs	r1, #44	; 0x2c
 800308e:	fb01 f303 	mul.w	r3, r1, r3
 8003092:	4413      	add	r3, r2
 8003094:	333f      	adds	r3, #63	; 0x3f
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	2b02      	cmp	r3, #2
 800309a:	d00a      	beq.n	80030b2 <HCD_HC_OUT_IRQHandler+0x3ce>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	212c      	movs	r1, #44	; 0x2c
 80030a2:	fb01 f303 	mul.w	r3, r1, r3
 80030a6:	4413      	add	r3, r2
 80030a8:	333f      	adds	r3, #63	; 0x3f
 80030aa:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80030ac:	2b03      	cmp	r3, #3
 80030ae:	f040 8100 	bne.w	80032b2 <HCD_HC_OUT_IRQHandler+0x5ce>
        if (hhcd->Init.dma_enable == 0U)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d113      	bne.n	80030e2 <HCD_HC_OUT_IRQHandler+0x3fe>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	212c      	movs	r1, #44	; 0x2c
 80030c0:	fb01 f303 	mul.w	r3, r1, r3
 80030c4:	4413      	add	r3, r2
 80030c6:	3355      	adds	r3, #85	; 0x55
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	f083 0301 	eor.w	r3, r3, #1
 80030ce:	b2d8      	uxtb	r0, r3
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	212c      	movs	r1, #44	; 0x2c
 80030d6:	fb01 f303 	mul.w	r3, r1, r3
 80030da:	4413      	add	r3, r2
 80030dc:	3355      	adds	r3, #85	; 0x55
 80030de:	4602      	mov	r2, r0
 80030e0:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	f040 80e3 	bne.w	80032b2 <HCD_HC_OUT_IRQHandler+0x5ce>
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	212c      	movs	r1, #44	; 0x2c
 80030f2:	fb01 f303 	mul.w	r3, r1, r3
 80030f6:	4413      	add	r3, r2
 80030f8:	334c      	adds	r3, #76	; 0x4c
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f000 80d8 	beq.w	80032b2 <HCD_HC_OUT_IRQHandler+0x5ce>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	212c      	movs	r1, #44	; 0x2c
 8003108:	fb01 f303 	mul.w	r3, r1, r3
 800310c:	4413      	add	r3, r2
 800310e:	334c      	adds	r3, #76	; 0x4c
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6879      	ldr	r1, [r7, #4]
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	202c      	movs	r0, #44	; 0x2c
 8003118:	fb00 f202 	mul.w	r2, r0, r2
 800311c:	440a      	add	r2, r1
 800311e:	3240      	adds	r2, #64	; 0x40
 8003120:	8812      	ldrh	r2, [r2, #0]
 8003122:	4413      	add	r3, r2
 8003124:	3b01      	subs	r3, #1
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	697a      	ldr	r2, [r7, #20]
 800312a:	202c      	movs	r0, #44	; 0x2c
 800312c:	fb00 f202 	mul.w	r2, r0, r2
 8003130:	440a      	add	r2, r1
 8003132:	3240      	adds	r2, #64	; 0x40
 8003134:	8812      	ldrh	r2, [r2, #0]
 8003136:	fbb3 f3f2 	udiv	r3, r3, r2
 800313a:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	2b00      	cmp	r3, #0
 8003144:	f000 80b5 	beq.w	80032b2 <HCD_HC_OUT_IRQHandler+0x5ce>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	212c      	movs	r1, #44	; 0x2c
 800314e:	fb01 f303 	mul.w	r3, r1, r3
 8003152:	4413      	add	r3, r2
 8003154:	3355      	adds	r3, #85	; 0x55
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	f083 0301 	eor.w	r3, r3, #1
 800315c:	b2d8      	uxtb	r0, r3
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	212c      	movs	r1, #44	; 0x2c
 8003164:	fb01 f303 	mul.w	r3, r1, r3
 8003168:	4413      	add	r3, r2
 800316a:	3355      	adds	r3, #85	; 0x55
 800316c:	4602      	mov	r2, r0
 800316e:	701a      	strb	r2, [r3, #0]
 8003170:	e09f      	b.n	80032b2 <HCD_HC_OUT_IRQHandler+0x5ce>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	212c      	movs	r1, #44	; 0x2c
 8003178:	fb01 f303 	mul.w	r3, r1, r3
 800317c:	4413      	add	r3, r2
 800317e:	3361      	adds	r3, #97	; 0x61
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	2b03      	cmp	r3, #3
 8003184:	d109      	bne.n	800319a <HCD_HC_OUT_IRQHandler+0x4b6>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	212c      	movs	r1, #44	; 0x2c
 800318c:	fb01 f303 	mul.w	r3, r1, r3
 8003190:	4413      	add	r3, r2
 8003192:	3360      	adds	r3, #96	; 0x60
 8003194:	2202      	movs	r2, #2
 8003196:	701a      	strb	r2, [r3, #0]
 8003198:	e08b      	b.n	80032b2 <HCD_HC_OUT_IRQHandler+0x5ce>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	212c      	movs	r1, #44	; 0x2c
 80031a0:	fb01 f303 	mul.w	r3, r1, r3
 80031a4:	4413      	add	r3, r2
 80031a6:	3361      	adds	r3, #97	; 0x61
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	2b04      	cmp	r3, #4
 80031ac:	d109      	bne.n	80031c2 <HCD_HC_OUT_IRQHandler+0x4de>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	212c      	movs	r1, #44	; 0x2c
 80031b4:	fb01 f303 	mul.w	r3, r1, r3
 80031b8:	4413      	add	r3, r2
 80031ba:	3360      	adds	r3, #96	; 0x60
 80031bc:	2202      	movs	r2, #2
 80031be:	701a      	strb	r2, [r3, #0]
 80031c0:	e077      	b.n	80032b2 <HCD_HC_OUT_IRQHandler+0x5ce>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	212c      	movs	r1, #44	; 0x2c
 80031c8:	fb01 f303 	mul.w	r3, r1, r3
 80031cc:	4413      	add	r3, r2
 80031ce:	3361      	adds	r3, #97	; 0x61
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	2b05      	cmp	r3, #5
 80031d4:	d109      	bne.n	80031ea <HCD_HC_OUT_IRQHandler+0x506>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	212c      	movs	r1, #44	; 0x2c
 80031dc:	fb01 f303 	mul.w	r3, r1, r3
 80031e0:	4413      	add	r3, r2
 80031e2:	3360      	adds	r3, #96	; 0x60
 80031e4:	2205      	movs	r2, #5
 80031e6:	701a      	strb	r2, [r3, #0]
 80031e8:	e063      	b.n	80032b2 <HCD_HC_OUT_IRQHandler+0x5ce>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	212c      	movs	r1, #44	; 0x2c
 80031f0:	fb01 f303 	mul.w	r3, r1, r3
 80031f4:	4413      	add	r3, r2
 80031f6:	3361      	adds	r3, #97	; 0x61
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	2b06      	cmp	r3, #6
 80031fc:	d009      	beq.n	8003212 <HCD_HC_OUT_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	212c      	movs	r1, #44	; 0x2c
 8003204:	fb01 f303 	mul.w	r3, r1, r3
 8003208:	4413      	add	r3, r2
 800320a:	3361      	adds	r3, #97	; 0x61
 800320c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800320e:	2b08      	cmp	r3, #8
 8003210:	d14f      	bne.n	80032b2 <HCD_HC_OUT_IRQHandler+0x5ce>
      hhcd->hc[ch_num].ErrCnt++;
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	212c      	movs	r1, #44	; 0x2c
 8003218:	fb01 f303 	mul.w	r3, r1, r3
 800321c:	4413      	add	r3, r2
 800321e:	335c      	adds	r3, #92	; 0x5c
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	1c5a      	adds	r2, r3, #1
 8003224:	6879      	ldr	r1, [r7, #4]
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	202c      	movs	r0, #44	; 0x2c
 800322a:	fb00 f303 	mul.w	r3, r0, r3
 800322e:	440b      	add	r3, r1
 8003230:	335c      	adds	r3, #92	; 0x5c
 8003232:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	212c      	movs	r1, #44	; 0x2c
 800323a:	fb01 f303 	mul.w	r3, r1, r3
 800323e:	4413      	add	r3, r2
 8003240:	335c      	adds	r3, #92	; 0x5c
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2b02      	cmp	r3, #2
 8003246:	d912      	bls.n	800326e <HCD_HC_OUT_IRQHandler+0x58a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	212c      	movs	r1, #44	; 0x2c
 800324e:	fb01 f303 	mul.w	r3, r1, r3
 8003252:	4413      	add	r3, r2
 8003254:	335c      	adds	r3, #92	; 0x5c
 8003256:	2200      	movs	r2, #0
 8003258:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	212c      	movs	r1, #44	; 0x2c
 8003260:	fb01 f303 	mul.w	r3, r1, r3
 8003264:	4413      	add	r3, r2
 8003266:	3360      	adds	r3, #96	; 0x60
 8003268:	2204      	movs	r2, #4
 800326a:	701a      	strb	r2, [r3, #0]
 800326c:	e021      	b.n	80032b2 <HCD_HC_OUT_IRQHandler+0x5ce>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	212c      	movs	r1, #44	; 0x2c
 8003274:	fb01 f303 	mul.w	r3, r1, r3
 8003278:	4413      	add	r3, r2
 800327a:	3360      	adds	r3, #96	; 0x60
 800327c:	2202      	movs	r2, #2
 800327e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	015a      	lsls	r2, r3, #5
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	4413      	add	r3, r2
 8003288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003296:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800329e:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	015a      	lsls	r2, r3, #5
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	4413      	add	r3, r2
 80032a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ac:	461a      	mov	r2, r3
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	015a      	lsls	r2, r3, #5
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	4413      	add	r3, r2
 80032ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032be:	461a      	mov	r2, r3
 80032c0:	2302      	movs	r3, #2
 80032c2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	b2d9      	uxtb	r1, r3
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	202c      	movs	r0, #44	; 0x2c
 80032ce:	fb00 f303 	mul.w	r3, r0, r3
 80032d2:	4413      	add	r3, r2
 80032d4:	3360      	adds	r3, #96	; 0x60
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	461a      	mov	r2, r3
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f009 fe02 	bl	800cee4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80032e0:	bf00      	nop
 80032e2:	3720      	adds	r7, #32
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b08a      	sub	sp, #40	; 0x28
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f8:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	6a1b      	ldr	r3, [r3, #32]
 8003300:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	f003 030f 	and.w	r3, r3, #15
 8003308:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	0c5b      	lsrs	r3, r3, #17
 800330e:	f003 030f 	and.w	r3, r3, #15
 8003312:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	091b      	lsrs	r3, r3, #4
 8003318:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800331c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	2b02      	cmp	r3, #2
 8003322:	d004      	beq.n	800332e <HCD_RXQLVL_IRQHandler+0x46>
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	2b05      	cmp	r3, #5
 8003328:	f000 80a9 	beq.w	800347e <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800332c:	e0aa      	b.n	8003484 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	2b00      	cmp	r3, #0
 8003332:	f000 80a6 	beq.w	8003482 <HCD_RXQLVL_IRQHandler+0x19a>
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	212c      	movs	r1, #44	; 0x2c
 800333c:	fb01 f303 	mul.w	r3, r1, r3
 8003340:	4413      	add	r3, r2
 8003342:	3344      	adds	r3, #68	; 0x44
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2b00      	cmp	r3, #0
 8003348:	f000 809b 	beq.w	8003482 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	212c      	movs	r1, #44	; 0x2c
 8003352:	fb01 f303 	mul.w	r3, r1, r3
 8003356:	4413      	add	r3, r2
 8003358:	3350      	adds	r3, #80	; 0x50
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	441a      	add	r2, r3
 8003360:	6879      	ldr	r1, [r7, #4]
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	202c      	movs	r0, #44	; 0x2c
 8003366:	fb00 f303 	mul.w	r3, r0, r3
 800336a:	440b      	add	r3, r1
 800336c:	334c      	adds	r3, #76	; 0x4c
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	429a      	cmp	r2, r3
 8003372:	d87a      	bhi.n	800346a <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6818      	ldr	r0, [r3, #0]
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	212c      	movs	r1, #44	; 0x2c
 800337e:	fb01 f303 	mul.w	r3, r1, r3
 8003382:	4413      	add	r3, r2
 8003384:	3344      	adds	r3, #68	; 0x44
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	b292      	uxth	r2, r2
 800338c:	4619      	mov	r1, r3
 800338e:	f002 faa3 	bl	80058d8 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	212c      	movs	r1, #44	; 0x2c
 8003398:	fb01 f303 	mul.w	r3, r1, r3
 800339c:	4413      	add	r3, r2
 800339e:	3344      	adds	r3, #68	; 0x44
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	441a      	add	r2, r3
 80033a6:	6879      	ldr	r1, [r7, #4]
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	202c      	movs	r0, #44	; 0x2c
 80033ac:	fb00 f303 	mul.w	r3, r0, r3
 80033b0:	440b      	add	r3, r1
 80033b2:	3344      	adds	r3, #68	; 0x44
 80033b4:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	212c      	movs	r1, #44	; 0x2c
 80033bc:	fb01 f303 	mul.w	r3, r1, r3
 80033c0:	4413      	add	r3, r2
 80033c2:	3350      	adds	r3, #80	; 0x50
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	441a      	add	r2, r3
 80033ca:	6879      	ldr	r1, [r7, #4]
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	202c      	movs	r0, #44	; 0x2c
 80033d0:	fb00 f303 	mul.w	r3, r0, r3
 80033d4:	440b      	add	r3, r1
 80033d6:	3350      	adds	r3, #80	; 0x50
 80033d8:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	015a      	lsls	r2, r3, #5
 80033de:	6a3b      	ldr	r3, [r7, #32]
 80033e0:	4413      	add	r3, r2
 80033e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	0cdb      	lsrs	r3, r3, #19
 80033ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033ee:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	212c      	movs	r1, #44	; 0x2c
 80033f6:	fb01 f303 	mul.w	r3, r1, r3
 80033fa:	4413      	add	r3, r2
 80033fc:	3340      	adds	r3, #64	; 0x40
 80033fe:	881b      	ldrh	r3, [r3, #0]
 8003400:	461a      	mov	r2, r3
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	4293      	cmp	r3, r2
 8003406:	d13c      	bne.n	8003482 <HCD_RXQLVL_IRQHandler+0x19a>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d039      	beq.n	8003482 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	015a      	lsls	r2, r3, #5
 8003412:	6a3b      	ldr	r3, [r7, #32]
 8003414:	4413      	add	r3, r2
 8003416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003424:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800342c:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	015a      	lsls	r2, r3, #5
 8003432:	6a3b      	ldr	r3, [r7, #32]
 8003434:	4413      	add	r3, r2
 8003436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800343a:	461a      	mov	r2, r3
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	212c      	movs	r1, #44	; 0x2c
 8003446:	fb01 f303 	mul.w	r3, r1, r3
 800344a:	4413      	add	r3, r2
 800344c:	3354      	adds	r3, #84	; 0x54
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	f083 0301 	eor.w	r3, r3, #1
 8003454:	b2d8      	uxtb	r0, r3
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	212c      	movs	r1, #44	; 0x2c
 800345c:	fb01 f303 	mul.w	r3, r1, r3
 8003460:	4413      	add	r3, r2
 8003462:	3354      	adds	r3, #84	; 0x54
 8003464:	4602      	mov	r2, r0
 8003466:	701a      	strb	r2, [r3, #0]
      break;
 8003468:	e00b      	b.n	8003482 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	212c      	movs	r1, #44	; 0x2c
 8003470:	fb01 f303 	mul.w	r3, r1, r3
 8003474:	4413      	add	r3, r2
 8003476:	3360      	adds	r3, #96	; 0x60
 8003478:	2204      	movs	r2, #4
 800347a:	701a      	strb	r2, [r3, #0]
      break;
 800347c:	e001      	b.n	8003482 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800347e:	bf00      	nop
 8003480:	e000      	b.n	8003484 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003482:	bf00      	nop
  }
}
 8003484:	bf00      	nop
 8003486:	3728      	adds	r7, #40	; 0x28
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b086      	sub	sp, #24
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80034b8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d10b      	bne.n	80034dc <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d102      	bne.n	80034d4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f009 fcec 	bl	800ceac <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	f043 0302 	orr.w	r3, r3, #2
 80034da:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f003 0308 	and.w	r3, r3, #8
 80034e2:	2b08      	cmp	r3, #8
 80034e4:	d132      	bne.n	800354c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	f043 0308 	orr.w	r3, r3, #8
 80034ec:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f003 0304 	and.w	r3, r3, #4
 80034f4:	2b04      	cmp	r3, #4
 80034f6:	d126      	bne.n	8003546 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d113      	bne.n	8003528 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003506:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800350a:	d106      	bne.n	800351a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2102      	movs	r1, #2
 8003512:	4618      	mov	r0, r3
 8003514:	f002 fb10 	bl	8005b38 <USB_InitFSLSPClkSel>
 8003518:	e011      	b.n	800353e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2101      	movs	r1, #1
 8003520:	4618      	mov	r0, r3
 8003522:	f002 fb09 	bl	8005b38 <USB_InitFSLSPClkSel>
 8003526:	e00a      	b.n	800353e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d106      	bne.n	800353e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003536:	461a      	mov	r2, r3
 8003538:	f64e 2360 	movw	r3, #60000	; 0xea60
 800353c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f009 fcde 	bl	800cf00 <HAL_HCD_PortEnabled_Callback>
 8003544:	e002      	b.n	800354c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f009 fce8 	bl	800cf1c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f003 0320 	and.w	r3, r3, #32
 8003552:	2b20      	cmp	r3, #32
 8003554:	d103      	bne.n	800355e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	f043 0320 	orr.w	r3, r3, #32
 800355c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003564:	461a      	mov	r2, r3
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	6013      	str	r3, [r2, #0]
}
 800356a:	bf00      	nop
 800356c:	3718      	adds	r7, #24
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
	...

08003574 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003578:	4b04      	ldr	r3, [pc, #16]	; (800358c <HAL_PWREx_GetVoltageRange+0x18>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003580:	4618      	mov	r0, r3
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	40007000 	.word	0x40007000

08003590 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003590:	b480      	push	{r7}
 8003592:	b085      	sub	sp, #20
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800359e:	d130      	bne.n	8003602 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80035a0:	4b23      	ldr	r3, [pc, #140]	; (8003630 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80035a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035ac:	d038      	beq.n	8003620 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80035ae:	4b20      	ldr	r3, [pc, #128]	; (8003630 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80035b6:	4a1e      	ldr	r2, [pc, #120]	; (8003630 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035bc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80035be:	4b1d      	ldr	r3, [pc, #116]	; (8003634 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2232      	movs	r2, #50	; 0x32
 80035c4:	fb02 f303 	mul.w	r3, r2, r3
 80035c8:	4a1b      	ldr	r2, [pc, #108]	; (8003638 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80035ca:	fba2 2303 	umull	r2, r3, r2, r3
 80035ce:	0c9b      	lsrs	r3, r3, #18
 80035d0:	3301      	adds	r3, #1
 80035d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035d4:	e002      	b.n	80035dc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	3b01      	subs	r3, #1
 80035da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035dc:	4b14      	ldr	r3, [pc, #80]	; (8003630 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035de:	695b      	ldr	r3, [r3, #20]
 80035e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035e8:	d102      	bne.n	80035f0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1f2      	bne.n	80035d6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80035f0:	4b0f      	ldr	r3, [pc, #60]	; (8003630 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035f2:	695b      	ldr	r3, [r3, #20]
 80035f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035fc:	d110      	bne.n	8003620 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e00f      	b.n	8003622 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003602:	4b0b      	ldr	r3, [pc, #44]	; (8003630 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800360a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800360e:	d007      	beq.n	8003620 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003610:	4b07      	ldr	r3, [pc, #28]	; (8003630 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003618:	4a05      	ldr	r2, [pc, #20]	; (8003630 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800361a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800361e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3714      	adds	r7, #20
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	40007000 	.word	0x40007000
 8003634:	20000000 	.word	0x20000000
 8003638:	431bde83 	.word	0x431bde83

0800363c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800363c:	b480      	push	{r7}
 800363e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003640:	4b05      	ldr	r3, [pc, #20]	; (8003658 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	4a04      	ldr	r2, [pc, #16]	; (8003658 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003646:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800364a:	6053      	str	r3, [r2, #4]
}
 800364c:	bf00      	nop
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	40007000 	.word	0x40007000

0800365c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b088      	sub	sp, #32
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e3ca      	b.n	8003e04 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800366e:	4b97      	ldr	r3, [pc, #604]	; (80038cc <HAL_RCC_OscConfig+0x270>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f003 030c 	and.w	r3, r3, #12
 8003676:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003678:	4b94      	ldr	r3, [pc, #592]	; (80038cc <HAL_RCC_OscConfig+0x270>)
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	f003 0303 	and.w	r3, r3, #3
 8003680:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0310 	and.w	r3, r3, #16
 800368a:	2b00      	cmp	r3, #0
 800368c:	f000 80e4 	beq.w	8003858 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d007      	beq.n	80036a6 <HAL_RCC_OscConfig+0x4a>
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	2b0c      	cmp	r3, #12
 800369a:	f040 808b 	bne.w	80037b4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	f040 8087 	bne.w	80037b4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80036a6:	4b89      	ldr	r3, [pc, #548]	; (80038cc <HAL_RCC_OscConfig+0x270>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d005      	beq.n	80036be <HAL_RCC_OscConfig+0x62>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d101      	bne.n	80036be <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e3a2      	b.n	8003e04 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a1a      	ldr	r2, [r3, #32]
 80036c2:	4b82      	ldr	r3, [pc, #520]	; (80038cc <HAL_RCC_OscConfig+0x270>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0308 	and.w	r3, r3, #8
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d004      	beq.n	80036d8 <HAL_RCC_OscConfig+0x7c>
 80036ce:	4b7f      	ldr	r3, [pc, #508]	; (80038cc <HAL_RCC_OscConfig+0x270>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036d6:	e005      	b.n	80036e4 <HAL_RCC_OscConfig+0x88>
 80036d8:	4b7c      	ldr	r3, [pc, #496]	; (80038cc <HAL_RCC_OscConfig+0x270>)
 80036da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036de:	091b      	lsrs	r3, r3, #4
 80036e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d223      	bcs.n	8003730 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a1b      	ldr	r3, [r3, #32]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f000 fd55 	bl	800419c <RCC_SetFlashLatencyFromMSIRange>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d001      	beq.n	80036fc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e383      	b.n	8003e04 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036fc:	4b73      	ldr	r3, [pc, #460]	; (80038cc <HAL_RCC_OscConfig+0x270>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a72      	ldr	r2, [pc, #456]	; (80038cc <HAL_RCC_OscConfig+0x270>)
 8003702:	f043 0308 	orr.w	r3, r3, #8
 8003706:	6013      	str	r3, [r2, #0]
 8003708:	4b70      	ldr	r3, [pc, #448]	; (80038cc <HAL_RCC_OscConfig+0x270>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	496d      	ldr	r1, [pc, #436]	; (80038cc <HAL_RCC_OscConfig+0x270>)
 8003716:	4313      	orrs	r3, r2
 8003718:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800371a:	4b6c      	ldr	r3, [pc, #432]	; (80038cc <HAL_RCC_OscConfig+0x270>)
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	021b      	lsls	r3, r3, #8
 8003728:	4968      	ldr	r1, [pc, #416]	; (80038cc <HAL_RCC_OscConfig+0x270>)
 800372a:	4313      	orrs	r3, r2
 800372c:	604b      	str	r3, [r1, #4]
 800372e:	e025      	b.n	800377c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003730:	4b66      	ldr	r3, [pc, #408]	; (80038cc <HAL_RCC_OscConfig+0x270>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a65      	ldr	r2, [pc, #404]	; (80038cc <HAL_RCC_OscConfig+0x270>)
 8003736:	f043 0308 	orr.w	r3, r3, #8
 800373a:	6013      	str	r3, [r2, #0]
 800373c:	4b63      	ldr	r3, [pc, #396]	; (80038cc <HAL_RCC_OscConfig+0x270>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a1b      	ldr	r3, [r3, #32]
 8003748:	4960      	ldr	r1, [pc, #384]	; (80038cc <HAL_RCC_OscConfig+0x270>)
 800374a:	4313      	orrs	r3, r2
 800374c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800374e:	4b5f      	ldr	r3, [pc, #380]	; (80038cc <HAL_RCC_OscConfig+0x270>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	69db      	ldr	r3, [r3, #28]
 800375a:	021b      	lsls	r3, r3, #8
 800375c:	495b      	ldr	r1, [pc, #364]	; (80038cc <HAL_RCC_OscConfig+0x270>)
 800375e:	4313      	orrs	r3, r2
 8003760:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d109      	bne.n	800377c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a1b      	ldr	r3, [r3, #32]
 800376c:	4618      	mov	r0, r3
 800376e:	f000 fd15 	bl	800419c <RCC_SetFlashLatencyFromMSIRange>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d001      	beq.n	800377c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e343      	b.n	8003e04 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800377c:	f000 fc4a 	bl	8004014 <HAL_RCC_GetSysClockFreq>
 8003780:	4602      	mov	r2, r0
 8003782:	4b52      	ldr	r3, [pc, #328]	; (80038cc <HAL_RCC_OscConfig+0x270>)
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	091b      	lsrs	r3, r3, #4
 8003788:	f003 030f 	and.w	r3, r3, #15
 800378c:	4950      	ldr	r1, [pc, #320]	; (80038d0 <HAL_RCC_OscConfig+0x274>)
 800378e:	5ccb      	ldrb	r3, [r1, r3]
 8003790:	f003 031f 	and.w	r3, r3, #31
 8003794:	fa22 f303 	lsr.w	r3, r2, r3
 8003798:	4a4e      	ldr	r2, [pc, #312]	; (80038d4 <HAL_RCC_OscConfig+0x278>)
 800379a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800379c:	4b4e      	ldr	r3, [pc, #312]	; (80038d8 <HAL_RCC_OscConfig+0x27c>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7fe f815 	bl	80017d0 <HAL_InitTick>
 80037a6:	4603      	mov	r3, r0
 80037a8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80037aa:	7bfb      	ldrb	r3, [r7, #15]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d052      	beq.n	8003856 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80037b0:	7bfb      	ldrb	r3, [r7, #15]
 80037b2:	e327      	b.n	8003e04 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d032      	beq.n	8003822 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80037bc:	4b43      	ldr	r3, [pc, #268]	; (80038cc <HAL_RCC_OscConfig+0x270>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a42      	ldr	r2, [pc, #264]	; (80038cc <HAL_RCC_OscConfig+0x270>)
 80037c2:	f043 0301 	orr.w	r3, r3, #1
 80037c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80037c8:	f7fe f852 	bl	8001870 <HAL_GetTick>
 80037cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037ce:	e008      	b.n	80037e2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80037d0:	f7fe f84e 	bl	8001870 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e310      	b.n	8003e04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037e2:	4b3a      	ldr	r3, [pc, #232]	; (80038cc <HAL_RCC_OscConfig+0x270>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d0f0      	beq.n	80037d0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037ee:	4b37      	ldr	r3, [pc, #220]	; (80038cc <HAL_RCC_OscConfig+0x270>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a36      	ldr	r2, [pc, #216]	; (80038cc <HAL_RCC_OscConfig+0x270>)
 80037f4:	f043 0308 	orr.w	r3, r3, #8
 80037f8:	6013      	str	r3, [r2, #0]
 80037fa:	4b34      	ldr	r3, [pc, #208]	; (80038cc <HAL_RCC_OscConfig+0x270>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	4931      	ldr	r1, [pc, #196]	; (80038cc <HAL_RCC_OscConfig+0x270>)
 8003808:	4313      	orrs	r3, r2
 800380a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800380c:	4b2f      	ldr	r3, [pc, #188]	; (80038cc <HAL_RCC_OscConfig+0x270>)
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	69db      	ldr	r3, [r3, #28]
 8003818:	021b      	lsls	r3, r3, #8
 800381a:	492c      	ldr	r1, [pc, #176]	; (80038cc <HAL_RCC_OscConfig+0x270>)
 800381c:	4313      	orrs	r3, r2
 800381e:	604b      	str	r3, [r1, #4]
 8003820:	e01a      	b.n	8003858 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003822:	4b2a      	ldr	r3, [pc, #168]	; (80038cc <HAL_RCC_OscConfig+0x270>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a29      	ldr	r2, [pc, #164]	; (80038cc <HAL_RCC_OscConfig+0x270>)
 8003828:	f023 0301 	bic.w	r3, r3, #1
 800382c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800382e:	f7fe f81f 	bl	8001870 <HAL_GetTick>
 8003832:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003834:	e008      	b.n	8003848 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003836:	f7fe f81b 	bl	8001870 <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	2b02      	cmp	r3, #2
 8003842:	d901      	bls.n	8003848 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e2dd      	b.n	8003e04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003848:	4b20      	ldr	r3, [pc, #128]	; (80038cc <HAL_RCC_OscConfig+0x270>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d1f0      	bne.n	8003836 <HAL_RCC_OscConfig+0x1da>
 8003854:	e000      	b.n	8003858 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003856:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0301 	and.w	r3, r3, #1
 8003860:	2b00      	cmp	r3, #0
 8003862:	d074      	beq.n	800394e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	2b08      	cmp	r3, #8
 8003868:	d005      	beq.n	8003876 <HAL_RCC_OscConfig+0x21a>
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	2b0c      	cmp	r3, #12
 800386e:	d10e      	bne.n	800388e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	2b03      	cmp	r3, #3
 8003874:	d10b      	bne.n	800388e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003876:	4b15      	ldr	r3, [pc, #84]	; (80038cc <HAL_RCC_OscConfig+0x270>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d064      	beq.n	800394c <HAL_RCC_OscConfig+0x2f0>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d160      	bne.n	800394c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e2ba      	b.n	8003e04 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003896:	d106      	bne.n	80038a6 <HAL_RCC_OscConfig+0x24a>
 8003898:	4b0c      	ldr	r3, [pc, #48]	; (80038cc <HAL_RCC_OscConfig+0x270>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a0b      	ldr	r2, [pc, #44]	; (80038cc <HAL_RCC_OscConfig+0x270>)
 800389e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038a2:	6013      	str	r3, [r2, #0]
 80038a4:	e026      	b.n	80038f4 <HAL_RCC_OscConfig+0x298>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038ae:	d115      	bne.n	80038dc <HAL_RCC_OscConfig+0x280>
 80038b0:	4b06      	ldr	r3, [pc, #24]	; (80038cc <HAL_RCC_OscConfig+0x270>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a05      	ldr	r2, [pc, #20]	; (80038cc <HAL_RCC_OscConfig+0x270>)
 80038b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038ba:	6013      	str	r3, [r2, #0]
 80038bc:	4b03      	ldr	r3, [pc, #12]	; (80038cc <HAL_RCC_OscConfig+0x270>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a02      	ldr	r2, [pc, #8]	; (80038cc <HAL_RCC_OscConfig+0x270>)
 80038c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038c6:	6013      	str	r3, [r2, #0]
 80038c8:	e014      	b.n	80038f4 <HAL_RCC_OscConfig+0x298>
 80038ca:	bf00      	nop
 80038cc:	40021000 	.word	0x40021000
 80038d0:	0800e338 	.word	0x0800e338
 80038d4:	20000000 	.word	0x20000000
 80038d8:	20000004 	.word	0x20000004
 80038dc:	4ba0      	ldr	r3, [pc, #640]	; (8003b60 <HAL_RCC_OscConfig+0x504>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a9f      	ldr	r2, [pc, #636]	; (8003b60 <HAL_RCC_OscConfig+0x504>)
 80038e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038e6:	6013      	str	r3, [r2, #0]
 80038e8:	4b9d      	ldr	r3, [pc, #628]	; (8003b60 <HAL_RCC_OscConfig+0x504>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a9c      	ldr	r2, [pc, #624]	; (8003b60 <HAL_RCC_OscConfig+0x504>)
 80038ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d013      	beq.n	8003924 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038fc:	f7fd ffb8 	bl	8001870 <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003902:	e008      	b.n	8003916 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003904:	f7fd ffb4 	bl	8001870 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b64      	cmp	r3, #100	; 0x64
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e276      	b.n	8003e04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003916:	4b92      	ldr	r3, [pc, #584]	; (8003b60 <HAL_RCC_OscConfig+0x504>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d0f0      	beq.n	8003904 <HAL_RCC_OscConfig+0x2a8>
 8003922:	e014      	b.n	800394e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003924:	f7fd ffa4 	bl	8001870 <HAL_GetTick>
 8003928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800392a:	e008      	b.n	800393e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800392c:	f7fd ffa0 	bl	8001870 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b64      	cmp	r3, #100	; 0x64
 8003938:	d901      	bls.n	800393e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e262      	b.n	8003e04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800393e:	4b88      	ldr	r3, [pc, #544]	; (8003b60 <HAL_RCC_OscConfig+0x504>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1f0      	bne.n	800392c <HAL_RCC_OscConfig+0x2d0>
 800394a:	e000      	b.n	800394e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800394c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0302 	and.w	r3, r3, #2
 8003956:	2b00      	cmp	r3, #0
 8003958:	d060      	beq.n	8003a1c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	2b04      	cmp	r3, #4
 800395e:	d005      	beq.n	800396c <HAL_RCC_OscConfig+0x310>
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	2b0c      	cmp	r3, #12
 8003964:	d119      	bne.n	800399a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	2b02      	cmp	r3, #2
 800396a:	d116      	bne.n	800399a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800396c:	4b7c      	ldr	r3, [pc, #496]	; (8003b60 <HAL_RCC_OscConfig+0x504>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003974:	2b00      	cmp	r3, #0
 8003976:	d005      	beq.n	8003984 <HAL_RCC_OscConfig+0x328>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d101      	bne.n	8003984 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e23f      	b.n	8003e04 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003984:	4b76      	ldr	r3, [pc, #472]	; (8003b60 <HAL_RCC_OscConfig+0x504>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	061b      	lsls	r3, r3, #24
 8003992:	4973      	ldr	r1, [pc, #460]	; (8003b60 <HAL_RCC_OscConfig+0x504>)
 8003994:	4313      	orrs	r3, r2
 8003996:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003998:	e040      	b.n	8003a1c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d023      	beq.n	80039ea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039a2:	4b6f      	ldr	r3, [pc, #444]	; (8003b60 <HAL_RCC_OscConfig+0x504>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a6e      	ldr	r2, [pc, #440]	; (8003b60 <HAL_RCC_OscConfig+0x504>)
 80039a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ae:	f7fd ff5f 	bl	8001870 <HAL_GetTick>
 80039b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039b4:	e008      	b.n	80039c8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039b6:	f7fd ff5b 	bl	8001870 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d901      	bls.n	80039c8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e21d      	b.n	8003e04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039c8:	4b65      	ldr	r3, [pc, #404]	; (8003b60 <HAL_RCC_OscConfig+0x504>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d0f0      	beq.n	80039b6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039d4:	4b62      	ldr	r3, [pc, #392]	; (8003b60 <HAL_RCC_OscConfig+0x504>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	061b      	lsls	r3, r3, #24
 80039e2:	495f      	ldr	r1, [pc, #380]	; (8003b60 <HAL_RCC_OscConfig+0x504>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	604b      	str	r3, [r1, #4]
 80039e8:	e018      	b.n	8003a1c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039ea:	4b5d      	ldr	r3, [pc, #372]	; (8003b60 <HAL_RCC_OscConfig+0x504>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a5c      	ldr	r2, [pc, #368]	; (8003b60 <HAL_RCC_OscConfig+0x504>)
 80039f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f6:	f7fd ff3b 	bl	8001870 <HAL_GetTick>
 80039fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039fc:	e008      	b.n	8003a10 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039fe:	f7fd ff37 	bl	8001870 <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d901      	bls.n	8003a10 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e1f9      	b.n	8003e04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a10:	4b53      	ldr	r3, [pc, #332]	; (8003b60 <HAL_RCC_OscConfig+0x504>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1f0      	bne.n	80039fe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0308 	and.w	r3, r3, #8
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d03c      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d01c      	beq.n	8003a6a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a30:	4b4b      	ldr	r3, [pc, #300]	; (8003b60 <HAL_RCC_OscConfig+0x504>)
 8003a32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a36:	4a4a      	ldr	r2, [pc, #296]	; (8003b60 <HAL_RCC_OscConfig+0x504>)
 8003a38:	f043 0301 	orr.w	r3, r3, #1
 8003a3c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a40:	f7fd ff16 	bl	8001870 <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a46:	e008      	b.n	8003a5a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a48:	f7fd ff12 	bl	8001870 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e1d4      	b.n	8003e04 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a5a:	4b41      	ldr	r3, [pc, #260]	; (8003b60 <HAL_RCC_OscConfig+0x504>)
 8003a5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d0ef      	beq.n	8003a48 <HAL_RCC_OscConfig+0x3ec>
 8003a68:	e01b      	b.n	8003aa2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a6a:	4b3d      	ldr	r3, [pc, #244]	; (8003b60 <HAL_RCC_OscConfig+0x504>)
 8003a6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a70:	4a3b      	ldr	r2, [pc, #236]	; (8003b60 <HAL_RCC_OscConfig+0x504>)
 8003a72:	f023 0301 	bic.w	r3, r3, #1
 8003a76:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a7a:	f7fd fef9 	bl	8001870 <HAL_GetTick>
 8003a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a80:	e008      	b.n	8003a94 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a82:	f7fd fef5 	bl	8001870 <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d901      	bls.n	8003a94 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e1b7      	b.n	8003e04 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a94:	4b32      	ldr	r3, [pc, #200]	; (8003b60 <HAL_RCC_OscConfig+0x504>)
 8003a96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1ef      	bne.n	8003a82 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0304 	and.w	r3, r3, #4
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	f000 80a6 	beq.w	8003bfc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003ab4:	4b2a      	ldr	r3, [pc, #168]	; (8003b60 <HAL_RCC_OscConfig+0x504>)
 8003ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d10d      	bne.n	8003adc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ac0:	4b27      	ldr	r3, [pc, #156]	; (8003b60 <HAL_RCC_OscConfig+0x504>)
 8003ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac4:	4a26      	ldr	r2, [pc, #152]	; (8003b60 <HAL_RCC_OscConfig+0x504>)
 8003ac6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aca:	6593      	str	r3, [r2, #88]	; 0x58
 8003acc:	4b24      	ldr	r3, [pc, #144]	; (8003b60 <HAL_RCC_OscConfig+0x504>)
 8003ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ad4:	60bb      	str	r3, [r7, #8]
 8003ad6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003adc:	4b21      	ldr	r3, [pc, #132]	; (8003b64 <HAL_RCC_OscConfig+0x508>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d118      	bne.n	8003b1a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ae8:	4b1e      	ldr	r3, [pc, #120]	; (8003b64 <HAL_RCC_OscConfig+0x508>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a1d      	ldr	r2, [pc, #116]	; (8003b64 <HAL_RCC_OscConfig+0x508>)
 8003aee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003af2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003af4:	f7fd febc 	bl	8001870 <HAL_GetTick>
 8003af8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003afa:	e008      	b.n	8003b0e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003afc:	f7fd feb8 	bl	8001870 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e17a      	b.n	8003e04 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b0e:	4b15      	ldr	r3, [pc, #84]	; (8003b64 <HAL_RCC_OscConfig+0x508>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d0f0      	beq.n	8003afc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d108      	bne.n	8003b34 <HAL_RCC_OscConfig+0x4d8>
 8003b22:	4b0f      	ldr	r3, [pc, #60]	; (8003b60 <HAL_RCC_OscConfig+0x504>)
 8003b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b28:	4a0d      	ldr	r2, [pc, #52]	; (8003b60 <HAL_RCC_OscConfig+0x504>)
 8003b2a:	f043 0301 	orr.w	r3, r3, #1
 8003b2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b32:	e029      	b.n	8003b88 <HAL_RCC_OscConfig+0x52c>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	2b05      	cmp	r3, #5
 8003b3a:	d115      	bne.n	8003b68 <HAL_RCC_OscConfig+0x50c>
 8003b3c:	4b08      	ldr	r3, [pc, #32]	; (8003b60 <HAL_RCC_OscConfig+0x504>)
 8003b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b42:	4a07      	ldr	r2, [pc, #28]	; (8003b60 <HAL_RCC_OscConfig+0x504>)
 8003b44:	f043 0304 	orr.w	r3, r3, #4
 8003b48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b4c:	4b04      	ldr	r3, [pc, #16]	; (8003b60 <HAL_RCC_OscConfig+0x504>)
 8003b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b52:	4a03      	ldr	r2, [pc, #12]	; (8003b60 <HAL_RCC_OscConfig+0x504>)
 8003b54:	f043 0301 	orr.w	r3, r3, #1
 8003b58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b5c:	e014      	b.n	8003b88 <HAL_RCC_OscConfig+0x52c>
 8003b5e:	bf00      	nop
 8003b60:	40021000 	.word	0x40021000
 8003b64:	40007000 	.word	0x40007000
 8003b68:	4b9c      	ldr	r3, [pc, #624]	; (8003ddc <HAL_RCC_OscConfig+0x780>)
 8003b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b6e:	4a9b      	ldr	r2, [pc, #620]	; (8003ddc <HAL_RCC_OscConfig+0x780>)
 8003b70:	f023 0301 	bic.w	r3, r3, #1
 8003b74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b78:	4b98      	ldr	r3, [pc, #608]	; (8003ddc <HAL_RCC_OscConfig+0x780>)
 8003b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b7e:	4a97      	ldr	r2, [pc, #604]	; (8003ddc <HAL_RCC_OscConfig+0x780>)
 8003b80:	f023 0304 	bic.w	r3, r3, #4
 8003b84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d016      	beq.n	8003bbe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b90:	f7fd fe6e 	bl	8001870 <HAL_GetTick>
 8003b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b96:	e00a      	b.n	8003bae <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b98:	f7fd fe6a 	bl	8001870 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e12a      	b.n	8003e04 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bae:	4b8b      	ldr	r3, [pc, #556]	; (8003ddc <HAL_RCC_OscConfig+0x780>)
 8003bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb4:	f003 0302 	and.w	r3, r3, #2
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d0ed      	beq.n	8003b98 <HAL_RCC_OscConfig+0x53c>
 8003bbc:	e015      	b.n	8003bea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bbe:	f7fd fe57 	bl	8001870 <HAL_GetTick>
 8003bc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bc4:	e00a      	b.n	8003bdc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bc6:	f7fd fe53 	bl	8001870 <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d901      	bls.n	8003bdc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e113      	b.n	8003e04 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bdc:	4b7f      	ldr	r3, [pc, #508]	; (8003ddc <HAL_RCC_OscConfig+0x780>)
 8003bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1ed      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bea:	7ffb      	ldrb	r3, [r7, #31]
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d105      	bne.n	8003bfc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bf0:	4b7a      	ldr	r3, [pc, #488]	; (8003ddc <HAL_RCC_OscConfig+0x780>)
 8003bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf4:	4a79      	ldr	r2, [pc, #484]	; (8003ddc <HAL_RCC_OscConfig+0x780>)
 8003bf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bfa:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f000 80fe 	beq.w	8003e02 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	f040 80d0 	bne.w	8003db0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003c10:	4b72      	ldr	r3, [pc, #456]	; (8003ddc <HAL_RCC_OscConfig+0x780>)
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	f003 0203 	and.w	r2, r3, #3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d130      	bne.n	8003c86 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d127      	bne.n	8003c86 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c40:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d11f      	bne.n	8003c86 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c50:	2a07      	cmp	r2, #7
 8003c52:	bf14      	ite	ne
 8003c54:	2201      	movne	r2, #1
 8003c56:	2200      	moveq	r2, #0
 8003c58:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d113      	bne.n	8003c86 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c68:	085b      	lsrs	r3, r3, #1
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d109      	bne.n	8003c86 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7c:	085b      	lsrs	r3, r3, #1
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d06e      	beq.n	8003d64 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	2b0c      	cmp	r3, #12
 8003c8a:	d069      	beq.n	8003d60 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003c8c:	4b53      	ldr	r3, [pc, #332]	; (8003ddc <HAL_RCC_OscConfig+0x780>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d105      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003c98:	4b50      	ldr	r3, [pc, #320]	; (8003ddc <HAL_RCC_OscConfig+0x780>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d001      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e0ad      	b.n	8003e04 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003ca8:	4b4c      	ldr	r3, [pc, #304]	; (8003ddc <HAL_RCC_OscConfig+0x780>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a4b      	ldr	r2, [pc, #300]	; (8003ddc <HAL_RCC_OscConfig+0x780>)
 8003cae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cb2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003cb4:	f7fd fddc 	bl	8001870 <HAL_GetTick>
 8003cb8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cba:	e008      	b.n	8003cce <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cbc:	f7fd fdd8 	bl	8001870 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e09a      	b.n	8003e04 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cce:	4b43      	ldr	r3, [pc, #268]	; (8003ddc <HAL_RCC_OscConfig+0x780>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1f0      	bne.n	8003cbc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cda:	4b40      	ldr	r3, [pc, #256]	; (8003ddc <HAL_RCC_OscConfig+0x780>)
 8003cdc:	68da      	ldr	r2, [r3, #12]
 8003cde:	4b40      	ldr	r3, [pc, #256]	; (8003de0 <HAL_RCC_OscConfig+0x784>)
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003cea:	3a01      	subs	r2, #1
 8003cec:	0112      	lsls	r2, r2, #4
 8003cee:	4311      	orrs	r1, r2
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003cf4:	0212      	lsls	r2, r2, #8
 8003cf6:	4311      	orrs	r1, r2
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003cfc:	0852      	lsrs	r2, r2, #1
 8003cfe:	3a01      	subs	r2, #1
 8003d00:	0552      	lsls	r2, r2, #21
 8003d02:	4311      	orrs	r1, r2
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003d08:	0852      	lsrs	r2, r2, #1
 8003d0a:	3a01      	subs	r2, #1
 8003d0c:	0652      	lsls	r2, r2, #25
 8003d0e:	4311      	orrs	r1, r2
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d14:	0912      	lsrs	r2, r2, #4
 8003d16:	0452      	lsls	r2, r2, #17
 8003d18:	430a      	orrs	r2, r1
 8003d1a:	4930      	ldr	r1, [pc, #192]	; (8003ddc <HAL_RCC_OscConfig+0x780>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003d20:	4b2e      	ldr	r3, [pc, #184]	; (8003ddc <HAL_RCC_OscConfig+0x780>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a2d      	ldr	r2, [pc, #180]	; (8003ddc <HAL_RCC_OscConfig+0x780>)
 8003d26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d2a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d2c:	4b2b      	ldr	r3, [pc, #172]	; (8003ddc <HAL_RCC_OscConfig+0x780>)
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	4a2a      	ldr	r2, [pc, #168]	; (8003ddc <HAL_RCC_OscConfig+0x780>)
 8003d32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d36:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d38:	f7fd fd9a 	bl	8001870 <HAL_GetTick>
 8003d3c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d3e:	e008      	b.n	8003d52 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d40:	f7fd fd96 	bl	8001870 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e058      	b.n	8003e04 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d52:	4b22      	ldr	r3, [pc, #136]	; (8003ddc <HAL_RCC_OscConfig+0x780>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d0f0      	beq.n	8003d40 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d5e:	e050      	b.n	8003e02 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e04f      	b.n	8003e04 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d64:	4b1d      	ldr	r3, [pc, #116]	; (8003ddc <HAL_RCC_OscConfig+0x780>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d148      	bne.n	8003e02 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003d70:	4b1a      	ldr	r3, [pc, #104]	; (8003ddc <HAL_RCC_OscConfig+0x780>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a19      	ldr	r2, [pc, #100]	; (8003ddc <HAL_RCC_OscConfig+0x780>)
 8003d76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d7a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d7c:	4b17      	ldr	r3, [pc, #92]	; (8003ddc <HAL_RCC_OscConfig+0x780>)
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	4a16      	ldr	r2, [pc, #88]	; (8003ddc <HAL_RCC_OscConfig+0x780>)
 8003d82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d86:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d88:	f7fd fd72 	bl	8001870 <HAL_GetTick>
 8003d8c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d8e:	e008      	b.n	8003da2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d90:	f7fd fd6e 	bl	8001870 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e030      	b.n	8003e04 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003da2:	4b0e      	ldr	r3, [pc, #56]	; (8003ddc <HAL_RCC_OscConfig+0x780>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d0f0      	beq.n	8003d90 <HAL_RCC_OscConfig+0x734>
 8003dae:	e028      	b.n	8003e02 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	2b0c      	cmp	r3, #12
 8003db4:	d023      	beq.n	8003dfe <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003db6:	4b09      	ldr	r3, [pc, #36]	; (8003ddc <HAL_RCC_OscConfig+0x780>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a08      	ldr	r2, [pc, #32]	; (8003ddc <HAL_RCC_OscConfig+0x780>)
 8003dbc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc2:	f7fd fd55 	bl	8001870 <HAL_GetTick>
 8003dc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dc8:	e00c      	b.n	8003de4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dca:	f7fd fd51 	bl	8001870 <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d905      	bls.n	8003de4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e013      	b.n	8003e04 <HAL_RCC_OscConfig+0x7a8>
 8003ddc:	40021000 	.word	0x40021000
 8003de0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003de4:	4b09      	ldr	r3, [pc, #36]	; (8003e0c <HAL_RCC_OscConfig+0x7b0>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1ec      	bne.n	8003dca <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003df0:	4b06      	ldr	r3, [pc, #24]	; (8003e0c <HAL_RCC_OscConfig+0x7b0>)
 8003df2:	68da      	ldr	r2, [r3, #12]
 8003df4:	4905      	ldr	r1, [pc, #20]	; (8003e0c <HAL_RCC_OscConfig+0x7b0>)
 8003df6:	4b06      	ldr	r3, [pc, #24]	; (8003e10 <HAL_RCC_OscConfig+0x7b4>)
 8003df8:	4013      	ands	r3, r2
 8003dfa:	60cb      	str	r3, [r1, #12]
 8003dfc:	e001      	b.n	8003e02 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e000      	b.n	8003e04 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3720      	adds	r7, #32
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	40021000 	.word	0x40021000
 8003e10:	feeefffc 	.word	0xfeeefffc

08003e14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d101      	bne.n	8003e28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e0e7      	b.n	8003ff8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e28:	4b75      	ldr	r3, [pc, #468]	; (8004000 <HAL_RCC_ClockConfig+0x1ec>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0307 	and.w	r3, r3, #7
 8003e30:	683a      	ldr	r2, [r7, #0]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d910      	bls.n	8003e58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e36:	4b72      	ldr	r3, [pc, #456]	; (8004000 <HAL_RCC_ClockConfig+0x1ec>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f023 0207 	bic.w	r2, r3, #7
 8003e3e:	4970      	ldr	r1, [pc, #448]	; (8004000 <HAL_RCC_ClockConfig+0x1ec>)
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e46:	4b6e      	ldr	r3, [pc, #440]	; (8004000 <HAL_RCC_ClockConfig+0x1ec>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0307 	and.w	r3, r3, #7
 8003e4e:	683a      	ldr	r2, [r7, #0]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d001      	beq.n	8003e58 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e0cf      	b.n	8003ff8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0302 	and.w	r3, r3, #2
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d010      	beq.n	8003e86 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689a      	ldr	r2, [r3, #8]
 8003e68:	4b66      	ldr	r3, [pc, #408]	; (8004004 <HAL_RCC_ClockConfig+0x1f0>)
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d908      	bls.n	8003e86 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e74:	4b63      	ldr	r3, [pc, #396]	; (8004004 <HAL_RCC_ClockConfig+0x1f0>)
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	4960      	ldr	r1, [pc, #384]	; (8004004 <HAL_RCC_ClockConfig+0x1f0>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d04c      	beq.n	8003f2c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	2b03      	cmp	r3, #3
 8003e98:	d107      	bne.n	8003eaa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e9a:	4b5a      	ldr	r3, [pc, #360]	; (8004004 <HAL_RCC_ClockConfig+0x1f0>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d121      	bne.n	8003eea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e0a6      	b.n	8003ff8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d107      	bne.n	8003ec2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003eb2:	4b54      	ldr	r3, [pc, #336]	; (8004004 <HAL_RCC_ClockConfig+0x1f0>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d115      	bne.n	8003eea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e09a      	b.n	8003ff8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d107      	bne.n	8003eda <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003eca:	4b4e      	ldr	r3, [pc, #312]	; (8004004 <HAL_RCC_ClockConfig+0x1f0>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d109      	bne.n	8003eea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e08e      	b.n	8003ff8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003eda:	4b4a      	ldr	r3, [pc, #296]	; (8004004 <HAL_RCC_ClockConfig+0x1f0>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e086      	b.n	8003ff8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003eea:	4b46      	ldr	r3, [pc, #280]	; (8004004 <HAL_RCC_ClockConfig+0x1f0>)
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f023 0203 	bic.w	r2, r3, #3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	4943      	ldr	r1, [pc, #268]	; (8004004 <HAL_RCC_ClockConfig+0x1f0>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003efc:	f7fd fcb8 	bl	8001870 <HAL_GetTick>
 8003f00:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f02:	e00a      	b.n	8003f1a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f04:	f7fd fcb4 	bl	8001870 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e06e      	b.n	8003ff8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f1a:	4b3a      	ldr	r3, [pc, #232]	; (8004004 <HAL_RCC_ClockConfig+0x1f0>)
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f003 020c 	and.w	r2, r3, #12
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d1eb      	bne.n	8003f04 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0302 	and.w	r3, r3, #2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d010      	beq.n	8003f5a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689a      	ldr	r2, [r3, #8]
 8003f3c:	4b31      	ldr	r3, [pc, #196]	; (8004004 <HAL_RCC_ClockConfig+0x1f0>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d208      	bcs.n	8003f5a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f48:	4b2e      	ldr	r3, [pc, #184]	; (8004004 <HAL_RCC_ClockConfig+0x1f0>)
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	492b      	ldr	r1, [pc, #172]	; (8004004 <HAL_RCC_ClockConfig+0x1f0>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f5a:	4b29      	ldr	r3, [pc, #164]	; (8004000 <HAL_RCC_ClockConfig+0x1ec>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0307 	and.w	r3, r3, #7
 8003f62:	683a      	ldr	r2, [r7, #0]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d210      	bcs.n	8003f8a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f68:	4b25      	ldr	r3, [pc, #148]	; (8004000 <HAL_RCC_ClockConfig+0x1ec>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f023 0207 	bic.w	r2, r3, #7
 8003f70:	4923      	ldr	r1, [pc, #140]	; (8004000 <HAL_RCC_ClockConfig+0x1ec>)
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f78:	4b21      	ldr	r3, [pc, #132]	; (8004000 <HAL_RCC_ClockConfig+0x1ec>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0307 	and.w	r3, r3, #7
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d001      	beq.n	8003f8a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e036      	b.n	8003ff8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0304 	and.w	r3, r3, #4
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d008      	beq.n	8003fa8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f96:	4b1b      	ldr	r3, [pc, #108]	; (8004004 <HAL_RCC_ClockConfig+0x1f0>)
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	4918      	ldr	r1, [pc, #96]	; (8004004 <HAL_RCC_ClockConfig+0x1f0>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0308 	and.w	r3, r3, #8
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d009      	beq.n	8003fc8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fb4:	4b13      	ldr	r3, [pc, #76]	; (8004004 <HAL_RCC_ClockConfig+0x1f0>)
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	00db      	lsls	r3, r3, #3
 8003fc2:	4910      	ldr	r1, [pc, #64]	; (8004004 <HAL_RCC_ClockConfig+0x1f0>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003fc8:	f000 f824 	bl	8004014 <HAL_RCC_GetSysClockFreq>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	4b0d      	ldr	r3, [pc, #52]	; (8004004 <HAL_RCC_ClockConfig+0x1f0>)
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	091b      	lsrs	r3, r3, #4
 8003fd4:	f003 030f 	and.w	r3, r3, #15
 8003fd8:	490b      	ldr	r1, [pc, #44]	; (8004008 <HAL_RCC_ClockConfig+0x1f4>)
 8003fda:	5ccb      	ldrb	r3, [r1, r3]
 8003fdc:	f003 031f 	and.w	r3, r3, #31
 8003fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8003fe4:	4a09      	ldr	r2, [pc, #36]	; (800400c <HAL_RCC_ClockConfig+0x1f8>)
 8003fe6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003fe8:	4b09      	ldr	r3, [pc, #36]	; (8004010 <HAL_RCC_ClockConfig+0x1fc>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7fd fbef 	bl	80017d0 <HAL_InitTick>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	72fb      	strb	r3, [r7, #11]

  return status;
 8003ff6:	7afb      	ldrb	r3, [r7, #11]
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3710      	adds	r7, #16
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	40022000 	.word	0x40022000
 8004004:	40021000 	.word	0x40021000
 8004008:	0800e338 	.word	0x0800e338
 800400c:	20000000 	.word	0x20000000
 8004010:	20000004 	.word	0x20000004

08004014 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004014:	b480      	push	{r7}
 8004016:	b089      	sub	sp, #36	; 0x24
 8004018:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800401a:	2300      	movs	r3, #0
 800401c:	61fb      	str	r3, [r7, #28]
 800401e:	2300      	movs	r3, #0
 8004020:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004022:	4b3e      	ldr	r3, [pc, #248]	; (800411c <HAL_RCC_GetSysClockFreq+0x108>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f003 030c 	and.w	r3, r3, #12
 800402a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800402c:	4b3b      	ldr	r3, [pc, #236]	; (800411c <HAL_RCC_GetSysClockFreq+0x108>)
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	f003 0303 	and.w	r3, r3, #3
 8004034:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d005      	beq.n	8004048 <HAL_RCC_GetSysClockFreq+0x34>
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	2b0c      	cmp	r3, #12
 8004040:	d121      	bne.n	8004086 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d11e      	bne.n	8004086 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004048:	4b34      	ldr	r3, [pc, #208]	; (800411c <HAL_RCC_GetSysClockFreq+0x108>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0308 	and.w	r3, r3, #8
 8004050:	2b00      	cmp	r3, #0
 8004052:	d107      	bne.n	8004064 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004054:	4b31      	ldr	r3, [pc, #196]	; (800411c <HAL_RCC_GetSysClockFreq+0x108>)
 8004056:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800405a:	0a1b      	lsrs	r3, r3, #8
 800405c:	f003 030f 	and.w	r3, r3, #15
 8004060:	61fb      	str	r3, [r7, #28]
 8004062:	e005      	b.n	8004070 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004064:	4b2d      	ldr	r3, [pc, #180]	; (800411c <HAL_RCC_GetSysClockFreq+0x108>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	091b      	lsrs	r3, r3, #4
 800406a:	f003 030f 	and.w	r3, r3, #15
 800406e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004070:	4a2b      	ldr	r2, [pc, #172]	; (8004120 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004078:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d10d      	bne.n	800409c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004084:	e00a      	b.n	800409c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	2b04      	cmp	r3, #4
 800408a:	d102      	bne.n	8004092 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800408c:	4b25      	ldr	r3, [pc, #148]	; (8004124 <HAL_RCC_GetSysClockFreq+0x110>)
 800408e:	61bb      	str	r3, [r7, #24]
 8004090:	e004      	b.n	800409c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	2b08      	cmp	r3, #8
 8004096:	d101      	bne.n	800409c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004098:	4b23      	ldr	r3, [pc, #140]	; (8004128 <HAL_RCC_GetSysClockFreq+0x114>)
 800409a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	2b0c      	cmp	r3, #12
 80040a0:	d134      	bne.n	800410c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80040a2:	4b1e      	ldr	r3, [pc, #120]	; (800411c <HAL_RCC_GetSysClockFreq+0x108>)
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	f003 0303 	and.w	r3, r3, #3
 80040aa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d003      	beq.n	80040ba <HAL_RCC_GetSysClockFreq+0xa6>
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	2b03      	cmp	r3, #3
 80040b6:	d003      	beq.n	80040c0 <HAL_RCC_GetSysClockFreq+0xac>
 80040b8:	e005      	b.n	80040c6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80040ba:	4b1a      	ldr	r3, [pc, #104]	; (8004124 <HAL_RCC_GetSysClockFreq+0x110>)
 80040bc:	617b      	str	r3, [r7, #20]
      break;
 80040be:	e005      	b.n	80040cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80040c0:	4b19      	ldr	r3, [pc, #100]	; (8004128 <HAL_RCC_GetSysClockFreq+0x114>)
 80040c2:	617b      	str	r3, [r7, #20]
      break;
 80040c4:	e002      	b.n	80040cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	617b      	str	r3, [r7, #20]
      break;
 80040ca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040cc:	4b13      	ldr	r3, [pc, #76]	; (800411c <HAL_RCC_GetSysClockFreq+0x108>)
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	091b      	lsrs	r3, r3, #4
 80040d2:	f003 0307 	and.w	r3, r3, #7
 80040d6:	3301      	adds	r3, #1
 80040d8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80040da:	4b10      	ldr	r3, [pc, #64]	; (800411c <HAL_RCC_GetSysClockFreq+0x108>)
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	0a1b      	lsrs	r3, r3, #8
 80040e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040e4:	697a      	ldr	r2, [r7, #20]
 80040e6:	fb03 f202 	mul.w	r2, r3, r2
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040f2:	4b0a      	ldr	r3, [pc, #40]	; (800411c <HAL_RCC_GetSysClockFreq+0x108>)
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	0e5b      	lsrs	r3, r3, #25
 80040f8:	f003 0303 	and.w	r3, r3, #3
 80040fc:	3301      	adds	r3, #1
 80040fe:	005b      	lsls	r3, r3, #1
 8004100:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	fbb2 f3f3 	udiv	r3, r2, r3
 800410a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800410c:	69bb      	ldr	r3, [r7, #24]
}
 800410e:	4618      	mov	r0, r3
 8004110:	3724      	adds	r7, #36	; 0x24
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	40021000 	.word	0x40021000
 8004120:	0800e350 	.word	0x0800e350
 8004124:	00f42400 	.word	0x00f42400
 8004128:	007a1200 	.word	0x007a1200

0800412c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800412c:	b480      	push	{r7}
 800412e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004130:	4b03      	ldr	r3, [pc, #12]	; (8004140 <HAL_RCC_GetHCLKFreq+0x14>)
 8004132:	681b      	ldr	r3, [r3, #0]
}
 8004134:	4618      	mov	r0, r3
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	20000000 	.word	0x20000000

08004144 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004148:	f7ff fff0 	bl	800412c <HAL_RCC_GetHCLKFreq>
 800414c:	4602      	mov	r2, r0
 800414e:	4b06      	ldr	r3, [pc, #24]	; (8004168 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	0a1b      	lsrs	r3, r3, #8
 8004154:	f003 0307 	and.w	r3, r3, #7
 8004158:	4904      	ldr	r1, [pc, #16]	; (800416c <HAL_RCC_GetPCLK1Freq+0x28>)
 800415a:	5ccb      	ldrb	r3, [r1, r3]
 800415c:	f003 031f 	and.w	r3, r3, #31
 8004160:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004164:	4618      	mov	r0, r3
 8004166:	bd80      	pop	{r7, pc}
 8004168:	40021000 	.word	0x40021000
 800416c:	0800e348 	.word	0x0800e348

08004170 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004174:	f7ff ffda 	bl	800412c <HAL_RCC_GetHCLKFreq>
 8004178:	4602      	mov	r2, r0
 800417a:	4b06      	ldr	r3, [pc, #24]	; (8004194 <HAL_RCC_GetPCLK2Freq+0x24>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	0adb      	lsrs	r3, r3, #11
 8004180:	f003 0307 	and.w	r3, r3, #7
 8004184:	4904      	ldr	r1, [pc, #16]	; (8004198 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004186:	5ccb      	ldrb	r3, [r1, r3]
 8004188:	f003 031f 	and.w	r3, r3, #31
 800418c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004190:	4618      	mov	r0, r3
 8004192:	bd80      	pop	{r7, pc}
 8004194:	40021000 	.word	0x40021000
 8004198:	0800e348 	.word	0x0800e348

0800419c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b086      	sub	sp, #24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80041a4:	2300      	movs	r3, #0
 80041a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80041a8:	4b2a      	ldr	r3, [pc, #168]	; (8004254 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d003      	beq.n	80041bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80041b4:	f7ff f9de 	bl	8003574 <HAL_PWREx_GetVoltageRange>
 80041b8:	6178      	str	r0, [r7, #20]
 80041ba:	e014      	b.n	80041e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80041bc:	4b25      	ldr	r3, [pc, #148]	; (8004254 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c0:	4a24      	ldr	r2, [pc, #144]	; (8004254 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041c6:	6593      	str	r3, [r2, #88]	; 0x58
 80041c8:	4b22      	ldr	r3, [pc, #136]	; (8004254 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041d0:	60fb      	str	r3, [r7, #12]
 80041d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80041d4:	f7ff f9ce 	bl	8003574 <HAL_PWREx_GetVoltageRange>
 80041d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80041da:	4b1e      	ldr	r3, [pc, #120]	; (8004254 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041de:	4a1d      	ldr	r2, [pc, #116]	; (8004254 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041e4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041ec:	d10b      	bne.n	8004206 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2b80      	cmp	r3, #128	; 0x80
 80041f2:	d919      	bls.n	8004228 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2ba0      	cmp	r3, #160	; 0xa0
 80041f8:	d902      	bls.n	8004200 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80041fa:	2302      	movs	r3, #2
 80041fc:	613b      	str	r3, [r7, #16]
 80041fe:	e013      	b.n	8004228 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004200:	2301      	movs	r3, #1
 8004202:	613b      	str	r3, [r7, #16]
 8004204:	e010      	b.n	8004228 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2b80      	cmp	r3, #128	; 0x80
 800420a:	d902      	bls.n	8004212 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800420c:	2303      	movs	r3, #3
 800420e:	613b      	str	r3, [r7, #16]
 8004210:	e00a      	b.n	8004228 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2b80      	cmp	r3, #128	; 0x80
 8004216:	d102      	bne.n	800421e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004218:	2302      	movs	r3, #2
 800421a:	613b      	str	r3, [r7, #16]
 800421c:	e004      	b.n	8004228 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2b70      	cmp	r3, #112	; 0x70
 8004222:	d101      	bne.n	8004228 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004224:	2301      	movs	r3, #1
 8004226:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004228:	4b0b      	ldr	r3, [pc, #44]	; (8004258 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f023 0207 	bic.w	r2, r3, #7
 8004230:	4909      	ldr	r1, [pc, #36]	; (8004258 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	4313      	orrs	r3, r2
 8004236:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004238:	4b07      	ldr	r3, [pc, #28]	; (8004258 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0307 	and.w	r3, r3, #7
 8004240:	693a      	ldr	r2, [r7, #16]
 8004242:	429a      	cmp	r2, r3
 8004244:	d001      	beq.n	800424a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e000      	b.n	800424c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800424a:	2300      	movs	r3, #0
}
 800424c:	4618      	mov	r0, r3
 800424e:	3718      	adds	r7, #24
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	40021000 	.word	0x40021000
 8004258:	40022000 	.word	0x40022000

0800425c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b086      	sub	sp, #24
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004264:	2300      	movs	r3, #0
 8004266:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004268:	2300      	movs	r3, #0
 800426a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004274:	2b00      	cmp	r3, #0
 8004276:	d041      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800427c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004280:	d02a      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004282:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004286:	d824      	bhi.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004288:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800428c:	d008      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800428e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004292:	d81e      	bhi.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00a      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004298:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800429c:	d010      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800429e:	e018      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80042a0:	4b86      	ldr	r3, [pc, #536]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	4a85      	ldr	r2, [pc, #532]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042aa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042ac:	e015      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	3304      	adds	r3, #4
 80042b2:	2100      	movs	r1, #0
 80042b4:	4618      	mov	r0, r3
 80042b6:	f000 fabb 	bl	8004830 <RCCEx_PLLSAI1_Config>
 80042ba:	4603      	mov	r3, r0
 80042bc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042be:	e00c      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	3320      	adds	r3, #32
 80042c4:	2100      	movs	r1, #0
 80042c6:	4618      	mov	r0, r3
 80042c8:	f000 fba6 	bl	8004a18 <RCCEx_PLLSAI2_Config>
 80042cc:	4603      	mov	r3, r0
 80042ce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042d0:	e003      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	74fb      	strb	r3, [r7, #19]
      break;
 80042d6:	e000      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80042d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042da:	7cfb      	ldrb	r3, [r7, #19]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d10b      	bne.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042e0:	4b76      	ldr	r3, [pc, #472]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042ee:	4973      	ldr	r1, [pc, #460]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80042f6:	e001      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042f8:	7cfb      	ldrb	r3, [r7, #19]
 80042fa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d041      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800430c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004310:	d02a      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004312:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004316:	d824      	bhi.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004318:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800431c:	d008      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800431e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004322:	d81e      	bhi.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004324:	2b00      	cmp	r3, #0
 8004326:	d00a      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004328:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800432c:	d010      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800432e:	e018      	b.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004330:	4b62      	ldr	r3, [pc, #392]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	4a61      	ldr	r2, [pc, #388]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004336:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800433a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800433c:	e015      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	3304      	adds	r3, #4
 8004342:	2100      	movs	r1, #0
 8004344:	4618      	mov	r0, r3
 8004346:	f000 fa73 	bl	8004830 <RCCEx_PLLSAI1_Config>
 800434a:	4603      	mov	r3, r0
 800434c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800434e:	e00c      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	3320      	adds	r3, #32
 8004354:	2100      	movs	r1, #0
 8004356:	4618      	mov	r0, r3
 8004358:	f000 fb5e 	bl	8004a18 <RCCEx_PLLSAI2_Config>
 800435c:	4603      	mov	r3, r0
 800435e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004360:	e003      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	74fb      	strb	r3, [r7, #19]
      break;
 8004366:	e000      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004368:	bf00      	nop
    }

    if(ret == HAL_OK)
 800436a:	7cfb      	ldrb	r3, [r7, #19]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d10b      	bne.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004370:	4b52      	ldr	r3, [pc, #328]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004376:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800437e:	494f      	ldr	r1, [pc, #316]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004380:	4313      	orrs	r3, r2
 8004382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004386:	e001      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004388:	7cfb      	ldrb	r3, [r7, #19]
 800438a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004394:	2b00      	cmp	r3, #0
 8004396:	f000 80a0 	beq.w	80044da <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800439a:	2300      	movs	r3, #0
 800439c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800439e:	4b47      	ldr	r3, [pc, #284]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d101      	bne.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x152>
 80043aa:	2301      	movs	r3, #1
 80043ac:	e000      	b.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80043ae:	2300      	movs	r3, #0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00d      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043b4:	4b41      	ldr	r3, [pc, #260]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b8:	4a40      	ldr	r2, [pc, #256]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043be:	6593      	str	r3, [r2, #88]	; 0x58
 80043c0:	4b3e      	ldr	r3, [pc, #248]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043c8:	60bb      	str	r3, [r7, #8]
 80043ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043cc:	2301      	movs	r3, #1
 80043ce:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043d0:	4b3b      	ldr	r3, [pc, #236]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a3a      	ldr	r2, [pc, #232]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80043d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043dc:	f7fd fa48 	bl	8001870 <HAL_GetTick>
 80043e0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043e2:	e009      	b.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043e4:	f7fd fa44 	bl	8001870 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d902      	bls.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	74fb      	strb	r3, [r7, #19]
        break;
 80043f6:	e005      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043f8:	4b31      	ldr	r3, [pc, #196]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004400:	2b00      	cmp	r3, #0
 8004402:	d0ef      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004404:	7cfb      	ldrb	r3, [r7, #19]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d15c      	bne.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800440a:	4b2c      	ldr	r3, [pc, #176]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800440c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004410:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004414:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d01f      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004422:	697a      	ldr	r2, [r7, #20]
 8004424:	429a      	cmp	r2, r3
 8004426:	d019      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004428:	4b24      	ldr	r3, [pc, #144]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800442a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800442e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004432:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004434:	4b21      	ldr	r3, [pc, #132]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800443a:	4a20      	ldr	r2, [pc, #128]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800443c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004440:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004444:	4b1d      	ldr	r3, [pc, #116]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800444a:	4a1c      	ldr	r2, [pc, #112]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800444c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004450:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004454:	4a19      	ldr	r2, [pc, #100]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	f003 0301 	and.w	r3, r3, #1
 8004462:	2b00      	cmp	r3, #0
 8004464:	d016      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004466:	f7fd fa03 	bl	8001870 <HAL_GetTick>
 800446a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800446c:	e00b      	b.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800446e:	f7fd f9ff 	bl	8001870 <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	f241 3288 	movw	r2, #5000	; 0x1388
 800447c:	4293      	cmp	r3, r2
 800447e:	d902      	bls.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	74fb      	strb	r3, [r7, #19]
            break;
 8004484:	e006      	b.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004486:	4b0d      	ldr	r3, [pc, #52]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800448c:	f003 0302 	and.w	r3, r3, #2
 8004490:	2b00      	cmp	r3, #0
 8004492:	d0ec      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004494:	7cfb      	ldrb	r3, [r7, #19]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d10c      	bne.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800449a:	4b08      	ldr	r3, [pc, #32]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800449c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044aa:	4904      	ldr	r1, [pc, #16]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80044b2:	e009      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044b4:	7cfb      	ldrb	r3, [r7, #19]
 80044b6:	74bb      	strb	r3, [r7, #18]
 80044b8:	e006      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80044ba:	bf00      	nop
 80044bc:	40021000 	.word	0x40021000
 80044c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044c4:	7cfb      	ldrb	r3, [r7, #19]
 80044c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044c8:	7c7b      	ldrb	r3, [r7, #17]
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d105      	bne.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044ce:	4b9e      	ldr	r3, [pc, #632]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044d2:	4a9d      	ldr	r2, [pc, #628]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044d8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0301 	and.w	r3, r3, #1
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00a      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044e6:	4b98      	ldr	r3, [pc, #608]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ec:	f023 0203 	bic.w	r2, r3, #3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f4:	4994      	ldr	r1, [pc, #592]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0302 	and.w	r3, r3, #2
 8004504:	2b00      	cmp	r3, #0
 8004506:	d00a      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004508:	4b8f      	ldr	r3, [pc, #572]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800450a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800450e:	f023 020c 	bic.w	r2, r3, #12
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004516:	498c      	ldr	r1, [pc, #560]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004518:	4313      	orrs	r3, r2
 800451a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0304 	and.w	r3, r3, #4
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00a      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800452a:	4b87      	ldr	r3, [pc, #540]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800452c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004530:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004538:	4983      	ldr	r1, [pc, #524]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800453a:	4313      	orrs	r3, r2
 800453c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0308 	and.w	r3, r3, #8
 8004548:	2b00      	cmp	r3, #0
 800454a:	d00a      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800454c:	4b7e      	ldr	r3, [pc, #504]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800454e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004552:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800455a:	497b      	ldr	r1, [pc, #492]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800455c:	4313      	orrs	r3, r2
 800455e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0310 	and.w	r3, r3, #16
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00a      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800456e:	4b76      	ldr	r3, [pc, #472]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004574:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800457c:	4972      	ldr	r1, [pc, #456]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800457e:	4313      	orrs	r3, r2
 8004580:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0320 	and.w	r3, r3, #32
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00a      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004590:	4b6d      	ldr	r3, [pc, #436]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004596:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800459e:	496a      	ldr	r1, [pc, #424]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00a      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045b2:	4b65      	ldr	r3, [pc, #404]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045c0:	4961      	ldr	r1, [pc, #388]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00a      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80045d4:	4b5c      	ldr	r3, [pc, #368]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045e2:	4959      	ldr	r1, [pc, #356]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00a      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045f6:	4b54      	ldr	r3, [pc, #336]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045fc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004604:	4950      	ldr	r1, [pc, #320]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004606:	4313      	orrs	r3, r2
 8004608:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00a      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004618:	4b4b      	ldr	r3, [pc, #300]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800461a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800461e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004626:	4948      	ldr	r1, [pc, #288]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004628:	4313      	orrs	r3, r2
 800462a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00a      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800463a:	4b43      	ldr	r3, [pc, #268]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800463c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004640:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004648:	493f      	ldr	r1, [pc, #252]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800464a:	4313      	orrs	r3, r2
 800464c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d028      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800465c:	4b3a      	ldr	r3, [pc, #232]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800465e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004662:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800466a:	4937      	ldr	r1, [pc, #220]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800466c:	4313      	orrs	r3, r2
 800466e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004676:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800467a:	d106      	bne.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800467c:	4b32      	ldr	r3, [pc, #200]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	4a31      	ldr	r2, [pc, #196]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004682:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004686:	60d3      	str	r3, [r2, #12]
 8004688:	e011      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800468e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004692:	d10c      	bne.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	3304      	adds	r3, #4
 8004698:	2101      	movs	r1, #1
 800469a:	4618      	mov	r0, r3
 800469c:	f000 f8c8 	bl	8004830 <RCCEx_PLLSAI1_Config>
 80046a0:	4603      	mov	r3, r0
 80046a2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80046a4:	7cfb      	ldrb	r3, [r7, #19]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d001      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80046aa:	7cfb      	ldrb	r3, [r7, #19]
 80046ac:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d028      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80046ba:	4b23      	ldr	r3, [pc, #140]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c8:	491f      	ldr	r1, [pc, #124]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046d8:	d106      	bne.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046da:	4b1b      	ldr	r3, [pc, #108]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	4a1a      	ldr	r2, [pc, #104]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046e4:	60d3      	str	r3, [r2, #12]
 80046e6:	e011      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046f0:	d10c      	bne.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	3304      	adds	r3, #4
 80046f6:	2101      	movs	r1, #1
 80046f8:	4618      	mov	r0, r3
 80046fa:	f000 f899 	bl	8004830 <RCCEx_PLLSAI1_Config>
 80046fe:	4603      	mov	r3, r0
 8004700:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004702:	7cfb      	ldrb	r3, [r7, #19]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d001      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004708:	7cfb      	ldrb	r3, [r7, #19]
 800470a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d02b      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004718:	4b0b      	ldr	r3, [pc, #44]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800471a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800471e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004726:	4908      	ldr	r1, [pc, #32]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004728:	4313      	orrs	r3, r2
 800472a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004732:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004736:	d109      	bne.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004738:	4b03      	ldr	r3, [pc, #12]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	4a02      	ldr	r2, [pc, #8]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800473e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004742:	60d3      	str	r3, [r2, #12]
 8004744:	e014      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004746:	bf00      	nop
 8004748:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004750:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004754:	d10c      	bne.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	3304      	adds	r3, #4
 800475a:	2101      	movs	r1, #1
 800475c:	4618      	mov	r0, r3
 800475e:	f000 f867 	bl	8004830 <RCCEx_PLLSAI1_Config>
 8004762:	4603      	mov	r3, r0
 8004764:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004766:	7cfb      	ldrb	r3, [r7, #19]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d001      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800476c:	7cfb      	ldrb	r3, [r7, #19]
 800476e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d02f      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800477c:	4b2b      	ldr	r3, [pc, #172]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800477e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004782:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800478a:	4928      	ldr	r1, [pc, #160]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800478c:	4313      	orrs	r3, r2
 800478e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004796:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800479a:	d10d      	bne.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	3304      	adds	r3, #4
 80047a0:	2102      	movs	r1, #2
 80047a2:	4618      	mov	r0, r3
 80047a4:	f000 f844 	bl	8004830 <RCCEx_PLLSAI1_Config>
 80047a8:	4603      	mov	r3, r0
 80047aa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047ac:	7cfb      	ldrb	r3, [r7, #19]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d014      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80047b2:	7cfb      	ldrb	r3, [r7, #19]
 80047b4:	74bb      	strb	r3, [r7, #18]
 80047b6:	e011      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047c0:	d10c      	bne.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	3320      	adds	r3, #32
 80047c6:	2102      	movs	r1, #2
 80047c8:	4618      	mov	r0, r3
 80047ca:	f000 f925 	bl	8004a18 <RCCEx_PLLSAI2_Config>
 80047ce:	4603      	mov	r3, r0
 80047d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047d2:	7cfb      	ldrb	r3, [r7, #19]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d001      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80047d8:	7cfb      	ldrb	r3, [r7, #19]
 80047da:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00a      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80047e8:	4b10      	ldr	r3, [pc, #64]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ee:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047f6:	490d      	ldr	r1, [pc, #52]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00b      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800480a:	4b08      	ldr	r3, [pc, #32]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800480c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004810:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800481a:	4904      	ldr	r1, [pc, #16]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800481c:	4313      	orrs	r3, r2
 800481e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004822:	7cbb      	ldrb	r3, [r7, #18]
}
 8004824:	4618      	mov	r0, r3
 8004826:	3718      	adds	r7, #24
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	40021000 	.word	0x40021000

08004830 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800483a:	2300      	movs	r3, #0
 800483c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800483e:	4b75      	ldr	r3, [pc, #468]	; (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	f003 0303 	and.w	r3, r3, #3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d018      	beq.n	800487c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800484a:	4b72      	ldr	r3, [pc, #456]	; (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	f003 0203 	and.w	r2, r3, #3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	429a      	cmp	r2, r3
 8004858:	d10d      	bne.n	8004876 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
       ||
 800485e:	2b00      	cmp	r3, #0
 8004860:	d009      	beq.n	8004876 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004862:	4b6c      	ldr	r3, [pc, #432]	; (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	091b      	lsrs	r3, r3, #4
 8004868:	f003 0307 	and.w	r3, r3, #7
 800486c:	1c5a      	adds	r2, r3, #1
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
       ||
 8004872:	429a      	cmp	r2, r3
 8004874:	d047      	beq.n	8004906 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	73fb      	strb	r3, [r7, #15]
 800487a:	e044      	b.n	8004906 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2b03      	cmp	r3, #3
 8004882:	d018      	beq.n	80048b6 <RCCEx_PLLSAI1_Config+0x86>
 8004884:	2b03      	cmp	r3, #3
 8004886:	d825      	bhi.n	80048d4 <RCCEx_PLLSAI1_Config+0xa4>
 8004888:	2b01      	cmp	r3, #1
 800488a:	d002      	beq.n	8004892 <RCCEx_PLLSAI1_Config+0x62>
 800488c:	2b02      	cmp	r3, #2
 800488e:	d009      	beq.n	80048a4 <RCCEx_PLLSAI1_Config+0x74>
 8004890:	e020      	b.n	80048d4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004892:	4b60      	ldr	r3, [pc, #384]	; (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0302 	and.w	r3, r3, #2
 800489a:	2b00      	cmp	r3, #0
 800489c:	d11d      	bne.n	80048da <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048a2:	e01a      	b.n	80048da <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80048a4:	4b5b      	ldr	r3, [pc, #364]	; (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d116      	bne.n	80048de <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048b4:	e013      	b.n	80048de <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80048b6:	4b57      	ldr	r3, [pc, #348]	; (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d10f      	bne.n	80048e2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80048c2:	4b54      	ldr	r3, [pc, #336]	; (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d109      	bne.n	80048e2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80048d2:	e006      	b.n	80048e2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	73fb      	strb	r3, [r7, #15]
      break;
 80048d8:	e004      	b.n	80048e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048da:	bf00      	nop
 80048dc:	e002      	b.n	80048e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048de:	bf00      	nop
 80048e0:	e000      	b.n	80048e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80048e4:	7bfb      	ldrb	r3, [r7, #15]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d10d      	bne.n	8004906 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80048ea:	4b4a      	ldr	r3, [pc, #296]	; (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6819      	ldr	r1, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	3b01      	subs	r3, #1
 80048fc:	011b      	lsls	r3, r3, #4
 80048fe:	430b      	orrs	r3, r1
 8004900:	4944      	ldr	r1, [pc, #272]	; (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004902:	4313      	orrs	r3, r2
 8004904:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004906:	7bfb      	ldrb	r3, [r7, #15]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d17d      	bne.n	8004a08 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800490c:	4b41      	ldr	r3, [pc, #260]	; (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a40      	ldr	r2, [pc, #256]	; (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004912:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004916:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004918:	f7fc ffaa 	bl	8001870 <HAL_GetTick>
 800491c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800491e:	e009      	b.n	8004934 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004920:	f7fc ffa6 	bl	8001870 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	2b02      	cmp	r3, #2
 800492c:	d902      	bls.n	8004934 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	73fb      	strb	r3, [r7, #15]
        break;
 8004932:	e005      	b.n	8004940 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004934:	4b37      	ldr	r3, [pc, #220]	; (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d1ef      	bne.n	8004920 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004940:	7bfb      	ldrb	r3, [r7, #15]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d160      	bne.n	8004a08 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d111      	bne.n	8004970 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800494c:	4b31      	ldr	r3, [pc, #196]	; (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004954:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	6892      	ldr	r2, [r2, #8]
 800495c:	0211      	lsls	r1, r2, #8
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	68d2      	ldr	r2, [r2, #12]
 8004962:	0912      	lsrs	r2, r2, #4
 8004964:	0452      	lsls	r2, r2, #17
 8004966:	430a      	orrs	r2, r1
 8004968:	492a      	ldr	r1, [pc, #168]	; (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 800496a:	4313      	orrs	r3, r2
 800496c:	610b      	str	r3, [r1, #16]
 800496e:	e027      	b.n	80049c0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d112      	bne.n	800499c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004976:	4b27      	ldr	r3, [pc, #156]	; (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800497e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	6892      	ldr	r2, [r2, #8]
 8004986:	0211      	lsls	r1, r2, #8
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	6912      	ldr	r2, [r2, #16]
 800498c:	0852      	lsrs	r2, r2, #1
 800498e:	3a01      	subs	r2, #1
 8004990:	0552      	lsls	r2, r2, #21
 8004992:	430a      	orrs	r2, r1
 8004994:	491f      	ldr	r1, [pc, #124]	; (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004996:	4313      	orrs	r3, r2
 8004998:	610b      	str	r3, [r1, #16]
 800499a:	e011      	b.n	80049c0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800499c:	4b1d      	ldr	r3, [pc, #116]	; (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80049a4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	6892      	ldr	r2, [r2, #8]
 80049ac:	0211      	lsls	r1, r2, #8
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	6952      	ldr	r2, [r2, #20]
 80049b2:	0852      	lsrs	r2, r2, #1
 80049b4:	3a01      	subs	r2, #1
 80049b6:	0652      	lsls	r2, r2, #25
 80049b8:	430a      	orrs	r2, r1
 80049ba:	4916      	ldr	r1, [pc, #88]	; (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80049c0:	4b14      	ldr	r3, [pc, #80]	; (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a13      	ldr	r2, [pc, #76]	; (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80049ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049cc:	f7fc ff50 	bl	8001870 <HAL_GetTick>
 80049d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049d2:	e009      	b.n	80049e8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049d4:	f7fc ff4c 	bl	8001870 <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d902      	bls.n	80049e8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	73fb      	strb	r3, [r7, #15]
          break;
 80049e6:	e005      	b.n	80049f4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049e8:	4b0a      	ldr	r3, [pc, #40]	; (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d0ef      	beq.n	80049d4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80049f4:	7bfb      	ldrb	r3, [r7, #15]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d106      	bne.n	8004a08 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80049fa:	4b06      	ldr	r3, [pc, #24]	; (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049fc:	691a      	ldr	r2, [r3, #16]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	4904      	ldr	r1, [pc, #16]	; (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a04:	4313      	orrs	r3, r2
 8004a06:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	40021000 	.word	0x40021000

08004a18 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a22:	2300      	movs	r3, #0
 8004a24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a26:	4b6a      	ldr	r3, [pc, #424]	; (8004bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	f003 0303 	and.w	r3, r3, #3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d018      	beq.n	8004a64 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004a32:	4b67      	ldr	r3, [pc, #412]	; (8004bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	f003 0203 	and.w	r2, r3, #3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d10d      	bne.n	8004a5e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
       ||
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d009      	beq.n	8004a5e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004a4a:	4b61      	ldr	r3, [pc, #388]	; (8004bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	091b      	lsrs	r3, r3, #4
 8004a50:	f003 0307 	and.w	r3, r3, #7
 8004a54:	1c5a      	adds	r2, r3, #1
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
       ||
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d047      	beq.n	8004aee <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	73fb      	strb	r3, [r7, #15]
 8004a62:	e044      	b.n	8004aee <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2b03      	cmp	r3, #3
 8004a6a:	d018      	beq.n	8004a9e <RCCEx_PLLSAI2_Config+0x86>
 8004a6c:	2b03      	cmp	r3, #3
 8004a6e:	d825      	bhi.n	8004abc <RCCEx_PLLSAI2_Config+0xa4>
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d002      	beq.n	8004a7a <RCCEx_PLLSAI2_Config+0x62>
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d009      	beq.n	8004a8c <RCCEx_PLLSAI2_Config+0x74>
 8004a78:	e020      	b.n	8004abc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a7a:	4b55      	ldr	r3, [pc, #340]	; (8004bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0302 	and.w	r3, r3, #2
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d11d      	bne.n	8004ac2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a8a:	e01a      	b.n	8004ac2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a8c:	4b50      	ldr	r3, [pc, #320]	; (8004bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d116      	bne.n	8004ac6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a9c:	e013      	b.n	8004ac6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a9e:	4b4c      	ldr	r3, [pc, #304]	; (8004bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d10f      	bne.n	8004aca <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004aaa:	4b49      	ldr	r3, [pc, #292]	; (8004bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d109      	bne.n	8004aca <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004aba:	e006      	b.n	8004aca <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	73fb      	strb	r3, [r7, #15]
      break;
 8004ac0:	e004      	b.n	8004acc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004ac2:	bf00      	nop
 8004ac4:	e002      	b.n	8004acc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004ac6:	bf00      	nop
 8004ac8:	e000      	b.n	8004acc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004aca:	bf00      	nop
    }

    if(status == HAL_OK)
 8004acc:	7bfb      	ldrb	r3, [r7, #15]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d10d      	bne.n	8004aee <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004ad2:	4b3f      	ldr	r3, [pc, #252]	; (8004bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6819      	ldr	r1, [r3, #0]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	011b      	lsls	r3, r3, #4
 8004ae6:	430b      	orrs	r3, r1
 8004ae8:	4939      	ldr	r1, [pc, #228]	; (8004bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004aee:	7bfb      	ldrb	r3, [r7, #15]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d167      	bne.n	8004bc4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004af4:	4b36      	ldr	r3, [pc, #216]	; (8004bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a35      	ldr	r2, [pc, #212]	; (8004bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004afa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004afe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b00:	f7fc feb6 	bl	8001870 <HAL_GetTick>
 8004b04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b06:	e009      	b.n	8004b1c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b08:	f7fc feb2 	bl	8001870 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d902      	bls.n	8004b1c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	73fb      	strb	r3, [r7, #15]
        break;
 8004b1a:	e005      	b.n	8004b28 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b1c:	4b2c      	ldr	r3, [pc, #176]	; (8004bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1ef      	bne.n	8004b08 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004b28:	7bfb      	ldrb	r3, [r7, #15]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d14a      	bne.n	8004bc4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d111      	bne.n	8004b58 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b34:	4b26      	ldr	r3, [pc, #152]	; (8004bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b36:	695b      	ldr	r3, [r3, #20]
 8004b38:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004b3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	6892      	ldr	r2, [r2, #8]
 8004b44:	0211      	lsls	r1, r2, #8
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	68d2      	ldr	r2, [r2, #12]
 8004b4a:	0912      	lsrs	r2, r2, #4
 8004b4c:	0452      	lsls	r2, r2, #17
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	491f      	ldr	r1, [pc, #124]	; (8004bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	614b      	str	r3, [r1, #20]
 8004b56:	e011      	b.n	8004b7c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b58:	4b1d      	ldr	r3, [pc, #116]	; (8004bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b5a:	695b      	ldr	r3, [r3, #20]
 8004b5c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004b60:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	6892      	ldr	r2, [r2, #8]
 8004b68:	0211      	lsls	r1, r2, #8
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	6912      	ldr	r2, [r2, #16]
 8004b6e:	0852      	lsrs	r2, r2, #1
 8004b70:	3a01      	subs	r2, #1
 8004b72:	0652      	lsls	r2, r2, #25
 8004b74:	430a      	orrs	r2, r1
 8004b76:	4916      	ldr	r1, [pc, #88]	; (8004bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004b7c:	4b14      	ldr	r3, [pc, #80]	; (8004bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a13      	ldr	r2, [pc, #76]	; (8004bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b86:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b88:	f7fc fe72 	bl	8001870 <HAL_GetTick>
 8004b8c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b8e:	e009      	b.n	8004ba4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b90:	f7fc fe6e 	bl	8001870 <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d902      	bls.n	8004ba4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	73fb      	strb	r3, [r7, #15]
          break;
 8004ba2:	e005      	b.n	8004bb0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ba4:	4b0a      	ldr	r3, [pc, #40]	; (8004bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d0ef      	beq.n	8004b90 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004bb0:	7bfb      	ldrb	r3, [r7, #15]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d106      	bne.n	8004bc4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004bb6:	4b06      	ldr	r3, [pc, #24]	; (8004bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bb8:	695a      	ldr	r2, [r3, #20]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	4904      	ldr	r1, [pc, #16]	; (8004bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3710      	adds	r7, #16
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	40021000 	.word	0x40021000

08004bd4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d101      	bne.n	8004be6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e040      	b.n	8004c68 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d106      	bne.n	8004bfc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f7fc f8dc 	bl	8000db4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2224      	movs	r2, #36	; 0x24
 8004c00:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f022 0201 	bic.w	r2, r2, #1
 8004c10:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 f8c0 	bl	8004d98 <UART_SetConfig>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d101      	bne.n	8004c22 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e022      	b.n	8004c68 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d002      	beq.n	8004c30 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 fb6c 	bl	8005308 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	685a      	ldr	r2, [r3, #4]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	689a      	ldr	r2, [r3, #8]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f042 0201 	orr.w	r2, r2, #1
 8004c5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 fbf3 	bl	800544c <UART_CheckIdleState>
 8004c66:	4603      	mov	r3, r0
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3708      	adds	r7, #8
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b08a      	sub	sp, #40	; 0x28
 8004c74:	af02      	add	r7, sp, #8
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	603b      	str	r3, [r7, #0]
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c84:	2b20      	cmp	r3, #32
 8004c86:	f040 8082 	bne.w	8004d8e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d002      	beq.n	8004c96 <HAL_UART_Transmit+0x26>
 8004c90:	88fb      	ldrh	r3, [r7, #6]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d101      	bne.n	8004c9a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e07a      	b.n	8004d90 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d101      	bne.n	8004ca8 <HAL_UART_Transmit+0x38>
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	e073      	b.n	8004d90 <HAL_UART_Transmit+0x120>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2221      	movs	r2, #33	; 0x21
 8004cbc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004cbe:	f7fc fdd7 	bl	8001870 <HAL_GetTick>
 8004cc2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	88fa      	ldrh	r2, [r7, #6]
 8004cc8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	88fa      	ldrh	r2, [r7, #6]
 8004cd0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cdc:	d108      	bne.n	8004cf0 <HAL_UART_Transmit+0x80>
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d104      	bne.n	8004cf0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	61bb      	str	r3, [r7, #24]
 8004cee:	e003      	b.n	8004cf8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004d00:	e02d      	b.n	8004d5e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	9300      	str	r3, [sp, #0]
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	2180      	movs	r1, #128	; 0x80
 8004d0c:	68f8      	ldr	r0, [r7, #12]
 8004d0e:	f000 fbe6 	bl	80054de <UART_WaitOnFlagUntilTimeout>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d001      	beq.n	8004d1c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e039      	b.n	8004d90 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d10b      	bne.n	8004d3a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	881a      	ldrh	r2, [r3, #0]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d2e:	b292      	uxth	r2, r2
 8004d30:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	3302      	adds	r3, #2
 8004d36:	61bb      	str	r3, [r7, #24]
 8004d38:	e008      	b.n	8004d4c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	781a      	ldrb	r2, [r3, #0]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	b292      	uxth	r2, r2
 8004d44:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	3301      	adds	r3, #1
 8004d4a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	3b01      	subs	r3, #1
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1cb      	bne.n	8004d02 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	9300      	str	r3, [sp, #0]
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	2200      	movs	r2, #0
 8004d72:	2140      	movs	r1, #64	; 0x40
 8004d74:	68f8      	ldr	r0, [r7, #12]
 8004d76:	f000 fbb2 	bl	80054de <UART_WaitOnFlagUntilTimeout>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d001      	beq.n	8004d84 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	e005      	b.n	8004d90 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2220      	movs	r2, #32
 8004d88:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	e000      	b.n	8004d90 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004d8e:	2302      	movs	r3, #2
  }
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3720      	adds	r7, #32
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d9c:	b08a      	sub	sp, #40	; 0x28
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004da2:	2300      	movs	r3, #0
 8004da4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	689a      	ldr	r2, [r3, #8]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	691b      	ldr	r3, [r3, #16]
 8004db0:	431a      	orrs	r2, r3
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	431a      	orrs	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	69db      	ldr	r3, [r3, #28]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	4ba4      	ldr	r3, [pc, #656]	; (8005058 <UART_SetConfig+0x2c0>)
 8004dc8:	4013      	ands	r3, r2
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	6812      	ldr	r2, [r2, #0]
 8004dce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004dd0:	430b      	orrs	r3, r1
 8004dd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	68da      	ldr	r2, [r3, #12]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	430a      	orrs	r2, r1
 8004de8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a99      	ldr	r2, [pc, #612]	; (800505c <UART_SetConfig+0x2c4>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d004      	beq.n	8004e04 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e00:	4313      	orrs	r3, r2
 8004e02:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e14:	430a      	orrs	r2, r1
 8004e16:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a90      	ldr	r2, [pc, #576]	; (8005060 <UART_SetConfig+0x2c8>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d126      	bne.n	8004e70 <UART_SetConfig+0xd8>
 8004e22:	4b90      	ldr	r3, [pc, #576]	; (8005064 <UART_SetConfig+0x2cc>)
 8004e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e28:	f003 0303 	and.w	r3, r3, #3
 8004e2c:	2b03      	cmp	r3, #3
 8004e2e:	d81b      	bhi.n	8004e68 <UART_SetConfig+0xd0>
 8004e30:	a201      	add	r2, pc, #4	; (adr r2, 8004e38 <UART_SetConfig+0xa0>)
 8004e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e36:	bf00      	nop
 8004e38:	08004e49 	.word	0x08004e49
 8004e3c:	08004e59 	.word	0x08004e59
 8004e40:	08004e51 	.word	0x08004e51
 8004e44:	08004e61 	.word	0x08004e61
 8004e48:	2301      	movs	r3, #1
 8004e4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e4e:	e116      	b.n	800507e <UART_SetConfig+0x2e6>
 8004e50:	2302      	movs	r3, #2
 8004e52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e56:	e112      	b.n	800507e <UART_SetConfig+0x2e6>
 8004e58:	2304      	movs	r3, #4
 8004e5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e5e:	e10e      	b.n	800507e <UART_SetConfig+0x2e6>
 8004e60:	2308      	movs	r3, #8
 8004e62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e66:	e10a      	b.n	800507e <UART_SetConfig+0x2e6>
 8004e68:	2310      	movs	r3, #16
 8004e6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e6e:	e106      	b.n	800507e <UART_SetConfig+0x2e6>
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a7c      	ldr	r2, [pc, #496]	; (8005068 <UART_SetConfig+0x2d0>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d138      	bne.n	8004eec <UART_SetConfig+0x154>
 8004e7a:	4b7a      	ldr	r3, [pc, #488]	; (8005064 <UART_SetConfig+0x2cc>)
 8004e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e80:	f003 030c 	and.w	r3, r3, #12
 8004e84:	2b0c      	cmp	r3, #12
 8004e86:	d82d      	bhi.n	8004ee4 <UART_SetConfig+0x14c>
 8004e88:	a201      	add	r2, pc, #4	; (adr r2, 8004e90 <UART_SetConfig+0xf8>)
 8004e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e8e:	bf00      	nop
 8004e90:	08004ec5 	.word	0x08004ec5
 8004e94:	08004ee5 	.word	0x08004ee5
 8004e98:	08004ee5 	.word	0x08004ee5
 8004e9c:	08004ee5 	.word	0x08004ee5
 8004ea0:	08004ed5 	.word	0x08004ed5
 8004ea4:	08004ee5 	.word	0x08004ee5
 8004ea8:	08004ee5 	.word	0x08004ee5
 8004eac:	08004ee5 	.word	0x08004ee5
 8004eb0:	08004ecd 	.word	0x08004ecd
 8004eb4:	08004ee5 	.word	0x08004ee5
 8004eb8:	08004ee5 	.word	0x08004ee5
 8004ebc:	08004ee5 	.word	0x08004ee5
 8004ec0:	08004edd 	.word	0x08004edd
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eca:	e0d8      	b.n	800507e <UART_SetConfig+0x2e6>
 8004ecc:	2302      	movs	r3, #2
 8004ece:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ed2:	e0d4      	b.n	800507e <UART_SetConfig+0x2e6>
 8004ed4:	2304      	movs	r3, #4
 8004ed6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eda:	e0d0      	b.n	800507e <UART_SetConfig+0x2e6>
 8004edc:	2308      	movs	r3, #8
 8004ede:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ee2:	e0cc      	b.n	800507e <UART_SetConfig+0x2e6>
 8004ee4:	2310      	movs	r3, #16
 8004ee6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eea:	e0c8      	b.n	800507e <UART_SetConfig+0x2e6>
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a5e      	ldr	r2, [pc, #376]	; (800506c <UART_SetConfig+0x2d4>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d125      	bne.n	8004f42 <UART_SetConfig+0x1aa>
 8004ef6:	4b5b      	ldr	r3, [pc, #364]	; (8005064 <UART_SetConfig+0x2cc>)
 8004ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004efc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004f00:	2b30      	cmp	r3, #48	; 0x30
 8004f02:	d016      	beq.n	8004f32 <UART_SetConfig+0x19a>
 8004f04:	2b30      	cmp	r3, #48	; 0x30
 8004f06:	d818      	bhi.n	8004f3a <UART_SetConfig+0x1a2>
 8004f08:	2b20      	cmp	r3, #32
 8004f0a:	d00a      	beq.n	8004f22 <UART_SetConfig+0x18a>
 8004f0c:	2b20      	cmp	r3, #32
 8004f0e:	d814      	bhi.n	8004f3a <UART_SetConfig+0x1a2>
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d002      	beq.n	8004f1a <UART_SetConfig+0x182>
 8004f14:	2b10      	cmp	r3, #16
 8004f16:	d008      	beq.n	8004f2a <UART_SetConfig+0x192>
 8004f18:	e00f      	b.n	8004f3a <UART_SetConfig+0x1a2>
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f20:	e0ad      	b.n	800507e <UART_SetConfig+0x2e6>
 8004f22:	2302      	movs	r3, #2
 8004f24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f28:	e0a9      	b.n	800507e <UART_SetConfig+0x2e6>
 8004f2a:	2304      	movs	r3, #4
 8004f2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f30:	e0a5      	b.n	800507e <UART_SetConfig+0x2e6>
 8004f32:	2308      	movs	r3, #8
 8004f34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f38:	e0a1      	b.n	800507e <UART_SetConfig+0x2e6>
 8004f3a:	2310      	movs	r3, #16
 8004f3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f40:	e09d      	b.n	800507e <UART_SetConfig+0x2e6>
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a4a      	ldr	r2, [pc, #296]	; (8005070 <UART_SetConfig+0x2d8>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d125      	bne.n	8004f98 <UART_SetConfig+0x200>
 8004f4c:	4b45      	ldr	r3, [pc, #276]	; (8005064 <UART_SetConfig+0x2cc>)
 8004f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f52:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004f56:	2bc0      	cmp	r3, #192	; 0xc0
 8004f58:	d016      	beq.n	8004f88 <UART_SetConfig+0x1f0>
 8004f5a:	2bc0      	cmp	r3, #192	; 0xc0
 8004f5c:	d818      	bhi.n	8004f90 <UART_SetConfig+0x1f8>
 8004f5e:	2b80      	cmp	r3, #128	; 0x80
 8004f60:	d00a      	beq.n	8004f78 <UART_SetConfig+0x1e0>
 8004f62:	2b80      	cmp	r3, #128	; 0x80
 8004f64:	d814      	bhi.n	8004f90 <UART_SetConfig+0x1f8>
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d002      	beq.n	8004f70 <UART_SetConfig+0x1d8>
 8004f6a:	2b40      	cmp	r3, #64	; 0x40
 8004f6c:	d008      	beq.n	8004f80 <UART_SetConfig+0x1e8>
 8004f6e:	e00f      	b.n	8004f90 <UART_SetConfig+0x1f8>
 8004f70:	2300      	movs	r3, #0
 8004f72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f76:	e082      	b.n	800507e <UART_SetConfig+0x2e6>
 8004f78:	2302      	movs	r3, #2
 8004f7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f7e:	e07e      	b.n	800507e <UART_SetConfig+0x2e6>
 8004f80:	2304      	movs	r3, #4
 8004f82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f86:	e07a      	b.n	800507e <UART_SetConfig+0x2e6>
 8004f88:	2308      	movs	r3, #8
 8004f8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f8e:	e076      	b.n	800507e <UART_SetConfig+0x2e6>
 8004f90:	2310      	movs	r3, #16
 8004f92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f96:	e072      	b.n	800507e <UART_SetConfig+0x2e6>
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a35      	ldr	r2, [pc, #212]	; (8005074 <UART_SetConfig+0x2dc>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d12a      	bne.n	8004ff8 <UART_SetConfig+0x260>
 8004fa2:	4b30      	ldr	r3, [pc, #192]	; (8005064 <UART_SetConfig+0x2cc>)
 8004fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fa8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fb0:	d01a      	beq.n	8004fe8 <UART_SetConfig+0x250>
 8004fb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fb6:	d81b      	bhi.n	8004ff0 <UART_SetConfig+0x258>
 8004fb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fbc:	d00c      	beq.n	8004fd8 <UART_SetConfig+0x240>
 8004fbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fc2:	d815      	bhi.n	8004ff0 <UART_SetConfig+0x258>
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d003      	beq.n	8004fd0 <UART_SetConfig+0x238>
 8004fc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fcc:	d008      	beq.n	8004fe0 <UART_SetConfig+0x248>
 8004fce:	e00f      	b.n	8004ff0 <UART_SetConfig+0x258>
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fd6:	e052      	b.n	800507e <UART_SetConfig+0x2e6>
 8004fd8:	2302      	movs	r3, #2
 8004fda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fde:	e04e      	b.n	800507e <UART_SetConfig+0x2e6>
 8004fe0:	2304      	movs	r3, #4
 8004fe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fe6:	e04a      	b.n	800507e <UART_SetConfig+0x2e6>
 8004fe8:	2308      	movs	r3, #8
 8004fea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fee:	e046      	b.n	800507e <UART_SetConfig+0x2e6>
 8004ff0:	2310      	movs	r3, #16
 8004ff2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ff6:	e042      	b.n	800507e <UART_SetConfig+0x2e6>
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a17      	ldr	r2, [pc, #92]	; (800505c <UART_SetConfig+0x2c4>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d13a      	bne.n	8005078 <UART_SetConfig+0x2e0>
 8005002:	4b18      	ldr	r3, [pc, #96]	; (8005064 <UART_SetConfig+0x2cc>)
 8005004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005008:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800500c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005010:	d01a      	beq.n	8005048 <UART_SetConfig+0x2b0>
 8005012:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005016:	d81b      	bhi.n	8005050 <UART_SetConfig+0x2b8>
 8005018:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800501c:	d00c      	beq.n	8005038 <UART_SetConfig+0x2a0>
 800501e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005022:	d815      	bhi.n	8005050 <UART_SetConfig+0x2b8>
 8005024:	2b00      	cmp	r3, #0
 8005026:	d003      	beq.n	8005030 <UART_SetConfig+0x298>
 8005028:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800502c:	d008      	beq.n	8005040 <UART_SetConfig+0x2a8>
 800502e:	e00f      	b.n	8005050 <UART_SetConfig+0x2b8>
 8005030:	2300      	movs	r3, #0
 8005032:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005036:	e022      	b.n	800507e <UART_SetConfig+0x2e6>
 8005038:	2302      	movs	r3, #2
 800503a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800503e:	e01e      	b.n	800507e <UART_SetConfig+0x2e6>
 8005040:	2304      	movs	r3, #4
 8005042:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005046:	e01a      	b.n	800507e <UART_SetConfig+0x2e6>
 8005048:	2308      	movs	r3, #8
 800504a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800504e:	e016      	b.n	800507e <UART_SetConfig+0x2e6>
 8005050:	2310      	movs	r3, #16
 8005052:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005056:	e012      	b.n	800507e <UART_SetConfig+0x2e6>
 8005058:	efff69f3 	.word	0xefff69f3
 800505c:	40008000 	.word	0x40008000
 8005060:	40013800 	.word	0x40013800
 8005064:	40021000 	.word	0x40021000
 8005068:	40004400 	.word	0x40004400
 800506c:	40004800 	.word	0x40004800
 8005070:	40004c00 	.word	0x40004c00
 8005074:	40005000 	.word	0x40005000
 8005078:	2310      	movs	r3, #16
 800507a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a9f      	ldr	r2, [pc, #636]	; (8005300 <UART_SetConfig+0x568>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d17a      	bne.n	800517e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005088:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800508c:	2b08      	cmp	r3, #8
 800508e:	d824      	bhi.n	80050da <UART_SetConfig+0x342>
 8005090:	a201      	add	r2, pc, #4	; (adr r2, 8005098 <UART_SetConfig+0x300>)
 8005092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005096:	bf00      	nop
 8005098:	080050bd 	.word	0x080050bd
 800509c:	080050db 	.word	0x080050db
 80050a0:	080050c5 	.word	0x080050c5
 80050a4:	080050db 	.word	0x080050db
 80050a8:	080050cb 	.word	0x080050cb
 80050ac:	080050db 	.word	0x080050db
 80050b0:	080050db 	.word	0x080050db
 80050b4:	080050db 	.word	0x080050db
 80050b8:	080050d3 	.word	0x080050d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050bc:	f7ff f842 	bl	8004144 <HAL_RCC_GetPCLK1Freq>
 80050c0:	61f8      	str	r0, [r7, #28]
        break;
 80050c2:	e010      	b.n	80050e6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050c4:	4b8f      	ldr	r3, [pc, #572]	; (8005304 <UART_SetConfig+0x56c>)
 80050c6:	61fb      	str	r3, [r7, #28]
        break;
 80050c8:	e00d      	b.n	80050e6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050ca:	f7fe ffa3 	bl	8004014 <HAL_RCC_GetSysClockFreq>
 80050ce:	61f8      	str	r0, [r7, #28]
        break;
 80050d0:	e009      	b.n	80050e6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050d6:	61fb      	str	r3, [r7, #28]
        break;
 80050d8:	e005      	b.n	80050e6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80050da:	2300      	movs	r3, #0
 80050dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80050e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	f000 80fb 	beq.w	80052e4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	685a      	ldr	r2, [r3, #4]
 80050f2:	4613      	mov	r3, r2
 80050f4:	005b      	lsls	r3, r3, #1
 80050f6:	4413      	add	r3, r2
 80050f8:	69fa      	ldr	r2, [r7, #28]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d305      	bcc.n	800510a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005104:	69fa      	ldr	r2, [r7, #28]
 8005106:	429a      	cmp	r2, r3
 8005108:	d903      	bls.n	8005112 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005110:	e0e8      	b.n	80052e4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	2200      	movs	r2, #0
 8005116:	461c      	mov	r4, r3
 8005118:	4615      	mov	r5, r2
 800511a:	f04f 0200 	mov.w	r2, #0
 800511e:	f04f 0300 	mov.w	r3, #0
 8005122:	022b      	lsls	r3, r5, #8
 8005124:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005128:	0222      	lsls	r2, r4, #8
 800512a:	68f9      	ldr	r1, [r7, #12]
 800512c:	6849      	ldr	r1, [r1, #4]
 800512e:	0849      	lsrs	r1, r1, #1
 8005130:	2000      	movs	r0, #0
 8005132:	4688      	mov	r8, r1
 8005134:	4681      	mov	r9, r0
 8005136:	eb12 0a08 	adds.w	sl, r2, r8
 800513a:	eb43 0b09 	adc.w	fp, r3, r9
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	603b      	str	r3, [r7, #0]
 8005146:	607a      	str	r2, [r7, #4]
 8005148:	e9d7 2300 	ldrd	r2, r3, [r7]
 800514c:	4650      	mov	r0, sl
 800514e:	4659      	mov	r1, fp
 8005150:	f7fb fbac 	bl	80008ac <__aeabi_uldivmod>
 8005154:	4602      	mov	r2, r0
 8005156:	460b      	mov	r3, r1
 8005158:	4613      	mov	r3, r2
 800515a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005162:	d308      	bcc.n	8005176 <UART_SetConfig+0x3de>
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800516a:	d204      	bcs.n	8005176 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	69ba      	ldr	r2, [r7, #24]
 8005172:	60da      	str	r2, [r3, #12]
 8005174:	e0b6      	b.n	80052e4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800517c:	e0b2      	b.n	80052e4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	69db      	ldr	r3, [r3, #28]
 8005182:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005186:	d15e      	bne.n	8005246 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005188:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800518c:	2b08      	cmp	r3, #8
 800518e:	d828      	bhi.n	80051e2 <UART_SetConfig+0x44a>
 8005190:	a201      	add	r2, pc, #4	; (adr r2, 8005198 <UART_SetConfig+0x400>)
 8005192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005196:	bf00      	nop
 8005198:	080051bd 	.word	0x080051bd
 800519c:	080051c5 	.word	0x080051c5
 80051a0:	080051cd 	.word	0x080051cd
 80051a4:	080051e3 	.word	0x080051e3
 80051a8:	080051d3 	.word	0x080051d3
 80051ac:	080051e3 	.word	0x080051e3
 80051b0:	080051e3 	.word	0x080051e3
 80051b4:	080051e3 	.word	0x080051e3
 80051b8:	080051db 	.word	0x080051db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051bc:	f7fe ffc2 	bl	8004144 <HAL_RCC_GetPCLK1Freq>
 80051c0:	61f8      	str	r0, [r7, #28]
        break;
 80051c2:	e014      	b.n	80051ee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051c4:	f7fe ffd4 	bl	8004170 <HAL_RCC_GetPCLK2Freq>
 80051c8:	61f8      	str	r0, [r7, #28]
        break;
 80051ca:	e010      	b.n	80051ee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051cc:	4b4d      	ldr	r3, [pc, #308]	; (8005304 <UART_SetConfig+0x56c>)
 80051ce:	61fb      	str	r3, [r7, #28]
        break;
 80051d0:	e00d      	b.n	80051ee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051d2:	f7fe ff1f 	bl	8004014 <HAL_RCC_GetSysClockFreq>
 80051d6:	61f8      	str	r0, [r7, #28]
        break;
 80051d8:	e009      	b.n	80051ee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051de:	61fb      	str	r3, [r7, #28]
        break;
 80051e0:	e005      	b.n	80051ee <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80051e2:	2300      	movs	r3, #0
 80051e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80051ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d077      	beq.n	80052e4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	005a      	lsls	r2, r3, #1
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	085b      	lsrs	r3, r3, #1
 80051fe:	441a      	add	r2, r3
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	fbb2 f3f3 	udiv	r3, r2, r3
 8005208:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	2b0f      	cmp	r3, #15
 800520e:	d916      	bls.n	800523e <UART_SetConfig+0x4a6>
 8005210:	69bb      	ldr	r3, [r7, #24]
 8005212:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005216:	d212      	bcs.n	800523e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	b29b      	uxth	r3, r3
 800521c:	f023 030f 	bic.w	r3, r3, #15
 8005220:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005222:	69bb      	ldr	r3, [r7, #24]
 8005224:	085b      	lsrs	r3, r3, #1
 8005226:	b29b      	uxth	r3, r3
 8005228:	f003 0307 	and.w	r3, r3, #7
 800522c:	b29a      	uxth	r2, r3
 800522e:	8afb      	ldrh	r3, [r7, #22]
 8005230:	4313      	orrs	r3, r2
 8005232:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	8afa      	ldrh	r2, [r7, #22]
 800523a:	60da      	str	r2, [r3, #12]
 800523c:	e052      	b.n	80052e4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005244:	e04e      	b.n	80052e4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005246:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800524a:	2b08      	cmp	r3, #8
 800524c:	d827      	bhi.n	800529e <UART_SetConfig+0x506>
 800524e:	a201      	add	r2, pc, #4	; (adr r2, 8005254 <UART_SetConfig+0x4bc>)
 8005250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005254:	08005279 	.word	0x08005279
 8005258:	08005281 	.word	0x08005281
 800525c:	08005289 	.word	0x08005289
 8005260:	0800529f 	.word	0x0800529f
 8005264:	0800528f 	.word	0x0800528f
 8005268:	0800529f 	.word	0x0800529f
 800526c:	0800529f 	.word	0x0800529f
 8005270:	0800529f 	.word	0x0800529f
 8005274:	08005297 	.word	0x08005297
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005278:	f7fe ff64 	bl	8004144 <HAL_RCC_GetPCLK1Freq>
 800527c:	61f8      	str	r0, [r7, #28]
        break;
 800527e:	e014      	b.n	80052aa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005280:	f7fe ff76 	bl	8004170 <HAL_RCC_GetPCLK2Freq>
 8005284:	61f8      	str	r0, [r7, #28]
        break;
 8005286:	e010      	b.n	80052aa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005288:	4b1e      	ldr	r3, [pc, #120]	; (8005304 <UART_SetConfig+0x56c>)
 800528a:	61fb      	str	r3, [r7, #28]
        break;
 800528c:	e00d      	b.n	80052aa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800528e:	f7fe fec1 	bl	8004014 <HAL_RCC_GetSysClockFreq>
 8005292:	61f8      	str	r0, [r7, #28]
        break;
 8005294:	e009      	b.n	80052aa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005296:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800529a:	61fb      	str	r3, [r7, #28]
        break;
 800529c:	e005      	b.n	80052aa <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800529e:	2300      	movs	r3, #0
 80052a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80052a8:	bf00      	nop
    }

    if (pclk != 0U)
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d019      	beq.n	80052e4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	085a      	lsrs	r2, r3, #1
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	441a      	add	r2, r3
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	fbb2 f3f3 	udiv	r3, r2, r3
 80052c2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052c4:	69bb      	ldr	r3, [r7, #24]
 80052c6:	2b0f      	cmp	r3, #15
 80052c8:	d909      	bls.n	80052de <UART_SetConfig+0x546>
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052d0:	d205      	bcs.n	80052de <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	b29a      	uxth	r2, r3
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	60da      	str	r2, [r3, #12]
 80052dc:	e002      	b.n	80052e4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2200      	movs	r2, #0
 80052e8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2200      	movs	r2, #0
 80052ee:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80052f0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3728      	adds	r7, #40	; 0x28
 80052f8:	46bd      	mov	sp, r7
 80052fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052fe:	bf00      	nop
 8005300:	40008000 	.word	0x40008000
 8005304:	00f42400 	.word	0x00f42400

08005308 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005314:	f003 0301 	and.w	r3, r3, #1
 8005318:	2b00      	cmp	r3, #0
 800531a:	d00a      	beq.n	8005332 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	430a      	orrs	r2, r1
 8005330:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005336:	f003 0302 	and.w	r3, r3, #2
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00a      	beq.n	8005354 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	430a      	orrs	r2, r1
 8005352:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005358:	f003 0304 	and.w	r3, r3, #4
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00a      	beq.n	8005376 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	430a      	orrs	r2, r1
 8005374:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537a:	f003 0308 	and.w	r3, r3, #8
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00a      	beq.n	8005398 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	430a      	orrs	r2, r1
 8005396:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539c:	f003 0310 	and.w	r3, r3, #16
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d00a      	beq.n	80053ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	430a      	orrs	r2, r1
 80053b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053be:	f003 0320 	and.w	r3, r3, #32
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00a      	beq.n	80053dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	430a      	orrs	r2, r1
 80053da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d01a      	beq.n	800541e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	430a      	orrs	r2, r1
 80053fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005402:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005406:	d10a      	bne.n	800541e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	430a      	orrs	r2, r1
 800541c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00a      	beq.n	8005440 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	430a      	orrs	r2, r1
 800543e:	605a      	str	r2, [r3, #4]
  }
}
 8005440:	bf00      	nop
 8005442:	370c      	adds	r7, #12
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b086      	sub	sp, #24
 8005450:	af02      	add	r7, sp, #8
 8005452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800545c:	f7fc fa08 	bl	8001870 <HAL_GetTick>
 8005460:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0308 	and.w	r3, r3, #8
 800546c:	2b08      	cmp	r3, #8
 800546e:	d10e      	bne.n	800548e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005470:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005474:	9300      	str	r3, [sp, #0]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 f82d 	bl	80054de <UART_WaitOnFlagUntilTimeout>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d001      	beq.n	800548e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e023      	b.n	80054d6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0304 	and.w	r3, r3, #4
 8005498:	2b04      	cmp	r3, #4
 800549a:	d10e      	bne.n	80054ba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800549c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054a0:	9300      	str	r3, [sp, #0]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 f817 	bl	80054de <UART_WaitOnFlagUntilTimeout>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d001      	beq.n	80054ba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e00d      	b.n	80054d6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2220      	movs	r2, #32
 80054be:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2220      	movs	r2, #32
 80054c4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3710      	adds	r7, #16
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}

080054de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80054de:	b580      	push	{r7, lr}
 80054e0:	b09c      	sub	sp, #112	; 0x70
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	60f8      	str	r0, [r7, #12]
 80054e6:	60b9      	str	r1, [r7, #8]
 80054e8:	603b      	str	r3, [r7, #0]
 80054ea:	4613      	mov	r3, r2
 80054ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054ee:	e0a5      	b.n	800563c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054f6:	f000 80a1 	beq.w	800563c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054fa:	f7fc f9b9 	bl	8001870 <HAL_GetTick>
 80054fe:	4602      	mov	r2, r0
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005506:	429a      	cmp	r2, r3
 8005508:	d302      	bcc.n	8005510 <UART_WaitOnFlagUntilTimeout+0x32>
 800550a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800550c:	2b00      	cmp	r3, #0
 800550e:	d13e      	bne.n	800558e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005516:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005518:	e853 3f00 	ldrex	r3, [r3]
 800551c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800551e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005520:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005524:	667b      	str	r3, [r7, #100]	; 0x64
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	461a      	mov	r2, r3
 800552c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800552e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005530:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005532:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005534:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005536:	e841 2300 	strex	r3, r2, [r1]
 800553a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800553c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800553e:	2b00      	cmp	r3, #0
 8005540:	d1e6      	bne.n	8005510 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	3308      	adds	r3, #8
 8005548:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800554a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800554c:	e853 3f00 	ldrex	r3, [r3]
 8005550:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005554:	f023 0301 	bic.w	r3, r3, #1
 8005558:	663b      	str	r3, [r7, #96]	; 0x60
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	3308      	adds	r3, #8
 8005560:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005562:	64ba      	str	r2, [r7, #72]	; 0x48
 8005564:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005566:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005568:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800556a:	e841 2300 	strex	r3, r2, [r1]
 800556e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005570:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005572:	2b00      	cmp	r3, #0
 8005574:	d1e5      	bne.n	8005542 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2220      	movs	r2, #32
 800557a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2220      	movs	r2, #32
 8005580:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e067      	b.n	800565e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0304 	and.w	r3, r3, #4
 8005598:	2b00      	cmp	r3, #0
 800559a:	d04f      	beq.n	800563c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	69db      	ldr	r3, [r3, #28]
 80055a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055aa:	d147      	bne.n	800563c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055b4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055be:	e853 3f00 	ldrex	r3, [r3]
 80055c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80055ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	461a      	mov	r2, r3
 80055d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055d4:	637b      	str	r3, [r7, #52]	; 0x34
 80055d6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80055da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055dc:	e841 2300 	strex	r3, r2, [r1]
 80055e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80055e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d1e6      	bne.n	80055b6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	3308      	adds	r3, #8
 80055ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	e853 3f00 	ldrex	r3, [r3]
 80055f6:	613b      	str	r3, [r7, #16]
   return(result);
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	f023 0301 	bic.w	r3, r3, #1
 80055fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	3308      	adds	r3, #8
 8005606:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005608:	623a      	str	r2, [r7, #32]
 800560a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560c:	69f9      	ldr	r1, [r7, #28]
 800560e:	6a3a      	ldr	r2, [r7, #32]
 8005610:	e841 2300 	strex	r3, r2, [r1]
 8005614:	61bb      	str	r3, [r7, #24]
   return(result);
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d1e5      	bne.n	80055e8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2220      	movs	r2, #32
 8005620:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2220      	movs	r2, #32
 8005626:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2220      	movs	r2, #32
 800562c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2200      	movs	r2, #0
 8005634:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005638:	2303      	movs	r3, #3
 800563a:	e010      	b.n	800565e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	69da      	ldr	r2, [r3, #28]
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	4013      	ands	r3, r2
 8005646:	68ba      	ldr	r2, [r7, #8]
 8005648:	429a      	cmp	r2, r3
 800564a:	bf0c      	ite	eq
 800564c:	2301      	moveq	r3, #1
 800564e:	2300      	movne	r3, #0
 8005650:	b2db      	uxtb	r3, r3
 8005652:	461a      	mov	r2, r3
 8005654:	79fb      	ldrb	r3, [r7, #7]
 8005656:	429a      	cmp	r2, r3
 8005658:	f43f af4a 	beq.w	80054f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	3770      	adds	r7, #112	; 0x70
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}

08005666 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005666:	b084      	sub	sp, #16
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	f107 001c 	add.w	r0, r7, #28
 8005674:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f000 f9a1 	bl	80059cc <USB_CoreReset>
 800568a:	4603      	mov	r3, r0
 800568c:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800568e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005690:	2b00      	cmp	r3, #0
 8005692:	d106      	bne.n	80056a2 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005698:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	639a      	str	r2, [r3, #56]	; 0x38
 80056a0:	e005      	b.n	80056ae <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80056ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3710      	adds	r7, #16
 80056b4:	46bd      	mov	sp, r7
 80056b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80056ba:	b004      	add	sp, #16
 80056bc:	4770      	bx	lr

080056be <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80056be:	b480      	push	{r7}
 80056c0:	b083      	sub	sp, #12
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	f043 0201 	orr.w	r2, r3, #1
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056d2:	2300      	movs	r3, #0
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	370c      	adds	r7, #12
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	f023 0201 	bic.w	r2, r3, #1
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	370c      	adds	r7, #12
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr

08005702 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005702:	b580      	push	{r7, lr}
 8005704:	b084      	sub	sp, #16
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
 800570a:	460b      	mov	r3, r1
 800570c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800570e:	2300      	movs	r3, #0
 8005710:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800571e:	78fb      	ldrb	r3, [r7, #3]
 8005720:	2b01      	cmp	r3, #1
 8005722:	d115      	bne.n	8005750 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005730:	2001      	movs	r0, #1
 8005732:	f7fc f8a9 	bl	8001888 <HAL_Delay>
      ms++;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	3301      	adds	r3, #1
 800573a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 f936 	bl	80059ae <USB_GetMode>
 8005742:	4603      	mov	r3, r0
 8005744:	2b01      	cmp	r3, #1
 8005746:	d01e      	beq.n	8005786 <USB_SetCurrentMode+0x84>
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2b31      	cmp	r3, #49	; 0x31
 800574c:	d9f0      	bls.n	8005730 <USB_SetCurrentMode+0x2e>
 800574e:	e01a      	b.n	8005786 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005750:	78fb      	ldrb	r3, [r7, #3]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d115      	bne.n	8005782 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005762:	2001      	movs	r0, #1
 8005764:	f7fc f890 	bl	8001888 <HAL_Delay>
      ms++;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	3301      	adds	r3, #1
 800576c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 f91d 	bl	80059ae <USB_GetMode>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d005      	beq.n	8005786 <USB_SetCurrentMode+0x84>
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2b31      	cmp	r3, #49	; 0x31
 800577e:	d9f0      	bls.n	8005762 <USB_SetCurrentMode+0x60>
 8005780:	e001      	b.n	8005786 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e005      	b.n	8005792 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2b32      	cmp	r3, #50	; 0x32
 800578a:	d101      	bne.n	8005790 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e000      	b.n	8005792 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3710      	adds	r7, #16
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
	...

0800579c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800579c:	b480      	push	{r7}
 800579e:	b085      	sub	sp, #20
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80057a6:	2300      	movs	r3, #0
 80057a8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	3301      	adds	r3, #1
 80057ae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	4a13      	ldr	r2, [pc, #76]	; (8005800 <USB_FlushTxFifo+0x64>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d901      	bls.n	80057bc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80057b8:	2303      	movs	r3, #3
 80057ba:	e01b      	b.n	80057f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	daf2      	bge.n	80057aa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80057c4:	2300      	movs	r3, #0
 80057c6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	019b      	lsls	r3, r3, #6
 80057cc:	f043 0220 	orr.w	r2, r3, #32
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	3301      	adds	r3, #1
 80057d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	4a08      	ldr	r2, [pc, #32]	; (8005800 <USB_FlushTxFifo+0x64>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d901      	bls.n	80057e6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	e006      	b.n	80057f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	f003 0320 	and.w	r3, r3, #32
 80057ee:	2b20      	cmp	r3, #32
 80057f0:	d0f0      	beq.n	80057d4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80057f2:	2300      	movs	r3, #0
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3714      	adds	r7, #20
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr
 8005800:	00030d40 	.word	0x00030d40

08005804 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005804:	b480      	push	{r7}
 8005806:	b085      	sub	sp, #20
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800580c:	2300      	movs	r3, #0
 800580e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	3301      	adds	r3, #1
 8005814:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	4a11      	ldr	r2, [pc, #68]	; (8005860 <USB_FlushRxFifo+0x5c>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d901      	bls.n	8005822 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800581e:	2303      	movs	r3, #3
 8005820:	e018      	b.n	8005854 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	2b00      	cmp	r3, #0
 8005828:	daf2      	bge.n	8005810 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800582a:	2300      	movs	r3, #0
 800582c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2210      	movs	r2, #16
 8005832:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	3301      	adds	r3, #1
 8005838:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	4a08      	ldr	r2, [pc, #32]	; (8005860 <USB_FlushRxFifo+0x5c>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d901      	bls.n	8005846 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	e006      	b.n	8005854 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	f003 0310 	and.w	r3, r3, #16
 800584e:	2b10      	cmp	r3, #16
 8005850:	d0f0      	beq.n	8005834 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005852:	2300      	movs	r3, #0
}
 8005854:	4618      	mov	r0, r3
 8005856:	3714      	adds	r7, #20
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr
 8005860:	00030d40 	.word	0x00030d40

08005864 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8005864:	b480      	push	{r7}
 8005866:	b089      	sub	sp, #36	; 0x24
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	4611      	mov	r1, r2
 8005870:	461a      	mov	r2, r3
 8005872:	460b      	mov	r3, r1
 8005874:	71fb      	strb	r3, [r7, #7]
 8005876:	4613      	mov	r3, r2
 8005878:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8005882:	88bb      	ldrh	r3, [r7, #4]
 8005884:	3303      	adds	r3, #3
 8005886:	089b      	lsrs	r3, r3, #2
 8005888:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800588a:	2300      	movs	r3, #0
 800588c:	61bb      	str	r3, [r7, #24]
 800588e:	e018      	b.n	80058c2 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005890:	79fb      	ldrb	r3, [r7, #7]
 8005892:	031a      	lsls	r2, r3, #12
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	4413      	add	r3, r2
 8005898:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800589c:	461a      	mov	r2, r3
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	6013      	str	r3, [r2, #0]
    pSrc++;
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	3301      	adds	r3, #1
 80058a8:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	3301      	adds	r3, #1
 80058ae:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	3301      	adds	r3, #1
 80058b4:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	3301      	adds	r3, #1
 80058ba:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	3301      	adds	r3, #1
 80058c0:	61bb      	str	r3, [r7, #24]
 80058c2:	69ba      	ldr	r2, [r7, #24]
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d3e2      	bcc.n	8005890 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3724      	adds	r7, #36	; 0x24
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80058d8:	b480      	push	{r7}
 80058da:	b08b      	sub	sp, #44	; 0x2c
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	4613      	mov	r3, r2
 80058e4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80058ee:	88fb      	ldrh	r3, [r7, #6]
 80058f0:	089b      	lsrs	r3, r3, #2
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80058f6:	88fb      	ldrh	r3, [r7, #6]
 80058f8:	f003 0303 	and.w	r3, r3, #3
 80058fc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80058fe:	2300      	movs	r3, #0
 8005900:	623b      	str	r3, [r7, #32]
 8005902:	e014      	b.n	800592e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005912:	3301      	adds	r3, #1
 8005914:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005918:	3301      	adds	r3, #1
 800591a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800591c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591e:	3301      	adds	r3, #1
 8005920:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005924:	3301      	adds	r3, #1
 8005926:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005928:	6a3b      	ldr	r3, [r7, #32]
 800592a:	3301      	adds	r3, #1
 800592c:	623b      	str	r3, [r7, #32]
 800592e:	6a3a      	ldr	r2, [r7, #32]
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	429a      	cmp	r2, r3
 8005934:	d3e6      	bcc.n	8005904 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005936:	8bfb      	ldrh	r3, [r7, #30]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d01e      	beq.n	800597a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800593c:	2300      	movs	r3, #0
 800593e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005946:	461a      	mov	r2, r3
 8005948:	f107 0310 	add.w	r3, r7, #16
 800594c:	6812      	ldr	r2, [r2, #0]
 800594e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005950:	693a      	ldr	r2, [r7, #16]
 8005952:	6a3b      	ldr	r3, [r7, #32]
 8005954:	b2db      	uxtb	r3, r3
 8005956:	00db      	lsls	r3, r3, #3
 8005958:	fa22 f303 	lsr.w	r3, r2, r3
 800595c:	b2da      	uxtb	r2, r3
 800595e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005960:	701a      	strb	r2, [r3, #0]
      i++;
 8005962:	6a3b      	ldr	r3, [r7, #32]
 8005964:	3301      	adds	r3, #1
 8005966:	623b      	str	r3, [r7, #32]
      pDest++;
 8005968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596a:	3301      	adds	r3, #1
 800596c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800596e:	8bfb      	ldrh	r3, [r7, #30]
 8005970:	3b01      	subs	r3, #1
 8005972:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005974:	8bfb      	ldrh	r3, [r7, #30]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d1ea      	bne.n	8005950 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800597a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800597c:	4618      	mov	r0, r3
 800597e:	372c      	adds	r7, #44	; 0x2c
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005988:	b480      	push	{r7}
 800598a:	b085      	sub	sp, #20
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	695b      	ldr	r3, [r3, #20]
 8005994:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	699b      	ldr	r3, [r3, #24]
 800599a:	68fa      	ldr	r2, [r7, #12]
 800599c:	4013      	ands	r3, r2
 800599e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80059a0:	68fb      	ldr	r3, [r7, #12]
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3714      	adds	r7, #20
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr

080059ae <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80059ae:	b480      	push	{r7}
 80059b0:	b083      	sub	sp, #12
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	695b      	ldr	r3, [r3, #20]
 80059ba:	f003 0301 	and.w	r3, r3, #1
}
 80059be:	4618      	mov	r0, r3
 80059c0:	370c      	adds	r7, #12
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr
	...

080059cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059d4:	2300      	movs	r3, #0
 80059d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	3301      	adds	r3, #1
 80059dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	4a13      	ldr	r2, [pc, #76]	; (8005a30 <USB_CoreReset+0x64>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d901      	bls.n	80059ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e01b      	b.n	8005a22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	daf2      	bge.n	80059d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80059f2:	2300      	movs	r3, #0
 80059f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	f043 0201 	orr.w	r2, r3, #1
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	3301      	adds	r3, #1
 8005a06:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	4a09      	ldr	r2, [pc, #36]	; (8005a30 <USB_CoreReset+0x64>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d901      	bls.n	8005a14 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005a10:	2303      	movs	r3, #3
 8005a12:	e006      	b.n	8005a22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	f003 0301 	and.w	r3, r3, #1
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d0f0      	beq.n	8005a02 <USB_CoreReset+0x36>

  return HAL_OK;
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3714      	adds	r7, #20
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr
 8005a2e:	bf00      	nop
 8005a30:	00030d40 	.word	0x00030d40

08005a34 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a34:	b084      	sub	sp, #16
 8005a36:	b580      	push	{r7, lr}
 8005a38:	b086      	sub	sp, #24
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
 8005a3e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005a42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005a46:	2300      	movs	r3, #0
 8005a48:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a54:	461a      	mov	r2, r3
 8005a56:	2300      	movs	r3, #0
 8005a58:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a6a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a80:	f023 0304 	bic.w	r3, r3, #4
 8005a84:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005a86:	2110      	movs	r1, #16
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f7ff fe87 	bl	800579c <USB_FlushTxFifo>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d001      	beq.n	8005a98 <USB_HostInit+0x64>
  {
    ret = HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f7ff feb3 	bl	8005804 <USB_FlushRxFifo>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d001      	beq.n	8005aa8 <USB_HostInit+0x74>
  {
    ret = HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	613b      	str	r3, [r7, #16]
 8005aac:	e015      	b.n	8005ada <USB_HostInit+0xa6>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	015a      	lsls	r2, r3, #5
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	4413      	add	r3, r2
 8005ab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aba:	461a      	mov	r2, r3
 8005abc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ac0:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	015a      	lsls	r2, r3, #5
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	4413      	add	r3, r2
 8005aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ace:	461a      	mov	r2, r3
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	613b      	str	r3, [r7, #16]
 8005ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005adc:	693a      	ldr	r2, [r7, #16]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d3e5      	bcc.n	8005aae <USB_HostInit+0x7a>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005aee:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2280      	movs	r2, #128	; 0x80
 8005af4:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a0c      	ldr	r2, [pc, #48]	; (8005b2c <USB_HostInit+0xf8>)
 8005afa:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a0c      	ldr	r2, [pc, #48]	; (8005b30 <USB_HostInit+0xfc>)
 8005b00:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	699b      	ldr	r3, [r3, #24]
 8005b08:	f043 0210 	orr.w	r2, r3, #16
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	699a      	ldr	r2, [r3, #24]
 8005b14:	4b07      	ldr	r3, [pc, #28]	; (8005b34 <USB_HostInit+0x100>)
 8005b16:	4313      	orrs	r3, r2
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005b1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3718      	adds	r7, #24
 8005b22:	46bd      	mov	sp, r7
 8005b24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b28:	b004      	add	sp, #16
 8005b2a:	4770      	bx	lr
 8005b2c:	00600080 	.word	0x00600080
 8005b30:	004000e0 	.word	0x004000e0
 8005b34:	a3200008 	.word	0xa3200008

08005b38 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b085      	sub	sp, #20
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	460b      	mov	r3, r1
 8005b42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b56:	f023 0303 	bic.w	r3, r3, #3
 8005b5a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	78fb      	ldrb	r3, [r7, #3]
 8005b66:	f003 0303 	and.w	r3, r3, #3
 8005b6a:	68f9      	ldr	r1, [r7, #12]
 8005b6c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005b70:	4313      	orrs	r3, r2
 8005b72:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005b74:	78fb      	ldrb	r3, [r7, #3]
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d107      	bne.n	8005b8a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b80:	461a      	mov	r2, r3
 8005b82:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005b86:	6053      	str	r3, [r2, #4]
 8005b88:	e009      	b.n	8005b9e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005b8a:	78fb      	ldrb	r3, [r7, #3]
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	d106      	bne.n	8005b9e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b96:	461a      	mov	r2, r3
 8005b98:	f241 7370 	movw	r3, #6000	; 0x1770
 8005b9c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005b9e:	2300      	movs	r3, #0
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3714      	adds	r7, #20
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005bcc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005bd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bda:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005bdc:	2064      	movs	r0, #100	; 0x64
 8005bde:	f7fb fe53 	bl	8001888 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	68fa      	ldr	r2, [r7, #12]
 8005be6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005bea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bee:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005bf0:	200a      	movs	r0, #10
 8005bf2:	f7fb fe49 	bl	8001888 <HAL_Delay>

  return HAL_OK;
 8005bf6:	2300      	movs	r3, #0
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3710      	adds	r7, #16
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b085      	sub	sp, #20
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	460b      	mov	r3, r1
 8005c0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005c10:	2300      	movs	r3, #0
 8005c12:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005c24:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d109      	bne.n	8005c44 <USB_DriveVbus+0x44>
 8005c30:	78fb      	ldrb	r3, [r7, #3]
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d106      	bne.n	8005c44 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005c3e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005c42:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c4e:	d109      	bne.n	8005c64 <USB_DriveVbus+0x64>
 8005c50:	78fb      	ldrb	r3, [r7, #3]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d106      	bne.n	8005c64 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005c5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c62:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3714      	adds	r7, #20
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr

08005c72 <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005c72:	b480      	push	{r7}
 8005c74:	b085      	sub	sp, #20
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	0c5b      	lsrs	r3, r3, #17
 8005c90:	f003 0303 	and.w	r3, r3, #3
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3714      	adds	r7, #20
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b085      	sub	sp, #20
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	b29b      	uxth	r3, r3
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3714      	adds	r7, #20
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr
	...

08005cc4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b088      	sub	sp, #32
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	4608      	mov	r0, r1
 8005cce:	4611      	mov	r1, r2
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	70fb      	strb	r3, [r7, #3]
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	70bb      	strb	r3, [r7, #2]
 8005cda:	4613      	mov	r3, r2
 8005cdc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005ce6:	78fb      	ldrb	r3, [r7, #3]
 8005ce8:	015a      	lsls	r2, r3, #5
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	4413      	add	r3, r2
 8005cee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005cf8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005cfa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005cfe:	2b03      	cmp	r3, #3
 8005d00:	d867      	bhi.n	8005dd2 <USB_HC_Init+0x10e>
 8005d02:	a201      	add	r2, pc, #4	; (adr r2, 8005d08 <USB_HC_Init+0x44>)
 8005d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d08:	08005d19 	.word	0x08005d19
 8005d0c:	08005d95 	.word	0x08005d95
 8005d10:	08005d19 	.word	0x08005d19
 8005d14:	08005d57 	.word	0x08005d57
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005d18:	78fb      	ldrb	r3, [r7, #3]
 8005d1a:	015a      	lsls	r2, r3, #5
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	4413      	add	r3, r2
 8005d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d24:	461a      	mov	r2, r3
 8005d26:	f240 439d 	movw	r3, #1181	; 0x49d
 8005d2a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005d2c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	da51      	bge.n	8005dd8 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005d34:	78fb      	ldrb	r3, [r7, #3]
 8005d36:	015a      	lsls	r2, r3, #5
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	78fa      	ldrb	r2, [r7, #3]
 8005d44:	0151      	lsls	r1, r2, #5
 8005d46:	693a      	ldr	r2, [r7, #16]
 8005d48:	440a      	add	r2, r1
 8005d4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d52:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005d54:	e040      	b.n	8005dd8 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005d56:	78fb      	ldrb	r3, [r7, #3]
 8005d58:	015a      	lsls	r2, r3, #5
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d62:	461a      	mov	r2, r3
 8005d64:	f240 639d 	movw	r3, #1693	; 0x69d
 8005d68:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005d6a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	da34      	bge.n	8005ddc <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005d72:	78fb      	ldrb	r3, [r7, #3]
 8005d74:	015a      	lsls	r2, r3, #5
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	4413      	add	r3, r2
 8005d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	78fa      	ldrb	r2, [r7, #3]
 8005d82:	0151      	lsls	r1, r2, #5
 8005d84:	693a      	ldr	r2, [r7, #16]
 8005d86:	440a      	add	r2, r1
 8005d88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d90:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005d92:	e023      	b.n	8005ddc <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005d94:	78fb      	ldrb	r3, [r7, #3]
 8005d96:	015a      	lsls	r2, r3, #5
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005da0:	461a      	mov	r2, r3
 8005da2:	f240 2325 	movw	r3, #549	; 0x225
 8005da6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005da8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	da17      	bge.n	8005de0 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005db0:	78fb      	ldrb	r3, [r7, #3]
 8005db2:	015a      	lsls	r2, r3, #5
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	4413      	add	r3, r2
 8005db8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	78fa      	ldrb	r2, [r7, #3]
 8005dc0:	0151      	lsls	r1, r2, #5
 8005dc2:	693a      	ldr	r2, [r7, #16]
 8005dc4:	440a      	add	r2, r1
 8005dc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dca:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005dce:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005dd0:	e006      	b.n	8005de0 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	77fb      	strb	r3, [r7, #31]
      break;
 8005dd6:	e004      	b.n	8005de2 <USB_HC_Init+0x11e>
      break;
 8005dd8:	bf00      	nop
 8005dda:	e002      	b.n	8005de2 <USB_HC_Init+0x11e>
      break;
 8005ddc:	bf00      	nop
 8005dde:	e000      	b.n	8005de2 <USB_HC_Init+0x11e>
      break;
 8005de0:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005de2:	78fb      	ldrb	r3, [r7, #3]
 8005de4:	015a      	lsls	r2, r3, #5
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	4413      	add	r3, r2
 8005dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	78fa      	ldrb	r2, [r7, #3]
 8005df2:	0151      	lsls	r1, r2, #5
 8005df4:	693a      	ldr	r2, [r7, #16]
 8005df6:	440a      	add	r2, r1
 8005df8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dfc:	f043 0302 	orr.w	r3, r3, #2
 8005e00:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e08:	699a      	ldr	r2, [r3, #24]
 8005e0a:	78fb      	ldrb	r3, [r7, #3]
 8005e0c:	f003 030f 	and.w	r3, r3, #15
 8005e10:	2101      	movs	r1, #1
 8005e12:	fa01 f303 	lsl.w	r3, r1, r3
 8005e16:	6939      	ldr	r1, [r7, #16]
 8005e18:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	699b      	ldr	r3, [r3, #24]
 8005e24:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005e2c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	da03      	bge.n	8005e3c <USB_HC_Init+0x178>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005e34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e38:	61bb      	str	r3, [r7, #24]
 8005e3a:	e001      	b.n	8005e40 <USB_HC_Init+0x17c>
  }
  else
  {
    HCcharEpDir = 0U;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f7ff ff16 	bl	8005c72 <USB_GetHostSpeed>
 8005e46:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005e48:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	d106      	bne.n	8005e5e <USB_HC_Init+0x19a>
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d003      	beq.n	8005e5e <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005e56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e5a:	617b      	str	r3, [r7, #20]
 8005e5c:	e001      	b.n	8005e62 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005e62:	787b      	ldrb	r3, [r7, #1]
 8005e64:	059b      	lsls	r3, r3, #22
 8005e66:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005e6a:	78bb      	ldrb	r3, [r7, #2]
 8005e6c:	02db      	lsls	r3, r3, #11
 8005e6e:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005e72:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005e74:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005e78:	049b      	lsls	r3, r3, #18
 8005e7a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005e7e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005e80:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005e82:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005e86:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005e8c:	78fb      	ldrb	r3, [r7, #3]
 8005e8e:	0159      	lsls	r1, r3, #5
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	440b      	add	r3, r1
 8005e94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e98:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005e9e:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005ea0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005ea4:	2b03      	cmp	r3, #3
 8005ea6:	d003      	beq.n	8005eb0 <USB_HC_Init+0x1ec>
 8005ea8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d10f      	bne.n	8005ed0 <USB_HC_Init+0x20c>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005eb0:	78fb      	ldrb	r3, [r7, #3]
 8005eb2:	015a      	lsls	r2, r3, #5
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	78fa      	ldrb	r2, [r7, #3]
 8005ec0:	0151      	lsls	r1, r2, #5
 8005ec2:	693a      	ldr	r2, [r7, #16]
 8005ec4:	440a      	add	r2, r1
 8005ec6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005eca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ece:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005ed0:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3720      	adds	r7, #32
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop

08005edc <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b088      	sub	sp, #32
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	785b      	ldrb	r3, [r3, #1]
 8005eee:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005ef0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ef4:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	695b      	ldr	r3, [r3, #20]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d018      	beq.n	8005f30 <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	695b      	ldr	r3, [r3, #20]
 8005f02:	683a      	ldr	r2, [r7, #0]
 8005f04:	8912      	ldrh	r2, [r2, #8]
 8005f06:	4413      	add	r3, r2
 8005f08:	3b01      	subs	r3, #1
 8005f0a:	683a      	ldr	r2, [r7, #0]
 8005f0c:	8912      	ldrh	r2, [r2, #8]
 8005f0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f12:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 8005f14:	8bfa      	ldrh	r2, [r7, #30]
 8005f16:	8a7b      	ldrh	r3, [r7, #18]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d90b      	bls.n	8005f34 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 8005f1c:	8a7b      	ldrh	r3, [r7, #18]
 8005f1e:	83fb      	strh	r3, [r7, #30]
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005f20:	8bfb      	ldrh	r3, [r7, #30]
 8005f22:	683a      	ldr	r2, [r7, #0]
 8005f24:	8912      	ldrh	r2, [r2, #8]
 8005f26:	fb03 f202 	mul.w	r2, r3, r2
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	611a      	str	r2, [r3, #16]
 8005f2e:	e001      	b.n	8005f34 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 8005f30:	2301      	movs	r3, #1
 8005f32:	83fb      	strh	r3, [r7, #30]

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	78db      	ldrb	r3, [r3, #3]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d007      	beq.n	8005f4c <USB_HC_StartXfer+0x70>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005f3c:	8bfb      	ldrh	r3, [r7, #30]
 8005f3e:	683a      	ldr	r2, [r7, #0]
 8005f40:	8912      	ldrh	r2, [r2, #8]
 8005f42:	fb03 f202 	mul.w	r2, r3, r2
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	611a      	str	r2, [r3, #16]
 8005f4a:	e003      	b.n	8005f54 <USB_HC_StartXfer+0x78>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	695a      	ldr	r2, [r3, #20]
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005f5c:	8bfb      	ldrh	r3, [r7, #30]
 8005f5e:	04d9      	lsls	r1, r3, #19
 8005f60:	4b59      	ldr	r3, [pc, #356]	; (80060c8 <USB_HC_StartXfer+0x1ec>)
 8005f62:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f64:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	7a9b      	ldrb	r3, [r3, #10]
 8005f6a:	075b      	lsls	r3, r3, #29
 8005f6c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f70:	6979      	ldr	r1, [r7, #20]
 8005f72:	0148      	lsls	r0, r1, #5
 8005f74:	69b9      	ldr	r1, [r7, #24]
 8005f76:	4401      	add	r1, r0
 8005f78:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005f7c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f7e:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	f003 0301 	and.w	r3, r3, #1
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	bf0c      	ite	eq
 8005f90:	2301      	moveq	r3, #1
 8005f92:	2300      	movne	r3, #0
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	015a      	lsls	r2, r3, #5
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	4413      	add	r3, r2
 8005fa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	697a      	ldr	r2, [r7, #20]
 8005fa8:	0151      	lsls	r1, r2, #5
 8005faa:	69ba      	ldr	r2, [r7, #24]
 8005fac:	440a      	add	r2, r1
 8005fae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fb2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005fb6:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	015a      	lsls	r2, r3, #5
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	7c7b      	ldrb	r3, [r7, #17]
 8005fc8:	075b      	lsls	r3, r3, #29
 8005fca:	6979      	ldr	r1, [r7, #20]
 8005fcc:	0148      	lsls	r0, r1, #5
 8005fce:	69b9      	ldr	r1, [r7, #24]
 8005fd0:	4401      	add	r1, r0
 8005fd2:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	015a      	lsls	r2, r3, #5
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ff0:	60bb      	str	r3, [r7, #8]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	78db      	ldrb	r3, [r3, #3]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d004      	beq.n	8006004 <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006000:	60bb      	str	r3, [r7, #8]
 8006002:	e003      	b.n	800600c <USB_HC_StartXfer+0x130>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800600a:	60bb      	str	r3, [r7, #8]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006012:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	015a      	lsls	r2, r3, #5
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	4413      	add	r3, r2
 800601c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006020:	461a      	mov	r2, r3
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	6013      	str	r3, [r2, #0]

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	78db      	ldrb	r3, [r3, #3]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d147      	bne.n	80060be <USB_HC_StartXfer+0x1e2>
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	695b      	ldr	r3, [r3, #20]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d043      	beq.n	80060be <USB_HC_StartXfer+0x1e2>
  {
    switch (hc->ep_type)
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	79db      	ldrb	r3, [r3, #7]
 800603a:	2b03      	cmp	r3, #3
 800603c:	d830      	bhi.n	80060a0 <USB_HC_StartXfer+0x1c4>
 800603e:	a201      	add	r2, pc, #4	; (adr r2, 8006044 <USB_HC_StartXfer+0x168>)
 8006040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006044:	08006055 	.word	0x08006055
 8006048:	08006079 	.word	0x08006079
 800604c:	08006055 	.word	0x08006055
 8006050:	08006079 	.word	0x08006079
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	695b      	ldr	r3, [r3, #20]
 8006058:	3303      	adds	r3, #3
 800605a:	089b      	lsrs	r3, r3, #2
 800605c:	81fb      	strh	r3, [r7, #14]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800605e:	89fa      	ldrh	r2, [r7, #14]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006064:	b29b      	uxth	r3, r3
 8006066:	429a      	cmp	r2, r3
 8006068:	d91c      	bls.n	80060a4 <USB_HC_StartXfer+0x1c8>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	699b      	ldr	r3, [r3, #24]
 800606e:	f043 0220 	orr.w	r2, r3, #32
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	619a      	str	r2, [r3, #24]
        }
        break;
 8006076:	e015      	b.n	80060a4 <USB_HC_StartXfer+0x1c8>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	695b      	ldr	r3, [r3, #20]
 800607c:	3303      	adds	r3, #3
 800607e:	089b      	lsrs	r3, r3, #2
 8006080:	81fb      	strh	r3, [r7, #14]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006082:	89fa      	ldrh	r2, [r7, #14]
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	b29b      	uxth	r3, r3
 800608e:	429a      	cmp	r2, r3
 8006090:	d90a      	bls.n	80060a8 <USB_HC_StartXfer+0x1cc>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	699b      	ldr	r3, [r3, #24]
 8006096:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	619a      	str	r2, [r3, #24]
        }
        break;
 800609e:	e003      	b.n	80060a8 <USB_HC_StartXfer+0x1cc>

      default:
        break;
 80060a0:	bf00      	nop
 80060a2:	e002      	b.n	80060aa <USB_HC_StartXfer+0x1ce>
        break;
 80060a4:	bf00      	nop
 80060a6:	e000      	b.n	80060aa <USB_HC_StartXfer+0x1ce>
        break;
 80060a8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	68d9      	ldr	r1, [r3, #12]
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	785a      	ldrb	r2, [r3, #1]
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	695b      	ldr	r3, [r3, #20]
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f7ff fbd3 	bl	8005864 <USB_WritePacket>
  }

  return HAL_OK;
 80060be:	2300      	movs	r3, #0
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3720      	adds	r7, #32
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	1ff80000 	.word	0x1ff80000

080060cc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b085      	sub	sp, #20
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060de:	695b      	ldr	r3, [r3, #20]
 80060e0:	b29b      	uxth	r3, r3
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3714      	adds	r7, #20
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr

080060ee <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80060ee:	b480      	push	{r7}
 80060f0:	b089      	sub	sp, #36	; 0x24
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
 80060f6:	460b      	mov	r3, r1
 80060f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80060fe:	78fb      	ldrb	r3, [r7, #3]
 8006100:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006102:	2300      	movs	r3, #0
 8006104:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	015a      	lsls	r2, r3, #5
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	4413      	add	r3, r2
 800610e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	0c9b      	lsrs	r3, r3, #18
 8006116:	f003 0303 	and.w	r3, r3, #3
 800611a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	015a      	lsls	r2, r3, #5
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	4413      	add	r3, r2
 8006124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	0fdb      	lsrs	r3, r3, #31
 800612c:	f003 0301 	and.w	r3, r3, #1
 8006130:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	f003 0320 	and.w	r3, r3, #32
 800613a:	2b20      	cmp	r3, #32
 800613c:	d104      	bne.n	8006148 <USB_HC_Halt+0x5a>
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d101      	bne.n	8006148 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006144:	2300      	movs	r3, #0
 8006146:	e0c8      	b.n	80062da <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d002      	beq.n	8006154 <USB_HC_Halt+0x66>
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	2b02      	cmp	r3, #2
 8006152:	d163      	bne.n	800621c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006154:	69bb      	ldr	r3, [r7, #24]
 8006156:	015a      	lsls	r2, r3, #5
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	4413      	add	r3, r2
 800615c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	69ba      	ldr	r2, [r7, #24]
 8006164:	0151      	lsls	r1, r2, #5
 8006166:	69fa      	ldr	r2, [r7, #28]
 8006168:	440a      	add	r2, r1
 800616a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800616e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006172:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	f003 0320 	and.w	r3, r3, #32
 800617c:	2b00      	cmp	r3, #0
 800617e:	f040 80ab 	bne.w	80062d8 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006186:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800618a:	2b00      	cmp	r3, #0
 800618c:	d133      	bne.n	80061f6 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	015a      	lsls	r2, r3, #5
 8006192:	69fb      	ldr	r3, [r7, #28]
 8006194:	4413      	add	r3, r2
 8006196:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	69ba      	ldr	r2, [r7, #24]
 800619e:	0151      	lsls	r1, r2, #5
 80061a0:	69fa      	ldr	r2, [r7, #28]
 80061a2:	440a      	add	r2, r1
 80061a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80061ac:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	015a      	lsls	r2, r3, #5
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	4413      	add	r3, r2
 80061b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	69ba      	ldr	r2, [r7, #24]
 80061be:	0151      	lsls	r1, r2, #5
 80061c0:	69fa      	ldr	r2, [r7, #28]
 80061c2:	440a      	add	r2, r1
 80061c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061cc:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	3301      	adds	r3, #1
 80061d2:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061da:	d81d      	bhi.n	8006218 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	015a      	lsls	r2, r3, #5
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	4413      	add	r3, r2
 80061e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061f2:	d0ec      	beq.n	80061ce <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80061f4:	e070      	b.n	80062d8 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	015a      	lsls	r2, r3, #5
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	4413      	add	r3, r2
 80061fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	69ba      	ldr	r2, [r7, #24]
 8006206:	0151      	lsls	r1, r2, #5
 8006208:	69fa      	ldr	r2, [r7, #28]
 800620a:	440a      	add	r2, r1
 800620c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006210:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006214:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006216:	e05f      	b.n	80062d8 <USB_HC_Halt+0x1ea>
            break;
 8006218:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800621a:	e05d      	b.n	80062d8 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	015a      	lsls	r2, r3, #5
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	4413      	add	r3, r2
 8006224:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	69ba      	ldr	r2, [r7, #24]
 800622c:	0151      	lsls	r1, r2, #5
 800622e:	69fa      	ldr	r2, [r7, #28]
 8006230:	440a      	add	r2, r1
 8006232:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006236:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800623a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006248:	2b00      	cmp	r3, #0
 800624a:	d133      	bne.n	80062b4 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800624c:	69bb      	ldr	r3, [r7, #24]
 800624e:	015a      	lsls	r2, r3, #5
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	4413      	add	r3, r2
 8006254:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	69ba      	ldr	r2, [r7, #24]
 800625c:	0151      	lsls	r1, r2, #5
 800625e:	69fa      	ldr	r2, [r7, #28]
 8006260:	440a      	add	r2, r1
 8006262:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006266:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800626a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	015a      	lsls	r2, r3, #5
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	4413      	add	r3, r2
 8006274:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	69ba      	ldr	r2, [r7, #24]
 800627c:	0151      	lsls	r1, r2, #5
 800627e:	69fa      	ldr	r2, [r7, #28]
 8006280:	440a      	add	r2, r1
 8006282:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006286:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800628a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	3301      	adds	r3, #1
 8006290:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006298:	d81d      	bhi.n	80062d6 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	015a      	lsls	r2, r3, #5
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	4413      	add	r3, r2
 80062a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062b0:	d0ec      	beq.n	800628c <USB_HC_Halt+0x19e>
 80062b2:	e011      	b.n	80062d8 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80062b4:	69bb      	ldr	r3, [r7, #24]
 80062b6:	015a      	lsls	r2, r3, #5
 80062b8:	69fb      	ldr	r3, [r7, #28]
 80062ba:	4413      	add	r3, r2
 80062bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	69ba      	ldr	r2, [r7, #24]
 80062c4:	0151      	lsls	r1, r2, #5
 80062c6:	69fa      	ldr	r2, [r7, #28]
 80062c8:	440a      	add	r2, r1
 80062ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062d2:	6013      	str	r3, [r2, #0]
 80062d4:	e000      	b.n	80062d8 <USB_HC_Halt+0x1ea>
          break;
 80062d6:	bf00      	nop
    }
  }

  return HAL_OK;
 80062d8:	2300      	movs	r3, #0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3724      	adds	r7, #36	; 0x24
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr

080062e6 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80062e6:	b580      	push	{r7, lr}
 80062e8:	b088      	sub	sp, #32
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80062ee:	2300      	movs	r3, #0
 80062f0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80062f6:	2300      	movs	r3, #0
 80062f8:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f7ff f9f0 	bl	80056e0 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006300:	2110      	movs	r1, #16
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f7ff fa4a 	bl	800579c <USB_FlushTxFifo>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d001      	beq.n	8006312 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f7ff fa76 	bl	8005804 <USB_FlushRxFifo>
 8006318:	4603      	mov	r3, r0
 800631a:	2b00      	cmp	r3, #0
 800631c:	d001      	beq.n	8006322 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006322:	2300      	movs	r3, #0
 8006324:	61bb      	str	r3, [r7, #24]
 8006326:	e01f      	b.n	8006368 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006328:	69bb      	ldr	r3, [r7, #24]
 800632a:	015a      	lsls	r2, r3, #5
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	4413      	add	r3, r2
 8006330:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800633e:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006346:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800634e:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	015a      	lsls	r2, r3, #5
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	4413      	add	r3, r2
 8006358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800635c:	461a      	mov	r2, r3
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	3301      	adds	r3, #1
 8006366:	61bb      	str	r3, [r7, #24]
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	2b0f      	cmp	r3, #15
 800636c:	d9dc      	bls.n	8006328 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800636e:	2300      	movs	r3, #0
 8006370:	61bb      	str	r3, [r7, #24]
 8006372:	e034      	b.n	80063de <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	015a      	lsls	r2, r3, #5
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	4413      	add	r3, r2
 800637c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800638a:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006392:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800639a:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	015a      	lsls	r2, r3, #5
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	4413      	add	r3, r2
 80063a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063a8:	461a      	mov	r2, r3
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	3301      	adds	r3, #1
 80063b2:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063ba:	d80c      	bhi.n	80063d6 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	015a      	lsls	r2, r3, #5
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	4413      	add	r3, r2
 80063c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063d2:	d0ec      	beq.n	80063ae <USB_StopHost+0xc8>
 80063d4:	e000      	b.n	80063d8 <USB_StopHost+0xf2>
        break;
 80063d6:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	3301      	adds	r3, #1
 80063dc:	61bb      	str	r3, [r7, #24]
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	2b0f      	cmp	r3, #15
 80063e2:	d9c7      	bls.n	8006374 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063ea:	461a      	mov	r2, r3
 80063ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063f0:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80063f8:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f7ff f95f 	bl	80056be <USB_EnableGlobalInt>

  return ret;
 8006400:	7ffb      	ldrb	r3, [r7, #31]
}
 8006402:	4618      	mov	r0, r3
 8006404:	3720      	adds	r7, #32
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
	...

0800640c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8006410:	4904      	ldr	r1, [pc, #16]	; (8006424 <MX_FATFS_Init+0x18>)
 8006412:	4805      	ldr	r0, [pc, #20]	; (8006428 <MX_FATFS_Init+0x1c>)
 8006414:	f006 fb36 	bl	800ca84 <FATFS_LinkDriver>
 8006418:	4603      	mov	r3, r0
 800641a:	461a      	mov	r2, r3
 800641c:	4b03      	ldr	r3, [pc, #12]	; (800642c <MX_FATFS_Init+0x20>)
 800641e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006420:	bf00      	nop
 8006422:	bd80      	pop	{r7, pc}
 8006424:	2000026c 	.word	0x2000026c
 8006428:	0800e380 	.word	0x0800e380
 800642c:	20000268 	.word	0x20000268

08006430 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006430:	b480      	push	{r7}
 8006432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006434:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006436:	4618      	mov	r0, r3
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	4603      	mov	r3, r0
 8006448:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 800644a:	2300      	movs	r3, #0
}
 800644c:	4618      	mov	r0, r3
 800644e:	370c      	adds	r7, #12
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	4603      	mov	r3, r0
 8006460:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8006466:	79fb      	ldrb	r3, [r7, #7]
 8006468:	4619      	mov	r1, r3
 800646a:	4808      	ldr	r0, [pc, #32]	; (800648c <USBH_status+0x34>)
 800646c:	f000 fe1a 	bl	80070a4 <USBH_MSC_UnitIsReady>
 8006470:	4603      	mov	r3, r0
 8006472:	2b00      	cmp	r3, #0
 8006474:	d002      	beq.n	800647c <USBH_status+0x24>
  {
    res = RES_OK;
 8006476:	2300      	movs	r3, #0
 8006478:	73fb      	strb	r3, [r7, #15]
 800647a:	e001      	b.n	8006480 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8006480:	7bfb      	ldrb	r3, [r7, #15]
}
 8006482:	4618      	mov	r0, r3
 8006484:	3710      	adds	r7, #16
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	2000250c 	.word	0x2000250c

08006490 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b094      	sub	sp, #80	; 0x50
 8006494:	af02      	add	r7, sp, #8
 8006496:	60b9      	str	r1, [r7, #8]
 8006498:	607a      	str	r2, [r7, #4]
 800649a:	603b      	str	r3, [r7, #0]
 800649c:	4603      	mov	r3, r0
 800649e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 80064a6:	7bf9      	ldrb	r1, [r7, #15]
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	9300      	str	r3, [sp, #0]
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	4813      	ldr	r0, [pc, #76]	; (8006500 <USBH_read+0x70>)
 80064b2:	f000 fe41 	bl	8007138 <USBH_MSC_Read>
 80064b6:	4603      	mov	r3, r0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d103      	bne.n	80064c4 <USBH_read+0x34>
  {
    res = RES_OK;
 80064bc:	2300      	movs	r3, #0
 80064be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80064c2:	e017      	b.n	80064f4 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80064c4:	f107 0210 	add.w	r2, r7, #16
 80064c8:	7bfb      	ldrb	r3, [r7, #15]
 80064ca:	4619      	mov	r1, r3
 80064cc:	480c      	ldr	r0, [pc, #48]	; (8006500 <USBH_read+0x70>)
 80064ce:	f000 fe0f 	bl	80070f0 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80064d2:	7f7b      	ldrb	r3, [r7, #29]
 80064d4:	2b3a      	cmp	r3, #58	; 0x3a
 80064d6:	d005      	beq.n	80064e4 <USBH_read+0x54>
 80064d8:	2b3a      	cmp	r3, #58	; 0x3a
 80064da:	dc07      	bgt.n	80064ec <USBH_read+0x5c>
 80064dc:	2b04      	cmp	r3, #4
 80064de:	d001      	beq.n	80064e4 <USBH_read+0x54>
 80064e0:	2b28      	cmp	r3, #40	; 0x28
 80064e2:	d103      	bne.n	80064ec <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 80064e4:	2303      	movs	r3, #3
 80064e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80064ea:	e003      	b.n	80064f4 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80064f2:	bf00      	nop
    }
  }

  return res;
 80064f4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3748      	adds	r7, #72	; 0x48
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}
 8006500:	2000250c 	.word	0x2000250c

08006504 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b094      	sub	sp, #80	; 0x50
 8006508:	af02      	add	r7, sp, #8
 800650a:	60b9      	str	r1, [r7, #8]
 800650c:	607a      	str	r2, [r7, #4]
 800650e:	603b      	str	r3, [r7, #0]
 8006510:	4603      	mov	r3, r0
 8006512:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800651a:	7bf9      	ldrb	r1, [r7, #15]
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	9300      	str	r3, [sp, #0]
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	4817      	ldr	r0, [pc, #92]	; (8006584 <USBH_write+0x80>)
 8006526:	f000 fe70 	bl	800720a <USBH_MSC_Write>
 800652a:	4603      	mov	r3, r0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d103      	bne.n	8006538 <USBH_write+0x34>
  {
    res = RES_OK;
 8006530:	2300      	movs	r3, #0
 8006532:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006536:	e01f      	b.n	8006578 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8006538:	f107 0210 	add.w	r2, r7, #16
 800653c:	7bfb      	ldrb	r3, [r7, #15]
 800653e:	4619      	mov	r1, r3
 8006540:	4810      	ldr	r0, [pc, #64]	; (8006584 <USBH_write+0x80>)
 8006542:	f000 fdd5 	bl	80070f0 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8006546:	7f7b      	ldrb	r3, [r7, #29]
 8006548:	2b3a      	cmp	r3, #58	; 0x3a
 800654a:	d00d      	beq.n	8006568 <USBH_write+0x64>
 800654c:	2b3a      	cmp	r3, #58	; 0x3a
 800654e:	dc0f      	bgt.n	8006570 <USBH_write+0x6c>
 8006550:	2b28      	cmp	r3, #40	; 0x28
 8006552:	d009      	beq.n	8006568 <USBH_write+0x64>
 8006554:	2b28      	cmp	r3, #40	; 0x28
 8006556:	dc0b      	bgt.n	8006570 <USBH_write+0x6c>
 8006558:	2b04      	cmp	r3, #4
 800655a:	d005      	beq.n	8006568 <USBH_write+0x64>
 800655c:	2b27      	cmp	r3, #39	; 0x27
 800655e:	d107      	bne.n	8006570 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8006560:	2302      	movs	r3, #2
 8006562:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8006566:	e007      	b.n	8006578 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8006568:	2303      	movs	r3, #3
 800656a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800656e:	e003      	b.n	8006578 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8006576:	bf00      	nop
    }
  }

  return res;
 8006578:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800657c:	4618      	mov	r0, r3
 800657e:	3748      	adds	r7, #72	; 0x48
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}
 8006584:	2000250c 	.word	0x2000250c

08006588 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b090      	sub	sp, #64	; 0x40
 800658c:	af00      	add	r7, sp, #0
 800658e:	4603      	mov	r3, r0
 8006590:	603a      	str	r2, [r7, #0]
 8006592:	71fb      	strb	r3, [r7, #7]
 8006594:	460b      	mov	r3, r1
 8006596:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 800659e:	79bb      	ldrb	r3, [r7, #6]
 80065a0:	2b03      	cmp	r3, #3
 80065a2:	d852      	bhi.n	800664a <USBH_ioctl+0xc2>
 80065a4:	a201      	add	r2, pc, #4	; (adr r2, 80065ac <USBH_ioctl+0x24>)
 80065a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065aa:	bf00      	nop
 80065ac:	080065bd 	.word	0x080065bd
 80065b0:	080065c5 	.word	0x080065c5
 80065b4:	080065ef 	.word	0x080065ef
 80065b8:	0800661b 	.word	0x0800661b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 80065bc:	2300      	movs	r3, #0
 80065be:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80065c2:	e045      	b.n	8006650 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80065c4:	f107 0208 	add.w	r2, r7, #8
 80065c8:	79fb      	ldrb	r3, [r7, #7]
 80065ca:	4619      	mov	r1, r3
 80065cc:	4823      	ldr	r0, [pc, #140]	; (800665c <USBH_ioctl+0xd4>)
 80065ce:	f000 fd8f 	bl	80070f0 <USBH_MSC_GetLUNInfo>
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d106      	bne.n	80065e6 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 80065d8:	68fa      	ldr	r2, [r7, #12]
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80065de:	2300      	movs	r3, #0
 80065e0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80065e4:	e034      	b.n	8006650 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80065ec:	e030      	b.n	8006650 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80065ee:	f107 0208 	add.w	r2, r7, #8
 80065f2:	79fb      	ldrb	r3, [r7, #7]
 80065f4:	4619      	mov	r1, r3
 80065f6:	4819      	ldr	r0, [pc, #100]	; (800665c <USBH_ioctl+0xd4>)
 80065f8:	f000 fd7a 	bl	80070f0 <USBH_MSC_GetLUNInfo>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d107      	bne.n	8006612 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8006602:	8a3b      	ldrh	r3, [r7, #16]
 8006604:	461a      	mov	r2, r3
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800660a:	2300      	movs	r3, #0
 800660c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8006610:	e01e      	b.n	8006650 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8006618:	e01a      	b.n	8006650 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800661a:	f107 0208 	add.w	r2, r7, #8
 800661e:	79fb      	ldrb	r3, [r7, #7]
 8006620:	4619      	mov	r1, r3
 8006622:	480e      	ldr	r0, [pc, #56]	; (800665c <USBH_ioctl+0xd4>)
 8006624:	f000 fd64 	bl	80070f0 <USBH_MSC_GetLUNInfo>
 8006628:	4603      	mov	r3, r0
 800662a:	2b00      	cmp	r3, #0
 800662c:	d109      	bne.n	8006642 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800662e:	8a3b      	ldrh	r3, [r7, #16]
 8006630:	0a5b      	lsrs	r3, r3, #9
 8006632:	b29b      	uxth	r3, r3
 8006634:	461a      	mov	r2, r3
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800663a:	2300      	movs	r3, #0
 800663c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8006640:	e006      	b.n	8006650 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8006648:	e002      	b.n	8006650 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 800664a:	2304      	movs	r3, #4
 800664c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8006650:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8006654:	4618      	mov	r0, r3
 8006656:	3740      	adds	r7, #64	; 0x40
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}
 800665c:	2000250c 	.word	0x2000250c

08006660 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006660:	b590      	push	{r4, r7, lr}
 8006662:	b089      	sub	sp, #36	; 0x24
 8006664:	af04      	add	r7, sp, #16
 8006666:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800666e:	7919      	ldrb	r1, [r3, #4]
 8006670:	2350      	movs	r3, #80	; 0x50
 8006672:	2206      	movs	r2, #6
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f001 fc53 	bl	8007f20 <USBH_FindInterface>
 800667a:	4603      	mov	r3, r0
 800667c:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800667e:	7bfb      	ldrb	r3, [r7, #15]
 8006680:	2bff      	cmp	r3, #255	; 0xff
 8006682:	d002      	beq.n	800668a <USBH_MSC_InterfaceInit+0x2a>
 8006684:	7bfb      	ldrb	r3, [r7, #15]
 8006686:	2b01      	cmp	r3, #1
 8006688:	d901      	bls.n	800668e <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800668a:	2302      	movs	r3, #2
 800668c:	e0ef      	b.n	800686e <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 800668e:	7bfb      	ldrb	r3, [r7, #15]
 8006690:	4619      	mov	r1, r3
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f001 fc28 	bl	8007ee8 <USBH_SelectInterface>
 8006698:	4603      	mov	r3, r0
 800669a:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800669c:	7bbb      	ldrb	r3, [r7, #14]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d001      	beq.n	80066a6 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 80066a2:	2302      	movs	r3, #2
 80066a4:	e0e3      	b.n	800686e <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80066ac:	f44f 7080 	mov.w	r0, #256	; 0x100
 80066b0:	f006 fe90 	bl	800d3d4 <malloc>
 80066b4:	4603      	mov	r3, r0
 80066b6:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066be:	69db      	ldr	r3, [r3, #28]
 80066c0:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d101      	bne.n	80066cc <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 80066c8:	2302      	movs	r3, #2
 80066ca:	e0d0      	b.n	800686e <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 80066cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80066d0:	2100      	movs	r1, #0
 80066d2:	68b8      	ldr	r0, [r7, #8]
 80066d4:	f006 fe9c 	bl	800d410 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80066d8:	7bfb      	ldrb	r3, [r7, #15]
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	211a      	movs	r1, #26
 80066de:	fb01 f303 	mul.w	r3, r1, r3
 80066e2:	4413      	add	r3, r2
 80066e4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	b25b      	sxtb	r3, r3
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	da16      	bge.n	800671e <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80066f0:	7bfb      	ldrb	r3, [r7, #15]
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	211a      	movs	r1, #26
 80066f6:	fb01 f303 	mul.w	r3, r1, r3
 80066fa:	4413      	add	r3, r2
 80066fc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006700:	781a      	ldrb	r2, [r3, #0]
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006706:	7bfb      	ldrb	r3, [r7, #15]
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	211a      	movs	r1, #26
 800670c:	fb01 f303 	mul.w	r3, r1, r3
 8006710:	4413      	add	r3, r2
 8006712:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006716:	881a      	ldrh	r2, [r3, #0]
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	815a      	strh	r2, [r3, #10]
 800671c:	e015      	b.n	800674a <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800671e:	7bfb      	ldrb	r3, [r7, #15]
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	211a      	movs	r1, #26
 8006724:	fb01 f303 	mul.w	r3, r1, r3
 8006728:	4413      	add	r3, r2
 800672a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800672e:	781a      	ldrb	r2, [r3, #0]
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006734:	7bfb      	ldrb	r3, [r7, #15]
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	211a      	movs	r1, #26
 800673a:	fb01 f303 	mul.w	r3, r1, r3
 800673e:	4413      	add	r3, r2
 8006740:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006744:	881a      	ldrh	r2, [r3, #0]
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800674a:	7bfb      	ldrb	r3, [r7, #15]
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	211a      	movs	r1, #26
 8006750:	fb01 f303 	mul.w	r3, r1, r3
 8006754:	4413      	add	r3, r2
 8006756:	f203 3356 	addw	r3, r3, #854	; 0x356
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	b25b      	sxtb	r3, r3
 800675e:	2b00      	cmp	r3, #0
 8006760:	da16      	bge.n	8006790 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8006762:	7bfb      	ldrb	r3, [r7, #15]
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	211a      	movs	r1, #26
 8006768:	fb01 f303 	mul.w	r3, r1, r3
 800676c:	4413      	add	r3, r2
 800676e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006772:	781a      	ldrb	r2, [r3, #0]
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006778:	7bfb      	ldrb	r3, [r7, #15]
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	211a      	movs	r1, #26
 800677e:	fb01 f303 	mul.w	r3, r1, r3
 8006782:	4413      	add	r3, r2
 8006784:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006788:	881a      	ldrh	r2, [r3, #0]
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	815a      	strh	r2, [r3, #10]
 800678e:	e015      	b.n	80067bc <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8006790:	7bfb      	ldrb	r3, [r7, #15]
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	211a      	movs	r1, #26
 8006796:	fb01 f303 	mul.w	r3, r1, r3
 800679a:	4413      	add	r3, r2
 800679c:	f203 3356 	addw	r3, r3, #854	; 0x356
 80067a0:	781a      	ldrb	r2, [r3, #0]
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80067a6:	7bfb      	ldrb	r3, [r7, #15]
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	211a      	movs	r1, #26
 80067ac:	fb01 f303 	mul.w	r3, r1, r3
 80067b0:	4413      	add	r3, r2
 80067b2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80067b6:	881a      	ldrh	r2, [r3, #0]
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	2200      	movs	r2, #0
 80067c0:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	2200      	movs	r2, #0
 80067c6:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	2200      	movs	r2, #0
 80067cc:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	799b      	ldrb	r3, [r3, #6]
 80067d2:	4619      	mov	r1, r3
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f002 fdc4 	bl	8009362 <USBH_AllocPipe>
 80067da:	4603      	mov	r3, r0
 80067dc:	461a      	mov	r2, r3
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	79db      	ldrb	r3, [r3, #7]
 80067e6:	4619      	mov	r1, r3
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f002 fdba 	bl	8009362 <USBH_AllocPipe>
 80067ee:	4603      	mov	r3, r0
 80067f0:	461a      	mov	r2, r3
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 fdac 	bl	8007354 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	7959      	ldrb	r1, [r3, #5]
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	7998      	ldrb	r0, [r3, #6]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006810:	68ba      	ldr	r2, [r7, #8]
 8006812:	8912      	ldrh	r2, [r2, #8]
 8006814:	9202      	str	r2, [sp, #8]
 8006816:	2202      	movs	r2, #2
 8006818:	9201      	str	r2, [sp, #4]
 800681a:	9300      	str	r3, [sp, #0]
 800681c:	4623      	mov	r3, r4
 800681e:	4602      	mov	r2, r0
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f002 fd6f 	bl	8009304 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	7919      	ldrb	r1, [r3, #4]
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	79d8      	ldrb	r0, [r3, #7]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800683a:	68ba      	ldr	r2, [r7, #8]
 800683c:	8952      	ldrh	r2, [r2, #10]
 800683e:	9202      	str	r2, [sp, #8]
 8006840:	2202      	movs	r2, #2
 8006842:	9201      	str	r2, [sp, #4]
 8006844:	9300      	str	r3, [sp, #0]
 8006846:	4623      	mov	r3, r4
 8006848:	4602      	mov	r2, r0
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f002 fd5a 	bl	8009304 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	791b      	ldrb	r3, [r3, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	4619      	mov	r1, r3
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f006 fcdd 	bl	800d218 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	795b      	ldrb	r3, [r3, #5]
 8006862:	2200      	movs	r2, #0
 8006864:	4619      	mov	r1, r3
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f006 fcd6 	bl	800d218 <USBH_LL_SetToggle>

  return USBH_OK;
 800686c:	2300      	movs	r3, #0
}
 800686e:	4618      	mov	r0, r3
 8006870:	3714      	adds	r7, #20
 8006872:	46bd      	mov	sp, r7
 8006874:	bd90      	pop	{r4, r7, pc}

08006876 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006876:	b580      	push	{r7, lr}
 8006878:	b084      	sub	sp, #16
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006884:	69db      	ldr	r3, [r3, #28]
 8006886:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	795b      	ldrb	r3, [r3, #5]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d00e      	beq.n	80068ae <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	795b      	ldrb	r3, [r3, #5]
 8006894:	4619      	mov	r1, r3
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f002 fd53 	bl	8009342 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	795b      	ldrb	r3, [r3, #5]
 80068a0:	4619      	mov	r1, r3
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f002 fd7e 	bl	80093a4 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2200      	movs	r2, #0
 80068ac:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	791b      	ldrb	r3, [r3, #4]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d00e      	beq.n	80068d4 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	791b      	ldrb	r3, [r3, #4]
 80068ba:	4619      	mov	r1, r3
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f002 fd40 	bl	8009342 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	791b      	ldrb	r3, [r3, #4]
 80068c6:	4619      	mov	r1, r3
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f002 fd6b 	bl	80093a4 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2200      	movs	r2, #0
 80068d2:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068da:	69db      	ldr	r3, [r3, #28]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d00b      	beq.n	80068f8 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068e6:	69db      	ldr	r3, [r3, #28]
 80068e8:	4618      	mov	r0, r3
 80068ea:	f006 fd7b 	bl	800d3e4 <free>
    phost->pActiveClass->pData = 0U;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068f4:	2200      	movs	r2, #0
 80068f6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80068f8:	2300      	movs	r3, #0
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3710      	adds	r7, #16
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}

08006902 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006902:	b580      	push	{r7, lr}
 8006904:	b084      	sub	sp, #16
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006910:	69db      	ldr	r3, [r3, #28]
 8006912:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006914:	2301      	movs	r3, #1
 8006916:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	7b9b      	ldrb	r3, [r3, #14]
 800691c:	2b03      	cmp	r3, #3
 800691e:	d041      	beq.n	80069a4 <USBH_MSC_ClassRequest+0xa2>
 8006920:	2b03      	cmp	r3, #3
 8006922:	dc4b      	bgt.n	80069bc <USBH_MSC_ClassRequest+0xba>
 8006924:	2b00      	cmp	r3, #0
 8006926:	d001      	beq.n	800692c <USBH_MSC_ClassRequest+0x2a>
 8006928:	2b02      	cmp	r3, #2
 800692a:	d147      	bne.n	80069bc <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	4619      	mov	r1, r3
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 fcf0 	bl	8007316 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8006936:	4603      	mov	r3, r0
 8006938:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 800693a:	7bfb      	ldrb	r3, [r7, #15]
 800693c:	2b03      	cmp	r3, #3
 800693e:	d104      	bne.n	800694a <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	2200      	movs	r2, #0
 8006944:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8006946:	2300      	movs	r3, #0
 8006948:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 800694a:	7bfb      	ldrb	r3, [r7, #15]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d137      	bne.n	80069c0 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	2b02      	cmp	r3, #2
 8006956:	d804      	bhi.n	8006962 <USBH_MSC_ClassRequest+0x60>
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	3301      	adds	r3, #1
 800695e:	b2da      	uxtb	r2, r3
 8006960:	e000      	b.n	8006964 <USBH_MSC_ClassRequest+0x62>
 8006962:	2202      	movs	r2, #2
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8006968:	2300      	movs	r3, #0
 800696a:	73bb      	strb	r3, [r7, #14]
 800696c:	e014      	b.n	8006998 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800696e:	7bbb      	ldrb	r3, [r7, #14]
 8006970:	68ba      	ldr	r2, [r7, #8]
 8006972:	2134      	movs	r1, #52	; 0x34
 8006974:	fb01 f303 	mul.w	r3, r1, r3
 8006978:	4413      	add	r3, r2
 800697a:	3392      	adds	r3, #146	; 0x92
 800697c:	2202      	movs	r2, #2
 800697e:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8006980:	7bbb      	ldrb	r3, [r7, #14]
 8006982:	68ba      	ldr	r2, [r7, #8]
 8006984:	2134      	movs	r1, #52	; 0x34
 8006986:	fb01 f303 	mul.w	r3, r1, r3
 800698a:	4413      	add	r3, r2
 800698c:	33c1      	adds	r3, #193	; 0xc1
 800698e:	2200      	movs	r2, #0
 8006990:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8006992:	7bbb      	ldrb	r3, [r7, #14]
 8006994:	3301      	adds	r3, #1
 8006996:	73bb      	strb	r3, [r7, #14]
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	7bba      	ldrb	r2, [r7, #14]
 800699e:	429a      	cmp	r2, r3
 80069a0:	d3e5      	bcc.n	800696e <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 80069a2:	e00d      	b.n	80069c0 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 80069a4:	2100      	movs	r1, #0
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f002 f87b 	bl	8008aa2 <USBH_ClrFeature>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d108      	bne.n	80069c4 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	7bda      	ldrb	r2, [r3, #15]
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	739a      	strb	r2, [r3, #14]
      }
      break;
 80069ba:	e003      	b.n	80069c4 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 80069bc:	bf00      	nop
 80069be:	e002      	b.n	80069c6 <USBH_MSC_ClassRequest+0xc4>
      break;
 80069c0:	bf00      	nop
 80069c2:	e000      	b.n	80069c6 <USBH_MSC_ClassRequest+0xc4>
      break;
 80069c4:	bf00      	nop
  }

  return status;
 80069c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3710      	adds	r7, #16
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b086      	sub	sp, #24
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069de:	69db      	ldr	r3, [r3, #28]
 80069e0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 80069e2:	2301      	movs	r3, #1
 80069e4:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 80069e6:	2301      	movs	r3, #1
 80069e8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 80069ea:	2301      	movs	r3, #1
 80069ec:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	7b1b      	ldrb	r3, [r3, #12]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d003      	beq.n	80069fe <USBH_MSC_Process+0x2e>
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	f000 8271 	beq.w	8006ede <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 80069fc:	e272      	b.n	8006ee4 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	f080 824f 	bcs.w	8006eae <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006a16:	4619      	mov	r1, r3
 8006a18:	693a      	ldr	r2, [r7, #16]
 8006a1a:	2334      	movs	r3, #52	; 0x34
 8006a1c:	fb01 f303 	mul.w	r3, r1, r3
 8006a20:	4413      	add	r3, r2
 8006a22:	3391      	adds	r3, #145	; 0x91
 8006a24:	2201      	movs	r2, #1
 8006a26:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006a2e:	4619      	mov	r1, r3
 8006a30:	693a      	ldr	r2, [r7, #16]
 8006a32:	2334      	movs	r3, #52	; 0x34
 8006a34:	fb01 f303 	mul.w	r3, r1, r3
 8006a38:	4413      	add	r3, r2
 8006a3a:	3390      	adds	r3, #144	; 0x90
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	2b08      	cmp	r3, #8
 8006a40:	f200 8243 	bhi.w	8006eca <USBH_MSC_Process+0x4fa>
 8006a44:	a201      	add	r2, pc, #4	; (adr r2, 8006a4c <USBH_MSC_Process+0x7c>)
 8006a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a4a:	bf00      	nop
 8006a4c:	08006a71 	.word	0x08006a71
 8006a50:	08006ecb 	.word	0x08006ecb
 8006a54:	08006b39 	.word	0x08006b39
 8006a58:	08006cbd 	.word	0x08006cbd
 8006a5c:	08006a97 	.word	0x08006a97
 8006a60:	08006d89 	.word	0x08006d89
 8006a64:	08006ecb 	.word	0x08006ecb
 8006a68:	08006ecb 	.word	0x08006ecb
 8006a6c:	08006e9d 	.word	0x08006e9d
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006a76:	4619      	mov	r1, r3
 8006a78:	693a      	ldr	r2, [r7, #16]
 8006a7a:	2334      	movs	r3, #52	; 0x34
 8006a7c:	fb01 f303 	mul.w	r3, r1, r3
 8006a80:	4413      	add	r3, r2
 8006a82:	3390      	adds	r3, #144	; 0x90
 8006a84:	2204      	movs	r2, #4
 8006a86:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8006a94:	e222      	b.n	8006edc <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006a9c:	b2d9      	uxtb	r1, r3
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	2334      	movs	r3, #52	; 0x34
 8006aa8:	fb02 f303 	mul.w	r3, r2, r3
 8006aac:	3398      	adds	r3, #152	; 0x98
 8006aae:	693a      	ldr	r2, [r7, #16]
 8006ab0:	4413      	add	r3, r2
 8006ab2:	3307      	adds	r3, #7
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 ff6a 	bl	8007990 <USBH_MSC_SCSI_Inquiry>
 8006abc:	4603      	mov	r3, r0
 8006abe:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8006ac0:	7bfb      	ldrb	r3, [r7, #15]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d10b      	bne.n	8006ade <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006acc:	4619      	mov	r1, r3
 8006ace:	693a      	ldr	r2, [r7, #16]
 8006ad0:	2334      	movs	r3, #52	; 0x34
 8006ad2:	fb01 f303 	mul.w	r3, r1, r3
 8006ad6:	4413      	add	r3, r2
 8006ad8:	3390      	adds	r3, #144	; 0x90
 8006ada:	2202      	movs	r2, #2
 8006adc:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8006ade:	7bfb      	ldrb	r3, [r7, #15]
 8006ae0:	2b02      	cmp	r3, #2
 8006ae2:	d10c      	bne.n	8006afe <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006aea:	4619      	mov	r1, r3
 8006aec:	693a      	ldr	r2, [r7, #16]
 8006aee:	2334      	movs	r3, #52	; 0x34
 8006af0:	fb01 f303 	mul.w	r3, r1, r3
 8006af4:	4413      	add	r3, r2
 8006af6:	3390      	adds	r3, #144	; 0x90
 8006af8:	2205      	movs	r2, #5
 8006afa:	701a      	strb	r2, [r3, #0]
            break;
 8006afc:	e1e7      	b.n	8006ece <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006afe:	7bfb      	ldrb	r3, [r7, #15]
 8006b00:	2b04      	cmp	r3, #4
 8006b02:	f040 81e4 	bne.w	8006ece <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	693a      	ldr	r2, [r7, #16]
 8006b10:	2334      	movs	r3, #52	; 0x34
 8006b12:	fb01 f303 	mul.w	r3, r1, r3
 8006b16:	4413      	add	r3, r2
 8006b18:	3390      	adds	r3, #144	; 0x90
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006b24:	4619      	mov	r1, r3
 8006b26:	693a      	ldr	r2, [r7, #16]
 8006b28:	2334      	movs	r3, #52	; 0x34
 8006b2a:	fb01 f303 	mul.w	r3, r1, r3
 8006b2e:	4413      	add	r3, r2
 8006b30:	3391      	adds	r3, #145	; 0x91
 8006b32:	2202      	movs	r2, #2
 8006b34:	701a      	strb	r2, [r3, #0]
            break;
 8006b36:	e1ca      	b.n	8006ece <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	4619      	mov	r1, r3
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 fe66 	bl	8007814 <USBH_MSC_SCSI_TestUnitReady>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8006b4c:	7bbb      	ldrb	r3, [r7, #14]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d149      	bne.n	8006be6 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006b58:	4619      	mov	r1, r3
 8006b5a:	693a      	ldr	r2, [r7, #16]
 8006b5c:	2334      	movs	r3, #52	; 0x34
 8006b5e:	fb01 f303 	mul.w	r3, r1, r3
 8006b62:	4413      	add	r3, r2
 8006b64:	3392      	adds	r3, #146	; 0x92
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d00c      	beq.n	8006b86 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006b72:	4619      	mov	r1, r3
 8006b74:	693a      	ldr	r2, [r7, #16]
 8006b76:	2334      	movs	r3, #52	; 0x34
 8006b78:	fb01 f303 	mul.w	r3, r1, r3
 8006b7c:	4413      	add	r3, r2
 8006b7e:	33c1      	adds	r3, #193	; 0xc1
 8006b80:	2201      	movs	r2, #1
 8006b82:	701a      	strb	r2, [r3, #0]
 8006b84:	e00b      	b.n	8006b9e <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	693a      	ldr	r2, [r7, #16]
 8006b90:	2334      	movs	r3, #52	; 0x34
 8006b92:	fb01 f303 	mul.w	r3, r1, r3
 8006b96:	4413      	add	r3, r2
 8006b98:	33c1      	adds	r3, #193	; 0xc1
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	693a      	ldr	r2, [r7, #16]
 8006ba8:	2334      	movs	r3, #52	; 0x34
 8006baa:	fb01 f303 	mul.w	r3, r1, r3
 8006bae:	4413      	add	r3, r2
 8006bb0:	3390      	adds	r3, #144	; 0x90
 8006bb2:	2203      	movs	r2, #3
 8006bb4:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	693a      	ldr	r2, [r7, #16]
 8006bc0:	2334      	movs	r3, #52	; 0x34
 8006bc2:	fb01 f303 	mul.w	r3, r1, r3
 8006bc6:	4413      	add	r3, r2
 8006bc8:	3391      	adds	r3, #145	; 0x91
 8006bca:	2200      	movs	r2, #0
 8006bcc:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	693a      	ldr	r2, [r7, #16]
 8006bd8:	2334      	movs	r3, #52	; 0x34
 8006bda:	fb01 f303 	mul.w	r3, r1, r3
 8006bde:	4413      	add	r3, r2
 8006be0:	3392      	adds	r3, #146	; 0x92
 8006be2:	2200      	movs	r2, #0
 8006be4:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8006be6:	7bbb      	ldrb	r3, [r7, #14]
 8006be8:	2b02      	cmp	r3, #2
 8006bea:	d14a      	bne.n	8006c82 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	693a      	ldr	r2, [r7, #16]
 8006bf6:	2334      	movs	r3, #52	; 0x34
 8006bf8:	fb01 f303 	mul.w	r3, r1, r3
 8006bfc:	4413      	add	r3, r2
 8006bfe:	3392      	adds	r3, #146	; 0x92
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	2b02      	cmp	r3, #2
 8006c04:	d00c      	beq.n	8006c20 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	693a      	ldr	r2, [r7, #16]
 8006c10:	2334      	movs	r3, #52	; 0x34
 8006c12:	fb01 f303 	mul.w	r3, r1, r3
 8006c16:	4413      	add	r3, r2
 8006c18:	33c1      	adds	r3, #193	; 0xc1
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	701a      	strb	r2, [r3, #0]
 8006c1e:	e00b      	b.n	8006c38 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006c26:	4619      	mov	r1, r3
 8006c28:	693a      	ldr	r2, [r7, #16]
 8006c2a:	2334      	movs	r3, #52	; 0x34
 8006c2c:	fb01 f303 	mul.w	r3, r1, r3
 8006c30:	4413      	add	r3, r2
 8006c32:	33c1      	adds	r3, #193	; 0xc1
 8006c34:	2200      	movs	r2, #0
 8006c36:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006c3e:	4619      	mov	r1, r3
 8006c40:	693a      	ldr	r2, [r7, #16]
 8006c42:	2334      	movs	r3, #52	; 0x34
 8006c44:	fb01 f303 	mul.w	r3, r1, r3
 8006c48:	4413      	add	r3, r2
 8006c4a:	3390      	adds	r3, #144	; 0x90
 8006c4c:	2205      	movs	r2, #5
 8006c4e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006c56:	4619      	mov	r1, r3
 8006c58:	693a      	ldr	r2, [r7, #16]
 8006c5a:	2334      	movs	r3, #52	; 0x34
 8006c5c:	fb01 f303 	mul.w	r3, r1, r3
 8006c60:	4413      	add	r3, r2
 8006c62:	3391      	adds	r3, #145	; 0x91
 8006c64:	2201      	movs	r2, #1
 8006c66:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006c6e:	4619      	mov	r1, r3
 8006c70:	693a      	ldr	r2, [r7, #16]
 8006c72:	2334      	movs	r3, #52	; 0x34
 8006c74:	fb01 f303 	mul.w	r3, r1, r3
 8006c78:	4413      	add	r3, r2
 8006c7a:	3392      	adds	r3, #146	; 0x92
 8006c7c:	2202      	movs	r2, #2
 8006c7e:	701a      	strb	r2, [r3, #0]
            break;
 8006c80:	e127      	b.n	8006ed2 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8006c82:	7bbb      	ldrb	r3, [r7, #14]
 8006c84:	2b04      	cmp	r3, #4
 8006c86:	f040 8124 	bne.w	8006ed2 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006c90:	4619      	mov	r1, r3
 8006c92:	693a      	ldr	r2, [r7, #16]
 8006c94:	2334      	movs	r3, #52	; 0x34
 8006c96:	fb01 f303 	mul.w	r3, r1, r3
 8006c9a:	4413      	add	r3, r2
 8006c9c:	3390      	adds	r3, #144	; 0x90
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006ca8:	4619      	mov	r1, r3
 8006caa:	693a      	ldr	r2, [r7, #16]
 8006cac:	2334      	movs	r3, #52	; 0x34
 8006cae:	fb01 f303 	mul.w	r3, r1, r3
 8006cb2:	4413      	add	r3, r2
 8006cb4:	3391      	adds	r3, #145	; 0x91
 8006cb6:	2202      	movs	r2, #2
 8006cb8:	701a      	strb	r2, [r3, #0]
            break;
 8006cba:	e10a      	b.n	8006ed2 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006cc2:	b2d9      	uxtb	r1, r3
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006cca:	461a      	mov	r2, r3
 8006ccc:	2334      	movs	r3, #52	; 0x34
 8006cce:	fb02 f303 	mul.w	r3, r2, r3
 8006cd2:	3390      	adds	r3, #144	; 0x90
 8006cd4:	693a      	ldr	r2, [r7, #16]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	3304      	adds	r3, #4
 8006cda:	461a      	mov	r2, r3
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 fddc 	bl	800789a <USBH_MSC_SCSI_ReadCapacity>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8006ce6:	7bfb      	ldrb	r3, [r7, #15]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d120      	bne.n	8006d2e <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	693a      	ldr	r2, [r7, #16]
 8006cf6:	2334      	movs	r3, #52	; 0x34
 8006cf8:	fb01 f303 	mul.w	r3, r1, r3
 8006cfc:	4413      	add	r3, r2
 8006cfe:	3390      	adds	r3, #144	; 0x90
 8006d00:	2201      	movs	r2, #1
 8006d02:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	693a      	ldr	r2, [r7, #16]
 8006d0e:	2334      	movs	r3, #52	; 0x34
 8006d10:	fb01 f303 	mul.w	r3, r1, r3
 8006d14:	4413      	add	r3, r2
 8006d16:	3391      	adds	r3, #145	; 0x91
 8006d18:	2200      	movs	r2, #0
 8006d1a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006d22:	3301      	adds	r3, #1
 8006d24:	b29a      	uxth	r2, r3
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8006d2c:	e0d3      	b.n	8006ed6 <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 8006d2e:	7bfb      	ldrb	r3, [r7, #15]
 8006d30:	2b02      	cmp	r3, #2
 8006d32:	d10c      	bne.n	8006d4e <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	693a      	ldr	r2, [r7, #16]
 8006d3e:	2334      	movs	r3, #52	; 0x34
 8006d40:	fb01 f303 	mul.w	r3, r1, r3
 8006d44:	4413      	add	r3, r2
 8006d46:	3390      	adds	r3, #144	; 0x90
 8006d48:	2205      	movs	r2, #5
 8006d4a:	701a      	strb	r2, [r3, #0]
            break;
 8006d4c:	e0c3      	b.n	8006ed6 <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006d4e:	7bfb      	ldrb	r3, [r7, #15]
 8006d50:	2b04      	cmp	r3, #4
 8006d52:	f040 80c0 	bne.w	8006ed6 <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	693a      	ldr	r2, [r7, #16]
 8006d60:	2334      	movs	r3, #52	; 0x34
 8006d62:	fb01 f303 	mul.w	r3, r1, r3
 8006d66:	4413      	add	r3, r2
 8006d68:	3390      	adds	r3, #144	; 0x90
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006d74:	4619      	mov	r1, r3
 8006d76:	693a      	ldr	r2, [r7, #16]
 8006d78:	2334      	movs	r3, #52	; 0x34
 8006d7a:	fb01 f303 	mul.w	r3, r1, r3
 8006d7e:	4413      	add	r3, r2
 8006d80:	3391      	adds	r3, #145	; 0x91
 8006d82:	2202      	movs	r2, #2
 8006d84:	701a      	strb	r2, [r3, #0]
            break;
 8006d86:	e0a6      	b.n	8006ed6 <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006d8e:	b2d9      	uxtb	r1, r3
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006d96:	461a      	mov	r2, r3
 8006d98:	2334      	movs	r3, #52	; 0x34
 8006d9a:	fb02 f303 	mul.w	r3, r2, r3
 8006d9e:	3398      	adds	r3, #152	; 0x98
 8006da0:	693a      	ldr	r2, [r7, #16]
 8006da2:	4413      	add	r3, r2
 8006da4:	3304      	adds	r3, #4
 8006da6:	461a      	mov	r2, r3
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f000 fe96 	bl	8007ada <USBH_MSC_SCSI_RequestSense>
 8006dae:	4603      	mov	r3, r0
 8006db0:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8006db2:	7bfb      	ldrb	r3, [r7, #15]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d145      	bne.n	8006e44 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	693a      	ldr	r2, [r7, #16]
 8006dc2:	2334      	movs	r3, #52	; 0x34
 8006dc4:	fb01 f303 	mul.w	r3, r1, r3
 8006dc8:	4413      	add	r3, r2
 8006dca:	339c      	adds	r3, #156	; 0x9c
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	2b06      	cmp	r3, #6
 8006dd0:	d00c      	beq.n	8006dec <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006dd8:	4619      	mov	r1, r3
 8006dda:	693a      	ldr	r2, [r7, #16]
 8006ddc:	2334      	movs	r3, #52	; 0x34
 8006dde:	fb01 f303 	mul.w	r3, r1, r3
 8006de2:	4413      	add	r3, r2
 8006de4:	339c      	adds	r3, #156	; 0x9c
 8006de6:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8006de8:	2b02      	cmp	r3, #2
 8006dea:	d117      	bne.n	8006e1c <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8006df8:	1ad3      	subs	r3, r2, r3
 8006dfa:	f242 720f 	movw	r2, #9999	; 0x270f
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d80c      	bhi.n	8006e1c <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006e08:	4619      	mov	r1, r3
 8006e0a:	693a      	ldr	r2, [r7, #16]
 8006e0c:	2334      	movs	r3, #52	; 0x34
 8006e0e:	fb01 f303 	mul.w	r3, r1, r3
 8006e12:	4413      	add	r3, r2
 8006e14:	3390      	adds	r3, #144	; 0x90
 8006e16:	2202      	movs	r2, #2
 8006e18:	701a      	strb	r2, [r3, #0]
                  break;
 8006e1a:	e05f      	b.n	8006edc <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006e22:	4619      	mov	r1, r3
 8006e24:	693a      	ldr	r2, [r7, #16]
 8006e26:	2334      	movs	r3, #52	; 0x34
 8006e28:	fb01 f303 	mul.w	r3, r1, r3
 8006e2c:	4413      	add	r3, r2
 8006e2e:	3390      	adds	r3, #144	; 0x90
 8006e30:	2201      	movs	r2, #1
 8006e32:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	b29a      	uxth	r2, r3
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8006e44:	7bfb      	ldrb	r3, [r7, #15]
 8006e46:	2b02      	cmp	r3, #2
 8006e48:	d10c      	bne.n	8006e64 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006e50:	4619      	mov	r1, r3
 8006e52:	693a      	ldr	r2, [r7, #16]
 8006e54:	2334      	movs	r3, #52	; 0x34
 8006e56:	fb01 f303 	mul.w	r3, r1, r3
 8006e5a:	4413      	add	r3, r2
 8006e5c:	3390      	adds	r3, #144	; 0x90
 8006e5e:	2208      	movs	r2, #8
 8006e60:	701a      	strb	r2, [r3, #0]
            break;
 8006e62:	e03a      	b.n	8006eda <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006e64:	7bfb      	ldrb	r3, [r7, #15]
 8006e66:	2b04      	cmp	r3, #4
 8006e68:	d137      	bne.n	8006eda <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006e70:	4619      	mov	r1, r3
 8006e72:	693a      	ldr	r2, [r7, #16]
 8006e74:	2334      	movs	r3, #52	; 0x34
 8006e76:	fb01 f303 	mul.w	r3, r1, r3
 8006e7a:	4413      	add	r3, r2
 8006e7c:	3390      	adds	r3, #144	; 0x90
 8006e7e:	2201      	movs	r2, #1
 8006e80:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006e88:	4619      	mov	r1, r3
 8006e8a:	693a      	ldr	r2, [r7, #16]
 8006e8c:	2334      	movs	r3, #52	; 0x34
 8006e8e:	fb01 f303 	mul.w	r3, r1, r3
 8006e92:	4413      	add	r3, r2
 8006e94:	3391      	adds	r3, #145	; 0x91
 8006e96:	2202      	movs	r2, #2
 8006e98:	701a      	strb	r2, [r3, #0]
            break;
 8006e9a:	e01e      	b.n	8006eda <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	b29a      	uxth	r2, r3
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8006eac:	e016      	b.n	8006edc <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	2201      	movs	r2, #1
 8006eba:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ec2:	2102      	movs	r1, #2
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	4798      	blx	r3
      break;
 8006ec8:	e00c      	b.n	8006ee4 <USBH_MSC_Process+0x514>
            break;
 8006eca:	bf00      	nop
 8006ecc:	e00a      	b.n	8006ee4 <USBH_MSC_Process+0x514>
            break;
 8006ece:	bf00      	nop
 8006ed0:	e008      	b.n	8006ee4 <USBH_MSC_Process+0x514>
            break;
 8006ed2:	bf00      	nop
 8006ed4:	e006      	b.n	8006ee4 <USBH_MSC_Process+0x514>
            break;
 8006ed6:	bf00      	nop
 8006ed8:	e004      	b.n	8006ee4 <USBH_MSC_Process+0x514>
            break;
 8006eda:	bf00      	nop
      break;
 8006edc:	e002      	b.n	8006ee4 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	75fb      	strb	r3, [r7, #23]
      break;
 8006ee2:	bf00      	nop
  }
  return error;
 8006ee4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3718      	adds	r7, #24
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop

08006ef0 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b083      	sub	sp, #12
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	370c      	adds	r7, #12
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr

08006f06 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8006f06:	b580      	push	{r7, lr}
 8006f08:	b088      	sub	sp, #32
 8006f0a:	af02      	add	r7, sp, #8
 8006f0c:	6078      	str	r0, [r7, #4]
 8006f0e:	460b      	mov	r3, r1
 8006f10:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f18:	69db      	ldr	r3, [r3, #28]
 8006f1a:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8006f20:	2301      	movs	r3, #1
 8006f22:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8006f24:	78fb      	ldrb	r3, [r7, #3]
 8006f26:	693a      	ldr	r2, [r7, #16]
 8006f28:	2134      	movs	r1, #52	; 0x34
 8006f2a:	fb01 f303 	mul.w	r3, r1, r3
 8006f2e:	4413      	add	r3, r2
 8006f30:	3390      	adds	r3, #144	; 0x90
 8006f32:	781b      	ldrb	r3, [r3, #0]
 8006f34:	2b07      	cmp	r3, #7
 8006f36:	d03c      	beq.n	8006fb2 <USBH_MSC_RdWrProcess+0xac>
 8006f38:	2b07      	cmp	r3, #7
 8006f3a:	f300 80a7 	bgt.w	800708c <USBH_MSC_RdWrProcess+0x186>
 8006f3e:	2b05      	cmp	r3, #5
 8006f40:	d06c      	beq.n	800701c <USBH_MSC_RdWrProcess+0x116>
 8006f42:	2b06      	cmp	r3, #6
 8006f44:	f040 80a2 	bne.w	800708c <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8006f48:	78f9      	ldrb	r1, [r7, #3]
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	9300      	str	r3, [sp, #0]
 8006f4e:	2300      	movs	r3, #0
 8006f50:	2200      	movs	r2, #0
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 fea5 	bl	8007ca2 <USBH_MSC_SCSI_Read>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8006f5c:	7bfb      	ldrb	r3, [r7, #15]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d10b      	bne.n	8006f7a <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8006f62:	78fb      	ldrb	r3, [r7, #3]
 8006f64:	693a      	ldr	r2, [r7, #16]
 8006f66:	2134      	movs	r1, #52	; 0x34
 8006f68:	fb01 f303 	mul.w	r3, r1, r3
 8006f6c:	4413      	add	r3, r2
 8006f6e:	3390      	adds	r3, #144	; 0x90
 8006f70:	2201      	movs	r2, #1
 8006f72:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8006f74:	2300      	movs	r3, #0
 8006f76:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006f78:	e08a      	b.n	8007090 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 8006f7a:	7bfb      	ldrb	r3, [r7, #15]
 8006f7c:	2b02      	cmp	r3, #2
 8006f7e:	d109      	bne.n	8006f94 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8006f80:	78fb      	ldrb	r3, [r7, #3]
 8006f82:	693a      	ldr	r2, [r7, #16]
 8006f84:	2134      	movs	r1, #52	; 0x34
 8006f86:	fb01 f303 	mul.w	r3, r1, r3
 8006f8a:	4413      	add	r3, r2
 8006f8c:	3390      	adds	r3, #144	; 0x90
 8006f8e:	2205      	movs	r2, #5
 8006f90:	701a      	strb	r2, [r3, #0]
      break;
 8006f92:	e07d      	b.n	8007090 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006f94:	7bfb      	ldrb	r3, [r7, #15]
 8006f96:	2b04      	cmp	r3, #4
 8006f98:	d17a      	bne.n	8007090 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8006f9a:	78fb      	ldrb	r3, [r7, #3]
 8006f9c:	693a      	ldr	r2, [r7, #16]
 8006f9e:	2134      	movs	r1, #52	; 0x34
 8006fa0:	fb01 f303 	mul.w	r3, r1, r3
 8006fa4:	4413      	add	r3, r2
 8006fa6:	3390      	adds	r3, #144	; 0x90
 8006fa8:	2208      	movs	r2, #8
 8006faa:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8006fac:	2302      	movs	r3, #2
 8006fae:	75fb      	strb	r3, [r7, #23]
      break;
 8006fb0:	e06e      	b.n	8007090 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8006fb2:	78f9      	ldrb	r1, [r7, #3]
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	9300      	str	r3, [sp, #0]
 8006fb8:	2300      	movs	r3, #0
 8006fba:	2200      	movs	r2, #0
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f000 fe05 	bl	8007bcc <USBH_MSC_SCSI_Write>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8006fc6:	7bfb      	ldrb	r3, [r7, #15]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d10b      	bne.n	8006fe4 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8006fcc:	78fb      	ldrb	r3, [r7, #3]
 8006fce:	693a      	ldr	r2, [r7, #16]
 8006fd0:	2134      	movs	r1, #52	; 0x34
 8006fd2:	fb01 f303 	mul.w	r3, r1, r3
 8006fd6:	4413      	add	r3, r2
 8006fd8:	3390      	adds	r3, #144	; 0x90
 8006fda:	2201      	movs	r2, #1
 8006fdc:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006fe2:	e057      	b.n	8007094 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 8006fe4:	7bfb      	ldrb	r3, [r7, #15]
 8006fe6:	2b02      	cmp	r3, #2
 8006fe8:	d109      	bne.n	8006ffe <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8006fea:	78fb      	ldrb	r3, [r7, #3]
 8006fec:	693a      	ldr	r2, [r7, #16]
 8006fee:	2134      	movs	r1, #52	; 0x34
 8006ff0:	fb01 f303 	mul.w	r3, r1, r3
 8006ff4:	4413      	add	r3, r2
 8006ff6:	3390      	adds	r3, #144	; 0x90
 8006ff8:	2205      	movs	r2, #5
 8006ffa:	701a      	strb	r2, [r3, #0]
      break;
 8006ffc:	e04a      	b.n	8007094 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006ffe:	7bfb      	ldrb	r3, [r7, #15]
 8007000:	2b04      	cmp	r3, #4
 8007002:	d147      	bne.n	8007094 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8007004:	78fb      	ldrb	r3, [r7, #3]
 8007006:	693a      	ldr	r2, [r7, #16]
 8007008:	2134      	movs	r1, #52	; 0x34
 800700a:	fb01 f303 	mul.w	r3, r1, r3
 800700e:	4413      	add	r3, r2
 8007010:	3390      	adds	r3, #144	; 0x90
 8007012:	2208      	movs	r2, #8
 8007014:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8007016:	2302      	movs	r3, #2
 8007018:	75fb      	strb	r3, [r7, #23]
      break;
 800701a:	e03b      	b.n	8007094 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800701c:	78fb      	ldrb	r3, [r7, #3]
 800701e:	2234      	movs	r2, #52	; 0x34
 8007020:	fb02 f303 	mul.w	r3, r2, r3
 8007024:	3398      	adds	r3, #152	; 0x98
 8007026:	693a      	ldr	r2, [r7, #16]
 8007028:	4413      	add	r3, r2
 800702a:	1d1a      	adds	r2, r3, #4
 800702c:	78fb      	ldrb	r3, [r7, #3]
 800702e:	4619      	mov	r1, r3
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f000 fd52 	bl	8007ada <USBH_MSC_SCSI_RequestSense>
 8007036:	4603      	mov	r3, r0
 8007038:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800703a:	7bfb      	ldrb	r3, [r7, #15]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d113      	bne.n	8007068 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8007040:	78fb      	ldrb	r3, [r7, #3]
 8007042:	693a      	ldr	r2, [r7, #16]
 8007044:	2134      	movs	r1, #52	; 0x34
 8007046:	fb01 f303 	mul.w	r3, r1, r3
 800704a:	4413      	add	r3, r2
 800704c:	3390      	adds	r3, #144	; 0x90
 800704e:	2201      	movs	r2, #1
 8007050:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8007052:	78fb      	ldrb	r3, [r7, #3]
 8007054:	693a      	ldr	r2, [r7, #16]
 8007056:	2134      	movs	r1, #52	; 0x34
 8007058:	fb01 f303 	mul.w	r3, r1, r3
 800705c:	4413      	add	r3, r2
 800705e:	3391      	adds	r3, #145	; 0x91
 8007060:	2202      	movs	r2, #2
 8007062:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8007064:	2302      	movs	r3, #2
 8007066:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 8007068:	7bfb      	ldrb	r3, [r7, #15]
 800706a:	2b02      	cmp	r3, #2
 800706c:	d014      	beq.n	8007098 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800706e:	7bfb      	ldrb	r3, [r7, #15]
 8007070:	2b04      	cmp	r3, #4
 8007072:	d111      	bne.n	8007098 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8007074:	78fb      	ldrb	r3, [r7, #3]
 8007076:	693a      	ldr	r2, [r7, #16]
 8007078:	2134      	movs	r1, #52	; 0x34
 800707a:	fb01 f303 	mul.w	r3, r1, r3
 800707e:	4413      	add	r3, r2
 8007080:	3390      	adds	r3, #144	; 0x90
 8007082:	2208      	movs	r2, #8
 8007084:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8007086:	2302      	movs	r3, #2
 8007088:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800708a:	e005      	b.n	8007098 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 800708c:	bf00      	nop
 800708e:	e004      	b.n	800709a <USBH_MSC_RdWrProcess+0x194>
      break;
 8007090:	bf00      	nop
 8007092:	e002      	b.n	800709a <USBH_MSC_RdWrProcess+0x194>
      break;
 8007094:	bf00      	nop
 8007096:	e000      	b.n	800709a <USBH_MSC_RdWrProcess+0x194>
      break;
 8007098:	bf00      	nop

  }
  return error;
 800709a:	7dfb      	ldrb	r3, [r7, #23]
}
 800709c:	4618      	mov	r0, r3
 800709e:	3718      	adds	r7, #24
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b085      	sub	sp, #20
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	460b      	mov	r3, r1
 80070ae:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070b6:	69db      	ldr	r3, [r3, #28]
 80070b8:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	2b0b      	cmp	r3, #11
 80070c2:	d10c      	bne.n	80070de <USBH_MSC_UnitIsReady+0x3a>
 80070c4:	78fb      	ldrb	r3, [r7, #3]
 80070c6:	68ba      	ldr	r2, [r7, #8]
 80070c8:	2134      	movs	r1, #52	; 0x34
 80070ca:	fb01 f303 	mul.w	r3, r1, r3
 80070ce:	4413      	add	r3, r2
 80070d0:	3391      	adds	r3, #145	; 0x91
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d102      	bne.n	80070de <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 80070d8:	2301      	movs	r3, #1
 80070da:	73fb      	strb	r3, [r7, #15]
 80070dc:	e001      	b.n	80070e2 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 80070de:	2300      	movs	r3, #0
 80070e0:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80070e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3714      	adds	r7, #20
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr

080070f0 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b086      	sub	sp, #24
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	460b      	mov	r3, r1
 80070fa:	607a      	str	r2, [r7, #4]
 80070fc:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007104:	69db      	ldr	r3, [r3, #28]
 8007106:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	b2db      	uxtb	r3, r3
 800710e:	2b0b      	cmp	r3, #11
 8007110:	d10d      	bne.n	800712e <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8007112:	7afb      	ldrb	r3, [r7, #11]
 8007114:	2234      	movs	r2, #52	; 0x34
 8007116:	fb02 f303 	mul.w	r3, r2, r3
 800711a:	3390      	adds	r3, #144	; 0x90
 800711c:	697a      	ldr	r2, [r7, #20]
 800711e:	4413      	add	r3, r2
 8007120:	2234      	movs	r2, #52	; 0x34
 8007122:	4619      	mov	r1, r3
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f006 f965 	bl	800d3f4 <memcpy>
    return USBH_OK;
 800712a:	2300      	movs	r3, #0
 800712c:	e000      	b.n	8007130 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800712e:	2302      	movs	r3, #2
  }
}
 8007130:	4618      	mov	r0, r3
 8007132:	3718      	adds	r7, #24
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b088      	sub	sp, #32
 800713c:	af02      	add	r7, sp, #8
 800713e:	60f8      	str	r0, [r7, #12]
 8007140:	607a      	str	r2, [r7, #4]
 8007142:	603b      	str	r3, [r7, #0]
 8007144:	460b      	mov	r3, r1
 8007146:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800714e:	69db      	ldr	r3, [r3, #28]
 8007150:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007158:	b2db      	uxtb	r3, r3
 800715a:	2b00      	cmp	r3, #0
 800715c:	d00e      	beq.n	800717c <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8007164:	2b0b      	cmp	r3, #11
 8007166:	d109      	bne.n	800717c <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8007168:	7afb      	ldrb	r3, [r7, #11]
 800716a:	697a      	ldr	r2, [r7, #20]
 800716c:	2134      	movs	r1, #52	; 0x34
 800716e:	fb01 f303 	mul.w	r3, r1, r3
 8007172:	4413      	add	r3, r2
 8007174:	3390      	adds	r3, #144	; 0x90
 8007176:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8007178:	2b01      	cmp	r3, #1
 800717a:	d001      	beq.n	8007180 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800717c:	2302      	movs	r3, #2
 800717e:	e040      	b.n	8007202 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	2206      	movs	r2, #6
 8007184:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8007186:	7afb      	ldrb	r3, [r7, #11]
 8007188:	697a      	ldr	r2, [r7, #20]
 800718a:	2134      	movs	r1, #52	; 0x34
 800718c:	fb01 f303 	mul.w	r3, r1, r3
 8007190:	4413      	add	r3, r2
 8007192:	3390      	adds	r3, #144	; 0x90
 8007194:	2206      	movs	r2, #6
 8007196:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8007198:	7afb      	ldrb	r3, [r7, #11]
 800719a:	b29a      	uxth	r2, r3
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 80071a2:	7af9      	ldrb	r1, [r7, #11]
 80071a4:	6a3b      	ldr	r3, [r7, #32]
 80071a6:	9300      	str	r3, [sp, #0]
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	68f8      	ldr	r0, [r7, #12]
 80071ae:	f000 fd78 	bl	8007ca2 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80071b8:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80071ba:	e016      	b.n	80071ea <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	1ad2      	subs	r2, r2, r3
 80071c6:	6a3b      	ldr	r3, [r7, #32]
 80071c8:	f242 7110 	movw	r1, #10000	; 0x2710
 80071cc:	fb01 f303 	mul.w	r3, r1, r3
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d805      	bhi.n	80071e0 <USBH_MSC_Read+0xa8>
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d104      	bne.n	80071ea <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	2201      	movs	r2, #1
 80071e4:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80071e6:	2302      	movs	r3, #2
 80071e8:	e00b      	b.n	8007202 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80071ea:	7afb      	ldrb	r3, [r7, #11]
 80071ec:	4619      	mov	r1, r3
 80071ee:	68f8      	ldr	r0, [r7, #12]
 80071f0:	f7ff fe89 	bl	8006f06 <USBH_MSC_RdWrProcess>
 80071f4:	4603      	mov	r3, r0
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d0e0      	beq.n	80071bc <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	2201      	movs	r2, #1
 80071fe:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8007200:	2300      	movs	r3, #0
}
 8007202:	4618      	mov	r0, r3
 8007204:	3718      	adds	r7, #24
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}

0800720a <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800720a:	b580      	push	{r7, lr}
 800720c:	b088      	sub	sp, #32
 800720e:	af02      	add	r7, sp, #8
 8007210:	60f8      	str	r0, [r7, #12]
 8007212:	607a      	str	r2, [r7, #4]
 8007214:	603b      	str	r3, [r7, #0]
 8007216:	460b      	mov	r3, r1
 8007218:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007220:	69db      	ldr	r3, [r3, #28]
 8007222:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800722a:	b2db      	uxtb	r3, r3
 800722c:	2b00      	cmp	r3, #0
 800722e:	d00e      	beq.n	800724e <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8007236:	2b0b      	cmp	r3, #11
 8007238:	d109      	bne.n	800724e <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800723a:	7afb      	ldrb	r3, [r7, #11]
 800723c:	697a      	ldr	r2, [r7, #20]
 800723e:	2134      	movs	r1, #52	; 0x34
 8007240:	fb01 f303 	mul.w	r3, r1, r3
 8007244:	4413      	add	r3, r2
 8007246:	3390      	adds	r3, #144	; 0x90
 8007248:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800724a:	2b01      	cmp	r3, #1
 800724c:	d001      	beq.n	8007252 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800724e:	2302      	movs	r3, #2
 8007250:	e040      	b.n	80072d4 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	2207      	movs	r2, #7
 8007256:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8007258:	7afb      	ldrb	r3, [r7, #11]
 800725a:	697a      	ldr	r2, [r7, #20]
 800725c:	2134      	movs	r1, #52	; 0x34
 800725e:	fb01 f303 	mul.w	r3, r1, r3
 8007262:	4413      	add	r3, r2
 8007264:	3390      	adds	r3, #144	; 0x90
 8007266:	2207      	movs	r2, #7
 8007268:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800726a:	7afb      	ldrb	r3, [r7, #11]
 800726c:	b29a      	uxth	r2, r3
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8007274:	7af9      	ldrb	r1, [r7, #11]
 8007276:	6a3b      	ldr	r3, [r7, #32]
 8007278:	9300      	str	r3, [sp, #0]
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	687a      	ldr	r2, [r7, #4]
 800727e:	68f8      	ldr	r0, [r7, #12]
 8007280:	f000 fca4 	bl	8007bcc <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800728a:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800728c:	e016      	b.n	80072bc <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	1ad2      	subs	r2, r2, r3
 8007298:	6a3b      	ldr	r3, [r7, #32]
 800729a:	f242 7110 	movw	r1, #10000	; 0x2710
 800729e:	fb01 f303 	mul.w	r3, r1, r3
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d805      	bhi.n	80072b2 <USBH_MSC_Write+0xa8>
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d104      	bne.n	80072bc <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	2201      	movs	r2, #1
 80072b6:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80072b8:	2302      	movs	r3, #2
 80072ba:	e00b      	b.n	80072d4 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80072bc:	7afb      	ldrb	r3, [r7, #11]
 80072be:	4619      	mov	r1, r3
 80072c0:	68f8      	ldr	r0, [r7, #12]
 80072c2:	f7ff fe20 	bl	8006f06 <USBH_MSC_RdWrProcess>
 80072c6:	4603      	mov	r3, r0
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d0e0      	beq.n	800728e <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	2201      	movs	r2, #1
 80072d0:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 80072d2:	2300      	movs	r3, #0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3718      	adds	r7, #24
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b082      	sub	sp, #8
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2221      	movs	r2, #33	; 0x21
 80072e8:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	22ff      	movs	r2, #255	; 0xff
 80072ee:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2200      	movs	r2, #0
 80072f4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2200      	movs	r2, #0
 80072fa:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8007302:	2200      	movs	r2, #0
 8007304:	2100      	movs	r1, #0
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f001 fdab 	bl	8008e62 <USBH_CtlReq>
 800730c:	4603      	mov	r3, r0
}
 800730e:	4618      	mov	r0, r3
 8007310:	3708      	adds	r7, #8
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}

08007316 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8007316:	b580      	push	{r7, lr}
 8007318:	b082      	sub	sp, #8
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
 800731e:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	22a1      	movs	r2, #161	; 0xa1
 8007324:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	22fe      	movs	r2, #254	; 0xfe
 800732a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2200      	movs	r2, #0
 8007330:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2201      	movs	r2, #1
 800733c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800733e:	2201      	movs	r2, #1
 8007340:	6839      	ldr	r1, [r7, #0]
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f001 fd8d 	bl	8008e62 <USBH_CtlReq>
 8007348:	4603      	mov	r3, r0
}
 800734a:	4618      	mov	r0, r3
 800734c:	3708      	adds	r7, #8
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
	...

08007354 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8007354:	b480      	push	{r7}
 8007356:	b085      	sub	sp, #20
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007362:	69db      	ldr	r3, [r3, #28]
 8007364:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	4a09      	ldr	r2, [pc, #36]	; (8007390 <USBH_MSC_BOT_Init+0x3c>)
 800736a:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	4a09      	ldr	r2, [pc, #36]	; (8007394 <USBH_MSC_BOT_Init+0x40>)
 8007370:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2201      	movs	r2, #1
 8007376:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2201      	movs	r2, #1
 800737e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8007382:	2300      	movs	r3, #0
}
 8007384:	4618      	mov	r0, r3
 8007386:	3714      	adds	r7, #20
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr
 8007390:	43425355 	.word	0x43425355
 8007394:	20304050 	.word	0x20304050

08007398 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b088      	sub	sp, #32
 800739c:	af02      	add	r7, sp, #8
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	460b      	mov	r3, r1
 80073a2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 80073a4:	2301      	movs	r3, #1
 80073a6:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 80073a8:	2301      	movs	r3, #1
 80073aa:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 80073ac:	2301      	movs	r3, #1
 80073ae:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80073b0:	2300      	movs	r3, #0
 80073b2:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073ba:	69db      	ldr	r3, [r3, #28]
 80073bc:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 80073be:	2300      	movs	r3, #0
 80073c0:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80073c8:	3b01      	subs	r3, #1
 80073ca:	2b0a      	cmp	r3, #10
 80073cc:	f200 819e 	bhi.w	800770c <USBH_MSC_BOT_Process+0x374>
 80073d0:	a201      	add	r2, pc, #4	; (adr r2, 80073d8 <USBH_MSC_BOT_Process+0x40>)
 80073d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073d6:	bf00      	nop
 80073d8:	08007405 	.word	0x08007405
 80073dc:	0800742d 	.word	0x0800742d
 80073e0:	08007497 	.word	0x08007497
 80073e4:	080074b5 	.word	0x080074b5
 80073e8:	08007539 	.word	0x08007539
 80073ec:	0800755b 	.word	0x0800755b
 80073f0:	080075f3 	.word	0x080075f3
 80073f4:	0800760f 	.word	0x0800760f
 80073f8:	08007661 	.word	0x08007661
 80073fc:	08007691 	.word	0x08007691
 8007400:	080076f3 	.word	0x080076f3
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	78fa      	ldrb	r2, [r7, #3]
 8007408:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	2202      	movs	r2, #2
 8007410:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	795b      	ldrb	r3, [r3, #5]
 800741e:	2201      	movs	r2, #1
 8007420:	9200      	str	r2, [sp, #0]
 8007422:	221f      	movs	r2, #31
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f001 ff2a 	bl	800927e <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800742a:	e17e      	b.n	800772a <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	795b      	ldrb	r3, [r3, #5]
 8007430:	4619      	mov	r1, r3
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f005 fec6 	bl	800d1c4 <USBH_LL_GetURBState>
 8007438:	4603      	mov	r3, r0
 800743a:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800743c:	7d3b      	ldrb	r3, [r7, #20]
 800743e:	2b01      	cmp	r3, #1
 8007440:	d118      	bne.n	8007474 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007446:	2b00      	cmp	r3, #0
 8007448:	d00f      	beq.n	800746a <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8007450:	b25b      	sxtb	r3, r3
 8007452:	2b00      	cmp	r3, #0
 8007454:	da04      	bge.n	8007460 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	2203      	movs	r2, #3
 800745a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800745e:	e157      	b.n	8007710 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	2205      	movs	r2, #5
 8007464:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007468:	e152      	b.n	8007710 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	2207      	movs	r2, #7
 800746e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007472:	e14d      	b.n	8007710 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007474:	7d3b      	ldrb	r3, [r7, #20]
 8007476:	2b02      	cmp	r3, #2
 8007478:	d104      	bne.n	8007484 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	2201      	movs	r2, #1
 800747e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007482:	e145      	b.n	8007710 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 8007484:	7d3b      	ldrb	r3, [r7, #20]
 8007486:	2b05      	cmp	r3, #5
 8007488:	f040 8142 	bne.w	8007710 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	220a      	movs	r2, #10
 8007490:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007494:	e13c      	b.n	8007710 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	895a      	ldrh	r2, [r3, #10]
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	791b      	ldrb	r3, [r3, #4]
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f001 ff0f 	bl	80092c8 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	2204      	movs	r2, #4
 80074ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 80074b2:	e13a      	b.n	800772a <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	791b      	ldrb	r3, [r3, #4]
 80074b8:	4619      	mov	r1, r3
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f005 fe82 	bl	800d1c4 <USBH_LL_GetURBState>
 80074c0:	4603      	mov	r3, r0
 80074c2:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80074c4:	7d3b      	ldrb	r3, [r7, #20]
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	d12d      	bne.n	8007526 <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074ce:	693a      	ldr	r2, [r7, #16]
 80074d0:	8952      	ldrh	r2, [r2, #10]
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d910      	bls.n	80074f8 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074dc:	693a      	ldr	r2, [r7, #16]
 80074de:	8952      	ldrh	r2, [r2, #10]
 80074e0:	441a      	add	r2, r3
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074ec:	693a      	ldr	r2, [r7, #16]
 80074ee:	8952      	ldrh	r2, [r2, #10]
 80074f0:	1a9a      	subs	r2, r3, r2
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	65da      	str	r2, [r3, #92]	; 0x5c
 80074f6:	e002      	b.n	80074fe <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	2200      	movs	r2, #0
 80074fc:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007502:	2b00      	cmp	r3, #0
 8007504:	d00a      	beq.n	800751c <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	895a      	ldrh	r2, [r3, #10]
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	791b      	ldrb	r3, [r3, #4]
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f001 fed7 	bl	80092c8 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800751a:	e0fb      	b.n	8007714 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	2207      	movs	r2, #7
 8007520:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007524:	e0f6      	b.n	8007714 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 8007526:	7d3b      	ldrb	r3, [r7, #20]
 8007528:	2b05      	cmp	r3, #5
 800752a:	f040 80f3 	bne.w	8007714 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	2209      	movs	r2, #9
 8007532:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007536:	e0ed      	b.n	8007714 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	891a      	ldrh	r2, [r3, #8]
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	795b      	ldrb	r3, [r3, #5]
 8007546:	2001      	movs	r0, #1
 8007548:	9000      	str	r0, [sp, #0]
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f001 fe97 	bl	800927e <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	2206      	movs	r2, #6
 8007554:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007558:	e0e7      	b.n	800772a <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	795b      	ldrb	r3, [r3, #5]
 800755e:	4619      	mov	r1, r3
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f005 fe2f 	bl	800d1c4 <USBH_LL_GetURBState>
 8007566:	4603      	mov	r3, r0
 8007568:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800756a:	7d3b      	ldrb	r3, [r7, #20]
 800756c:	2b01      	cmp	r3, #1
 800756e:	d12f      	bne.n	80075d0 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007574:	693a      	ldr	r2, [r7, #16]
 8007576:	8912      	ldrh	r2, [r2, #8]
 8007578:	4293      	cmp	r3, r2
 800757a:	d910      	bls.n	800759e <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007582:	693a      	ldr	r2, [r7, #16]
 8007584:	8912      	ldrh	r2, [r2, #8]
 8007586:	441a      	add	r2, r3
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007592:	693a      	ldr	r2, [r7, #16]
 8007594:	8912      	ldrh	r2, [r2, #8]
 8007596:	1a9a      	subs	r2, r3, r2
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	65da      	str	r2, [r3, #92]	; 0x5c
 800759c:	e002      	b.n	80075a4 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	2200      	movs	r2, #0
 80075a2:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00c      	beq.n	80075c6 <USBH_MSC_BOT_Process+0x22e>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	891a      	ldrh	r2, [r3, #8]
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	795b      	ldrb	r3, [r3, #5]
 80075ba:	2001      	movs	r0, #1
 80075bc:	9000      	str	r0, [sp, #0]
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f001 fe5d 	bl	800927e <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 80075c4:	e0a8      	b.n	8007718 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	2207      	movs	r2, #7
 80075ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80075ce:	e0a3      	b.n	8007718 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 80075d0:	7d3b      	ldrb	r3, [r7, #20]
 80075d2:	2b02      	cmp	r3, #2
 80075d4:	d104      	bne.n	80075e0 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	2205      	movs	r2, #5
 80075da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80075de:	e09b      	b.n	8007718 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 80075e0:	7d3b      	ldrb	r3, [r7, #20]
 80075e2:	2b05      	cmp	r3, #5
 80075e4:	f040 8098 	bne.w	8007718 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	220a      	movs	r2, #10
 80075ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80075f0:	e092      	b.n	8007718 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	f103 0178 	add.w	r1, r3, #120	; 0x78
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	791b      	ldrb	r3, [r3, #4]
 80075fc:	220d      	movs	r2, #13
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f001 fe62 	bl	80092c8 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	2208      	movs	r2, #8
 8007608:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800760c:	e08d      	b.n	800772a <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	791b      	ldrb	r3, [r3, #4]
 8007612:	4619      	mov	r1, r3
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f005 fdd5 	bl	800d1c4 <USBH_LL_GetURBState>
 800761a:	4603      	mov	r3, r0
 800761c:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800761e:	7d3b      	ldrb	r3, [r7, #20]
 8007620:	2b01      	cmp	r3, #1
 8007622:	d115      	bne.n	8007650 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	2201      	movs	r2, #1
 8007628:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	2201      	movs	r2, #1
 8007630:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 f8a9 	bl	800778c <USBH_MSC_DecodeCSW>
 800763a:	4603      	mov	r3, r0
 800763c:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800763e:	7d7b      	ldrb	r3, [r7, #21]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d102      	bne.n	800764a <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 8007644:	2300      	movs	r3, #0
 8007646:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8007648:	e068      	b.n	800771c <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800764a:	2302      	movs	r3, #2
 800764c:	75fb      	strb	r3, [r7, #23]
      break;
 800764e:	e065      	b.n	800771c <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8007650:	7d3b      	ldrb	r3, [r7, #20]
 8007652:	2b05      	cmp	r3, #5
 8007654:	d162      	bne.n	800771c <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	2209      	movs	r2, #9
 800765a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800765e:	e05d      	b.n	800771c <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8007660:	78fb      	ldrb	r3, [r7, #3]
 8007662:	2200      	movs	r2, #0
 8007664:	4619      	mov	r1, r3
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 f864 	bl	8007734 <USBH_MSC_BOT_Abort>
 800766c:	4603      	mov	r3, r0
 800766e:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8007670:	7dbb      	ldrb	r3, [r7, #22]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d104      	bne.n	8007680 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	2207      	movs	r2, #7
 800767a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800767e:	e04f      	b.n	8007720 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 8007680:	7dbb      	ldrb	r3, [r7, #22]
 8007682:	2b04      	cmp	r3, #4
 8007684:	d14c      	bne.n	8007720 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	220b      	movs	r2, #11
 800768a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800768e:	e047      	b.n	8007720 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8007690:	78fb      	ldrb	r3, [r7, #3]
 8007692:	2201      	movs	r2, #1
 8007694:	4619      	mov	r1, r3
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 f84c 	bl	8007734 <USBH_MSC_BOT_Abort>
 800769c:	4603      	mov	r3, r0
 800769e:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 80076a0:	7dbb      	ldrb	r3, [r7, #22]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d11d      	bne.n	80076e2 <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	795b      	ldrb	r3, [r3, #5]
 80076aa:	4619      	mov	r1, r3
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f005 fde3 	bl	800d278 <USBH_LL_GetToggle>
 80076b2:	4603      	mov	r3, r0
 80076b4:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	7959      	ldrb	r1, [r3, #5]
 80076ba:	7bfb      	ldrb	r3, [r7, #15]
 80076bc:	f1c3 0301 	rsb	r3, r3, #1
 80076c0:	b2db      	uxtb	r3, r3
 80076c2:	461a      	mov	r2, r3
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f005 fda7 	bl	800d218 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	791b      	ldrb	r3, [r3, #4]
 80076ce:	2200      	movs	r2, #0
 80076d0:	4619      	mov	r1, r3
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f005 fda0 	bl	800d218 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	2209      	movs	r2, #9
 80076dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 80076e0:	e020      	b.n	8007724 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 80076e2:	7dbb      	ldrb	r3, [r7, #22]
 80076e4:	2b04      	cmp	r3, #4
 80076e6:	d11d      	bne.n	8007724 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	220b      	movs	r2, #11
 80076ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80076f0:	e018      	b.n	8007724 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f7ff fdf2 	bl	80072dc <USBH_MSC_BOT_REQ_Reset>
 80076f8:	4603      	mov	r3, r0
 80076fa:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 80076fc:	7dfb      	ldrb	r3, [r7, #23]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d112      	bne.n	8007728 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	2201      	movs	r2, #1
 8007706:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800770a:	e00d      	b.n	8007728 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800770c:	bf00      	nop
 800770e:	e00c      	b.n	800772a <USBH_MSC_BOT_Process+0x392>
      break;
 8007710:	bf00      	nop
 8007712:	e00a      	b.n	800772a <USBH_MSC_BOT_Process+0x392>
      break;
 8007714:	bf00      	nop
 8007716:	e008      	b.n	800772a <USBH_MSC_BOT_Process+0x392>
      break;
 8007718:	bf00      	nop
 800771a:	e006      	b.n	800772a <USBH_MSC_BOT_Process+0x392>
      break;
 800771c:	bf00      	nop
 800771e:	e004      	b.n	800772a <USBH_MSC_BOT_Process+0x392>
      break;
 8007720:	bf00      	nop
 8007722:	e002      	b.n	800772a <USBH_MSC_BOT_Process+0x392>
      break;
 8007724:	bf00      	nop
 8007726:	e000      	b.n	800772a <USBH_MSC_BOT_Process+0x392>
      break;
 8007728:	bf00      	nop
  }
  return status;
 800772a:	7dfb      	ldrb	r3, [r7, #23]
}
 800772c:	4618      	mov	r0, r3
 800772e:	3718      	adds	r7, #24
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b084      	sub	sp, #16
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	460b      	mov	r3, r1
 800773e:	70fb      	strb	r3, [r7, #3]
 8007740:	4613      	mov	r3, r2
 8007742:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8007744:	2302      	movs	r3, #2
 8007746:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800774e:	69db      	ldr	r3, [r3, #28]
 8007750:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8007752:	78bb      	ldrb	r3, [r7, #2]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d002      	beq.n	800775e <USBH_MSC_BOT_Abort+0x2a>
 8007758:	2b01      	cmp	r3, #1
 800775a:	d009      	beq.n	8007770 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800775c:	e011      	b.n	8007782 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	79db      	ldrb	r3, [r3, #7]
 8007762:	4619      	mov	r1, r3
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f001 f99c 	bl	8008aa2 <USBH_ClrFeature>
 800776a:	4603      	mov	r3, r0
 800776c:	73fb      	strb	r3, [r7, #15]
      break;
 800776e:	e008      	b.n	8007782 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	799b      	ldrb	r3, [r3, #6]
 8007774:	4619      	mov	r1, r3
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f001 f993 	bl	8008aa2 <USBH_ClrFeature>
 800777c:	4603      	mov	r3, r0
 800777e:	73fb      	strb	r3, [r7, #15]
      break;
 8007780:	bf00      	nop
  }
  return status;
 8007782:	7bfb      	ldrb	r3, [r7, #15]
}
 8007784:	4618      	mov	r0, r3
 8007786:	3710      	adds	r7, #16
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b084      	sub	sp, #16
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800779a:	69db      	ldr	r3, [r3, #28]
 800779c:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800779e:	2301      	movs	r3, #1
 80077a0:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	791b      	ldrb	r3, [r3, #4]
 80077a6:	4619      	mov	r1, r3
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f005 fc79 	bl	800d0a0 <USBH_LL_GetLastXferSize>
 80077ae:	4603      	mov	r3, r0
 80077b0:	2b0d      	cmp	r3, #13
 80077b2:	d002      	beq.n	80077ba <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 80077b4:	2302      	movs	r3, #2
 80077b6:	73fb      	strb	r3, [r7, #15]
 80077b8:	e024      	b.n	8007804 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077be:	4a14      	ldr	r2, [pc, #80]	; (8007810 <USBH_MSC_DecodeCSW+0x84>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d11d      	bne.n	8007800 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d119      	bne.n	8007804 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d102      	bne.n	80077e0 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 80077da:	2300      	movs	r3, #0
 80077dc:	73fb      	strb	r3, [r7, #15]
 80077de:	e011      	b.n	8007804 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d102      	bne.n	80077f0 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 80077ea:	2301      	movs	r3, #1
 80077ec:	73fb      	strb	r3, [r7, #15]
 80077ee:	e009      	b.n	8007804 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80077f6:	2b02      	cmp	r3, #2
 80077f8:	d104      	bne.n	8007804 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 80077fa:	2302      	movs	r3, #2
 80077fc:	73fb      	strb	r3, [r7, #15]
 80077fe:	e001      	b.n	8007804 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8007800:	2302      	movs	r3, #2
 8007802:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8007804:	7bfb      	ldrb	r3, [r7, #15]
}
 8007806:	4618      	mov	r0, r3
 8007808:	3710      	adds	r7, #16
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}
 800780e:	bf00      	nop
 8007810:	53425355 	.word	0x53425355

08007814 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b084      	sub	sp, #16
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	460b      	mov	r3, r1
 800781e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8007820:	2302      	movs	r3, #2
 8007822:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800782a:	69db      	ldr	r3, [r3, #28]
 800782c:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8007834:	2b01      	cmp	r3, #1
 8007836:	d002      	beq.n	800783e <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8007838:	2b02      	cmp	r3, #2
 800783a:	d021      	beq.n	8007880 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800783c:	e028      	b.n	8007890 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	2200      	movs	r2, #0
 8007842:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	2200      	movs	r2, #0
 8007848:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	220a      	movs	r2, #10
 8007850:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	3363      	adds	r3, #99	; 0x63
 8007858:	2210      	movs	r2, #16
 800785a:	2100      	movs	r1, #0
 800785c:	4618      	mov	r0, r3
 800785e:	f005 fdd7 	bl	800d410 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	2200      	movs	r2, #0
 8007866:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	2201      	movs	r2, #1
 800786e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	2202      	movs	r2, #2
 8007876:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800787a:	2301      	movs	r3, #1
 800787c:	73fb      	strb	r3, [r7, #15]
      break;
 800787e:	e007      	b.n	8007890 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007880:	78fb      	ldrb	r3, [r7, #3]
 8007882:	4619      	mov	r1, r3
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f7ff fd87 	bl	8007398 <USBH_MSC_BOT_Process>
 800788a:	4603      	mov	r3, r0
 800788c:	73fb      	strb	r3, [r7, #15]
      break;
 800788e:	bf00      	nop
  }

  return error;
 8007890:	7bfb      	ldrb	r3, [r7, #15]
}
 8007892:	4618      	mov	r0, r3
 8007894:	3710      	adds	r7, #16
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}

0800789a <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800789a:	b580      	push	{r7, lr}
 800789c:	b086      	sub	sp, #24
 800789e:	af00      	add	r7, sp, #0
 80078a0:	60f8      	str	r0, [r7, #12]
 80078a2:	460b      	mov	r3, r1
 80078a4:	607a      	str	r2, [r7, #4]
 80078a6:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 80078a8:	2301      	movs	r3, #1
 80078aa:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078b2:	69db      	ldr	r3, [r3, #28]
 80078b4:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d002      	beq.n	80078c6 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 80078c0:	2b02      	cmp	r3, #2
 80078c2:	d027      	beq.n	8007914 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 80078c4:	e05f      	b.n	8007986 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	2208      	movs	r2, #8
 80078ca:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	2280      	movs	r2, #128	; 0x80
 80078d0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	220a      	movs	r2, #10
 80078d8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	3363      	adds	r3, #99	; 0x63
 80078e0:	2210      	movs	r2, #16
 80078e2:	2100      	movs	r1, #0
 80078e4:	4618      	mov	r0, r3
 80078e6:	f005 fd93 	bl	800d410 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	2225      	movs	r2, #37	; 0x25
 80078ee:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	2201      	movs	r2, #1
 80078f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	2202      	movs	r2, #2
 80078fe:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	f103 0210 	add.w	r2, r3, #16
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800790e:	2301      	movs	r3, #1
 8007910:	75fb      	strb	r3, [r7, #23]
      break;
 8007912:	e038      	b.n	8007986 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007914:	7afb      	ldrb	r3, [r7, #11]
 8007916:	4619      	mov	r1, r3
 8007918:	68f8      	ldr	r0, [r7, #12]
 800791a:	f7ff fd3d 	bl	8007398 <USBH_MSC_BOT_Process>
 800791e:	4603      	mov	r3, r0
 8007920:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8007922:	7dfb      	ldrb	r3, [r7, #23]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d12d      	bne.n	8007984 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800792e:	3303      	adds	r3, #3
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	461a      	mov	r2, r3
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800793a:	3302      	adds	r3, #2
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	021b      	lsls	r3, r3, #8
 8007940:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007948:	3301      	adds	r3, #1
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800794e:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	061b      	lsls	r3, r3, #24
 800795a:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007966:	3307      	adds	r3, #7
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	b29a      	uxth	r2, r3
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007972:	3306      	adds	r3, #6
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	b29b      	uxth	r3, r3
 8007978:	021b      	lsls	r3, r3, #8
 800797a:	b29b      	uxth	r3, r3
 800797c:	4313      	orrs	r3, r2
 800797e:	b29a      	uxth	r2, r3
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	809a      	strh	r2, [r3, #4]
      break;
 8007984:	bf00      	nop
  }

  return error;
 8007986:	7dfb      	ldrb	r3, [r7, #23]
}
 8007988:	4618      	mov	r0, r3
 800798a:	3718      	adds	r7, #24
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b086      	sub	sp, #24
 8007994:	af00      	add	r7, sp, #0
 8007996:	60f8      	str	r0, [r7, #12]
 8007998:	460b      	mov	r3, r1
 800799a:	607a      	str	r2, [r7, #4]
 800799c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800799e:	2302      	movs	r3, #2
 80079a0:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079a8:	69db      	ldr	r3, [r3, #28]
 80079aa:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d002      	beq.n	80079bc <USBH_MSC_SCSI_Inquiry+0x2c>
 80079b6:	2b02      	cmp	r3, #2
 80079b8:	d03d      	beq.n	8007a36 <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 80079ba:	e089      	b.n	8007ad0 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	2224      	movs	r2, #36	; 0x24
 80079c0:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	2280      	movs	r2, #128	; 0x80
 80079c6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	220a      	movs	r2, #10
 80079ce:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	3363      	adds	r3, #99	; 0x63
 80079d6:	220a      	movs	r2, #10
 80079d8:	2100      	movs	r1, #0
 80079da:	4618      	mov	r0, r3
 80079dc:	f005 fd18 	bl	800d410 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	2212      	movs	r2, #18
 80079e4:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80079e8:	7afb      	ldrb	r3, [r7, #11]
 80079ea:	015b      	lsls	r3, r3, #5
 80079ec:	b2da      	uxtb	r2, r3
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	2200      	movs	r2, #0
 80079f8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	2200      	movs	r2, #0
 8007a00:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	2224      	movs	r2, #36	; 0x24
 8007a08:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	2201      	movs	r2, #1
 8007a18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	2202      	movs	r2, #2
 8007a20:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	f103 0210 	add.w	r2, r3, #16
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8007a30:	2301      	movs	r3, #1
 8007a32:	75fb      	strb	r3, [r7, #23]
      break;
 8007a34:	e04c      	b.n	8007ad0 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007a36:	7afb      	ldrb	r3, [r7, #11]
 8007a38:	4619      	mov	r1, r3
 8007a3a:	68f8      	ldr	r0, [r7, #12]
 8007a3c:	f7ff fcac 	bl	8007398 <USBH_MSC_BOT_Process>
 8007a40:	4603      	mov	r3, r0
 8007a42:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8007a44:	7dfb      	ldrb	r3, [r7, #23]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d141      	bne.n	8007ace <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8007a4a:	2222      	movs	r2, #34	; 0x22
 8007a4c:	2100      	movs	r1, #0
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f005 fcde 	bl	800d410 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	f003 031f 	and.w	r3, r3, #31
 8007a60:	b2da      	uxtb	r2, r3
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	095b      	lsrs	r3, r3, #5
 8007a70:	b2da      	uxtb	r2, r3
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a7c:	3301      	adds	r3, #1
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	b25b      	sxtb	r3, r3
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	da03      	bge.n	8007a8e <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2201      	movs	r2, #1
 8007a8a:	709a      	strb	r2, [r3, #2]
 8007a8c:	e002      	b.n	8007a94 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2200      	movs	r2, #0
 8007a92:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	1cd8      	adds	r0, r3, #3
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a9e:	3308      	adds	r3, #8
 8007aa0:	2208      	movs	r2, #8
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	f005 fca6 	bl	800d3f4 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f103 000c 	add.w	r0, r3, #12
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ab4:	3310      	adds	r3, #16
 8007ab6:	2210      	movs	r2, #16
 8007ab8:	4619      	mov	r1, r3
 8007aba:	f005 fc9b 	bl	800d3f4 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	331d      	adds	r3, #29
 8007ac2:	693a      	ldr	r2, [r7, #16]
 8007ac4:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8007ac8:	3220      	adds	r2, #32
 8007aca:	6812      	ldr	r2, [r2, #0]
 8007acc:	601a      	str	r2, [r3, #0]
      break;
 8007ace:	bf00      	nop
  }

  return error;
 8007ad0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3718      	adds	r7, #24
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}

08007ada <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8007ada:	b580      	push	{r7, lr}
 8007adc:	b086      	sub	sp, #24
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	60f8      	str	r0, [r7, #12]
 8007ae2:	460b      	mov	r3, r1
 8007ae4:	607a      	str	r2, [r7, #4]
 8007ae6:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8007ae8:	2302      	movs	r3, #2
 8007aea:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007af2:	69db      	ldr	r3, [r3, #28]
 8007af4:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d002      	beq.n	8007b06 <USBH_MSC_SCSI_RequestSense+0x2c>
 8007b00:	2b02      	cmp	r3, #2
 8007b02:	d03d      	beq.n	8007b80 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8007b04:	e05d      	b.n	8007bc2 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	220e      	movs	r2, #14
 8007b0a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	2280      	movs	r2, #128	; 0x80
 8007b10:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	220a      	movs	r2, #10
 8007b18:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	3363      	adds	r3, #99	; 0x63
 8007b20:	2210      	movs	r2, #16
 8007b22:	2100      	movs	r1, #0
 8007b24:	4618      	mov	r0, r3
 8007b26:	f005 fc73 	bl	800d410 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	2203      	movs	r2, #3
 8007b2e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8007b32:	7afb      	ldrb	r3, [r7, #11]
 8007b34:	015b      	lsls	r3, r3, #5
 8007b36:	b2da      	uxtb	r2, r3
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	2200      	movs	r2, #0
 8007b42:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	220e      	movs	r2, #14
 8007b52:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	2201      	movs	r2, #1
 8007b62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	2202      	movs	r2, #2
 8007b6a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	f103 0210 	add.w	r2, r3, #16
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	75fb      	strb	r3, [r7, #23]
      break;
 8007b7e:	e020      	b.n	8007bc2 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007b80:	7afb      	ldrb	r3, [r7, #11]
 8007b82:	4619      	mov	r1, r3
 8007b84:	68f8      	ldr	r0, [r7, #12]
 8007b86:	f7ff fc07 	bl	8007398 <USBH_MSC_BOT_Process>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8007b8e:	7dfb      	ldrb	r3, [r7, #23]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d115      	bne.n	8007bc0 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b9a:	3302      	adds	r3, #2
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	f003 030f 	and.w	r3, r3, #15
 8007ba2:	b2da      	uxtb	r2, r3
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bae:	7b1a      	ldrb	r2, [r3, #12]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bba:	7b5a      	ldrb	r2, [r3, #13]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	709a      	strb	r2, [r3, #2]
      break;
 8007bc0:	bf00      	nop
  }

  return error;
 8007bc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3718      	adds	r7, #24
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b086      	sub	sp, #24
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	60f8      	str	r0, [r7, #12]
 8007bd4:	607a      	str	r2, [r7, #4]
 8007bd6:	603b      	str	r3, [r7, #0]
 8007bd8:	460b      	mov	r3, r1
 8007bda:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8007bdc:	2302      	movs	r3, #2
 8007bde:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007be6:	69db      	ldr	r3, [r3, #28]
 8007be8:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d002      	beq.n	8007bfa <USBH_MSC_SCSI_Write+0x2e>
 8007bf4:	2b02      	cmp	r3, #2
 8007bf6:	d047      	beq.n	8007c88 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8007bf8:	e04e      	b.n	8007c98 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8007c00:	461a      	mov	r2, r3
 8007c02:	6a3b      	ldr	r3, [r7, #32]
 8007c04:	fb03 f202 	mul.w	r2, r3, r2
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	220a      	movs	r2, #10
 8007c18:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	3363      	adds	r3, #99	; 0x63
 8007c20:	2210      	movs	r2, #16
 8007c22:	2100      	movs	r1, #0
 8007c24:	4618      	mov	r0, r3
 8007c26:	f005 fbf3 	bl	800d410 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	222a      	movs	r2, #42	; 0x2a
 8007c2e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8007c32:	79fa      	ldrb	r2, [r7, #7]
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8007c3a:	79ba      	ldrb	r2, [r7, #6]
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8007c42:	797a      	ldrb	r2, [r7, #5]
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8007c4a:	1d3b      	adds	r3, r7, #4
 8007c4c:	781a      	ldrb	r2, [r3, #0]
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8007c54:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8007c5e:	f107 0320 	add.w	r3, r7, #32
 8007c62:	781a      	ldrb	r2, [r3, #0]
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	2202      	movs	r2, #2
 8007c76:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	683a      	ldr	r2, [r7, #0]
 8007c7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8007c82:	2301      	movs	r3, #1
 8007c84:	75fb      	strb	r3, [r7, #23]
      break;
 8007c86:	e007      	b.n	8007c98 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007c88:	7afb      	ldrb	r3, [r7, #11]
 8007c8a:	4619      	mov	r1, r3
 8007c8c:	68f8      	ldr	r0, [r7, #12]
 8007c8e:	f7ff fb83 	bl	8007398 <USBH_MSC_BOT_Process>
 8007c92:	4603      	mov	r3, r0
 8007c94:	75fb      	strb	r3, [r7, #23]
      break;
 8007c96:	bf00      	nop
  }

  return error;
 8007c98:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3718      	adds	r7, #24
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}

08007ca2 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b086      	sub	sp, #24
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	60f8      	str	r0, [r7, #12]
 8007caa:	607a      	str	r2, [r7, #4]
 8007cac:	603b      	str	r3, [r7, #0]
 8007cae:	460b      	mov	r3, r1
 8007cb0:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8007cb2:	2302      	movs	r3, #2
 8007cb4:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007cbc:	69db      	ldr	r3, [r3, #28]
 8007cbe:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d002      	beq.n	8007cd0 <USBH_MSC_SCSI_Read+0x2e>
 8007cca:	2b02      	cmp	r3, #2
 8007ccc:	d047      	beq.n	8007d5e <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8007cce:	e04e      	b.n	8007d6e <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	6a3b      	ldr	r3, [r7, #32]
 8007cda:	fb03 f202 	mul.w	r2, r3, r2
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	2280      	movs	r2, #128	; 0x80
 8007ce6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	220a      	movs	r2, #10
 8007cee:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	3363      	adds	r3, #99	; 0x63
 8007cf6:	2210      	movs	r2, #16
 8007cf8:	2100      	movs	r1, #0
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f005 fb88 	bl	800d410 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	2228      	movs	r2, #40	; 0x28
 8007d04:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8007d08:	79fa      	ldrb	r2, [r7, #7]
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8007d10:	79ba      	ldrb	r2, [r7, #6]
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8007d18:	797a      	ldrb	r2, [r7, #5]
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8007d20:	1d3b      	adds	r3, r7, #4
 8007d22:	781a      	ldrb	r2, [r3, #0]
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8007d2a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8007d34:	f107 0320 	add.w	r3, r7, #32
 8007d38:	781a      	ldrb	r2, [r3, #0]
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	2201      	movs	r2, #1
 8007d44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	2202      	movs	r2, #2
 8007d4c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	683a      	ldr	r2, [r7, #0]
 8007d54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	75fb      	strb	r3, [r7, #23]
      break;
 8007d5c:	e007      	b.n	8007d6e <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007d5e:	7afb      	ldrb	r3, [r7, #11]
 8007d60:	4619      	mov	r1, r3
 8007d62:	68f8      	ldr	r0, [r7, #12]
 8007d64:	f7ff fb18 	bl	8007398 <USBH_MSC_BOT_Process>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	75fb      	strb	r3, [r7, #23]
      break;
 8007d6c:	bf00      	nop
  }

  return error;
 8007d6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3718      	adds	r7, #24
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b084      	sub	sp, #16
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	60f8      	str	r0, [r7, #12]
 8007d80:	60b9      	str	r1, [r7, #8]
 8007d82:	4613      	mov	r3, r2
 8007d84:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d101      	bne.n	8007d90 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007d8c:	2302      	movs	r3, #2
 8007d8e:	e029      	b.n	8007de4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	79fa      	ldrb	r2, [r7, #7]
 8007d94:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2200      	movs	r2, #0
 8007da4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007da8:	68f8      	ldr	r0, [r7, #12]
 8007daa:	f000 f81f 	bl	8007dec <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2200      	movs	r2, #0
 8007db2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2200      	movs	r2, #0
 8007dba:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d003      	beq.n	8007ddc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	68ba      	ldr	r2, [r7, #8]
 8007dd8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007ddc:	68f8      	ldr	r0, [r7, #12]
 8007dde:	f005 f8ab 	bl	800cf38 <USBH_LL_Init>

  return USBH_OK;
 8007de2:	2300      	movs	r3, #0
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3710      	adds	r7, #16
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b085      	sub	sp, #20
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007df4:	2300      	movs	r3, #0
 8007df6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007df8:	2300      	movs	r3, #0
 8007dfa:	60fb      	str	r3, [r7, #12]
 8007dfc:	e009      	b.n	8007e12 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	33e0      	adds	r3, #224	; 0xe0
 8007e04:	009b      	lsls	r3, r3, #2
 8007e06:	4413      	add	r3, r2
 8007e08:	2200      	movs	r2, #0
 8007e0a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	3301      	adds	r3, #1
 8007e10:	60fb      	str	r3, [r7, #12]
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2b0e      	cmp	r3, #14
 8007e16:	d9f2      	bls.n	8007dfe <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007e18:	2300      	movs	r3, #0
 8007e1a:	60fb      	str	r3, [r7, #12]
 8007e1c:	e009      	b.n	8007e32 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007e1e:	687a      	ldr	r2, [r7, #4]
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	4413      	add	r3, r2
 8007e24:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007e28:	2200      	movs	r2, #0
 8007e2a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	3301      	adds	r3, #1
 8007e30:	60fb      	str	r3, [r7, #12]
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e38:	d3f1      	bcc.n	8007e1e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2200      	movs	r2, #0
 8007e44:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2201      	movs	r2, #1
 8007e4a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2201      	movs	r2, #1
 8007e58:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2240      	movs	r2, #64	; 0x40
 8007e5e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2200      	movs	r2, #0
 8007e64:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2201      	movs	r2, #1
 8007e72:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2200      	movs	r2, #0
 8007e82:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007e86:	2300      	movs	r3, #0
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3714      	adds	r7, #20
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr

08007e94 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b085      	sub	sp, #20
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d016      	beq.n	8007ed6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d10e      	bne.n	8007ed0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007eb8:	1c59      	adds	r1, r3, #1
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	33de      	adds	r3, #222	; 0xde
 8007ec4:	6839      	ldr	r1, [r7, #0]
 8007ec6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	73fb      	strb	r3, [r7, #15]
 8007ece:	e004      	b.n	8007eda <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007ed0:	2302      	movs	r3, #2
 8007ed2:	73fb      	strb	r3, [r7, #15]
 8007ed4:	e001      	b.n	8007eda <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007ed6:	2302      	movs	r3, #2
 8007ed8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3714      	adds	r7, #20
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	4770      	bx	lr

08007ee8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b085      	sub	sp, #20
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007efe:	78fa      	ldrb	r2, [r7, #3]
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d204      	bcs.n	8007f0e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	78fa      	ldrb	r2, [r7, #3]
 8007f08:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007f0c:	e001      	b.n	8007f12 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007f0e:	2302      	movs	r3, #2
 8007f10:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3714      	adds	r7, #20
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b087      	sub	sp, #28
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	4608      	mov	r0, r1
 8007f2a:	4611      	mov	r1, r2
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	4603      	mov	r3, r0
 8007f30:	70fb      	strb	r3, [r7, #3]
 8007f32:	460b      	mov	r3, r1
 8007f34:	70bb      	strb	r3, [r7, #2]
 8007f36:	4613      	mov	r3, r2
 8007f38:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007f48:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007f4a:	e025      	b.n	8007f98 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007f4c:	7dfb      	ldrb	r3, [r7, #23]
 8007f4e:	221a      	movs	r2, #26
 8007f50:	fb02 f303 	mul.w	r3, r2, r3
 8007f54:	3308      	adds	r3, #8
 8007f56:	68fa      	ldr	r2, [r7, #12]
 8007f58:	4413      	add	r3, r2
 8007f5a:	3302      	adds	r3, #2
 8007f5c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	795b      	ldrb	r3, [r3, #5]
 8007f62:	78fa      	ldrb	r2, [r7, #3]
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d002      	beq.n	8007f6e <USBH_FindInterface+0x4e>
 8007f68:	78fb      	ldrb	r3, [r7, #3]
 8007f6a:	2bff      	cmp	r3, #255	; 0xff
 8007f6c:	d111      	bne.n	8007f92 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007f72:	78ba      	ldrb	r2, [r7, #2]
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d002      	beq.n	8007f7e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007f78:	78bb      	ldrb	r3, [r7, #2]
 8007f7a:	2bff      	cmp	r3, #255	; 0xff
 8007f7c:	d109      	bne.n	8007f92 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007f82:	787a      	ldrb	r2, [r7, #1]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d002      	beq.n	8007f8e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007f88:	787b      	ldrb	r3, [r7, #1]
 8007f8a:	2bff      	cmp	r3, #255	; 0xff
 8007f8c:	d101      	bne.n	8007f92 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007f8e:	7dfb      	ldrb	r3, [r7, #23]
 8007f90:	e006      	b.n	8007fa0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007f92:	7dfb      	ldrb	r3, [r7, #23]
 8007f94:	3301      	adds	r3, #1
 8007f96:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007f98:	7dfb      	ldrb	r3, [r7, #23]
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d9d6      	bls.n	8007f4c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007f9e:	23ff      	movs	r3, #255	; 0xff
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	371c      	adds	r7, #28
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr

08007fac <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b082      	sub	sp, #8
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f004 fffb 	bl	800cfb0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8007fba:	2101      	movs	r1, #1
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f005 f914 	bl	800d1ea <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007fc2:	2300      	movs	r3, #0
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3708      	adds	r7, #8
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b088      	sub	sp, #32
 8007fd0:	af04      	add	r7, sp, #16
 8007fd2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007fd4:	2302      	movs	r3, #2
 8007fd6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	d102      	bne.n	8007fee <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2203      	movs	r2, #3
 8007fec:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	781b      	ldrb	r3, [r3, #0]
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	2b0b      	cmp	r3, #11
 8007ff6:	f200 81b3 	bhi.w	8008360 <USBH_Process+0x394>
 8007ffa:	a201      	add	r2, pc, #4	; (adr r2, 8008000 <USBH_Process+0x34>)
 8007ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008000:	08008031 	.word	0x08008031
 8008004:	08008063 	.word	0x08008063
 8008008:	080080cb 	.word	0x080080cb
 800800c:	080082fb 	.word	0x080082fb
 8008010:	08008361 	.word	0x08008361
 8008014:	0800816f 	.word	0x0800816f
 8008018:	080082a1 	.word	0x080082a1
 800801c:	080081a5 	.word	0x080081a5
 8008020:	080081c5 	.word	0x080081c5
 8008024:	080081e5 	.word	0x080081e5
 8008028:	08008213 	.word	0x08008213
 800802c:	080082e3 	.word	0x080082e3
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008036:	b2db      	uxtb	r3, r3
 8008038:	2b00      	cmp	r3, #0
 800803a:	f000 8193 	beq.w	8008364 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2201      	movs	r2, #1
 8008042:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008044:	20c8      	movs	r0, #200	; 0xc8
 8008046:	f005 f947 	bl	800d2d8 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f005 f80d 	bl	800d06a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2200      	movs	r2, #0
 8008054:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2200      	movs	r2, #0
 800805c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008060:	e180      	b.n	8008364 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008068:	2b01      	cmp	r3, #1
 800806a:	d107      	bne.n	800807c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2200      	movs	r2, #0
 8008070:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2202      	movs	r2, #2
 8008078:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800807a:	e182      	b.n	8008382 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008082:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008086:	d914      	bls.n	80080b2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800808e:	3301      	adds	r3, #1
 8008090:	b2da      	uxtb	r2, r3
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800809e:	2b03      	cmp	r3, #3
 80080a0:	d903      	bls.n	80080aa <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	220d      	movs	r2, #13
 80080a6:	701a      	strb	r2, [r3, #0]
      break;
 80080a8:	e16b      	b.n	8008382 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2200      	movs	r2, #0
 80080ae:	701a      	strb	r2, [r3, #0]
      break;
 80080b0:	e167      	b.n	8008382 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80080b8:	f103 020a 	add.w	r2, r3, #10
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80080c2:	200a      	movs	r0, #10
 80080c4:	f005 f908 	bl	800d2d8 <USBH_Delay>
      break;
 80080c8:	e15b      	b.n	8008382 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d005      	beq.n	80080e0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80080da:	2104      	movs	r1, #4
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80080e0:	2064      	movs	r0, #100	; 0x64
 80080e2:	f005 f8f9 	bl	800d2d8 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f004 ff98 	bl	800d01c <USBH_LL_GetSpeed>
 80080ec:	4603      	mov	r3, r0
 80080ee:	461a      	mov	r2, r3
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2205      	movs	r2, #5
 80080fa:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80080fc:	2100      	movs	r1, #0
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f001 f92f 	bl	8009362 <USBH_AllocPipe>
 8008104:	4603      	mov	r3, r0
 8008106:	461a      	mov	r2, r3
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800810c:	2180      	movs	r1, #128	; 0x80
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f001 f927 	bl	8009362 <USBH_AllocPipe>
 8008114:	4603      	mov	r3, r0
 8008116:	461a      	mov	r2, r3
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	7919      	ldrb	r1, [r3, #4]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800812c:	687a      	ldr	r2, [r7, #4]
 800812e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008130:	b292      	uxth	r2, r2
 8008132:	9202      	str	r2, [sp, #8]
 8008134:	2200      	movs	r2, #0
 8008136:	9201      	str	r2, [sp, #4]
 8008138:	9300      	str	r3, [sp, #0]
 800813a:	4603      	mov	r3, r0
 800813c:	2280      	movs	r2, #128	; 0x80
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f001 f8e0 	bl	8009304 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	7959      	ldrb	r1, [r3, #5]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008154:	687a      	ldr	r2, [r7, #4]
 8008156:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008158:	b292      	uxth	r2, r2
 800815a:	9202      	str	r2, [sp, #8]
 800815c:	2200      	movs	r2, #0
 800815e:	9201      	str	r2, [sp, #4]
 8008160:	9300      	str	r3, [sp, #0]
 8008162:	4603      	mov	r3, r0
 8008164:	2200      	movs	r2, #0
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f001 f8cc 	bl	8009304 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800816c:	e109      	b.n	8008382 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 f90c 	bl	800838c <USBH_HandleEnum>
 8008174:	4603      	mov	r3, r0
 8008176:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008178:	7bbb      	ldrb	r3, [r7, #14]
 800817a:	b2db      	uxtb	r3, r3
 800817c:	2b00      	cmp	r3, #0
 800817e:	f040 80f3 	bne.w	8008368 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2200      	movs	r2, #0
 8008186:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8008190:	2b01      	cmp	r3, #1
 8008192:	d103      	bne.n	800819c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2208      	movs	r2, #8
 8008198:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800819a:	e0e5      	b.n	8008368 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2207      	movs	r2, #7
 80081a0:	701a      	strb	r2, [r3, #0]
      break;
 80081a2:	e0e1      	b.n	8008368 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	f000 80de 	beq.w	800836c <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80081b6:	2101      	movs	r1, #1
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2208      	movs	r2, #8
 80081c0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80081c2:	e0d3      	b.n	800836c <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	4619      	mov	r1, r3
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 fc20 	bl	8008a14 <USBH_SetCfg>
 80081d4:	4603      	mov	r3, r0
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	f040 80ca 	bne.w	8008370 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2209      	movs	r2, #9
 80081e0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80081e2:	e0c5      	b.n	8008370 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80081ea:	f003 0320 	and.w	r3, r3, #32
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d00b      	beq.n	800820a <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80081f2:	2101      	movs	r1, #1
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f000 fc30 	bl	8008a5a <USBH_SetFeature>
 80081fa:	4603      	mov	r3, r0
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	f040 80b9 	bne.w	8008374 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	220a      	movs	r2, #10
 8008206:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008208:	e0b4      	b.n	8008374 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	220a      	movs	r2, #10
 800820e:	701a      	strb	r2, [r3, #0]
      break;
 8008210:	e0b0      	b.n	8008374 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008218:	2b00      	cmp	r3, #0
 800821a:	f000 80ad 	beq.w	8008378 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2200      	movs	r2, #0
 8008222:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008226:	2300      	movs	r3, #0
 8008228:	73fb      	strb	r3, [r7, #15]
 800822a:	e016      	b.n	800825a <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800822c:	7bfa      	ldrb	r2, [r7, #15]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	32de      	adds	r2, #222	; 0xde
 8008232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008236:	791a      	ldrb	r2, [r3, #4]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800823e:	429a      	cmp	r2, r3
 8008240:	d108      	bne.n	8008254 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008242:	7bfa      	ldrb	r2, [r7, #15]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	32de      	adds	r2, #222	; 0xde
 8008248:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008252:	e005      	b.n	8008260 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008254:	7bfb      	ldrb	r3, [r7, #15]
 8008256:	3301      	adds	r3, #1
 8008258:	73fb      	strb	r3, [r7, #15]
 800825a:	7bfb      	ldrb	r3, [r7, #15]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d0e5      	beq.n	800822c <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008266:	2b00      	cmp	r3, #0
 8008268:	d016      	beq.n	8008298 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008270:	689b      	ldr	r3, [r3, #8]
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	4798      	blx	r3
 8008276:	4603      	mov	r3, r0
 8008278:	2b00      	cmp	r3, #0
 800827a:	d109      	bne.n	8008290 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2206      	movs	r2, #6
 8008280:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008288:	2103      	movs	r1, #3
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800828e:	e073      	b.n	8008378 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	220d      	movs	r2, #13
 8008294:	701a      	strb	r2, [r3, #0]
      break;
 8008296:	e06f      	b.n	8008378 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	220d      	movs	r2, #13
 800829c:	701a      	strb	r2, [r3, #0]
      break;
 800829e:	e06b      	b.n	8008378 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d017      	beq.n	80082da <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80082b0:	691b      	ldr	r3, [r3, #16]
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	4798      	blx	r3
 80082b6:	4603      	mov	r3, r0
 80082b8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80082ba:	7bbb      	ldrb	r3, [r7, #14]
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d103      	bne.n	80082ca <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	220b      	movs	r2, #11
 80082c6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80082c8:	e058      	b.n	800837c <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 80082ca:	7bbb      	ldrb	r3, [r7, #14]
 80082cc:	b2db      	uxtb	r3, r3
 80082ce:	2b02      	cmp	r3, #2
 80082d0:	d154      	bne.n	800837c <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	220d      	movs	r2, #13
 80082d6:	701a      	strb	r2, [r3, #0]
      break;
 80082d8:	e050      	b.n	800837c <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	220d      	movs	r2, #13
 80082de:	701a      	strb	r2, [r3, #0]
      break;
 80082e0:	e04c      	b.n	800837c <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d049      	beq.n	8008380 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80082f2:	695b      	ldr	r3, [r3, #20]
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	4798      	blx	r3
      }
      break;
 80082f8:	e042      	b.n	8008380 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2200      	movs	r2, #0
 80082fe:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f7ff fd72 	bl	8007dec <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800830e:	2b00      	cmp	r3, #0
 8008310:	d009      	beq.n	8008326 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008318:	68db      	ldr	r3, [r3, #12]
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2200      	movs	r2, #0
 8008322:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800832c:	2b00      	cmp	r3, #0
 800832e:	d005      	beq.n	800833c <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008336:	2105      	movs	r1, #5
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008342:	b2db      	uxtb	r3, r3
 8008344:	2b01      	cmp	r3, #1
 8008346:	d107      	bne.n	8008358 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2200      	movs	r2, #0
 800834c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f7ff fe2b 	bl	8007fac <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008356:	e014      	b.n	8008382 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f004 fe29 	bl	800cfb0 <USBH_LL_Start>
      break;
 800835e:	e010      	b.n	8008382 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8008360:	bf00      	nop
 8008362:	e00e      	b.n	8008382 <USBH_Process+0x3b6>
      break;
 8008364:	bf00      	nop
 8008366:	e00c      	b.n	8008382 <USBH_Process+0x3b6>
      break;
 8008368:	bf00      	nop
 800836a:	e00a      	b.n	8008382 <USBH_Process+0x3b6>
    break;
 800836c:	bf00      	nop
 800836e:	e008      	b.n	8008382 <USBH_Process+0x3b6>
      break;
 8008370:	bf00      	nop
 8008372:	e006      	b.n	8008382 <USBH_Process+0x3b6>
      break;
 8008374:	bf00      	nop
 8008376:	e004      	b.n	8008382 <USBH_Process+0x3b6>
      break;
 8008378:	bf00      	nop
 800837a:	e002      	b.n	8008382 <USBH_Process+0x3b6>
      break;
 800837c:	bf00      	nop
 800837e:	e000      	b.n	8008382 <USBH_Process+0x3b6>
      break;
 8008380:	bf00      	nop
  }
  return USBH_OK;
 8008382:	2300      	movs	r3, #0
}
 8008384:	4618      	mov	r0, r3
 8008386:	3710      	adds	r7, #16
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}

0800838c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b088      	sub	sp, #32
 8008390:	af04      	add	r7, sp, #16
 8008392:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008394:	2301      	movs	r3, #1
 8008396:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008398:	2301      	movs	r3, #1
 800839a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	785b      	ldrb	r3, [r3, #1]
 80083a0:	2b07      	cmp	r3, #7
 80083a2:	f200 81c1 	bhi.w	8008728 <USBH_HandleEnum+0x39c>
 80083a6:	a201      	add	r2, pc, #4	; (adr r2, 80083ac <USBH_HandleEnum+0x20>)
 80083a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ac:	080083cd 	.word	0x080083cd
 80083b0:	0800848b 	.word	0x0800848b
 80083b4:	080084f5 	.word	0x080084f5
 80083b8:	08008583 	.word	0x08008583
 80083bc:	080085ed 	.word	0x080085ed
 80083c0:	0800865d 	.word	0x0800865d
 80083c4:	080086a3 	.word	0x080086a3
 80083c8:	080086e9 	.word	0x080086e9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80083cc:	2108      	movs	r1, #8
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 fa50 	bl	8008874 <USBH_Get_DevDesc>
 80083d4:	4603      	mov	r3, r0
 80083d6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80083d8:	7bbb      	ldrb	r3, [r7, #14]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d130      	bne.n	8008440 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2201      	movs	r2, #1
 80083ec:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	7919      	ldrb	r1, [r3, #4]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80083fe:	687a      	ldr	r2, [r7, #4]
 8008400:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008402:	b292      	uxth	r2, r2
 8008404:	9202      	str	r2, [sp, #8]
 8008406:	2200      	movs	r2, #0
 8008408:	9201      	str	r2, [sp, #4]
 800840a:	9300      	str	r3, [sp, #0]
 800840c:	4603      	mov	r3, r0
 800840e:	2280      	movs	r2, #128	; 0x80
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f000 ff77 	bl	8009304 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	7959      	ldrb	r1, [r3, #5]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008426:	687a      	ldr	r2, [r7, #4]
 8008428:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800842a:	b292      	uxth	r2, r2
 800842c:	9202      	str	r2, [sp, #8]
 800842e:	2200      	movs	r2, #0
 8008430:	9201      	str	r2, [sp, #4]
 8008432:	9300      	str	r3, [sp, #0]
 8008434:	4603      	mov	r3, r0
 8008436:	2200      	movs	r2, #0
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f000 ff63 	bl	8009304 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800843e:	e175      	b.n	800872c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008440:	7bbb      	ldrb	r3, [r7, #14]
 8008442:	2b03      	cmp	r3, #3
 8008444:	f040 8172 	bne.w	800872c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800844e:	3301      	adds	r3, #1
 8008450:	b2da      	uxtb	r2, r3
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800845e:	2b03      	cmp	r3, #3
 8008460:	d903      	bls.n	800846a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	220d      	movs	r2, #13
 8008466:	701a      	strb	r2, [r3, #0]
      break;
 8008468:	e160      	b.n	800872c <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	795b      	ldrb	r3, [r3, #5]
 800846e:	4619      	mov	r1, r3
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f000 ff97 	bl	80093a4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	791b      	ldrb	r3, [r3, #4]
 800847a:	4619      	mov	r1, r3
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f000 ff91 	bl	80093a4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2200      	movs	r2, #0
 8008486:	701a      	strb	r2, [r3, #0]
      break;
 8008488:	e150      	b.n	800872c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800848a:	2112      	movs	r1, #18
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 f9f1 	bl	8008874 <USBH_Get_DevDesc>
 8008492:	4603      	mov	r3, r0
 8008494:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008496:	7bbb      	ldrb	r3, [r7, #14]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d103      	bne.n	80084a4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2202      	movs	r2, #2
 80084a0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80084a2:	e145      	b.n	8008730 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80084a4:	7bbb      	ldrb	r3, [r7, #14]
 80084a6:	2b03      	cmp	r3, #3
 80084a8:	f040 8142 	bne.w	8008730 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80084b2:	3301      	adds	r3, #1
 80084b4:	b2da      	uxtb	r2, r3
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80084c2:	2b03      	cmp	r3, #3
 80084c4:	d903      	bls.n	80084ce <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	220d      	movs	r2, #13
 80084ca:	701a      	strb	r2, [r3, #0]
      break;
 80084cc:	e130      	b.n	8008730 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	795b      	ldrb	r3, [r3, #5]
 80084d2:	4619      	mov	r1, r3
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 ff65 	bl	80093a4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	791b      	ldrb	r3, [r3, #4]
 80084de:	4619      	mov	r1, r3
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f000 ff5f 	bl	80093a4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2200      	movs	r2, #0
 80084ea:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2200      	movs	r2, #0
 80084f0:	701a      	strb	r2, [r3, #0]
      break;
 80084f2:	e11d      	b.n	8008730 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80084f4:	2101      	movs	r1, #1
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 fa68 	bl	80089cc <USBH_SetAddress>
 80084fc:	4603      	mov	r3, r0
 80084fe:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008500:	7bbb      	ldrb	r3, [r7, #14]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d132      	bne.n	800856c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8008506:	2002      	movs	r0, #2
 8008508:	f004 fee6 	bl	800d2d8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2201      	movs	r2, #1
 8008510:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2203      	movs	r2, #3
 8008518:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	7919      	ldrb	r1, [r3, #4]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800852e:	b292      	uxth	r2, r2
 8008530:	9202      	str	r2, [sp, #8]
 8008532:	2200      	movs	r2, #0
 8008534:	9201      	str	r2, [sp, #4]
 8008536:	9300      	str	r3, [sp, #0]
 8008538:	4603      	mov	r3, r0
 800853a:	2280      	movs	r2, #128	; 0x80
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f000 fee1 	bl	8009304 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	7959      	ldrb	r1, [r3, #5]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008552:	687a      	ldr	r2, [r7, #4]
 8008554:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008556:	b292      	uxth	r2, r2
 8008558:	9202      	str	r2, [sp, #8]
 800855a:	2200      	movs	r2, #0
 800855c:	9201      	str	r2, [sp, #4]
 800855e:	9300      	str	r3, [sp, #0]
 8008560:	4603      	mov	r3, r0
 8008562:	2200      	movs	r2, #0
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 fecd 	bl	8009304 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800856a:	e0e3      	b.n	8008734 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800856c:	7bbb      	ldrb	r3, [r7, #14]
 800856e:	2b03      	cmp	r3, #3
 8008570:	f040 80e0 	bne.w	8008734 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	220d      	movs	r2, #13
 8008578:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2200      	movs	r2, #0
 800857e:	705a      	strb	r2, [r3, #1]
      break;
 8008580:	e0d8      	b.n	8008734 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008582:	2109      	movs	r1, #9
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 f99d 	bl	80088c4 <USBH_Get_CfgDesc>
 800858a:	4603      	mov	r3, r0
 800858c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800858e:	7bbb      	ldrb	r3, [r7, #14]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d103      	bne.n	800859c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2204      	movs	r2, #4
 8008598:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800859a:	e0cd      	b.n	8008738 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800859c:	7bbb      	ldrb	r3, [r7, #14]
 800859e:	2b03      	cmp	r3, #3
 80085a0:	f040 80ca 	bne.w	8008738 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80085aa:	3301      	adds	r3, #1
 80085ac:	b2da      	uxtb	r2, r3
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80085ba:	2b03      	cmp	r3, #3
 80085bc:	d903      	bls.n	80085c6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	220d      	movs	r2, #13
 80085c2:	701a      	strb	r2, [r3, #0]
      break;
 80085c4:	e0b8      	b.n	8008738 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	795b      	ldrb	r3, [r3, #5]
 80085ca:	4619      	mov	r1, r3
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f000 fee9 	bl	80093a4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	791b      	ldrb	r3, [r3, #4]
 80085d6:	4619      	mov	r1, r3
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f000 fee3 	bl	80093a4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2200      	movs	r2, #0
 80085e2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2200      	movs	r2, #0
 80085e8:	701a      	strb	r2, [r3, #0]
      break;
 80085ea:	e0a5      	b.n	8008738 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80085f2:	4619      	mov	r1, r3
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f000 f965 	bl	80088c4 <USBH_Get_CfgDesc>
 80085fa:	4603      	mov	r3, r0
 80085fc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80085fe:	7bbb      	ldrb	r3, [r7, #14]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d103      	bne.n	800860c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2205      	movs	r2, #5
 8008608:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800860a:	e097      	b.n	800873c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800860c:	7bbb      	ldrb	r3, [r7, #14]
 800860e:	2b03      	cmp	r3, #3
 8008610:	f040 8094 	bne.w	800873c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800861a:	3301      	adds	r3, #1
 800861c:	b2da      	uxtb	r2, r3
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800862a:	2b03      	cmp	r3, #3
 800862c:	d903      	bls.n	8008636 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	220d      	movs	r2, #13
 8008632:	701a      	strb	r2, [r3, #0]
      break;
 8008634:	e082      	b.n	800873c <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	795b      	ldrb	r3, [r3, #5]
 800863a:	4619      	mov	r1, r3
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 feb1 	bl	80093a4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	791b      	ldrb	r3, [r3, #4]
 8008646:	4619      	mov	r1, r3
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f000 feab 	bl	80093a4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2200      	movs	r2, #0
 8008652:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2200      	movs	r2, #0
 8008658:	701a      	strb	r2, [r3, #0]
      break;
 800865a:	e06f      	b.n	800873c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8008662:	2b00      	cmp	r3, #0
 8008664:	d019      	beq.n	800869a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008672:	23ff      	movs	r3, #255	; 0xff
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f000 f949 	bl	800890c <USBH_Get_StringDesc>
 800867a:	4603      	mov	r3, r0
 800867c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800867e:	7bbb      	ldrb	r3, [r7, #14]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d103      	bne.n	800868c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2206      	movs	r2, #6
 8008688:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800868a:	e059      	b.n	8008740 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800868c:	7bbb      	ldrb	r3, [r7, #14]
 800868e:	2b03      	cmp	r3, #3
 8008690:	d156      	bne.n	8008740 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2206      	movs	r2, #6
 8008696:	705a      	strb	r2, [r3, #1]
      break;
 8008698:	e052      	b.n	8008740 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2206      	movs	r2, #6
 800869e:	705a      	strb	r2, [r3, #1]
      break;
 80086a0:	e04e      	b.n	8008740 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d019      	beq.n	80086e0 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80086b8:	23ff      	movs	r3, #255	; 0xff
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f000 f926 	bl	800890c <USBH_Get_StringDesc>
 80086c0:	4603      	mov	r3, r0
 80086c2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80086c4:	7bbb      	ldrb	r3, [r7, #14]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d103      	bne.n	80086d2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2207      	movs	r2, #7
 80086ce:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80086d0:	e038      	b.n	8008744 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80086d2:	7bbb      	ldrb	r3, [r7, #14]
 80086d4:	2b03      	cmp	r3, #3
 80086d6:	d135      	bne.n	8008744 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2207      	movs	r2, #7
 80086dc:	705a      	strb	r2, [r3, #1]
      break;
 80086de:	e031      	b.n	8008744 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2207      	movs	r2, #7
 80086e4:	705a      	strb	r2, [r3, #1]
      break;
 80086e6:	e02d      	b.n	8008744 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d017      	beq.n	8008722 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80086fe:	23ff      	movs	r3, #255	; 0xff
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f000 f903 	bl	800890c <USBH_Get_StringDesc>
 8008706:	4603      	mov	r3, r0
 8008708:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800870a:	7bbb      	ldrb	r3, [r7, #14]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d102      	bne.n	8008716 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008710:	2300      	movs	r3, #0
 8008712:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008714:	e018      	b.n	8008748 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008716:	7bbb      	ldrb	r3, [r7, #14]
 8008718:	2b03      	cmp	r3, #3
 800871a:	d115      	bne.n	8008748 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800871c:	2300      	movs	r3, #0
 800871e:	73fb      	strb	r3, [r7, #15]
      break;
 8008720:	e012      	b.n	8008748 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8008722:	2300      	movs	r3, #0
 8008724:	73fb      	strb	r3, [r7, #15]
      break;
 8008726:	e00f      	b.n	8008748 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8008728:	bf00      	nop
 800872a:	e00e      	b.n	800874a <USBH_HandleEnum+0x3be>
      break;
 800872c:	bf00      	nop
 800872e:	e00c      	b.n	800874a <USBH_HandleEnum+0x3be>
      break;
 8008730:	bf00      	nop
 8008732:	e00a      	b.n	800874a <USBH_HandleEnum+0x3be>
      break;
 8008734:	bf00      	nop
 8008736:	e008      	b.n	800874a <USBH_HandleEnum+0x3be>
      break;
 8008738:	bf00      	nop
 800873a:	e006      	b.n	800874a <USBH_HandleEnum+0x3be>
      break;
 800873c:	bf00      	nop
 800873e:	e004      	b.n	800874a <USBH_HandleEnum+0x3be>
      break;
 8008740:	bf00      	nop
 8008742:	e002      	b.n	800874a <USBH_HandleEnum+0x3be>
      break;
 8008744:	bf00      	nop
 8008746:	e000      	b.n	800874a <USBH_HandleEnum+0x3be>
      break;
 8008748:	bf00      	nop
  }
  return Status;
 800874a:	7bfb      	ldrb	r3, [r7, #15]
}
 800874c:	4618      	mov	r0, r3
 800874e:	3710      	adds	r7, #16
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}

08008754 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008754:	b480      	push	{r7}
 8008756:	b083      	sub	sp, #12
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	683a      	ldr	r2, [r7, #0]
 8008762:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8008766:	bf00      	nop
 8008768:	370c      	adds	r7, #12
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr

08008772 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008772:	b580      	push	{r7, lr}
 8008774:	b082      	sub	sp, #8
 8008776:	af00      	add	r7, sp, #0
 8008778:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008780:	1c5a      	adds	r2, r3, #1
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f000 f804 	bl	8008796 <USBH_HandleSof>
}
 800878e:	bf00      	nop
 8008790:	3708      	adds	r7, #8
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}

08008796 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008796:	b580      	push	{r7, lr}
 8008798:	b082      	sub	sp, #8
 800879a:	af00      	add	r7, sp, #0
 800879c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	781b      	ldrb	r3, [r3, #0]
 80087a2:	b2db      	uxtb	r3, r3
 80087a4:	2b0b      	cmp	r3, #11
 80087a6:	d10a      	bne.n	80087be <USBH_HandleSof+0x28>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d005      	beq.n	80087be <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087b8:	699b      	ldr	r3, [r3, #24]
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	4798      	blx	r3
  }
}
 80087be:	bf00      	nop
 80087c0:	3708      	adds	r7, #8
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}

080087c6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80087c6:	b480      	push	{r7}
 80087c8:	b083      	sub	sp, #12
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2201      	movs	r2, #1
 80087d2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80087d6:	bf00      	nop
}
 80087d8:	370c      	adds	r7, #12
 80087da:	46bd      	mov	sp, r7
 80087dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e0:	4770      	bx	lr

080087e2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80087e2:	b480      	push	{r7}
 80087e4:	b083      	sub	sp, #12
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2200      	movs	r2, #0
 80087ee:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80087f2:	bf00      	nop
}
 80087f4:	370c      	adds	r7, #12
 80087f6:	46bd      	mov	sp, r7
 80087f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fc:	4770      	bx	lr

080087fe <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80087fe:	b480      	push	{r7}
 8008800:	b083      	sub	sp, #12
 8008802:	af00      	add	r7, sp, #0
 8008804:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2201      	movs	r2, #1
 800880a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2200      	movs	r2, #0
 8008812:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2200      	movs	r2, #0
 800881a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800881e:	2300      	movs	r3, #0
}
 8008820:	4618      	mov	r0, r3
 8008822:	370c      	adds	r7, #12
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr

0800882c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b082      	sub	sp, #8
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2201      	movs	r2, #1
 8008838:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2200      	movs	r2, #0
 8008840:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2200      	movs	r2, #0
 8008848:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f004 fbca 	bl	800cfe6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	791b      	ldrb	r3, [r3, #4]
 8008856:	4619      	mov	r1, r3
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 fda3 	bl	80093a4 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	795b      	ldrb	r3, [r3, #5]
 8008862:	4619      	mov	r1, r3
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f000 fd9d 	bl	80093a4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800886a:	2300      	movs	r3, #0
}
 800886c:	4618      	mov	r0, r3
 800886e:	3708      	adds	r7, #8
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b086      	sub	sp, #24
 8008878:	af02      	add	r7, sp, #8
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	460b      	mov	r3, r1
 800887e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008886:	78fb      	ldrb	r3, [r7, #3]
 8008888:	b29b      	uxth	r3, r3
 800888a:	9300      	str	r3, [sp, #0]
 800888c:	4613      	mov	r3, r2
 800888e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008892:	2100      	movs	r1, #0
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f000 f864 	bl	8008962 <USBH_GetDescriptor>
 800889a:	4603      	mov	r3, r0
 800889c:	73fb      	strb	r3, [r7, #15]
 800889e:	7bfb      	ldrb	r3, [r7, #15]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d10a      	bne.n	80088ba <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f203 3026 	addw	r0, r3, #806	; 0x326
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80088b0:	78fa      	ldrb	r2, [r7, #3]
 80088b2:	b292      	uxth	r2, r2
 80088b4:	4619      	mov	r1, r3
 80088b6:	f000 f918 	bl	8008aea <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80088ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3710      	adds	r7, #16
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}

080088c4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b086      	sub	sp, #24
 80088c8:	af02      	add	r7, sp, #8
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	460b      	mov	r3, r1
 80088ce:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	331c      	adds	r3, #28
 80088d4:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80088d6:	887b      	ldrh	r3, [r7, #2]
 80088d8:	9300      	str	r3, [sp, #0]
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80088e0:	2100      	movs	r1, #0
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f000 f83d 	bl	8008962 <USBH_GetDescriptor>
 80088e8:	4603      	mov	r3, r0
 80088ea:	72fb      	strb	r3, [r7, #11]
 80088ec:	7afb      	ldrb	r3, [r7, #11]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d107      	bne.n	8008902 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80088f8:	887a      	ldrh	r2, [r7, #2]
 80088fa:	68f9      	ldr	r1, [r7, #12]
 80088fc:	4618      	mov	r0, r3
 80088fe:	f000 f964 	bl	8008bca <USBH_ParseCfgDesc>
  }

  return status;
 8008902:	7afb      	ldrb	r3, [r7, #11]
}
 8008904:	4618      	mov	r0, r3
 8008906:	3710      	adds	r7, #16
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b088      	sub	sp, #32
 8008910:	af02      	add	r7, sp, #8
 8008912:	60f8      	str	r0, [r7, #12]
 8008914:	607a      	str	r2, [r7, #4]
 8008916:	461a      	mov	r2, r3
 8008918:	460b      	mov	r3, r1
 800891a:	72fb      	strb	r3, [r7, #11]
 800891c:	4613      	mov	r3, r2
 800891e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8008920:	7afb      	ldrb	r3, [r7, #11]
 8008922:	b29b      	uxth	r3, r3
 8008924:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008928:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008930:	893b      	ldrh	r3, [r7, #8]
 8008932:	9300      	str	r3, [sp, #0]
 8008934:	460b      	mov	r3, r1
 8008936:	2100      	movs	r1, #0
 8008938:	68f8      	ldr	r0, [r7, #12]
 800893a:	f000 f812 	bl	8008962 <USBH_GetDescriptor>
 800893e:	4603      	mov	r3, r0
 8008940:	75fb      	strb	r3, [r7, #23]
 8008942:	7dfb      	ldrb	r3, [r7, #23]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d107      	bne.n	8008958 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800894e:	893a      	ldrh	r2, [r7, #8]
 8008950:	6879      	ldr	r1, [r7, #4]
 8008952:	4618      	mov	r0, r3
 8008954:	f000 fa37 	bl	8008dc6 <USBH_ParseStringDesc>
  }

  return status;
 8008958:	7dfb      	ldrb	r3, [r7, #23]
}
 800895a:	4618      	mov	r0, r3
 800895c:	3718      	adds	r7, #24
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}

08008962 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008962:	b580      	push	{r7, lr}
 8008964:	b084      	sub	sp, #16
 8008966:	af00      	add	r7, sp, #0
 8008968:	60f8      	str	r0, [r7, #12]
 800896a:	607b      	str	r3, [r7, #4]
 800896c:	460b      	mov	r3, r1
 800896e:	72fb      	strb	r3, [r7, #11]
 8008970:	4613      	mov	r3, r2
 8008972:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	789b      	ldrb	r3, [r3, #2]
 8008978:	2b01      	cmp	r3, #1
 800897a:	d11c      	bne.n	80089b6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800897c:	7afb      	ldrb	r3, [r7, #11]
 800897e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008982:	b2da      	uxtb	r2, r3
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2206      	movs	r2, #6
 800898c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	893a      	ldrh	r2, [r7, #8]
 8008992:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008994:	893b      	ldrh	r3, [r7, #8]
 8008996:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800899a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800899e:	d104      	bne.n	80089aa <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	f240 4209 	movw	r2, #1033	; 0x409
 80089a6:	829a      	strh	r2, [r3, #20]
 80089a8:	e002      	b.n	80089b0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	2200      	movs	r2, #0
 80089ae:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	8b3a      	ldrh	r2, [r7, #24]
 80089b4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80089b6:	8b3b      	ldrh	r3, [r7, #24]
 80089b8:	461a      	mov	r2, r3
 80089ba:	6879      	ldr	r1, [r7, #4]
 80089bc:	68f8      	ldr	r0, [r7, #12]
 80089be:	f000 fa50 	bl	8008e62 <USBH_CtlReq>
 80089c2:	4603      	mov	r3, r0
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3710      	adds	r7, #16
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}

080089cc <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b082      	sub	sp, #8
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	460b      	mov	r3, r1
 80089d6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	789b      	ldrb	r3, [r3, #2]
 80089dc:	2b01      	cmp	r3, #1
 80089de:	d10f      	bne.n	8008a00 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2200      	movs	r2, #0
 80089e4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2205      	movs	r2, #5
 80089ea:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80089ec:	78fb      	ldrb	r3, [r7, #3]
 80089ee:	b29a      	uxth	r2, r3
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2200      	movs	r2, #0
 80089f8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2200      	movs	r2, #0
 80089fe:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008a00:	2200      	movs	r2, #0
 8008a02:	2100      	movs	r1, #0
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 fa2c 	bl	8008e62 <USBH_CtlReq>
 8008a0a:	4603      	mov	r3, r0
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3708      	adds	r7, #8
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b082      	sub	sp, #8
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	460b      	mov	r3, r1
 8008a1e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	789b      	ldrb	r3, [r3, #2]
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	d10e      	bne.n	8008a46 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2209      	movs	r2, #9
 8008a32:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	887a      	ldrh	r2, [r7, #2]
 8008a38:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2200      	movs	r2, #0
 8008a44:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008a46:	2200      	movs	r2, #0
 8008a48:	2100      	movs	r1, #0
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f000 fa09 	bl	8008e62 <USBH_CtlReq>
 8008a50:	4603      	mov	r3, r0
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3708      	adds	r7, #8
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}

08008a5a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008a5a:	b580      	push	{r7, lr}
 8008a5c:	b082      	sub	sp, #8
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	6078      	str	r0, [r7, #4]
 8008a62:	460b      	mov	r3, r1
 8008a64:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	789b      	ldrb	r3, [r3, #2]
 8008a6a:	2b01      	cmp	r3, #1
 8008a6c:	d10f      	bne.n	8008a8e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2200      	movs	r2, #0
 8008a72:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2203      	movs	r2, #3
 8008a78:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008a7a:	78fb      	ldrb	r3, [r7, #3]
 8008a7c:	b29a      	uxth	r2, r3
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2200      	movs	r2, #0
 8008a86:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008a8e:	2200      	movs	r2, #0
 8008a90:	2100      	movs	r1, #0
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f000 f9e5 	bl	8008e62 <USBH_CtlReq>
 8008a98:	4603      	mov	r3, r0
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3708      	adds	r7, #8
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}

08008aa2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008aa2:	b580      	push	{r7, lr}
 8008aa4:	b082      	sub	sp, #8
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	6078      	str	r0, [r7, #4]
 8008aaa:	460b      	mov	r3, r1
 8008aac:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	789b      	ldrb	r3, [r3, #2]
 8008ab2:	2b01      	cmp	r3, #1
 8008ab4:	d10f      	bne.n	8008ad6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2202      	movs	r2, #2
 8008aba:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2201      	movs	r2, #1
 8008ac0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008ac8:	78fb      	ldrb	r3, [r7, #3]
 8008aca:	b29a      	uxth	r2, r3
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	2100      	movs	r1, #0
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 f9c1 	bl	8008e62 <USBH_CtlReq>
 8008ae0:	4603      	mov	r3, r0
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3708      	adds	r7, #8
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}

08008aea <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008aea:	b480      	push	{r7}
 8008aec:	b085      	sub	sp, #20
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	60f8      	str	r0, [r7, #12]
 8008af2:	60b9      	str	r1, [r7, #8]
 8008af4:	4613      	mov	r3, r2
 8008af6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	781a      	ldrb	r2, [r3, #0]
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	785a      	ldrb	r2, [r3, #1]
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	3302      	adds	r3, #2
 8008b0c:	781b      	ldrb	r3, [r3, #0]
 8008b0e:	b29a      	uxth	r2, r3
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	3303      	adds	r3, #3
 8008b14:	781b      	ldrb	r3, [r3, #0]
 8008b16:	b29b      	uxth	r3, r3
 8008b18:	021b      	lsls	r3, r3, #8
 8008b1a:	b29b      	uxth	r3, r3
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	b29a      	uxth	r2, r3
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	791a      	ldrb	r2, [r3, #4]
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	795a      	ldrb	r2, [r3, #5]
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	799a      	ldrb	r2, [r3, #6]
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	79da      	ldrb	r2, [r3, #7]
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8008b44:	88fb      	ldrh	r3, [r7, #6]
 8008b46:	2b08      	cmp	r3, #8
 8008b48:	d939      	bls.n	8008bbe <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	3308      	adds	r3, #8
 8008b4e:	781b      	ldrb	r3, [r3, #0]
 8008b50:	b29a      	uxth	r2, r3
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	3309      	adds	r3, #9
 8008b56:	781b      	ldrb	r3, [r3, #0]
 8008b58:	b29b      	uxth	r3, r3
 8008b5a:	021b      	lsls	r3, r3, #8
 8008b5c:	b29b      	uxth	r3, r3
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	b29a      	uxth	r2, r3
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	330a      	adds	r3, #10
 8008b6a:	781b      	ldrb	r3, [r3, #0]
 8008b6c:	b29a      	uxth	r2, r3
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	330b      	adds	r3, #11
 8008b72:	781b      	ldrb	r3, [r3, #0]
 8008b74:	b29b      	uxth	r3, r3
 8008b76:	021b      	lsls	r3, r3, #8
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	b29a      	uxth	r2, r3
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	330c      	adds	r3, #12
 8008b86:	781b      	ldrb	r3, [r3, #0]
 8008b88:	b29a      	uxth	r2, r3
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	330d      	adds	r3, #13
 8008b8e:	781b      	ldrb	r3, [r3, #0]
 8008b90:	b29b      	uxth	r3, r3
 8008b92:	021b      	lsls	r3, r3, #8
 8008b94:	b29b      	uxth	r3, r3
 8008b96:	4313      	orrs	r3, r2
 8008b98:	b29a      	uxth	r2, r3
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	7b9a      	ldrb	r2, [r3, #14]
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	7bda      	ldrb	r2, [r3, #15]
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	7c1a      	ldrb	r2, [r3, #16]
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	7c5a      	ldrb	r2, [r3, #17]
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	745a      	strb	r2, [r3, #17]
  }
}
 8008bbe:	bf00      	nop
 8008bc0:	3714      	adds	r7, #20
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc8:	4770      	bx	lr

08008bca <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8008bca:	b580      	push	{r7, lr}
 8008bcc:	b08a      	sub	sp, #40	; 0x28
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	60f8      	str	r0, [r7, #12]
 8008bd2:	60b9      	str	r1, [r7, #8]
 8008bd4:	4613      	mov	r3, r2
 8008bd6:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8008be2:	2300      	movs	r3, #0
 8008be4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	781a      	ldrb	r2, [r3, #0]
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	785a      	ldrb	r2, [r3, #1]
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	3302      	adds	r3, #2
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	b29a      	uxth	r2, r3
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	3303      	adds	r3, #3
 8008c08:	781b      	ldrb	r3, [r3, #0]
 8008c0a:	b29b      	uxth	r3, r3
 8008c0c:	021b      	lsls	r3, r3, #8
 8008c0e:	b29b      	uxth	r3, r3
 8008c10:	4313      	orrs	r3, r2
 8008c12:	b29a      	uxth	r2, r3
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	791a      	ldrb	r2, [r3, #4]
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	795a      	ldrb	r2, [r3, #5]
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	799a      	ldrb	r2, [r3, #6]
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	79da      	ldrb	r2, [r3, #7]
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	7a1a      	ldrb	r2, [r3, #8]
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008c40:	88fb      	ldrh	r3, [r7, #6]
 8008c42:	2b09      	cmp	r3, #9
 8008c44:	d95f      	bls.n	8008d06 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8008c46:	2309      	movs	r3, #9
 8008c48:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008c4e:	e051      	b.n	8008cf4 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008c50:	f107 0316 	add.w	r3, r7, #22
 8008c54:	4619      	mov	r1, r3
 8008c56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008c58:	f000 f8e8 	bl	8008e2c <USBH_GetNextDesc>
 8008c5c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8008c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c60:	785b      	ldrb	r3, [r3, #1]
 8008c62:	2b04      	cmp	r3, #4
 8008c64:	d146      	bne.n	8008cf4 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8008c66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008c6a:	221a      	movs	r2, #26
 8008c6c:	fb02 f303 	mul.w	r3, r2, r3
 8008c70:	3308      	adds	r3, #8
 8008c72:	68fa      	ldr	r2, [r7, #12]
 8008c74:	4413      	add	r3, r2
 8008c76:	3302      	adds	r3, #2
 8008c78:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008c7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008c7c:	69f8      	ldr	r0, [r7, #28]
 8008c7e:	f000 f846 	bl	8008d0e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008c82:	2300      	movs	r3, #0
 8008c84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008c8c:	e022      	b.n	8008cd4 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008c8e:	f107 0316 	add.w	r3, r7, #22
 8008c92:	4619      	mov	r1, r3
 8008c94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008c96:	f000 f8c9 	bl	8008e2c <USBH_GetNextDesc>
 8008c9a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8008c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c9e:	785b      	ldrb	r3, [r3, #1]
 8008ca0:	2b05      	cmp	r3, #5
 8008ca2:	d117      	bne.n	8008cd4 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008ca4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008ca8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008cac:	3201      	adds	r2, #1
 8008cae:	00d2      	lsls	r2, r2, #3
 8008cb0:	211a      	movs	r1, #26
 8008cb2:	fb01 f303 	mul.w	r3, r1, r3
 8008cb6:	4413      	add	r3, r2
 8008cb8:	3308      	adds	r3, #8
 8008cba:	68fa      	ldr	r2, [r7, #12]
 8008cbc:	4413      	add	r3, r2
 8008cbe:	3304      	adds	r3, #4
 8008cc0:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8008cc2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008cc4:	69b8      	ldr	r0, [r7, #24]
 8008cc6:	f000 f851 	bl	8008d6c <USBH_ParseEPDesc>
            ep_ix++;
 8008cca:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008cce:	3301      	adds	r3, #1
 8008cd0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008cd4:	69fb      	ldr	r3, [r7, #28]
 8008cd6:	791b      	ldrb	r3, [r3, #4]
 8008cd8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d204      	bcs.n	8008cea <USBH_ParseCfgDesc+0x120>
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	885a      	ldrh	r2, [r3, #2]
 8008ce4:	8afb      	ldrh	r3, [r7, #22]
 8008ce6:	429a      	cmp	r2, r3
 8008ce8:	d8d1      	bhi.n	8008c8e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8008cea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008cee:	3301      	adds	r3, #1
 8008cf0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008cf4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	d804      	bhi.n	8008d06 <USBH_ParseCfgDesc+0x13c>
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	885a      	ldrh	r2, [r3, #2]
 8008d00:	8afb      	ldrh	r3, [r7, #22]
 8008d02:	429a      	cmp	r2, r3
 8008d04:	d8a4      	bhi.n	8008c50 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8008d06:	bf00      	nop
 8008d08:	3728      	adds	r7, #40	; 0x28
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}

08008d0e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008d0e:	b480      	push	{r7}
 8008d10:	b083      	sub	sp, #12
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
 8008d16:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	781a      	ldrb	r2, [r3, #0]
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	785a      	ldrb	r2, [r3, #1]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	789a      	ldrb	r2, [r3, #2]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	78da      	ldrb	r2, [r3, #3]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	791a      	ldrb	r2, [r3, #4]
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	795a      	ldrb	r2, [r3, #5]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	799a      	ldrb	r2, [r3, #6]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	79da      	ldrb	r2, [r3, #7]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	7a1a      	ldrb	r2, [r3, #8]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	721a      	strb	r2, [r3, #8]
}
 8008d60:	bf00      	nop
 8008d62:	370c      	adds	r7, #12
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr

08008d6c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b083      	sub	sp, #12
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	781a      	ldrb	r2, [r3, #0]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	785a      	ldrb	r2, [r3, #1]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	789a      	ldrb	r2, [r3, #2]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	78da      	ldrb	r2, [r3, #3]
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	3304      	adds	r3, #4
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	b29a      	uxth	r2, r3
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	3305      	adds	r3, #5
 8008da2:	781b      	ldrb	r3, [r3, #0]
 8008da4:	b29b      	uxth	r3, r3
 8008da6:	021b      	lsls	r3, r3, #8
 8008da8:	b29b      	uxth	r3, r3
 8008daa:	4313      	orrs	r3, r2
 8008dac:	b29a      	uxth	r2, r3
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	799a      	ldrb	r2, [r3, #6]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	719a      	strb	r2, [r3, #6]
}
 8008dba:	bf00      	nop
 8008dbc:	370c      	adds	r7, #12
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc4:	4770      	bx	lr

08008dc6 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008dc6:	b480      	push	{r7}
 8008dc8:	b087      	sub	sp, #28
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	60f8      	str	r0, [r7, #12]
 8008dce:	60b9      	str	r1, [r7, #8]
 8008dd0:	4613      	mov	r3, r2
 8008dd2:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	3301      	adds	r3, #1
 8008dd8:	781b      	ldrb	r3, [r3, #0]
 8008dda:	2b03      	cmp	r3, #3
 8008ddc:	d120      	bne.n	8008e20 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	781b      	ldrb	r3, [r3, #0]
 8008de2:	1e9a      	subs	r2, r3, #2
 8008de4:	88fb      	ldrh	r3, [r7, #6]
 8008de6:	4293      	cmp	r3, r2
 8008de8:	bf28      	it	cs
 8008dea:	4613      	movcs	r3, r2
 8008dec:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	3302      	adds	r3, #2
 8008df2:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008df4:	2300      	movs	r3, #0
 8008df6:	82fb      	strh	r3, [r7, #22]
 8008df8:	e00b      	b.n	8008e12 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008dfa:	8afb      	ldrh	r3, [r7, #22]
 8008dfc:	68fa      	ldr	r2, [r7, #12]
 8008dfe:	4413      	add	r3, r2
 8008e00:	781a      	ldrb	r2, [r3, #0]
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	3301      	adds	r3, #1
 8008e0a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008e0c:	8afb      	ldrh	r3, [r7, #22]
 8008e0e:	3302      	adds	r3, #2
 8008e10:	82fb      	strh	r3, [r7, #22]
 8008e12:	8afa      	ldrh	r2, [r7, #22]
 8008e14:	8abb      	ldrh	r3, [r7, #20]
 8008e16:	429a      	cmp	r2, r3
 8008e18:	d3ef      	bcc.n	8008dfa <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	701a      	strb	r2, [r3, #0]
  }
}
 8008e20:	bf00      	nop
 8008e22:	371c      	adds	r7, #28
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr

08008e2c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b085      	sub	sp, #20
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	881a      	ldrh	r2, [r3, #0]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	781b      	ldrb	r3, [r3, #0]
 8008e3e:	b29b      	uxth	r3, r3
 8008e40:	4413      	add	r3, r2
 8008e42:	b29a      	uxth	r2, r3
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	781b      	ldrb	r3, [r3, #0]
 8008e4c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	4413      	add	r3, r2
 8008e52:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008e54:	68fb      	ldr	r3, [r7, #12]
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3714      	adds	r7, #20
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e60:	4770      	bx	lr

08008e62 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008e62:	b580      	push	{r7, lr}
 8008e64:	b086      	sub	sp, #24
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	60f8      	str	r0, [r7, #12]
 8008e6a:	60b9      	str	r1, [r7, #8]
 8008e6c:	4613      	mov	r3, r2
 8008e6e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008e70:	2301      	movs	r3, #1
 8008e72:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	789b      	ldrb	r3, [r3, #2]
 8008e78:	2b01      	cmp	r3, #1
 8008e7a:	d002      	beq.n	8008e82 <USBH_CtlReq+0x20>
 8008e7c:	2b02      	cmp	r3, #2
 8008e7e:	d00f      	beq.n	8008ea0 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008e80:	e027      	b.n	8008ed2 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	68ba      	ldr	r2, [r7, #8]
 8008e86:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	88fa      	ldrh	r2, [r7, #6]
 8008e8c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2201      	movs	r2, #1
 8008e92:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	2202      	movs	r2, #2
 8008e98:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	75fb      	strb	r3, [r7, #23]
      break;
 8008e9e:	e018      	b.n	8008ed2 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008ea0:	68f8      	ldr	r0, [r7, #12]
 8008ea2:	f000 f81b 	bl	8008edc <USBH_HandleControl>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008eaa:	7dfb      	ldrb	r3, [r7, #23]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d002      	beq.n	8008eb6 <USBH_CtlReq+0x54>
 8008eb0:	7dfb      	ldrb	r3, [r7, #23]
 8008eb2:	2b03      	cmp	r3, #3
 8008eb4:	d106      	bne.n	8008ec4 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	2201      	movs	r2, #1
 8008eba:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	761a      	strb	r2, [r3, #24]
      break;
 8008ec2:	e005      	b.n	8008ed0 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008ec4:	7dfb      	ldrb	r3, [r7, #23]
 8008ec6:	2b02      	cmp	r3, #2
 8008ec8:	d102      	bne.n	8008ed0 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	2201      	movs	r2, #1
 8008ece:	709a      	strb	r2, [r3, #2]
      break;
 8008ed0:	bf00      	nop
  }
  return status;
 8008ed2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3718      	adds	r7, #24
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}

08008edc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b086      	sub	sp, #24
 8008ee0:	af02      	add	r7, sp, #8
 8008ee2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	7e1b      	ldrb	r3, [r3, #24]
 8008ef0:	3b01      	subs	r3, #1
 8008ef2:	2b0a      	cmp	r3, #10
 8008ef4:	f200 8156 	bhi.w	80091a4 <USBH_HandleControl+0x2c8>
 8008ef8:	a201      	add	r2, pc, #4	; (adr r2, 8008f00 <USBH_HandleControl+0x24>)
 8008efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008efe:	bf00      	nop
 8008f00:	08008f2d 	.word	0x08008f2d
 8008f04:	08008f47 	.word	0x08008f47
 8008f08:	08008fb1 	.word	0x08008fb1
 8008f0c:	08008fd7 	.word	0x08008fd7
 8008f10:	0800900f 	.word	0x0800900f
 8008f14:	08009039 	.word	0x08009039
 8008f18:	0800908b 	.word	0x0800908b
 8008f1c:	080090ad 	.word	0x080090ad
 8008f20:	080090e9 	.word	0x080090e9
 8008f24:	0800910f 	.word	0x0800910f
 8008f28:	0800914d 	.word	0x0800914d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f103 0110 	add.w	r1, r3, #16
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	795b      	ldrb	r3, [r3, #5]
 8008f36:	461a      	mov	r2, r3
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f000 f943 	bl	80091c4 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2202      	movs	r2, #2
 8008f42:	761a      	strb	r2, [r3, #24]
      break;
 8008f44:	e139      	b.n	80091ba <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	795b      	ldrb	r3, [r3, #5]
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f004 f939 	bl	800d1c4 <USBH_LL_GetURBState>
 8008f52:	4603      	mov	r3, r0
 8008f54:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008f56:	7bbb      	ldrb	r3, [r7, #14]
 8008f58:	2b01      	cmp	r3, #1
 8008f5a:	d11e      	bne.n	8008f9a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	7c1b      	ldrb	r3, [r3, #16]
 8008f60:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008f64:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	8adb      	ldrh	r3, [r3, #22]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d00a      	beq.n	8008f84 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008f6e:	7b7b      	ldrb	r3, [r7, #13]
 8008f70:	2b80      	cmp	r3, #128	; 0x80
 8008f72:	d103      	bne.n	8008f7c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2203      	movs	r2, #3
 8008f78:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008f7a:	e115      	b.n	80091a8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2205      	movs	r2, #5
 8008f80:	761a      	strb	r2, [r3, #24]
      break;
 8008f82:	e111      	b.n	80091a8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008f84:	7b7b      	ldrb	r3, [r7, #13]
 8008f86:	2b80      	cmp	r3, #128	; 0x80
 8008f88:	d103      	bne.n	8008f92 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2209      	movs	r2, #9
 8008f8e:	761a      	strb	r2, [r3, #24]
      break;
 8008f90:	e10a      	b.n	80091a8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2207      	movs	r2, #7
 8008f96:	761a      	strb	r2, [r3, #24]
      break;
 8008f98:	e106      	b.n	80091a8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008f9a:	7bbb      	ldrb	r3, [r7, #14]
 8008f9c:	2b04      	cmp	r3, #4
 8008f9e:	d003      	beq.n	8008fa8 <USBH_HandleControl+0xcc>
 8008fa0:	7bbb      	ldrb	r3, [r7, #14]
 8008fa2:	2b02      	cmp	r3, #2
 8008fa4:	f040 8100 	bne.w	80091a8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	220b      	movs	r2, #11
 8008fac:	761a      	strb	r2, [r3, #24]
      break;
 8008fae:	e0fb      	b.n	80091a8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008fb6:	b29a      	uxth	r2, r3
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6899      	ldr	r1, [r3, #8]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	899a      	ldrh	r2, [r3, #12]
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	791b      	ldrb	r3, [r3, #4]
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f000 f93a 	bl	8009242 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2204      	movs	r2, #4
 8008fd2:	761a      	strb	r2, [r3, #24]
      break;
 8008fd4:	e0f1      	b.n	80091ba <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	791b      	ldrb	r3, [r3, #4]
 8008fda:	4619      	mov	r1, r3
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f004 f8f1 	bl	800d1c4 <USBH_LL_GetURBState>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008fe6:	7bbb      	ldrb	r3, [r7, #14]
 8008fe8:	2b01      	cmp	r3, #1
 8008fea:	d102      	bne.n	8008ff2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2209      	movs	r2, #9
 8008ff0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008ff2:	7bbb      	ldrb	r3, [r7, #14]
 8008ff4:	2b05      	cmp	r3, #5
 8008ff6:	d102      	bne.n	8008ffe <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008ff8:	2303      	movs	r3, #3
 8008ffa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008ffc:	e0d6      	b.n	80091ac <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008ffe:	7bbb      	ldrb	r3, [r7, #14]
 8009000:	2b04      	cmp	r3, #4
 8009002:	f040 80d3 	bne.w	80091ac <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	220b      	movs	r2, #11
 800900a:	761a      	strb	r2, [r3, #24]
      break;
 800900c:	e0ce      	b.n	80091ac <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6899      	ldr	r1, [r3, #8]
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	899a      	ldrh	r2, [r3, #12]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	795b      	ldrb	r3, [r3, #5]
 800901a:	2001      	movs	r0, #1
 800901c:	9000      	str	r0, [sp, #0]
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 f8ea 	bl	80091f8 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800902a:	b29a      	uxth	r2, r3
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2206      	movs	r2, #6
 8009034:	761a      	strb	r2, [r3, #24]
      break;
 8009036:	e0c0      	b.n	80091ba <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	795b      	ldrb	r3, [r3, #5]
 800903c:	4619      	mov	r1, r3
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f004 f8c0 	bl	800d1c4 <USBH_LL_GetURBState>
 8009044:	4603      	mov	r3, r0
 8009046:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009048:	7bbb      	ldrb	r3, [r7, #14]
 800904a:	2b01      	cmp	r3, #1
 800904c:	d103      	bne.n	8009056 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2207      	movs	r2, #7
 8009052:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009054:	e0ac      	b.n	80091b0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009056:	7bbb      	ldrb	r3, [r7, #14]
 8009058:	2b05      	cmp	r3, #5
 800905a:	d105      	bne.n	8009068 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	220c      	movs	r2, #12
 8009060:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009062:	2303      	movs	r3, #3
 8009064:	73fb      	strb	r3, [r7, #15]
      break;
 8009066:	e0a3      	b.n	80091b0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009068:	7bbb      	ldrb	r3, [r7, #14]
 800906a:	2b02      	cmp	r3, #2
 800906c:	d103      	bne.n	8009076 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2205      	movs	r2, #5
 8009072:	761a      	strb	r2, [r3, #24]
      break;
 8009074:	e09c      	b.n	80091b0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009076:	7bbb      	ldrb	r3, [r7, #14]
 8009078:	2b04      	cmp	r3, #4
 800907a:	f040 8099 	bne.w	80091b0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	220b      	movs	r2, #11
 8009082:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009084:	2302      	movs	r3, #2
 8009086:	73fb      	strb	r3, [r7, #15]
      break;
 8009088:	e092      	b.n	80091b0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	791b      	ldrb	r3, [r3, #4]
 800908e:	2200      	movs	r2, #0
 8009090:	2100      	movs	r1, #0
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f000 f8d5 	bl	8009242 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800909e:	b29a      	uxth	r2, r3
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2208      	movs	r2, #8
 80090a8:	761a      	strb	r2, [r3, #24]

      break;
 80090aa:	e086      	b.n	80091ba <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	791b      	ldrb	r3, [r3, #4]
 80090b0:	4619      	mov	r1, r3
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f004 f886 	bl	800d1c4 <USBH_LL_GetURBState>
 80090b8:	4603      	mov	r3, r0
 80090ba:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80090bc:	7bbb      	ldrb	r3, [r7, #14]
 80090be:	2b01      	cmp	r3, #1
 80090c0:	d105      	bne.n	80090ce <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	220d      	movs	r2, #13
 80090c6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80090c8:	2300      	movs	r3, #0
 80090ca:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80090cc:	e072      	b.n	80091b4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80090ce:	7bbb      	ldrb	r3, [r7, #14]
 80090d0:	2b04      	cmp	r3, #4
 80090d2:	d103      	bne.n	80090dc <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	220b      	movs	r2, #11
 80090d8:	761a      	strb	r2, [r3, #24]
      break;
 80090da:	e06b      	b.n	80091b4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80090dc:	7bbb      	ldrb	r3, [r7, #14]
 80090de:	2b05      	cmp	r3, #5
 80090e0:	d168      	bne.n	80091b4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80090e2:	2303      	movs	r3, #3
 80090e4:	73fb      	strb	r3, [r7, #15]
      break;
 80090e6:	e065      	b.n	80091b4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	795b      	ldrb	r3, [r3, #5]
 80090ec:	2201      	movs	r2, #1
 80090ee:	9200      	str	r2, [sp, #0]
 80090f0:	2200      	movs	r2, #0
 80090f2:	2100      	movs	r1, #0
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 f87f 	bl	80091f8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009100:	b29a      	uxth	r2, r3
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	220a      	movs	r2, #10
 800910a:	761a      	strb	r2, [r3, #24]
      break;
 800910c:	e055      	b.n	80091ba <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	795b      	ldrb	r3, [r3, #5]
 8009112:	4619      	mov	r1, r3
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f004 f855 	bl	800d1c4 <USBH_LL_GetURBState>
 800911a:	4603      	mov	r3, r0
 800911c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800911e:	7bbb      	ldrb	r3, [r7, #14]
 8009120:	2b01      	cmp	r3, #1
 8009122:	d105      	bne.n	8009130 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009124:	2300      	movs	r3, #0
 8009126:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	220d      	movs	r2, #13
 800912c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800912e:	e043      	b.n	80091b8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009130:	7bbb      	ldrb	r3, [r7, #14]
 8009132:	2b02      	cmp	r3, #2
 8009134:	d103      	bne.n	800913e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2209      	movs	r2, #9
 800913a:	761a      	strb	r2, [r3, #24]
      break;
 800913c:	e03c      	b.n	80091b8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800913e:	7bbb      	ldrb	r3, [r7, #14]
 8009140:	2b04      	cmp	r3, #4
 8009142:	d139      	bne.n	80091b8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	220b      	movs	r2, #11
 8009148:	761a      	strb	r2, [r3, #24]
      break;
 800914a:	e035      	b.n	80091b8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	7e5b      	ldrb	r3, [r3, #25]
 8009150:	3301      	adds	r3, #1
 8009152:	b2da      	uxtb	r2, r3
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	765a      	strb	r2, [r3, #25]
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	7e5b      	ldrb	r3, [r3, #25]
 800915c:	2b02      	cmp	r3, #2
 800915e:	d806      	bhi.n	800916e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2201      	movs	r2, #1
 8009164:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2201      	movs	r2, #1
 800916a:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800916c:	e025      	b.n	80091ba <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009174:	2106      	movs	r1, #6
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2200      	movs	r2, #0
 800917e:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	795b      	ldrb	r3, [r3, #5]
 8009184:	4619      	mov	r1, r3
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 f90c 	bl	80093a4 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	791b      	ldrb	r3, [r3, #4]
 8009190:	4619      	mov	r1, r3
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f000 f906 	bl	80093a4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2200      	movs	r2, #0
 800919c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800919e:	2302      	movs	r3, #2
 80091a0:	73fb      	strb	r3, [r7, #15]
      break;
 80091a2:	e00a      	b.n	80091ba <USBH_HandleControl+0x2de>

    default:
      break;
 80091a4:	bf00      	nop
 80091a6:	e008      	b.n	80091ba <USBH_HandleControl+0x2de>
      break;
 80091a8:	bf00      	nop
 80091aa:	e006      	b.n	80091ba <USBH_HandleControl+0x2de>
      break;
 80091ac:	bf00      	nop
 80091ae:	e004      	b.n	80091ba <USBH_HandleControl+0x2de>
      break;
 80091b0:	bf00      	nop
 80091b2:	e002      	b.n	80091ba <USBH_HandleControl+0x2de>
      break;
 80091b4:	bf00      	nop
 80091b6:	e000      	b.n	80091ba <USBH_HandleControl+0x2de>
      break;
 80091b8:	bf00      	nop
  }

  return status;
 80091ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3710      	adds	r7, #16
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}

080091c4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b088      	sub	sp, #32
 80091c8:	af04      	add	r7, sp, #16
 80091ca:	60f8      	str	r0, [r7, #12]
 80091cc:	60b9      	str	r1, [r7, #8]
 80091ce:	4613      	mov	r3, r2
 80091d0:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80091d2:	79f9      	ldrb	r1, [r7, #7]
 80091d4:	2300      	movs	r3, #0
 80091d6:	9303      	str	r3, [sp, #12]
 80091d8:	2308      	movs	r3, #8
 80091da:	9302      	str	r3, [sp, #8]
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	9301      	str	r3, [sp, #4]
 80091e0:	2300      	movs	r3, #0
 80091e2:	9300      	str	r3, [sp, #0]
 80091e4:	2300      	movs	r3, #0
 80091e6:	2200      	movs	r2, #0
 80091e8:	68f8      	ldr	r0, [r7, #12]
 80091ea:	f003 ffba 	bl	800d162 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80091ee:	2300      	movs	r3, #0
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3710      	adds	r7, #16
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}

080091f8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b088      	sub	sp, #32
 80091fc:	af04      	add	r7, sp, #16
 80091fe:	60f8      	str	r0, [r7, #12]
 8009200:	60b9      	str	r1, [r7, #8]
 8009202:	4611      	mov	r1, r2
 8009204:	461a      	mov	r2, r3
 8009206:	460b      	mov	r3, r1
 8009208:	80fb      	strh	r3, [r7, #6]
 800920a:	4613      	mov	r3, r2
 800920c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009214:	2b00      	cmp	r3, #0
 8009216:	d001      	beq.n	800921c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009218:	2300      	movs	r3, #0
 800921a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800921c:	7979      	ldrb	r1, [r7, #5]
 800921e:	7e3b      	ldrb	r3, [r7, #24]
 8009220:	9303      	str	r3, [sp, #12]
 8009222:	88fb      	ldrh	r3, [r7, #6]
 8009224:	9302      	str	r3, [sp, #8]
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	9301      	str	r3, [sp, #4]
 800922a:	2301      	movs	r3, #1
 800922c:	9300      	str	r3, [sp, #0]
 800922e:	2300      	movs	r3, #0
 8009230:	2200      	movs	r2, #0
 8009232:	68f8      	ldr	r0, [r7, #12]
 8009234:	f003 ff95 	bl	800d162 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009238:	2300      	movs	r3, #0
}
 800923a:	4618      	mov	r0, r3
 800923c:	3710      	adds	r7, #16
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}

08009242 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009242:	b580      	push	{r7, lr}
 8009244:	b088      	sub	sp, #32
 8009246:	af04      	add	r7, sp, #16
 8009248:	60f8      	str	r0, [r7, #12]
 800924a:	60b9      	str	r1, [r7, #8]
 800924c:	4611      	mov	r1, r2
 800924e:	461a      	mov	r2, r3
 8009250:	460b      	mov	r3, r1
 8009252:	80fb      	strh	r3, [r7, #6]
 8009254:	4613      	mov	r3, r2
 8009256:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009258:	7979      	ldrb	r1, [r7, #5]
 800925a:	2300      	movs	r3, #0
 800925c:	9303      	str	r3, [sp, #12]
 800925e:	88fb      	ldrh	r3, [r7, #6]
 8009260:	9302      	str	r3, [sp, #8]
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	9301      	str	r3, [sp, #4]
 8009266:	2301      	movs	r3, #1
 8009268:	9300      	str	r3, [sp, #0]
 800926a:	2300      	movs	r3, #0
 800926c:	2201      	movs	r2, #1
 800926e:	68f8      	ldr	r0, [r7, #12]
 8009270:	f003 ff77 	bl	800d162 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8009274:	2300      	movs	r3, #0

}
 8009276:	4618      	mov	r0, r3
 8009278:	3710      	adds	r7, #16
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}

0800927e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800927e:	b580      	push	{r7, lr}
 8009280:	b088      	sub	sp, #32
 8009282:	af04      	add	r7, sp, #16
 8009284:	60f8      	str	r0, [r7, #12]
 8009286:	60b9      	str	r1, [r7, #8]
 8009288:	4611      	mov	r1, r2
 800928a:	461a      	mov	r2, r3
 800928c:	460b      	mov	r3, r1
 800928e:	80fb      	strh	r3, [r7, #6]
 8009290:	4613      	mov	r3, r2
 8009292:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800929a:	2b00      	cmp	r3, #0
 800929c:	d001      	beq.n	80092a2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800929e:	2300      	movs	r3, #0
 80092a0:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80092a2:	7979      	ldrb	r1, [r7, #5]
 80092a4:	7e3b      	ldrb	r3, [r7, #24]
 80092a6:	9303      	str	r3, [sp, #12]
 80092a8:	88fb      	ldrh	r3, [r7, #6]
 80092aa:	9302      	str	r3, [sp, #8]
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	9301      	str	r3, [sp, #4]
 80092b0:	2301      	movs	r3, #1
 80092b2:	9300      	str	r3, [sp, #0]
 80092b4:	2302      	movs	r3, #2
 80092b6:	2200      	movs	r2, #0
 80092b8:	68f8      	ldr	r0, [r7, #12]
 80092ba:	f003 ff52 	bl	800d162 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80092be:	2300      	movs	r3, #0
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3710      	adds	r7, #16
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}

080092c8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b088      	sub	sp, #32
 80092cc:	af04      	add	r7, sp, #16
 80092ce:	60f8      	str	r0, [r7, #12]
 80092d0:	60b9      	str	r1, [r7, #8]
 80092d2:	4611      	mov	r1, r2
 80092d4:	461a      	mov	r2, r3
 80092d6:	460b      	mov	r3, r1
 80092d8:	80fb      	strh	r3, [r7, #6]
 80092da:	4613      	mov	r3, r2
 80092dc:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80092de:	7979      	ldrb	r1, [r7, #5]
 80092e0:	2300      	movs	r3, #0
 80092e2:	9303      	str	r3, [sp, #12]
 80092e4:	88fb      	ldrh	r3, [r7, #6]
 80092e6:	9302      	str	r3, [sp, #8]
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	9301      	str	r3, [sp, #4]
 80092ec:	2301      	movs	r3, #1
 80092ee:	9300      	str	r3, [sp, #0]
 80092f0:	2302      	movs	r3, #2
 80092f2:	2201      	movs	r2, #1
 80092f4:	68f8      	ldr	r0, [r7, #12]
 80092f6:	f003 ff34 	bl	800d162 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80092fa:	2300      	movs	r3, #0
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3710      	adds	r7, #16
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}

08009304 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b086      	sub	sp, #24
 8009308:	af04      	add	r7, sp, #16
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	4608      	mov	r0, r1
 800930e:	4611      	mov	r1, r2
 8009310:	461a      	mov	r2, r3
 8009312:	4603      	mov	r3, r0
 8009314:	70fb      	strb	r3, [r7, #3]
 8009316:	460b      	mov	r3, r1
 8009318:	70bb      	strb	r3, [r7, #2]
 800931a:	4613      	mov	r3, r2
 800931c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800931e:	7878      	ldrb	r0, [r7, #1]
 8009320:	78ba      	ldrb	r2, [r7, #2]
 8009322:	78f9      	ldrb	r1, [r7, #3]
 8009324:	8b3b      	ldrh	r3, [r7, #24]
 8009326:	9302      	str	r3, [sp, #8]
 8009328:	7d3b      	ldrb	r3, [r7, #20]
 800932a:	9301      	str	r3, [sp, #4]
 800932c:	7c3b      	ldrb	r3, [r7, #16]
 800932e:	9300      	str	r3, [sp, #0]
 8009330:	4603      	mov	r3, r0
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f003 fec7 	bl	800d0c6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8009338:	2300      	movs	r3, #0
}
 800933a:	4618      	mov	r0, r3
 800933c:	3708      	adds	r7, #8
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}

08009342 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009342:	b580      	push	{r7, lr}
 8009344:	b082      	sub	sp, #8
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]
 800934a:	460b      	mov	r3, r1
 800934c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800934e:	78fb      	ldrb	r3, [r7, #3]
 8009350:	4619      	mov	r1, r3
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f003 fee6 	bl	800d124 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009358:	2300      	movs	r3, #0
}
 800935a:	4618      	mov	r0, r3
 800935c:	3708      	adds	r7, #8
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}

08009362 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009362:	b580      	push	{r7, lr}
 8009364:	b084      	sub	sp, #16
 8009366:	af00      	add	r7, sp, #0
 8009368:	6078      	str	r0, [r7, #4]
 800936a:	460b      	mov	r3, r1
 800936c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f000 f836 	bl	80093e0 <USBH_GetFreePipe>
 8009374:	4603      	mov	r3, r0
 8009376:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009378:	89fb      	ldrh	r3, [r7, #14]
 800937a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800937e:	4293      	cmp	r3, r2
 8009380:	d00a      	beq.n	8009398 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8009382:	78fa      	ldrb	r2, [r7, #3]
 8009384:	89fb      	ldrh	r3, [r7, #14]
 8009386:	f003 030f 	and.w	r3, r3, #15
 800938a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800938e:	6879      	ldr	r1, [r7, #4]
 8009390:	33e0      	adds	r3, #224	; 0xe0
 8009392:	009b      	lsls	r3, r3, #2
 8009394:	440b      	add	r3, r1
 8009396:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009398:	89fb      	ldrh	r3, [r7, #14]
 800939a:	b2db      	uxtb	r3, r3
}
 800939c:	4618      	mov	r0, r3
 800939e:	3710      	adds	r7, #16
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b083      	sub	sp, #12
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	460b      	mov	r3, r1
 80093ae:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80093b0:	78fb      	ldrb	r3, [r7, #3]
 80093b2:	2b0a      	cmp	r3, #10
 80093b4:	d80d      	bhi.n	80093d2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80093b6:	78fb      	ldrb	r3, [r7, #3]
 80093b8:	687a      	ldr	r2, [r7, #4]
 80093ba:	33e0      	adds	r3, #224	; 0xe0
 80093bc:	009b      	lsls	r3, r3, #2
 80093be:	4413      	add	r3, r2
 80093c0:	685a      	ldr	r2, [r3, #4]
 80093c2:	78fb      	ldrb	r3, [r7, #3]
 80093c4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80093c8:	6879      	ldr	r1, [r7, #4]
 80093ca:	33e0      	adds	r3, #224	; 0xe0
 80093cc:	009b      	lsls	r3, r3, #2
 80093ce:	440b      	add	r3, r1
 80093d0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80093d2:	2300      	movs	r3, #0
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	370c      	adds	r7, #12
 80093d8:	46bd      	mov	sp, r7
 80093da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093de:	4770      	bx	lr

080093e0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b085      	sub	sp, #20
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80093e8:	2300      	movs	r3, #0
 80093ea:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80093ec:	2300      	movs	r3, #0
 80093ee:	73fb      	strb	r3, [r7, #15]
 80093f0:	e00f      	b.n	8009412 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80093f2:	7bfb      	ldrb	r3, [r7, #15]
 80093f4:	687a      	ldr	r2, [r7, #4]
 80093f6:	33e0      	adds	r3, #224	; 0xe0
 80093f8:	009b      	lsls	r3, r3, #2
 80093fa:	4413      	add	r3, r2
 80093fc:	685b      	ldr	r3, [r3, #4]
 80093fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009402:	2b00      	cmp	r3, #0
 8009404:	d102      	bne.n	800940c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009406:	7bfb      	ldrb	r3, [r7, #15]
 8009408:	b29b      	uxth	r3, r3
 800940a:	e007      	b.n	800941c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800940c:	7bfb      	ldrb	r3, [r7, #15]
 800940e:	3301      	adds	r3, #1
 8009410:	73fb      	strb	r3, [r7, #15]
 8009412:	7bfb      	ldrb	r3, [r7, #15]
 8009414:	2b0a      	cmp	r3, #10
 8009416:	d9ec      	bls.n	80093f2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009418:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800941c:	4618      	mov	r0, r3
 800941e:	3714      	adds	r7, #20
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr

08009428 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b084      	sub	sp, #16
 800942c:	af00      	add	r7, sp, #0
 800942e:	4603      	mov	r3, r0
 8009430:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009432:	79fb      	ldrb	r3, [r7, #7]
 8009434:	4a08      	ldr	r2, [pc, #32]	; (8009458 <disk_status+0x30>)
 8009436:	009b      	lsls	r3, r3, #2
 8009438:	4413      	add	r3, r2
 800943a:	685b      	ldr	r3, [r3, #4]
 800943c:	685b      	ldr	r3, [r3, #4]
 800943e:	79fa      	ldrb	r2, [r7, #7]
 8009440:	4905      	ldr	r1, [pc, #20]	; (8009458 <disk_status+0x30>)
 8009442:	440a      	add	r2, r1
 8009444:	7a12      	ldrb	r2, [r2, #8]
 8009446:	4610      	mov	r0, r2
 8009448:	4798      	blx	r3
 800944a:	4603      	mov	r3, r0
 800944c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800944e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009450:	4618      	mov	r0, r3
 8009452:	3710      	adds	r7, #16
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}
 8009458:	20002500 	.word	0x20002500

0800945c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b084      	sub	sp, #16
 8009460:	af00      	add	r7, sp, #0
 8009462:	4603      	mov	r3, r0
 8009464:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009466:	2300      	movs	r3, #0
 8009468:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800946a:	79fb      	ldrb	r3, [r7, #7]
 800946c:	4a0d      	ldr	r2, [pc, #52]	; (80094a4 <disk_initialize+0x48>)
 800946e:	5cd3      	ldrb	r3, [r2, r3]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d111      	bne.n	8009498 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009474:	79fb      	ldrb	r3, [r7, #7]
 8009476:	4a0b      	ldr	r2, [pc, #44]	; (80094a4 <disk_initialize+0x48>)
 8009478:	2101      	movs	r1, #1
 800947a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800947c:	79fb      	ldrb	r3, [r7, #7]
 800947e:	4a09      	ldr	r2, [pc, #36]	; (80094a4 <disk_initialize+0x48>)
 8009480:	009b      	lsls	r3, r3, #2
 8009482:	4413      	add	r3, r2
 8009484:	685b      	ldr	r3, [r3, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	79fa      	ldrb	r2, [r7, #7]
 800948a:	4906      	ldr	r1, [pc, #24]	; (80094a4 <disk_initialize+0x48>)
 800948c:	440a      	add	r2, r1
 800948e:	7a12      	ldrb	r2, [r2, #8]
 8009490:	4610      	mov	r0, r2
 8009492:	4798      	blx	r3
 8009494:	4603      	mov	r3, r0
 8009496:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009498:	7bfb      	ldrb	r3, [r7, #15]
}
 800949a:	4618      	mov	r0, r3
 800949c:	3710      	adds	r7, #16
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}
 80094a2:	bf00      	nop
 80094a4:	20002500 	.word	0x20002500

080094a8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80094a8:	b590      	push	{r4, r7, lr}
 80094aa:	b087      	sub	sp, #28
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	60b9      	str	r1, [r7, #8]
 80094b0:	607a      	str	r2, [r7, #4]
 80094b2:	603b      	str	r3, [r7, #0]
 80094b4:	4603      	mov	r3, r0
 80094b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80094b8:	7bfb      	ldrb	r3, [r7, #15]
 80094ba:	4a0a      	ldr	r2, [pc, #40]	; (80094e4 <disk_read+0x3c>)
 80094bc:	009b      	lsls	r3, r3, #2
 80094be:	4413      	add	r3, r2
 80094c0:	685b      	ldr	r3, [r3, #4]
 80094c2:	689c      	ldr	r4, [r3, #8]
 80094c4:	7bfb      	ldrb	r3, [r7, #15]
 80094c6:	4a07      	ldr	r2, [pc, #28]	; (80094e4 <disk_read+0x3c>)
 80094c8:	4413      	add	r3, r2
 80094ca:	7a18      	ldrb	r0, [r3, #8]
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	687a      	ldr	r2, [r7, #4]
 80094d0:	68b9      	ldr	r1, [r7, #8]
 80094d2:	47a0      	blx	r4
 80094d4:	4603      	mov	r3, r0
 80094d6:	75fb      	strb	r3, [r7, #23]
  return res;
 80094d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80094da:	4618      	mov	r0, r3
 80094dc:	371c      	adds	r7, #28
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd90      	pop	{r4, r7, pc}
 80094e2:	bf00      	nop
 80094e4:	20002500 	.word	0x20002500

080094e8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80094e8:	b590      	push	{r4, r7, lr}
 80094ea:	b087      	sub	sp, #28
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	60b9      	str	r1, [r7, #8]
 80094f0:	607a      	str	r2, [r7, #4]
 80094f2:	603b      	str	r3, [r7, #0]
 80094f4:	4603      	mov	r3, r0
 80094f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80094f8:	7bfb      	ldrb	r3, [r7, #15]
 80094fa:	4a0a      	ldr	r2, [pc, #40]	; (8009524 <disk_write+0x3c>)
 80094fc:	009b      	lsls	r3, r3, #2
 80094fe:	4413      	add	r3, r2
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	68dc      	ldr	r4, [r3, #12]
 8009504:	7bfb      	ldrb	r3, [r7, #15]
 8009506:	4a07      	ldr	r2, [pc, #28]	; (8009524 <disk_write+0x3c>)
 8009508:	4413      	add	r3, r2
 800950a:	7a18      	ldrb	r0, [r3, #8]
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	687a      	ldr	r2, [r7, #4]
 8009510:	68b9      	ldr	r1, [r7, #8]
 8009512:	47a0      	blx	r4
 8009514:	4603      	mov	r3, r0
 8009516:	75fb      	strb	r3, [r7, #23]
  return res;
 8009518:	7dfb      	ldrb	r3, [r7, #23]
}
 800951a:	4618      	mov	r0, r3
 800951c:	371c      	adds	r7, #28
 800951e:	46bd      	mov	sp, r7
 8009520:	bd90      	pop	{r4, r7, pc}
 8009522:	bf00      	nop
 8009524:	20002500 	.word	0x20002500

08009528 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b084      	sub	sp, #16
 800952c:	af00      	add	r7, sp, #0
 800952e:	4603      	mov	r3, r0
 8009530:	603a      	str	r2, [r7, #0]
 8009532:	71fb      	strb	r3, [r7, #7]
 8009534:	460b      	mov	r3, r1
 8009536:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009538:	79fb      	ldrb	r3, [r7, #7]
 800953a:	4a09      	ldr	r2, [pc, #36]	; (8009560 <disk_ioctl+0x38>)
 800953c:	009b      	lsls	r3, r3, #2
 800953e:	4413      	add	r3, r2
 8009540:	685b      	ldr	r3, [r3, #4]
 8009542:	691b      	ldr	r3, [r3, #16]
 8009544:	79fa      	ldrb	r2, [r7, #7]
 8009546:	4906      	ldr	r1, [pc, #24]	; (8009560 <disk_ioctl+0x38>)
 8009548:	440a      	add	r2, r1
 800954a:	7a10      	ldrb	r0, [r2, #8]
 800954c:	79b9      	ldrb	r1, [r7, #6]
 800954e:	683a      	ldr	r2, [r7, #0]
 8009550:	4798      	blx	r3
 8009552:	4603      	mov	r3, r0
 8009554:	73fb      	strb	r3, [r7, #15]
  return res;
 8009556:	7bfb      	ldrb	r3, [r7, #15]
}
 8009558:	4618      	mov	r0, r3
 800955a:	3710      	adds	r7, #16
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}
 8009560:	20002500 	.word	0x20002500

08009564 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009564:	b480      	push	{r7}
 8009566:	b085      	sub	sp, #20
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	3301      	adds	r3, #1
 8009570:	781b      	ldrb	r3, [r3, #0]
 8009572:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009574:	89fb      	ldrh	r3, [r7, #14]
 8009576:	021b      	lsls	r3, r3, #8
 8009578:	b21a      	sxth	r2, r3
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	781b      	ldrb	r3, [r3, #0]
 800957e:	b21b      	sxth	r3, r3
 8009580:	4313      	orrs	r3, r2
 8009582:	b21b      	sxth	r3, r3
 8009584:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009586:	89fb      	ldrh	r3, [r7, #14]
}
 8009588:	4618      	mov	r0, r3
 800958a:	3714      	adds	r7, #20
 800958c:	46bd      	mov	sp, r7
 800958e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009592:	4770      	bx	lr

08009594 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009594:	b480      	push	{r7}
 8009596:	b085      	sub	sp, #20
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	3303      	adds	r3, #3
 80095a0:	781b      	ldrb	r3, [r3, #0]
 80095a2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	021b      	lsls	r3, r3, #8
 80095a8:	687a      	ldr	r2, [r7, #4]
 80095aa:	3202      	adds	r2, #2
 80095ac:	7812      	ldrb	r2, [r2, #0]
 80095ae:	4313      	orrs	r3, r2
 80095b0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	021b      	lsls	r3, r3, #8
 80095b6:	687a      	ldr	r2, [r7, #4]
 80095b8:	3201      	adds	r2, #1
 80095ba:	7812      	ldrb	r2, [r2, #0]
 80095bc:	4313      	orrs	r3, r2
 80095be:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	021b      	lsls	r3, r3, #8
 80095c4:	687a      	ldr	r2, [r7, #4]
 80095c6:	7812      	ldrb	r2, [r2, #0]
 80095c8:	4313      	orrs	r3, r2
 80095ca:	60fb      	str	r3, [r7, #12]
	return rv;
 80095cc:	68fb      	ldr	r3, [r7, #12]
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3714      	adds	r7, #20
 80095d2:	46bd      	mov	sp, r7
 80095d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d8:	4770      	bx	lr

080095da <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80095da:	b480      	push	{r7}
 80095dc:	b083      	sub	sp, #12
 80095de:	af00      	add	r7, sp, #0
 80095e0:	6078      	str	r0, [r7, #4]
 80095e2:	460b      	mov	r3, r1
 80095e4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	1c5a      	adds	r2, r3, #1
 80095ea:	607a      	str	r2, [r7, #4]
 80095ec:	887a      	ldrh	r2, [r7, #2]
 80095ee:	b2d2      	uxtb	r2, r2
 80095f0:	701a      	strb	r2, [r3, #0]
 80095f2:	887b      	ldrh	r3, [r7, #2]
 80095f4:	0a1b      	lsrs	r3, r3, #8
 80095f6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	1c5a      	adds	r2, r3, #1
 80095fc:	607a      	str	r2, [r7, #4]
 80095fe:	887a      	ldrh	r2, [r7, #2]
 8009600:	b2d2      	uxtb	r2, r2
 8009602:	701a      	strb	r2, [r3, #0]
}
 8009604:	bf00      	nop
 8009606:	370c      	adds	r7, #12
 8009608:	46bd      	mov	sp, r7
 800960a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960e:	4770      	bx	lr

08009610 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009610:	b480      	push	{r7}
 8009612:	b083      	sub	sp, #12
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
 8009618:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	1c5a      	adds	r2, r3, #1
 800961e:	607a      	str	r2, [r7, #4]
 8009620:	683a      	ldr	r2, [r7, #0]
 8009622:	b2d2      	uxtb	r2, r2
 8009624:	701a      	strb	r2, [r3, #0]
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	0a1b      	lsrs	r3, r3, #8
 800962a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	1c5a      	adds	r2, r3, #1
 8009630:	607a      	str	r2, [r7, #4]
 8009632:	683a      	ldr	r2, [r7, #0]
 8009634:	b2d2      	uxtb	r2, r2
 8009636:	701a      	strb	r2, [r3, #0]
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	0a1b      	lsrs	r3, r3, #8
 800963c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	1c5a      	adds	r2, r3, #1
 8009642:	607a      	str	r2, [r7, #4]
 8009644:	683a      	ldr	r2, [r7, #0]
 8009646:	b2d2      	uxtb	r2, r2
 8009648:	701a      	strb	r2, [r3, #0]
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	0a1b      	lsrs	r3, r3, #8
 800964e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	1c5a      	adds	r2, r3, #1
 8009654:	607a      	str	r2, [r7, #4]
 8009656:	683a      	ldr	r2, [r7, #0]
 8009658:	b2d2      	uxtb	r2, r2
 800965a:	701a      	strb	r2, [r3, #0]
}
 800965c:	bf00      	nop
 800965e:	370c      	adds	r7, #12
 8009660:	46bd      	mov	sp, r7
 8009662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009666:	4770      	bx	lr

08009668 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009668:	b480      	push	{r7}
 800966a:	b087      	sub	sp, #28
 800966c:	af00      	add	r7, sp, #0
 800966e:	60f8      	str	r0, [r7, #12]
 8009670:	60b9      	str	r1, [r7, #8]
 8009672:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d00d      	beq.n	800969e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009682:	693a      	ldr	r2, [r7, #16]
 8009684:	1c53      	adds	r3, r2, #1
 8009686:	613b      	str	r3, [r7, #16]
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	1c59      	adds	r1, r3, #1
 800968c:	6179      	str	r1, [r7, #20]
 800968e:	7812      	ldrb	r2, [r2, #0]
 8009690:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	3b01      	subs	r3, #1
 8009696:	607b      	str	r3, [r7, #4]
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d1f1      	bne.n	8009682 <mem_cpy+0x1a>
	}
}
 800969e:	bf00      	nop
 80096a0:	371c      	adds	r7, #28
 80096a2:	46bd      	mov	sp, r7
 80096a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a8:	4770      	bx	lr

080096aa <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80096aa:	b480      	push	{r7}
 80096ac:	b087      	sub	sp, #28
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	60f8      	str	r0, [r7, #12]
 80096b2:	60b9      	str	r1, [r7, #8]
 80096b4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	1c5a      	adds	r2, r3, #1
 80096be:	617a      	str	r2, [r7, #20]
 80096c0:	68ba      	ldr	r2, [r7, #8]
 80096c2:	b2d2      	uxtb	r2, r2
 80096c4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	3b01      	subs	r3, #1
 80096ca:	607b      	str	r3, [r7, #4]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d1f3      	bne.n	80096ba <mem_set+0x10>
}
 80096d2:	bf00      	nop
 80096d4:	bf00      	nop
 80096d6:	371c      	adds	r7, #28
 80096d8:	46bd      	mov	sp, r7
 80096da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096de:	4770      	bx	lr

080096e0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80096e0:	b480      	push	{r7}
 80096e2:	b089      	sub	sp, #36	; 0x24
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	60f8      	str	r0, [r7, #12]
 80096e8:	60b9      	str	r1, [r7, #8]
 80096ea:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	61fb      	str	r3, [r7, #28]
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80096f4:	2300      	movs	r3, #0
 80096f6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80096f8:	69fb      	ldr	r3, [r7, #28]
 80096fa:	1c5a      	adds	r2, r3, #1
 80096fc:	61fa      	str	r2, [r7, #28]
 80096fe:	781b      	ldrb	r3, [r3, #0]
 8009700:	4619      	mov	r1, r3
 8009702:	69bb      	ldr	r3, [r7, #24]
 8009704:	1c5a      	adds	r2, r3, #1
 8009706:	61ba      	str	r2, [r7, #24]
 8009708:	781b      	ldrb	r3, [r3, #0]
 800970a:	1acb      	subs	r3, r1, r3
 800970c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	3b01      	subs	r3, #1
 8009712:	607b      	str	r3, [r7, #4]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d002      	beq.n	8009720 <mem_cmp+0x40>
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d0eb      	beq.n	80096f8 <mem_cmp+0x18>

	return r;
 8009720:	697b      	ldr	r3, [r7, #20]
}
 8009722:	4618      	mov	r0, r3
 8009724:	3724      	adds	r7, #36	; 0x24
 8009726:	46bd      	mov	sp, r7
 8009728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972c:	4770      	bx	lr

0800972e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800972e:	b480      	push	{r7}
 8009730:	b083      	sub	sp, #12
 8009732:	af00      	add	r7, sp, #0
 8009734:	6078      	str	r0, [r7, #4]
 8009736:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009738:	e002      	b.n	8009740 <chk_chr+0x12>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	3301      	adds	r3, #1
 800973e:	607b      	str	r3, [r7, #4]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	781b      	ldrb	r3, [r3, #0]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d005      	beq.n	8009754 <chk_chr+0x26>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	781b      	ldrb	r3, [r3, #0]
 800974c:	461a      	mov	r2, r3
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	4293      	cmp	r3, r2
 8009752:	d1f2      	bne.n	800973a <chk_chr+0xc>
	return *str;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	781b      	ldrb	r3, [r3, #0]
}
 8009758:	4618      	mov	r0, r3
 800975a:	370c      	adds	r7, #12
 800975c:	46bd      	mov	sp, r7
 800975e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009762:	4770      	bx	lr

08009764 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009764:	b480      	push	{r7}
 8009766:	b085      	sub	sp, #20
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800976e:	2300      	movs	r3, #0
 8009770:	60bb      	str	r3, [r7, #8]
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	60fb      	str	r3, [r7, #12]
 8009776:	e029      	b.n	80097cc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009778:	4a27      	ldr	r2, [pc, #156]	; (8009818 <chk_lock+0xb4>)
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	011b      	lsls	r3, r3, #4
 800977e:	4413      	add	r3, r2
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d01d      	beq.n	80097c2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009786:	4a24      	ldr	r2, [pc, #144]	; (8009818 <chk_lock+0xb4>)
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	011b      	lsls	r3, r3, #4
 800978c:	4413      	add	r3, r2
 800978e:	681a      	ldr	r2, [r3, #0]
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	429a      	cmp	r2, r3
 8009796:	d116      	bne.n	80097c6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009798:	4a1f      	ldr	r2, [pc, #124]	; (8009818 <chk_lock+0xb4>)
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	011b      	lsls	r3, r3, #4
 800979e:	4413      	add	r3, r2
 80097a0:	3304      	adds	r3, #4
 80097a2:	681a      	ldr	r2, [r3, #0]
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80097a8:	429a      	cmp	r2, r3
 80097aa:	d10c      	bne.n	80097c6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80097ac:	4a1a      	ldr	r2, [pc, #104]	; (8009818 <chk_lock+0xb4>)
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	011b      	lsls	r3, r3, #4
 80097b2:	4413      	add	r3, r2
 80097b4:	3308      	adds	r3, #8
 80097b6:	681a      	ldr	r2, [r3, #0]
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80097bc:	429a      	cmp	r2, r3
 80097be:	d102      	bne.n	80097c6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80097c0:	e007      	b.n	80097d2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80097c2:	2301      	movs	r3, #1
 80097c4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	3301      	adds	r3, #1
 80097ca:	60fb      	str	r3, [r7, #12]
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	2b01      	cmp	r3, #1
 80097d0:	d9d2      	bls.n	8009778 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	2b02      	cmp	r3, #2
 80097d6:	d109      	bne.n	80097ec <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d102      	bne.n	80097e4 <chk_lock+0x80>
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	2b02      	cmp	r3, #2
 80097e2:	d101      	bne.n	80097e8 <chk_lock+0x84>
 80097e4:	2300      	movs	r3, #0
 80097e6:	e010      	b.n	800980a <chk_lock+0xa6>
 80097e8:	2312      	movs	r3, #18
 80097ea:	e00e      	b.n	800980a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d108      	bne.n	8009804 <chk_lock+0xa0>
 80097f2:	4a09      	ldr	r2, [pc, #36]	; (8009818 <chk_lock+0xb4>)
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	011b      	lsls	r3, r3, #4
 80097f8:	4413      	add	r3, r2
 80097fa:	330c      	adds	r3, #12
 80097fc:	881b      	ldrh	r3, [r3, #0]
 80097fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009802:	d101      	bne.n	8009808 <chk_lock+0xa4>
 8009804:	2310      	movs	r3, #16
 8009806:	e000      	b.n	800980a <chk_lock+0xa6>
 8009808:	2300      	movs	r3, #0
}
 800980a:	4618      	mov	r0, r3
 800980c:	3714      	adds	r7, #20
 800980e:	46bd      	mov	sp, r7
 8009810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009814:	4770      	bx	lr
 8009816:	bf00      	nop
 8009818:	200022e0 	.word	0x200022e0

0800981c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800981c:	b480      	push	{r7}
 800981e:	b083      	sub	sp, #12
 8009820:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009822:	2300      	movs	r3, #0
 8009824:	607b      	str	r3, [r7, #4]
 8009826:	e002      	b.n	800982e <enq_lock+0x12>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	3301      	adds	r3, #1
 800982c:	607b      	str	r3, [r7, #4]
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2b01      	cmp	r3, #1
 8009832:	d806      	bhi.n	8009842 <enq_lock+0x26>
 8009834:	4a09      	ldr	r2, [pc, #36]	; (800985c <enq_lock+0x40>)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	011b      	lsls	r3, r3, #4
 800983a:	4413      	add	r3, r2
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d1f2      	bne.n	8009828 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2b02      	cmp	r3, #2
 8009846:	bf14      	ite	ne
 8009848:	2301      	movne	r3, #1
 800984a:	2300      	moveq	r3, #0
 800984c:	b2db      	uxtb	r3, r3
}
 800984e:	4618      	mov	r0, r3
 8009850:	370c      	adds	r7, #12
 8009852:	46bd      	mov	sp, r7
 8009854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009858:	4770      	bx	lr
 800985a:	bf00      	nop
 800985c:	200022e0 	.word	0x200022e0

08009860 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009860:	b480      	push	{r7}
 8009862:	b085      	sub	sp, #20
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800986a:	2300      	movs	r3, #0
 800986c:	60fb      	str	r3, [r7, #12]
 800986e:	e01f      	b.n	80098b0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009870:	4a41      	ldr	r2, [pc, #260]	; (8009978 <inc_lock+0x118>)
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	011b      	lsls	r3, r3, #4
 8009876:	4413      	add	r3, r2
 8009878:	681a      	ldr	r2, [r3, #0]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	429a      	cmp	r2, r3
 8009880:	d113      	bne.n	80098aa <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009882:	4a3d      	ldr	r2, [pc, #244]	; (8009978 <inc_lock+0x118>)
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	011b      	lsls	r3, r3, #4
 8009888:	4413      	add	r3, r2
 800988a:	3304      	adds	r3, #4
 800988c:	681a      	ldr	r2, [r3, #0]
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009892:	429a      	cmp	r2, r3
 8009894:	d109      	bne.n	80098aa <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009896:	4a38      	ldr	r2, [pc, #224]	; (8009978 <inc_lock+0x118>)
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	011b      	lsls	r3, r3, #4
 800989c:	4413      	add	r3, r2
 800989e:	3308      	adds	r3, #8
 80098a0:	681a      	ldr	r2, [r3, #0]
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80098a6:	429a      	cmp	r2, r3
 80098a8:	d006      	beq.n	80098b8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	3301      	adds	r3, #1
 80098ae:	60fb      	str	r3, [r7, #12]
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	2b01      	cmp	r3, #1
 80098b4:	d9dc      	bls.n	8009870 <inc_lock+0x10>
 80098b6:	e000      	b.n	80098ba <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80098b8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	2b02      	cmp	r3, #2
 80098be:	d132      	bne.n	8009926 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80098c0:	2300      	movs	r3, #0
 80098c2:	60fb      	str	r3, [r7, #12]
 80098c4:	e002      	b.n	80098cc <inc_lock+0x6c>
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	3301      	adds	r3, #1
 80098ca:	60fb      	str	r3, [r7, #12]
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	2b01      	cmp	r3, #1
 80098d0:	d806      	bhi.n	80098e0 <inc_lock+0x80>
 80098d2:	4a29      	ldr	r2, [pc, #164]	; (8009978 <inc_lock+0x118>)
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	011b      	lsls	r3, r3, #4
 80098d8:	4413      	add	r3, r2
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d1f2      	bne.n	80098c6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	2b02      	cmp	r3, #2
 80098e4:	d101      	bne.n	80098ea <inc_lock+0x8a>
 80098e6:	2300      	movs	r3, #0
 80098e8:	e040      	b.n	800996c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681a      	ldr	r2, [r3, #0]
 80098ee:	4922      	ldr	r1, [pc, #136]	; (8009978 <inc_lock+0x118>)
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	011b      	lsls	r3, r3, #4
 80098f4:	440b      	add	r3, r1
 80098f6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	689a      	ldr	r2, [r3, #8]
 80098fc:	491e      	ldr	r1, [pc, #120]	; (8009978 <inc_lock+0x118>)
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	011b      	lsls	r3, r3, #4
 8009902:	440b      	add	r3, r1
 8009904:	3304      	adds	r3, #4
 8009906:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	695a      	ldr	r2, [r3, #20]
 800990c:	491a      	ldr	r1, [pc, #104]	; (8009978 <inc_lock+0x118>)
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	011b      	lsls	r3, r3, #4
 8009912:	440b      	add	r3, r1
 8009914:	3308      	adds	r3, #8
 8009916:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009918:	4a17      	ldr	r2, [pc, #92]	; (8009978 <inc_lock+0x118>)
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	011b      	lsls	r3, r3, #4
 800991e:	4413      	add	r3, r2
 8009920:	330c      	adds	r3, #12
 8009922:	2200      	movs	r2, #0
 8009924:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d009      	beq.n	8009940 <inc_lock+0xe0>
 800992c:	4a12      	ldr	r2, [pc, #72]	; (8009978 <inc_lock+0x118>)
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	011b      	lsls	r3, r3, #4
 8009932:	4413      	add	r3, r2
 8009934:	330c      	adds	r3, #12
 8009936:	881b      	ldrh	r3, [r3, #0]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d001      	beq.n	8009940 <inc_lock+0xe0>
 800993c:	2300      	movs	r3, #0
 800993e:	e015      	b.n	800996c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d108      	bne.n	8009958 <inc_lock+0xf8>
 8009946:	4a0c      	ldr	r2, [pc, #48]	; (8009978 <inc_lock+0x118>)
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	011b      	lsls	r3, r3, #4
 800994c:	4413      	add	r3, r2
 800994e:	330c      	adds	r3, #12
 8009950:	881b      	ldrh	r3, [r3, #0]
 8009952:	3301      	adds	r3, #1
 8009954:	b29a      	uxth	r2, r3
 8009956:	e001      	b.n	800995c <inc_lock+0xfc>
 8009958:	f44f 7280 	mov.w	r2, #256	; 0x100
 800995c:	4906      	ldr	r1, [pc, #24]	; (8009978 <inc_lock+0x118>)
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	011b      	lsls	r3, r3, #4
 8009962:	440b      	add	r3, r1
 8009964:	330c      	adds	r3, #12
 8009966:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	3301      	adds	r3, #1
}
 800996c:	4618      	mov	r0, r3
 800996e:	3714      	adds	r7, #20
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr
 8009978:	200022e0 	.word	0x200022e0

0800997c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800997c:	b480      	push	{r7}
 800997e:	b085      	sub	sp, #20
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	3b01      	subs	r3, #1
 8009988:	607b      	str	r3, [r7, #4]
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2b01      	cmp	r3, #1
 800998e:	d825      	bhi.n	80099dc <dec_lock+0x60>
		n = Files[i].ctr;
 8009990:	4a17      	ldr	r2, [pc, #92]	; (80099f0 <dec_lock+0x74>)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	011b      	lsls	r3, r3, #4
 8009996:	4413      	add	r3, r2
 8009998:	330c      	adds	r3, #12
 800999a:	881b      	ldrh	r3, [r3, #0]
 800999c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800999e:	89fb      	ldrh	r3, [r7, #14]
 80099a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099a4:	d101      	bne.n	80099aa <dec_lock+0x2e>
 80099a6:	2300      	movs	r3, #0
 80099a8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80099aa:	89fb      	ldrh	r3, [r7, #14]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d002      	beq.n	80099b6 <dec_lock+0x3a>
 80099b0:	89fb      	ldrh	r3, [r7, #14]
 80099b2:	3b01      	subs	r3, #1
 80099b4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80099b6:	4a0e      	ldr	r2, [pc, #56]	; (80099f0 <dec_lock+0x74>)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	011b      	lsls	r3, r3, #4
 80099bc:	4413      	add	r3, r2
 80099be:	330c      	adds	r3, #12
 80099c0:	89fa      	ldrh	r2, [r7, #14]
 80099c2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80099c4:	89fb      	ldrh	r3, [r7, #14]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d105      	bne.n	80099d6 <dec_lock+0x5a>
 80099ca:	4a09      	ldr	r2, [pc, #36]	; (80099f0 <dec_lock+0x74>)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	011b      	lsls	r3, r3, #4
 80099d0:	4413      	add	r3, r2
 80099d2:	2200      	movs	r2, #0
 80099d4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80099d6:	2300      	movs	r3, #0
 80099d8:	737b      	strb	r3, [r7, #13]
 80099da:	e001      	b.n	80099e0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80099dc:	2302      	movs	r3, #2
 80099de:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80099e0:	7b7b      	ldrb	r3, [r7, #13]
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3714      	adds	r7, #20
 80099e6:	46bd      	mov	sp, r7
 80099e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ec:	4770      	bx	lr
 80099ee:	bf00      	nop
 80099f0:	200022e0 	.word	0x200022e0

080099f4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b085      	sub	sp, #20
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80099fc:	2300      	movs	r3, #0
 80099fe:	60fb      	str	r3, [r7, #12]
 8009a00:	e010      	b.n	8009a24 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009a02:	4a0d      	ldr	r2, [pc, #52]	; (8009a38 <clear_lock+0x44>)
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	011b      	lsls	r3, r3, #4
 8009a08:	4413      	add	r3, r2
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	687a      	ldr	r2, [r7, #4]
 8009a0e:	429a      	cmp	r2, r3
 8009a10:	d105      	bne.n	8009a1e <clear_lock+0x2a>
 8009a12:	4a09      	ldr	r2, [pc, #36]	; (8009a38 <clear_lock+0x44>)
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	011b      	lsls	r3, r3, #4
 8009a18:	4413      	add	r3, r2
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	3301      	adds	r3, #1
 8009a22:	60fb      	str	r3, [r7, #12]
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2b01      	cmp	r3, #1
 8009a28:	d9eb      	bls.n	8009a02 <clear_lock+0xe>
	}
}
 8009a2a:	bf00      	nop
 8009a2c:	bf00      	nop
 8009a2e:	3714      	adds	r7, #20
 8009a30:	46bd      	mov	sp, r7
 8009a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a36:	4770      	bx	lr
 8009a38:	200022e0 	.word	0x200022e0

08009a3c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b086      	sub	sp, #24
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009a44:	2300      	movs	r3, #0
 8009a46:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	78db      	ldrb	r3, [r3, #3]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d034      	beq.n	8009aba <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a54:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	7858      	ldrb	r0, [r3, #1]
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009a60:	2301      	movs	r3, #1
 8009a62:	697a      	ldr	r2, [r7, #20]
 8009a64:	f7ff fd40 	bl	80094e8 <disk_write>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d002      	beq.n	8009a74 <sync_window+0x38>
			res = FR_DISK_ERR;
 8009a6e:	2301      	movs	r3, #1
 8009a70:	73fb      	strb	r3, [r7, #15]
 8009a72:	e022      	b.n	8009aba <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2200      	movs	r2, #0
 8009a78:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a7e:	697a      	ldr	r2, [r7, #20]
 8009a80:	1ad2      	subs	r2, r2, r3
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6a1b      	ldr	r3, [r3, #32]
 8009a86:	429a      	cmp	r2, r3
 8009a88:	d217      	bcs.n	8009aba <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	789b      	ldrb	r3, [r3, #2]
 8009a8e:	613b      	str	r3, [r7, #16]
 8009a90:	e010      	b.n	8009ab4 <sync_window+0x78>
					wsect += fs->fsize;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6a1b      	ldr	r3, [r3, #32]
 8009a96:	697a      	ldr	r2, [r7, #20]
 8009a98:	4413      	add	r3, r2
 8009a9a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	7858      	ldrb	r0, [r3, #1]
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	697a      	ldr	r2, [r7, #20]
 8009aaa:	f7ff fd1d 	bl	80094e8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	3b01      	subs	r3, #1
 8009ab2:	613b      	str	r3, [r7, #16]
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	2b01      	cmp	r3, #1
 8009ab8:	d8eb      	bhi.n	8009a92 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	3718      	adds	r7, #24
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}

08009ac4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b084      	sub	sp, #16
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
 8009acc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ad6:	683a      	ldr	r2, [r7, #0]
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	d01b      	beq.n	8009b14 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f7ff ffad 	bl	8009a3c <sync_window>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009ae6:	7bfb      	ldrb	r3, [r7, #15]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d113      	bne.n	8009b14 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	7858      	ldrb	r0, [r3, #1]
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009af6:	2301      	movs	r3, #1
 8009af8:	683a      	ldr	r2, [r7, #0]
 8009afa:	f7ff fcd5 	bl	80094a8 <disk_read>
 8009afe:	4603      	mov	r3, r0
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d004      	beq.n	8009b0e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009b04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b08:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	683a      	ldr	r2, [r7, #0]
 8009b12:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8009b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	3710      	adds	r7, #16
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}
	...

08009b20 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b084      	sub	sp, #16
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f7ff ff87 	bl	8009a3c <sync_window>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009b32:	7bfb      	ldrb	r3, [r7, #15]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d159      	bne.n	8009bec <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	781b      	ldrb	r3, [r3, #0]
 8009b3c:	2b03      	cmp	r3, #3
 8009b3e:	d149      	bne.n	8009bd4 <sync_fs+0xb4>
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	791b      	ldrb	r3, [r3, #4]
 8009b44:	2b01      	cmp	r3, #1
 8009b46:	d145      	bne.n	8009bd4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	899b      	ldrh	r3, [r3, #12]
 8009b52:	461a      	mov	r2, r3
 8009b54:	2100      	movs	r1, #0
 8009b56:	f7ff fda8 	bl	80096aa <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	3338      	adds	r3, #56	; 0x38
 8009b5e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009b62:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8009b66:	4618      	mov	r0, r3
 8009b68:	f7ff fd37 	bl	80095da <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	3338      	adds	r3, #56	; 0x38
 8009b70:	4921      	ldr	r1, [pc, #132]	; (8009bf8 <sync_fs+0xd8>)
 8009b72:	4618      	mov	r0, r3
 8009b74:	f7ff fd4c 	bl	8009610 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	3338      	adds	r3, #56	; 0x38
 8009b7c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009b80:	491e      	ldr	r1, [pc, #120]	; (8009bfc <sync_fs+0xdc>)
 8009b82:	4618      	mov	r0, r3
 8009b84:	f7ff fd44 	bl	8009610 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	3338      	adds	r3, #56	; 0x38
 8009b8c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	699b      	ldr	r3, [r3, #24]
 8009b94:	4619      	mov	r1, r3
 8009b96:	4610      	mov	r0, r2
 8009b98:	f7ff fd3a 	bl	8009610 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	3338      	adds	r3, #56	; 0x38
 8009ba0:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	695b      	ldr	r3, [r3, #20]
 8009ba8:	4619      	mov	r1, r3
 8009baa:	4610      	mov	r0, r2
 8009bac:	f7ff fd30 	bl	8009610 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bb4:	1c5a      	adds	r2, r3, #1
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	7858      	ldrb	r0, [r3, #1]
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009bc8:	2301      	movs	r3, #1
 8009bca:	f7ff fc8d 	bl	80094e8 <disk_write>
			fs->fsi_flag = 0;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	785b      	ldrb	r3, [r3, #1]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	2100      	movs	r1, #0
 8009bdc:	4618      	mov	r0, r3
 8009bde:	f7ff fca3 	bl	8009528 <disk_ioctl>
 8009be2:	4603      	mov	r3, r0
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d001      	beq.n	8009bec <sync_fs+0xcc>
 8009be8:	2301      	movs	r3, #1
 8009bea:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	3710      	adds	r7, #16
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}
 8009bf6:	bf00      	nop
 8009bf8:	41615252 	.word	0x41615252
 8009bfc:	61417272 	.word	0x61417272

08009c00 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009c00:	b480      	push	{r7}
 8009c02:	b083      	sub	sp, #12
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
 8009c08:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	3b02      	subs	r3, #2
 8009c0e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	69db      	ldr	r3, [r3, #28]
 8009c14:	3b02      	subs	r3, #2
 8009c16:	683a      	ldr	r2, [r7, #0]
 8009c18:	429a      	cmp	r2, r3
 8009c1a:	d301      	bcc.n	8009c20 <clust2sect+0x20>
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	e008      	b.n	8009c32 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	895b      	ldrh	r3, [r3, #10]
 8009c24:	461a      	mov	r2, r3
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	fb03 f202 	mul.w	r2, r3, r2
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c30:	4413      	add	r3, r2
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	370c      	adds	r7, #12
 8009c36:	46bd      	mov	sp, r7
 8009c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3c:	4770      	bx	lr

08009c3e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009c3e:	b580      	push	{r7, lr}
 8009c40:	b086      	sub	sp, #24
 8009c42:	af00      	add	r7, sp, #0
 8009c44:	6078      	str	r0, [r7, #4]
 8009c46:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	2b01      	cmp	r3, #1
 8009c52:	d904      	bls.n	8009c5e <get_fat+0x20>
 8009c54:	693b      	ldr	r3, [r7, #16]
 8009c56:	69db      	ldr	r3, [r3, #28]
 8009c58:	683a      	ldr	r2, [r7, #0]
 8009c5a:	429a      	cmp	r2, r3
 8009c5c:	d302      	bcc.n	8009c64 <get_fat+0x26>
		val = 1;	/* Internal error */
 8009c5e:	2301      	movs	r3, #1
 8009c60:	617b      	str	r3, [r7, #20]
 8009c62:	e0bb      	b.n	8009ddc <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009c64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009c68:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009c6a:	693b      	ldr	r3, [r7, #16]
 8009c6c:	781b      	ldrb	r3, [r3, #0]
 8009c6e:	2b03      	cmp	r3, #3
 8009c70:	f000 8083 	beq.w	8009d7a <get_fat+0x13c>
 8009c74:	2b03      	cmp	r3, #3
 8009c76:	f300 80a7 	bgt.w	8009dc8 <get_fat+0x18a>
 8009c7a:	2b01      	cmp	r3, #1
 8009c7c:	d002      	beq.n	8009c84 <get_fat+0x46>
 8009c7e:	2b02      	cmp	r3, #2
 8009c80:	d056      	beq.n	8009d30 <get_fat+0xf2>
 8009c82:	e0a1      	b.n	8009dc8 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	60fb      	str	r3, [r7, #12]
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	085b      	lsrs	r3, r3, #1
 8009c8c:	68fa      	ldr	r2, [r7, #12]
 8009c8e:	4413      	add	r3, r2
 8009c90:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009c96:	693b      	ldr	r3, [r7, #16]
 8009c98:	899b      	ldrh	r3, [r3, #12]
 8009c9a:	4619      	mov	r1, r3
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009ca2:	4413      	add	r3, r2
 8009ca4:	4619      	mov	r1, r3
 8009ca6:	6938      	ldr	r0, [r7, #16]
 8009ca8:	f7ff ff0c 	bl	8009ac4 <move_window>
 8009cac:	4603      	mov	r3, r0
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	f040 808d 	bne.w	8009dce <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	1c5a      	adds	r2, r3, #1
 8009cb8:	60fa      	str	r2, [r7, #12]
 8009cba:	693a      	ldr	r2, [r7, #16]
 8009cbc:	8992      	ldrh	r2, [r2, #12]
 8009cbe:	fbb3 f1f2 	udiv	r1, r3, r2
 8009cc2:	fb01 f202 	mul.w	r2, r1, r2
 8009cc6:	1a9b      	subs	r3, r3, r2
 8009cc8:	693a      	ldr	r2, [r7, #16]
 8009cca:	4413      	add	r3, r2
 8009ccc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009cd0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	899b      	ldrh	r3, [r3, #12]
 8009cda:	4619      	mov	r1, r3
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	fbb3 f3f1 	udiv	r3, r3, r1
 8009ce2:	4413      	add	r3, r2
 8009ce4:	4619      	mov	r1, r3
 8009ce6:	6938      	ldr	r0, [r7, #16]
 8009ce8:	f7ff feec 	bl	8009ac4 <move_window>
 8009cec:	4603      	mov	r3, r0
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d16f      	bne.n	8009dd2 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	899b      	ldrh	r3, [r3, #12]
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	fbb3 f1f2 	udiv	r1, r3, r2
 8009cfe:	fb01 f202 	mul.w	r2, r1, r2
 8009d02:	1a9b      	subs	r3, r3, r2
 8009d04:	693a      	ldr	r2, [r7, #16]
 8009d06:	4413      	add	r3, r2
 8009d08:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009d0c:	021b      	lsls	r3, r3, #8
 8009d0e:	461a      	mov	r2, r3
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	4313      	orrs	r3, r2
 8009d14:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	f003 0301 	and.w	r3, r3, #1
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d002      	beq.n	8009d26 <get_fat+0xe8>
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	091b      	lsrs	r3, r3, #4
 8009d24:	e002      	b.n	8009d2c <get_fat+0xee>
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009d2c:	617b      	str	r3, [r7, #20]
			break;
 8009d2e:	e055      	b.n	8009ddc <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009d34:	693b      	ldr	r3, [r7, #16]
 8009d36:	899b      	ldrh	r3, [r3, #12]
 8009d38:	085b      	lsrs	r3, r3, #1
 8009d3a:	b29b      	uxth	r3, r3
 8009d3c:	4619      	mov	r1, r3
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	fbb3 f3f1 	udiv	r3, r3, r1
 8009d44:	4413      	add	r3, r2
 8009d46:	4619      	mov	r1, r3
 8009d48:	6938      	ldr	r0, [r7, #16]
 8009d4a:	f7ff febb 	bl	8009ac4 <move_window>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d140      	bne.n	8009dd6 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	005b      	lsls	r3, r3, #1
 8009d5e:	693a      	ldr	r2, [r7, #16]
 8009d60:	8992      	ldrh	r2, [r2, #12]
 8009d62:	fbb3 f0f2 	udiv	r0, r3, r2
 8009d66:	fb00 f202 	mul.w	r2, r0, r2
 8009d6a:	1a9b      	subs	r3, r3, r2
 8009d6c:	440b      	add	r3, r1
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f7ff fbf8 	bl	8009564 <ld_word>
 8009d74:	4603      	mov	r3, r0
 8009d76:	617b      	str	r3, [r7, #20]
			break;
 8009d78:	e030      	b.n	8009ddc <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009d7a:	693b      	ldr	r3, [r7, #16]
 8009d7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009d7e:	693b      	ldr	r3, [r7, #16]
 8009d80:	899b      	ldrh	r3, [r3, #12]
 8009d82:	089b      	lsrs	r3, r3, #2
 8009d84:	b29b      	uxth	r3, r3
 8009d86:	4619      	mov	r1, r3
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8009d8e:	4413      	add	r3, r2
 8009d90:	4619      	mov	r1, r3
 8009d92:	6938      	ldr	r0, [r7, #16]
 8009d94:	f7ff fe96 	bl	8009ac4 <move_window>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d11d      	bne.n	8009dda <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	009b      	lsls	r3, r3, #2
 8009da8:	693a      	ldr	r2, [r7, #16]
 8009daa:	8992      	ldrh	r2, [r2, #12]
 8009dac:	fbb3 f0f2 	udiv	r0, r3, r2
 8009db0:	fb00 f202 	mul.w	r2, r0, r2
 8009db4:	1a9b      	subs	r3, r3, r2
 8009db6:	440b      	add	r3, r1
 8009db8:	4618      	mov	r0, r3
 8009dba:	f7ff fbeb 	bl	8009594 <ld_dword>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009dc4:	617b      	str	r3, [r7, #20]
			break;
 8009dc6:	e009      	b.n	8009ddc <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009dc8:	2301      	movs	r3, #1
 8009dca:	617b      	str	r3, [r7, #20]
 8009dcc:	e006      	b.n	8009ddc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009dce:	bf00      	nop
 8009dd0:	e004      	b.n	8009ddc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009dd2:	bf00      	nop
 8009dd4:	e002      	b.n	8009ddc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009dd6:	bf00      	nop
 8009dd8:	e000      	b.n	8009ddc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009dda:	bf00      	nop
		}
	}

	return val;
 8009ddc:	697b      	ldr	r3, [r7, #20]
}
 8009dde:	4618      	mov	r0, r3
 8009de0:	3718      	adds	r7, #24
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}

08009de6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009de6:	b590      	push	{r4, r7, lr}
 8009de8:	b089      	sub	sp, #36	; 0x24
 8009dea:	af00      	add	r7, sp, #0
 8009dec:	60f8      	str	r0, [r7, #12]
 8009dee:	60b9      	str	r1, [r7, #8]
 8009df0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009df2:	2302      	movs	r3, #2
 8009df4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	2b01      	cmp	r3, #1
 8009dfa:	f240 8102 	bls.w	800a002 <put_fat+0x21c>
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	69db      	ldr	r3, [r3, #28]
 8009e02:	68ba      	ldr	r2, [r7, #8]
 8009e04:	429a      	cmp	r2, r3
 8009e06:	f080 80fc 	bcs.w	800a002 <put_fat+0x21c>
		switch (fs->fs_type) {
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	781b      	ldrb	r3, [r3, #0]
 8009e0e:	2b03      	cmp	r3, #3
 8009e10:	f000 80b6 	beq.w	8009f80 <put_fat+0x19a>
 8009e14:	2b03      	cmp	r3, #3
 8009e16:	f300 80fd 	bgt.w	800a014 <put_fat+0x22e>
 8009e1a:	2b01      	cmp	r3, #1
 8009e1c:	d003      	beq.n	8009e26 <put_fat+0x40>
 8009e1e:	2b02      	cmp	r3, #2
 8009e20:	f000 8083 	beq.w	8009f2a <put_fat+0x144>
 8009e24:	e0f6      	b.n	800a014 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	61bb      	str	r3, [r7, #24]
 8009e2a:	69bb      	ldr	r3, [r7, #24]
 8009e2c:	085b      	lsrs	r3, r3, #1
 8009e2e:	69ba      	ldr	r2, [r7, #24]
 8009e30:	4413      	add	r3, r2
 8009e32:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	899b      	ldrh	r3, [r3, #12]
 8009e3c:	4619      	mov	r1, r3
 8009e3e:	69bb      	ldr	r3, [r7, #24]
 8009e40:	fbb3 f3f1 	udiv	r3, r3, r1
 8009e44:	4413      	add	r3, r2
 8009e46:	4619      	mov	r1, r3
 8009e48:	68f8      	ldr	r0, [r7, #12]
 8009e4a:	f7ff fe3b 	bl	8009ac4 <move_window>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009e52:	7ffb      	ldrb	r3, [r7, #31]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	f040 80d6 	bne.w	800a006 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009e60:	69bb      	ldr	r3, [r7, #24]
 8009e62:	1c5a      	adds	r2, r3, #1
 8009e64:	61ba      	str	r2, [r7, #24]
 8009e66:	68fa      	ldr	r2, [r7, #12]
 8009e68:	8992      	ldrh	r2, [r2, #12]
 8009e6a:	fbb3 f0f2 	udiv	r0, r3, r2
 8009e6e:	fb00 f202 	mul.w	r2, r0, r2
 8009e72:	1a9b      	subs	r3, r3, r2
 8009e74:	440b      	add	r3, r1
 8009e76:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	f003 0301 	and.w	r3, r3, #1
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d00d      	beq.n	8009e9e <put_fat+0xb8>
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	781b      	ldrb	r3, [r3, #0]
 8009e86:	b25b      	sxtb	r3, r3
 8009e88:	f003 030f 	and.w	r3, r3, #15
 8009e8c:	b25a      	sxtb	r2, r3
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	b2db      	uxtb	r3, r3
 8009e92:	011b      	lsls	r3, r3, #4
 8009e94:	b25b      	sxtb	r3, r3
 8009e96:	4313      	orrs	r3, r2
 8009e98:	b25b      	sxtb	r3, r3
 8009e9a:	b2db      	uxtb	r3, r3
 8009e9c:	e001      	b.n	8009ea2 <put_fat+0xbc>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	b2db      	uxtb	r3, r3
 8009ea2:	697a      	ldr	r2, [r7, #20]
 8009ea4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	2201      	movs	r2, #1
 8009eaa:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	899b      	ldrh	r3, [r3, #12]
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	69bb      	ldr	r3, [r7, #24]
 8009eb8:	fbb3 f3f1 	udiv	r3, r3, r1
 8009ebc:	4413      	add	r3, r2
 8009ebe:	4619      	mov	r1, r3
 8009ec0:	68f8      	ldr	r0, [r7, #12]
 8009ec2:	f7ff fdff 	bl	8009ac4 <move_window>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009eca:	7ffb      	ldrb	r3, [r7, #31]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	f040 809c 	bne.w	800a00a <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	899b      	ldrh	r3, [r3, #12]
 8009edc:	461a      	mov	r2, r3
 8009ede:	69bb      	ldr	r3, [r7, #24]
 8009ee0:	fbb3 f0f2 	udiv	r0, r3, r2
 8009ee4:	fb00 f202 	mul.w	r2, r0, r2
 8009ee8:	1a9b      	subs	r3, r3, r2
 8009eea:	440b      	add	r3, r1
 8009eec:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	f003 0301 	and.w	r3, r3, #1
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d003      	beq.n	8009f00 <put_fat+0x11a>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	091b      	lsrs	r3, r3, #4
 8009efc:	b2db      	uxtb	r3, r3
 8009efe:	e00e      	b.n	8009f1e <put_fat+0x138>
 8009f00:	697b      	ldr	r3, [r7, #20]
 8009f02:	781b      	ldrb	r3, [r3, #0]
 8009f04:	b25b      	sxtb	r3, r3
 8009f06:	f023 030f 	bic.w	r3, r3, #15
 8009f0a:	b25a      	sxtb	r2, r3
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	0a1b      	lsrs	r3, r3, #8
 8009f10:	b25b      	sxtb	r3, r3
 8009f12:	f003 030f 	and.w	r3, r3, #15
 8009f16:	b25b      	sxtb	r3, r3
 8009f18:	4313      	orrs	r3, r2
 8009f1a:	b25b      	sxtb	r3, r3
 8009f1c:	b2db      	uxtb	r3, r3
 8009f1e:	697a      	ldr	r2, [r7, #20]
 8009f20:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	2201      	movs	r2, #1
 8009f26:	70da      	strb	r2, [r3, #3]
			break;
 8009f28:	e074      	b.n	800a014 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	899b      	ldrh	r3, [r3, #12]
 8009f32:	085b      	lsrs	r3, r3, #1
 8009f34:	b29b      	uxth	r3, r3
 8009f36:	4619      	mov	r1, r3
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8009f3e:	4413      	add	r3, r2
 8009f40:	4619      	mov	r1, r3
 8009f42:	68f8      	ldr	r0, [r7, #12]
 8009f44:	f7ff fdbe 	bl	8009ac4 <move_window>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009f4c:	7ffb      	ldrb	r3, [r7, #31]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d15d      	bne.n	800a00e <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	005b      	lsls	r3, r3, #1
 8009f5c:	68fa      	ldr	r2, [r7, #12]
 8009f5e:	8992      	ldrh	r2, [r2, #12]
 8009f60:	fbb3 f0f2 	udiv	r0, r3, r2
 8009f64:	fb00 f202 	mul.w	r2, r0, r2
 8009f68:	1a9b      	subs	r3, r3, r2
 8009f6a:	440b      	add	r3, r1
 8009f6c:	687a      	ldr	r2, [r7, #4]
 8009f6e:	b292      	uxth	r2, r2
 8009f70:	4611      	mov	r1, r2
 8009f72:	4618      	mov	r0, r3
 8009f74:	f7ff fb31 	bl	80095da <st_word>
			fs->wflag = 1;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	2201      	movs	r2, #1
 8009f7c:	70da      	strb	r2, [r3, #3]
			break;
 8009f7e:	e049      	b.n	800a014 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	899b      	ldrh	r3, [r3, #12]
 8009f88:	089b      	lsrs	r3, r3, #2
 8009f8a:	b29b      	uxth	r3, r3
 8009f8c:	4619      	mov	r1, r3
 8009f8e:	68bb      	ldr	r3, [r7, #8]
 8009f90:	fbb3 f3f1 	udiv	r3, r3, r1
 8009f94:	4413      	add	r3, r2
 8009f96:	4619      	mov	r1, r3
 8009f98:	68f8      	ldr	r0, [r7, #12]
 8009f9a:	f7ff fd93 	bl	8009ac4 <move_window>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009fa2:	7ffb      	ldrb	r3, [r7, #31]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d134      	bne.n	800a012 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	009b      	lsls	r3, r3, #2
 8009fb8:	68fa      	ldr	r2, [r7, #12]
 8009fba:	8992      	ldrh	r2, [r2, #12]
 8009fbc:	fbb3 f0f2 	udiv	r0, r3, r2
 8009fc0:	fb00 f202 	mul.w	r2, r0, r2
 8009fc4:	1a9b      	subs	r3, r3, r2
 8009fc6:	440b      	add	r3, r1
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f7ff fae3 	bl	8009594 <ld_dword>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009fd4:	4323      	orrs	r3, r4
 8009fd6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	009b      	lsls	r3, r3, #2
 8009fe2:	68fa      	ldr	r2, [r7, #12]
 8009fe4:	8992      	ldrh	r2, [r2, #12]
 8009fe6:	fbb3 f0f2 	udiv	r0, r3, r2
 8009fea:	fb00 f202 	mul.w	r2, r0, r2
 8009fee:	1a9b      	subs	r3, r3, r2
 8009ff0:	440b      	add	r3, r1
 8009ff2:	6879      	ldr	r1, [r7, #4]
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	f7ff fb0b 	bl	8009610 <st_dword>
			fs->wflag = 1;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	2201      	movs	r2, #1
 8009ffe:	70da      	strb	r2, [r3, #3]
			break;
 800a000:	e008      	b.n	800a014 <put_fat+0x22e>
		}
	}
 800a002:	bf00      	nop
 800a004:	e006      	b.n	800a014 <put_fat+0x22e>
			if (res != FR_OK) break;
 800a006:	bf00      	nop
 800a008:	e004      	b.n	800a014 <put_fat+0x22e>
			if (res != FR_OK) break;
 800a00a:	bf00      	nop
 800a00c:	e002      	b.n	800a014 <put_fat+0x22e>
			if (res != FR_OK) break;
 800a00e:	bf00      	nop
 800a010:	e000      	b.n	800a014 <put_fat+0x22e>
			if (res != FR_OK) break;
 800a012:	bf00      	nop
	return res;
 800a014:	7ffb      	ldrb	r3, [r7, #31]
}
 800a016:	4618      	mov	r0, r3
 800a018:	3724      	adds	r7, #36	; 0x24
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd90      	pop	{r4, r7, pc}

0800a01e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a01e:	b580      	push	{r7, lr}
 800a020:	b088      	sub	sp, #32
 800a022:	af00      	add	r7, sp, #0
 800a024:	60f8      	str	r0, [r7, #12]
 800a026:	60b9      	str	r1, [r7, #8]
 800a028:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a02a:	2300      	movs	r3, #0
 800a02c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	2b01      	cmp	r3, #1
 800a038:	d904      	bls.n	800a044 <remove_chain+0x26>
 800a03a:	69bb      	ldr	r3, [r7, #24]
 800a03c:	69db      	ldr	r3, [r3, #28]
 800a03e:	68ba      	ldr	r2, [r7, #8]
 800a040:	429a      	cmp	r2, r3
 800a042:	d301      	bcc.n	800a048 <remove_chain+0x2a>
 800a044:	2302      	movs	r3, #2
 800a046:	e04b      	b.n	800a0e0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d00c      	beq.n	800a068 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a04e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a052:	6879      	ldr	r1, [r7, #4]
 800a054:	69b8      	ldr	r0, [r7, #24]
 800a056:	f7ff fec6 	bl	8009de6 <put_fat>
 800a05a:	4603      	mov	r3, r0
 800a05c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a05e:	7ffb      	ldrb	r3, [r7, #31]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d001      	beq.n	800a068 <remove_chain+0x4a>
 800a064:	7ffb      	ldrb	r3, [r7, #31]
 800a066:	e03b      	b.n	800a0e0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a068:	68b9      	ldr	r1, [r7, #8]
 800a06a:	68f8      	ldr	r0, [r7, #12]
 800a06c:	f7ff fde7 	bl	8009c3e <get_fat>
 800a070:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d031      	beq.n	800a0dc <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	2b01      	cmp	r3, #1
 800a07c:	d101      	bne.n	800a082 <remove_chain+0x64>
 800a07e:	2302      	movs	r3, #2
 800a080:	e02e      	b.n	800a0e0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a088:	d101      	bne.n	800a08e <remove_chain+0x70>
 800a08a:	2301      	movs	r3, #1
 800a08c:	e028      	b.n	800a0e0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a08e:	2200      	movs	r2, #0
 800a090:	68b9      	ldr	r1, [r7, #8]
 800a092:	69b8      	ldr	r0, [r7, #24]
 800a094:	f7ff fea7 	bl	8009de6 <put_fat>
 800a098:	4603      	mov	r3, r0
 800a09a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a09c:	7ffb      	ldrb	r3, [r7, #31]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d001      	beq.n	800a0a6 <remove_chain+0x88>
 800a0a2:	7ffb      	ldrb	r3, [r7, #31]
 800a0a4:	e01c      	b.n	800a0e0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a0a6:	69bb      	ldr	r3, [r7, #24]
 800a0a8:	699a      	ldr	r2, [r3, #24]
 800a0aa:	69bb      	ldr	r3, [r7, #24]
 800a0ac:	69db      	ldr	r3, [r3, #28]
 800a0ae:	3b02      	subs	r3, #2
 800a0b0:	429a      	cmp	r2, r3
 800a0b2:	d20b      	bcs.n	800a0cc <remove_chain+0xae>
			fs->free_clst++;
 800a0b4:	69bb      	ldr	r3, [r7, #24]
 800a0b6:	699b      	ldr	r3, [r3, #24]
 800a0b8:	1c5a      	adds	r2, r3, #1
 800a0ba:	69bb      	ldr	r3, [r7, #24]
 800a0bc:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800a0be:	69bb      	ldr	r3, [r7, #24]
 800a0c0:	791b      	ldrb	r3, [r3, #4]
 800a0c2:	f043 0301 	orr.w	r3, r3, #1
 800a0c6:	b2da      	uxtb	r2, r3
 800a0c8:	69bb      	ldr	r3, [r7, #24]
 800a0ca:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a0cc:	697b      	ldr	r3, [r7, #20]
 800a0ce:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a0d0:	69bb      	ldr	r3, [r7, #24]
 800a0d2:	69db      	ldr	r3, [r3, #28]
 800a0d4:	68ba      	ldr	r2, [r7, #8]
 800a0d6:	429a      	cmp	r2, r3
 800a0d8:	d3c6      	bcc.n	800a068 <remove_chain+0x4a>
 800a0da:	e000      	b.n	800a0de <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a0dc:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a0de:	2300      	movs	r3, #0
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	3720      	adds	r7, #32
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}

0800a0e8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b088      	sub	sp, #32
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
 800a0f0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d10d      	bne.n	800a11a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	695b      	ldr	r3, [r3, #20]
 800a102:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a104:	69bb      	ldr	r3, [r7, #24]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d004      	beq.n	800a114 <create_chain+0x2c>
 800a10a:	693b      	ldr	r3, [r7, #16]
 800a10c:	69db      	ldr	r3, [r3, #28]
 800a10e:	69ba      	ldr	r2, [r7, #24]
 800a110:	429a      	cmp	r2, r3
 800a112:	d31b      	bcc.n	800a14c <create_chain+0x64>
 800a114:	2301      	movs	r3, #1
 800a116:	61bb      	str	r3, [r7, #24]
 800a118:	e018      	b.n	800a14c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a11a:	6839      	ldr	r1, [r7, #0]
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f7ff fd8e 	bl	8009c3e <get_fat>
 800a122:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	2b01      	cmp	r3, #1
 800a128:	d801      	bhi.n	800a12e <create_chain+0x46>
 800a12a:	2301      	movs	r3, #1
 800a12c:	e070      	b.n	800a210 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a134:	d101      	bne.n	800a13a <create_chain+0x52>
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	e06a      	b.n	800a210 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a13a:	693b      	ldr	r3, [r7, #16]
 800a13c:	69db      	ldr	r3, [r3, #28]
 800a13e:	68fa      	ldr	r2, [r7, #12]
 800a140:	429a      	cmp	r2, r3
 800a142:	d201      	bcs.n	800a148 <create_chain+0x60>
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	e063      	b.n	800a210 <create_chain+0x128>
		scl = clst;
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a14c:	69bb      	ldr	r3, [r7, #24]
 800a14e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a150:	69fb      	ldr	r3, [r7, #28]
 800a152:	3301      	adds	r3, #1
 800a154:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a156:	693b      	ldr	r3, [r7, #16]
 800a158:	69db      	ldr	r3, [r3, #28]
 800a15a:	69fa      	ldr	r2, [r7, #28]
 800a15c:	429a      	cmp	r2, r3
 800a15e:	d307      	bcc.n	800a170 <create_chain+0x88>
				ncl = 2;
 800a160:	2302      	movs	r3, #2
 800a162:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a164:	69fa      	ldr	r2, [r7, #28]
 800a166:	69bb      	ldr	r3, [r7, #24]
 800a168:	429a      	cmp	r2, r3
 800a16a:	d901      	bls.n	800a170 <create_chain+0x88>
 800a16c:	2300      	movs	r3, #0
 800a16e:	e04f      	b.n	800a210 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a170:	69f9      	ldr	r1, [r7, #28]
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f7ff fd63 	bl	8009c3e <get_fat>
 800a178:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d00e      	beq.n	800a19e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	2b01      	cmp	r3, #1
 800a184:	d003      	beq.n	800a18e <create_chain+0xa6>
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a18c:	d101      	bne.n	800a192 <create_chain+0xaa>
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	e03e      	b.n	800a210 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a192:	69fa      	ldr	r2, [r7, #28]
 800a194:	69bb      	ldr	r3, [r7, #24]
 800a196:	429a      	cmp	r2, r3
 800a198:	d1da      	bne.n	800a150 <create_chain+0x68>
 800a19a:	2300      	movs	r3, #0
 800a19c:	e038      	b.n	800a210 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a19e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a1a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a1a4:	69f9      	ldr	r1, [r7, #28]
 800a1a6:	6938      	ldr	r0, [r7, #16]
 800a1a8:	f7ff fe1d 	bl	8009de6 <put_fat>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a1b0:	7dfb      	ldrb	r3, [r7, #23]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d109      	bne.n	800a1ca <create_chain+0xe2>
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d006      	beq.n	800a1ca <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a1bc:	69fa      	ldr	r2, [r7, #28]
 800a1be:	6839      	ldr	r1, [r7, #0]
 800a1c0:	6938      	ldr	r0, [r7, #16]
 800a1c2:	f7ff fe10 	bl	8009de6 <put_fat>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a1ca:	7dfb      	ldrb	r3, [r7, #23]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d116      	bne.n	800a1fe <create_chain+0x116>
		fs->last_clst = ncl;
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	69fa      	ldr	r2, [r7, #28]
 800a1d4:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	699a      	ldr	r2, [r3, #24]
 800a1da:	693b      	ldr	r3, [r7, #16]
 800a1dc:	69db      	ldr	r3, [r3, #28]
 800a1de:	3b02      	subs	r3, #2
 800a1e0:	429a      	cmp	r2, r3
 800a1e2:	d804      	bhi.n	800a1ee <create_chain+0x106>
 800a1e4:	693b      	ldr	r3, [r7, #16]
 800a1e6:	699b      	ldr	r3, [r3, #24]
 800a1e8:	1e5a      	subs	r2, r3, #1
 800a1ea:	693b      	ldr	r3, [r7, #16]
 800a1ec:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800a1ee:	693b      	ldr	r3, [r7, #16]
 800a1f0:	791b      	ldrb	r3, [r3, #4]
 800a1f2:	f043 0301 	orr.w	r3, r3, #1
 800a1f6:	b2da      	uxtb	r2, r3
 800a1f8:	693b      	ldr	r3, [r7, #16]
 800a1fa:	711a      	strb	r2, [r3, #4]
 800a1fc:	e007      	b.n	800a20e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a1fe:	7dfb      	ldrb	r3, [r7, #23]
 800a200:	2b01      	cmp	r3, #1
 800a202:	d102      	bne.n	800a20a <create_chain+0x122>
 800a204:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a208:	e000      	b.n	800a20c <create_chain+0x124>
 800a20a:	2301      	movs	r3, #1
 800a20c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a20e:	69fb      	ldr	r3, [r7, #28]
}
 800a210:	4618      	mov	r0, r3
 800a212:	3720      	adds	r7, #32
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}

0800a218 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a218:	b480      	push	{r7}
 800a21a:	b087      	sub	sp, #28
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
 800a220:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a22c:	3304      	adds	r3, #4
 800a22e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	899b      	ldrh	r3, [r3, #12]
 800a234:	461a      	mov	r2, r3
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	fbb3 f3f2 	udiv	r3, r3, r2
 800a23c:	68fa      	ldr	r2, [r7, #12]
 800a23e:	8952      	ldrh	r2, [r2, #10]
 800a240:	fbb3 f3f2 	udiv	r3, r3, r2
 800a244:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	1d1a      	adds	r2, r3, #4
 800a24a:	613a      	str	r2, [r7, #16]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d101      	bne.n	800a25a <clmt_clust+0x42>
 800a256:	2300      	movs	r3, #0
 800a258:	e010      	b.n	800a27c <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800a25a:	697a      	ldr	r2, [r7, #20]
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	429a      	cmp	r2, r3
 800a260:	d307      	bcc.n	800a272 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800a262:	697a      	ldr	r2, [r7, #20]
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	1ad3      	subs	r3, r2, r3
 800a268:	617b      	str	r3, [r7, #20]
 800a26a:	693b      	ldr	r3, [r7, #16]
 800a26c:	3304      	adds	r3, #4
 800a26e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a270:	e7e9      	b.n	800a246 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800a272:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	681a      	ldr	r2, [r3, #0]
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	4413      	add	r3, r2
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	371c      	adds	r7, #28
 800a280:	46bd      	mov	sp, r7
 800a282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a286:	4770      	bx	lr

0800a288 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b086      	sub	sp, #24
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
 800a290:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a29e:	d204      	bcs.n	800a2aa <dir_sdi+0x22>
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	f003 031f 	and.w	r3, r3, #31
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d001      	beq.n	800a2ae <dir_sdi+0x26>
		return FR_INT_ERR;
 800a2aa:	2302      	movs	r3, #2
 800a2ac:	e071      	b.n	800a392 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	683a      	ldr	r2, [r7, #0]
 800a2b2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	689b      	ldr	r3, [r3, #8]
 800a2b8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d106      	bne.n	800a2ce <dir_sdi+0x46>
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	781b      	ldrb	r3, [r3, #0]
 800a2c4:	2b02      	cmp	r3, #2
 800a2c6:	d902      	bls.n	800a2ce <dir_sdi+0x46>
		clst = fs->dirbase;
 800a2c8:	693b      	ldr	r3, [r7, #16]
 800a2ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2cc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a2ce:	697b      	ldr	r3, [r7, #20]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d10c      	bne.n	800a2ee <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	095b      	lsrs	r3, r3, #5
 800a2d8:	693a      	ldr	r2, [r7, #16]
 800a2da:	8912      	ldrh	r2, [r2, #8]
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d301      	bcc.n	800a2e4 <dir_sdi+0x5c>
 800a2e0:	2302      	movs	r3, #2
 800a2e2:	e056      	b.n	800a392 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800a2e4:	693b      	ldr	r3, [r7, #16]
 800a2e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	61da      	str	r2, [r3, #28]
 800a2ec:	e02d      	b.n	800a34a <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a2ee:	693b      	ldr	r3, [r7, #16]
 800a2f0:	895b      	ldrh	r3, [r3, #10]
 800a2f2:	461a      	mov	r2, r3
 800a2f4:	693b      	ldr	r3, [r7, #16]
 800a2f6:	899b      	ldrh	r3, [r3, #12]
 800a2f8:	fb02 f303 	mul.w	r3, r2, r3
 800a2fc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a2fe:	e019      	b.n	800a334 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6979      	ldr	r1, [r7, #20]
 800a304:	4618      	mov	r0, r3
 800a306:	f7ff fc9a 	bl	8009c3e <get_fat>
 800a30a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a30c:	697b      	ldr	r3, [r7, #20]
 800a30e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a312:	d101      	bne.n	800a318 <dir_sdi+0x90>
 800a314:	2301      	movs	r3, #1
 800a316:	e03c      	b.n	800a392 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a318:	697b      	ldr	r3, [r7, #20]
 800a31a:	2b01      	cmp	r3, #1
 800a31c:	d904      	bls.n	800a328 <dir_sdi+0xa0>
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	69db      	ldr	r3, [r3, #28]
 800a322:	697a      	ldr	r2, [r7, #20]
 800a324:	429a      	cmp	r2, r3
 800a326:	d301      	bcc.n	800a32c <dir_sdi+0xa4>
 800a328:	2302      	movs	r3, #2
 800a32a:	e032      	b.n	800a392 <dir_sdi+0x10a>
			ofs -= csz;
 800a32c:	683a      	ldr	r2, [r7, #0]
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	1ad3      	subs	r3, r2, r3
 800a332:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a334:	683a      	ldr	r2, [r7, #0]
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	429a      	cmp	r2, r3
 800a33a:	d2e1      	bcs.n	800a300 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800a33c:	6979      	ldr	r1, [r7, #20]
 800a33e:	6938      	ldr	r0, [r7, #16]
 800a340:	f7ff fc5e 	bl	8009c00 <clust2sect>
 800a344:	4602      	mov	r2, r0
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	697a      	ldr	r2, [r7, #20]
 800a34e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	69db      	ldr	r3, [r3, #28]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d101      	bne.n	800a35c <dir_sdi+0xd4>
 800a358:	2302      	movs	r3, #2
 800a35a:	e01a      	b.n	800a392 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	69da      	ldr	r2, [r3, #28]
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	899b      	ldrh	r3, [r3, #12]
 800a364:	4619      	mov	r1, r3
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	fbb3 f3f1 	udiv	r3, r3, r1
 800a36c:	441a      	add	r2, r3
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a372:	693b      	ldr	r3, [r7, #16]
 800a374:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a378:	693b      	ldr	r3, [r7, #16]
 800a37a:	899b      	ldrh	r3, [r3, #12]
 800a37c:	461a      	mov	r2, r3
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	fbb3 f0f2 	udiv	r0, r3, r2
 800a384:	fb00 f202 	mul.w	r2, r0, r2
 800a388:	1a9b      	subs	r3, r3, r2
 800a38a:	18ca      	adds	r2, r1, r3
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a390:	2300      	movs	r3, #0
}
 800a392:	4618      	mov	r0, r3
 800a394:	3718      	adds	r7, #24
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}

0800a39a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a39a:	b580      	push	{r7, lr}
 800a39c:	b086      	sub	sp, #24
 800a39e:	af00      	add	r7, sp, #0
 800a3a0:	6078      	str	r0, [r7, #4]
 800a3a2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	695b      	ldr	r3, [r3, #20]
 800a3ae:	3320      	adds	r3, #32
 800a3b0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	69db      	ldr	r3, [r3, #28]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d003      	beq.n	800a3c2 <dir_next+0x28>
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a3c0:	d301      	bcc.n	800a3c6 <dir_next+0x2c>
 800a3c2:	2304      	movs	r3, #4
 800a3c4:	e0bb      	b.n	800a53e <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	899b      	ldrh	r3, [r3, #12]
 800a3ca:	461a      	mov	r2, r3
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	fbb3 f1f2 	udiv	r1, r3, r2
 800a3d2:	fb01 f202 	mul.w	r2, r1, r2
 800a3d6:	1a9b      	subs	r3, r3, r2
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	f040 809d 	bne.w	800a518 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	69db      	ldr	r3, [r3, #28]
 800a3e2:	1c5a      	adds	r2, r3, #1
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	699b      	ldr	r3, [r3, #24]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d10b      	bne.n	800a408 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	095b      	lsrs	r3, r3, #5
 800a3f4:	68fa      	ldr	r2, [r7, #12]
 800a3f6:	8912      	ldrh	r2, [r2, #8]
 800a3f8:	4293      	cmp	r3, r2
 800a3fa:	f0c0 808d 	bcc.w	800a518 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2200      	movs	r2, #0
 800a402:	61da      	str	r2, [r3, #28]
 800a404:	2304      	movs	r3, #4
 800a406:	e09a      	b.n	800a53e <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	899b      	ldrh	r3, [r3, #12]
 800a40c:	461a      	mov	r2, r3
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	fbb3 f3f2 	udiv	r3, r3, r2
 800a414:	68fa      	ldr	r2, [r7, #12]
 800a416:	8952      	ldrh	r2, [r2, #10]
 800a418:	3a01      	subs	r2, #1
 800a41a:	4013      	ands	r3, r2
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d17b      	bne.n	800a518 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a420:	687a      	ldr	r2, [r7, #4]
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	699b      	ldr	r3, [r3, #24]
 800a426:	4619      	mov	r1, r3
 800a428:	4610      	mov	r0, r2
 800a42a:	f7ff fc08 	bl	8009c3e <get_fat>
 800a42e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a430:	697b      	ldr	r3, [r7, #20]
 800a432:	2b01      	cmp	r3, #1
 800a434:	d801      	bhi.n	800a43a <dir_next+0xa0>
 800a436:	2302      	movs	r3, #2
 800a438:	e081      	b.n	800a53e <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a43a:	697b      	ldr	r3, [r7, #20]
 800a43c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a440:	d101      	bne.n	800a446 <dir_next+0xac>
 800a442:	2301      	movs	r3, #1
 800a444:	e07b      	b.n	800a53e <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	69db      	ldr	r3, [r3, #28]
 800a44a:	697a      	ldr	r2, [r7, #20]
 800a44c:	429a      	cmp	r2, r3
 800a44e:	d359      	bcc.n	800a504 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d104      	bne.n	800a460 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2200      	movs	r2, #0
 800a45a:	61da      	str	r2, [r3, #28]
 800a45c:	2304      	movs	r3, #4
 800a45e:	e06e      	b.n	800a53e <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a460:	687a      	ldr	r2, [r7, #4]
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	699b      	ldr	r3, [r3, #24]
 800a466:	4619      	mov	r1, r3
 800a468:	4610      	mov	r0, r2
 800a46a:	f7ff fe3d 	bl	800a0e8 <create_chain>
 800a46e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a470:	697b      	ldr	r3, [r7, #20]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d101      	bne.n	800a47a <dir_next+0xe0>
 800a476:	2307      	movs	r3, #7
 800a478:	e061      	b.n	800a53e <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	2b01      	cmp	r3, #1
 800a47e:	d101      	bne.n	800a484 <dir_next+0xea>
 800a480:	2302      	movs	r3, #2
 800a482:	e05c      	b.n	800a53e <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a484:	697b      	ldr	r3, [r7, #20]
 800a486:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a48a:	d101      	bne.n	800a490 <dir_next+0xf6>
 800a48c:	2301      	movs	r3, #1
 800a48e:	e056      	b.n	800a53e <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a490:	68f8      	ldr	r0, [r7, #12]
 800a492:	f7ff fad3 	bl	8009a3c <sync_window>
 800a496:	4603      	mov	r3, r0
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d001      	beq.n	800a4a0 <dir_next+0x106>
 800a49c:	2301      	movs	r3, #1
 800a49e:	e04e      	b.n	800a53e <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	899b      	ldrh	r3, [r3, #12]
 800a4aa:	461a      	mov	r2, r3
 800a4ac:	2100      	movs	r1, #0
 800a4ae:	f7ff f8fc 	bl	80096aa <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	613b      	str	r3, [r7, #16]
 800a4b6:	6979      	ldr	r1, [r7, #20]
 800a4b8:	68f8      	ldr	r0, [r7, #12]
 800a4ba:	f7ff fba1 	bl	8009c00 <clust2sect>
 800a4be:	4602      	mov	r2, r0
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	635a      	str	r2, [r3, #52]	; 0x34
 800a4c4:	e012      	b.n	800a4ec <dir_next+0x152>
						fs->wflag = 1;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	2201      	movs	r2, #1
 800a4ca:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a4cc:	68f8      	ldr	r0, [r7, #12]
 800a4ce:	f7ff fab5 	bl	8009a3c <sync_window>
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d001      	beq.n	800a4dc <dir_next+0x142>
 800a4d8:	2301      	movs	r3, #1
 800a4da:	e030      	b.n	800a53e <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	3301      	adds	r3, #1
 800a4e0:	613b      	str	r3, [r7, #16]
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4e6:	1c5a      	adds	r2, r3, #1
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	635a      	str	r2, [r3, #52]	; 0x34
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	895b      	ldrh	r3, [r3, #10]
 800a4f0:	461a      	mov	r2, r3
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	4293      	cmp	r3, r2
 800a4f6:	d3e6      	bcc.n	800a4c6 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a4fc:	693b      	ldr	r3, [r7, #16]
 800a4fe:	1ad2      	subs	r2, r2, r3
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	697a      	ldr	r2, [r7, #20]
 800a508:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a50a:	6979      	ldr	r1, [r7, #20]
 800a50c:	68f8      	ldr	r0, [r7, #12]
 800a50e:	f7ff fb77 	bl	8009c00 <clust2sect>
 800a512:	4602      	mov	r2, r0
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	68ba      	ldr	r2, [r7, #8]
 800a51c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	899b      	ldrh	r3, [r3, #12]
 800a528:	461a      	mov	r2, r3
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	fbb3 f0f2 	udiv	r0, r3, r2
 800a530:	fb00 f202 	mul.w	r2, r0, r2
 800a534:	1a9b      	subs	r3, r3, r2
 800a536:	18ca      	adds	r2, r1, r3
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a53c:	2300      	movs	r3, #0
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3718      	adds	r7, #24
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}

0800a546 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a546:	b580      	push	{r7, lr}
 800a548:	b086      	sub	sp, #24
 800a54a:	af00      	add	r7, sp, #0
 800a54c:	6078      	str	r0, [r7, #4]
 800a54e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a556:	2100      	movs	r1, #0
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f7ff fe95 	bl	800a288 <dir_sdi>
 800a55e:	4603      	mov	r3, r0
 800a560:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a562:	7dfb      	ldrb	r3, [r7, #23]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d12b      	bne.n	800a5c0 <dir_alloc+0x7a>
		n = 0;
 800a568:	2300      	movs	r3, #0
 800a56a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	69db      	ldr	r3, [r3, #28]
 800a570:	4619      	mov	r1, r3
 800a572:	68f8      	ldr	r0, [r7, #12]
 800a574:	f7ff faa6 	bl	8009ac4 <move_window>
 800a578:	4603      	mov	r3, r0
 800a57a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a57c:	7dfb      	ldrb	r3, [r7, #23]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d11d      	bne.n	800a5be <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6a1b      	ldr	r3, [r3, #32]
 800a586:	781b      	ldrb	r3, [r3, #0]
 800a588:	2be5      	cmp	r3, #229	; 0xe5
 800a58a:	d004      	beq.n	800a596 <dir_alloc+0x50>
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6a1b      	ldr	r3, [r3, #32]
 800a590:	781b      	ldrb	r3, [r3, #0]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d107      	bne.n	800a5a6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a596:	693b      	ldr	r3, [r7, #16]
 800a598:	3301      	adds	r3, #1
 800a59a:	613b      	str	r3, [r7, #16]
 800a59c:	693a      	ldr	r2, [r7, #16]
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	429a      	cmp	r2, r3
 800a5a2:	d102      	bne.n	800a5aa <dir_alloc+0x64>
 800a5a4:	e00c      	b.n	800a5c0 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a5aa:	2101      	movs	r1, #1
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	f7ff fef4 	bl	800a39a <dir_next>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a5b6:	7dfb      	ldrb	r3, [r7, #23]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d0d7      	beq.n	800a56c <dir_alloc+0x26>
 800a5bc:	e000      	b.n	800a5c0 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a5be:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a5c0:	7dfb      	ldrb	r3, [r7, #23]
 800a5c2:	2b04      	cmp	r3, #4
 800a5c4:	d101      	bne.n	800a5ca <dir_alloc+0x84>
 800a5c6:	2307      	movs	r3, #7
 800a5c8:	75fb      	strb	r3, [r7, #23]
	return res;
 800a5ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	3718      	adds	r7, #24
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}

0800a5d4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b084      	sub	sp, #16
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
 800a5dc:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	331a      	adds	r3, #26
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f7fe ffbe 	bl	8009564 <ld_word>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	781b      	ldrb	r3, [r3, #0]
 800a5f0:	2b03      	cmp	r3, #3
 800a5f2:	d109      	bne.n	800a608 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	3314      	adds	r3, #20
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f7fe ffb3 	bl	8009564 <ld_word>
 800a5fe:	4603      	mov	r3, r0
 800a600:	041b      	lsls	r3, r3, #16
 800a602:	68fa      	ldr	r2, [r7, #12]
 800a604:	4313      	orrs	r3, r2
 800a606:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a608:	68fb      	ldr	r3, [r7, #12]
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3710      	adds	r7, #16
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}

0800a612 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a612:	b580      	push	{r7, lr}
 800a614:	b084      	sub	sp, #16
 800a616:	af00      	add	r7, sp, #0
 800a618:	60f8      	str	r0, [r7, #12]
 800a61a:	60b9      	str	r1, [r7, #8]
 800a61c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	331a      	adds	r3, #26
 800a622:	687a      	ldr	r2, [r7, #4]
 800a624:	b292      	uxth	r2, r2
 800a626:	4611      	mov	r1, r2
 800a628:	4618      	mov	r0, r3
 800a62a:	f7fe ffd6 	bl	80095da <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	781b      	ldrb	r3, [r3, #0]
 800a632:	2b03      	cmp	r3, #3
 800a634:	d109      	bne.n	800a64a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	f103 0214 	add.w	r2, r3, #20
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	0c1b      	lsrs	r3, r3, #16
 800a640:	b29b      	uxth	r3, r3
 800a642:	4619      	mov	r1, r3
 800a644:	4610      	mov	r0, r2
 800a646:	f7fe ffc8 	bl	80095da <st_word>
	}
}
 800a64a:	bf00      	nop
 800a64c:	3710      	adds	r7, #16
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}
	...

0800a654 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800a654:	b590      	push	{r4, r7, lr}
 800a656:	b087      	sub	sp, #28
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
 800a65c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	331a      	adds	r3, #26
 800a662:	4618      	mov	r0, r3
 800a664:	f7fe ff7e 	bl	8009564 <ld_word>
 800a668:	4603      	mov	r3, r0
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d001      	beq.n	800a672 <cmp_lfn+0x1e>
 800a66e:	2300      	movs	r3, #0
 800a670:	e059      	b.n	800a726 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	781b      	ldrb	r3, [r3, #0]
 800a676:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a67a:	1e5a      	subs	r2, r3, #1
 800a67c:	4613      	mov	r3, r2
 800a67e:	005b      	lsls	r3, r3, #1
 800a680:	4413      	add	r3, r2
 800a682:	009b      	lsls	r3, r3, #2
 800a684:	4413      	add	r3, r2
 800a686:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a688:	2301      	movs	r3, #1
 800a68a:	81fb      	strh	r3, [r7, #14]
 800a68c:	2300      	movs	r3, #0
 800a68e:	613b      	str	r3, [r7, #16]
 800a690:	e033      	b.n	800a6fa <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a692:	4a27      	ldr	r2, [pc, #156]	; (800a730 <cmp_lfn+0xdc>)
 800a694:	693b      	ldr	r3, [r7, #16]
 800a696:	4413      	add	r3, r2
 800a698:	781b      	ldrb	r3, [r3, #0]
 800a69a:	461a      	mov	r2, r3
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	4413      	add	r3, r2
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f7fe ff5f 	bl	8009564 <ld_word>
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800a6aa:	89fb      	ldrh	r3, [r7, #14]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d01a      	beq.n	800a6e6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800a6b0:	697b      	ldr	r3, [r7, #20]
 800a6b2:	2bfe      	cmp	r3, #254	; 0xfe
 800a6b4:	d812      	bhi.n	800a6dc <cmp_lfn+0x88>
 800a6b6:	89bb      	ldrh	r3, [r7, #12]
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	f002 fa2f 	bl	800cb1c <ff_wtoupper>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	461c      	mov	r4, r3
 800a6c2:	697b      	ldr	r3, [r7, #20]
 800a6c4:	1c5a      	adds	r2, r3, #1
 800a6c6:	617a      	str	r2, [r7, #20]
 800a6c8:	005b      	lsls	r3, r3, #1
 800a6ca:	687a      	ldr	r2, [r7, #4]
 800a6cc:	4413      	add	r3, r2
 800a6ce:	881b      	ldrh	r3, [r3, #0]
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f002 fa23 	bl	800cb1c <ff_wtoupper>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	429c      	cmp	r4, r3
 800a6da:	d001      	beq.n	800a6e0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800a6dc:	2300      	movs	r3, #0
 800a6de:	e022      	b.n	800a726 <cmp_lfn+0xd2>
			}
			wc = uc;
 800a6e0:	89bb      	ldrh	r3, [r7, #12]
 800a6e2:	81fb      	strh	r3, [r7, #14]
 800a6e4:	e006      	b.n	800a6f4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a6e6:	89bb      	ldrh	r3, [r7, #12]
 800a6e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a6ec:	4293      	cmp	r3, r2
 800a6ee:	d001      	beq.n	800a6f4 <cmp_lfn+0xa0>
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	e018      	b.n	800a726 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	3301      	adds	r3, #1
 800a6f8:	613b      	str	r3, [r7, #16]
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	2b0c      	cmp	r3, #12
 800a6fe:	d9c8      	bls.n	800a692 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	781b      	ldrb	r3, [r3, #0]
 800a704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d00b      	beq.n	800a724 <cmp_lfn+0xd0>
 800a70c:	89fb      	ldrh	r3, [r7, #14]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d008      	beq.n	800a724 <cmp_lfn+0xd0>
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	005b      	lsls	r3, r3, #1
 800a716:	687a      	ldr	r2, [r7, #4]
 800a718:	4413      	add	r3, r2
 800a71a:	881b      	ldrh	r3, [r3, #0]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d001      	beq.n	800a724 <cmp_lfn+0xd0>
 800a720:	2300      	movs	r3, #0
 800a722:	e000      	b.n	800a726 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800a724:	2301      	movs	r3, #1
}
 800a726:	4618      	mov	r0, r3
 800a728:	371c      	adds	r7, #28
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd90      	pop	{r4, r7, pc}
 800a72e:	bf00      	nop
 800a730:	0800e414 	.word	0x0800e414

0800a734 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b086      	sub	sp, #24
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
 800a73c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	331a      	adds	r3, #26
 800a742:	4618      	mov	r0, r3
 800a744:	f7fe ff0e 	bl	8009564 <ld_word>
 800a748:	4603      	mov	r3, r0
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d001      	beq.n	800a752 <pick_lfn+0x1e>
 800a74e:	2300      	movs	r3, #0
 800a750:	e04d      	b.n	800a7ee <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	781b      	ldrb	r3, [r3, #0]
 800a756:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a75a:	1e5a      	subs	r2, r3, #1
 800a75c:	4613      	mov	r3, r2
 800a75e:	005b      	lsls	r3, r3, #1
 800a760:	4413      	add	r3, r2
 800a762:	009b      	lsls	r3, r3, #2
 800a764:	4413      	add	r3, r2
 800a766:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a768:	2301      	movs	r3, #1
 800a76a:	81fb      	strh	r3, [r7, #14]
 800a76c:	2300      	movs	r3, #0
 800a76e:	613b      	str	r3, [r7, #16]
 800a770:	e028      	b.n	800a7c4 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a772:	4a21      	ldr	r2, [pc, #132]	; (800a7f8 <pick_lfn+0xc4>)
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	4413      	add	r3, r2
 800a778:	781b      	ldrb	r3, [r3, #0]
 800a77a:	461a      	mov	r2, r3
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	4413      	add	r3, r2
 800a780:	4618      	mov	r0, r3
 800a782:	f7fe feef 	bl	8009564 <ld_word>
 800a786:	4603      	mov	r3, r0
 800a788:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800a78a:	89fb      	ldrh	r3, [r7, #14]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d00f      	beq.n	800a7b0 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800a790:	697b      	ldr	r3, [r7, #20]
 800a792:	2bfe      	cmp	r3, #254	; 0xfe
 800a794:	d901      	bls.n	800a79a <pick_lfn+0x66>
 800a796:	2300      	movs	r3, #0
 800a798:	e029      	b.n	800a7ee <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800a79a:	89bb      	ldrh	r3, [r7, #12]
 800a79c:	81fb      	strh	r3, [r7, #14]
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	1c5a      	adds	r2, r3, #1
 800a7a2:	617a      	str	r2, [r7, #20]
 800a7a4:	005b      	lsls	r3, r3, #1
 800a7a6:	687a      	ldr	r2, [r7, #4]
 800a7a8:	4413      	add	r3, r2
 800a7aa:	89fa      	ldrh	r2, [r7, #14]
 800a7ac:	801a      	strh	r2, [r3, #0]
 800a7ae:	e006      	b.n	800a7be <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a7b0:	89bb      	ldrh	r3, [r7, #12]
 800a7b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	d001      	beq.n	800a7be <pick_lfn+0x8a>
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	e017      	b.n	800a7ee <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a7be:	693b      	ldr	r3, [r7, #16]
 800a7c0:	3301      	adds	r3, #1
 800a7c2:	613b      	str	r3, [r7, #16]
 800a7c4:	693b      	ldr	r3, [r7, #16]
 800a7c6:	2b0c      	cmp	r3, #12
 800a7c8:	d9d3      	bls.n	800a772 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	781b      	ldrb	r3, [r3, #0]
 800a7ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d00a      	beq.n	800a7ec <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800a7d6:	697b      	ldr	r3, [r7, #20]
 800a7d8:	2bfe      	cmp	r3, #254	; 0xfe
 800a7da:	d901      	bls.n	800a7e0 <pick_lfn+0xac>
 800a7dc:	2300      	movs	r3, #0
 800a7de:	e006      	b.n	800a7ee <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800a7e0:	697b      	ldr	r3, [r7, #20]
 800a7e2:	005b      	lsls	r3, r3, #1
 800a7e4:	687a      	ldr	r2, [r7, #4]
 800a7e6:	4413      	add	r3, r2
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800a7ec:	2301      	movs	r3, #1
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3718      	adds	r7, #24
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}
 800a7f6:	bf00      	nop
 800a7f8:	0800e414 	.word	0x0800e414

0800a7fc <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b088      	sub	sp, #32
 800a800:	af00      	add	r7, sp, #0
 800a802:	60f8      	str	r0, [r7, #12]
 800a804:	60b9      	str	r1, [r7, #8]
 800a806:	4611      	mov	r1, r2
 800a808:	461a      	mov	r2, r3
 800a80a:	460b      	mov	r3, r1
 800a80c:	71fb      	strb	r3, [r7, #7]
 800a80e:	4613      	mov	r3, r2
 800a810:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	330d      	adds	r3, #13
 800a816:	79ba      	ldrb	r2, [r7, #6]
 800a818:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	330b      	adds	r3, #11
 800a81e:	220f      	movs	r2, #15
 800a820:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	330c      	adds	r3, #12
 800a826:	2200      	movs	r2, #0
 800a828:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	331a      	adds	r3, #26
 800a82e:	2100      	movs	r1, #0
 800a830:	4618      	mov	r0, r3
 800a832:	f7fe fed2 	bl	80095da <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800a836:	79fb      	ldrb	r3, [r7, #7]
 800a838:	1e5a      	subs	r2, r3, #1
 800a83a:	4613      	mov	r3, r2
 800a83c:	005b      	lsls	r3, r3, #1
 800a83e:	4413      	add	r3, r2
 800a840:	009b      	lsls	r3, r3, #2
 800a842:	4413      	add	r3, r2
 800a844:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800a846:	2300      	movs	r3, #0
 800a848:	82fb      	strh	r3, [r7, #22]
 800a84a:	2300      	movs	r3, #0
 800a84c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800a84e:	8afb      	ldrh	r3, [r7, #22]
 800a850:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a854:	4293      	cmp	r3, r2
 800a856:	d007      	beq.n	800a868 <put_lfn+0x6c>
 800a858:	69fb      	ldr	r3, [r7, #28]
 800a85a:	1c5a      	adds	r2, r3, #1
 800a85c:	61fa      	str	r2, [r7, #28]
 800a85e:	005b      	lsls	r3, r3, #1
 800a860:	68fa      	ldr	r2, [r7, #12]
 800a862:	4413      	add	r3, r2
 800a864:	881b      	ldrh	r3, [r3, #0]
 800a866:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800a868:	4a17      	ldr	r2, [pc, #92]	; (800a8c8 <put_lfn+0xcc>)
 800a86a:	69bb      	ldr	r3, [r7, #24]
 800a86c:	4413      	add	r3, r2
 800a86e:	781b      	ldrb	r3, [r3, #0]
 800a870:	461a      	mov	r2, r3
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	4413      	add	r3, r2
 800a876:	8afa      	ldrh	r2, [r7, #22]
 800a878:	4611      	mov	r1, r2
 800a87a:	4618      	mov	r0, r3
 800a87c:	f7fe fead 	bl	80095da <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800a880:	8afb      	ldrh	r3, [r7, #22]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d102      	bne.n	800a88c <put_lfn+0x90>
 800a886:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a88a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800a88c:	69bb      	ldr	r3, [r7, #24]
 800a88e:	3301      	adds	r3, #1
 800a890:	61bb      	str	r3, [r7, #24]
 800a892:	69bb      	ldr	r3, [r7, #24]
 800a894:	2b0c      	cmp	r3, #12
 800a896:	d9da      	bls.n	800a84e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800a898:	8afb      	ldrh	r3, [r7, #22]
 800a89a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a89e:	4293      	cmp	r3, r2
 800a8a0:	d006      	beq.n	800a8b0 <put_lfn+0xb4>
 800a8a2:	69fb      	ldr	r3, [r7, #28]
 800a8a4:	005b      	lsls	r3, r3, #1
 800a8a6:	68fa      	ldr	r2, [r7, #12]
 800a8a8:	4413      	add	r3, r2
 800a8aa:	881b      	ldrh	r3, [r3, #0]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d103      	bne.n	800a8b8 <put_lfn+0xbc>
 800a8b0:	79fb      	ldrb	r3, [r7, #7]
 800a8b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8b6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	79fa      	ldrb	r2, [r7, #7]
 800a8bc:	701a      	strb	r2, [r3, #0]
}
 800a8be:	bf00      	nop
 800a8c0:	3720      	adds	r7, #32
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}
 800a8c6:	bf00      	nop
 800a8c8:	0800e414 	.word	0x0800e414

0800a8cc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b08c      	sub	sp, #48	; 0x30
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	60f8      	str	r0, [r7, #12]
 800a8d4:	60b9      	str	r1, [r7, #8]
 800a8d6:	607a      	str	r2, [r7, #4]
 800a8d8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800a8da:	220b      	movs	r2, #11
 800a8dc:	68b9      	ldr	r1, [r7, #8]
 800a8de:	68f8      	ldr	r0, [r7, #12]
 800a8e0:	f7fe fec2 	bl	8009668 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	2b05      	cmp	r3, #5
 800a8e8:	d92b      	bls.n	800a942 <gen_numname+0x76>
		sr = seq;
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800a8ee:	e022      	b.n	800a936 <gen_numname+0x6a>
			wc = *lfn++;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	1c9a      	adds	r2, r3, #2
 800a8f4:	607a      	str	r2, [r7, #4]
 800a8f6:	881b      	ldrh	r3, [r3, #0]
 800a8f8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	62bb      	str	r3, [r7, #40]	; 0x28
 800a8fe:	e017      	b.n	800a930 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800a900:	69fb      	ldr	r3, [r7, #28]
 800a902:	005a      	lsls	r2, r3, #1
 800a904:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a906:	f003 0301 	and.w	r3, r3, #1
 800a90a:	4413      	add	r3, r2
 800a90c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800a90e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a910:	085b      	lsrs	r3, r3, #1
 800a912:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800a914:	69fb      	ldr	r3, [r7, #28]
 800a916:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d005      	beq.n	800a92a <gen_numname+0x5e>
 800a91e:	69fb      	ldr	r3, [r7, #28]
 800a920:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800a924:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800a928:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800a92a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a92c:	3301      	adds	r3, #1
 800a92e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a932:	2b0f      	cmp	r3, #15
 800a934:	d9e4      	bls.n	800a900 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	881b      	ldrh	r3, [r3, #0]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d1d8      	bne.n	800a8f0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800a93e:	69fb      	ldr	r3, [r7, #28]
 800a940:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800a942:	2307      	movs	r3, #7
 800a944:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	b2db      	uxtb	r3, r3
 800a94a:	f003 030f 	and.w	r3, r3, #15
 800a94e:	b2db      	uxtb	r3, r3
 800a950:	3330      	adds	r3, #48	; 0x30
 800a952:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800a956:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a95a:	2b39      	cmp	r3, #57	; 0x39
 800a95c:	d904      	bls.n	800a968 <gen_numname+0x9c>
 800a95e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a962:	3307      	adds	r3, #7
 800a964:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800a968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a96a:	1e5a      	subs	r2, r3, #1
 800a96c:	62ba      	str	r2, [r7, #40]	; 0x28
 800a96e:	3330      	adds	r3, #48	; 0x30
 800a970:	443b      	add	r3, r7
 800a972:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a976:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	091b      	lsrs	r3, r3, #4
 800a97e:	603b      	str	r3, [r7, #0]
	} while (seq);
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d1df      	bne.n	800a946 <gen_numname+0x7a>
	ns[i] = '~';
 800a986:	f107 0214 	add.w	r2, r7, #20
 800a98a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a98c:	4413      	add	r3, r2
 800a98e:	227e      	movs	r2, #126	; 0x7e
 800a990:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800a992:	2300      	movs	r3, #0
 800a994:	627b      	str	r3, [r7, #36]	; 0x24
 800a996:	e002      	b.n	800a99e <gen_numname+0xd2>
 800a998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a99a:	3301      	adds	r3, #1
 800a99c:	627b      	str	r3, [r7, #36]	; 0x24
 800a99e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9a2:	429a      	cmp	r2, r3
 800a9a4:	d205      	bcs.n	800a9b2 <gen_numname+0xe6>
 800a9a6:	68fa      	ldr	r2, [r7, #12]
 800a9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9aa:	4413      	add	r3, r2
 800a9ac:	781b      	ldrb	r3, [r3, #0]
 800a9ae:	2b20      	cmp	r3, #32
 800a9b0:	d1f2      	bne.n	800a998 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800a9b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9b4:	2b07      	cmp	r3, #7
 800a9b6:	d807      	bhi.n	800a9c8 <gen_numname+0xfc>
 800a9b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ba:	1c5a      	adds	r2, r3, #1
 800a9bc:	62ba      	str	r2, [r7, #40]	; 0x28
 800a9be:	3330      	adds	r3, #48	; 0x30
 800a9c0:	443b      	add	r3, r7
 800a9c2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800a9c6:	e000      	b.n	800a9ca <gen_numname+0xfe>
 800a9c8:	2120      	movs	r1, #32
 800a9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9cc:	1c5a      	adds	r2, r3, #1
 800a9ce:	627a      	str	r2, [r7, #36]	; 0x24
 800a9d0:	68fa      	ldr	r2, [r7, #12]
 800a9d2:	4413      	add	r3, r2
 800a9d4:	460a      	mov	r2, r1
 800a9d6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800a9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9da:	2b07      	cmp	r3, #7
 800a9dc:	d9e9      	bls.n	800a9b2 <gen_numname+0xe6>
}
 800a9de:	bf00      	nop
 800a9e0:	bf00      	nop
 800a9e2:	3730      	adds	r7, #48	; 0x30
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}

0800a9e8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	b085      	sub	sp, #20
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800a9f4:	230b      	movs	r3, #11
 800a9f6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800a9f8:	7bfb      	ldrb	r3, [r7, #15]
 800a9fa:	b2da      	uxtb	r2, r3
 800a9fc:	0852      	lsrs	r2, r2, #1
 800a9fe:	01db      	lsls	r3, r3, #7
 800aa00:	4313      	orrs	r3, r2
 800aa02:	b2da      	uxtb	r2, r3
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	1c59      	adds	r1, r3, #1
 800aa08:	6079      	str	r1, [r7, #4]
 800aa0a:	781b      	ldrb	r3, [r3, #0]
 800aa0c:	4413      	add	r3, r2
 800aa0e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800aa10:	68bb      	ldr	r3, [r7, #8]
 800aa12:	3b01      	subs	r3, #1
 800aa14:	60bb      	str	r3, [r7, #8]
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d1ed      	bne.n	800a9f8 <sum_sfn+0x10>
	return sum;
 800aa1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	3714      	adds	r7, #20
 800aa22:	46bd      	mov	sp, r7
 800aa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa28:	4770      	bx	lr

0800aa2a <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800aa2a:	b580      	push	{r7, lr}
 800aa2c:	b086      	sub	sp, #24
 800aa2e:	af00      	add	r7, sp, #0
 800aa30:	6078      	str	r0, [r7, #4]
 800aa32:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800aa34:	2304      	movs	r3, #4
 800aa36:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800aa3e:	23ff      	movs	r3, #255	; 0xff
 800aa40:	757b      	strb	r3, [r7, #21]
 800aa42:	23ff      	movs	r3, #255	; 0xff
 800aa44:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800aa46:	e081      	b.n	800ab4c <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	69db      	ldr	r3, [r3, #28]
 800aa4c:	4619      	mov	r1, r3
 800aa4e:	6938      	ldr	r0, [r7, #16]
 800aa50:	f7ff f838 	bl	8009ac4 <move_window>
 800aa54:	4603      	mov	r3, r0
 800aa56:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800aa58:	7dfb      	ldrb	r3, [r7, #23]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d17c      	bne.n	800ab58 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6a1b      	ldr	r3, [r3, #32]
 800aa62:	781b      	ldrb	r3, [r3, #0]
 800aa64:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800aa66:	7dbb      	ldrb	r3, [r7, #22]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d102      	bne.n	800aa72 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800aa6c:	2304      	movs	r3, #4
 800aa6e:	75fb      	strb	r3, [r7, #23]
 800aa70:	e077      	b.n	800ab62 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6a1b      	ldr	r3, [r3, #32]
 800aa76:	330b      	adds	r3, #11
 800aa78:	781b      	ldrb	r3, [r3, #0]
 800aa7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aa7e:	73fb      	strb	r3, [r7, #15]
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	7bfa      	ldrb	r2, [r7, #15]
 800aa84:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800aa86:	7dbb      	ldrb	r3, [r7, #22]
 800aa88:	2be5      	cmp	r3, #229	; 0xe5
 800aa8a:	d00e      	beq.n	800aaaa <dir_read+0x80>
 800aa8c:	7dbb      	ldrb	r3, [r7, #22]
 800aa8e:	2b2e      	cmp	r3, #46	; 0x2e
 800aa90:	d00b      	beq.n	800aaaa <dir_read+0x80>
 800aa92:	7bfb      	ldrb	r3, [r7, #15]
 800aa94:	f023 0320 	bic.w	r3, r3, #32
 800aa98:	2b08      	cmp	r3, #8
 800aa9a:	bf0c      	ite	eq
 800aa9c:	2301      	moveq	r3, #1
 800aa9e:	2300      	movne	r3, #0
 800aaa0:	b2db      	uxtb	r3, r3
 800aaa2:	461a      	mov	r2, r3
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d002      	beq.n	800aab0 <dir_read+0x86>
				ord = 0xFF;
 800aaaa:	23ff      	movs	r3, #255	; 0xff
 800aaac:	757b      	strb	r3, [r7, #21]
 800aaae:	e044      	b.n	800ab3a <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800aab0:	7bfb      	ldrb	r3, [r7, #15]
 800aab2:	2b0f      	cmp	r3, #15
 800aab4:	d12f      	bne.n	800ab16 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800aab6:	7dbb      	ldrb	r3, [r7, #22]
 800aab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d00d      	beq.n	800aadc <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6a1b      	ldr	r3, [r3, #32]
 800aac4:	7b5b      	ldrb	r3, [r3, #13]
 800aac6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800aac8:	7dbb      	ldrb	r3, [r7, #22]
 800aaca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aace:	75bb      	strb	r3, [r7, #22]
 800aad0:	7dbb      	ldrb	r3, [r7, #22]
 800aad2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	695a      	ldr	r2, [r3, #20]
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800aadc:	7dba      	ldrb	r2, [r7, #22]
 800aade:	7d7b      	ldrb	r3, [r7, #21]
 800aae0:	429a      	cmp	r2, r3
 800aae2:	d115      	bne.n	800ab10 <dir_read+0xe6>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6a1b      	ldr	r3, [r3, #32]
 800aae8:	330d      	adds	r3, #13
 800aaea:	781b      	ldrb	r3, [r3, #0]
 800aaec:	7d3a      	ldrb	r2, [r7, #20]
 800aaee:	429a      	cmp	r2, r3
 800aaf0:	d10e      	bne.n	800ab10 <dir_read+0xe6>
 800aaf2:	693b      	ldr	r3, [r7, #16]
 800aaf4:	691a      	ldr	r2, [r3, #16]
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6a1b      	ldr	r3, [r3, #32]
 800aafa:	4619      	mov	r1, r3
 800aafc:	4610      	mov	r0, r2
 800aafe:	f7ff fe19 	bl	800a734 <pick_lfn>
 800ab02:	4603      	mov	r3, r0
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d003      	beq.n	800ab10 <dir_read+0xe6>
 800ab08:	7d7b      	ldrb	r3, [r7, #21]
 800ab0a:	3b01      	subs	r3, #1
 800ab0c:	b2db      	uxtb	r3, r3
 800ab0e:	e000      	b.n	800ab12 <dir_read+0xe8>
 800ab10:	23ff      	movs	r3, #255	; 0xff
 800ab12:	757b      	strb	r3, [r7, #21]
 800ab14:	e011      	b.n	800ab3a <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800ab16:	7d7b      	ldrb	r3, [r7, #21]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d109      	bne.n	800ab30 <dir_read+0x106>
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6a1b      	ldr	r3, [r3, #32]
 800ab20:	4618      	mov	r0, r3
 800ab22:	f7ff ff61 	bl	800a9e8 <sum_sfn>
 800ab26:	4603      	mov	r3, r0
 800ab28:	461a      	mov	r2, r3
 800ab2a:	7d3b      	ldrb	r3, [r7, #20]
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	d015      	beq.n	800ab5c <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ab36:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800ab38:	e010      	b.n	800ab5c <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800ab3a:	2100      	movs	r1, #0
 800ab3c:	6878      	ldr	r0, [r7, #4]
 800ab3e:	f7ff fc2c 	bl	800a39a <dir_next>
 800ab42:	4603      	mov	r3, r0
 800ab44:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ab46:	7dfb      	ldrb	r3, [r7, #23]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d109      	bne.n	800ab60 <dir_read+0x136>
	while (dp->sect) {
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	69db      	ldr	r3, [r3, #28]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	f47f af79 	bne.w	800aa48 <dir_read+0x1e>
 800ab56:	e004      	b.n	800ab62 <dir_read+0x138>
		if (res != FR_OK) break;
 800ab58:	bf00      	nop
 800ab5a:	e002      	b.n	800ab62 <dir_read+0x138>
					break;
 800ab5c:	bf00      	nop
 800ab5e:	e000      	b.n	800ab62 <dir_read+0x138>
		if (res != FR_OK) break;
 800ab60:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800ab62:	7dfb      	ldrb	r3, [r7, #23]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d002      	beq.n	800ab6e <dir_read+0x144>
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	61da      	str	r2, [r3, #28]
	return res;
 800ab6e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab70:	4618      	mov	r0, r3
 800ab72:	3718      	adds	r7, #24
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}

0800ab78 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b086      	sub	sp, #24
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ab86:	2100      	movs	r1, #0
 800ab88:	6878      	ldr	r0, [r7, #4]
 800ab8a:	f7ff fb7d 	bl	800a288 <dir_sdi>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ab92:	7dfb      	ldrb	r3, [r7, #23]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d001      	beq.n	800ab9c <dir_find+0x24>
 800ab98:	7dfb      	ldrb	r3, [r7, #23]
 800ab9a:	e0a9      	b.n	800acf0 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ab9c:	23ff      	movs	r3, #255	; 0xff
 800ab9e:	753b      	strb	r3, [r7, #20]
 800aba0:	7d3b      	ldrb	r3, [r7, #20]
 800aba2:	757b      	strb	r3, [r7, #21]
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800abaa:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	69db      	ldr	r3, [r3, #28]
 800abb0:	4619      	mov	r1, r3
 800abb2:	6938      	ldr	r0, [r7, #16]
 800abb4:	f7fe ff86 	bl	8009ac4 <move_window>
 800abb8:	4603      	mov	r3, r0
 800abba:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800abbc:	7dfb      	ldrb	r3, [r7, #23]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	f040 8090 	bne.w	800ace4 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	6a1b      	ldr	r3, [r3, #32]
 800abc8:	781b      	ldrb	r3, [r3, #0]
 800abca:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800abcc:	7dbb      	ldrb	r3, [r7, #22]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d102      	bne.n	800abd8 <dir_find+0x60>
 800abd2:	2304      	movs	r3, #4
 800abd4:	75fb      	strb	r3, [r7, #23]
 800abd6:	e08a      	b.n	800acee <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	6a1b      	ldr	r3, [r3, #32]
 800abdc:	330b      	adds	r3, #11
 800abde:	781b      	ldrb	r3, [r3, #0]
 800abe0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800abe4:	73fb      	strb	r3, [r7, #15]
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	7bfa      	ldrb	r2, [r7, #15]
 800abea:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800abec:	7dbb      	ldrb	r3, [r7, #22]
 800abee:	2be5      	cmp	r3, #229	; 0xe5
 800abf0:	d007      	beq.n	800ac02 <dir_find+0x8a>
 800abf2:	7bfb      	ldrb	r3, [r7, #15]
 800abf4:	f003 0308 	and.w	r3, r3, #8
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d009      	beq.n	800ac10 <dir_find+0x98>
 800abfc:	7bfb      	ldrb	r3, [r7, #15]
 800abfe:	2b0f      	cmp	r3, #15
 800ac00:	d006      	beq.n	800ac10 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ac02:	23ff      	movs	r3, #255	; 0xff
 800ac04:	757b      	strb	r3, [r7, #21]
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ac0c:	631a      	str	r2, [r3, #48]	; 0x30
 800ac0e:	e05e      	b.n	800acce <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800ac10:	7bfb      	ldrb	r3, [r7, #15]
 800ac12:	2b0f      	cmp	r3, #15
 800ac14:	d136      	bne.n	800ac84 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ac1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d154      	bne.n	800acce <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800ac24:	7dbb      	ldrb	r3, [r7, #22]
 800ac26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d00d      	beq.n	800ac4a <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6a1b      	ldr	r3, [r3, #32]
 800ac32:	7b5b      	ldrb	r3, [r3, #13]
 800ac34:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800ac36:	7dbb      	ldrb	r3, [r7, #22]
 800ac38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac3c:	75bb      	strb	r3, [r7, #22]
 800ac3e:	7dbb      	ldrb	r3, [r7, #22]
 800ac40:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	695a      	ldr	r2, [r3, #20]
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800ac4a:	7dba      	ldrb	r2, [r7, #22]
 800ac4c:	7d7b      	ldrb	r3, [r7, #21]
 800ac4e:	429a      	cmp	r2, r3
 800ac50:	d115      	bne.n	800ac7e <dir_find+0x106>
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6a1b      	ldr	r3, [r3, #32]
 800ac56:	330d      	adds	r3, #13
 800ac58:	781b      	ldrb	r3, [r3, #0]
 800ac5a:	7d3a      	ldrb	r2, [r7, #20]
 800ac5c:	429a      	cmp	r2, r3
 800ac5e:	d10e      	bne.n	800ac7e <dir_find+0x106>
 800ac60:	693b      	ldr	r3, [r7, #16]
 800ac62:	691a      	ldr	r2, [r3, #16]
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6a1b      	ldr	r3, [r3, #32]
 800ac68:	4619      	mov	r1, r3
 800ac6a:	4610      	mov	r0, r2
 800ac6c:	f7ff fcf2 	bl	800a654 <cmp_lfn>
 800ac70:	4603      	mov	r3, r0
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d003      	beq.n	800ac7e <dir_find+0x106>
 800ac76:	7d7b      	ldrb	r3, [r7, #21]
 800ac78:	3b01      	subs	r3, #1
 800ac7a:	b2db      	uxtb	r3, r3
 800ac7c:	e000      	b.n	800ac80 <dir_find+0x108>
 800ac7e:	23ff      	movs	r3, #255	; 0xff
 800ac80:	757b      	strb	r3, [r7, #21]
 800ac82:	e024      	b.n	800acce <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800ac84:	7d7b      	ldrb	r3, [r7, #21]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d109      	bne.n	800ac9e <dir_find+0x126>
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6a1b      	ldr	r3, [r3, #32]
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f7ff feaa 	bl	800a9e8 <sum_sfn>
 800ac94:	4603      	mov	r3, r0
 800ac96:	461a      	mov	r2, r3
 800ac98:	7d3b      	ldrb	r3, [r7, #20]
 800ac9a:	4293      	cmp	r3, r2
 800ac9c:	d024      	beq.n	800ace8 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800aca4:	f003 0301 	and.w	r3, r3, #1
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d10a      	bne.n	800acc2 <dir_find+0x14a>
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6a18      	ldr	r0, [r3, #32]
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	3324      	adds	r3, #36	; 0x24
 800acb4:	220b      	movs	r2, #11
 800acb6:	4619      	mov	r1, r3
 800acb8:	f7fe fd12 	bl	80096e0 <mem_cmp>
 800acbc:	4603      	mov	r3, r0
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d014      	beq.n	800acec <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800acc2:	23ff      	movs	r3, #255	; 0xff
 800acc4:	757b      	strb	r3, [r7, #21]
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800accc:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800acce:	2100      	movs	r1, #0
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	f7ff fb62 	bl	800a39a <dir_next>
 800acd6:	4603      	mov	r3, r0
 800acd8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800acda:	7dfb      	ldrb	r3, [r7, #23]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	f43f af65 	beq.w	800abac <dir_find+0x34>
 800ace2:	e004      	b.n	800acee <dir_find+0x176>
		if (res != FR_OK) break;
 800ace4:	bf00      	nop
 800ace6:	e002      	b.n	800acee <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800ace8:	bf00      	nop
 800acea:	e000      	b.n	800acee <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800acec:	bf00      	nop

	return res;
 800acee:	7dfb      	ldrb	r3, [r7, #23]
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	3718      	adds	r7, #24
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}

0800acf8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b08c      	sub	sp, #48	; 0x30
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ad0c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d001      	beq.n	800ad18 <dir_register+0x20>
 800ad14:	2306      	movs	r3, #6
 800ad16:	e0e0      	b.n	800aeda <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800ad18:	2300      	movs	r3, #0
 800ad1a:	627b      	str	r3, [r7, #36]	; 0x24
 800ad1c:	e002      	b.n	800ad24 <dir_register+0x2c>
 800ad1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad20:	3301      	adds	r3, #1
 800ad22:	627b      	str	r3, [r7, #36]	; 0x24
 800ad24:	69fb      	ldr	r3, [r7, #28]
 800ad26:	691a      	ldr	r2, [r3, #16]
 800ad28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad2a:	005b      	lsls	r3, r3, #1
 800ad2c:	4413      	add	r3, r2
 800ad2e:	881b      	ldrh	r3, [r3, #0]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d1f4      	bne.n	800ad1e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800ad3a:	f107 030c 	add.w	r3, r7, #12
 800ad3e:	220c      	movs	r2, #12
 800ad40:	4618      	mov	r0, r3
 800ad42:	f7fe fc91 	bl	8009668 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800ad46:	7dfb      	ldrb	r3, [r7, #23]
 800ad48:	f003 0301 	and.w	r3, r3, #1
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d032      	beq.n	800adb6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2240      	movs	r2, #64	; 0x40
 800ad54:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800ad58:	2301      	movs	r3, #1
 800ad5a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ad5c:	e016      	b.n	800ad8c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800ad64:	69fb      	ldr	r3, [r7, #28]
 800ad66:	691a      	ldr	r2, [r3, #16]
 800ad68:	f107 010c 	add.w	r1, r7, #12
 800ad6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad6e:	f7ff fdad 	bl	800a8cc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f7ff ff00 	bl	800ab78 <dir_find>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800ad7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d106      	bne.n	800ad94 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800ad86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad88:	3301      	adds	r3, #1
 800ad8a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ad8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad8e:	2b63      	cmp	r3, #99	; 0x63
 800ad90:	d9e5      	bls.n	800ad5e <dir_register+0x66>
 800ad92:	e000      	b.n	800ad96 <dir_register+0x9e>
			if (res != FR_OK) break;
 800ad94:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800ad96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad98:	2b64      	cmp	r3, #100	; 0x64
 800ad9a:	d101      	bne.n	800ada0 <dir_register+0xa8>
 800ad9c:	2307      	movs	r3, #7
 800ad9e:	e09c      	b.n	800aeda <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800ada0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ada4:	2b04      	cmp	r3, #4
 800ada6:	d002      	beq.n	800adae <dir_register+0xb6>
 800ada8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800adac:	e095      	b.n	800aeda <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800adae:	7dfa      	ldrb	r2, [r7, #23]
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800adb6:	7dfb      	ldrb	r3, [r7, #23]
 800adb8:	f003 0302 	and.w	r3, r3, #2
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d007      	beq.n	800add0 <dir_register+0xd8>
 800adc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adc2:	330c      	adds	r3, #12
 800adc4:	4a47      	ldr	r2, [pc, #284]	; (800aee4 <dir_register+0x1ec>)
 800adc6:	fba2 2303 	umull	r2, r3, r2, r3
 800adca:	089b      	lsrs	r3, r3, #2
 800adcc:	3301      	adds	r3, #1
 800adce:	e000      	b.n	800add2 <dir_register+0xda>
 800add0:	2301      	movs	r3, #1
 800add2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800add4:	6a39      	ldr	r1, [r7, #32]
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	f7ff fbb5 	bl	800a546 <dir_alloc>
 800addc:	4603      	mov	r3, r0
 800adde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800ade2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d148      	bne.n	800ae7c <dir_register+0x184>
 800adea:	6a3b      	ldr	r3, [r7, #32]
 800adec:	3b01      	subs	r3, #1
 800adee:	623b      	str	r3, [r7, #32]
 800adf0:	6a3b      	ldr	r3, [r7, #32]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d042      	beq.n	800ae7c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	695a      	ldr	r2, [r3, #20]
 800adfa:	6a3b      	ldr	r3, [r7, #32]
 800adfc:	015b      	lsls	r3, r3, #5
 800adfe:	1ad3      	subs	r3, r2, r3
 800ae00:	4619      	mov	r1, r3
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f7ff fa40 	bl	800a288 <dir_sdi>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800ae0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d132      	bne.n	800ae7c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	3324      	adds	r3, #36	; 0x24
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f7ff fde4 	bl	800a9e8 <sum_sfn>
 800ae20:	4603      	mov	r3, r0
 800ae22:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	69db      	ldr	r3, [r3, #28]
 800ae28:	4619      	mov	r1, r3
 800ae2a:	69f8      	ldr	r0, [r7, #28]
 800ae2c:	f7fe fe4a 	bl	8009ac4 <move_window>
 800ae30:	4603      	mov	r3, r0
 800ae32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800ae36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d11d      	bne.n	800ae7a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800ae3e:	69fb      	ldr	r3, [r7, #28]
 800ae40:	6918      	ldr	r0, [r3, #16]
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6a19      	ldr	r1, [r3, #32]
 800ae46:	6a3b      	ldr	r3, [r7, #32]
 800ae48:	b2da      	uxtb	r2, r3
 800ae4a:	7efb      	ldrb	r3, [r7, #27]
 800ae4c:	f7ff fcd6 	bl	800a7fc <put_lfn>
				fs->wflag = 1;
 800ae50:	69fb      	ldr	r3, [r7, #28]
 800ae52:	2201      	movs	r2, #1
 800ae54:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800ae56:	2100      	movs	r1, #0
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f7ff fa9e 	bl	800a39a <dir_next>
 800ae5e:	4603      	mov	r3, r0
 800ae60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800ae64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d107      	bne.n	800ae7c <dir_register+0x184>
 800ae6c:	6a3b      	ldr	r3, [r7, #32]
 800ae6e:	3b01      	subs	r3, #1
 800ae70:	623b      	str	r3, [r7, #32]
 800ae72:	6a3b      	ldr	r3, [r7, #32]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d1d5      	bne.n	800ae24 <dir_register+0x12c>
 800ae78:	e000      	b.n	800ae7c <dir_register+0x184>
				if (res != FR_OK) break;
 800ae7a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ae7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d128      	bne.n	800aed6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	69db      	ldr	r3, [r3, #28]
 800ae88:	4619      	mov	r1, r3
 800ae8a:	69f8      	ldr	r0, [r7, #28]
 800ae8c:	f7fe fe1a 	bl	8009ac4 <move_window>
 800ae90:	4603      	mov	r3, r0
 800ae92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800ae96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d11b      	bne.n	800aed6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	6a1b      	ldr	r3, [r3, #32]
 800aea2:	2220      	movs	r2, #32
 800aea4:	2100      	movs	r1, #0
 800aea6:	4618      	mov	r0, r3
 800aea8:	f7fe fbff 	bl	80096aa <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6a18      	ldr	r0, [r3, #32]
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	3324      	adds	r3, #36	; 0x24
 800aeb4:	220b      	movs	r2, #11
 800aeb6:	4619      	mov	r1, r3
 800aeb8:	f7fe fbd6 	bl	8009668 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6a1b      	ldr	r3, [r3, #32]
 800aec6:	330c      	adds	r3, #12
 800aec8:	f002 0218 	and.w	r2, r2, #24
 800aecc:	b2d2      	uxtb	r2, r2
 800aece:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800aed0:	69fb      	ldr	r3, [r7, #28]
 800aed2:	2201      	movs	r2, #1
 800aed4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800aed6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800aeda:	4618      	mov	r0, r3
 800aedc:	3730      	adds	r7, #48	; 0x30
 800aede:	46bd      	mov	sp, r7
 800aee0:	bd80      	pop	{r7, pc}
 800aee2:	bf00      	nop
 800aee4:	4ec4ec4f 	.word	0x4ec4ec4f

0800aee8 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b088      	sub	sp, #32
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
 800aef0:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	2200      	movs	r2, #0
 800aefc:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	69db      	ldr	r3, [r3, #28]
 800af02:	2b00      	cmp	r3, #0
 800af04:	f000 80c9 	beq.w	800b09a <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af10:	d032      	beq.n	800af78 <get_fileinfo+0x90>
			i = j = 0;
 800af12:	2300      	movs	r3, #0
 800af14:	61bb      	str	r3, [r7, #24]
 800af16:	69bb      	ldr	r3, [r7, #24]
 800af18:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800af1a:	e01b      	b.n	800af54 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800af1c:	89fb      	ldrh	r3, [r7, #14]
 800af1e:	2100      	movs	r1, #0
 800af20:	4618      	mov	r0, r3
 800af22:	f001 fdbf 	bl	800caa4 <ff_convert>
 800af26:	4603      	mov	r3, r0
 800af28:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800af2a:	89fb      	ldrh	r3, [r7, #14]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d102      	bne.n	800af36 <get_fileinfo+0x4e>
 800af30:	2300      	movs	r3, #0
 800af32:	61fb      	str	r3, [r7, #28]
 800af34:	e01a      	b.n	800af6c <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800af36:	69fb      	ldr	r3, [r7, #28]
 800af38:	2bfe      	cmp	r3, #254	; 0xfe
 800af3a:	d902      	bls.n	800af42 <get_fileinfo+0x5a>
 800af3c:	2300      	movs	r3, #0
 800af3e:	61fb      	str	r3, [r7, #28]
 800af40:	e014      	b.n	800af6c <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800af42:	69fb      	ldr	r3, [r7, #28]
 800af44:	1c5a      	adds	r2, r3, #1
 800af46:	61fa      	str	r2, [r7, #28]
 800af48:	89fa      	ldrh	r2, [r7, #14]
 800af4a:	b2d1      	uxtb	r1, r2
 800af4c:	683a      	ldr	r2, [r7, #0]
 800af4e:	4413      	add	r3, r2
 800af50:	460a      	mov	r2, r1
 800af52:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800af54:	693b      	ldr	r3, [r7, #16]
 800af56:	691a      	ldr	r2, [r3, #16]
 800af58:	69bb      	ldr	r3, [r7, #24]
 800af5a:	1c59      	adds	r1, r3, #1
 800af5c:	61b9      	str	r1, [r7, #24]
 800af5e:	005b      	lsls	r3, r3, #1
 800af60:	4413      	add	r3, r2
 800af62:	881b      	ldrh	r3, [r3, #0]
 800af64:	81fb      	strh	r3, [r7, #14]
 800af66:	89fb      	ldrh	r3, [r7, #14]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d1d7      	bne.n	800af1c <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800af6c:	683a      	ldr	r2, [r7, #0]
 800af6e:	69fb      	ldr	r3, [r7, #28]
 800af70:	4413      	add	r3, r2
 800af72:	3316      	adds	r3, #22
 800af74:	2200      	movs	r2, #0
 800af76:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800af78:	2300      	movs	r3, #0
 800af7a:	61bb      	str	r3, [r7, #24]
 800af7c:	69bb      	ldr	r3, [r7, #24]
 800af7e:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800af80:	683a      	ldr	r2, [r7, #0]
 800af82:	69fb      	ldr	r3, [r7, #28]
 800af84:	4413      	add	r3, r2
 800af86:	3316      	adds	r3, #22
 800af88:	781b      	ldrb	r3, [r3, #0]
 800af8a:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800af8c:	e04c      	b.n	800b028 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6a1a      	ldr	r2, [r3, #32]
 800af92:	69fb      	ldr	r3, [r7, #28]
 800af94:	1c59      	adds	r1, r3, #1
 800af96:	61f9      	str	r1, [r7, #28]
 800af98:	4413      	add	r3, r2
 800af9a:	781b      	ldrb	r3, [r3, #0]
 800af9c:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800af9e:	7dfb      	ldrb	r3, [r7, #23]
 800afa0:	2b20      	cmp	r3, #32
 800afa2:	d100      	bne.n	800afa6 <get_fileinfo+0xbe>
 800afa4:	e040      	b.n	800b028 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800afa6:	7dfb      	ldrb	r3, [r7, #23]
 800afa8:	2b05      	cmp	r3, #5
 800afaa:	d101      	bne.n	800afb0 <get_fileinfo+0xc8>
 800afac:	23e5      	movs	r3, #229	; 0xe5
 800afae:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800afb0:	69fb      	ldr	r3, [r7, #28]
 800afb2:	2b09      	cmp	r3, #9
 800afb4:	d10f      	bne.n	800afd6 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800afb6:	89bb      	ldrh	r3, [r7, #12]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d105      	bne.n	800afc8 <get_fileinfo+0xe0>
 800afbc:	683a      	ldr	r2, [r7, #0]
 800afbe:	69bb      	ldr	r3, [r7, #24]
 800afc0:	4413      	add	r3, r2
 800afc2:	3316      	adds	r3, #22
 800afc4:	222e      	movs	r2, #46	; 0x2e
 800afc6:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800afc8:	69bb      	ldr	r3, [r7, #24]
 800afca:	1c5a      	adds	r2, r3, #1
 800afcc:	61ba      	str	r2, [r7, #24]
 800afce:	683a      	ldr	r2, [r7, #0]
 800afd0:	4413      	add	r3, r2
 800afd2:	222e      	movs	r2, #46	; 0x2e
 800afd4:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800afd6:	683a      	ldr	r2, [r7, #0]
 800afd8:	69bb      	ldr	r3, [r7, #24]
 800afda:	4413      	add	r3, r2
 800afdc:	3309      	adds	r3, #9
 800afde:	7dfa      	ldrb	r2, [r7, #23]
 800afe0:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800afe2:	89bb      	ldrh	r3, [r7, #12]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d11c      	bne.n	800b022 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800afe8:	7dfb      	ldrb	r3, [r7, #23]
 800afea:	2b40      	cmp	r3, #64	; 0x40
 800afec:	d913      	bls.n	800b016 <get_fileinfo+0x12e>
 800afee:	7dfb      	ldrb	r3, [r7, #23]
 800aff0:	2b5a      	cmp	r3, #90	; 0x5a
 800aff2:	d810      	bhi.n	800b016 <get_fileinfo+0x12e>
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	6a1b      	ldr	r3, [r3, #32]
 800aff8:	330c      	adds	r3, #12
 800affa:	781b      	ldrb	r3, [r3, #0]
 800affc:	461a      	mov	r2, r3
 800affe:	69fb      	ldr	r3, [r7, #28]
 800b000:	2b08      	cmp	r3, #8
 800b002:	d901      	bls.n	800b008 <get_fileinfo+0x120>
 800b004:	2310      	movs	r3, #16
 800b006:	e000      	b.n	800b00a <get_fileinfo+0x122>
 800b008:	2308      	movs	r3, #8
 800b00a:	4013      	ands	r3, r2
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d002      	beq.n	800b016 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800b010:	7dfb      	ldrb	r3, [r7, #23]
 800b012:	3320      	adds	r3, #32
 800b014:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800b016:	683a      	ldr	r2, [r7, #0]
 800b018:	69bb      	ldr	r3, [r7, #24]
 800b01a:	4413      	add	r3, r2
 800b01c:	3316      	adds	r3, #22
 800b01e:	7dfa      	ldrb	r2, [r7, #23]
 800b020:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800b022:	69bb      	ldr	r3, [r7, #24]
 800b024:	3301      	adds	r3, #1
 800b026:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800b028:	69fb      	ldr	r3, [r7, #28]
 800b02a:	2b0a      	cmp	r3, #10
 800b02c:	d9af      	bls.n	800af8e <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800b02e:	89bb      	ldrh	r3, [r7, #12]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d10d      	bne.n	800b050 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800b034:	683a      	ldr	r2, [r7, #0]
 800b036:	69bb      	ldr	r3, [r7, #24]
 800b038:	4413      	add	r3, r2
 800b03a:	3316      	adds	r3, #22
 800b03c:	2200      	movs	r2, #0
 800b03e:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6a1b      	ldr	r3, [r3, #32]
 800b044:	330c      	adds	r3, #12
 800b046:	781b      	ldrb	r3, [r3, #0]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d101      	bne.n	800b050 <get_fileinfo+0x168>
 800b04c:	2300      	movs	r3, #0
 800b04e:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800b050:	683a      	ldr	r2, [r7, #0]
 800b052:	69bb      	ldr	r3, [r7, #24]
 800b054:	4413      	add	r3, r2
 800b056:	3309      	adds	r3, #9
 800b058:	2200      	movs	r2, #0
 800b05a:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	6a1b      	ldr	r3, [r3, #32]
 800b060:	7ada      	ldrb	r2, [r3, #11]
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6a1b      	ldr	r3, [r3, #32]
 800b06a:	331c      	adds	r3, #28
 800b06c:	4618      	mov	r0, r3
 800b06e:	f7fe fa91 	bl	8009594 <ld_dword>
 800b072:	4602      	mov	r2, r0
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	6a1b      	ldr	r3, [r3, #32]
 800b07c:	3316      	adds	r3, #22
 800b07e:	4618      	mov	r0, r3
 800b080:	f7fe fa88 	bl	8009594 <ld_dword>
 800b084:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	b29a      	uxth	r2, r3
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	80da      	strh	r2, [r3, #6]
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	0c1b      	lsrs	r3, r3, #16
 800b092:	b29a      	uxth	r2, r3
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	809a      	strh	r2, [r3, #4]
 800b098:	e000      	b.n	800b09c <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b09a:	bf00      	nop
}
 800b09c:	3720      	adds	r7, #32
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	bd80      	pop	{r7, pc}
	...

0800b0a4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b08a      	sub	sp, #40	; 0x28
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
 800b0ac:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	613b      	str	r3, [r7, #16]
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	691b      	ldr	r3, [r3, #16]
 800b0ba:	60fb      	str	r3, [r7, #12]
 800b0bc:	2300      	movs	r3, #0
 800b0be:	617b      	str	r3, [r7, #20]
 800b0c0:	697b      	ldr	r3, [r7, #20]
 800b0c2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800b0c4:	69bb      	ldr	r3, [r7, #24]
 800b0c6:	1c5a      	adds	r2, r3, #1
 800b0c8:	61ba      	str	r2, [r7, #24]
 800b0ca:	693a      	ldr	r2, [r7, #16]
 800b0cc:	4413      	add	r3, r2
 800b0ce:	781b      	ldrb	r3, [r3, #0]
 800b0d0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800b0d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b0d4:	2b1f      	cmp	r3, #31
 800b0d6:	d940      	bls.n	800b15a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800b0d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b0da:	2b2f      	cmp	r3, #47	; 0x2f
 800b0dc:	d006      	beq.n	800b0ec <create_name+0x48>
 800b0de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b0e0:	2b5c      	cmp	r3, #92	; 0x5c
 800b0e2:	d110      	bne.n	800b106 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b0e4:	e002      	b.n	800b0ec <create_name+0x48>
 800b0e6:	69bb      	ldr	r3, [r7, #24]
 800b0e8:	3301      	adds	r3, #1
 800b0ea:	61bb      	str	r3, [r7, #24]
 800b0ec:	693a      	ldr	r2, [r7, #16]
 800b0ee:	69bb      	ldr	r3, [r7, #24]
 800b0f0:	4413      	add	r3, r2
 800b0f2:	781b      	ldrb	r3, [r3, #0]
 800b0f4:	2b2f      	cmp	r3, #47	; 0x2f
 800b0f6:	d0f6      	beq.n	800b0e6 <create_name+0x42>
 800b0f8:	693a      	ldr	r2, [r7, #16]
 800b0fa:	69bb      	ldr	r3, [r7, #24]
 800b0fc:	4413      	add	r3, r2
 800b0fe:	781b      	ldrb	r3, [r3, #0]
 800b100:	2b5c      	cmp	r3, #92	; 0x5c
 800b102:	d0f0      	beq.n	800b0e6 <create_name+0x42>
			break;
 800b104:	e02a      	b.n	800b15c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800b106:	697b      	ldr	r3, [r7, #20]
 800b108:	2bfe      	cmp	r3, #254	; 0xfe
 800b10a:	d901      	bls.n	800b110 <create_name+0x6c>
 800b10c:	2306      	movs	r3, #6
 800b10e:	e17d      	b.n	800b40c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800b110:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b112:	b2db      	uxtb	r3, r3
 800b114:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800b116:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b118:	2101      	movs	r1, #1
 800b11a:	4618      	mov	r0, r3
 800b11c:	f001 fcc2 	bl	800caa4 <ff_convert>
 800b120:	4603      	mov	r3, r0
 800b122:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800b124:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b126:	2b00      	cmp	r3, #0
 800b128:	d101      	bne.n	800b12e <create_name+0x8a>
 800b12a:	2306      	movs	r3, #6
 800b12c:	e16e      	b.n	800b40c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800b12e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b130:	2b7f      	cmp	r3, #127	; 0x7f
 800b132:	d809      	bhi.n	800b148 <create_name+0xa4>
 800b134:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b136:	4619      	mov	r1, r3
 800b138:	488d      	ldr	r0, [pc, #564]	; (800b370 <create_name+0x2cc>)
 800b13a:	f7fe faf8 	bl	800972e <chk_chr>
 800b13e:	4603      	mov	r3, r0
 800b140:	2b00      	cmp	r3, #0
 800b142:	d001      	beq.n	800b148 <create_name+0xa4>
 800b144:	2306      	movs	r3, #6
 800b146:	e161      	b.n	800b40c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800b148:	697b      	ldr	r3, [r7, #20]
 800b14a:	1c5a      	adds	r2, r3, #1
 800b14c:	617a      	str	r2, [r7, #20]
 800b14e:	005b      	lsls	r3, r3, #1
 800b150:	68fa      	ldr	r2, [r7, #12]
 800b152:	4413      	add	r3, r2
 800b154:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b156:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800b158:	e7b4      	b.n	800b0c4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800b15a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800b15c:	693a      	ldr	r2, [r7, #16]
 800b15e:	69bb      	ldr	r3, [r7, #24]
 800b160:	441a      	add	r2, r3
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b166:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b168:	2b1f      	cmp	r3, #31
 800b16a:	d801      	bhi.n	800b170 <create_name+0xcc>
 800b16c:	2304      	movs	r3, #4
 800b16e:	e000      	b.n	800b172 <create_name+0xce>
 800b170:	2300      	movs	r3, #0
 800b172:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b176:	e011      	b.n	800b19c <create_name+0xf8>
		w = lfn[di - 1];
 800b178:	697b      	ldr	r3, [r7, #20]
 800b17a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b17e:	3b01      	subs	r3, #1
 800b180:	005b      	lsls	r3, r3, #1
 800b182:	68fa      	ldr	r2, [r7, #12]
 800b184:	4413      	add	r3, r2
 800b186:	881b      	ldrh	r3, [r3, #0]
 800b188:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800b18a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b18c:	2b20      	cmp	r3, #32
 800b18e:	d002      	beq.n	800b196 <create_name+0xf2>
 800b190:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b192:	2b2e      	cmp	r3, #46	; 0x2e
 800b194:	d106      	bne.n	800b1a4 <create_name+0x100>
		di--;
 800b196:	697b      	ldr	r3, [r7, #20]
 800b198:	3b01      	subs	r3, #1
 800b19a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b19c:	697b      	ldr	r3, [r7, #20]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d1ea      	bne.n	800b178 <create_name+0xd4>
 800b1a2:	e000      	b.n	800b1a6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800b1a4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800b1a6:	697b      	ldr	r3, [r7, #20]
 800b1a8:	005b      	lsls	r3, r3, #1
 800b1aa:	68fa      	ldr	r2, [r7, #12]
 800b1ac:	4413      	add	r3, r2
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800b1b2:	697b      	ldr	r3, [r7, #20]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d101      	bne.n	800b1bc <create_name+0x118>
 800b1b8:	2306      	movs	r3, #6
 800b1ba:	e127      	b.n	800b40c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	3324      	adds	r3, #36	; 0x24
 800b1c0:	220b      	movs	r2, #11
 800b1c2:	2120      	movs	r1, #32
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f7fe fa70 	bl	80096aa <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	61bb      	str	r3, [r7, #24]
 800b1ce:	e002      	b.n	800b1d6 <create_name+0x132>
 800b1d0:	69bb      	ldr	r3, [r7, #24]
 800b1d2:	3301      	adds	r3, #1
 800b1d4:	61bb      	str	r3, [r7, #24]
 800b1d6:	69bb      	ldr	r3, [r7, #24]
 800b1d8:	005b      	lsls	r3, r3, #1
 800b1da:	68fa      	ldr	r2, [r7, #12]
 800b1dc:	4413      	add	r3, r2
 800b1de:	881b      	ldrh	r3, [r3, #0]
 800b1e0:	2b20      	cmp	r3, #32
 800b1e2:	d0f5      	beq.n	800b1d0 <create_name+0x12c>
 800b1e4:	69bb      	ldr	r3, [r7, #24]
 800b1e6:	005b      	lsls	r3, r3, #1
 800b1e8:	68fa      	ldr	r2, [r7, #12]
 800b1ea:	4413      	add	r3, r2
 800b1ec:	881b      	ldrh	r3, [r3, #0]
 800b1ee:	2b2e      	cmp	r3, #46	; 0x2e
 800b1f0:	d0ee      	beq.n	800b1d0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800b1f2:	69bb      	ldr	r3, [r7, #24]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d009      	beq.n	800b20c <create_name+0x168>
 800b1f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b1fc:	f043 0303 	orr.w	r3, r3, #3
 800b200:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800b204:	e002      	b.n	800b20c <create_name+0x168>
 800b206:	697b      	ldr	r3, [r7, #20]
 800b208:	3b01      	subs	r3, #1
 800b20a:	617b      	str	r3, [r7, #20]
 800b20c:	697b      	ldr	r3, [r7, #20]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d009      	beq.n	800b226 <create_name+0x182>
 800b212:	697b      	ldr	r3, [r7, #20]
 800b214:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b218:	3b01      	subs	r3, #1
 800b21a:	005b      	lsls	r3, r3, #1
 800b21c:	68fa      	ldr	r2, [r7, #12]
 800b21e:	4413      	add	r3, r2
 800b220:	881b      	ldrh	r3, [r3, #0]
 800b222:	2b2e      	cmp	r3, #46	; 0x2e
 800b224:	d1ef      	bne.n	800b206 <create_name+0x162>

	i = b = 0; ni = 8;
 800b226:	2300      	movs	r3, #0
 800b228:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b22c:	2300      	movs	r3, #0
 800b22e:	623b      	str	r3, [r7, #32]
 800b230:	2308      	movs	r3, #8
 800b232:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800b234:	69bb      	ldr	r3, [r7, #24]
 800b236:	1c5a      	adds	r2, r3, #1
 800b238:	61ba      	str	r2, [r7, #24]
 800b23a:	005b      	lsls	r3, r3, #1
 800b23c:	68fa      	ldr	r2, [r7, #12]
 800b23e:	4413      	add	r3, r2
 800b240:	881b      	ldrh	r3, [r3, #0]
 800b242:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800b244:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b246:	2b00      	cmp	r3, #0
 800b248:	f000 8090 	beq.w	800b36c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800b24c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b24e:	2b20      	cmp	r3, #32
 800b250:	d006      	beq.n	800b260 <create_name+0x1bc>
 800b252:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b254:	2b2e      	cmp	r3, #46	; 0x2e
 800b256:	d10a      	bne.n	800b26e <create_name+0x1ca>
 800b258:	69ba      	ldr	r2, [r7, #24]
 800b25a:	697b      	ldr	r3, [r7, #20]
 800b25c:	429a      	cmp	r2, r3
 800b25e:	d006      	beq.n	800b26e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800b260:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b264:	f043 0303 	orr.w	r3, r3, #3
 800b268:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b26c:	e07d      	b.n	800b36a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800b26e:	6a3a      	ldr	r2, [r7, #32]
 800b270:	69fb      	ldr	r3, [r7, #28]
 800b272:	429a      	cmp	r2, r3
 800b274:	d203      	bcs.n	800b27e <create_name+0x1da>
 800b276:	69ba      	ldr	r2, [r7, #24]
 800b278:	697b      	ldr	r3, [r7, #20]
 800b27a:	429a      	cmp	r2, r3
 800b27c:	d123      	bne.n	800b2c6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800b27e:	69fb      	ldr	r3, [r7, #28]
 800b280:	2b0b      	cmp	r3, #11
 800b282:	d106      	bne.n	800b292 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800b284:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b288:	f043 0303 	orr.w	r3, r3, #3
 800b28c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b290:	e075      	b.n	800b37e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800b292:	69ba      	ldr	r2, [r7, #24]
 800b294:	697b      	ldr	r3, [r7, #20]
 800b296:	429a      	cmp	r2, r3
 800b298:	d005      	beq.n	800b2a6 <create_name+0x202>
 800b29a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b29e:	f043 0303 	orr.w	r3, r3, #3
 800b2a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800b2a6:	69ba      	ldr	r2, [r7, #24]
 800b2a8:	697b      	ldr	r3, [r7, #20]
 800b2aa:	429a      	cmp	r2, r3
 800b2ac:	d866      	bhi.n	800b37c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	61bb      	str	r3, [r7, #24]
 800b2b2:	2308      	movs	r3, #8
 800b2b4:	623b      	str	r3, [r7, #32]
 800b2b6:	230b      	movs	r3, #11
 800b2b8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800b2ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b2be:	009b      	lsls	r3, r3, #2
 800b2c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b2c4:	e051      	b.n	800b36a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800b2c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b2c8:	2b7f      	cmp	r3, #127	; 0x7f
 800b2ca:	d914      	bls.n	800b2f6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800b2cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b2ce:	2100      	movs	r1, #0
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f001 fbe7 	bl	800caa4 <ff_convert>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800b2da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d004      	beq.n	800b2ea <create_name+0x246>
 800b2e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b2e2:	3b80      	subs	r3, #128	; 0x80
 800b2e4:	4a23      	ldr	r2, [pc, #140]	; (800b374 <create_name+0x2d0>)
 800b2e6:	5cd3      	ldrb	r3, [r2, r3]
 800b2e8:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800b2ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b2ee:	f043 0302 	orr.w	r3, r3, #2
 800b2f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800b2f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d007      	beq.n	800b30c <create_name+0x268>
 800b2fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b2fe:	4619      	mov	r1, r3
 800b300:	481d      	ldr	r0, [pc, #116]	; (800b378 <create_name+0x2d4>)
 800b302:	f7fe fa14 	bl	800972e <chk_chr>
 800b306:	4603      	mov	r3, r0
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d008      	beq.n	800b31e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800b30c:	235f      	movs	r3, #95	; 0x5f
 800b30e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b310:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b314:	f043 0303 	orr.w	r3, r3, #3
 800b318:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b31c:	e01b      	b.n	800b356 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800b31e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b320:	2b40      	cmp	r3, #64	; 0x40
 800b322:	d909      	bls.n	800b338 <create_name+0x294>
 800b324:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b326:	2b5a      	cmp	r3, #90	; 0x5a
 800b328:	d806      	bhi.n	800b338 <create_name+0x294>
					b |= 2;
 800b32a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b32e:	f043 0302 	orr.w	r3, r3, #2
 800b332:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b336:	e00e      	b.n	800b356 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800b338:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b33a:	2b60      	cmp	r3, #96	; 0x60
 800b33c:	d90b      	bls.n	800b356 <create_name+0x2b2>
 800b33e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b340:	2b7a      	cmp	r3, #122	; 0x7a
 800b342:	d808      	bhi.n	800b356 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800b344:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b348:	f043 0301 	orr.w	r3, r3, #1
 800b34c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b350:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b352:	3b20      	subs	r3, #32
 800b354:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800b356:	6a3b      	ldr	r3, [r7, #32]
 800b358:	1c5a      	adds	r2, r3, #1
 800b35a:	623a      	str	r2, [r7, #32]
 800b35c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b35e:	b2d1      	uxtb	r1, r2
 800b360:	687a      	ldr	r2, [r7, #4]
 800b362:	4413      	add	r3, r2
 800b364:	460a      	mov	r2, r1
 800b366:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800b36a:	e763      	b.n	800b234 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800b36c:	bf00      	nop
 800b36e:	e006      	b.n	800b37e <create_name+0x2da>
 800b370:	0800e1ac 	.word	0x0800e1ac
 800b374:	0800e394 	.word	0x0800e394
 800b378:	0800e1b8 	.word	0x0800e1b8
			if (si > di) break;			/* No extension */
 800b37c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b384:	2be5      	cmp	r3, #229	; 0xe5
 800b386:	d103      	bne.n	800b390 <create_name+0x2ec>
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2205      	movs	r2, #5
 800b38c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800b390:	69fb      	ldr	r3, [r7, #28]
 800b392:	2b08      	cmp	r3, #8
 800b394:	d104      	bne.n	800b3a0 <create_name+0x2fc>
 800b396:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b39a:	009b      	lsls	r3, r3, #2
 800b39c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800b3a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b3a4:	f003 030c 	and.w	r3, r3, #12
 800b3a8:	2b0c      	cmp	r3, #12
 800b3aa:	d005      	beq.n	800b3b8 <create_name+0x314>
 800b3ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b3b0:	f003 0303 	and.w	r3, r3, #3
 800b3b4:	2b03      	cmp	r3, #3
 800b3b6:	d105      	bne.n	800b3c4 <create_name+0x320>
 800b3b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b3bc:	f043 0302 	orr.w	r3, r3, #2
 800b3c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800b3c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b3c8:	f003 0302 	and.w	r3, r3, #2
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d117      	bne.n	800b400 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800b3d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b3d4:	f003 0303 	and.w	r3, r3, #3
 800b3d8:	2b01      	cmp	r3, #1
 800b3da:	d105      	bne.n	800b3e8 <create_name+0x344>
 800b3dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b3e0:	f043 0310 	orr.w	r3, r3, #16
 800b3e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800b3e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b3ec:	f003 030c 	and.w	r3, r3, #12
 800b3f0:	2b04      	cmp	r3, #4
 800b3f2:	d105      	bne.n	800b400 <create_name+0x35c>
 800b3f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b3f8:	f043 0308 	orr.w	r3, r3, #8
 800b3fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b406:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800b40a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800b40c:	4618      	mov	r0, r3
 800b40e:	3728      	adds	r7, #40	; 0x28
 800b410:	46bd      	mov	sp, r7
 800b412:	bd80      	pop	{r7, pc}

0800b414 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b086      	sub	sp, #24
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
 800b41c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b422:	693b      	ldr	r3, [r7, #16]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b428:	e002      	b.n	800b430 <follow_path+0x1c>
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	3301      	adds	r3, #1
 800b42e:	603b      	str	r3, [r7, #0]
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	781b      	ldrb	r3, [r3, #0]
 800b434:	2b2f      	cmp	r3, #47	; 0x2f
 800b436:	d0f8      	beq.n	800b42a <follow_path+0x16>
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	781b      	ldrb	r3, [r3, #0]
 800b43c:	2b5c      	cmp	r3, #92	; 0x5c
 800b43e:	d0f4      	beq.n	800b42a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	2200      	movs	r2, #0
 800b444:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	781b      	ldrb	r3, [r3, #0]
 800b44a:	2b1f      	cmp	r3, #31
 800b44c:	d80a      	bhi.n	800b464 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2280      	movs	r2, #128	; 0x80
 800b452:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800b456:	2100      	movs	r1, #0
 800b458:	6878      	ldr	r0, [r7, #4]
 800b45a:	f7fe ff15 	bl	800a288 <dir_sdi>
 800b45e:	4603      	mov	r3, r0
 800b460:	75fb      	strb	r3, [r7, #23]
 800b462:	e048      	b.n	800b4f6 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b464:	463b      	mov	r3, r7
 800b466:	4619      	mov	r1, r3
 800b468:	6878      	ldr	r0, [r7, #4]
 800b46a:	f7ff fe1b 	bl	800b0a4 <create_name>
 800b46e:	4603      	mov	r3, r0
 800b470:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b472:	7dfb      	ldrb	r3, [r7, #23]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d139      	bne.n	800b4ec <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f7ff fb7d 	bl	800ab78 <dir_find>
 800b47e:	4603      	mov	r3, r0
 800b480:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b488:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b48a:	7dfb      	ldrb	r3, [r7, #23]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d00a      	beq.n	800b4a6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b490:	7dfb      	ldrb	r3, [r7, #23]
 800b492:	2b04      	cmp	r3, #4
 800b494:	d12c      	bne.n	800b4f0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b496:	7afb      	ldrb	r3, [r7, #11]
 800b498:	f003 0304 	and.w	r3, r3, #4
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d127      	bne.n	800b4f0 <follow_path+0xdc>
 800b4a0:	2305      	movs	r3, #5
 800b4a2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b4a4:	e024      	b.n	800b4f0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b4a6:	7afb      	ldrb	r3, [r7, #11]
 800b4a8:	f003 0304 	and.w	r3, r3, #4
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d121      	bne.n	800b4f4 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b4b0:	693b      	ldr	r3, [r7, #16]
 800b4b2:	799b      	ldrb	r3, [r3, #6]
 800b4b4:	f003 0310 	and.w	r3, r3, #16
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d102      	bne.n	800b4c2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b4bc:	2305      	movs	r3, #5
 800b4be:	75fb      	strb	r3, [r7, #23]
 800b4c0:	e019      	b.n	800b4f6 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	695b      	ldr	r3, [r3, #20]
 800b4cc:	68fa      	ldr	r2, [r7, #12]
 800b4ce:	8992      	ldrh	r2, [r2, #12]
 800b4d0:	fbb3 f0f2 	udiv	r0, r3, r2
 800b4d4:	fb00 f202 	mul.w	r2, r0, r2
 800b4d8:	1a9b      	subs	r3, r3, r2
 800b4da:	440b      	add	r3, r1
 800b4dc:	4619      	mov	r1, r3
 800b4de:	68f8      	ldr	r0, [r7, #12]
 800b4e0:	f7ff f878 	bl	800a5d4 <ld_clust>
 800b4e4:	4602      	mov	r2, r0
 800b4e6:	693b      	ldr	r3, [r7, #16]
 800b4e8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b4ea:	e7bb      	b.n	800b464 <follow_path+0x50>
			if (res != FR_OK) break;
 800b4ec:	bf00      	nop
 800b4ee:	e002      	b.n	800b4f6 <follow_path+0xe2>
				break;
 800b4f0:	bf00      	nop
 800b4f2:	e000      	b.n	800b4f6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b4f4:	bf00      	nop
			}
		}
	}

	return res;
 800b4f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	3718      	adds	r7, #24
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	bd80      	pop	{r7, pc}

0800b500 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b500:	b480      	push	{r7}
 800b502:	b087      	sub	sp, #28
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b508:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b50c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d031      	beq.n	800b57a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	617b      	str	r3, [r7, #20]
 800b51c:	e002      	b.n	800b524 <get_ldnumber+0x24>
 800b51e:	697b      	ldr	r3, [r7, #20]
 800b520:	3301      	adds	r3, #1
 800b522:	617b      	str	r3, [r7, #20]
 800b524:	697b      	ldr	r3, [r7, #20]
 800b526:	781b      	ldrb	r3, [r3, #0]
 800b528:	2b1f      	cmp	r3, #31
 800b52a:	d903      	bls.n	800b534 <get_ldnumber+0x34>
 800b52c:	697b      	ldr	r3, [r7, #20]
 800b52e:	781b      	ldrb	r3, [r3, #0]
 800b530:	2b3a      	cmp	r3, #58	; 0x3a
 800b532:	d1f4      	bne.n	800b51e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b534:	697b      	ldr	r3, [r7, #20]
 800b536:	781b      	ldrb	r3, [r3, #0]
 800b538:	2b3a      	cmp	r3, #58	; 0x3a
 800b53a:	d11c      	bne.n	800b576 <get_ldnumber+0x76>
			tp = *path;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	1c5a      	adds	r2, r3, #1
 800b546:	60fa      	str	r2, [r7, #12]
 800b548:	781b      	ldrb	r3, [r3, #0]
 800b54a:	3b30      	subs	r3, #48	; 0x30
 800b54c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b54e:	68bb      	ldr	r3, [r7, #8]
 800b550:	2b09      	cmp	r3, #9
 800b552:	d80e      	bhi.n	800b572 <get_ldnumber+0x72>
 800b554:	68fa      	ldr	r2, [r7, #12]
 800b556:	697b      	ldr	r3, [r7, #20]
 800b558:	429a      	cmp	r2, r3
 800b55a:	d10a      	bne.n	800b572 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b55c:	68bb      	ldr	r3, [r7, #8]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d107      	bne.n	800b572 <get_ldnumber+0x72>
					vol = (int)i;
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b566:	697b      	ldr	r3, [r7, #20]
 800b568:	3301      	adds	r3, #1
 800b56a:	617b      	str	r3, [r7, #20]
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	697a      	ldr	r2, [r7, #20]
 800b570:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b572:	693b      	ldr	r3, [r7, #16]
 800b574:	e002      	b.n	800b57c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b576:	2300      	movs	r3, #0
 800b578:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b57a:	693b      	ldr	r3, [r7, #16]
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	371c      	adds	r7, #28
 800b580:	46bd      	mov	sp, r7
 800b582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b586:	4770      	bx	lr

0800b588 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b082      	sub	sp, #8
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
 800b590:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	2200      	movs	r2, #0
 800b596:	70da      	strb	r2, [r3, #3]
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b59e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b5a0:	6839      	ldr	r1, [r7, #0]
 800b5a2:	6878      	ldr	r0, [r7, #4]
 800b5a4:	f7fe fa8e 	bl	8009ac4 <move_window>
 800b5a8:	4603      	mov	r3, r0
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d001      	beq.n	800b5b2 <check_fs+0x2a>
 800b5ae:	2304      	movs	r3, #4
 800b5b0:	e038      	b.n	800b624 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	3338      	adds	r3, #56	; 0x38
 800b5b6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	f7fd ffd2 	bl	8009564 <ld_word>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	461a      	mov	r2, r3
 800b5c4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b5c8:	429a      	cmp	r2, r3
 800b5ca:	d001      	beq.n	800b5d0 <check_fs+0x48>
 800b5cc:	2303      	movs	r3, #3
 800b5ce:	e029      	b.n	800b624 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b5d6:	2be9      	cmp	r3, #233	; 0xe9
 800b5d8:	d009      	beq.n	800b5ee <check_fs+0x66>
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b5e0:	2beb      	cmp	r3, #235	; 0xeb
 800b5e2:	d11e      	bne.n	800b622 <check_fs+0x9a>
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b5ea:	2b90      	cmp	r3, #144	; 0x90
 800b5ec:	d119      	bne.n	800b622 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	3338      	adds	r3, #56	; 0x38
 800b5f2:	3336      	adds	r3, #54	; 0x36
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	f7fd ffcd 	bl	8009594 <ld_dword>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b600:	4a0a      	ldr	r2, [pc, #40]	; (800b62c <check_fs+0xa4>)
 800b602:	4293      	cmp	r3, r2
 800b604:	d101      	bne.n	800b60a <check_fs+0x82>
 800b606:	2300      	movs	r3, #0
 800b608:	e00c      	b.n	800b624 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	3338      	adds	r3, #56	; 0x38
 800b60e:	3352      	adds	r3, #82	; 0x52
 800b610:	4618      	mov	r0, r3
 800b612:	f7fd ffbf 	bl	8009594 <ld_dword>
 800b616:	4603      	mov	r3, r0
 800b618:	4a05      	ldr	r2, [pc, #20]	; (800b630 <check_fs+0xa8>)
 800b61a:	4293      	cmp	r3, r2
 800b61c:	d101      	bne.n	800b622 <check_fs+0x9a>
 800b61e:	2300      	movs	r3, #0
 800b620:	e000      	b.n	800b624 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b622:	2302      	movs	r3, #2
}
 800b624:	4618      	mov	r0, r3
 800b626:	3708      	adds	r7, #8
 800b628:	46bd      	mov	sp, r7
 800b62a:	bd80      	pop	{r7, pc}
 800b62c:	00544146 	.word	0x00544146
 800b630:	33544146 	.word	0x33544146

0800b634 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b096      	sub	sp, #88	; 0x58
 800b638:	af00      	add	r7, sp, #0
 800b63a:	60f8      	str	r0, [r7, #12]
 800b63c:	60b9      	str	r1, [r7, #8]
 800b63e:	4613      	mov	r3, r2
 800b640:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b642:	68bb      	ldr	r3, [r7, #8]
 800b644:	2200      	movs	r2, #0
 800b646:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b648:	68f8      	ldr	r0, [r7, #12]
 800b64a:	f7ff ff59 	bl	800b500 <get_ldnumber>
 800b64e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b652:	2b00      	cmp	r3, #0
 800b654:	da01      	bge.n	800b65a <find_volume+0x26>
 800b656:	230b      	movs	r3, #11
 800b658:	e265      	b.n	800bb26 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b65a:	4a9f      	ldr	r2, [pc, #636]	; (800b8d8 <find_volume+0x2a4>)
 800b65c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b65e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b662:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b666:	2b00      	cmp	r3, #0
 800b668:	d101      	bne.n	800b66e <find_volume+0x3a>
 800b66a:	230c      	movs	r3, #12
 800b66c:	e25b      	b.n	800bb26 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b66e:	68bb      	ldr	r3, [r7, #8]
 800b670:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b672:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b674:	79fb      	ldrb	r3, [r7, #7]
 800b676:	f023 0301 	bic.w	r3, r3, #1
 800b67a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b67c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b67e:	781b      	ldrb	r3, [r3, #0]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d01a      	beq.n	800b6ba <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b686:	785b      	ldrb	r3, [r3, #1]
 800b688:	4618      	mov	r0, r3
 800b68a:	f7fd fecd 	bl	8009428 <disk_status>
 800b68e:	4603      	mov	r3, r0
 800b690:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b694:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b698:	f003 0301 	and.w	r3, r3, #1
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d10c      	bne.n	800b6ba <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b6a0:	79fb      	ldrb	r3, [r7, #7]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d007      	beq.n	800b6b6 <find_volume+0x82>
 800b6a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b6aa:	f003 0304 	and.w	r3, r3, #4
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d001      	beq.n	800b6b6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b6b2:	230a      	movs	r3, #10
 800b6b4:	e237      	b.n	800bb26 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	e235      	b.n	800bb26 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b6ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6bc:	2200      	movs	r2, #0
 800b6be:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b6c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6c2:	b2da      	uxtb	r2, r3
 800b6c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6c6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b6c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6ca:	785b      	ldrb	r3, [r3, #1]
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	f7fd fec5 	bl	800945c <disk_initialize>
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b6d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b6dc:	f003 0301 	and.w	r3, r3, #1
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d001      	beq.n	800b6e8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b6e4:	2303      	movs	r3, #3
 800b6e6:	e21e      	b.n	800bb26 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b6e8:	79fb      	ldrb	r3, [r7, #7]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d007      	beq.n	800b6fe <find_volume+0xca>
 800b6ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b6f2:	f003 0304 	and.w	r3, r3, #4
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d001      	beq.n	800b6fe <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b6fa:	230a      	movs	r3, #10
 800b6fc:	e213      	b.n	800bb26 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800b6fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b700:	7858      	ldrb	r0, [r3, #1]
 800b702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b704:	330c      	adds	r3, #12
 800b706:	461a      	mov	r2, r3
 800b708:	2102      	movs	r1, #2
 800b70a:	f7fd ff0d 	bl	8009528 <disk_ioctl>
 800b70e:	4603      	mov	r3, r0
 800b710:	2b00      	cmp	r3, #0
 800b712:	d001      	beq.n	800b718 <find_volume+0xe4>
 800b714:	2301      	movs	r3, #1
 800b716:	e206      	b.n	800bb26 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800b718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b71a:	899b      	ldrh	r3, [r3, #12]
 800b71c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b720:	d80d      	bhi.n	800b73e <find_volume+0x10a>
 800b722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b724:	899b      	ldrh	r3, [r3, #12]
 800b726:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b72a:	d308      	bcc.n	800b73e <find_volume+0x10a>
 800b72c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b72e:	899b      	ldrh	r3, [r3, #12]
 800b730:	461a      	mov	r2, r3
 800b732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b734:	899b      	ldrh	r3, [r3, #12]
 800b736:	3b01      	subs	r3, #1
 800b738:	4013      	ands	r3, r2
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d001      	beq.n	800b742 <find_volume+0x10e>
 800b73e:	2301      	movs	r3, #1
 800b740:	e1f1      	b.n	800bb26 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b742:	2300      	movs	r3, #0
 800b744:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b746:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b748:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b74a:	f7ff ff1d 	bl	800b588 <check_fs>
 800b74e:	4603      	mov	r3, r0
 800b750:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b754:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b758:	2b02      	cmp	r3, #2
 800b75a:	d149      	bne.n	800b7f0 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b75c:	2300      	movs	r3, #0
 800b75e:	643b      	str	r3, [r7, #64]	; 0x40
 800b760:	e01e      	b.n	800b7a0 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b764:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800b768:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b76a:	011b      	lsls	r3, r3, #4
 800b76c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b770:	4413      	add	r3, r2
 800b772:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b776:	3304      	adds	r3, #4
 800b778:	781b      	ldrb	r3, [r3, #0]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d006      	beq.n	800b78c <find_volume+0x158>
 800b77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b780:	3308      	adds	r3, #8
 800b782:	4618      	mov	r0, r3
 800b784:	f7fd ff06 	bl	8009594 <ld_dword>
 800b788:	4602      	mov	r2, r0
 800b78a:	e000      	b.n	800b78e <find_volume+0x15a>
 800b78c:	2200      	movs	r2, #0
 800b78e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b790:	009b      	lsls	r3, r3, #2
 800b792:	3358      	adds	r3, #88	; 0x58
 800b794:	443b      	add	r3, r7
 800b796:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b79a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b79c:	3301      	adds	r3, #1
 800b79e:	643b      	str	r3, [r7, #64]	; 0x40
 800b7a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7a2:	2b03      	cmp	r3, #3
 800b7a4:	d9dd      	bls.n	800b762 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b7aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d002      	beq.n	800b7b6 <find_volume+0x182>
 800b7b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7b2:	3b01      	subs	r3, #1
 800b7b4:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b7b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7b8:	009b      	lsls	r3, r3, #2
 800b7ba:	3358      	adds	r3, #88	; 0x58
 800b7bc:	443b      	add	r3, r7
 800b7be:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b7c2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b7c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d005      	beq.n	800b7d6 <find_volume+0x1a2>
 800b7ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b7cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b7ce:	f7ff fedb 	bl	800b588 <check_fs>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	e000      	b.n	800b7d8 <find_volume+0x1a4>
 800b7d6:	2303      	movs	r3, #3
 800b7d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b7dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b7e0:	2b01      	cmp	r3, #1
 800b7e2:	d905      	bls.n	800b7f0 <find_volume+0x1bc>
 800b7e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7e6:	3301      	adds	r3, #1
 800b7e8:	643b      	str	r3, [r7, #64]	; 0x40
 800b7ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7ec:	2b03      	cmp	r3, #3
 800b7ee:	d9e2      	bls.n	800b7b6 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b7f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b7f4:	2b04      	cmp	r3, #4
 800b7f6:	d101      	bne.n	800b7fc <find_volume+0x1c8>
 800b7f8:	2301      	movs	r3, #1
 800b7fa:	e194      	b.n	800bb26 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b7fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b800:	2b01      	cmp	r3, #1
 800b802:	d901      	bls.n	800b808 <find_volume+0x1d4>
 800b804:	230d      	movs	r3, #13
 800b806:	e18e      	b.n	800bb26 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b80a:	3338      	adds	r3, #56	; 0x38
 800b80c:	330b      	adds	r3, #11
 800b80e:	4618      	mov	r0, r3
 800b810:	f7fd fea8 	bl	8009564 <ld_word>
 800b814:	4603      	mov	r3, r0
 800b816:	461a      	mov	r2, r3
 800b818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b81a:	899b      	ldrh	r3, [r3, #12]
 800b81c:	429a      	cmp	r2, r3
 800b81e:	d001      	beq.n	800b824 <find_volume+0x1f0>
 800b820:	230d      	movs	r3, #13
 800b822:	e180      	b.n	800bb26 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b826:	3338      	adds	r3, #56	; 0x38
 800b828:	3316      	adds	r3, #22
 800b82a:	4618      	mov	r0, r3
 800b82c:	f7fd fe9a 	bl	8009564 <ld_word>
 800b830:	4603      	mov	r3, r0
 800b832:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b834:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b836:	2b00      	cmp	r3, #0
 800b838:	d106      	bne.n	800b848 <find_volume+0x214>
 800b83a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b83c:	3338      	adds	r3, #56	; 0x38
 800b83e:	3324      	adds	r3, #36	; 0x24
 800b840:	4618      	mov	r0, r3
 800b842:	f7fd fea7 	bl	8009594 <ld_dword>
 800b846:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800b848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b84a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b84c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b84e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b850:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800b854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b856:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b85a:	789b      	ldrb	r3, [r3, #2]
 800b85c:	2b01      	cmp	r3, #1
 800b85e:	d005      	beq.n	800b86c <find_volume+0x238>
 800b860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b862:	789b      	ldrb	r3, [r3, #2]
 800b864:	2b02      	cmp	r3, #2
 800b866:	d001      	beq.n	800b86c <find_volume+0x238>
 800b868:	230d      	movs	r3, #13
 800b86a:	e15c      	b.n	800bb26 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b86c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b86e:	789b      	ldrb	r3, [r3, #2]
 800b870:	461a      	mov	r2, r3
 800b872:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b874:	fb02 f303 	mul.w	r3, r2, r3
 800b878:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b87a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b87c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b880:	b29a      	uxth	r2, r3
 800b882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b884:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b888:	895b      	ldrh	r3, [r3, #10]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d008      	beq.n	800b8a0 <find_volume+0x26c>
 800b88e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b890:	895b      	ldrh	r3, [r3, #10]
 800b892:	461a      	mov	r2, r3
 800b894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b896:	895b      	ldrh	r3, [r3, #10]
 800b898:	3b01      	subs	r3, #1
 800b89a:	4013      	ands	r3, r2
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d001      	beq.n	800b8a4 <find_volume+0x270>
 800b8a0:	230d      	movs	r3, #13
 800b8a2:	e140      	b.n	800bb26 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b8a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8a6:	3338      	adds	r3, #56	; 0x38
 800b8a8:	3311      	adds	r3, #17
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	f7fd fe5a 	bl	8009564 <ld_word>
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	461a      	mov	r2, r3
 800b8b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8b6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b8b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ba:	891b      	ldrh	r3, [r3, #8]
 800b8bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b8be:	8992      	ldrh	r2, [r2, #12]
 800b8c0:	0952      	lsrs	r2, r2, #5
 800b8c2:	b292      	uxth	r2, r2
 800b8c4:	fbb3 f1f2 	udiv	r1, r3, r2
 800b8c8:	fb01 f202 	mul.w	r2, r1, r2
 800b8cc:	1a9b      	subs	r3, r3, r2
 800b8ce:	b29b      	uxth	r3, r3
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d003      	beq.n	800b8dc <find_volume+0x2a8>
 800b8d4:	230d      	movs	r3, #13
 800b8d6:	e126      	b.n	800bb26 <find_volume+0x4f2>
 800b8d8:	200022d8 	.word	0x200022d8

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b8dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8de:	3338      	adds	r3, #56	; 0x38
 800b8e0:	3313      	adds	r3, #19
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f7fd fe3e 	bl	8009564 <ld_word>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b8ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d106      	bne.n	800b900 <find_volume+0x2cc>
 800b8f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8f4:	3338      	adds	r3, #56	; 0x38
 800b8f6:	3320      	adds	r3, #32
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f7fd fe4b 	bl	8009594 <ld_dword>
 800b8fe:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b902:	3338      	adds	r3, #56	; 0x38
 800b904:	330e      	adds	r3, #14
 800b906:	4618      	mov	r0, r3
 800b908:	f7fd fe2c 	bl	8009564 <ld_word>
 800b90c:	4603      	mov	r3, r0
 800b90e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b910:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b912:	2b00      	cmp	r3, #0
 800b914:	d101      	bne.n	800b91a <find_volume+0x2e6>
 800b916:	230d      	movs	r3, #13
 800b918:	e105      	b.n	800bb26 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b91a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b91c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b91e:	4413      	add	r3, r2
 800b920:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b922:	8911      	ldrh	r1, [r2, #8]
 800b924:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b926:	8992      	ldrh	r2, [r2, #12]
 800b928:	0952      	lsrs	r2, r2, #5
 800b92a:	b292      	uxth	r2, r2
 800b92c:	fbb1 f2f2 	udiv	r2, r1, r2
 800b930:	b292      	uxth	r2, r2
 800b932:	4413      	add	r3, r2
 800b934:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b936:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b93a:	429a      	cmp	r2, r3
 800b93c:	d201      	bcs.n	800b942 <find_volume+0x30e>
 800b93e:	230d      	movs	r3, #13
 800b940:	e0f1      	b.n	800bb26 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b942:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b946:	1ad3      	subs	r3, r2, r3
 800b948:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b94a:	8952      	ldrh	r2, [r2, #10]
 800b94c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b950:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b954:	2b00      	cmp	r3, #0
 800b956:	d101      	bne.n	800b95c <find_volume+0x328>
 800b958:	230d      	movs	r3, #13
 800b95a:	e0e4      	b.n	800bb26 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800b95c:	2303      	movs	r3, #3
 800b95e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b964:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b968:	4293      	cmp	r3, r2
 800b96a:	d802      	bhi.n	800b972 <find_volume+0x33e>
 800b96c:	2302      	movs	r3, #2
 800b96e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b974:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b978:	4293      	cmp	r3, r2
 800b97a:	d802      	bhi.n	800b982 <find_volume+0x34e>
 800b97c:	2301      	movs	r3, #1
 800b97e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b984:	1c9a      	adds	r2, r3, #2
 800b986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b988:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800b98a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b98c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b98e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b990:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b992:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b994:	441a      	add	r2, r3
 800b996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b998:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800b99a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b99c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b99e:	441a      	add	r2, r3
 800b9a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9a2:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800b9a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b9a8:	2b03      	cmp	r3, #3
 800b9aa:	d11e      	bne.n	800b9ea <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b9ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ae:	3338      	adds	r3, #56	; 0x38
 800b9b0:	332a      	adds	r3, #42	; 0x2a
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f7fd fdd6 	bl	8009564 <ld_word>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d001      	beq.n	800b9c2 <find_volume+0x38e>
 800b9be:	230d      	movs	r3, #13
 800b9c0:	e0b1      	b.n	800bb26 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b9c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9c4:	891b      	ldrh	r3, [r3, #8]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d001      	beq.n	800b9ce <find_volume+0x39a>
 800b9ca:	230d      	movs	r3, #13
 800b9cc:	e0ab      	b.n	800bb26 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b9ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9d0:	3338      	adds	r3, #56	; 0x38
 800b9d2:	332c      	adds	r3, #44	; 0x2c
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f7fd fddd 	bl	8009594 <ld_dword>
 800b9da:	4602      	mov	r2, r0
 800b9dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9de:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b9e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9e2:	69db      	ldr	r3, [r3, #28]
 800b9e4:	009b      	lsls	r3, r3, #2
 800b9e6:	647b      	str	r3, [r7, #68]	; 0x44
 800b9e8:	e01f      	b.n	800ba2a <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b9ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ec:	891b      	ldrh	r3, [r3, #8]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d101      	bne.n	800b9f6 <find_volume+0x3c2>
 800b9f2:	230d      	movs	r3, #13
 800b9f4:	e097      	b.n	800bb26 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b9f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b9fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9fc:	441a      	add	r2, r3
 800b9fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba00:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ba02:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ba06:	2b02      	cmp	r3, #2
 800ba08:	d103      	bne.n	800ba12 <find_volume+0x3de>
 800ba0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba0c:	69db      	ldr	r3, [r3, #28]
 800ba0e:	005b      	lsls	r3, r3, #1
 800ba10:	e00a      	b.n	800ba28 <find_volume+0x3f4>
 800ba12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba14:	69da      	ldr	r2, [r3, #28]
 800ba16:	4613      	mov	r3, r2
 800ba18:	005b      	lsls	r3, r3, #1
 800ba1a:	4413      	add	r3, r2
 800ba1c:	085a      	lsrs	r2, r3, #1
 800ba1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba20:	69db      	ldr	r3, [r3, #28]
 800ba22:	f003 0301 	and.w	r3, r3, #1
 800ba26:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ba28:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ba2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba2c:	6a1a      	ldr	r2, [r3, #32]
 800ba2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba30:	899b      	ldrh	r3, [r3, #12]
 800ba32:	4619      	mov	r1, r3
 800ba34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba36:	440b      	add	r3, r1
 800ba38:	3b01      	subs	r3, #1
 800ba3a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ba3c:	8989      	ldrh	r1, [r1, #12]
 800ba3e:	fbb3 f3f1 	udiv	r3, r3, r1
 800ba42:	429a      	cmp	r2, r3
 800ba44:	d201      	bcs.n	800ba4a <find_volume+0x416>
 800ba46:	230d      	movs	r3, #13
 800ba48:	e06d      	b.n	800bb26 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ba4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ba50:	619a      	str	r2, [r3, #24]
 800ba52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba54:	699a      	ldr	r2, [r3, #24]
 800ba56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba58:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800ba5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba5c:	2280      	movs	r2, #128	; 0x80
 800ba5e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ba60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ba64:	2b03      	cmp	r3, #3
 800ba66:	d149      	bne.n	800bafc <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ba68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba6a:	3338      	adds	r3, #56	; 0x38
 800ba6c:	3330      	adds	r3, #48	; 0x30
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f7fd fd78 	bl	8009564 <ld_word>
 800ba74:	4603      	mov	r3, r0
 800ba76:	2b01      	cmp	r3, #1
 800ba78:	d140      	bne.n	800bafc <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ba7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba7c:	3301      	adds	r3, #1
 800ba7e:	4619      	mov	r1, r3
 800ba80:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ba82:	f7fe f81f 	bl	8009ac4 <move_window>
 800ba86:	4603      	mov	r3, r0
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d137      	bne.n	800bafc <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800ba8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba8e:	2200      	movs	r2, #0
 800ba90:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ba92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba94:	3338      	adds	r3, #56	; 0x38
 800ba96:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f7fd fd62 	bl	8009564 <ld_word>
 800baa0:	4603      	mov	r3, r0
 800baa2:	461a      	mov	r2, r3
 800baa4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800baa8:	429a      	cmp	r2, r3
 800baaa:	d127      	bne.n	800bafc <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800baac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baae:	3338      	adds	r3, #56	; 0x38
 800bab0:	4618      	mov	r0, r3
 800bab2:	f7fd fd6f 	bl	8009594 <ld_dword>
 800bab6:	4603      	mov	r3, r0
 800bab8:	4a1d      	ldr	r2, [pc, #116]	; (800bb30 <find_volume+0x4fc>)
 800baba:	4293      	cmp	r3, r2
 800babc:	d11e      	bne.n	800bafc <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800babe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bac0:	3338      	adds	r3, #56	; 0x38
 800bac2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bac6:	4618      	mov	r0, r3
 800bac8:	f7fd fd64 	bl	8009594 <ld_dword>
 800bacc:	4603      	mov	r3, r0
 800bace:	4a19      	ldr	r2, [pc, #100]	; (800bb34 <find_volume+0x500>)
 800bad0:	4293      	cmp	r3, r2
 800bad2:	d113      	bne.n	800bafc <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800bad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bad6:	3338      	adds	r3, #56	; 0x38
 800bad8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800badc:	4618      	mov	r0, r3
 800bade:	f7fd fd59 	bl	8009594 <ld_dword>
 800bae2:	4602      	mov	r2, r0
 800bae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bae6:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800bae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baea:	3338      	adds	r3, #56	; 0x38
 800baec:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800baf0:	4618      	mov	r0, r3
 800baf2:	f7fd fd4f 	bl	8009594 <ld_dword>
 800baf6:	4602      	mov	r2, r0
 800baf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bafa:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800bafc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bafe:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800bb02:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800bb04:	4b0c      	ldr	r3, [pc, #48]	; (800bb38 <find_volume+0x504>)
 800bb06:	881b      	ldrh	r3, [r3, #0]
 800bb08:	3301      	adds	r3, #1
 800bb0a:	b29a      	uxth	r2, r3
 800bb0c:	4b0a      	ldr	r3, [pc, #40]	; (800bb38 <find_volume+0x504>)
 800bb0e:	801a      	strh	r2, [r3, #0]
 800bb10:	4b09      	ldr	r3, [pc, #36]	; (800bb38 <find_volume+0x504>)
 800bb12:	881a      	ldrh	r2, [r3, #0]
 800bb14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb16:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800bb18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb1a:	4a08      	ldr	r2, [pc, #32]	; (800bb3c <find_volume+0x508>)
 800bb1c:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800bb1e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bb20:	f7fd ff68 	bl	80099f4 <clear_lock>
#endif
	return FR_OK;
 800bb24:	2300      	movs	r3, #0
}
 800bb26:	4618      	mov	r0, r3
 800bb28:	3758      	adds	r7, #88	; 0x58
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	bd80      	pop	{r7, pc}
 800bb2e:	bf00      	nop
 800bb30:	41615252 	.word	0x41615252
 800bb34:	61417272 	.word	0x61417272
 800bb38:	200022dc 	.word	0x200022dc
 800bb3c:	20002300 	.word	0x20002300

0800bb40 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b084      	sub	sp, #16
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
 800bb48:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800bb4a:	2309      	movs	r3, #9
 800bb4c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d01c      	beq.n	800bb8e <validate+0x4e>
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d018      	beq.n	800bb8e <validate+0x4e>
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	781b      	ldrb	r3, [r3, #0]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d013      	beq.n	800bb8e <validate+0x4e>
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	889a      	ldrh	r2, [r3, #4]
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	88db      	ldrh	r3, [r3, #6]
 800bb70:	429a      	cmp	r2, r3
 800bb72:	d10c      	bne.n	800bb8e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	785b      	ldrb	r3, [r3, #1]
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f7fd fc54 	bl	8009428 <disk_status>
 800bb80:	4603      	mov	r3, r0
 800bb82:	f003 0301 	and.w	r3, r3, #1
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d101      	bne.n	800bb8e <validate+0x4e>
			res = FR_OK;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800bb8e:	7bfb      	ldrb	r3, [r7, #15]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d102      	bne.n	800bb9a <validate+0x5a>
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	e000      	b.n	800bb9c <validate+0x5c>
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	683a      	ldr	r2, [r7, #0]
 800bb9e:	6013      	str	r3, [r2, #0]
	return res;
 800bba0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	3710      	adds	r7, #16
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}
	...

0800bbac <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b088      	sub	sp, #32
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	60f8      	str	r0, [r7, #12]
 800bbb4:	60b9      	str	r1, [r7, #8]
 800bbb6:	4613      	mov	r3, r2
 800bbb8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800bbba:	68bb      	ldr	r3, [r7, #8]
 800bbbc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800bbbe:	f107 0310 	add.w	r3, r7, #16
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f7ff fc9c 	bl	800b500 <get_ldnumber>
 800bbc8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800bbca:	69fb      	ldr	r3, [r7, #28]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	da01      	bge.n	800bbd4 <f_mount+0x28>
 800bbd0:	230b      	movs	r3, #11
 800bbd2:	e02b      	b.n	800bc2c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800bbd4:	4a17      	ldr	r2, [pc, #92]	; (800bc34 <f_mount+0x88>)
 800bbd6:	69fb      	ldr	r3, [r7, #28]
 800bbd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bbdc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800bbde:	69bb      	ldr	r3, [r7, #24]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d005      	beq.n	800bbf0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800bbe4:	69b8      	ldr	r0, [r7, #24]
 800bbe6:	f7fd ff05 	bl	80099f4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800bbea:	69bb      	ldr	r3, [r7, #24]
 800bbec:	2200      	movs	r2, #0
 800bbee:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d002      	beq.n	800bbfc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800bbfc:	68fa      	ldr	r2, [r7, #12]
 800bbfe:	490d      	ldr	r1, [pc, #52]	; (800bc34 <f_mount+0x88>)
 800bc00:	69fb      	ldr	r3, [r7, #28]
 800bc02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d002      	beq.n	800bc12 <f_mount+0x66>
 800bc0c:	79fb      	ldrb	r3, [r7, #7]
 800bc0e:	2b01      	cmp	r3, #1
 800bc10:	d001      	beq.n	800bc16 <f_mount+0x6a>
 800bc12:	2300      	movs	r3, #0
 800bc14:	e00a      	b.n	800bc2c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800bc16:	f107 010c 	add.w	r1, r7, #12
 800bc1a:	f107 0308 	add.w	r3, r7, #8
 800bc1e:	2200      	movs	r2, #0
 800bc20:	4618      	mov	r0, r3
 800bc22:	f7ff fd07 	bl	800b634 <find_volume>
 800bc26:	4603      	mov	r3, r0
 800bc28:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800bc2a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	3720      	adds	r7, #32
 800bc30:	46bd      	mov	sp, r7
 800bc32:	bd80      	pop	{r7, pc}
 800bc34:	200022d8 	.word	0x200022d8

0800bc38 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b09a      	sub	sp, #104	; 0x68
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	60f8      	str	r0, [r7, #12]
 800bc40:	60b9      	str	r1, [r7, #8]
 800bc42:	4613      	mov	r3, r2
 800bc44:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d101      	bne.n	800bc50 <f_open+0x18>
 800bc4c:	2309      	movs	r3, #9
 800bc4e:	e1bb      	b.n	800bfc8 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800bc50:	79fb      	ldrb	r3, [r7, #7]
 800bc52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bc56:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800bc58:	79fa      	ldrb	r2, [r7, #7]
 800bc5a:	f107 0114 	add.w	r1, r7, #20
 800bc5e:	f107 0308 	add.w	r3, r7, #8
 800bc62:	4618      	mov	r0, r3
 800bc64:	f7ff fce6 	bl	800b634 <find_volume>
 800bc68:	4603      	mov	r3, r0
 800bc6a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800bc6e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	f040 819f 	bne.w	800bfb6 <f_open+0x37e>
		dj.obj.fs = fs;
 800bc78:	697b      	ldr	r3, [r7, #20]
 800bc7a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800bc7c:	68ba      	ldr	r2, [r7, #8]
 800bc7e:	f107 0318 	add.w	r3, r7, #24
 800bc82:	4611      	mov	r1, r2
 800bc84:	4618      	mov	r0, r3
 800bc86:	f7ff fbc5 	bl	800b414 <follow_path>
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800bc90:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d11a      	bne.n	800bcce <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800bc98:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800bc9c:	b25b      	sxtb	r3, r3
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	da03      	bge.n	800bcaa <f_open+0x72>
				res = FR_INVALID_NAME;
 800bca2:	2306      	movs	r3, #6
 800bca4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800bca8:	e011      	b.n	800bcce <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bcaa:	79fb      	ldrb	r3, [r7, #7]
 800bcac:	f023 0301 	bic.w	r3, r3, #1
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	bf14      	ite	ne
 800bcb4:	2301      	movne	r3, #1
 800bcb6:	2300      	moveq	r3, #0
 800bcb8:	b2db      	uxtb	r3, r3
 800bcba:	461a      	mov	r2, r3
 800bcbc:	f107 0318 	add.w	r3, r7, #24
 800bcc0:	4611      	mov	r1, r2
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f7fd fd4e 	bl	8009764 <chk_lock>
 800bcc8:	4603      	mov	r3, r0
 800bcca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800bcce:	79fb      	ldrb	r3, [r7, #7]
 800bcd0:	f003 031c 	and.w	r3, r3, #28
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d07f      	beq.n	800bdd8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800bcd8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d017      	beq.n	800bd10 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800bce0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bce4:	2b04      	cmp	r3, #4
 800bce6:	d10e      	bne.n	800bd06 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800bce8:	f7fd fd98 	bl	800981c <enq_lock>
 800bcec:	4603      	mov	r3, r0
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d006      	beq.n	800bd00 <f_open+0xc8>
 800bcf2:	f107 0318 	add.w	r3, r7, #24
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	f7fe fffe 	bl	800acf8 <dir_register>
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	e000      	b.n	800bd02 <f_open+0xca>
 800bd00:	2312      	movs	r3, #18
 800bd02:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800bd06:	79fb      	ldrb	r3, [r7, #7]
 800bd08:	f043 0308 	orr.w	r3, r3, #8
 800bd0c:	71fb      	strb	r3, [r7, #7]
 800bd0e:	e010      	b.n	800bd32 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800bd10:	7fbb      	ldrb	r3, [r7, #30]
 800bd12:	f003 0311 	and.w	r3, r3, #17
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d003      	beq.n	800bd22 <f_open+0xea>
					res = FR_DENIED;
 800bd1a:	2307      	movs	r3, #7
 800bd1c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800bd20:	e007      	b.n	800bd32 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800bd22:	79fb      	ldrb	r3, [r7, #7]
 800bd24:	f003 0304 	and.w	r3, r3, #4
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d002      	beq.n	800bd32 <f_open+0xfa>
 800bd2c:	2308      	movs	r3, #8
 800bd2e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800bd32:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d168      	bne.n	800be0c <f_open+0x1d4>
 800bd3a:	79fb      	ldrb	r3, [r7, #7]
 800bd3c:	f003 0308 	and.w	r3, r3, #8
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d063      	beq.n	800be0c <f_open+0x1d4>
				dw = GET_FATTIME();
 800bd44:	f7fa fb74 	bl	8006430 <get_fattime>
 800bd48:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800bd4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd4c:	330e      	adds	r3, #14
 800bd4e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bd50:	4618      	mov	r0, r3
 800bd52:	f7fd fc5d 	bl	8009610 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800bd56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd58:	3316      	adds	r3, #22
 800bd5a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	f7fd fc57 	bl	8009610 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800bd62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd64:	330b      	adds	r3, #11
 800bd66:	2220      	movs	r2, #32
 800bd68:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800bd6a:	697b      	ldr	r3, [r7, #20]
 800bd6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd6e:	4611      	mov	r1, r2
 800bd70:	4618      	mov	r0, r3
 800bd72:	f7fe fc2f 	bl	800a5d4 <ld_clust>
 800bd76:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800bd78:	697b      	ldr	r3, [r7, #20]
 800bd7a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f7fe fc47 	bl	800a612 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800bd84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd86:	331c      	adds	r3, #28
 800bd88:	2100      	movs	r1, #0
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f7fd fc40 	bl	8009610 <st_dword>
					fs->wflag = 1;
 800bd90:	697b      	ldr	r3, [r7, #20]
 800bd92:	2201      	movs	r2, #1
 800bd94:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800bd96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d037      	beq.n	800be0c <f_open+0x1d4>
						dw = fs->winsect;
 800bd9c:	697b      	ldr	r3, [r7, #20]
 800bd9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bda0:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800bda2:	f107 0318 	add.w	r3, r7, #24
 800bda6:	2200      	movs	r2, #0
 800bda8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bdaa:	4618      	mov	r0, r3
 800bdac:	f7fe f937 	bl	800a01e <remove_chain>
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800bdb6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d126      	bne.n	800be0c <f_open+0x1d4>
							res = move_window(fs, dw);
 800bdbe:	697b      	ldr	r3, [r7, #20]
 800bdc0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	f7fd fe7e 	bl	8009ac4 <move_window>
 800bdc8:	4603      	mov	r3, r0
 800bdca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800bdce:	697b      	ldr	r3, [r7, #20]
 800bdd0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bdd2:	3a01      	subs	r2, #1
 800bdd4:	615a      	str	r2, [r3, #20]
 800bdd6:	e019      	b.n	800be0c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800bdd8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d115      	bne.n	800be0c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800bde0:	7fbb      	ldrb	r3, [r7, #30]
 800bde2:	f003 0310 	and.w	r3, r3, #16
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d003      	beq.n	800bdf2 <f_open+0x1ba>
					res = FR_NO_FILE;
 800bdea:	2304      	movs	r3, #4
 800bdec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800bdf0:	e00c      	b.n	800be0c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800bdf2:	79fb      	ldrb	r3, [r7, #7]
 800bdf4:	f003 0302 	and.w	r3, r3, #2
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d007      	beq.n	800be0c <f_open+0x1d4>
 800bdfc:	7fbb      	ldrb	r3, [r7, #30]
 800bdfe:	f003 0301 	and.w	r3, r3, #1
 800be02:	2b00      	cmp	r3, #0
 800be04:	d002      	beq.n	800be0c <f_open+0x1d4>
						res = FR_DENIED;
 800be06:	2307      	movs	r3, #7
 800be08:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800be0c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800be10:	2b00      	cmp	r3, #0
 800be12:	d128      	bne.n	800be66 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800be14:	79fb      	ldrb	r3, [r7, #7]
 800be16:	f003 0308 	and.w	r3, r3, #8
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d003      	beq.n	800be26 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800be1e:	79fb      	ldrb	r3, [r7, #7]
 800be20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be24:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800be26:	697b      	ldr	r3, [r7, #20]
 800be28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800be2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800be34:	79fb      	ldrb	r3, [r7, #7]
 800be36:	f023 0301 	bic.w	r3, r3, #1
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	bf14      	ite	ne
 800be3e:	2301      	movne	r3, #1
 800be40:	2300      	moveq	r3, #0
 800be42:	b2db      	uxtb	r3, r3
 800be44:	461a      	mov	r2, r3
 800be46:	f107 0318 	add.w	r3, r7, #24
 800be4a:	4611      	mov	r1, r2
 800be4c:	4618      	mov	r0, r3
 800be4e:	f7fd fd07 	bl	8009860 <inc_lock>
 800be52:	4602      	mov	r2, r0
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	691b      	ldr	r3, [r3, #16]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d102      	bne.n	800be66 <f_open+0x22e>
 800be60:	2302      	movs	r3, #2
 800be62:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800be66:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	f040 80a3 	bne.w	800bfb6 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800be70:	697b      	ldr	r3, [r7, #20]
 800be72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be74:	4611      	mov	r1, r2
 800be76:	4618      	mov	r0, r3
 800be78:	f7fe fbac 	bl	800a5d4 <ld_clust>
 800be7c:	4602      	mov	r2, r0
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800be82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be84:	331c      	adds	r3, #28
 800be86:	4618      	mov	r0, r3
 800be88:	f7fd fb84 	bl	8009594 <ld_dword>
 800be8c:	4602      	mov	r2, r0
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	2200      	movs	r2, #0
 800be96:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800be98:	697a      	ldr	r2, [r7, #20]
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800be9e:	697b      	ldr	r3, [r7, #20]
 800bea0:	88da      	ldrh	r2, [r3, #6]
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	79fa      	ldrb	r2, [r7, #7]
 800beaa:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	2200      	movs	r2, #0
 800beb0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	2200      	movs	r2, #0
 800beb6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	2200      	movs	r2, #0
 800bebc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	3330      	adds	r3, #48	; 0x30
 800bec2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800bec6:	2100      	movs	r1, #0
 800bec8:	4618      	mov	r0, r3
 800beca:	f7fd fbee 	bl	80096aa <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800bece:	79fb      	ldrb	r3, [r7, #7]
 800bed0:	f003 0320 	and.w	r3, r3, #32
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d06e      	beq.n	800bfb6 <f_open+0x37e>
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	68db      	ldr	r3, [r3, #12]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d06a      	beq.n	800bfb6 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	68da      	ldr	r2, [r3, #12]
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800bee8:	697b      	ldr	r3, [r7, #20]
 800beea:	895b      	ldrh	r3, [r3, #10]
 800beec:	461a      	mov	r2, r3
 800beee:	697b      	ldr	r3, [r7, #20]
 800bef0:	899b      	ldrh	r3, [r3, #12]
 800bef2:	fb02 f303 	mul.w	r3, r2, r3
 800bef6:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	689b      	ldr	r3, [r3, #8]
 800befc:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	68db      	ldr	r3, [r3, #12]
 800bf02:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bf04:	e016      	b.n	800bf34 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	f7fd fe97 	bl	8009c3e <get_fat>
 800bf10:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800bf12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bf14:	2b01      	cmp	r3, #1
 800bf16:	d802      	bhi.n	800bf1e <f_open+0x2e6>
 800bf18:	2302      	movs	r3, #2
 800bf1a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800bf1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bf20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf24:	d102      	bne.n	800bf2c <f_open+0x2f4>
 800bf26:	2301      	movs	r3, #1
 800bf28:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bf2c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bf2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf30:	1ad3      	subs	r3, r2, r3
 800bf32:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bf34:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d103      	bne.n	800bf44 <f_open+0x30c>
 800bf3c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bf3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf40:	429a      	cmp	r2, r3
 800bf42:	d8e0      	bhi.n	800bf06 <f_open+0x2ce>
				}
				fp->clust = clst;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bf48:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800bf4a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d131      	bne.n	800bfb6 <f_open+0x37e>
 800bf52:	697b      	ldr	r3, [r7, #20]
 800bf54:	899b      	ldrh	r3, [r3, #12]
 800bf56:	461a      	mov	r2, r3
 800bf58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf5a:	fbb3 f1f2 	udiv	r1, r3, r2
 800bf5e:	fb01 f202 	mul.w	r2, r1, r2
 800bf62:	1a9b      	subs	r3, r3, r2
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d026      	beq.n	800bfb6 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800bf68:	697b      	ldr	r3, [r7, #20]
 800bf6a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f7fd fe47 	bl	8009c00 <clust2sect>
 800bf72:	64f8      	str	r0, [r7, #76]	; 0x4c
 800bf74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d103      	bne.n	800bf82 <f_open+0x34a>
						res = FR_INT_ERR;
 800bf7a:	2302      	movs	r3, #2
 800bf7c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800bf80:	e019      	b.n	800bfb6 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800bf82:	697b      	ldr	r3, [r7, #20]
 800bf84:	899b      	ldrh	r3, [r3, #12]
 800bf86:	461a      	mov	r2, r3
 800bf88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf8a:	fbb3 f2f2 	udiv	r2, r3, r2
 800bf8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf90:	441a      	add	r2, r3
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800bf96:	697b      	ldr	r3, [r7, #20]
 800bf98:	7858      	ldrb	r0, [r3, #1]
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	6a1a      	ldr	r2, [r3, #32]
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	f7fd fa7f 	bl	80094a8 <disk_read>
 800bfaa:	4603      	mov	r3, r0
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d002      	beq.n	800bfb6 <f_open+0x37e>
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800bfb6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d002      	beq.n	800bfc4 <f_open+0x38c>
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800bfc4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800bfc8:	4618      	mov	r0, r3
 800bfca:	3768      	adds	r7, #104	; 0x68
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	bd80      	pop	{r7, pc}

0800bfd0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b08c      	sub	sp, #48	; 0x30
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	60f8      	str	r0, [r7, #12]
 800bfd8:	60b9      	str	r1, [r7, #8]
 800bfda:	607a      	str	r2, [r7, #4]
 800bfdc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800bfde:	68bb      	ldr	r3, [r7, #8]
 800bfe0:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	f107 0210 	add.w	r2, r7, #16
 800bfee:	4611      	mov	r1, r2
 800bff0:	4618      	mov	r0, r3
 800bff2:	f7ff fda5 	bl	800bb40 <validate>
 800bff6:	4603      	mov	r3, r0
 800bff8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800bffc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c000:	2b00      	cmp	r3, #0
 800c002:	d107      	bne.n	800c014 <f_write+0x44>
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	7d5b      	ldrb	r3, [r3, #21]
 800c008:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c00c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c010:	2b00      	cmp	r3, #0
 800c012:	d002      	beq.n	800c01a <f_write+0x4a>
 800c014:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c018:	e16a      	b.n	800c2f0 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	7d1b      	ldrb	r3, [r3, #20]
 800c01e:	f003 0302 	and.w	r3, r3, #2
 800c022:	2b00      	cmp	r3, #0
 800c024:	d101      	bne.n	800c02a <f_write+0x5a>
 800c026:	2307      	movs	r3, #7
 800c028:	e162      	b.n	800c2f0 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	699a      	ldr	r2, [r3, #24]
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	441a      	add	r2, r3
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	699b      	ldr	r3, [r3, #24]
 800c036:	429a      	cmp	r2, r3
 800c038:	f080 814c 	bcs.w	800c2d4 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	699b      	ldr	r3, [r3, #24]
 800c040:	43db      	mvns	r3, r3
 800c042:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c044:	e146      	b.n	800c2d4 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	699b      	ldr	r3, [r3, #24]
 800c04a:	693a      	ldr	r2, [r7, #16]
 800c04c:	8992      	ldrh	r2, [r2, #12]
 800c04e:	fbb3 f1f2 	udiv	r1, r3, r2
 800c052:	fb01 f202 	mul.w	r2, r1, r2
 800c056:	1a9b      	subs	r3, r3, r2
 800c058:	2b00      	cmp	r3, #0
 800c05a:	f040 80f1 	bne.w	800c240 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	699b      	ldr	r3, [r3, #24]
 800c062:	693a      	ldr	r2, [r7, #16]
 800c064:	8992      	ldrh	r2, [r2, #12]
 800c066:	fbb3 f3f2 	udiv	r3, r3, r2
 800c06a:	693a      	ldr	r2, [r7, #16]
 800c06c:	8952      	ldrh	r2, [r2, #10]
 800c06e:	3a01      	subs	r2, #1
 800c070:	4013      	ands	r3, r2
 800c072:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c074:	69bb      	ldr	r3, [r7, #24]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d143      	bne.n	800c102 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	699b      	ldr	r3, [r3, #24]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d10c      	bne.n	800c09c <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	689b      	ldr	r3, [r3, #8]
 800c086:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d11a      	bne.n	800c0c4 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	2100      	movs	r1, #0
 800c092:	4618      	mov	r0, r3
 800c094:	f7fe f828 	bl	800a0e8 <create_chain>
 800c098:	62b8      	str	r0, [r7, #40]	; 0x28
 800c09a:	e013      	b.n	800c0c4 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d007      	beq.n	800c0b4 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	699b      	ldr	r3, [r3, #24]
 800c0a8:	4619      	mov	r1, r3
 800c0aa:	68f8      	ldr	r0, [r7, #12]
 800c0ac:	f7fe f8b4 	bl	800a218 <clmt_clust>
 800c0b0:	62b8      	str	r0, [r7, #40]	; 0x28
 800c0b2:	e007      	b.n	800c0c4 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c0b4:	68fa      	ldr	r2, [r7, #12]
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	69db      	ldr	r3, [r3, #28]
 800c0ba:	4619      	mov	r1, r3
 800c0bc:	4610      	mov	r0, r2
 800c0be:	f7fe f813 	bl	800a0e8 <create_chain>
 800c0c2:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c0c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	f000 8109 	beq.w	800c2de <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c0cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ce:	2b01      	cmp	r3, #1
 800c0d0:	d104      	bne.n	800c0dc <f_write+0x10c>
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	2202      	movs	r2, #2
 800c0d6:	755a      	strb	r2, [r3, #21]
 800c0d8:	2302      	movs	r3, #2
 800c0da:	e109      	b.n	800c2f0 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c0dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c0e2:	d104      	bne.n	800c0ee <f_write+0x11e>
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	2201      	movs	r2, #1
 800c0e8:	755a      	strb	r2, [r3, #21]
 800c0ea:	2301      	movs	r3, #1
 800c0ec:	e100      	b.n	800c2f0 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c0f2:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	689b      	ldr	r3, [r3, #8]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d102      	bne.n	800c102 <f_write+0x132>
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c100:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	7d1b      	ldrb	r3, [r3, #20]
 800c106:	b25b      	sxtb	r3, r3
 800c108:	2b00      	cmp	r3, #0
 800c10a:	da18      	bge.n	800c13e <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c10c:	693b      	ldr	r3, [r7, #16]
 800c10e:	7858      	ldrb	r0, [r3, #1]
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	6a1a      	ldr	r2, [r3, #32]
 800c11a:	2301      	movs	r3, #1
 800c11c:	f7fd f9e4 	bl	80094e8 <disk_write>
 800c120:	4603      	mov	r3, r0
 800c122:	2b00      	cmp	r3, #0
 800c124:	d004      	beq.n	800c130 <f_write+0x160>
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	2201      	movs	r2, #1
 800c12a:	755a      	strb	r2, [r3, #21]
 800c12c:	2301      	movs	r3, #1
 800c12e:	e0df      	b.n	800c2f0 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	7d1b      	ldrb	r3, [r3, #20]
 800c134:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c138:	b2da      	uxtb	r2, r3
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c13e:	693a      	ldr	r2, [r7, #16]
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	69db      	ldr	r3, [r3, #28]
 800c144:	4619      	mov	r1, r3
 800c146:	4610      	mov	r0, r2
 800c148:	f7fd fd5a 	bl	8009c00 <clust2sect>
 800c14c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c14e:	697b      	ldr	r3, [r7, #20]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d104      	bne.n	800c15e <f_write+0x18e>
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	2202      	movs	r2, #2
 800c158:	755a      	strb	r2, [r3, #21]
 800c15a:	2302      	movs	r3, #2
 800c15c:	e0c8      	b.n	800c2f0 <f_write+0x320>
			sect += csect;
 800c15e:	697a      	ldr	r2, [r7, #20]
 800c160:	69bb      	ldr	r3, [r7, #24]
 800c162:	4413      	add	r3, r2
 800c164:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c166:	693b      	ldr	r3, [r7, #16]
 800c168:	899b      	ldrh	r3, [r3, #12]
 800c16a:	461a      	mov	r2, r3
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	fbb3 f3f2 	udiv	r3, r3, r2
 800c172:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c174:	6a3b      	ldr	r3, [r7, #32]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d043      	beq.n	800c202 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c17a:	69ba      	ldr	r2, [r7, #24]
 800c17c:	6a3b      	ldr	r3, [r7, #32]
 800c17e:	4413      	add	r3, r2
 800c180:	693a      	ldr	r2, [r7, #16]
 800c182:	8952      	ldrh	r2, [r2, #10]
 800c184:	4293      	cmp	r3, r2
 800c186:	d905      	bls.n	800c194 <f_write+0x1c4>
					cc = fs->csize - csect;
 800c188:	693b      	ldr	r3, [r7, #16]
 800c18a:	895b      	ldrh	r3, [r3, #10]
 800c18c:	461a      	mov	r2, r3
 800c18e:	69bb      	ldr	r3, [r7, #24]
 800c190:	1ad3      	subs	r3, r2, r3
 800c192:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c194:	693b      	ldr	r3, [r7, #16]
 800c196:	7858      	ldrb	r0, [r3, #1]
 800c198:	6a3b      	ldr	r3, [r7, #32]
 800c19a:	697a      	ldr	r2, [r7, #20]
 800c19c:	69f9      	ldr	r1, [r7, #28]
 800c19e:	f7fd f9a3 	bl	80094e8 <disk_write>
 800c1a2:	4603      	mov	r3, r0
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d004      	beq.n	800c1b2 <f_write+0x1e2>
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	2201      	movs	r2, #1
 800c1ac:	755a      	strb	r2, [r3, #21]
 800c1ae:	2301      	movs	r3, #1
 800c1b0:	e09e      	b.n	800c2f0 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	6a1a      	ldr	r2, [r3, #32]
 800c1b6:	697b      	ldr	r3, [r7, #20]
 800c1b8:	1ad3      	subs	r3, r2, r3
 800c1ba:	6a3a      	ldr	r2, [r7, #32]
 800c1bc:	429a      	cmp	r2, r3
 800c1be:	d918      	bls.n	800c1f2 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	6a1a      	ldr	r2, [r3, #32]
 800c1ca:	697b      	ldr	r3, [r7, #20]
 800c1cc:	1ad3      	subs	r3, r2, r3
 800c1ce:	693a      	ldr	r2, [r7, #16]
 800c1d0:	8992      	ldrh	r2, [r2, #12]
 800c1d2:	fb02 f303 	mul.w	r3, r2, r3
 800c1d6:	69fa      	ldr	r2, [r7, #28]
 800c1d8:	18d1      	adds	r1, r2, r3
 800c1da:	693b      	ldr	r3, [r7, #16]
 800c1dc:	899b      	ldrh	r3, [r3, #12]
 800c1de:	461a      	mov	r2, r3
 800c1e0:	f7fd fa42 	bl	8009668 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	7d1b      	ldrb	r3, [r3, #20]
 800c1e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c1ec:	b2da      	uxtb	r2, r3
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c1f2:	693b      	ldr	r3, [r7, #16]
 800c1f4:	899b      	ldrh	r3, [r3, #12]
 800c1f6:	461a      	mov	r2, r3
 800c1f8:	6a3b      	ldr	r3, [r7, #32]
 800c1fa:	fb02 f303 	mul.w	r3, r2, r3
 800c1fe:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800c200:	e04b      	b.n	800c29a <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	6a1b      	ldr	r3, [r3, #32]
 800c206:	697a      	ldr	r2, [r7, #20]
 800c208:	429a      	cmp	r2, r3
 800c20a:	d016      	beq.n	800c23a <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	699a      	ldr	r2, [r3, #24]
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c214:	429a      	cmp	r2, r3
 800c216:	d210      	bcs.n	800c23a <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c218:	693b      	ldr	r3, [r7, #16]
 800c21a:	7858      	ldrb	r0, [r3, #1]
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c222:	2301      	movs	r3, #1
 800c224:	697a      	ldr	r2, [r7, #20]
 800c226:	f7fd f93f 	bl	80094a8 <disk_read>
 800c22a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d004      	beq.n	800c23a <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	2201      	movs	r2, #1
 800c234:	755a      	strb	r2, [r3, #21]
 800c236:	2301      	movs	r3, #1
 800c238:	e05a      	b.n	800c2f0 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	697a      	ldr	r2, [r7, #20]
 800c23e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c240:	693b      	ldr	r3, [r7, #16]
 800c242:	899b      	ldrh	r3, [r3, #12]
 800c244:	4618      	mov	r0, r3
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	699b      	ldr	r3, [r3, #24]
 800c24a:	693a      	ldr	r2, [r7, #16]
 800c24c:	8992      	ldrh	r2, [r2, #12]
 800c24e:	fbb3 f1f2 	udiv	r1, r3, r2
 800c252:	fb01 f202 	mul.w	r2, r1, r2
 800c256:	1a9b      	subs	r3, r3, r2
 800c258:	1ac3      	subs	r3, r0, r3
 800c25a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c25c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	429a      	cmp	r2, r3
 800c262:	d901      	bls.n	800c268 <f_write+0x298>
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	699b      	ldr	r3, [r3, #24]
 800c272:	693a      	ldr	r2, [r7, #16]
 800c274:	8992      	ldrh	r2, [r2, #12]
 800c276:	fbb3 f0f2 	udiv	r0, r3, r2
 800c27a:	fb00 f202 	mul.w	r2, r0, r2
 800c27e:	1a9b      	subs	r3, r3, r2
 800c280:	440b      	add	r3, r1
 800c282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c284:	69f9      	ldr	r1, [r7, #28]
 800c286:	4618      	mov	r0, r3
 800c288:	f7fd f9ee 	bl	8009668 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	7d1b      	ldrb	r3, [r3, #20]
 800c290:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c294:	b2da      	uxtb	r2, r3
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c29a:	69fa      	ldr	r2, [r7, #28]
 800c29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c29e:	4413      	add	r3, r2
 800c2a0:	61fb      	str	r3, [r7, #28]
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	699a      	ldr	r2, [r3, #24]
 800c2a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2a8:	441a      	add	r2, r3
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	619a      	str	r2, [r3, #24]
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	68da      	ldr	r2, [r3, #12]
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	699b      	ldr	r3, [r3, #24]
 800c2b6:	429a      	cmp	r2, r3
 800c2b8:	bf38      	it	cc
 800c2ba:	461a      	movcc	r2, r3
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	60da      	str	r2, [r3, #12]
 800c2c0:	683b      	ldr	r3, [r7, #0]
 800c2c2:	681a      	ldr	r2, [r3, #0]
 800c2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2c6:	441a      	add	r2, r3
 800c2c8:	683b      	ldr	r3, [r7, #0]
 800c2ca:	601a      	str	r2, [r3, #0]
 800c2cc:	687a      	ldr	r2, [r7, #4]
 800c2ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2d0:	1ad3      	subs	r3, r2, r3
 800c2d2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	f47f aeb5 	bne.w	800c046 <f_write+0x76>
 800c2dc:	e000      	b.n	800c2e0 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c2de:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	7d1b      	ldrb	r3, [r3, #20]
 800c2e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2e8:	b2da      	uxtb	r2, r3
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c2ee:	2300      	movs	r3, #0
}
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	3730      	adds	r7, #48	; 0x30
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	bd80      	pop	{r7, pc}

0800c2f8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b086      	sub	sp, #24
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f107 0208 	add.w	r2, r7, #8
 800c306:	4611      	mov	r1, r2
 800c308:	4618      	mov	r0, r3
 800c30a:	f7ff fc19 	bl	800bb40 <validate>
 800c30e:	4603      	mov	r3, r0
 800c310:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c312:	7dfb      	ldrb	r3, [r7, #23]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d168      	bne.n	800c3ea <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	7d1b      	ldrb	r3, [r3, #20]
 800c31c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c320:	2b00      	cmp	r3, #0
 800c322:	d062      	beq.n	800c3ea <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	7d1b      	ldrb	r3, [r3, #20]
 800c328:	b25b      	sxtb	r3, r3
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	da15      	bge.n	800c35a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c32e:	68bb      	ldr	r3, [r7, #8]
 800c330:	7858      	ldrb	r0, [r3, #1]
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	6a1a      	ldr	r2, [r3, #32]
 800c33c:	2301      	movs	r3, #1
 800c33e:	f7fd f8d3 	bl	80094e8 <disk_write>
 800c342:	4603      	mov	r3, r0
 800c344:	2b00      	cmp	r3, #0
 800c346:	d001      	beq.n	800c34c <f_sync+0x54>
 800c348:	2301      	movs	r3, #1
 800c34a:	e04f      	b.n	800c3ec <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	7d1b      	ldrb	r3, [r3, #20]
 800c350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c354:	b2da      	uxtb	r2, r3
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c35a:	f7fa f869 	bl	8006430 <get_fattime>
 800c35e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c360:	68ba      	ldr	r2, [r7, #8]
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c366:	4619      	mov	r1, r3
 800c368:	4610      	mov	r0, r2
 800c36a:	f7fd fbab 	bl	8009ac4 <move_window>
 800c36e:	4603      	mov	r3, r0
 800c370:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800c372:	7dfb      	ldrb	r3, [r7, #23]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d138      	bne.n	800c3ea <f_sync+0xf2>
					dir = fp->dir_ptr;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c37c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	330b      	adds	r3, #11
 800c382:	781a      	ldrb	r2, [r3, #0]
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	330b      	adds	r3, #11
 800c388:	f042 0220 	orr.w	r2, r2, #32
 800c38c:	b2d2      	uxtb	r2, r2
 800c38e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	6818      	ldr	r0, [r3, #0]
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	689b      	ldr	r3, [r3, #8]
 800c398:	461a      	mov	r2, r3
 800c39a:	68f9      	ldr	r1, [r7, #12]
 800c39c:	f7fe f939 	bl	800a612 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	f103 021c 	add.w	r2, r3, #28
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	68db      	ldr	r3, [r3, #12]
 800c3aa:	4619      	mov	r1, r3
 800c3ac:	4610      	mov	r0, r2
 800c3ae:	f7fd f92f 	bl	8009610 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	3316      	adds	r3, #22
 800c3b6:	6939      	ldr	r1, [r7, #16]
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	f7fd f929 	bl	8009610 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	3312      	adds	r3, #18
 800c3c2:	2100      	movs	r1, #0
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	f7fd f908 	bl	80095da <st_word>
					fs->wflag = 1;
 800c3ca:	68bb      	ldr	r3, [r7, #8]
 800c3cc:	2201      	movs	r2, #1
 800c3ce:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c3d0:	68bb      	ldr	r3, [r7, #8]
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	f7fd fba4 	bl	8009b20 <sync_fs>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	7d1b      	ldrb	r3, [r3, #20]
 800c3e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c3e4:	b2da      	uxtb	r2, r3
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c3ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	3718      	adds	r7, #24
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	bd80      	pop	{r7, pc}

0800c3f4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b084      	sub	sp, #16
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c3fc:	6878      	ldr	r0, [r7, #4]
 800c3fe:	f7ff ff7b 	bl	800c2f8 <f_sync>
 800c402:	4603      	mov	r3, r0
 800c404:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c406:	7bfb      	ldrb	r3, [r7, #15]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d118      	bne.n	800c43e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f107 0208 	add.w	r2, r7, #8
 800c412:	4611      	mov	r1, r2
 800c414:	4618      	mov	r0, r3
 800c416:	f7ff fb93 	bl	800bb40 <validate>
 800c41a:	4603      	mov	r3, r0
 800c41c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c41e:	7bfb      	ldrb	r3, [r7, #15]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d10c      	bne.n	800c43e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	691b      	ldr	r3, [r3, #16]
 800c428:	4618      	mov	r0, r3
 800c42a:	f7fd faa7 	bl	800997c <dec_lock>
 800c42e:	4603      	mov	r3, r0
 800c430:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c432:	7bfb      	ldrb	r3, [r7, #15]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d102      	bne.n	800c43e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2200      	movs	r2, #0
 800c43c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800c43e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c440:	4618      	mov	r0, r3
 800c442:	3710      	adds	r7, #16
 800c444:	46bd      	mov	sp, r7
 800c446:	bd80      	pop	{r7, pc}

0800c448 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b086      	sub	sp, #24
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
 800c450:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d101      	bne.n	800c45c <f_opendir+0x14>
 800c458:	2309      	movs	r3, #9
 800c45a:	e064      	b.n	800c526 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800c460:	f107 010c 	add.w	r1, r7, #12
 800c464:	463b      	mov	r3, r7
 800c466:	2200      	movs	r2, #0
 800c468:	4618      	mov	r0, r3
 800c46a:	f7ff f8e3 	bl	800b634 <find_volume>
 800c46e:	4603      	mov	r3, r0
 800c470:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c472:	7dfb      	ldrb	r3, [r7, #23]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d14f      	bne.n	800c518 <f_opendir+0xd0>
		obj->fs = fs;
 800c478:	68fa      	ldr	r2, [r7, #12]
 800c47a:	693b      	ldr	r3, [r7, #16]
 800c47c:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800c47e:	683b      	ldr	r3, [r7, #0]
 800c480:	4619      	mov	r1, r3
 800c482:	6878      	ldr	r0, [r7, #4]
 800c484:	f7fe ffc6 	bl	800b414 <follow_path>
 800c488:	4603      	mov	r3, r0
 800c48a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800c48c:	7dfb      	ldrb	r3, [r7, #23]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d13d      	bne.n	800c50e <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c498:	b25b      	sxtb	r3, r3
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	db12      	blt.n	800c4c4 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800c49e:	693b      	ldr	r3, [r7, #16]
 800c4a0:	799b      	ldrb	r3, [r3, #6]
 800c4a2:	f003 0310 	and.w	r3, r3, #16
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d00a      	beq.n	800c4c0 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800c4aa:	68fa      	ldr	r2, [r7, #12]
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	6a1b      	ldr	r3, [r3, #32]
 800c4b0:	4619      	mov	r1, r3
 800c4b2:	4610      	mov	r0, r2
 800c4b4:	f7fe f88e 	bl	800a5d4 <ld_clust>
 800c4b8:	4602      	mov	r2, r0
 800c4ba:	693b      	ldr	r3, [r7, #16]
 800c4bc:	609a      	str	r2, [r3, #8]
 800c4be:	e001      	b.n	800c4c4 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800c4c0:	2305      	movs	r3, #5
 800c4c2:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800c4c4:	7dfb      	ldrb	r3, [r7, #23]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d121      	bne.n	800c50e <f_opendir+0xc6>
				obj->id = fs->id;
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	88da      	ldrh	r2, [r3, #6]
 800c4ce:	693b      	ldr	r3, [r7, #16]
 800c4d0:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800c4d2:	2100      	movs	r1, #0
 800c4d4:	6878      	ldr	r0, [r7, #4]
 800c4d6:	f7fd fed7 	bl	800a288 <dir_sdi>
 800c4da:	4603      	mov	r3, r0
 800c4dc:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800c4de:	7dfb      	ldrb	r3, [r7, #23]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d114      	bne.n	800c50e <f_opendir+0xc6>
					if (obj->sclust) {
 800c4e4:	693b      	ldr	r3, [r7, #16]
 800c4e6:	689b      	ldr	r3, [r3, #8]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d00d      	beq.n	800c508 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800c4ec:	2100      	movs	r1, #0
 800c4ee:	6878      	ldr	r0, [r7, #4]
 800c4f0:	f7fd f9b6 	bl	8009860 <inc_lock>
 800c4f4:	4602      	mov	r2, r0
 800c4f6:	693b      	ldr	r3, [r7, #16]
 800c4f8:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800c4fa:	693b      	ldr	r3, [r7, #16]
 800c4fc:	691b      	ldr	r3, [r3, #16]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d105      	bne.n	800c50e <f_opendir+0xc6>
 800c502:	2312      	movs	r3, #18
 800c504:	75fb      	strb	r3, [r7, #23]
 800c506:	e002      	b.n	800c50e <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800c508:	693b      	ldr	r3, [r7, #16]
 800c50a:	2200      	movs	r2, #0
 800c50c:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800c50e:	7dfb      	ldrb	r3, [r7, #23]
 800c510:	2b04      	cmp	r3, #4
 800c512:	d101      	bne.n	800c518 <f_opendir+0xd0>
 800c514:	2305      	movs	r3, #5
 800c516:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800c518:	7dfb      	ldrb	r3, [r7, #23]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d002      	beq.n	800c524 <f_opendir+0xdc>
 800c51e:	693b      	ldr	r3, [r7, #16]
 800c520:	2200      	movs	r2, #0
 800c522:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c524:	7dfb      	ldrb	r3, [r7, #23]
}
 800c526:	4618      	mov	r0, r3
 800c528:	3718      	adds	r7, #24
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bd80      	pop	{r7, pc}

0800c52e <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800c52e:	b580      	push	{r7, lr}
 800c530:	b084      	sub	sp, #16
 800c532:	af00      	add	r7, sp, #0
 800c534:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	f107 0208 	add.w	r2, r7, #8
 800c53c:	4611      	mov	r1, r2
 800c53e:	4618      	mov	r0, r3
 800c540:	f7ff fafe 	bl	800bb40 <validate>
 800c544:	4603      	mov	r3, r0
 800c546:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c548:	7bfb      	ldrb	r3, [r7, #15]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d110      	bne.n	800c570 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	691b      	ldr	r3, [r3, #16]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d006      	beq.n	800c564 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	691b      	ldr	r3, [r3, #16]
 800c55a:	4618      	mov	r0, r3
 800c55c:	f7fd fa0e 	bl	800997c <dec_lock>
 800c560:	4603      	mov	r3, r0
 800c562:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800c564:	7bfb      	ldrb	r3, [r7, #15]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d102      	bne.n	800c570 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	2200      	movs	r2, #0
 800c56e:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800c570:	7bfb      	ldrb	r3, [r7, #15]
}
 800c572:	4618      	mov	r0, r3
 800c574:	3710      	adds	r7, #16
 800c576:	46bd      	mov	sp, r7
 800c578:	bd80      	pop	{r7, pc}

0800c57a <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800c57a:	b580      	push	{r7, lr}
 800c57c:	b084      	sub	sp, #16
 800c57e:	af00      	add	r7, sp, #0
 800c580:	6078      	str	r0, [r7, #4]
 800c582:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	f107 0208 	add.w	r2, r7, #8
 800c58a:	4611      	mov	r1, r2
 800c58c:	4618      	mov	r0, r3
 800c58e:	f7ff fad7 	bl	800bb40 <validate>
 800c592:	4603      	mov	r3, r0
 800c594:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c596:	7bfb      	ldrb	r3, [r7, #15]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d126      	bne.n	800c5ea <f_readdir+0x70>
		if (!fno) {
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d106      	bne.n	800c5b0 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800c5a2:	2100      	movs	r1, #0
 800c5a4:	6878      	ldr	r0, [r7, #4]
 800c5a6:	f7fd fe6f 	bl	800a288 <dir_sdi>
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	73fb      	strb	r3, [r7, #15]
 800c5ae:	e01c      	b.n	800c5ea <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800c5b0:	2100      	movs	r1, #0
 800c5b2:	6878      	ldr	r0, [r7, #4]
 800c5b4:	f7fe fa39 	bl	800aa2a <dir_read>
 800c5b8:	4603      	mov	r3, r0
 800c5ba:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800c5bc:	7bfb      	ldrb	r3, [r7, #15]
 800c5be:	2b04      	cmp	r3, #4
 800c5c0:	d101      	bne.n	800c5c6 <f_readdir+0x4c>
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800c5c6:	7bfb      	ldrb	r3, [r7, #15]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d10e      	bne.n	800c5ea <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800c5cc:	6839      	ldr	r1, [r7, #0]
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f7fe fc8a 	bl	800aee8 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800c5d4:	2100      	movs	r1, #0
 800c5d6:	6878      	ldr	r0, [r7, #4]
 800c5d8:	f7fd fedf 	bl	800a39a <dir_next>
 800c5dc:	4603      	mov	r3, r0
 800c5de:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800c5e0:	7bfb      	ldrb	r3, [r7, #15]
 800c5e2:	2b04      	cmp	r3, #4
 800c5e4:	d101      	bne.n	800c5ea <f_readdir+0x70>
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800c5ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	3710      	adds	r7, #16
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd80      	pop	{r7, pc}

0800c5f4 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b090      	sub	sp, #64	; 0x40
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
 800c5fc:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800c5fe:	f107 0108 	add.w	r1, r7, #8
 800c602:	1d3b      	adds	r3, r7, #4
 800c604:	2200      	movs	r2, #0
 800c606:	4618      	mov	r0, r3
 800c608:	f7ff f814 	bl	800b634 <find_volume>
 800c60c:	4603      	mov	r3, r0
 800c60e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800c612:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c616:	2b00      	cmp	r3, #0
 800c618:	d11f      	bne.n	800c65a <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c61a:	687a      	ldr	r2, [r7, #4]
 800c61c:	f107 0308 	add.w	r3, r7, #8
 800c620:	4611      	mov	r1, r2
 800c622:	4618      	mov	r0, r3
 800c624:	f7fe fef6 	bl	800b414 <follow_path>
 800c628:	4603      	mov	r3, r0
 800c62a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800c62e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c632:	2b00      	cmp	r3, #0
 800c634:	d111      	bne.n	800c65a <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800c636:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c63a:	b25b      	sxtb	r3, r3
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	da03      	bge.n	800c648 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800c640:	2306      	movs	r3, #6
 800c642:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800c646:	e008      	b.n	800c65a <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d005      	beq.n	800c65a <f_stat+0x66>
 800c64e:	f107 0308 	add.w	r3, r7, #8
 800c652:	6839      	ldr	r1, [r7, #0]
 800c654:	4618      	mov	r0, r3
 800c656:	f7fe fc47 	bl	800aee8 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800c65a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800c65e:	4618      	mov	r0, r3
 800c660:	3740      	adds	r7, #64	; 0x40
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}

0800c666 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800c666:	b580      	push	{r7, lr}
 800c668:	b092      	sub	sp, #72	; 0x48
 800c66a:	af00      	add	r7, sp, #0
 800c66c:	60f8      	str	r0, [r7, #12]
 800c66e:	60b9      	str	r1, [r7, #8]
 800c670:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800c672:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800c676:	f107 030c 	add.w	r3, r7, #12
 800c67a:	2200      	movs	r2, #0
 800c67c:	4618      	mov	r0, r3
 800c67e:	f7fe ffd9 	bl	800b634 <find_volume>
 800c682:	4603      	mov	r3, r0
 800c684:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800c688:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	f040 8099 	bne.w	800c7c4 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800c692:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800c698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c69a:	699a      	ldr	r2, [r3, #24]
 800c69c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c69e:	69db      	ldr	r3, [r3, #28]
 800c6a0:	3b02      	subs	r3, #2
 800c6a2:	429a      	cmp	r2, r3
 800c6a4:	d804      	bhi.n	800c6b0 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800c6a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6a8:	699a      	ldr	r2, [r3, #24]
 800c6aa:	68bb      	ldr	r3, [r7, #8]
 800c6ac:	601a      	str	r2, [r3, #0]
 800c6ae:	e089      	b.n	800c7c4 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800c6b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6b6:	781b      	ldrb	r3, [r3, #0]
 800c6b8:	2b01      	cmp	r3, #1
 800c6ba:	d128      	bne.n	800c70e <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800c6bc:	2302      	movs	r3, #2
 800c6be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6c2:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800c6c4:	f107 0314 	add.w	r3, r7, #20
 800c6c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	f7fd fab7 	bl	8009c3e <get_fat>
 800c6d0:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800c6d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c6d8:	d103      	bne.n	800c6e2 <f_getfree+0x7c>
 800c6da:	2301      	movs	r3, #1
 800c6dc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800c6e0:	e063      	b.n	800c7aa <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800c6e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6e4:	2b01      	cmp	r3, #1
 800c6e6:	d103      	bne.n	800c6f0 <f_getfree+0x8a>
 800c6e8:	2302      	movs	r3, #2
 800c6ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800c6ee:	e05c      	b.n	800c7aa <f_getfree+0x144>
					if (stat == 0) nfree++;
 800c6f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d102      	bne.n	800c6fc <f_getfree+0x96>
 800c6f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6f8:	3301      	adds	r3, #1
 800c6fa:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800c6fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6fe:	3301      	adds	r3, #1
 800c700:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c704:	69db      	ldr	r3, [r3, #28]
 800c706:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c708:	429a      	cmp	r2, r3
 800c70a:	d3db      	bcc.n	800c6c4 <f_getfree+0x5e>
 800c70c:	e04d      	b.n	800c7aa <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800c70e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c710:	69db      	ldr	r3, [r3, #28]
 800c712:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c718:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800c71a:	2300      	movs	r3, #0
 800c71c:	637b      	str	r3, [r7, #52]	; 0x34
 800c71e:	2300      	movs	r3, #0
 800c720:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800c722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c724:	2b00      	cmp	r3, #0
 800c726:	d113      	bne.n	800c750 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800c728:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c72a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c72c:	1c5a      	adds	r2, r3, #1
 800c72e:	63ba      	str	r2, [r7, #56]	; 0x38
 800c730:	4619      	mov	r1, r3
 800c732:	f7fd f9c7 	bl	8009ac4 <move_window>
 800c736:	4603      	mov	r3, r0
 800c738:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800c73c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800c740:	2b00      	cmp	r3, #0
 800c742:	d131      	bne.n	800c7a8 <f_getfree+0x142>
							p = fs->win;
 800c744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c746:	3338      	adds	r3, #56	; 0x38
 800c748:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800c74a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c74c:	899b      	ldrh	r3, [r3, #12]
 800c74e:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800c750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c752:	781b      	ldrb	r3, [r3, #0]
 800c754:	2b02      	cmp	r3, #2
 800c756:	d10f      	bne.n	800c778 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800c758:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c75a:	f7fc ff03 	bl	8009564 <ld_word>
 800c75e:	4603      	mov	r3, r0
 800c760:	2b00      	cmp	r3, #0
 800c762:	d102      	bne.n	800c76a <f_getfree+0x104>
 800c764:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c766:	3301      	adds	r3, #1
 800c768:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800c76a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c76c:	3302      	adds	r3, #2
 800c76e:	633b      	str	r3, [r7, #48]	; 0x30
 800c770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c772:	3b02      	subs	r3, #2
 800c774:	637b      	str	r3, [r7, #52]	; 0x34
 800c776:	e010      	b.n	800c79a <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800c778:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c77a:	f7fc ff0b 	bl	8009594 <ld_dword>
 800c77e:	4603      	mov	r3, r0
 800c780:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c784:	2b00      	cmp	r3, #0
 800c786:	d102      	bne.n	800c78e <f_getfree+0x128>
 800c788:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c78a:	3301      	adds	r3, #1
 800c78c:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800c78e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c790:	3304      	adds	r3, #4
 800c792:	633b      	str	r3, [r7, #48]	; 0x30
 800c794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c796:	3b04      	subs	r3, #4
 800c798:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800c79a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c79c:	3b01      	subs	r3, #1
 800c79e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c7a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d1bd      	bne.n	800c722 <f_getfree+0xbc>
 800c7a6:	e000      	b.n	800c7aa <f_getfree+0x144>
							if (res != FR_OK) break;
 800c7a8:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800c7aa:	68bb      	ldr	r3, [r7, #8]
 800c7ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c7ae:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800c7b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c7b4:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800c7b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7b8:	791a      	ldrb	r2, [r3, #4]
 800c7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7bc:	f042 0201 	orr.w	r2, r2, #1
 800c7c0:	b2d2      	uxtb	r2, r2
 800c7c2:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800c7c4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	3748      	adds	r7, #72	; 0x48
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	bd80      	pop	{r7, pc}

0800c7d0 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b098      	sub	sp, #96	; 0x60
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800c7d8:	f107 010c 	add.w	r1, r7, #12
 800c7dc:	1d3b      	adds	r3, r7, #4
 800c7de:	2202      	movs	r2, #2
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	f7fe ff27 	bl	800b634 <find_volume>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	dj.obj.fs = fs;
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 800c7f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	f040 80f2 	bne.w	800c9de <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800c7fa:	687a      	ldr	r2, [r7, #4]
 800c7fc:	f107 0310 	add.w	r3, r7, #16
 800c800:	4611      	mov	r1, r2
 800c802:	4618      	mov	r0, r3
 800c804:	f7fe fe06 	bl	800b414 <follow_path>
 800c808:	4603      	mov	r3, r0
 800c80a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800c80e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c812:	2b00      	cmp	r3, #0
 800c814:	d102      	bne.n	800c81c <f_mkdir+0x4c>
 800c816:	2308      	movs	r3, #8
 800c818:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800c81c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c820:	2b04      	cmp	r3, #4
 800c822:	f040 80dc 	bne.w	800c9de <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800c826:	f107 0310 	add.w	r3, r7, #16
 800c82a:	2100      	movs	r1, #0
 800c82c:	4618      	mov	r0, r3
 800c82e:	f7fd fc5b 	bl	800a0e8 <create_chain>
 800c832:	64f8      	str	r0, [r7, #76]	; 0x4c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	895b      	ldrh	r3, [r3, #10]
 800c838:	461a      	mov	r2, r3
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	899b      	ldrh	r3, [r3, #12]
 800c83e:	fb02 f303 	mul.w	r3, r2, r3
 800c842:	61fb      	str	r3, [r7, #28]
			res = FR_OK;
 800c844:	2300      	movs	r3, #0
 800c846:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800c84a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d102      	bne.n	800c856 <f_mkdir+0x86>
 800c850:	2307      	movs	r3, #7
 800c852:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 800c856:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c858:	2b01      	cmp	r3, #1
 800c85a:	d102      	bne.n	800c862 <f_mkdir+0x92>
 800c85c:	2302      	movs	r3, #2
 800c85e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c864:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c868:	d102      	bne.n	800c870 <f_mkdir+0xa0>
 800c86a:	2301      	movs	r3, #1
 800c86c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800c870:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c874:	2b00      	cmp	r3, #0
 800c876:	d106      	bne.n	800c886 <f_mkdir+0xb6>
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	4618      	mov	r0, r3
 800c87c:	f7fd f8de 	bl	8009a3c <sync_window>
 800c880:	4603      	mov	r3, r0
 800c882:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			tm = GET_FATTIME();
 800c886:	f7f9 fdd3 	bl	8006430 <get_fattime>
 800c88a:	64b8      	str	r0, [r7, #72]	; 0x48
			if (res == FR_OK) {					/* Initialize the new directory table */
 800c88c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c890:	2b00      	cmp	r3, #0
 800c892:	d16c      	bne.n	800c96e <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c898:	4618      	mov	r0, r3
 800c89a:	f7fd f9b1 	bl	8009c00 <clust2sect>
 800c89e:	6578      	str	r0, [r7, #84]	; 0x54
				dir = fs->win;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	3338      	adds	r3, #56	; 0x38
 800c8a4:	647b      	str	r3, [r7, #68]	; 0x44
				mem_set(dir, 0, SS(fs));
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	899b      	ldrh	r3, [r3, #12]
 800c8aa:	461a      	mov	r2, r3
 800c8ac:	2100      	movs	r1, #0
 800c8ae:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c8b0:	f7fc fefb 	bl	80096aa <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800c8b4:	220b      	movs	r2, #11
 800c8b6:	2120      	movs	r1, #32
 800c8b8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c8ba:	f7fc fef6 	bl	80096aa <mem_set>
					dir[DIR_Name] = '.';
 800c8be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c8c0:	222e      	movs	r2, #46	; 0x2e
 800c8c2:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800c8c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c8c6:	330b      	adds	r3, #11
 800c8c8:	2210      	movs	r2, #16
 800c8ca:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800c8cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c8ce:	3316      	adds	r3, #22
 800c8d0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	f7fc fe9c 	bl	8009610 <st_dword>
					st_clust(fs, dir, dcl);
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c8dc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c8de:	4618      	mov	r0, r3
 800c8e0:	f7fd fe97 	bl	800a612 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800c8e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c8e6:	3320      	adds	r3, #32
 800c8e8:	2220      	movs	r2, #32
 800c8ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	f7fc febb 	bl	8009668 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800c8f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c8f4:	3321      	adds	r3, #33	; 0x21
 800c8f6:	222e      	movs	r2, #46	; 0x2e
 800c8f8:	701a      	strb	r2, [r3, #0]
 800c8fa:	69bb      	ldr	r3, [r7, #24]
 800c8fc:	653b      	str	r3, [r7, #80]	; 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	781b      	ldrb	r3, [r3, #0]
 800c902:	2b03      	cmp	r3, #3
 800c904:	d106      	bne.n	800c914 <f_mkdir+0x144>
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c90a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c90c:	429a      	cmp	r2, r3
 800c90e:	d101      	bne.n	800c914 <f_mkdir+0x144>
 800c910:	2300      	movs	r3, #0
 800c912:	653b      	str	r3, [r7, #80]	; 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 800c914:	68f8      	ldr	r0, [r7, #12]
 800c916:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c918:	3320      	adds	r3, #32
 800c91a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c91c:	4619      	mov	r1, r3
 800c91e:	f7fd fe78 	bl	800a612 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	895b      	ldrh	r3, [r3, #10]
 800c926:	65bb      	str	r3, [r7, #88]	; 0x58
 800c928:	e01c      	b.n	800c964 <f_mkdir+0x194>
					fs->winsect = dsc++;
 800c92a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c92c:	1c5a      	adds	r2, r3, #1
 800c92e:	657a      	str	r2, [r7, #84]	; 0x54
 800c930:	68fa      	ldr	r2, [r7, #12]
 800c932:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	2201      	movs	r2, #1
 800c938:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	4618      	mov	r0, r3
 800c93e:	f7fd f87d 	bl	8009a3c <sync_window>
 800c942:	4603      	mov	r3, r0
 800c944:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (res != FR_OK) break;
 800c948:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d10d      	bne.n	800c96c <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	899b      	ldrh	r3, [r3, #12]
 800c954:	461a      	mov	r2, r3
 800c956:	2100      	movs	r1, #0
 800c958:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c95a:	f7fc fea6 	bl	80096aa <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800c95e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c960:	3b01      	subs	r3, #1
 800c962:	65bb      	str	r3, [r7, #88]	; 0x58
 800c964:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c966:	2b00      	cmp	r3, #0
 800c968:	d1df      	bne.n	800c92a <f_mkdir+0x15a>
 800c96a:	e000      	b.n	800c96e <f_mkdir+0x19e>
					if (res != FR_OK) break;
 800c96c:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800c96e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c972:	2b00      	cmp	r3, #0
 800c974:	d107      	bne.n	800c986 <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800c976:	f107 0310 	add.w	r3, r7, #16
 800c97a:	4618      	mov	r0, r3
 800c97c:	f7fe f9bc 	bl	800acf8 <dir_register>
 800c980:	4603      	mov	r3, r0
 800c982:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
			if (res == FR_OK) {
 800c986:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d120      	bne.n	800c9d0 <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800c98e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c990:	647b      	str	r3, [r7, #68]	; 0x44
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800c992:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c994:	3316      	adds	r3, #22
 800c996:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c998:	4618      	mov	r0, r3
 800c99a:	f7fc fe39 	bl	8009610 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c9a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	f7fd fe34 	bl	800a612 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800c9aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c9ac:	330b      	adds	r3, #11
 800c9ae:	2210      	movs	r2, #16
 800c9b0:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	2201      	movs	r2, #1
 800c9b6:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800c9b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d10e      	bne.n	800c9de <f_mkdir+0x20e>
					res = sync_fs(fs);
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	f7fd f8ac 	bl	8009b20 <sync_fs>
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c9ce:	e006      	b.n	800c9de <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800c9d0:	f107 0310 	add.w	r3, r7, #16
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c9d8:	4618      	mov	r0, r3
 800c9da:	f7fd fb20 	bl	800a01e <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800c9de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	3760      	adds	r7, #96	; 0x60
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	bd80      	pop	{r7, pc}
	...

0800c9ec <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c9ec:	b480      	push	{r7}
 800c9ee:	b087      	sub	sp, #28
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	60f8      	str	r0, [r7, #12]
 800c9f4:	60b9      	str	r1, [r7, #8]
 800c9f6:	4613      	mov	r3, r2
 800c9f8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c9fa:	2301      	movs	r3, #1
 800c9fc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c9fe:	2300      	movs	r3, #0
 800ca00:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ca02:	4b1f      	ldr	r3, [pc, #124]	; (800ca80 <FATFS_LinkDriverEx+0x94>)
 800ca04:	7a5b      	ldrb	r3, [r3, #9]
 800ca06:	b2db      	uxtb	r3, r3
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d131      	bne.n	800ca70 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ca0c:	4b1c      	ldr	r3, [pc, #112]	; (800ca80 <FATFS_LinkDriverEx+0x94>)
 800ca0e:	7a5b      	ldrb	r3, [r3, #9]
 800ca10:	b2db      	uxtb	r3, r3
 800ca12:	461a      	mov	r2, r3
 800ca14:	4b1a      	ldr	r3, [pc, #104]	; (800ca80 <FATFS_LinkDriverEx+0x94>)
 800ca16:	2100      	movs	r1, #0
 800ca18:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ca1a:	4b19      	ldr	r3, [pc, #100]	; (800ca80 <FATFS_LinkDriverEx+0x94>)
 800ca1c:	7a5b      	ldrb	r3, [r3, #9]
 800ca1e:	b2db      	uxtb	r3, r3
 800ca20:	4a17      	ldr	r2, [pc, #92]	; (800ca80 <FATFS_LinkDriverEx+0x94>)
 800ca22:	009b      	lsls	r3, r3, #2
 800ca24:	4413      	add	r3, r2
 800ca26:	68fa      	ldr	r2, [r7, #12]
 800ca28:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ca2a:	4b15      	ldr	r3, [pc, #84]	; (800ca80 <FATFS_LinkDriverEx+0x94>)
 800ca2c:	7a5b      	ldrb	r3, [r3, #9]
 800ca2e:	b2db      	uxtb	r3, r3
 800ca30:	461a      	mov	r2, r3
 800ca32:	4b13      	ldr	r3, [pc, #76]	; (800ca80 <FATFS_LinkDriverEx+0x94>)
 800ca34:	4413      	add	r3, r2
 800ca36:	79fa      	ldrb	r2, [r7, #7]
 800ca38:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ca3a:	4b11      	ldr	r3, [pc, #68]	; (800ca80 <FATFS_LinkDriverEx+0x94>)
 800ca3c:	7a5b      	ldrb	r3, [r3, #9]
 800ca3e:	b2db      	uxtb	r3, r3
 800ca40:	1c5a      	adds	r2, r3, #1
 800ca42:	b2d1      	uxtb	r1, r2
 800ca44:	4a0e      	ldr	r2, [pc, #56]	; (800ca80 <FATFS_LinkDriverEx+0x94>)
 800ca46:	7251      	strb	r1, [r2, #9]
 800ca48:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ca4a:	7dbb      	ldrb	r3, [r7, #22]
 800ca4c:	3330      	adds	r3, #48	; 0x30
 800ca4e:	b2da      	uxtb	r2, r3
 800ca50:	68bb      	ldr	r3, [r7, #8]
 800ca52:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ca54:	68bb      	ldr	r3, [r7, #8]
 800ca56:	3301      	adds	r3, #1
 800ca58:	223a      	movs	r2, #58	; 0x3a
 800ca5a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ca5c:	68bb      	ldr	r3, [r7, #8]
 800ca5e:	3302      	adds	r3, #2
 800ca60:	222f      	movs	r2, #47	; 0x2f
 800ca62:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ca64:	68bb      	ldr	r3, [r7, #8]
 800ca66:	3303      	adds	r3, #3
 800ca68:	2200      	movs	r2, #0
 800ca6a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ca70:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca72:	4618      	mov	r0, r3
 800ca74:	371c      	adds	r7, #28
 800ca76:	46bd      	mov	sp, r7
 800ca78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7c:	4770      	bx	lr
 800ca7e:	bf00      	nop
 800ca80:	20002500 	.word	0x20002500

0800ca84 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b082      	sub	sp, #8
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
 800ca8c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ca8e:	2200      	movs	r2, #0
 800ca90:	6839      	ldr	r1, [r7, #0]
 800ca92:	6878      	ldr	r0, [r7, #4]
 800ca94:	f7ff ffaa 	bl	800c9ec <FATFS_LinkDriverEx>
 800ca98:	4603      	mov	r3, r0
}
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	3708      	adds	r7, #8
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	bd80      	pop	{r7, pc}
	...

0800caa4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800caa4:	b480      	push	{r7}
 800caa6:	b085      	sub	sp, #20
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	4603      	mov	r3, r0
 800caac:	6039      	str	r1, [r7, #0]
 800caae:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800cab0:	88fb      	ldrh	r3, [r7, #6]
 800cab2:	2b7f      	cmp	r3, #127	; 0x7f
 800cab4:	d802      	bhi.n	800cabc <ff_convert+0x18>
		c = chr;
 800cab6:	88fb      	ldrh	r3, [r7, #6]
 800cab8:	81fb      	strh	r3, [r7, #14]
 800caba:	e025      	b.n	800cb08 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800cabc:	683b      	ldr	r3, [r7, #0]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d00b      	beq.n	800cada <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800cac2:	88fb      	ldrh	r3, [r7, #6]
 800cac4:	2bff      	cmp	r3, #255	; 0xff
 800cac6:	d805      	bhi.n	800cad4 <ff_convert+0x30>
 800cac8:	88fb      	ldrh	r3, [r7, #6]
 800caca:	3b80      	subs	r3, #128	; 0x80
 800cacc:	4a12      	ldr	r2, [pc, #72]	; (800cb18 <ff_convert+0x74>)
 800cace:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cad2:	e000      	b.n	800cad6 <ff_convert+0x32>
 800cad4:	2300      	movs	r3, #0
 800cad6:	81fb      	strh	r3, [r7, #14]
 800cad8:	e016      	b.n	800cb08 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800cada:	2300      	movs	r3, #0
 800cadc:	81fb      	strh	r3, [r7, #14]
 800cade:	e009      	b.n	800caf4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800cae0:	89fb      	ldrh	r3, [r7, #14]
 800cae2:	4a0d      	ldr	r2, [pc, #52]	; (800cb18 <ff_convert+0x74>)
 800cae4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cae8:	88fa      	ldrh	r2, [r7, #6]
 800caea:	429a      	cmp	r2, r3
 800caec:	d006      	beq.n	800cafc <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800caee:	89fb      	ldrh	r3, [r7, #14]
 800caf0:	3301      	adds	r3, #1
 800caf2:	81fb      	strh	r3, [r7, #14]
 800caf4:	89fb      	ldrh	r3, [r7, #14]
 800caf6:	2b7f      	cmp	r3, #127	; 0x7f
 800caf8:	d9f2      	bls.n	800cae0 <ff_convert+0x3c>
 800cafa:	e000      	b.n	800cafe <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800cafc:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800cafe:	89fb      	ldrh	r3, [r7, #14]
 800cb00:	3380      	adds	r3, #128	; 0x80
 800cb02:	b29b      	uxth	r3, r3
 800cb04:	b2db      	uxtb	r3, r3
 800cb06:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800cb08:	89fb      	ldrh	r3, [r7, #14]
}
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	3714      	adds	r7, #20
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb14:	4770      	bx	lr
 800cb16:	bf00      	nop
 800cb18:	0800e424 	.word	0x0800e424

0800cb1c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800cb1c:	b480      	push	{r7}
 800cb1e:	b087      	sub	sp, #28
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	4603      	mov	r3, r0
 800cb24:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800cb26:	88fb      	ldrh	r3, [r7, #6]
 800cb28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb2c:	d201      	bcs.n	800cb32 <ff_wtoupper+0x16>
 800cb2e:	4b3e      	ldr	r3, [pc, #248]	; (800cc28 <ff_wtoupper+0x10c>)
 800cb30:	e000      	b.n	800cb34 <ff_wtoupper+0x18>
 800cb32:	4b3e      	ldr	r3, [pc, #248]	; (800cc2c <ff_wtoupper+0x110>)
 800cb34:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800cb36:	697b      	ldr	r3, [r7, #20]
 800cb38:	1c9a      	adds	r2, r3, #2
 800cb3a:	617a      	str	r2, [r7, #20]
 800cb3c:	881b      	ldrh	r3, [r3, #0]
 800cb3e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800cb40:	8a7b      	ldrh	r3, [r7, #18]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d068      	beq.n	800cc18 <ff_wtoupper+0xfc>
 800cb46:	88fa      	ldrh	r2, [r7, #6]
 800cb48:	8a7b      	ldrh	r3, [r7, #18]
 800cb4a:	429a      	cmp	r2, r3
 800cb4c:	d364      	bcc.n	800cc18 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800cb4e:	697b      	ldr	r3, [r7, #20]
 800cb50:	1c9a      	adds	r2, r3, #2
 800cb52:	617a      	str	r2, [r7, #20]
 800cb54:	881b      	ldrh	r3, [r3, #0]
 800cb56:	823b      	strh	r3, [r7, #16]
 800cb58:	8a3b      	ldrh	r3, [r7, #16]
 800cb5a:	0a1b      	lsrs	r3, r3, #8
 800cb5c:	81fb      	strh	r3, [r7, #14]
 800cb5e:	8a3b      	ldrh	r3, [r7, #16]
 800cb60:	b2db      	uxtb	r3, r3
 800cb62:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800cb64:	88fa      	ldrh	r2, [r7, #6]
 800cb66:	8a79      	ldrh	r1, [r7, #18]
 800cb68:	8a3b      	ldrh	r3, [r7, #16]
 800cb6a:	440b      	add	r3, r1
 800cb6c:	429a      	cmp	r2, r3
 800cb6e:	da49      	bge.n	800cc04 <ff_wtoupper+0xe8>
			switch (cmd) {
 800cb70:	89fb      	ldrh	r3, [r7, #14]
 800cb72:	2b08      	cmp	r3, #8
 800cb74:	d84f      	bhi.n	800cc16 <ff_wtoupper+0xfa>
 800cb76:	a201      	add	r2, pc, #4	; (adr r2, 800cb7c <ff_wtoupper+0x60>)
 800cb78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb7c:	0800cba1 	.word	0x0800cba1
 800cb80:	0800cbb3 	.word	0x0800cbb3
 800cb84:	0800cbc9 	.word	0x0800cbc9
 800cb88:	0800cbd1 	.word	0x0800cbd1
 800cb8c:	0800cbd9 	.word	0x0800cbd9
 800cb90:	0800cbe1 	.word	0x0800cbe1
 800cb94:	0800cbe9 	.word	0x0800cbe9
 800cb98:	0800cbf1 	.word	0x0800cbf1
 800cb9c:	0800cbf9 	.word	0x0800cbf9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800cba0:	88fa      	ldrh	r2, [r7, #6]
 800cba2:	8a7b      	ldrh	r3, [r7, #18]
 800cba4:	1ad3      	subs	r3, r2, r3
 800cba6:	005b      	lsls	r3, r3, #1
 800cba8:	697a      	ldr	r2, [r7, #20]
 800cbaa:	4413      	add	r3, r2
 800cbac:	881b      	ldrh	r3, [r3, #0]
 800cbae:	80fb      	strh	r3, [r7, #6]
 800cbb0:	e027      	b.n	800cc02 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800cbb2:	88fa      	ldrh	r2, [r7, #6]
 800cbb4:	8a7b      	ldrh	r3, [r7, #18]
 800cbb6:	1ad3      	subs	r3, r2, r3
 800cbb8:	b29b      	uxth	r3, r3
 800cbba:	f003 0301 	and.w	r3, r3, #1
 800cbbe:	b29b      	uxth	r3, r3
 800cbc0:	88fa      	ldrh	r2, [r7, #6]
 800cbc2:	1ad3      	subs	r3, r2, r3
 800cbc4:	80fb      	strh	r3, [r7, #6]
 800cbc6:	e01c      	b.n	800cc02 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800cbc8:	88fb      	ldrh	r3, [r7, #6]
 800cbca:	3b10      	subs	r3, #16
 800cbcc:	80fb      	strh	r3, [r7, #6]
 800cbce:	e018      	b.n	800cc02 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800cbd0:	88fb      	ldrh	r3, [r7, #6]
 800cbd2:	3b20      	subs	r3, #32
 800cbd4:	80fb      	strh	r3, [r7, #6]
 800cbd6:	e014      	b.n	800cc02 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800cbd8:	88fb      	ldrh	r3, [r7, #6]
 800cbda:	3b30      	subs	r3, #48	; 0x30
 800cbdc:	80fb      	strh	r3, [r7, #6]
 800cbde:	e010      	b.n	800cc02 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800cbe0:	88fb      	ldrh	r3, [r7, #6]
 800cbe2:	3b1a      	subs	r3, #26
 800cbe4:	80fb      	strh	r3, [r7, #6]
 800cbe6:	e00c      	b.n	800cc02 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800cbe8:	88fb      	ldrh	r3, [r7, #6]
 800cbea:	3308      	adds	r3, #8
 800cbec:	80fb      	strh	r3, [r7, #6]
 800cbee:	e008      	b.n	800cc02 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800cbf0:	88fb      	ldrh	r3, [r7, #6]
 800cbf2:	3b50      	subs	r3, #80	; 0x50
 800cbf4:	80fb      	strh	r3, [r7, #6]
 800cbf6:	e004      	b.n	800cc02 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800cbf8:	88fb      	ldrh	r3, [r7, #6]
 800cbfa:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800cbfe:	80fb      	strh	r3, [r7, #6]
 800cc00:	bf00      	nop
			}
			break;
 800cc02:	e008      	b.n	800cc16 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800cc04:	89fb      	ldrh	r3, [r7, #14]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d195      	bne.n	800cb36 <ff_wtoupper+0x1a>
 800cc0a:	8a3b      	ldrh	r3, [r7, #16]
 800cc0c:	005b      	lsls	r3, r3, #1
 800cc0e:	697a      	ldr	r2, [r7, #20]
 800cc10:	4413      	add	r3, r2
 800cc12:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800cc14:	e78f      	b.n	800cb36 <ff_wtoupper+0x1a>
			break;
 800cc16:	bf00      	nop
	}

	return chr;
 800cc18:	88fb      	ldrh	r3, [r7, #6]
}
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	371c      	adds	r7, #28
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc24:	4770      	bx	lr
 800cc26:	bf00      	nop
 800cc28:	0800e524 	.word	0x0800e524
 800cc2c:	0800e718 	.word	0x0800e718

0800cc30 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800cc34:	2201      	movs	r2, #1
 800cc36:	490e      	ldr	r1, [pc, #56]	; (800cc70 <MX_USB_HOST_Init+0x40>)
 800cc38:	480e      	ldr	r0, [pc, #56]	; (800cc74 <MX_USB_HOST_Init+0x44>)
 800cc3a:	f7fb f89d 	bl	8007d78 <USBH_Init>
 800cc3e:	4603      	mov	r3, r0
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d001      	beq.n	800cc48 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800cc44:	f7f4 f88c 	bl	8000d60 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800cc48:	490b      	ldr	r1, [pc, #44]	; (800cc78 <MX_USB_HOST_Init+0x48>)
 800cc4a:	480a      	ldr	r0, [pc, #40]	; (800cc74 <MX_USB_HOST_Init+0x44>)
 800cc4c:	f7fb f922 	bl	8007e94 <USBH_RegisterClass>
 800cc50:	4603      	mov	r3, r0
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d001      	beq.n	800cc5a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800cc56:	f7f4 f883 	bl	8000d60 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800cc5a:	4806      	ldr	r0, [pc, #24]	; (800cc74 <MX_USB_HOST_Init+0x44>)
 800cc5c:	f7fb f9a6 	bl	8007fac <USBH_Start>
 800cc60:	4603      	mov	r3, r0
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d001      	beq.n	800cc6a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800cc66:	f7f4 f87b 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800cc6a:	bf00      	nop
 800cc6c:	bd80      	pop	{r7, pc}
 800cc6e:	bf00      	nop
 800cc70:	0800cc91 	.word	0x0800cc91
 800cc74:	2000250c 	.word	0x2000250c
 800cc78:	2000000c 	.word	0x2000000c

0800cc7c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800cc80:	4802      	ldr	r0, [pc, #8]	; (800cc8c <MX_USB_HOST_Process+0x10>)
 800cc82:	f7fb f9a3 	bl	8007fcc <USBH_Process>
}
 800cc86:	bf00      	nop
 800cc88:	bd80      	pop	{r7, pc}
 800cc8a:	bf00      	nop
 800cc8c:	2000250c 	.word	0x2000250c

0800cc90 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b082      	sub	sp, #8
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
 800cc98:	460b      	mov	r3, r1
 800cc9a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800cc9c:	78fb      	ldrb	r3, [r7, #3]
 800cc9e:	3b01      	subs	r3, #1
 800cca0:	2b04      	cmp	r3, #4
 800cca2:	d844      	bhi.n	800cd2e <USBH_UserProcess+0x9e>
 800cca4:	a201      	add	r2, pc, #4	; (adr r2, 800ccac <USBH_UserProcess+0x1c>)
 800cca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccaa:	bf00      	nop
 800ccac:	0800cd2f 	.word	0x0800cd2f
 800ccb0:	0800cccd 	.word	0x0800cccd
 800ccb4:	0800cd2f 	.word	0x0800cd2f
 800ccb8:	0800cd27 	.word	0x0800cd27
 800ccbc:	0800ccc1 	.word	0x0800ccc1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800ccc0:	4b1d      	ldr	r3, [pc, #116]	; (800cd38 <USBH_UserProcess+0xa8>)
 800ccc2:	2203      	movs	r2, #3
 800ccc4:	701a      	strb	r2, [r3, #0]

  Unmount_USB();			//unmount the usb if disconnected
 800ccc6:	f7f4 f9b1 	bl	800102c <Unmount_USB>

  break;
 800ccca:	e031      	b.n	800cd30 <USBH_UserProcess+0xa0>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800cccc:	4b1a      	ldr	r3, [pc, #104]	; (800cd38 <USBH_UserProcess+0xa8>)
 800ccce:	2202      	movs	r2, #2
 800ccd0:	701a      	strb	r2, [r3, #0]

  Mount_USB();
 800ccd2:	f7f4 f989 	bl	8000fe8 <Mount_USB>

  Check_USB_Details();		//check space details
 800ccd6:	f7f4 fce7 	bl	80016a8 <Check_USB_Details>

  Scan_USB("/");			//scan for files and directories
 800ccda:	4818      	ldr	r0, [pc, #96]	; (800cd3c <USBH_UserProcess+0xac>)
 800ccdc:	f7f4 f9c6 	bl	800106c <Scan_USB>

  Create_File("/ROOTFILE.txt");		//create root file
 800cce0:	4817      	ldr	r0, [pc, #92]	; (800cd40 <USBH_UserProcess+0xb0>)
 800cce2:	f7f4 fb2d 	bl	8001340 <Create_File>
  Write_File("/ROOTFILE.txt", "Hi, This is the root file's data\n");
 800cce6:	4917      	ldr	r1, [pc, #92]	; (800cd44 <USBH_UserProcess+0xb4>)
 800cce8:	4815      	ldr	r0, [pc, #84]	; (800cd40 <USBH_UserProcess+0xb0>)
 800ccea:	f7f4 fa65 	bl	80011b8 <Write_File>

  Create_Dir("/DIR1");					//create directory
 800ccee:	4816      	ldr	r0, [pc, #88]	; (800cd48 <USBH_UserProcess+0xb8>)
 800ccf0:	f7f4 fc9a 	bl	8001628 <Create_Dir>
  Create_File("/DIR1/DIR1FILE.txt");	//create file in that directory and write to that file
 800ccf4:	4815      	ldr	r0, [pc, #84]	; (800cd4c <USBH_UserProcess+0xbc>)
 800ccf6:	f7f4 fb23 	bl	8001340 <Create_File>
  Write_File("/DIR1/DIR1FILE.txt", "Hello, This contents are from file of dir1\n");
 800ccfa:	4915      	ldr	r1, [pc, #84]	; (800cd50 <USBH_UserProcess+0xc0>)
 800ccfc:	4813      	ldr	r0, [pc, #76]	; (800cd4c <USBH_UserProcess+0xbc>)
 800ccfe:	f7f4 fa5b 	bl	80011b8 <Write_File>

  Create_Dir("/DIR2");					//create another directory
 800cd02:	4814      	ldr	r0, [pc, #80]	; (800cd54 <USBH_UserProcess+0xc4>)
 800cd04:	f7f4 fc90 	bl	8001628 <Create_Dir>
  Create_Dir("/DIR2/SUBDIR1");			//create subdirectory into that directory
 800cd08:	4813      	ldr	r0, [pc, #76]	; (800cd58 <USBH_UserProcess+0xc8>)
 800cd0a:	f7f4 fc8d 	bl	8001628 <Create_Dir>
  Create_File("/DIR2/SUBDIR1/DIR2FILE.txt");		//create file into subdirectory and write data into it
 800cd0e:	4813      	ldr	r0, [pc, #76]	; (800cd5c <USBH_UserProcess+0xcc>)
 800cd10:	f7f4 fb16 	bl	8001340 <Create_File>
  Write_File("/DIR2/SUBDIR1/DIR2FILE.txt", "This data is from the file of subdirectory which is into the directory 2\n");
 800cd14:	4912      	ldr	r1, [pc, #72]	; (800cd60 <USBH_UserProcess+0xd0>)
 800cd16:	4811      	ldr	r0, [pc, #68]	; (800cd5c <USBH_UserProcess+0xcc>)
 800cd18:	f7f4 fa4e 	bl	80011b8 <Write_File>

  //update the root file
  Update_File("/ROOTFILE.txt", "This is the updated data of root file which is on the second line\n");
 800cd1c:	4911      	ldr	r1, [pc, #68]	; (800cd64 <USBH_UserProcess+0xd4>)
 800cd1e:	4808      	ldr	r0, [pc, #32]	; (800cd40 <USBH_UserProcess+0xb0>)
 800cd20:	f7f4 fbaa 	bl	8001478 <Update_File>
  break;
 800cd24:	e004      	b.n	800cd30 <USBH_UserProcess+0xa0>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800cd26:	4b04      	ldr	r3, [pc, #16]	; (800cd38 <USBH_UserProcess+0xa8>)
 800cd28:	2201      	movs	r2, #1
 800cd2a:	701a      	strb	r2, [r3, #0]
  break;
 800cd2c:	e000      	b.n	800cd30 <USBH_UserProcess+0xa0>

  default:
  break;
 800cd2e:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800cd30:	bf00      	nop
 800cd32:	3708      	adds	r7, #8
 800cd34:	46bd      	mov	sp, r7
 800cd36:	bd80      	pop	{r7, pc}
 800cd38:	200028e4 	.word	0x200028e4
 800cd3c:	0800e1f4 	.word	0x0800e1f4
 800cd40:	0800e1f8 	.word	0x0800e1f8
 800cd44:	0800e208 	.word	0x0800e208
 800cd48:	0800e22c 	.word	0x0800e22c
 800cd4c:	0800e234 	.word	0x0800e234
 800cd50:	0800e248 	.word	0x0800e248
 800cd54:	0800e274 	.word	0x0800e274
 800cd58:	0800e27c 	.word	0x0800e27c
 800cd5c:	0800e28c 	.word	0x0800e28c
 800cd60:	0800e2a8 	.word	0x0800e2a8
 800cd64:	0800e2f4 	.word	0x0800e2f4

0800cd68 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b0ac      	sub	sp, #176	; 0xb0
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cd70:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800cd74:	2200      	movs	r2, #0
 800cd76:	601a      	str	r2, [r3, #0]
 800cd78:	605a      	str	r2, [r3, #4]
 800cd7a:	609a      	str	r2, [r3, #8]
 800cd7c:	60da      	str	r2, [r3, #12]
 800cd7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800cd80:	f107 0314 	add.w	r3, r7, #20
 800cd84:	2288      	movs	r2, #136	; 0x88
 800cd86:	2100      	movs	r1, #0
 800cd88:	4618      	mov	r0, r3
 800cd8a:	f000 fb41 	bl	800d410 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cd96:	d175      	bne.n	800ce84 <HAL_HCD_MspInit+0x11c>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800cd98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cd9c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800cd9e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cda2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800cda6:	f107 0314 	add.w	r3, r7, #20
 800cdaa:	4618      	mov	r0, r3
 800cdac:	f7f7 fa56 	bl	800425c <HAL_RCCEx_PeriphCLKConfig>
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d001      	beq.n	800cdba <HAL_HCD_MspInit+0x52>
    {
      Error_Handler();
 800cdb6:	f7f3 ffd3 	bl	8000d60 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cdba:	4b34      	ldr	r3, [pc, #208]	; (800ce8c <HAL_HCD_MspInit+0x124>)
 800cdbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cdbe:	4a33      	ldr	r2, [pc, #204]	; (800ce8c <HAL_HCD_MspInit+0x124>)
 800cdc0:	f043 0301 	orr.w	r3, r3, #1
 800cdc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cdc6:	4b31      	ldr	r3, [pc, #196]	; (800ce8c <HAL_HCD_MspInit+0x124>)
 800cdc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cdca:	f003 0301 	and.w	r3, r3, #1
 800cdce:	613b      	str	r3, [r7, #16]
 800cdd0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800cdd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cdd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cdda:	2300      	movs	r3, #0
 800cddc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cde0:	2300      	movs	r3, #0
 800cde2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cde6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800cdea:	4619      	mov	r1, r3
 800cdec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800cdf0:	f7f4 fe80 	bl	8001af4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800cdf4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800cdf8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cdfc:	2302      	movs	r3, #2
 800cdfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ce02:	2300      	movs	r3, #0
 800ce04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ce08:	2303      	movs	r3, #3
 800ce0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ce0e:	230a      	movs	r3, #10
 800ce10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ce14:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800ce18:	4619      	mov	r1, r3
 800ce1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ce1e:	f7f4 fe69 	bl	8001af4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ce22:	4b1a      	ldr	r3, [pc, #104]	; (800ce8c <HAL_HCD_MspInit+0x124>)
 800ce24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ce26:	4a19      	ldr	r2, [pc, #100]	; (800ce8c <HAL_HCD_MspInit+0x124>)
 800ce28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ce2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ce2e:	4b17      	ldr	r3, [pc, #92]	; (800ce8c <HAL_HCD_MspInit+0x124>)
 800ce30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ce32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ce36:	60fb      	str	r3, [r7, #12]
 800ce38:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ce3a:	4b14      	ldr	r3, [pc, #80]	; (800ce8c <HAL_HCD_MspInit+0x124>)
 800ce3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d114      	bne.n	800ce70 <HAL_HCD_MspInit+0x108>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ce46:	4b11      	ldr	r3, [pc, #68]	; (800ce8c <HAL_HCD_MspInit+0x124>)
 800ce48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce4a:	4a10      	ldr	r2, [pc, #64]	; (800ce8c <HAL_HCD_MspInit+0x124>)
 800ce4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ce50:	6593      	str	r3, [r2, #88]	; 0x58
 800ce52:	4b0e      	ldr	r3, [pc, #56]	; (800ce8c <HAL_HCD_MspInit+0x124>)
 800ce54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ce5a:	60bb      	str	r3, [r7, #8]
 800ce5c:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800ce5e:	f7f6 fbed 	bl	800363c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800ce62:	4b0a      	ldr	r3, [pc, #40]	; (800ce8c <HAL_HCD_MspInit+0x124>)
 800ce64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce66:	4a09      	ldr	r2, [pc, #36]	; (800ce8c <HAL_HCD_MspInit+0x124>)
 800ce68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ce6c:	6593      	str	r3, [r2, #88]	; 0x58
 800ce6e:	e001      	b.n	800ce74 <HAL_HCD_MspInit+0x10c>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800ce70:	f7f6 fbe4 	bl	800363c <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ce74:	2200      	movs	r2, #0
 800ce76:	2100      	movs	r1, #0
 800ce78:	2043      	movs	r0, #67	; 0x43
 800ce7a:	f7f4 fe04 	bl	8001a86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ce7e:	2043      	movs	r0, #67	; 0x43
 800ce80:	f7f4 fe1d 	bl	8001abe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ce84:	bf00      	nop
 800ce86:	37b0      	adds	r7, #176	; 0xb0
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	bd80      	pop	{r7, pc}
 800ce8c:	40021000 	.word	0x40021000

0800ce90 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b082      	sub	sp, #8
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ce9e:	4618      	mov	r0, r3
 800cea0:	f7fb fc67 	bl	8008772 <USBH_LL_IncTimer>
}
 800cea4:	bf00      	nop
 800cea6:	3708      	adds	r7, #8
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	bd80      	pop	{r7, pc}

0800ceac <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b082      	sub	sp, #8
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ceba:	4618      	mov	r0, r3
 800cebc:	f7fb fc9f 	bl	80087fe <USBH_LL_Connect>
}
 800cec0:	bf00      	nop
 800cec2:	3708      	adds	r7, #8
 800cec4:	46bd      	mov	sp, r7
 800cec6:	bd80      	pop	{r7, pc}

0800cec8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b082      	sub	sp, #8
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ced6:	4618      	mov	r0, r3
 800ced8:	f7fb fca8 	bl	800882c <USBH_LL_Disconnect>
}
 800cedc:	bf00      	nop
 800cede:	3708      	adds	r7, #8
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bd80      	pop	{r7, pc}

0800cee4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800cee4:	b480      	push	{r7}
 800cee6:	b083      	sub	sp, #12
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
 800ceec:	460b      	mov	r3, r1
 800ceee:	70fb      	strb	r3, [r7, #3]
 800cef0:	4613      	mov	r3, r2
 800cef2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800cef4:	bf00      	nop
 800cef6:	370c      	adds	r7, #12
 800cef8:	46bd      	mov	sp, r7
 800cefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefe:	4770      	bx	lr

0800cf00 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b082      	sub	sp, #8
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800cf0e:	4618      	mov	r0, r3
 800cf10:	f7fb fc59 	bl	80087c6 <USBH_LL_PortEnabled>
}
 800cf14:	bf00      	nop
 800cf16:	3708      	adds	r7, #8
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	bd80      	pop	{r7, pc}

0800cf1c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b082      	sub	sp, #8
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	f7fb fc59 	bl	80087e2 <USBH_LL_PortDisabled>
}
 800cf30:	bf00      	nop
 800cf32:	3708      	adds	r7, #8
 800cf34:	46bd      	mov	sp, r7
 800cf36:	bd80      	pop	{r7, pc}

0800cf38 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b082      	sub	sp, #8
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800cf46:	2b01      	cmp	r3, #1
 800cf48:	d12a      	bne.n	800cfa0 <USBH_LL_Init+0x68>
  /* Enable USB power on Pwrctrl CR2 register */
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800cf4a:	4a18      	ldr	r2, [pc, #96]	; (800cfac <USBH_LL_Init+0x74>)
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	4a15      	ldr	r2, [pc, #84]	; (800cfac <USBH_LL_Init+0x74>)
 800cf56:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800cf5a:	4b14      	ldr	r3, [pc, #80]	; (800cfac <USBH_LL_Init+0x74>)
 800cf5c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800cf60:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800cf62:	4b12      	ldr	r3, [pc, #72]	; (800cfac <USBH_LL_Init+0x74>)
 800cf64:	2208      	movs	r2, #8
 800cf66:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800cf68:	4b10      	ldr	r3, [pc, #64]	; (800cfac <USBH_LL_Init+0x74>)
 800cf6a:	2201      	movs	r2, #1
 800cf6c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800cf6e:	4b0f      	ldr	r3, [pc, #60]	; (800cfac <USBH_LL_Init+0x74>)
 800cf70:	2200      	movs	r2, #0
 800cf72:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800cf74:	4b0d      	ldr	r3, [pc, #52]	; (800cfac <USBH_LL_Init+0x74>)
 800cf76:	2202      	movs	r2, #2
 800cf78:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800cf7a:	4b0c      	ldr	r3, [pc, #48]	; (800cfac <USBH_LL_Init+0x74>)
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800cf80:	480a      	ldr	r0, [pc, #40]	; (800cfac <USBH_LL_Init+0x74>)
 800cf82:	f7f4 ff79 	bl	8001e78 <HAL_HCD_Init>
 800cf86:	4603      	mov	r3, r0
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d001      	beq.n	800cf90 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800cf8c:	f7f3 fee8 	bl	8000d60 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800cf90:	4806      	ldr	r0, [pc, #24]	; (800cfac <USBH_LL_Init+0x74>)
 800cf92:	f7f5 fb58 	bl	8002646 <HAL_HCD_GetCurrentFrame>
 800cf96:	4603      	mov	r3, r0
 800cf98:	4619      	mov	r1, r3
 800cf9a:	6878      	ldr	r0, [r7, #4]
 800cf9c:	f7fb fbda 	bl	8008754 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800cfa0:	2300      	movs	r3, #0
}
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	3708      	adds	r7, #8
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	bd80      	pop	{r7, pc}
 800cfaa:	bf00      	nop
 800cfac:	200028e8 	.word	0x200028e8

0800cfb0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b084      	sub	sp, #16
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cfb8:	2300      	movs	r3, #0
 800cfba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	f7f5 fac7 	bl	800255a <HAL_HCD_Start>
 800cfcc:	4603      	mov	r3, r0
 800cfce:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cfd0:	7bfb      	ldrb	r3, [r7, #15]
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	f000 f98c 	bl	800d2f0 <USBH_Get_USB_Status>
 800cfd8:	4603      	mov	r3, r0
 800cfda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cfdc:	7bbb      	ldrb	r3, [r7, #14]
}
 800cfde:	4618      	mov	r0, r3
 800cfe0:	3710      	adds	r7, #16
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}

0800cfe6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800cfe6:	b580      	push	{r7, lr}
 800cfe8:	b084      	sub	sp, #16
 800cfea:	af00      	add	r7, sp, #0
 800cfec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cfee:	2300      	movs	r3, #0
 800cff0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cff2:	2300      	movs	r3, #0
 800cff4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cffc:	4618      	mov	r0, r3
 800cffe:	f7f5 facf 	bl	80025a0 <HAL_HCD_Stop>
 800d002:	4603      	mov	r3, r0
 800d004:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d006:	7bfb      	ldrb	r3, [r7, #15]
 800d008:	4618      	mov	r0, r3
 800d00a:	f000 f971 	bl	800d2f0 <USBH_Get_USB_Status>
 800d00e:	4603      	mov	r3, r0
 800d010:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d012:	7bbb      	ldrb	r3, [r7, #14]
}
 800d014:	4618      	mov	r0, r3
 800d016:	3710      	adds	r7, #16
 800d018:	46bd      	mov	sp, r7
 800d01a:	bd80      	pop	{r7, pc}

0800d01c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b084      	sub	sp, #16
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800d024:	2301      	movs	r3, #1
 800d026:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d02e:	4618      	mov	r0, r3
 800d030:	f7f5 fb17 	bl	8002662 <HAL_HCD_GetCurrentSpeed>
 800d034:	4603      	mov	r3, r0
 800d036:	2b02      	cmp	r3, #2
 800d038:	d00c      	beq.n	800d054 <USBH_LL_GetSpeed+0x38>
 800d03a:	2b02      	cmp	r3, #2
 800d03c:	d80d      	bhi.n	800d05a <USBH_LL_GetSpeed+0x3e>
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d002      	beq.n	800d048 <USBH_LL_GetSpeed+0x2c>
 800d042:	2b01      	cmp	r3, #1
 800d044:	d003      	beq.n	800d04e <USBH_LL_GetSpeed+0x32>
 800d046:	e008      	b.n	800d05a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800d048:	2300      	movs	r3, #0
 800d04a:	73fb      	strb	r3, [r7, #15]
    break;
 800d04c:	e008      	b.n	800d060 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800d04e:	2301      	movs	r3, #1
 800d050:	73fb      	strb	r3, [r7, #15]
    break;
 800d052:	e005      	b.n	800d060 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800d054:	2302      	movs	r3, #2
 800d056:	73fb      	strb	r3, [r7, #15]
    break;
 800d058:	e002      	b.n	800d060 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800d05a:	2301      	movs	r3, #1
 800d05c:	73fb      	strb	r3, [r7, #15]
    break;
 800d05e:	bf00      	nop
  }
  return  speed;
 800d060:	7bfb      	ldrb	r3, [r7, #15]
}
 800d062:	4618      	mov	r0, r3
 800d064:	3710      	adds	r7, #16
 800d066:	46bd      	mov	sp, r7
 800d068:	bd80      	pop	{r7, pc}

0800d06a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800d06a:	b580      	push	{r7, lr}
 800d06c:	b084      	sub	sp, #16
 800d06e:	af00      	add	r7, sp, #0
 800d070:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d072:	2300      	movs	r3, #0
 800d074:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d076:	2300      	movs	r3, #0
 800d078:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d080:	4618      	mov	r0, r3
 800d082:	f7f5 faaa 	bl	80025da <HAL_HCD_ResetPort>
 800d086:	4603      	mov	r3, r0
 800d088:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d08a:	7bfb      	ldrb	r3, [r7, #15]
 800d08c:	4618      	mov	r0, r3
 800d08e:	f000 f92f 	bl	800d2f0 <USBH_Get_USB_Status>
 800d092:	4603      	mov	r3, r0
 800d094:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d096:	7bbb      	ldrb	r3, [r7, #14]
}
 800d098:	4618      	mov	r0, r3
 800d09a:	3710      	adds	r7, #16
 800d09c:	46bd      	mov	sp, r7
 800d09e:	bd80      	pop	{r7, pc}

0800d0a0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b082      	sub	sp, #8
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
 800d0a8:	460b      	mov	r3, r1
 800d0aa:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d0b2:	78fa      	ldrb	r2, [r7, #3]
 800d0b4:	4611      	mov	r1, r2
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	f7f5 fab1 	bl	800261e <HAL_HCD_HC_GetXferCount>
 800d0bc:	4603      	mov	r3, r0
}
 800d0be:	4618      	mov	r0, r3
 800d0c0:	3708      	adds	r7, #8
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	bd80      	pop	{r7, pc}

0800d0c6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d0c6:	b590      	push	{r4, r7, lr}
 800d0c8:	b089      	sub	sp, #36	; 0x24
 800d0ca:	af04      	add	r7, sp, #16
 800d0cc:	6078      	str	r0, [r7, #4]
 800d0ce:	4608      	mov	r0, r1
 800d0d0:	4611      	mov	r1, r2
 800d0d2:	461a      	mov	r2, r3
 800d0d4:	4603      	mov	r3, r0
 800d0d6:	70fb      	strb	r3, [r7, #3]
 800d0d8:	460b      	mov	r3, r1
 800d0da:	70bb      	strb	r3, [r7, #2]
 800d0dc:	4613      	mov	r3, r2
 800d0de:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d0ee:	787c      	ldrb	r4, [r7, #1]
 800d0f0:	78ba      	ldrb	r2, [r7, #2]
 800d0f2:	78f9      	ldrb	r1, [r7, #3]
 800d0f4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d0f6:	9302      	str	r3, [sp, #8]
 800d0f8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d0fc:	9301      	str	r3, [sp, #4]
 800d0fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d102:	9300      	str	r3, [sp, #0]
 800d104:	4623      	mov	r3, r4
 800d106:	f7f4 ff19 	bl	8001f3c <HAL_HCD_HC_Init>
 800d10a:	4603      	mov	r3, r0
 800d10c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800d10e:	7bfb      	ldrb	r3, [r7, #15]
 800d110:	4618      	mov	r0, r3
 800d112:	f000 f8ed 	bl	800d2f0 <USBH_Get_USB_Status>
 800d116:	4603      	mov	r3, r0
 800d118:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d11a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d11c:	4618      	mov	r0, r3
 800d11e:	3714      	adds	r7, #20
 800d120:	46bd      	mov	sp, r7
 800d122:	bd90      	pop	{r4, r7, pc}

0800d124 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d124:	b580      	push	{r7, lr}
 800d126:	b084      	sub	sp, #16
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
 800d12c:	460b      	mov	r3, r1
 800d12e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d130:	2300      	movs	r3, #0
 800d132:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d134:	2300      	movs	r3, #0
 800d136:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d13e:	78fa      	ldrb	r2, [r7, #3]
 800d140:	4611      	mov	r1, r2
 800d142:	4618      	mov	r0, r3
 800d144:	f7f4 ff89 	bl	800205a <HAL_HCD_HC_Halt>
 800d148:	4603      	mov	r3, r0
 800d14a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d14c:	7bfb      	ldrb	r3, [r7, #15]
 800d14e:	4618      	mov	r0, r3
 800d150:	f000 f8ce 	bl	800d2f0 <USBH_Get_USB_Status>
 800d154:	4603      	mov	r3, r0
 800d156:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d158:	7bbb      	ldrb	r3, [r7, #14]
}
 800d15a:	4618      	mov	r0, r3
 800d15c:	3710      	adds	r7, #16
 800d15e:	46bd      	mov	sp, r7
 800d160:	bd80      	pop	{r7, pc}

0800d162 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800d162:	b590      	push	{r4, r7, lr}
 800d164:	b089      	sub	sp, #36	; 0x24
 800d166:	af04      	add	r7, sp, #16
 800d168:	6078      	str	r0, [r7, #4]
 800d16a:	4608      	mov	r0, r1
 800d16c:	4611      	mov	r1, r2
 800d16e:	461a      	mov	r2, r3
 800d170:	4603      	mov	r3, r0
 800d172:	70fb      	strb	r3, [r7, #3]
 800d174:	460b      	mov	r3, r1
 800d176:	70bb      	strb	r3, [r7, #2]
 800d178:	4613      	mov	r3, r2
 800d17a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d17c:	2300      	movs	r3, #0
 800d17e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d180:	2300      	movs	r3, #0
 800d182:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d18a:	787c      	ldrb	r4, [r7, #1]
 800d18c:	78ba      	ldrb	r2, [r7, #2]
 800d18e:	78f9      	ldrb	r1, [r7, #3]
 800d190:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d194:	9303      	str	r3, [sp, #12]
 800d196:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d198:	9302      	str	r3, [sp, #8]
 800d19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d19c:	9301      	str	r3, [sp, #4]
 800d19e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d1a2:	9300      	str	r3, [sp, #0]
 800d1a4:	4623      	mov	r3, r4
 800d1a6:	f7f4 ff7b 	bl	80020a0 <HAL_HCD_HC_SubmitRequest>
 800d1aa:	4603      	mov	r3, r0
 800d1ac:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  usb_status = USBH_Get_USB_Status(hal_status);
 800d1ae:	7bfb      	ldrb	r3, [r7, #15]
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	f000 f89d 	bl	800d2f0 <USBH_Get_USB_Status>
 800d1b6:	4603      	mov	r3, r0
 800d1b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1ba:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1bc:	4618      	mov	r0, r3
 800d1be:	3714      	adds	r7, #20
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	bd90      	pop	{r4, r7, pc}

0800d1c4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b082      	sub	sp, #8
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
 800d1cc:	460b      	mov	r3, r1
 800d1ce:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d1d6:	78fa      	ldrb	r2, [r7, #3]
 800d1d8:	4611      	mov	r1, r2
 800d1da:	4618      	mov	r0, r3
 800d1dc:	f7f5 fa0b 	bl	80025f6 <HAL_HCD_HC_GetURBState>
 800d1e0:	4603      	mov	r3, r0
}
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	3708      	adds	r7, #8
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	bd80      	pop	{r7, pc}

0800d1ea <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800d1ea:	b580      	push	{r7, lr}
 800d1ec:	b082      	sub	sp, #8
 800d1ee:	af00      	add	r7, sp, #0
 800d1f0:	6078      	str	r0, [r7, #4]
 800d1f2:	460b      	mov	r3, r1
 800d1f4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800d1fc:	2b01      	cmp	r3, #1
 800d1fe:	d103      	bne.n	800d208 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800d200:	78fb      	ldrb	r3, [r7, #3]
 800d202:	4618      	mov	r0, r3
 800d204:	f000 f8a0 	bl	800d348 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800d208:	20c8      	movs	r0, #200	; 0xc8
 800d20a:	f7f4 fb3d 	bl	8001888 <HAL_Delay>
  return USBH_OK;
 800d20e:	2300      	movs	r3, #0
}
 800d210:	4618      	mov	r0, r3
 800d212:	3708      	adds	r7, #8
 800d214:	46bd      	mov	sp, r7
 800d216:	bd80      	pop	{r7, pc}

0800d218 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800d218:	b480      	push	{r7}
 800d21a:	b085      	sub	sp, #20
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
 800d220:	460b      	mov	r3, r1
 800d222:	70fb      	strb	r3, [r7, #3]
 800d224:	4613      	mov	r3, r2
 800d226:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d22e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800d230:	78fb      	ldrb	r3, [r7, #3]
 800d232:	68fa      	ldr	r2, [r7, #12]
 800d234:	212c      	movs	r1, #44	; 0x2c
 800d236:	fb01 f303 	mul.w	r3, r1, r3
 800d23a:	4413      	add	r3, r2
 800d23c:	333b      	adds	r3, #59	; 0x3b
 800d23e:	781b      	ldrb	r3, [r3, #0]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d009      	beq.n	800d258 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800d244:	78fb      	ldrb	r3, [r7, #3]
 800d246:	68fa      	ldr	r2, [r7, #12]
 800d248:	212c      	movs	r1, #44	; 0x2c
 800d24a:	fb01 f303 	mul.w	r3, r1, r3
 800d24e:	4413      	add	r3, r2
 800d250:	3354      	adds	r3, #84	; 0x54
 800d252:	78ba      	ldrb	r2, [r7, #2]
 800d254:	701a      	strb	r2, [r3, #0]
 800d256:	e008      	b.n	800d26a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800d258:	78fb      	ldrb	r3, [r7, #3]
 800d25a:	68fa      	ldr	r2, [r7, #12]
 800d25c:	212c      	movs	r1, #44	; 0x2c
 800d25e:	fb01 f303 	mul.w	r3, r1, r3
 800d262:	4413      	add	r3, r2
 800d264:	3355      	adds	r3, #85	; 0x55
 800d266:	78ba      	ldrb	r2, [r7, #2]
 800d268:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800d26a:	2300      	movs	r3, #0
}
 800d26c:	4618      	mov	r0, r3
 800d26e:	3714      	adds	r7, #20
 800d270:	46bd      	mov	sp, r7
 800d272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d276:	4770      	bx	lr

0800d278 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d278:	b480      	push	{r7}
 800d27a:	b085      	sub	sp, #20
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
 800d280:	460b      	mov	r3, r1
 800d282:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800d284:	2300      	movs	r3, #0
 800d286:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d28e:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800d290:	78fb      	ldrb	r3, [r7, #3]
 800d292:	68ba      	ldr	r2, [r7, #8]
 800d294:	212c      	movs	r1, #44	; 0x2c
 800d296:	fb01 f303 	mul.w	r3, r1, r3
 800d29a:	4413      	add	r3, r2
 800d29c:	333b      	adds	r3, #59	; 0x3b
 800d29e:	781b      	ldrb	r3, [r3, #0]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d009      	beq.n	800d2b8 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800d2a4:	78fb      	ldrb	r3, [r7, #3]
 800d2a6:	68ba      	ldr	r2, [r7, #8]
 800d2a8:	212c      	movs	r1, #44	; 0x2c
 800d2aa:	fb01 f303 	mul.w	r3, r1, r3
 800d2ae:	4413      	add	r3, r2
 800d2b0:	3354      	adds	r3, #84	; 0x54
 800d2b2:	781b      	ldrb	r3, [r3, #0]
 800d2b4:	73fb      	strb	r3, [r7, #15]
 800d2b6:	e008      	b.n	800d2ca <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800d2b8:	78fb      	ldrb	r3, [r7, #3]
 800d2ba:	68ba      	ldr	r2, [r7, #8]
 800d2bc:	212c      	movs	r1, #44	; 0x2c
 800d2be:	fb01 f303 	mul.w	r3, r1, r3
 800d2c2:	4413      	add	r3, r2
 800d2c4:	3355      	adds	r3, #85	; 0x55
 800d2c6:	781b      	ldrb	r3, [r3, #0]
 800d2c8:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800d2ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	3714      	adds	r7, #20
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d6:	4770      	bx	lr

0800d2d8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b082      	sub	sp, #8
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800d2e0:	6878      	ldr	r0, [r7, #4]
 800d2e2:	f7f4 fad1 	bl	8001888 <HAL_Delay>
}
 800d2e6:	bf00      	nop
 800d2e8:	3708      	adds	r7, #8
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	bd80      	pop	{r7, pc}
	...

0800d2f0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d2f0:	b480      	push	{r7}
 800d2f2:	b085      	sub	sp, #20
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d2fe:	79fb      	ldrb	r3, [r7, #7]
 800d300:	2b03      	cmp	r3, #3
 800d302:	d817      	bhi.n	800d334 <USBH_Get_USB_Status+0x44>
 800d304:	a201      	add	r2, pc, #4	; (adr r2, 800d30c <USBH_Get_USB_Status+0x1c>)
 800d306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d30a:	bf00      	nop
 800d30c:	0800d31d 	.word	0x0800d31d
 800d310:	0800d323 	.word	0x0800d323
 800d314:	0800d329 	.word	0x0800d329
 800d318:	0800d32f 	.word	0x0800d32f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800d31c:	2300      	movs	r3, #0
 800d31e:	73fb      	strb	r3, [r7, #15]
    break;
 800d320:	e00b      	b.n	800d33a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800d322:	2302      	movs	r3, #2
 800d324:	73fb      	strb	r3, [r7, #15]
    break;
 800d326:	e008      	b.n	800d33a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800d328:	2301      	movs	r3, #1
 800d32a:	73fb      	strb	r3, [r7, #15]
    break;
 800d32c:	e005      	b.n	800d33a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800d32e:	2302      	movs	r3, #2
 800d330:	73fb      	strb	r3, [r7, #15]
    break;
 800d332:	e002      	b.n	800d33a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800d334:	2302      	movs	r3, #2
 800d336:	73fb      	strb	r3, [r7, #15]
    break;
 800d338:	bf00      	nop
  }
  return usb_status;
 800d33a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d33c:	4618      	mov	r0, r3
 800d33e:	3714      	adds	r7, #20
 800d340:	46bd      	mov	sp, r7
 800d342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d346:	4770      	bx	lr

0800d348 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800d348:	b580      	push	{r7, lr}
 800d34a:	b084      	sub	sp, #16
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	4603      	mov	r3, r0
 800d350:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800d352:	79fb      	ldrb	r3, [r7, #7]
 800d354:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800d356:	79fb      	ldrb	r3, [r7, #7]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d102      	bne.n	800d362 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800d35c:	2300      	movs	r3, #0
 800d35e:	73fb      	strb	r3, [r7, #15]
 800d360:	e001      	b.n	800d366 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800d362:	2301      	movs	r3, #1
 800d364:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,(GPIO_PinState)data);
 800d366:	7bfb      	ldrb	r3, [r7, #15]
 800d368:	461a      	mov	r2, r3
 800d36a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d36e:	4803      	ldr	r0, [pc, #12]	; (800d37c <MX_DriverVbusFS+0x34>)
 800d370:	f7f4 fd6a 	bl	8001e48 <HAL_GPIO_WritePin>
}
 800d374:	bf00      	nop
 800d376:	3710      	adds	r7, #16
 800d378:	46bd      	mov	sp, r7
 800d37a:	bd80      	pop	{r7, pc}
 800d37c:	48000800 	.word	0x48000800

0800d380 <__errno>:
 800d380:	4b01      	ldr	r3, [pc, #4]	; (800d388 <__errno+0x8>)
 800d382:	6818      	ldr	r0, [r3, #0]
 800d384:	4770      	bx	lr
 800d386:	bf00      	nop
 800d388:	2000002c 	.word	0x2000002c

0800d38c <__libc_init_array>:
 800d38c:	b570      	push	{r4, r5, r6, lr}
 800d38e:	4d0d      	ldr	r5, [pc, #52]	; (800d3c4 <__libc_init_array+0x38>)
 800d390:	4c0d      	ldr	r4, [pc, #52]	; (800d3c8 <__libc_init_array+0x3c>)
 800d392:	1b64      	subs	r4, r4, r5
 800d394:	10a4      	asrs	r4, r4, #2
 800d396:	2600      	movs	r6, #0
 800d398:	42a6      	cmp	r6, r4
 800d39a:	d109      	bne.n	800d3b0 <__libc_init_array+0x24>
 800d39c:	4d0b      	ldr	r5, [pc, #44]	; (800d3cc <__libc_init_array+0x40>)
 800d39e:	4c0c      	ldr	r4, [pc, #48]	; (800d3d0 <__libc_init_array+0x44>)
 800d3a0:	f000 fc9e 	bl	800dce0 <_init>
 800d3a4:	1b64      	subs	r4, r4, r5
 800d3a6:	10a4      	asrs	r4, r4, #2
 800d3a8:	2600      	movs	r6, #0
 800d3aa:	42a6      	cmp	r6, r4
 800d3ac:	d105      	bne.n	800d3ba <__libc_init_array+0x2e>
 800d3ae:	bd70      	pop	{r4, r5, r6, pc}
 800d3b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d3b4:	4798      	blx	r3
 800d3b6:	3601      	adds	r6, #1
 800d3b8:	e7ee      	b.n	800d398 <__libc_init_array+0xc>
 800d3ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800d3be:	4798      	blx	r3
 800d3c0:	3601      	adds	r6, #1
 800d3c2:	e7f2      	b.n	800d3aa <__libc_init_array+0x1e>
 800d3c4:	0800e810 	.word	0x0800e810
 800d3c8:	0800e810 	.word	0x0800e810
 800d3cc:	0800e810 	.word	0x0800e810
 800d3d0:	0800e814 	.word	0x0800e814

0800d3d4 <malloc>:
 800d3d4:	4b02      	ldr	r3, [pc, #8]	; (800d3e0 <malloc+0xc>)
 800d3d6:	4601      	mov	r1, r0
 800d3d8:	6818      	ldr	r0, [r3, #0]
 800d3da:	f000 b88d 	b.w	800d4f8 <_malloc_r>
 800d3de:	bf00      	nop
 800d3e0:	2000002c 	.word	0x2000002c

0800d3e4 <free>:
 800d3e4:	4b02      	ldr	r3, [pc, #8]	; (800d3f0 <free+0xc>)
 800d3e6:	4601      	mov	r1, r0
 800d3e8:	6818      	ldr	r0, [r3, #0]
 800d3ea:	f000 b819 	b.w	800d420 <_free_r>
 800d3ee:	bf00      	nop
 800d3f0:	2000002c 	.word	0x2000002c

0800d3f4 <memcpy>:
 800d3f4:	440a      	add	r2, r1
 800d3f6:	4291      	cmp	r1, r2
 800d3f8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d3fc:	d100      	bne.n	800d400 <memcpy+0xc>
 800d3fe:	4770      	bx	lr
 800d400:	b510      	push	{r4, lr}
 800d402:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d406:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d40a:	4291      	cmp	r1, r2
 800d40c:	d1f9      	bne.n	800d402 <memcpy+0xe>
 800d40e:	bd10      	pop	{r4, pc}

0800d410 <memset>:
 800d410:	4402      	add	r2, r0
 800d412:	4603      	mov	r3, r0
 800d414:	4293      	cmp	r3, r2
 800d416:	d100      	bne.n	800d41a <memset+0xa>
 800d418:	4770      	bx	lr
 800d41a:	f803 1b01 	strb.w	r1, [r3], #1
 800d41e:	e7f9      	b.n	800d414 <memset+0x4>

0800d420 <_free_r>:
 800d420:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d422:	2900      	cmp	r1, #0
 800d424:	d044      	beq.n	800d4b0 <_free_r+0x90>
 800d426:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d42a:	9001      	str	r0, [sp, #4]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	f1a1 0404 	sub.w	r4, r1, #4
 800d432:	bfb8      	it	lt
 800d434:	18e4      	addlt	r4, r4, r3
 800d436:	f000 f903 	bl	800d640 <__malloc_lock>
 800d43a:	4a1e      	ldr	r2, [pc, #120]	; (800d4b4 <_free_r+0x94>)
 800d43c:	9801      	ldr	r0, [sp, #4]
 800d43e:	6813      	ldr	r3, [r2, #0]
 800d440:	b933      	cbnz	r3, 800d450 <_free_r+0x30>
 800d442:	6063      	str	r3, [r4, #4]
 800d444:	6014      	str	r4, [r2, #0]
 800d446:	b003      	add	sp, #12
 800d448:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d44c:	f000 b8fe 	b.w	800d64c <__malloc_unlock>
 800d450:	42a3      	cmp	r3, r4
 800d452:	d908      	bls.n	800d466 <_free_r+0x46>
 800d454:	6825      	ldr	r5, [r4, #0]
 800d456:	1961      	adds	r1, r4, r5
 800d458:	428b      	cmp	r3, r1
 800d45a:	bf01      	itttt	eq
 800d45c:	6819      	ldreq	r1, [r3, #0]
 800d45e:	685b      	ldreq	r3, [r3, #4]
 800d460:	1949      	addeq	r1, r1, r5
 800d462:	6021      	streq	r1, [r4, #0]
 800d464:	e7ed      	b.n	800d442 <_free_r+0x22>
 800d466:	461a      	mov	r2, r3
 800d468:	685b      	ldr	r3, [r3, #4]
 800d46a:	b10b      	cbz	r3, 800d470 <_free_r+0x50>
 800d46c:	42a3      	cmp	r3, r4
 800d46e:	d9fa      	bls.n	800d466 <_free_r+0x46>
 800d470:	6811      	ldr	r1, [r2, #0]
 800d472:	1855      	adds	r5, r2, r1
 800d474:	42a5      	cmp	r5, r4
 800d476:	d10b      	bne.n	800d490 <_free_r+0x70>
 800d478:	6824      	ldr	r4, [r4, #0]
 800d47a:	4421      	add	r1, r4
 800d47c:	1854      	adds	r4, r2, r1
 800d47e:	42a3      	cmp	r3, r4
 800d480:	6011      	str	r1, [r2, #0]
 800d482:	d1e0      	bne.n	800d446 <_free_r+0x26>
 800d484:	681c      	ldr	r4, [r3, #0]
 800d486:	685b      	ldr	r3, [r3, #4]
 800d488:	6053      	str	r3, [r2, #4]
 800d48a:	4421      	add	r1, r4
 800d48c:	6011      	str	r1, [r2, #0]
 800d48e:	e7da      	b.n	800d446 <_free_r+0x26>
 800d490:	d902      	bls.n	800d498 <_free_r+0x78>
 800d492:	230c      	movs	r3, #12
 800d494:	6003      	str	r3, [r0, #0]
 800d496:	e7d6      	b.n	800d446 <_free_r+0x26>
 800d498:	6825      	ldr	r5, [r4, #0]
 800d49a:	1961      	adds	r1, r4, r5
 800d49c:	428b      	cmp	r3, r1
 800d49e:	bf04      	itt	eq
 800d4a0:	6819      	ldreq	r1, [r3, #0]
 800d4a2:	685b      	ldreq	r3, [r3, #4]
 800d4a4:	6063      	str	r3, [r4, #4]
 800d4a6:	bf04      	itt	eq
 800d4a8:	1949      	addeq	r1, r1, r5
 800d4aa:	6021      	streq	r1, [r4, #0]
 800d4ac:	6054      	str	r4, [r2, #4]
 800d4ae:	e7ca      	b.n	800d446 <_free_r+0x26>
 800d4b0:	b003      	add	sp, #12
 800d4b2:	bd30      	pop	{r4, r5, pc}
 800d4b4:	20002bec 	.word	0x20002bec

0800d4b8 <sbrk_aligned>:
 800d4b8:	b570      	push	{r4, r5, r6, lr}
 800d4ba:	4e0e      	ldr	r6, [pc, #56]	; (800d4f4 <sbrk_aligned+0x3c>)
 800d4bc:	460c      	mov	r4, r1
 800d4be:	6831      	ldr	r1, [r6, #0]
 800d4c0:	4605      	mov	r5, r0
 800d4c2:	b911      	cbnz	r1, 800d4ca <sbrk_aligned+0x12>
 800d4c4:	f000 f88c 	bl	800d5e0 <_sbrk_r>
 800d4c8:	6030      	str	r0, [r6, #0]
 800d4ca:	4621      	mov	r1, r4
 800d4cc:	4628      	mov	r0, r5
 800d4ce:	f000 f887 	bl	800d5e0 <_sbrk_r>
 800d4d2:	1c43      	adds	r3, r0, #1
 800d4d4:	d00a      	beq.n	800d4ec <sbrk_aligned+0x34>
 800d4d6:	1cc4      	adds	r4, r0, #3
 800d4d8:	f024 0403 	bic.w	r4, r4, #3
 800d4dc:	42a0      	cmp	r0, r4
 800d4de:	d007      	beq.n	800d4f0 <sbrk_aligned+0x38>
 800d4e0:	1a21      	subs	r1, r4, r0
 800d4e2:	4628      	mov	r0, r5
 800d4e4:	f000 f87c 	bl	800d5e0 <_sbrk_r>
 800d4e8:	3001      	adds	r0, #1
 800d4ea:	d101      	bne.n	800d4f0 <sbrk_aligned+0x38>
 800d4ec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d4f0:	4620      	mov	r0, r4
 800d4f2:	bd70      	pop	{r4, r5, r6, pc}
 800d4f4:	20002bf0 	.word	0x20002bf0

0800d4f8 <_malloc_r>:
 800d4f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4fc:	1ccd      	adds	r5, r1, #3
 800d4fe:	f025 0503 	bic.w	r5, r5, #3
 800d502:	3508      	adds	r5, #8
 800d504:	2d0c      	cmp	r5, #12
 800d506:	bf38      	it	cc
 800d508:	250c      	movcc	r5, #12
 800d50a:	2d00      	cmp	r5, #0
 800d50c:	4607      	mov	r7, r0
 800d50e:	db01      	blt.n	800d514 <_malloc_r+0x1c>
 800d510:	42a9      	cmp	r1, r5
 800d512:	d905      	bls.n	800d520 <_malloc_r+0x28>
 800d514:	230c      	movs	r3, #12
 800d516:	603b      	str	r3, [r7, #0]
 800d518:	2600      	movs	r6, #0
 800d51a:	4630      	mov	r0, r6
 800d51c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d520:	4e2e      	ldr	r6, [pc, #184]	; (800d5dc <_malloc_r+0xe4>)
 800d522:	f000 f88d 	bl	800d640 <__malloc_lock>
 800d526:	6833      	ldr	r3, [r6, #0]
 800d528:	461c      	mov	r4, r3
 800d52a:	bb34      	cbnz	r4, 800d57a <_malloc_r+0x82>
 800d52c:	4629      	mov	r1, r5
 800d52e:	4638      	mov	r0, r7
 800d530:	f7ff ffc2 	bl	800d4b8 <sbrk_aligned>
 800d534:	1c43      	adds	r3, r0, #1
 800d536:	4604      	mov	r4, r0
 800d538:	d14d      	bne.n	800d5d6 <_malloc_r+0xde>
 800d53a:	6834      	ldr	r4, [r6, #0]
 800d53c:	4626      	mov	r6, r4
 800d53e:	2e00      	cmp	r6, #0
 800d540:	d140      	bne.n	800d5c4 <_malloc_r+0xcc>
 800d542:	6823      	ldr	r3, [r4, #0]
 800d544:	4631      	mov	r1, r6
 800d546:	4638      	mov	r0, r7
 800d548:	eb04 0803 	add.w	r8, r4, r3
 800d54c:	f000 f848 	bl	800d5e0 <_sbrk_r>
 800d550:	4580      	cmp	r8, r0
 800d552:	d13a      	bne.n	800d5ca <_malloc_r+0xd2>
 800d554:	6821      	ldr	r1, [r4, #0]
 800d556:	3503      	adds	r5, #3
 800d558:	1a6d      	subs	r5, r5, r1
 800d55a:	f025 0503 	bic.w	r5, r5, #3
 800d55e:	3508      	adds	r5, #8
 800d560:	2d0c      	cmp	r5, #12
 800d562:	bf38      	it	cc
 800d564:	250c      	movcc	r5, #12
 800d566:	4629      	mov	r1, r5
 800d568:	4638      	mov	r0, r7
 800d56a:	f7ff ffa5 	bl	800d4b8 <sbrk_aligned>
 800d56e:	3001      	adds	r0, #1
 800d570:	d02b      	beq.n	800d5ca <_malloc_r+0xd2>
 800d572:	6823      	ldr	r3, [r4, #0]
 800d574:	442b      	add	r3, r5
 800d576:	6023      	str	r3, [r4, #0]
 800d578:	e00e      	b.n	800d598 <_malloc_r+0xa0>
 800d57a:	6822      	ldr	r2, [r4, #0]
 800d57c:	1b52      	subs	r2, r2, r5
 800d57e:	d41e      	bmi.n	800d5be <_malloc_r+0xc6>
 800d580:	2a0b      	cmp	r2, #11
 800d582:	d916      	bls.n	800d5b2 <_malloc_r+0xba>
 800d584:	1961      	adds	r1, r4, r5
 800d586:	42a3      	cmp	r3, r4
 800d588:	6025      	str	r5, [r4, #0]
 800d58a:	bf18      	it	ne
 800d58c:	6059      	strne	r1, [r3, #4]
 800d58e:	6863      	ldr	r3, [r4, #4]
 800d590:	bf08      	it	eq
 800d592:	6031      	streq	r1, [r6, #0]
 800d594:	5162      	str	r2, [r4, r5]
 800d596:	604b      	str	r3, [r1, #4]
 800d598:	4638      	mov	r0, r7
 800d59a:	f104 060b 	add.w	r6, r4, #11
 800d59e:	f000 f855 	bl	800d64c <__malloc_unlock>
 800d5a2:	f026 0607 	bic.w	r6, r6, #7
 800d5a6:	1d23      	adds	r3, r4, #4
 800d5a8:	1af2      	subs	r2, r6, r3
 800d5aa:	d0b6      	beq.n	800d51a <_malloc_r+0x22>
 800d5ac:	1b9b      	subs	r3, r3, r6
 800d5ae:	50a3      	str	r3, [r4, r2]
 800d5b0:	e7b3      	b.n	800d51a <_malloc_r+0x22>
 800d5b2:	6862      	ldr	r2, [r4, #4]
 800d5b4:	42a3      	cmp	r3, r4
 800d5b6:	bf0c      	ite	eq
 800d5b8:	6032      	streq	r2, [r6, #0]
 800d5ba:	605a      	strne	r2, [r3, #4]
 800d5bc:	e7ec      	b.n	800d598 <_malloc_r+0xa0>
 800d5be:	4623      	mov	r3, r4
 800d5c0:	6864      	ldr	r4, [r4, #4]
 800d5c2:	e7b2      	b.n	800d52a <_malloc_r+0x32>
 800d5c4:	4634      	mov	r4, r6
 800d5c6:	6876      	ldr	r6, [r6, #4]
 800d5c8:	e7b9      	b.n	800d53e <_malloc_r+0x46>
 800d5ca:	230c      	movs	r3, #12
 800d5cc:	603b      	str	r3, [r7, #0]
 800d5ce:	4638      	mov	r0, r7
 800d5d0:	f000 f83c 	bl	800d64c <__malloc_unlock>
 800d5d4:	e7a1      	b.n	800d51a <_malloc_r+0x22>
 800d5d6:	6025      	str	r5, [r4, #0]
 800d5d8:	e7de      	b.n	800d598 <_malloc_r+0xa0>
 800d5da:	bf00      	nop
 800d5dc:	20002bec 	.word	0x20002bec

0800d5e0 <_sbrk_r>:
 800d5e0:	b538      	push	{r3, r4, r5, lr}
 800d5e2:	4d06      	ldr	r5, [pc, #24]	; (800d5fc <_sbrk_r+0x1c>)
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	4604      	mov	r4, r0
 800d5e8:	4608      	mov	r0, r1
 800d5ea:	602b      	str	r3, [r5, #0]
 800d5ec:	f7f3 fc74 	bl	8000ed8 <_sbrk>
 800d5f0:	1c43      	adds	r3, r0, #1
 800d5f2:	d102      	bne.n	800d5fa <_sbrk_r+0x1a>
 800d5f4:	682b      	ldr	r3, [r5, #0]
 800d5f6:	b103      	cbz	r3, 800d5fa <_sbrk_r+0x1a>
 800d5f8:	6023      	str	r3, [r4, #0]
 800d5fa:	bd38      	pop	{r3, r4, r5, pc}
 800d5fc:	20002bf4 	.word	0x20002bf4

0800d600 <siprintf>:
 800d600:	b40e      	push	{r1, r2, r3}
 800d602:	b500      	push	{lr}
 800d604:	b09c      	sub	sp, #112	; 0x70
 800d606:	ab1d      	add	r3, sp, #116	; 0x74
 800d608:	9002      	str	r0, [sp, #8]
 800d60a:	9006      	str	r0, [sp, #24]
 800d60c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d610:	4809      	ldr	r0, [pc, #36]	; (800d638 <siprintf+0x38>)
 800d612:	9107      	str	r1, [sp, #28]
 800d614:	9104      	str	r1, [sp, #16]
 800d616:	4909      	ldr	r1, [pc, #36]	; (800d63c <siprintf+0x3c>)
 800d618:	f853 2b04 	ldr.w	r2, [r3], #4
 800d61c:	9105      	str	r1, [sp, #20]
 800d61e:	6800      	ldr	r0, [r0, #0]
 800d620:	9301      	str	r3, [sp, #4]
 800d622:	a902      	add	r1, sp, #8
 800d624:	f000 f874 	bl	800d710 <_svfiprintf_r>
 800d628:	9b02      	ldr	r3, [sp, #8]
 800d62a:	2200      	movs	r2, #0
 800d62c:	701a      	strb	r2, [r3, #0]
 800d62e:	b01c      	add	sp, #112	; 0x70
 800d630:	f85d eb04 	ldr.w	lr, [sp], #4
 800d634:	b003      	add	sp, #12
 800d636:	4770      	bx	lr
 800d638:	2000002c 	.word	0x2000002c
 800d63c:	ffff0208 	.word	0xffff0208

0800d640 <__malloc_lock>:
 800d640:	4801      	ldr	r0, [pc, #4]	; (800d648 <__malloc_lock+0x8>)
 800d642:	f000 baf9 	b.w	800dc38 <__retarget_lock_acquire_recursive>
 800d646:	bf00      	nop
 800d648:	20002bf8 	.word	0x20002bf8

0800d64c <__malloc_unlock>:
 800d64c:	4801      	ldr	r0, [pc, #4]	; (800d654 <__malloc_unlock+0x8>)
 800d64e:	f000 baf4 	b.w	800dc3a <__retarget_lock_release_recursive>
 800d652:	bf00      	nop
 800d654:	20002bf8 	.word	0x20002bf8

0800d658 <__ssputs_r>:
 800d658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d65c:	688e      	ldr	r6, [r1, #8]
 800d65e:	429e      	cmp	r6, r3
 800d660:	4682      	mov	sl, r0
 800d662:	460c      	mov	r4, r1
 800d664:	4690      	mov	r8, r2
 800d666:	461f      	mov	r7, r3
 800d668:	d838      	bhi.n	800d6dc <__ssputs_r+0x84>
 800d66a:	898a      	ldrh	r2, [r1, #12]
 800d66c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d670:	d032      	beq.n	800d6d8 <__ssputs_r+0x80>
 800d672:	6825      	ldr	r5, [r4, #0]
 800d674:	6909      	ldr	r1, [r1, #16]
 800d676:	eba5 0901 	sub.w	r9, r5, r1
 800d67a:	6965      	ldr	r5, [r4, #20]
 800d67c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d680:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d684:	3301      	adds	r3, #1
 800d686:	444b      	add	r3, r9
 800d688:	106d      	asrs	r5, r5, #1
 800d68a:	429d      	cmp	r5, r3
 800d68c:	bf38      	it	cc
 800d68e:	461d      	movcc	r5, r3
 800d690:	0553      	lsls	r3, r2, #21
 800d692:	d531      	bpl.n	800d6f8 <__ssputs_r+0xa0>
 800d694:	4629      	mov	r1, r5
 800d696:	f7ff ff2f 	bl	800d4f8 <_malloc_r>
 800d69a:	4606      	mov	r6, r0
 800d69c:	b950      	cbnz	r0, 800d6b4 <__ssputs_r+0x5c>
 800d69e:	230c      	movs	r3, #12
 800d6a0:	f8ca 3000 	str.w	r3, [sl]
 800d6a4:	89a3      	ldrh	r3, [r4, #12]
 800d6a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6aa:	81a3      	strh	r3, [r4, #12]
 800d6ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d6b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6b4:	6921      	ldr	r1, [r4, #16]
 800d6b6:	464a      	mov	r2, r9
 800d6b8:	f7ff fe9c 	bl	800d3f4 <memcpy>
 800d6bc:	89a3      	ldrh	r3, [r4, #12]
 800d6be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d6c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d6c6:	81a3      	strh	r3, [r4, #12]
 800d6c8:	6126      	str	r6, [r4, #16]
 800d6ca:	6165      	str	r5, [r4, #20]
 800d6cc:	444e      	add	r6, r9
 800d6ce:	eba5 0509 	sub.w	r5, r5, r9
 800d6d2:	6026      	str	r6, [r4, #0]
 800d6d4:	60a5      	str	r5, [r4, #8]
 800d6d6:	463e      	mov	r6, r7
 800d6d8:	42be      	cmp	r6, r7
 800d6da:	d900      	bls.n	800d6de <__ssputs_r+0x86>
 800d6dc:	463e      	mov	r6, r7
 800d6de:	6820      	ldr	r0, [r4, #0]
 800d6e0:	4632      	mov	r2, r6
 800d6e2:	4641      	mov	r1, r8
 800d6e4:	f000 faaa 	bl	800dc3c <memmove>
 800d6e8:	68a3      	ldr	r3, [r4, #8]
 800d6ea:	1b9b      	subs	r3, r3, r6
 800d6ec:	60a3      	str	r3, [r4, #8]
 800d6ee:	6823      	ldr	r3, [r4, #0]
 800d6f0:	4433      	add	r3, r6
 800d6f2:	6023      	str	r3, [r4, #0]
 800d6f4:	2000      	movs	r0, #0
 800d6f6:	e7db      	b.n	800d6b0 <__ssputs_r+0x58>
 800d6f8:	462a      	mov	r2, r5
 800d6fa:	f000 fab9 	bl	800dc70 <_realloc_r>
 800d6fe:	4606      	mov	r6, r0
 800d700:	2800      	cmp	r0, #0
 800d702:	d1e1      	bne.n	800d6c8 <__ssputs_r+0x70>
 800d704:	6921      	ldr	r1, [r4, #16]
 800d706:	4650      	mov	r0, sl
 800d708:	f7ff fe8a 	bl	800d420 <_free_r>
 800d70c:	e7c7      	b.n	800d69e <__ssputs_r+0x46>
	...

0800d710 <_svfiprintf_r>:
 800d710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d714:	4698      	mov	r8, r3
 800d716:	898b      	ldrh	r3, [r1, #12]
 800d718:	061b      	lsls	r3, r3, #24
 800d71a:	b09d      	sub	sp, #116	; 0x74
 800d71c:	4607      	mov	r7, r0
 800d71e:	460d      	mov	r5, r1
 800d720:	4614      	mov	r4, r2
 800d722:	d50e      	bpl.n	800d742 <_svfiprintf_r+0x32>
 800d724:	690b      	ldr	r3, [r1, #16]
 800d726:	b963      	cbnz	r3, 800d742 <_svfiprintf_r+0x32>
 800d728:	2140      	movs	r1, #64	; 0x40
 800d72a:	f7ff fee5 	bl	800d4f8 <_malloc_r>
 800d72e:	6028      	str	r0, [r5, #0]
 800d730:	6128      	str	r0, [r5, #16]
 800d732:	b920      	cbnz	r0, 800d73e <_svfiprintf_r+0x2e>
 800d734:	230c      	movs	r3, #12
 800d736:	603b      	str	r3, [r7, #0]
 800d738:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d73c:	e0d1      	b.n	800d8e2 <_svfiprintf_r+0x1d2>
 800d73e:	2340      	movs	r3, #64	; 0x40
 800d740:	616b      	str	r3, [r5, #20]
 800d742:	2300      	movs	r3, #0
 800d744:	9309      	str	r3, [sp, #36]	; 0x24
 800d746:	2320      	movs	r3, #32
 800d748:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d74c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d750:	2330      	movs	r3, #48	; 0x30
 800d752:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d8fc <_svfiprintf_r+0x1ec>
 800d756:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d75a:	f04f 0901 	mov.w	r9, #1
 800d75e:	4623      	mov	r3, r4
 800d760:	469a      	mov	sl, r3
 800d762:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d766:	b10a      	cbz	r2, 800d76c <_svfiprintf_r+0x5c>
 800d768:	2a25      	cmp	r2, #37	; 0x25
 800d76a:	d1f9      	bne.n	800d760 <_svfiprintf_r+0x50>
 800d76c:	ebba 0b04 	subs.w	fp, sl, r4
 800d770:	d00b      	beq.n	800d78a <_svfiprintf_r+0x7a>
 800d772:	465b      	mov	r3, fp
 800d774:	4622      	mov	r2, r4
 800d776:	4629      	mov	r1, r5
 800d778:	4638      	mov	r0, r7
 800d77a:	f7ff ff6d 	bl	800d658 <__ssputs_r>
 800d77e:	3001      	adds	r0, #1
 800d780:	f000 80aa 	beq.w	800d8d8 <_svfiprintf_r+0x1c8>
 800d784:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d786:	445a      	add	r2, fp
 800d788:	9209      	str	r2, [sp, #36]	; 0x24
 800d78a:	f89a 3000 	ldrb.w	r3, [sl]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	f000 80a2 	beq.w	800d8d8 <_svfiprintf_r+0x1c8>
 800d794:	2300      	movs	r3, #0
 800d796:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d79a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d79e:	f10a 0a01 	add.w	sl, sl, #1
 800d7a2:	9304      	str	r3, [sp, #16]
 800d7a4:	9307      	str	r3, [sp, #28]
 800d7a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d7aa:	931a      	str	r3, [sp, #104]	; 0x68
 800d7ac:	4654      	mov	r4, sl
 800d7ae:	2205      	movs	r2, #5
 800d7b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7b4:	4851      	ldr	r0, [pc, #324]	; (800d8fc <_svfiprintf_r+0x1ec>)
 800d7b6:	f7f2 fd23 	bl	8000200 <memchr>
 800d7ba:	9a04      	ldr	r2, [sp, #16]
 800d7bc:	b9d8      	cbnz	r0, 800d7f6 <_svfiprintf_r+0xe6>
 800d7be:	06d0      	lsls	r0, r2, #27
 800d7c0:	bf44      	itt	mi
 800d7c2:	2320      	movmi	r3, #32
 800d7c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d7c8:	0711      	lsls	r1, r2, #28
 800d7ca:	bf44      	itt	mi
 800d7cc:	232b      	movmi	r3, #43	; 0x2b
 800d7ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d7d2:	f89a 3000 	ldrb.w	r3, [sl]
 800d7d6:	2b2a      	cmp	r3, #42	; 0x2a
 800d7d8:	d015      	beq.n	800d806 <_svfiprintf_r+0xf6>
 800d7da:	9a07      	ldr	r2, [sp, #28]
 800d7dc:	4654      	mov	r4, sl
 800d7de:	2000      	movs	r0, #0
 800d7e0:	f04f 0c0a 	mov.w	ip, #10
 800d7e4:	4621      	mov	r1, r4
 800d7e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d7ea:	3b30      	subs	r3, #48	; 0x30
 800d7ec:	2b09      	cmp	r3, #9
 800d7ee:	d94e      	bls.n	800d88e <_svfiprintf_r+0x17e>
 800d7f0:	b1b0      	cbz	r0, 800d820 <_svfiprintf_r+0x110>
 800d7f2:	9207      	str	r2, [sp, #28]
 800d7f4:	e014      	b.n	800d820 <_svfiprintf_r+0x110>
 800d7f6:	eba0 0308 	sub.w	r3, r0, r8
 800d7fa:	fa09 f303 	lsl.w	r3, r9, r3
 800d7fe:	4313      	orrs	r3, r2
 800d800:	9304      	str	r3, [sp, #16]
 800d802:	46a2      	mov	sl, r4
 800d804:	e7d2      	b.n	800d7ac <_svfiprintf_r+0x9c>
 800d806:	9b03      	ldr	r3, [sp, #12]
 800d808:	1d19      	adds	r1, r3, #4
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	9103      	str	r1, [sp, #12]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	bfbb      	ittet	lt
 800d812:	425b      	neglt	r3, r3
 800d814:	f042 0202 	orrlt.w	r2, r2, #2
 800d818:	9307      	strge	r3, [sp, #28]
 800d81a:	9307      	strlt	r3, [sp, #28]
 800d81c:	bfb8      	it	lt
 800d81e:	9204      	strlt	r2, [sp, #16]
 800d820:	7823      	ldrb	r3, [r4, #0]
 800d822:	2b2e      	cmp	r3, #46	; 0x2e
 800d824:	d10c      	bne.n	800d840 <_svfiprintf_r+0x130>
 800d826:	7863      	ldrb	r3, [r4, #1]
 800d828:	2b2a      	cmp	r3, #42	; 0x2a
 800d82a:	d135      	bne.n	800d898 <_svfiprintf_r+0x188>
 800d82c:	9b03      	ldr	r3, [sp, #12]
 800d82e:	1d1a      	adds	r2, r3, #4
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	9203      	str	r2, [sp, #12]
 800d834:	2b00      	cmp	r3, #0
 800d836:	bfb8      	it	lt
 800d838:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d83c:	3402      	adds	r4, #2
 800d83e:	9305      	str	r3, [sp, #20]
 800d840:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d90c <_svfiprintf_r+0x1fc>
 800d844:	7821      	ldrb	r1, [r4, #0]
 800d846:	2203      	movs	r2, #3
 800d848:	4650      	mov	r0, sl
 800d84a:	f7f2 fcd9 	bl	8000200 <memchr>
 800d84e:	b140      	cbz	r0, 800d862 <_svfiprintf_r+0x152>
 800d850:	2340      	movs	r3, #64	; 0x40
 800d852:	eba0 000a 	sub.w	r0, r0, sl
 800d856:	fa03 f000 	lsl.w	r0, r3, r0
 800d85a:	9b04      	ldr	r3, [sp, #16]
 800d85c:	4303      	orrs	r3, r0
 800d85e:	3401      	adds	r4, #1
 800d860:	9304      	str	r3, [sp, #16]
 800d862:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d866:	4826      	ldr	r0, [pc, #152]	; (800d900 <_svfiprintf_r+0x1f0>)
 800d868:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d86c:	2206      	movs	r2, #6
 800d86e:	f7f2 fcc7 	bl	8000200 <memchr>
 800d872:	2800      	cmp	r0, #0
 800d874:	d038      	beq.n	800d8e8 <_svfiprintf_r+0x1d8>
 800d876:	4b23      	ldr	r3, [pc, #140]	; (800d904 <_svfiprintf_r+0x1f4>)
 800d878:	bb1b      	cbnz	r3, 800d8c2 <_svfiprintf_r+0x1b2>
 800d87a:	9b03      	ldr	r3, [sp, #12]
 800d87c:	3307      	adds	r3, #7
 800d87e:	f023 0307 	bic.w	r3, r3, #7
 800d882:	3308      	adds	r3, #8
 800d884:	9303      	str	r3, [sp, #12]
 800d886:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d888:	4433      	add	r3, r6
 800d88a:	9309      	str	r3, [sp, #36]	; 0x24
 800d88c:	e767      	b.n	800d75e <_svfiprintf_r+0x4e>
 800d88e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d892:	460c      	mov	r4, r1
 800d894:	2001      	movs	r0, #1
 800d896:	e7a5      	b.n	800d7e4 <_svfiprintf_r+0xd4>
 800d898:	2300      	movs	r3, #0
 800d89a:	3401      	adds	r4, #1
 800d89c:	9305      	str	r3, [sp, #20]
 800d89e:	4619      	mov	r1, r3
 800d8a0:	f04f 0c0a 	mov.w	ip, #10
 800d8a4:	4620      	mov	r0, r4
 800d8a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d8aa:	3a30      	subs	r2, #48	; 0x30
 800d8ac:	2a09      	cmp	r2, #9
 800d8ae:	d903      	bls.n	800d8b8 <_svfiprintf_r+0x1a8>
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d0c5      	beq.n	800d840 <_svfiprintf_r+0x130>
 800d8b4:	9105      	str	r1, [sp, #20]
 800d8b6:	e7c3      	b.n	800d840 <_svfiprintf_r+0x130>
 800d8b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800d8bc:	4604      	mov	r4, r0
 800d8be:	2301      	movs	r3, #1
 800d8c0:	e7f0      	b.n	800d8a4 <_svfiprintf_r+0x194>
 800d8c2:	ab03      	add	r3, sp, #12
 800d8c4:	9300      	str	r3, [sp, #0]
 800d8c6:	462a      	mov	r2, r5
 800d8c8:	4b0f      	ldr	r3, [pc, #60]	; (800d908 <_svfiprintf_r+0x1f8>)
 800d8ca:	a904      	add	r1, sp, #16
 800d8cc:	4638      	mov	r0, r7
 800d8ce:	f3af 8000 	nop.w
 800d8d2:	1c42      	adds	r2, r0, #1
 800d8d4:	4606      	mov	r6, r0
 800d8d6:	d1d6      	bne.n	800d886 <_svfiprintf_r+0x176>
 800d8d8:	89ab      	ldrh	r3, [r5, #12]
 800d8da:	065b      	lsls	r3, r3, #25
 800d8dc:	f53f af2c 	bmi.w	800d738 <_svfiprintf_r+0x28>
 800d8e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d8e2:	b01d      	add	sp, #116	; 0x74
 800d8e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8e8:	ab03      	add	r3, sp, #12
 800d8ea:	9300      	str	r3, [sp, #0]
 800d8ec:	462a      	mov	r2, r5
 800d8ee:	4b06      	ldr	r3, [pc, #24]	; (800d908 <_svfiprintf_r+0x1f8>)
 800d8f0:	a904      	add	r1, sp, #16
 800d8f2:	4638      	mov	r0, r7
 800d8f4:	f000 f87a 	bl	800d9ec <_printf_i>
 800d8f8:	e7eb      	b.n	800d8d2 <_svfiprintf_r+0x1c2>
 800d8fa:	bf00      	nop
 800d8fc:	0800e7d4 	.word	0x0800e7d4
 800d900:	0800e7de 	.word	0x0800e7de
 800d904:	00000000 	.word	0x00000000
 800d908:	0800d659 	.word	0x0800d659
 800d90c:	0800e7da 	.word	0x0800e7da

0800d910 <_printf_common>:
 800d910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d914:	4616      	mov	r6, r2
 800d916:	4699      	mov	r9, r3
 800d918:	688a      	ldr	r2, [r1, #8]
 800d91a:	690b      	ldr	r3, [r1, #16]
 800d91c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d920:	4293      	cmp	r3, r2
 800d922:	bfb8      	it	lt
 800d924:	4613      	movlt	r3, r2
 800d926:	6033      	str	r3, [r6, #0]
 800d928:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d92c:	4607      	mov	r7, r0
 800d92e:	460c      	mov	r4, r1
 800d930:	b10a      	cbz	r2, 800d936 <_printf_common+0x26>
 800d932:	3301      	adds	r3, #1
 800d934:	6033      	str	r3, [r6, #0]
 800d936:	6823      	ldr	r3, [r4, #0]
 800d938:	0699      	lsls	r1, r3, #26
 800d93a:	bf42      	ittt	mi
 800d93c:	6833      	ldrmi	r3, [r6, #0]
 800d93e:	3302      	addmi	r3, #2
 800d940:	6033      	strmi	r3, [r6, #0]
 800d942:	6825      	ldr	r5, [r4, #0]
 800d944:	f015 0506 	ands.w	r5, r5, #6
 800d948:	d106      	bne.n	800d958 <_printf_common+0x48>
 800d94a:	f104 0a19 	add.w	sl, r4, #25
 800d94e:	68e3      	ldr	r3, [r4, #12]
 800d950:	6832      	ldr	r2, [r6, #0]
 800d952:	1a9b      	subs	r3, r3, r2
 800d954:	42ab      	cmp	r3, r5
 800d956:	dc26      	bgt.n	800d9a6 <_printf_common+0x96>
 800d958:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d95c:	1e13      	subs	r3, r2, #0
 800d95e:	6822      	ldr	r2, [r4, #0]
 800d960:	bf18      	it	ne
 800d962:	2301      	movne	r3, #1
 800d964:	0692      	lsls	r2, r2, #26
 800d966:	d42b      	bmi.n	800d9c0 <_printf_common+0xb0>
 800d968:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d96c:	4649      	mov	r1, r9
 800d96e:	4638      	mov	r0, r7
 800d970:	47c0      	blx	r8
 800d972:	3001      	adds	r0, #1
 800d974:	d01e      	beq.n	800d9b4 <_printf_common+0xa4>
 800d976:	6823      	ldr	r3, [r4, #0]
 800d978:	68e5      	ldr	r5, [r4, #12]
 800d97a:	6832      	ldr	r2, [r6, #0]
 800d97c:	f003 0306 	and.w	r3, r3, #6
 800d980:	2b04      	cmp	r3, #4
 800d982:	bf08      	it	eq
 800d984:	1aad      	subeq	r5, r5, r2
 800d986:	68a3      	ldr	r3, [r4, #8]
 800d988:	6922      	ldr	r2, [r4, #16]
 800d98a:	bf0c      	ite	eq
 800d98c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d990:	2500      	movne	r5, #0
 800d992:	4293      	cmp	r3, r2
 800d994:	bfc4      	itt	gt
 800d996:	1a9b      	subgt	r3, r3, r2
 800d998:	18ed      	addgt	r5, r5, r3
 800d99a:	2600      	movs	r6, #0
 800d99c:	341a      	adds	r4, #26
 800d99e:	42b5      	cmp	r5, r6
 800d9a0:	d11a      	bne.n	800d9d8 <_printf_common+0xc8>
 800d9a2:	2000      	movs	r0, #0
 800d9a4:	e008      	b.n	800d9b8 <_printf_common+0xa8>
 800d9a6:	2301      	movs	r3, #1
 800d9a8:	4652      	mov	r2, sl
 800d9aa:	4649      	mov	r1, r9
 800d9ac:	4638      	mov	r0, r7
 800d9ae:	47c0      	blx	r8
 800d9b0:	3001      	adds	r0, #1
 800d9b2:	d103      	bne.n	800d9bc <_printf_common+0xac>
 800d9b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d9b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9bc:	3501      	adds	r5, #1
 800d9be:	e7c6      	b.n	800d94e <_printf_common+0x3e>
 800d9c0:	18e1      	adds	r1, r4, r3
 800d9c2:	1c5a      	adds	r2, r3, #1
 800d9c4:	2030      	movs	r0, #48	; 0x30
 800d9c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d9ca:	4422      	add	r2, r4
 800d9cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d9d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d9d4:	3302      	adds	r3, #2
 800d9d6:	e7c7      	b.n	800d968 <_printf_common+0x58>
 800d9d8:	2301      	movs	r3, #1
 800d9da:	4622      	mov	r2, r4
 800d9dc:	4649      	mov	r1, r9
 800d9de:	4638      	mov	r0, r7
 800d9e0:	47c0      	blx	r8
 800d9e2:	3001      	adds	r0, #1
 800d9e4:	d0e6      	beq.n	800d9b4 <_printf_common+0xa4>
 800d9e6:	3601      	adds	r6, #1
 800d9e8:	e7d9      	b.n	800d99e <_printf_common+0x8e>
	...

0800d9ec <_printf_i>:
 800d9ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d9f0:	7e0f      	ldrb	r7, [r1, #24]
 800d9f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d9f4:	2f78      	cmp	r7, #120	; 0x78
 800d9f6:	4691      	mov	r9, r2
 800d9f8:	4680      	mov	r8, r0
 800d9fa:	460c      	mov	r4, r1
 800d9fc:	469a      	mov	sl, r3
 800d9fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800da02:	d807      	bhi.n	800da14 <_printf_i+0x28>
 800da04:	2f62      	cmp	r7, #98	; 0x62
 800da06:	d80a      	bhi.n	800da1e <_printf_i+0x32>
 800da08:	2f00      	cmp	r7, #0
 800da0a:	f000 80d8 	beq.w	800dbbe <_printf_i+0x1d2>
 800da0e:	2f58      	cmp	r7, #88	; 0x58
 800da10:	f000 80a3 	beq.w	800db5a <_printf_i+0x16e>
 800da14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800da18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800da1c:	e03a      	b.n	800da94 <_printf_i+0xa8>
 800da1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800da22:	2b15      	cmp	r3, #21
 800da24:	d8f6      	bhi.n	800da14 <_printf_i+0x28>
 800da26:	a101      	add	r1, pc, #4	; (adr r1, 800da2c <_printf_i+0x40>)
 800da28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800da2c:	0800da85 	.word	0x0800da85
 800da30:	0800da99 	.word	0x0800da99
 800da34:	0800da15 	.word	0x0800da15
 800da38:	0800da15 	.word	0x0800da15
 800da3c:	0800da15 	.word	0x0800da15
 800da40:	0800da15 	.word	0x0800da15
 800da44:	0800da99 	.word	0x0800da99
 800da48:	0800da15 	.word	0x0800da15
 800da4c:	0800da15 	.word	0x0800da15
 800da50:	0800da15 	.word	0x0800da15
 800da54:	0800da15 	.word	0x0800da15
 800da58:	0800dba5 	.word	0x0800dba5
 800da5c:	0800dac9 	.word	0x0800dac9
 800da60:	0800db87 	.word	0x0800db87
 800da64:	0800da15 	.word	0x0800da15
 800da68:	0800da15 	.word	0x0800da15
 800da6c:	0800dbc7 	.word	0x0800dbc7
 800da70:	0800da15 	.word	0x0800da15
 800da74:	0800dac9 	.word	0x0800dac9
 800da78:	0800da15 	.word	0x0800da15
 800da7c:	0800da15 	.word	0x0800da15
 800da80:	0800db8f 	.word	0x0800db8f
 800da84:	682b      	ldr	r3, [r5, #0]
 800da86:	1d1a      	adds	r2, r3, #4
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	602a      	str	r2, [r5, #0]
 800da8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800da90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800da94:	2301      	movs	r3, #1
 800da96:	e0a3      	b.n	800dbe0 <_printf_i+0x1f4>
 800da98:	6820      	ldr	r0, [r4, #0]
 800da9a:	6829      	ldr	r1, [r5, #0]
 800da9c:	0606      	lsls	r6, r0, #24
 800da9e:	f101 0304 	add.w	r3, r1, #4
 800daa2:	d50a      	bpl.n	800daba <_printf_i+0xce>
 800daa4:	680e      	ldr	r6, [r1, #0]
 800daa6:	602b      	str	r3, [r5, #0]
 800daa8:	2e00      	cmp	r6, #0
 800daaa:	da03      	bge.n	800dab4 <_printf_i+0xc8>
 800daac:	232d      	movs	r3, #45	; 0x2d
 800daae:	4276      	negs	r6, r6
 800dab0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dab4:	485e      	ldr	r0, [pc, #376]	; (800dc30 <_printf_i+0x244>)
 800dab6:	230a      	movs	r3, #10
 800dab8:	e019      	b.n	800daee <_printf_i+0x102>
 800daba:	680e      	ldr	r6, [r1, #0]
 800dabc:	602b      	str	r3, [r5, #0]
 800dabe:	f010 0f40 	tst.w	r0, #64	; 0x40
 800dac2:	bf18      	it	ne
 800dac4:	b236      	sxthne	r6, r6
 800dac6:	e7ef      	b.n	800daa8 <_printf_i+0xbc>
 800dac8:	682b      	ldr	r3, [r5, #0]
 800daca:	6820      	ldr	r0, [r4, #0]
 800dacc:	1d19      	adds	r1, r3, #4
 800dace:	6029      	str	r1, [r5, #0]
 800dad0:	0601      	lsls	r1, r0, #24
 800dad2:	d501      	bpl.n	800dad8 <_printf_i+0xec>
 800dad4:	681e      	ldr	r6, [r3, #0]
 800dad6:	e002      	b.n	800dade <_printf_i+0xf2>
 800dad8:	0646      	lsls	r6, r0, #25
 800dada:	d5fb      	bpl.n	800dad4 <_printf_i+0xe8>
 800dadc:	881e      	ldrh	r6, [r3, #0]
 800dade:	4854      	ldr	r0, [pc, #336]	; (800dc30 <_printf_i+0x244>)
 800dae0:	2f6f      	cmp	r7, #111	; 0x6f
 800dae2:	bf0c      	ite	eq
 800dae4:	2308      	moveq	r3, #8
 800dae6:	230a      	movne	r3, #10
 800dae8:	2100      	movs	r1, #0
 800daea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800daee:	6865      	ldr	r5, [r4, #4]
 800daf0:	60a5      	str	r5, [r4, #8]
 800daf2:	2d00      	cmp	r5, #0
 800daf4:	bfa2      	ittt	ge
 800daf6:	6821      	ldrge	r1, [r4, #0]
 800daf8:	f021 0104 	bicge.w	r1, r1, #4
 800dafc:	6021      	strge	r1, [r4, #0]
 800dafe:	b90e      	cbnz	r6, 800db04 <_printf_i+0x118>
 800db00:	2d00      	cmp	r5, #0
 800db02:	d04d      	beq.n	800dba0 <_printf_i+0x1b4>
 800db04:	4615      	mov	r5, r2
 800db06:	fbb6 f1f3 	udiv	r1, r6, r3
 800db0a:	fb03 6711 	mls	r7, r3, r1, r6
 800db0e:	5dc7      	ldrb	r7, [r0, r7]
 800db10:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800db14:	4637      	mov	r7, r6
 800db16:	42bb      	cmp	r3, r7
 800db18:	460e      	mov	r6, r1
 800db1a:	d9f4      	bls.n	800db06 <_printf_i+0x11a>
 800db1c:	2b08      	cmp	r3, #8
 800db1e:	d10b      	bne.n	800db38 <_printf_i+0x14c>
 800db20:	6823      	ldr	r3, [r4, #0]
 800db22:	07de      	lsls	r6, r3, #31
 800db24:	d508      	bpl.n	800db38 <_printf_i+0x14c>
 800db26:	6923      	ldr	r3, [r4, #16]
 800db28:	6861      	ldr	r1, [r4, #4]
 800db2a:	4299      	cmp	r1, r3
 800db2c:	bfde      	ittt	le
 800db2e:	2330      	movle	r3, #48	; 0x30
 800db30:	f805 3c01 	strble.w	r3, [r5, #-1]
 800db34:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800db38:	1b52      	subs	r2, r2, r5
 800db3a:	6122      	str	r2, [r4, #16]
 800db3c:	f8cd a000 	str.w	sl, [sp]
 800db40:	464b      	mov	r3, r9
 800db42:	aa03      	add	r2, sp, #12
 800db44:	4621      	mov	r1, r4
 800db46:	4640      	mov	r0, r8
 800db48:	f7ff fee2 	bl	800d910 <_printf_common>
 800db4c:	3001      	adds	r0, #1
 800db4e:	d14c      	bne.n	800dbea <_printf_i+0x1fe>
 800db50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800db54:	b004      	add	sp, #16
 800db56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db5a:	4835      	ldr	r0, [pc, #212]	; (800dc30 <_printf_i+0x244>)
 800db5c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800db60:	6829      	ldr	r1, [r5, #0]
 800db62:	6823      	ldr	r3, [r4, #0]
 800db64:	f851 6b04 	ldr.w	r6, [r1], #4
 800db68:	6029      	str	r1, [r5, #0]
 800db6a:	061d      	lsls	r5, r3, #24
 800db6c:	d514      	bpl.n	800db98 <_printf_i+0x1ac>
 800db6e:	07df      	lsls	r7, r3, #31
 800db70:	bf44      	itt	mi
 800db72:	f043 0320 	orrmi.w	r3, r3, #32
 800db76:	6023      	strmi	r3, [r4, #0]
 800db78:	b91e      	cbnz	r6, 800db82 <_printf_i+0x196>
 800db7a:	6823      	ldr	r3, [r4, #0]
 800db7c:	f023 0320 	bic.w	r3, r3, #32
 800db80:	6023      	str	r3, [r4, #0]
 800db82:	2310      	movs	r3, #16
 800db84:	e7b0      	b.n	800dae8 <_printf_i+0xfc>
 800db86:	6823      	ldr	r3, [r4, #0]
 800db88:	f043 0320 	orr.w	r3, r3, #32
 800db8c:	6023      	str	r3, [r4, #0]
 800db8e:	2378      	movs	r3, #120	; 0x78
 800db90:	4828      	ldr	r0, [pc, #160]	; (800dc34 <_printf_i+0x248>)
 800db92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800db96:	e7e3      	b.n	800db60 <_printf_i+0x174>
 800db98:	0659      	lsls	r1, r3, #25
 800db9a:	bf48      	it	mi
 800db9c:	b2b6      	uxthmi	r6, r6
 800db9e:	e7e6      	b.n	800db6e <_printf_i+0x182>
 800dba0:	4615      	mov	r5, r2
 800dba2:	e7bb      	b.n	800db1c <_printf_i+0x130>
 800dba4:	682b      	ldr	r3, [r5, #0]
 800dba6:	6826      	ldr	r6, [r4, #0]
 800dba8:	6961      	ldr	r1, [r4, #20]
 800dbaa:	1d18      	adds	r0, r3, #4
 800dbac:	6028      	str	r0, [r5, #0]
 800dbae:	0635      	lsls	r5, r6, #24
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	d501      	bpl.n	800dbb8 <_printf_i+0x1cc>
 800dbb4:	6019      	str	r1, [r3, #0]
 800dbb6:	e002      	b.n	800dbbe <_printf_i+0x1d2>
 800dbb8:	0670      	lsls	r0, r6, #25
 800dbba:	d5fb      	bpl.n	800dbb4 <_printf_i+0x1c8>
 800dbbc:	8019      	strh	r1, [r3, #0]
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	6123      	str	r3, [r4, #16]
 800dbc2:	4615      	mov	r5, r2
 800dbc4:	e7ba      	b.n	800db3c <_printf_i+0x150>
 800dbc6:	682b      	ldr	r3, [r5, #0]
 800dbc8:	1d1a      	adds	r2, r3, #4
 800dbca:	602a      	str	r2, [r5, #0]
 800dbcc:	681d      	ldr	r5, [r3, #0]
 800dbce:	6862      	ldr	r2, [r4, #4]
 800dbd0:	2100      	movs	r1, #0
 800dbd2:	4628      	mov	r0, r5
 800dbd4:	f7f2 fb14 	bl	8000200 <memchr>
 800dbd8:	b108      	cbz	r0, 800dbde <_printf_i+0x1f2>
 800dbda:	1b40      	subs	r0, r0, r5
 800dbdc:	6060      	str	r0, [r4, #4]
 800dbde:	6863      	ldr	r3, [r4, #4]
 800dbe0:	6123      	str	r3, [r4, #16]
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dbe8:	e7a8      	b.n	800db3c <_printf_i+0x150>
 800dbea:	6923      	ldr	r3, [r4, #16]
 800dbec:	462a      	mov	r2, r5
 800dbee:	4649      	mov	r1, r9
 800dbf0:	4640      	mov	r0, r8
 800dbf2:	47d0      	blx	sl
 800dbf4:	3001      	adds	r0, #1
 800dbf6:	d0ab      	beq.n	800db50 <_printf_i+0x164>
 800dbf8:	6823      	ldr	r3, [r4, #0]
 800dbfa:	079b      	lsls	r3, r3, #30
 800dbfc:	d413      	bmi.n	800dc26 <_printf_i+0x23a>
 800dbfe:	68e0      	ldr	r0, [r4, #12]
 800dc00:	9b03      	ldr	r3, [sp, #12]
 800dc02:	4298      	cmp	r0, r3
 800dc04:	bfb8      	it	lt
 800dc06:	4618      	movlt	r0, r3
 800dc08:	e7a4      	b.n	800db54 <_printf_i+0x168>
 800dc0a:	2301      	movs	r3, #1
 800dc0c:	4632      	mov	r2, r6
 800dc0e:	4649      	mov	r1, r9
 800dc10:	4640      	mov	r0, r8
 800dc12:	47d0      	blx	sl
 800dc14:	3001      	adds	r0, #1
 800dc16:	d09b      	beq.n	800db50 <_printf_i+0x164>
 800dc18:	3501      	adds	r5, #1
 800dc1a:	68e3      	ldr	r3, [r4, #12]
 800dc1c:	9903      	ldr	r1, [sp, #12]
 800dc1e:	1a5b      	subs	r3, r3, r1
 800dc20:	42ab      	cmp	r3, r5
 800dc22:	dcf2      	bgt.n	800dc0a <_printf_i+0x21e>
 800dc24:	e7eb      	b.n	800dbfe <_printf_i+0x212>
 800dc26:	2500      	movs	r5, #0
 800dc28:	f104 0619 	add.w	r6, r4, #25
 800dc2c:	e7f5      	b.n	800dc1a <_printf_i+0x22e>
 800dc2e:	bf00      	nop
 800dc30:	0800e7e5 	.word	0x0800e7e5
 800dc34:	0800e7f6 	.word	0x0800e7f6

0800dc38 <__retarget_lock_acquire_recursive>:
 800dc38:	4770      	bx	lr

0800dc3a <__retarget_lock_release_recursive>:
 800dc3a:	4770      	bx	lr

0800dc3c <memmove>:
 800dc3c:	4288      	cmp	r0, r1
 800dc3e:	b510      	push	{r4, lr}
 800dc40:	eb01 0402 	add.w	r4, r1, r2
 800dc44:	d902      	bls.n	800dc4c <memmove+0x10>
 800dc46:	4284      	cmp	r4, r0
 800dc48:	4623      	mov	r3, r4
 800dc4a:	d807      	bhi.n	800dc5c <memmove+0x20>
 800dc4c:	1e43      	subs	r3, r0, #1
 800dc4e:	42a1      	cmp	r1, r4
 800dc50:	d008      	beq.n	800dc64 <memmove+0x28>
 800dc52:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dc56:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dc5a:	e7f8      	b.n	800dc4e <memmove+0x12>
 800dc5c:	4402      	add	r2, r0
 800dc5e:	4601      	mov	r1, r0
 800dc60:	428a      	cmp	r2, r1
 800dc62:	d100      	bne.n	800dc66 <memmove+0x2a>
 800dc64:	bd10      	pop	{r4, pc}
 800dc66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dc6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dc6e:	e7f7      	b.n	800dc60 <memmove+0x24>

0800dc70 <_realloc_r>:
 800dc70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc74:	4680      	mov	r8, r0
 800dc76:	4614      	mov	r4, r2
 800dc78:	460e      	mov	r6, r1
 800dc7a:	b921      	cbnz	r1, 800dc86 <_realloc_r+0x16>
 800dc7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dc80:	4611      	mov	r1, r2
 800dc82:	f7ff bc39 	b.w	800d4f8 <_malloc_r>
 800dc86:	b92a      	cbnz	r2, 800dc94 <_realloc_r+0x24>
 800dc88:	f7ff fbca 	bl	800d420 <_free_r>
 800dc8c:	4625      	mov	r5, r4
 800dc8e:	4628      	mov	r0, r5
 800dc90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc94:	f000 f81b 	bl	800dcce <_malloc_usable_size_r>
 800dc98:	4284      	cmp	r4, r0
 800dc9a:	4607      	mov	r7, r0
 800dc9c:	d802      	bhi.n	800dca4 <_realloc_r+0x34>
 800dc9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dca2:	d812      	bhi.n	800dcca <_realloc_r+0x5a>
 800dca4:	4621      	mov	r1, r4
 800dca6:	4640      	mov	r0, r8
 800dca8:	f7ff fc26 	bl	800d4f8 <_malloc_r>
 800dcac:	4605      	mov	r5, r0
 800dcae:	2800      	cmp	r0, #0
 800dcb0:	d0ed      	beq.n	800dc8e <_realloc_r+0x1e>
 800dcb2:	42bc      	cmp	r4, r7
 800dcb4:	4622      	mov	r2, r4
 800dcb6:	4631      	mov	r1, r6
 800dcb8:	bf28      	it	cs
 800dcba:	463a      	movcs	r2, r7
 800dcbc:	f7ff fb9a 	bl	800d3f4 <memcpy>
 800dcc0:	4631      	mov	r1, r6
 800dcc2:	4640      	mov	r0, r8
 800dcc4:	f7ff fbac 	bl	800d420 <_free_r>
 800dcc8:	e7e1      	b.n	800dc8e <_realloc_r+0x1e>
 800dcca:	4635      	mov	r5, r6
 800dccc:	e7df      	b.n	800dc8e <_realloc_r+0x1e>

0800dcce <_malloc_usable_size_r>:
 800dcce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dcd2:	1f18      	subs	r0, r3, #4
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	bfbc      	itt	lt
 800dcd8:	580b      	ldrlt	r3, [r1, r0]
 800dcda:	18c0      	addlt	r0, r0, r3
 800dcdc:	4770      	bx	lr
	...

0800dce0 <_init>:
 800dce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dce2:	bf00      	nop
 800dce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dce6:	bc08      	pop	{r3}
 800dce8:	469e      	mov	lr, r3
 800dcea:	4770      	bx	lr

0800dcec <_fini>:
 800dcec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcee:	bf00      	nop
 800dcf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dcf2:	bc08      	pop	{r3}
 800dcf4:	469e      	mov	lr, r3
 800dcf6:	4770      	bx	lr
