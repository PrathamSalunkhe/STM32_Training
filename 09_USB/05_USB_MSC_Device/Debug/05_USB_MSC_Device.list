
05_USB_MSC_Device.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c3c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08008dc4  08008dc4  00018dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e6c  08008e6c  00020194  2**0
                  CONTENTS
  4 .ARM          00000000  08008e6c  08008e6c  00020194  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008e6c  08008e6c  00020194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e6c  08008e6c  00018e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e70  08008e70  00018e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000194  20000000  08008e74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c78  20000194  08009008  00020194  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e0c  08009008  00020e0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012581  00000000  00000000  000201c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038bc  00000000  00000000  00032745  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe8  00000000  00000000  00036008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e38  00000000  00000000  00036ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002928b  00000000  00000000  00037e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014845  00000000  00000000  000610b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e718e  00000000  00000000  000758f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015ca86  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ea8  00000000  00000000  0015cad8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000194 	.word	0x20000194
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008dac 	.word	0x08008dac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000198 	.word	0x20000198
 80001c4:	08008dac 	.word	0x08008dac

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 f914 	bl	80003f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f805 	bl	80001de <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f852 	bl	800027c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80001d8:	f007 fe82 	bl	8007ee0 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001dc:	e7fe      	b.n	80001dc <main+0x14>

080001de <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001de:	b580      	push	{r7, lr}
 80001e0:	b096      	sub	sp, #88	; 0x58
 80001e2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001e4:	f107 0314 	add.w	r3, r7, #20
 80001e8:	2244      	movs	r2, #68	; 0x44
 80001ea:	2100      	movs	r1, #0
 80001ec:	4618      	mov	r0, r3
 80001ee:	f008 fdd5 	bl	8008d9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f2:	463b      	mov	r3, r7
 80001f4:	2200      	movs	r2, #0
 80001f6:	601a      	str	r2, [r3, #0]
 80001f8:	605a      	str	r2, [r3, #4]
 80001fa:	609a      	str	r2, [r3, #8]
 80001fc:	60da      	str	r2, [r3, #12]
 80001fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000200:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000204:	f002 f8e2 	bl	80023cc <HAL_PWREx_ControlVoltageScaling>
 8000208:	4603      	mov	r3, r0
 800020a:	2b00      	cmp	r3, #0
 800020c:	d001      	beq.n	8000212 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800020e:	f000 f859 	bl	80002c4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000212:	2301      	movs	r3, #1
 8000214:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000216:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800021a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800021c:	2302      	movs	r3, #2
 800021e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000220:	2303      	movs	r3, #3
 8000222:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000224:	2301      	movs	r3, #1
 8000226:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000228:	2314      	movs	r3, #20
 800022a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800022c:	2307      	movs	r3, #7
 800022e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000230:	2302      	movs	r3, #2
 8000232:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000234:	2302      	movs	r3, #2
 8000236:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000238:	f107 0314 	add.w	r3, r7, #20
 800023c:	4618      	mov	r0, r3
 800023e:	f002 f92b 	bl	8002498 <HAL_RCC_OscConfig>
 8000242:	4603      	mov	r3, r0
 8000244:	2b00      	cmp	r3, #0
 8000246:	d001      	beq.n	800024c <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000248:	f000 f83c 	bl	80002c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800024c:	230f      	movs	r3, #15
 800024e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000250:	2303      	movs	r3, #3
 8000252:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000254:	2300      	movs	r3, #0
 8000256:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000258:	2300      	movs	r3, #0
 800025a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800025c:	2300      	movs	r3, #0
 800025e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000260:	463b      	mov	r3, r7
 8000262:	2104      	movs	r1, #4
 8000264:	4618      	mov	r0, r3
 8000266:	f002 fcf3 	bl	8002c50 <HAL_RCC_ClockConfig>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d001      	beq.n	8000274 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000270:	f000 f828 	bl	80002c4 <Error_Handler>
  }
}
 8000274:	bf00      	nop
 8000276:	3758      	adds	r7, #88	; 0x58
 8000278:	46bd      	mov	sp, r7
 800027a:	bd80      	pop	{r7, pc}

0800027c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800027c:	b480      	push	{r7}
 800027e:	b083      	sub	sp, #12
 8000280:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000282:	4b0f      	ldr	r3, [pc, #60]	; (80002c0 <MX_GPIO_Init+0x44>)
 8000284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000286:	4a0e      	ldr	r2, [pc, #56]	; (80002c0 <MX_GPIO_Init+0x44>)
 8000288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800028c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800028e:	4b0c      	ldr	r3, [pc, #48]	; (80002c0 <MX_GPIO_Init+0x44>)
 8000290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000296:	607b      	str	r3, [r7, #4]
 8000298:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800029a:	4b09      	ldr	r3, [pc, #36]	; (80002c0 <MX_GPIO_Init+0x44>)
 800029c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800029e:	4a08      	ldr	r2, [pc, #32]	; (80002c0 <MX_GPIO_Init+0x44>)
 80002a0:	f043 0301 	orr.w	r3, r3, #1
 80002a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002a6:	4b06      	ldr	r3, [pc, #24]	; (80002c0 <MX_GPIO_Init+0x44>)
 80002a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002aa:	f003 0301 	and.w	r3, r3, #1
 80002ae:	603b      	str	r3, [r7, #0]
 80002b0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80002b2:	bf00      	nop
 80002b4:	370c      	adds	r7, #12
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	40021000 	.word	0x40021000

080002c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002c4:	b480      	push	{r7}
 80002c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002c8:	b672      	cpsid	i
}
 80002ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002cc:	e7fe      	b.n	80002cc <Error_Handler+0x8>
	...

080002d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80002d6:	4b0f      	ldr	r3, [pc, #60]	; (8000314 <HAL_MspInit+0x44>)
 80002d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80002da:	4a0e      	ldr	r2, [pc, #56]	; (8000314 <HAL_MspInit+0x44>)
 80002dc:	f043 0301 	orr.w	r3, r3, #1
 80002e0:	6613      	str	r3, [r2, #96]	; 0x60
 80002e2:	4b0c      	ldr	r3, [pc, #48]	; (8000314 <HAL_MspInit+0x44>)
 80002e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80002e6:	f003 0301 	and.w	r3, r3, #1
 80002ea:	607b      	str	r3, [r7, #4]
 80002ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002ee:	4b09      	ldr	r3, [pc, #36]	; (8000314 <HAL_MspInit+0x44>)
 80002f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80002f2:	4a08      	ldr	r2, [pc, #32]	; (8000314 <HAL_MspInit+0x44>)
 80002f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002f8:	6593      	str	r3, [r2, #88]	; 0x58
 80002fa:	4b06      	ldr	r3, [pc, #24]	; (8000314 <HAL_MspInit+0x44>)
 80002fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80002fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000302:	603b      	str	r3, [r7, #0]
 8000304:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000306:	bf00      	nop
 8000308:	370c      	adds	r7, #12
 800030a:	46bd      	mov	sp, r7
 800030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	40021000 	.word	0x40021000

08000318 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800031c:	e7fe      	b.n	800031c <NMI_Handler+0x4>

0800031e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800031e:	b480      	push	{r7}
 8000320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000322:	e7fe      	b.n	8000322 <HardFault_Handler+0x4>

08000324 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000328:	e7fe      	b.n	8000328 <MemManage_Handler+0x4>

0800032a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800032a:	b480      	push	{r7}
 800032c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800032e:	e7fe      	b.n	800032e <BusFault_Handler+0x4>

08000330 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000334:	e7fe      	b.n	8000334 <UsageFault_Handler+0x4>

08000336 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000336:	b480      	push	{r7}
 8000338:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800033a:	bf00      	nop
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr

08000344 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000348:	bf00      	nop
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr

08000352 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000352:	b480      	push	{r7}
 8000354:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000356:	bf00      	nop
 8000358:	46bd      	mov	sp, r7
 800035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035e:	4770      	bx	lr

08000360 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000364:	f000 f8a4 	bl	80004b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000368:	bf00      	nop
 800036a:	bd80      	pop	{r7, pc}

0800036c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000370:	4802      	ldr	r0, [pc, #8]	; (800037c <OTG_FS_IRQHandler+0x10>)
 8000372:	f000 ff84 	bl	800127e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000376:	bf00      	nop
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	20000688 	.word	0x20000688

08000380 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000384:	4b06      	ldr	r3, [pc, #24]	; (80003a0 <SystemInit+0x20>)
 8000386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800038a:	4a05      	ldr	r2, [pc, #20]	; (80003a0 <SystemInit+0x20>)
 800038c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000390:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000394:	bf00      	nop
 8000396:	46bd      	mov	sp, r7
 8000398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop
 80003a0:	e000ed00 	.word	0xe000ed00

080003a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80003a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003dc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80003a8:	f7ff ffea 	bl	8000380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003ac:	480c      	ldr	r0, [pc, #48]	; (80003e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80003ae:	490d      	ldr	r1, [pc, #52]	; (80003e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003b0:	4a0d      	ldr	r2, [pc, #52]	; (80003e8 <LoopForever+0xe>)
  movs r3, #0
 80003b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003b4:	e002      	b.n	80003bc <LoopCopyDataInit>

080003b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ba:	3304      	adds	r3, #4

080003bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003c0:	d3f9      	bcc.n	80003b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003c2:	4a0a      	ldr	r2, [pc, #40]	; (80003ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80003c4:	4c0a      	ldr	r4, [pc, #40]	; (80003f0 <LoopForever+0x16>)
  movs r3, #0
 80003c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003c8:	e001      	b.n	80003ce <LoopFillZerobss>

080003ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003cc:	3204      	adds	r2, #4

080003ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003d0:	d3fb      	bcc.n	80003ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80003d2:	f008 fcb1 	bl	8008d38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80003d6:	f7ff fef7 	bl	80001c8 <main>

080003da <LoopForever>:

LoopForever:
    b LoopForever
 80003da:	e7fe      	b.n	80003da <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80003dc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80003e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003e4:	20000194 	.word	0x20000194
  ldr r2, =_sidata
 80003e8:	08008e74 	.word	0x08008e74
  ldr r2, =_sbss
 80003ec:	20000194 	.word	0x20000194
  ldr r4, =_ebss
 80003f0:	20000e0c 	.word	0x20000e0c

080003f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80003f4:	e7fe      	b.n	80003f4 <ADC1_2_IRQHandler>
	...

080003f8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80003fe:	2300      	movs	r3, #0
 8000400:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000402:	4b0c      	ldr	r3, [pc, #48]	; (8000434 <HAL_Init+0x3c>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	4a0b      	ldr	r2, [pc, #44]	; (8000434 <HAL_Init+0x3c>)
 8000408:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800040c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800040e:	2003      	movs	r0, #3
 8000410:	f000 f962 	bl	80006d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f80f 	bl	8000438 <HAL_InitTick>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d002      	beq.n	8000426 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000420:	2301      	movs	r3, #1
 8000422:	71fb      	strb	r3, [r7, #7]
 8000424:	e001      	b.n	800042a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000426:	f7ff ff53 	bl	80002d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800042a:	79fb      	ldrb	r3, [r7, #7]
}
 800042c:	4618      	mov	r0, r3
 800042e:	3708      	adds	r7, #8
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}
 8000434:	40022000 	.word	0x40022000

08000438 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b084      	sub	sp, #16
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000440:	2300      	movs	r3, #0
 8000442:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000444:	4b17      	ldr	r3, [pc, #92]	; (80004a4 <HAL_InitTick+0x6c>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b00      	cmp	r3, #0
 800044a:	d023      	beq.n	8000494 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800044c:	4b16      	ldr	r3, [pc, #88]	; (80004a8 <HAL_InitTick+0x70>)
 800044e:	681a      	ldr	r2, [r3, #0]
 8000450:	4b14      	ldr	r3, [pc, #80]	; (80004a4 <HAL_InitTick+0x6c>)
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	4619      	mov	r1, r3
 8000456:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800045a:	fbb3 f3f1 	udiv	r3, r3, r1
 800045e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000462:	4618      	mov	r0, r3
 8000464:	f000 f96d 	bl	8000742 <HAL_SYSTICK_Config>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d10f      	bne.n	800048e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	2b0f      	cmp	r3, #15
 8000472:	d809      	bhi.n	8000488 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000474:	2200      	movs	r2, #0
 8000476:	6879      	ldr	r1, [r7, #4]
 8000478:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800047c:	f000 f937 	bl	80006ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000480:	4a0a      	ldr	r2, [pc, #40]	; (80004ac <HAL_InitTick+0x74>)
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	6013      	str	r3, [r2, #0]
 8000486:	e007      	b.n	8000498 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000488:	2301      	movs	r3, #1
 800048a:	73fb      	strb	r3, [r7, #15]
 800048c:	e004      	b.n	8000498 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800048e:	2301      	movs	r3, #1
 8000490:	73fb      	strb	r3, [r7, #15]
 8000492:	e001      	b.n	8000498 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000494:	2301      	movs	r3, #1
 8000496:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000498:	7bfb      	ldrb	r3, [r7, #15]
}
 800049a:	4618      	mov	r0, r3
 800049c:	3710      	adds	r7, #16
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	20000008 	.word	0x20000008
 80004a8:	20000000 	.word	0x20000000
 80004ac:	20000004 	.word	0x20000004

080004b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80004b4:	4b06      	ldr	r3, [pc, #24]	; (80004d0 <HAL_IncTick+0x20>)
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	461a      	mov	r2, r3
 80004ba:	4b06      	ldr	r3, [pc, #24]	; (80004d4 <HAL_IncTick+0x24>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	4413      	add	r3, r2
 80004c0:	4a04      	ldr	r2, [pc, #16]	; (80004d4 <HAL_IncTick+0x24>)
 80004c2:	6013      	str	r3, [r2, #0]
}
 80004c4:	bf00      	nop
 80004c6:	46bd      	mov	sp, r7
 80004c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
 80004d0:	20000008 	.word	0x20000008
 80004d4:	200001b0 	.word	0x200001b0

080004d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  return uwTick;
 80004dc:	4b03      	ldr	r3, [pc, #12]	; (80004ec <HAL_GetTick+0x14>)
 80004de:	681b      	ldr	r3, [r3, #0]
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	200001b0 	.word	0x200001b0

080004f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b084      	sub	sp, #16
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80004f8:	f7ff ffee 	bl	80004d8 <HAL_GetTick>
 80004fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000508:	d005      	beq.n	8000516 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800050a:	4b0a      	ldr	r3, [pc, #40]	; (8000534 <HAL_Delay+0x44>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	461a      	mov	r2, r3
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	4413      	add	r3, r2
 8000514:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000516:	bf00      	nop
 8000518:	f7ff ffde 	bl	80004d8 <HAL_GetTick>
 800051c:	4602      	mov	r2, r0
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	1ad3      	subs	r3, r2, r3
 8000522:	68fa      	ldr	r2, [r7, #12]
 8000524:	429a      	cmp	r2, r3
 8000526:	d8f7      	bhi.n	8000518 <HAL_Delay+0x28>
  {
  }
}
 8000528:	bf00      	nop
 800052a:	bf00      	nop
 800052c:	3710      	adds	r7, #16
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	20000008 	.word	0x20000008

08000538 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000538:	b480      	push	{r7}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	f003 0307 	and.w	r3, r3, #7
 8000546:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000548:	4b0c      	ldr	r3, [pc, #48]	; (800057c <__NVIC_SetPriorityGrouping+0x44>)
 800054a:	68db      	ldr	r3, [r3, #12]
 800054c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800054e:	68ba      	ldr	r2, [r7, #8]
 8000550:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000554:	4013      	ands	r3, r2
 8000556:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800055c:	68bb      	ldr	r3, [r7, #8]
 800055e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000560:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000564:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000568:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800056a:	4a04      	ldr	r2, [pc, #16]	; (800057c <__NVIC_SetPriorityGrouping+0x44>)
 800056c:	68bb      	ldr	r3, [r7, #8]
 800056e:	60d3      	str	r3, [r2, #12]
}
 8000570:	bf00      	nop
 8000572:	3714      	adds	r7, #20
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr
 800057c:	e000ed00 	.word	0xe000ed00

08000580 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000584:	4b04      	ldr	r3, [pc, #16]	; (8000598 <__NVIC_GetPriorityGrouping+0x18>)
 8000586:	68db      	ldr	r3, [r3, #12]
 8000588:	0a1b      	lsrs	r3, r3, #8
 800058a:	f003 0307 	and.w	r3, r3, #7
}
 800058e:	4618      	mov	r0, r3
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr
 8000598:	e000ed00 	.word	0xe000ed00

0800059c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	db0b      	blt.n	80005c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	f003 021f 	and.w	r2, r3, #31
 80005b4:	4907      	ldr	r1, [pc, #28]	; (80005d4 <__NVIC_EnableIRQ+0x38>)
 80005b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ba:	095b      	lsrs	r3, r3, #5
 80005bc:	2001      	movs	r0, #1
 80005be:	fa00 f202 	lsl.w	r2, r0, r2
 80005c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80005c6:	bf00      	nop
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	e000e100 	.word	0xe000e100

080005d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	6039      	str	r1, [r7, #0]
 80005e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	db0a      	blt.n	8000602 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	b2da      	uxtb	r2, r3
 80005f0:	490c      	ldr	r1, [pc, #48]	; (8000624 <__NVIC_SetPriority+0x4c>)
 80005f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005f6:	0112      	lsls	r2, r2, #4
 80005f8:	b2d2      	uxtb	r2, r2
 80005fa:	440b      	add	r3, r1
 80005fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000600:	e00a      	b.n	8000618 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	b2da      	uxtb	r2, r3
 8000606:	4908      	ldr	r1, [pc, #32]	; (8000628 <__NVIC_SetPriority+0x50>)
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	f003 030f 	and.w	r3, r3, #15
 800060e:	3b04      	subs	r3, #4
 8000610:	0112      	lsls	r2, r2, #4
 8000612:	b2d2      	uxtb	r2, r2
 8000614:	440b      	add	r3, r1
 8000616:	761a      	strb	r2, [r3, #24]
}
 8000618:	bf00      	nop
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr
 8000624:	e000e100 	.word	0xe000e100
 8000628:	e000ed00 	.word	0xe000ed00

0800062c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800062c:	b480      	push	{r7}
 800062e:	b089      	sub	sp, #36	; 0x24
 8000630:	af00      	add	r7, sp, #0
 8000632:	60f8      	str	r0, [r7, #12]
 8000634:	60b9      	str	r1, [r7, #8]
 8000636:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	f003 0307 	and.w	r3, r3, #7
 800063e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000640:	69fb      	ldr	r3, [r7, #28]
 8000642:	f1c3 0307 	rsb	r3, r3, #7
 8000646:	2b04      	cmp	r3, #4
 8000648:	bf28      	it	cs
 800064a:	2304      	movcs	r3, #4
 800064c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800064e:	69fb      	ldr	r3, [r7, #28]
 8000650:	3304      	adds	r3, #4
 8000652:	2b06      	cmp	r3, #6
 8000654:	d902      	bls.n	800065c <NVIC_EncodePriority+0x30>
 8000656:	69fb      	ldr	r3, [r7, #28]
 8000658:	3b03      	subs	r3, #3
 800065a:	e000      	b.n	800065e <NVIC_EncodePriority+0x32>
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000660:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000664:	69bb      	ldr	r3, [r7, #24]
 8000666:	fa02 f303 	lsl.w	r3, r2, r3
 800066a:	43da      	mvns	r2, r3
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	401a      	ands	r2, r3
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000674:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	fa01 f303 	lsl.w	r3, r1, r3
 800067e:	43d9      	mvns	r1, r3
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000684:	4313      	orrs	r3, r2
         );
}
 8000686:	4618      	mov	r0, r3
 8000688:	3724      	adds	r7, #36	; 0x24
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
	...

08000694 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	3b01      	subs	r3, #1
 80006a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006a4:	d301      	bcc.n	80006aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006a6:	2301      	movs	r3, #1
 80006a8:	e00f      	b.n	80006ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006aa:	4a0a      	ldr	r2, [pc, #40]	; (80006d4 <SysTick_Config+0x40>)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	3b01      	subs	r3, #1
 80006b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006b2:	210f      	movs	r1, #15
 80006b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006b8:	f7ff ff8e 	bl	80005d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006bc:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <SysTick_Config+0x40>)
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <SysTick_Config+0x40>)
 80006c4:	2207      	movs	r2, #7
 80006c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006c8:	2300      	movs	r3, #0
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	e000e010 	.word	0xe000e010

080006d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006e0:	6878      	ldr	r0, [r7, #4]
 80006e2:	f7ff ff29 	bl	8000538 <__NVIC_SetPriorityGrouping>
}
 80006e6:	bf00      	nop
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}

080006ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006ee:	b580      	push	{r7, lr}
 80006f0:	b086      	sub	sp, #24
 80006f2:	af00      	add	r7, sp, #0
 80006f4:	4603      	mov	r3, r0
 80006f6:	60b9      	str	r1, [r7, #8]
 80006f8:	607a      	str	r2, [r7, #4]
 80006fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000700:	f7ff ff3e 	bl	8000580 <__NVIC_GetPriorityGrouping>
 8000704:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000706:	687a      	ldr	r2, [r7, #4]
 8000708:	68b9      	ldr	r1, [r7, #8]
 800070a:	6978      	ldr	r0, [r7, #20]
 800070c:	f7ff ff8e 	bl	800062c <NVIC_EncodePriority>
 8000710:	4602      	mov	r2, r0
 8000712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000716:	4611      	mov	r1, r2
 8000718:	4618      	mov	r0, r3
 800071a:	f7ff ff5d 	bl	80005d8 <__NVIC_SetPriority>
}
 800071e:	bf00      	nop
 8000720:	3718      	adds	r7, #24
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}

08000726 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000726:	b580      	push	{r7, lr}
 8000728:	b082      	sub	sp, #8
 800072a:	af00      	add	r7, sp, #0
 800072c:	4603      	mov	r3, r0
 800072e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000734:	4618      	mov	r0, r3
 8000736:	f7ff ff31 	bl	800059c <__NVIC_EnableIRQ>
}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}

08000742 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000742:	b580      	push	{r7, lr}
 8000744:	b082      	sub	sp, #8
 8000746:	af00      	add	r7, sp, #0
 8000748:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800074a:	6878      	ldr	r0, [r7, #4]
 800074c:	f7ff ffa2 	bl	8000694 <SysTick_Config>
 8000750:	4603      	mov	r3, r0
}
 8000752:	4618      	mov	r0, r3
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
	...

0800075c <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b086      	sub	sp, #24
 8000760:	af00      	add	r7, sp, #0
 8000762:	60f8      	str	r0, [r7, #12]
 8000764:	60b9      	str	r1, [r7, #8]
 8000766:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800076e:	4b2f      	ldr	r3, [pc, #188]	; (800082c <HAL_FLASH_Program+0xd0>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	2b01      	cmp	r3, #1
 8000774:	d101      	bne.n	800077a <HAL_FLASH_Program+0x1e>
 8000776:	2302      	movs	r3, #2
 8000778:	e053      	b.n	8000822 <HAL_FLASH_Program+0xc6>
 800077a:	4b2c      	ldr	r3, [pc, #176]	; (800082c <HAL_FLASH_Program+0xd0>)
 800077c:	2201      	movs	r2, #1
 800077e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000780:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000784:	f000 f888 	bl	8000898 <FLASH_WaitForLastOperation>
 8000788:	4603      	mov	r3, r0
 800078a:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 800078c:	7dfb      	ldrb	r3, [r7, #23]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d143      	bne.n	800081a <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000792:	4b26      	ldr	r3, [pc, #152]	; (800082c <HAL_FLASH_Program+0xd0>)
 8000794:	2200      	movs	r2, #0
 8000796:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8000798:	4b25      	ldr	r3, [pc, #148]	; (8000830 <HAL_FLASH_Program+0xd4>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d009      	beq.n	80007b8 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80007a4:	4b22      	ldr	r3, [pc, #136]	; (8000830 <HAL_FLASH_Program+0xd4>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a21      	ldr	r2, [pc, #132]	; (8000830 <HAL_FLASH_Program+0xd4>)
 80007aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80007ae:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80007b0:	4b1e      	ldr	r3, [pc, #120]	; (800082c <HAL_FLASH_Program+0xd0>)
 80007b2:	2202      	movs	r2, #2
 80007b4:	771a      	strb	r2, [r3, #28]
 80007b6:	e002      	b.n	80007be <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80007b8:	4b1c      	ldr	r3, [pc, #112]	; (800082c <HAL_FLASH_Program+0xd0>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d107      	bne.n	80007d4 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80007c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80007c8:	68b8      	ldr	r0, [r7, #8]
 80007ca:	f000 f8bb 	bl	8000944 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 80007ce:	2301      	movs	r3, #1
 80007d0:	613b      	str	r3, [r7, #16]
 80007d2:	e010      	b.n	80007f6 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d002      	beq.n	80007e0 <HAL_FLASH_Program+0x84>
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	2b02      	cmp	r3, #2
 80007de:	d10a      	bne.n	80007f6 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	4619      	mov	r1, r3
 80007e4:	68b8      	ldr	r0, [r7, #8]
 80007e6:	f000 f8d3 	bl	8000990 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	2b02      	cmp	r3, #2
 80007ee:	d102      	bne.n	80007f6 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 80007f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80007f4:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80007f6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80007fa:	f000 f84d 	bl	8000898 <FLASH_WaitForLastOperation>
 80007fe:	4603      	mov	r3, r0
 8000800:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8000802:	693b      	ldr	r3, [r7, #16]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d006      	beq.n	8000816 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8000808:	4b09      	ldr	r3, [pc, #36]	; (8000830 <HAL_FLASH_Program+0xd4>)
 800080a:	695a      	ldr	r2, [r3, #20]
 800080c:	693b      	ldr	r3, [r7, #16]
 800080e:	43db      	mvns	r3, r3
 8000810:	4907      	ldr	r1, [pc, #28]	; (8000830 <HAL_FLASH_Program+0xd4>)
 8000812:	4013      	ands	r3, r2
 8000814:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8000816:	f000 f9eb 	bl	8000bf0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800081a:	4b04      	ldr	r3, [pc, #16]	; (800082c <HAL_FLASH_Program+0xd0>)
 800081c:	2200      	movs	r2, #0
 800081e:	701a      	strb	r2, [r3, #0]

  return status;
 8000820:	7dfb      	ldrb	r3, [r7, #23]
}
 8000822:	4618      	mov	r0, r3
 8000824:	3718      	adds	r7, #24
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	2000000c 	.word	0x2000000c
 8000830:	40022000 	.word	0x40022000

08000834 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800083a:	2300      	movs	r3, #0
 800083c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800083e:	4b0b      	ldr	r3, [pc, #44]	; (800086c <HAL_FLASH_Unlock+0x38>)
 8000840:	695b      	ldr	r3, [r3, #20]
 8000842:	2b00      	cmp	r3, #0
 8000844:	da0b      	bge.n	800085e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000846:	4b09      	ldr	r3, [pc, #36]	; (800086c <HAL_FLASH_Unlock+0x38>)
 8000848:	4a09      	ldr	r2, [pc, #36]	; (8000870 <HAL_FLASH_Unlock+0x3c>)
 800084a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800084c:	4b07      	ldr	r3, [pc, #28]	; (800086c <HAL_FLASH_Unlock+0x38>)
 800084e:	4a09      	ldr	r2, [pc, #36]	; (8000874 <HAL_FLASH_Unlock+0x40>)
 8000850:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <HAL_FLASH_Unlock+0x38>)
 8000854:	695b      	ldr	r3, [r3, #20]
 8000856:	2b00      	cmp	r3, #0
 8000858:	da01      	bge.n	800085e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800085a:	2301      	movs	r3, #1
 800085c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800085e:	79fb      	ldrb	r3, [r7, #7]
}
 8000860:	4618      	mov	r0, r3
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr
 800086c:	40022000 	.word	0x40022000
 8000870:	45670123 	.word	0x45670123
 8000874:	cdef89ab 	.word	0xcdef89ab

08000878 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800087c:	4b05      	ldr	r3, [pc, #20]	; (8000894 <HAL_FLASH_Lock+0x1c>)
 800087e:	695b      	ldr	r3, [r3, #20]
 8000880:	4a04      	ldr	r2, [pc, #16]	; (8000894 <HAL_FLASH_Lock+0x1c>)
 8000882:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000886:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8000888:	2300      	movs	r3, #0
}
 800088a:	4618      	mov	r0, r3
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	40022000 	.word	0x40022000

08000898 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80008a0:	f7ff fe1a 	bl	80004d8 <HAL_GetTick>
 80008a4:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80008a6:	e00d      	b.n	80008c4 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80008ae:	d009      	beq.n	80008c4 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 80008b0:	f7ff fe12 	bl	80004d8 <HAL_GetTick>
 80008b4:	4602      	mov	r2, r0
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	1ad3      	subs	r3, r2, r3
 80008ba:	687a      	ldr	r2, [r7, #4]
 80008bc:	429a      	cmp	r2, r3
 80008be:	d801      	bhi.n	80008c4 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 80008c0:	2303      	movs	r3, #3
 80008c2:	e037      	b.n	8000934 <FLASH_WaitForLastOperation+0x9c>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80008c4:	4b1d      	ldr	r3, [pc, #116]	; (800093c <FLASH_WaitForLastOperation+0xa4>)
 80008c6:	691b      	ldr	r3, [r3, #16]
 80008c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d1eb      	bne.n	80008a8 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80008d0:	4b1a      	ldr	r3, [pc, #104]	; (800093c <FLASH_WaitForLastOperation+0xa4>)
 80008d2:	691a      	ldr	r2, [r3, #16]
 80008d4:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 80008d8:	4013      	ands	r3, r2
 80008da:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d01e      	beq.n	8000920 <FLASH_WaitForLastOperation+0x88>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 80008e2:	4b17      	ldr	r3, [pc, #92]	; (8000940 <FLASH_WaitForLastOperation+0xa8>)
 80008e4:	685a      	ldr	r2, [r3, #4]
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	4313      	orrs	r3, r2
 80008ea:	4a15      	ldr	r2, [pc, #84]	; (8000940 <FLASH_WaitForLastOperation+0xa8>)
 80008ec:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d007      	beq.n	8000908 <FLASH_WaitForLastOperation+0x70>
 80008f8:	4b10      	ldr	r3, [pc, #64]	; (800093c <FLASH_WaitForLastOperation+0xa4>)
 80008fa:	699a      	ldr	r2, [r3, #24]
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8000902:	490e      	ldr	r1, [pc, #56]	; (800093c <FLASH_WaitForLastOperation+0xa4>)
 8000904:	4313      	orrs	r3, r2
 8000906:	618b      	str	r3, [r1, #24]
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800090e:	2b00      	cmp	r3, #0
 8000910:	d004      	beq.n	800091c <FLASH_WaitForLastOperation+0x84>
 8000912:	4a0a      	ldr	r2, [pc, #40]	; (800093c <FLASH_WaitForLastOperation+0xa4>)
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800091a:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 800091c:	2301      	movs	r3, #1
 800091e:	e009      	b.n	8000934 <FLASH_WaitForLastOperation+0x9c>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000920:	4b06      	ldr	r3, [pc, #24]	; (800093c <FLASH_WaitForLastOperation+0xa4>)
 8000922:	691b      	ldr	r3, [r3, #16]
 8000924:	f003 0301 	and.w	r3, r3, #1
 8000928:	2b00      	cmp	r3, #0
 800092a:	d002      	beq.n	8000932 <FLASH_WaitForLastOperation+0x9a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800092c:	4b03      	ldr	r3, [pc, #12]	; (800093c <FLASH_WaitForLastOperation+0xa4>)
 800092e:	2201      	movs	r2, #1
 8000930:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8000932:	2300      	movs	r3, #0
}
 8000934:	4618      	mov	r0, r3
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40022000 	.word	0x40022000
 8000940:	2000000c 	.word	0x2000000c

08000944 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8000944:	b480      	push	{r7}
 8000946:	b085      	sub	sp, #20
 8000948:	af00      	add	r7, sp, #0
 800094a:	60f8      	str	r0, [r7, #12]
 800094c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000950:	4b0e      	ldr	r3, [pc, #56]	; (800098c <FLASH_Program_DoubleWord+0x48>)
 8000952:	695b      	ldr	r3, [r3, #20]
 8000954:	4a0d      	ldr	r2, [pc, #52]	; (800098c <FLASH_Program_DoubleWord+0x48>)
 8000956:	f043 0301 	orr.w	r3, r3, #1
 800095a:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	683a      	ldr	r2, [r7, #0]
 8000960:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8000962:	f3bf 8f6f 	isb	sy
}
 8000966:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8000968:	e9d7 0100 	ldrd	r0, r1, [r7]
 800096c:	f04f 0200 	mov.w	r2, #0
 8000970:	f04f 0300 	mov.w	r3, #0
 8000974:	000a      	movs	r2, r1
 8000976:	2300      	movs	r3, #0
 8000978:	68f9      	ldr	r1, [r7, #12]
 800097a:	3104      	adds	r1, #4
 800097c:	4613      	mov	r3, r2
 800097e:	600b      	str	r3, [r1, #0]
}
 8000980:	bf00      	nop
 8000982:	3714      	adds	r7, #20
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr
 800098c:	40022000 	.word	0x40022000

08000990 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8000990:	b480      	push	{r7}
 8000992:	b089      	sub	sp, #36	; 0x24
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800099a:	2340      	movs	r3, #64	; 0x40
 800099c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80009a6:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <FLASH_Program_Fast+0x68>)
 80009a8:	695b      	ldr	r3, [r3, #20]
 80009aa:	4a13      	ldr	r2, [pc, #76]	; (80009f8 <FLASH_Program_Fast+0x68>)
 80009ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009b0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80009b2:	f3ef 8310 	mrs	r3, PRIMASK
 80009b6:	60fb      	str	r3, [r7, #12]
  return(result);
 80009b8:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80009ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80009bc:	b672      	cpsid	i
}
 80009be:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	69bb      	ldr	r3, [r7, #24]
 80009c6:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80009c8:	69bb      	ldr	r3, [r7, #24]
 80009ca:	3304      	adds	r3, #4
 80009cc:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	3304      	adds	r3, #4
 80009d2:	617b      	str	r3, [r7, #20]
    row_index--;
 80009d4:	7ffb      	ldrb	r3, [r7, #31]
 80009d6:	3b01      	subs	r3, #1
 80009d8:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 80009da:	7ffb      	ldrb	r3, [r7, #31]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d1ef      	bne.n	80009c0 <FLASH_Program_Fast+0x30>
 80009e0:	693b      	ldr	r3, [r7, #16]
 80009e2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	f383 8810 	msr	PRIMASK, r3
}
 80009ea:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 80009ec:	bf00      	nop
 80009ee:	3724      	adds	r7, #36	; 0x24
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	40022000 	.word	0x40022000

080009fc <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
 8000a04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000a06:	4b49      	ldr	r3, [pc, #292]	; (8000b2c <HAL_FLASHEx_Erase+0x130>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	2b01      	cmp	r3, #1
 8000a0c:	d101      	bne.n	8000a12 <HAL_FLASHEx_Erase+0x16>
 8000a0e:	2302      	movs	r3, #2
 8000a10:	e087      	b.n	8000b22 <HAL_FLASHEx_Erase+0x126>
 8000a12:	4b46      	ldr	r3, [pc, #280]	; (8000b2c <HAL_FLASHEx_Erase+0x130>)
 8000a14:	2201      	movs	r2, #1
 8000a16:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000a18:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000a1c:	f7ff ff3c 	bl	8000898 <FLASH_WaitForLastOperation>
 8000a20:	4603      	mov	r3, r0
 8000a22:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8000a24:	7bfb      	ldrb	r3, [r7, #15]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d177      	bne.n	8000b1a <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000a2a:	4b40      	ldr	r3, [pc, #256]	; (8000b2c <HAL_FLASHEx_Erase+0x130>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8000a30:	4b3f      	ldr	r3, [pc, #252]	; (8000b30 <HAL_FLASHEx_Erase+0x134>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d013      	beq.n	8000a64 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8000a3c:	4b3c      	ldr	r3, [pc, #240]	; (8000b30 <HAL_FLASHEx_Erase+0x134>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d009      	beq.n	8000a5c <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8000a48:	4b39      	ldr	r3, [pc, #228]	; (8000b30 <HAL_FLASHEx_Erase+0x134>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a38      	ldr	r2, [pc, #224]	; (8000b30 <HAL_FLASHEx_Erase+0x134>)
 8000a4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000a52:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8000a54:	4b35      	ldr	r3, [pc, #212]	; (8000b2c <HAL_FLASHEx_Erase+0x130>)
 8000a56:	2203      	movs	r2, #3
 8000a58:	771a      	strb	r2, [r3, #28]
 8000a5a:	e016      	b.n	8000a8a <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8000a5c:	4b33      	ldr	r3, [pc, #204]	; (8000b2c <HAL_FLASHEx_Erase+0x130>)
 8000a5e:	2201      	movs	r2, #1
 8000a60:	771a      	strb	r2, [r3, #28]
 8000a62:	e012      	b.n	8000a8a <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8000a64:	4b32      	ldr	r3, [pc, #200]	; (8000b30 <HAL_FLASHEx_Erase+0x134>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d009      	beq.n	8000a84 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8000a70:	4b2f      	ldr	r3, [pc, #188]	; (8000b30 <HAL_FLASHEx_Erase+0x134>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a2e      	ldr	r2, [pc, #184]	; (8000b30 <HAL_FLASHEx_Erase+0x134>)
 8000a76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000a7a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8000a7c:	4b2b      	ldr	r3, [pc, #172]	; (8000b2c <HAL_FLASHEx_Erase+0x130>)
 8000a7e:	2202      	movs	r2, #2
 8000a80:	771a      	strb	r2, [r3, #28]
 8000a82:	e002      	b.n	8000a8a <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8000a84:	4b29      	ldr	r3, [pc, #164]	; (8000b2c <HAL_FLASHEx_Erase+0x130>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d113      	bne.n	8000aba <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	4618      	mov	r0, r3
 8000a98:	f000 f84c 	bl	8000b34 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000a9c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000aa0:	f7ff fefa 	bl	8000898 <FLASH_WaitForLastOperation>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8000aa8:	4b21      	ldr	r3, [pc, #132]	; (8000b30 <HAL_FLASHEx_Erase+0x134>)
 8000aaa:	695b      	ldr	r3, [r3, #20]
 8000aac:	4a20      	ldr	r2, [pc, #128]	; (8000b30 <HAL_FLASHEx_Erase+0x134>)
 8000aae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000ab2:	f023 0304 	bic.w	r3, r3, #4
 8000ab6:	6153      	str	r3, [r2, #20]
 8000ab8:	e02d      	b.n	8000b16 <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ac0:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	689b      	ldr	r3, [r3, #8]
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	e01d      	b.n	8000b06 <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	4619      	mov	r1, r3
 8000ad0:	68b8      	ldr	r0, [r7, #8]
 8000ad2:	f000 f857 	bl	8000b84 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000ad6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000ada:	f7ff fedd 	bl	8000898 <FLASH_WaitForLastOperation>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8000ae2:	4b13      	ldr	r3, [pc, #76]	; (8000b30 <HAL_FLASHEx_Erase+0x134>)
 8000ae4:	695b      	ldr	r3, [r3, #20]
 8000ae6:	4a12      	ldr	r2, [pc, #72]	; (8000b30 <HAL_FLASHEx_Erase+0x134>)
 8000ae8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000aec:	f023 0302 	bic.w	r3, r3, #2
 8000af0:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8000af2:	7bfb      	ldrb	r3, [r7, #15]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d003      	beq.n	8000b00 <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	68ba      	ldr	r2, [r7, #8]
 8000afc:	601a      	str	r2, [r3, #0]
          break;
 8000afe:	e00a      	b.n	8000b16 <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	3301      	adds	r3, #1
 8000b04:	60bb      	str	r3, [r7, #8]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	689a      	ldr	r2, [r3, #8]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	68db      	ldr	r3, [r3, #12]
 8000b0e:	4413      	add	r3, r2
 8000b10:	68ba      	ldr	r2, [r7, #8]
 8000b12:	429a      	cmp	r2, r3
 8000b14:	d3d9      	bcc.n	8000aca <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8000b16:	f000 f86b 	bl	8000bf0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000b1a:	4b04      	ldr	r3, [pc, #16]	; (8000b2c <HAL_FLASHEx_Erase+0x130>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	701a      	strb	r2, [r3, #0]

  return status;
 8000b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3710      	adds	r7, #16
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	2000000c 	.word	0x2000000c
 8000b30:	40022000 	.word	0x40022000

08000b34 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d005      	beq.n	8000b52 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8000b46:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <FLASH_MassErase+0x4c>)
 8000b48:	695b      	ldr	r3, [r3, #20]
 8000b4a:	4a0d      	ldr	r2, [pc, #52]	; (8000b80 <FLASH_MassErase+0x4c>)
 8000b4c:	f043 0304 	orr.w	r3, r3, #4
 8000b50:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	f003 0302 	and.w	r3, r3, #2
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d005      	beq.n	8000b68 <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8000b5c:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <FLASH_MassErase+0x4c>)
 8000b5e:	695b      	ldr	r3, [r3, #20]
 8000b60:	4a07      	ldr	r2, [pc, #28]	; (8000b80 <FLASH_MassErase+0x4c>)
 8000b62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b66:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000b68:	4b05      	ldr	r3, [pc, #20]	; (8000b80 <FLASH_MassErase+0x4c>)
 8000b6a:	695b      	ldr	r3, [r3, #20]
 8000b6c:	4a04      	ldr	r2, [pc, #16]	; (8000b80 <FLASH_MassErase+0x4c>)
 8000b6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b72:	6153      	str	r3, [r2, #20]
}
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	40022000 	.word	0x40022000

08000b84 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	f003 0301 	and.w	r3, r3, #1
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d006      	beq.n	8000ba6 <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8000b98:	4b14      	ldr	r3, [pc, #80]	; (8000bec <FLASH_PageErase+0x68>)
 8000b9a:	695b      	ldr	r3, [r3, #20]
 8000b9c:	4a13      	ldr	r2, [pc, #76]	; (8000bec <FLASH_PageErase+0x68>)
 8000b9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000ba2:	6153      	str	r3, [r2, #20]
 8000ba4:	e005      	b.n	8000bb2 <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8000ba6:	4b11      	ldr	r3, [pc, #68]	; (8000bec <FLASH_PageErase+0x68>)
 8000ba8:	695b      	ldr	r3, [r3, #20]
 8000baa:	4a10      	ldr	r2, [pc, #64]	; (8000bec <FLASH_PageErase+0x68>)
 8000bac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bb0:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <FLASH_PageErase+0x68>)
 8000bb4:	695b      	ldr	r3, [r3, #20]
 8000bb6:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	00db      	lsls	r3, r3, #3
 8000bbe:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8000bc2:	490a      	ldr	r1, [pc, #40]	; (8000bec <FLASH_PageErase+0x68>)
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000bc8:	4b08      	ldr	r3, [pc, #32]	; (8000bec <FLASH_PageErase+0x68>)
 8000bca:	695b      	ldr	r3, [r3, #20]
 8000bcc:	4a07      	ldr	r2, [pc, #28]	; (8000bec <FLASH_PageErase+0x68>)
 8000bce:	f043 0302 	orr.w	r3, r3, #2
 8000bd2:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000bd4:	4b05      	ldr	r3, [pc, #20]	; (8000bec <FLASH_PageErase+0x68>)
 8000bd6:	695b      	ldr	r3, [r3, #20]
 8000bd8:	4a04      	ldr	r2, [pc, #16]	; (8000bec <FLASH_PageErase+0x68>)
 8000bda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bde:	6153      	str	r3, [r2, #20]
}
 8000be0:	bf00      	nop
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	40022000 	.word	0x40022000

08000bf0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8000bf6:	4b21      	ldr	r3, [pc, #132]	; (8000c7c <FLASH_FlushCaches+0x8c>)
 8000bf8:	7f1b      	ldrb	r3, [r3, #28]
 8000bfa:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d002      	beq.n	8000c08 <FLASH_FlushCaches+0x18>
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	2b03      	cmp	r3, #3
 8000c06:	d117      	bne.n	8000c38 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8000c08:	4b1d      	ldr	r3, [pc, #116]	; (8000c80 <FLASH_FlushCaches+0x90>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a1c      	ldr	r2, [pc, #112]	; (8000c80 <FLASH_FlushCaches+0x90>)
 8000c0e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000c12:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8000c14:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <FLASH_FlushCaches+0x90>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a19      	ldr	r2, [pc, #100]	; (8000c80 <FLASH_FlushCaches+0x90>)
 8000c1a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c1e:	6013      	str	r3, [r2, #0]
 8000c20:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <FLASH_FlushCaches+0x90>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a16      	ldr	r2, [pc, #88]	; (8000c80 <FLASH_FlushCaches+0x90>)
 8000c26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000c2a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c2c:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <FLASH_FlushCaches+0x90>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a13      	ldr	r2, [pc, #76]	; (8000c80 <FLASH_FlushCaches+0x90>)
 8000c32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c36:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	2b02      	cmp	r3, #2
 8000c3c:	d002      	beq.n	8000c44 <FLASH_FlushCaches+0x54>
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	2b03      	cmp	r3, #3
 8000c42:	d111      	bne.n	8000c68 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8000c44:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <FLASH_FlushCaches+0x90>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a0d      	ldr	r2, [pc, #52]	; (8000c80 <FLASH_FlushCaches+0x90>)
 8000c4a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c4e:	6013      	str	r3, [r2, #0]
 8000c50:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <FLASH_FlushCaches+0x90>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a0a      	ldr	r2, [pc, #40]	; (8000c80 <FLASH_FlushCaches+0x90>)
 8000c56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000c5a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c5c:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <FLASH_FlushCaches+0x90>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a07      	ldr	r2, [pc, #28]	; (8000c80 <FLASH_FlushCaches+0x90>)
 8000c62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c66:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8000c68:	4b04      	ldr	r3, [pc, #16]	; (8000c7c <FLASH_FlushCaches+0x8c>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	771a      	strb	r2, [r3, #28]
}
 8000c6e:	bf00      	nop
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	2000000c 	.word	0x2000000c
 8000c80:	40022000 	.word	0x40022000

08000c84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b087      	sub	sp, #28
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c92:	e17f      	b.n	8000f94 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	2101      	movs	r1, #1
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	f000 8171 	beq.w	8000f8e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f003 0303 	and.w	r3, r3, #3
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d005      	beq.n	8000cc4 <HAL_GPIO_Init+0x40>
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f003 0303 	and.w	r3, r3, #3
 8000cc0:	2b02      	cmp	r3, #2
 8000cc2:	d130      	bne.n	8000d26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	689b      	ldr	r3, [r3, #8]
 8000cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	2203      	movs	r2, #3
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	43db      	mvns	r3, r3
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	4013      	ands	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	68da      	ldr	r2, [r3, #12]
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	693a      	ldr	r2, [r7, #16]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	43db      	mvns	r3, r3
 8000d04:	693a      	ldr	r2, [r7, #16]
 8000d06:	4013      	ands	r3, r2
 8000d08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	091b      	lsrs	r3, r3, #4
 8000d10:	f003 0201 	and.w	r2, r3, #1
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	f003 0303 	and.w	r3, r3, #3
 8000d2e:	2b03      	cmp	r3, #3
 8000d30:	d118      	bne.n	8000d64 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000d38:	2201      	movs	r2, #1
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	43db      	mvns	r3, r3
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	4013      	ands	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	08db      	lsrs	r3, r3, #3
 8000d4e:	f003 0201 	and.w	r2, r3, #1
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f003 0303 	and.w	r3, r3, #3
 8000d6c:	2b03      	cmp	r3, #3
 8000d6e:	d017      	beq.n	8000da0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	2203      	movs	r2, #3
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	43db      	mvns	r3, r3
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	4013      	ands	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	689a      	ldr	r2, [r3, #8]
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f003 0303 	and.w	r3, r3, #3
 8000da8:	2b02      	cmp	r3, #2
 8000daa:	d123      	bne.n	8000df4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	08da      	lsrs	r2, r3, #3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	3208      	adds	r2, #8
 8000db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000db8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	f003 0307 	and.w	r3, r3, #7
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	220f      	movs	r2, #15
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	691a      	ldr	r2, [r3, #16]
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	f003 0307 	and.w	r3, r3, #7
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	08da      	lsrs	r2, r3, #3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	3208      	adds	r2, #8
 8000dee:	6939      	ldr	r1, [r7, #16]
 8000df0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	2203      	movs	r2, #3
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	43db      	mvns	r3, r3
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f003 0203 	and.w	r2, r3, #3
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	f000 80ac 	beq.w	8000f8e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e36:	4b5f      	ldr	r3, [pc, #380]	; (8000fb4 <HAL_GPIO_Init+0x330>)
 8000e38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e3a:	4a5e      	ldr	r2, [pc, #376]	; (8000fb4 <HAL_GPIO_Init+0x330>)
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	6613      	str	r3, [r2, #96]	; 0x60
 8000e42:	4b5c      	ldr	r3, [pc, #368]	; (8000fb4 <HAL_GPIO_Init+0x330>)
 8000e44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	60bb      	str	r3, [r7, #8]
 8000e4c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e4e:	4a5a      	ldr	r2, [pc, #360]	; (8000fb8 <HAL_GPIO_Init+0x334>)
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	089b      	lsrs	r3, r3, #2
 8000e54:	3302      	adds	r3, #2
 8000e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	f003 0303 	and.w	r3, r3, #3
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	220f      	movs	r2, #15
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e78:	d025      	beq.n	8000ec6 <HAL_GPIO_Init+0x242>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a4f      	ldr	r2, [pc, #316]	; (8000fbc <HAL_GPIO_Init+0x338>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d01f      	beq.n	8000ec2 <HAL_GPIO_Init+0x23e>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a4e      	ldr	r2, [pc, #312]	; (8000fc0 <HAL_GPIO_Init+0x33c>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d019      	beq.n	8000ebe <HAL_GPIO_Init+0x23a>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a4d      	ldr	r2, [pc, #308]	; (8000fc4 <HAL_GPIO_Init+0x340>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d013      	beq.n	8000eba <HAL_GPIO_Init+0x236>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a4c      	ldr	r2, [pc, #304]	; (8000fc8 <HAL_GPIO_Init+0x344>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d00d      	beq.n	8000eb6 <HAL_GPIO_Init+0x232>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a4b      	ldr	r2, [pc, #300]	; (8000fcc <HAL_GPIO_Init+0x348>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d007      	beq.n	8000eb2 <HAL_GPIO_Init+0x22e>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a4a      	ldr	r2, [pc, #296]	; (8000fd0 <HAL_GPIO_Init+0x34c>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d101      	bne.n	8000eae <HAL_GPIO_Init+0x22a>
 8000eaa:	2306      	movs	r3, #6
 8000eac:	e00c      	b.n	8000ec8 <HAL_GPIO_Init+0x244>
 8000eae:	2307      	movs	r3, #7
 8000eb0:	e00a      	b.n	8000ec8 <HAL_GPIO_Init+0x244>
 8000eb2:	2305      	movs	r3, #5
 8000eb4:	e008      	b.n	8000ec8 <HAL_GPIO_Init+0x244>
 8000eb6:	2304      	movs	r3, #4
 8000eb8:	e006      	b.n	8000ec8 <HAL_GPIO_Init+0x244>
 8000eba:	2303      	movs	r3, #3
 8000ebc:	e004      	b.n	8000ec8 <HAL_GPIO_Init+0x244>
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	e002      	b.n	8000ec8 <HAL_GPIO_Init+0x244>
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e000      	b.n	8000ec8 <HAL_GPIO_Init+0x244>
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	697a      	ldr	r2, [r7, #20]
 8000eca:	f002 0203 	and.w	r2, r2, #3
 8000ece:	0092      	lsls	r2, r2, #2
 8000ed0:	4093      	lsls	r3, r2
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ed8:	4937      	ldr	r1, [pc, #220]	; (8000fb8 <HAL_GPIO_Init+0x334>)
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	089b      	lsrs	r3, r3, #2
 8000ede:	3302      	adds	r3, #2
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ee6:	4b3b      	ldr	r3, [pc, #236]	; (8000fd4 <HAL_GPIO_Init+0x350>)
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d003      	beq.n	8000f0a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f0a:	4a32      	ldr	r2, [pc, #200]	; (8000fd4 <HAL_GPIO_Init+0x350>)
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f10:	4b30      	ldr	r3, [pc, #192]	; (8000fd4 <HAL_GPIO_Init+0x350>)
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d003      	beq.n	8000f34 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f34:	4a27      	ldr	r2, [pc, #156]	; (8000fd4 <HAL_GPIO_Init+0x350>)
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f3a:	4b26      	ldr	r3, [pc, #152]	; (8000fd4 <HAL_GPIO_Init+0x350>)
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	43db      	mvns	r3, r3
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	4013      	ands	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d003      	beq.n	8000f5e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f5e:	4a1d      	ldr	r2, [pc, #116]	; (8000fd4 <HAL_GPIO_Init+0x350>)
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000f64:	4b1b      	ldr	r3, [pc, #108]	; (8000fd4 <HAL_GPIO_Init+0x350>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	4013      	ands	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d003      	beq.n	8000f88 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f88:	4a12      	ldr	r2, [pc, #72]	; (8000fd4 <HAL_GPIO_Init+0x350>)
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	3301      	adds	r3, #1
 8000f92:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	f47f ae78 	bne.w	8000c94 <HAL_GPIO_Init+0x10>
  }
}
 8000fa4:	bf00      	nop
 8000fa6:	bf00      	nop
 8000fa8:	371c      	adds	r7, #28
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	40010000 	.word	0x40010000
 8000fbc:	48000400 	.word	0x48000400
 8000fc0:	48000800 	.word	0x48000800
 8000fc4:	48000c00 	.word	0x48000c00
 8000fc8:	48001000 	.word	0x48001000
 8000fcc:	48001400 	.word	0x48001400
 8000fd0:	48001800 	.word	0x48001800
 8000fd4:	40010400 	.word	0x40010400

08000fd8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fda:	b08f      	sub	sp, #60	; 0x3c
 8000fdc:	af0a      	add	r7, sp, #40	; 0x28
 8000fde:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d101      	bne.n	8000fea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e116      	b.n	8001218 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d106      	bne.n	800100a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2200      	movs	r2, #0
 8001000:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f007 fa1d 	bl	8008444 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2203      	movs	r2, #3
 800100e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800101a:	2b00      	cmp	r3, #0
 800101c:	d102      	bne.n	8001024 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2200      	movs	r2, #0
 8001022:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4618      	mov	r0, r3
 800102a:	f002 fd9e 	bl	8003b6a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	603b      	str	r3, [r7, #0]
 8001034:	687e      	ldr	r6, [r7, #4]
 8001036:	466d      	mov	r5, sp
 8001038:	f106 0410 	add.w	r4, r6, #16
 800103c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800103e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001040:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001042:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001044:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001048:	e885 0003 	stmia.w	r5, {r0, r1}
 800104c:	1d33      	adds	r3, r6, #4
 800104e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001050:	6838      	ldr	r0, [r7, #0]
 8001052:	f002 fcb1 	bl	80039b8 <USB_CoreInit>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d005      	beq.n	8001068 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2202      	movs	r2, #2
 8001060:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	e0d7      	b.n	8001218 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2100      	movs	r1, #0
 800106e:	4618      	mov	r0, r3
 8001070:	f002 fd8c 	bl	8003b8c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001074:	2300      	movs	r3, #0
 8001076:	73fb      	strb	r3, [r7, #15]
 8001078:	e04a      	b.n	8001110 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800107a:	7bfa      	ldrb	r2, [r7, #15]
 800107c:	6879      	ldr	r1, [r7, #4]
 800107e:	4613      	mov	r3, r2
 8001080:	00db      	lsls	r3, r3, #3
 8001082:	4413      	add	r3, r2
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	440b      	add	r3, r1
 8001088:	333d      	adds	r3, #61	; 0x3d
 800108a:	2201      	movs	r2, #1
 800108c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800108e:	7bfa      	ldrb	r2, [r7, #15]
 8001090:	6879      	ldr	r1, [r7, #4]
 8001092:	4613      	mov	r3, r2
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	4413      	add	r3, r2
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	440b      	add	r3, r1
 800109c:	333c      	adds	r3, #60	; 0x3c
 800109e:	7bfa      	ldrb	r2, [r7, #15]
 80010a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80010a2:	7bfa      	ldrb	r2, [r7, #15]
 80010a4:	7bfb      	ldrb	r3, [r7, #15]
 80010a6:	b298      	uxth	r0, r3
 80010a8:	6879      	ldr	r1, [r7, #4]
 80010aa:	4613      	mov	r3, r2
 80010ac:	00db      	lsls	r3, r3, #3
 80010ae:	4413      	add	r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	440b      	add	r3, r1
 80010b4:	3344      	adds	r3, #68	; 0x44
 80010b6:	4602      	mov	r2, r0
 80010b8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80010ba:	7bfa      	ldrb	r2, [r7, #15]
 80010bc:	6879      	ldr	r1, [r7, #4]
 80010be:	4613      	mov	r3, r2
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	4413      	add	r3, r2
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	440b      	add	r3, r1
 80010c8:	3340      	adds	r3, #64	; 0x40
 80010ca:	2200      	movs	r2, #0
 80010cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80010ce:	7bfa      	ldrb	r2, [r7, #15]
 80010d0:	6879      	ldr	r1, [r7, #4]
 80010d2:	4613      	mov	r3, r2
 80010d4:	00db      	lsls	r3, r3, #3
 80010d6:	4413      	add	r3, r2
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	440b      	add	r3, r1
 80010dc:	3348      	adds	r3, #72	; 0x48
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80010e2:	7bfa      	ldrb	r2, [r7, #15]
 80010e4:	6879      	ldr	r1, [r7, #4]
 80010e6:	4613      	mov	r3, r2
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	4413      	add	r3, r2
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	440b      	add	r3, r1
 80010f0:	334c      	adds	r3, #76	; 0x4c
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80010f6:	7bfa      	ldrb	r2, [r7, #15]
 80010f8:	6879      	ldr	r1, [r7, #4]
 80010fa:	4613      	mov	r3, r2
 80010fc:	00db      	lsls	r3, r3, #3
 80010fe:	4413      	add	r3, r2
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	440b      	add	r3, r1
 8001104:	3354      	adds	r3, #84	; 0x54
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800110a:	7bfb      	ldrb	r3, [r7, #15]
 800110c:	3301      	adds	r3, #1
 800110e:	73fb      	strb	r3, [r7, #15]
 8001110:	7bfa      	ldrb	r2, [r7, #15]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	429a      	cmp	r2, r3
 8001118:	d3af      	bcc.n	800107a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800111a:	2300      	movs	r3, #0
 800111c:	73fb      	strb	r3, [r7, #15]
 800111e:	e044      	b.n	80011aa <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001120:	7bfa      	ldrb	r2, [r7, #15]
 8001122:	6879      	ldr	r1, [r7, #4]
 8001124:	4613      	mov	r3, r2
 8001126:	00db      	lsls	r3, r3, #3
 8001128:	4413      	add	r3, r2
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	440b      	add	r3, r1
 800112e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001132:	2200      	movs	r2, #0
 8001134:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001136:	7bfa      	ldrb	r2, [r7, #15]
 8001138:	6879      	ldr	r1, [r7, #4]
 800113a:	4613      	mov	r3, r2
 800113c:	00db      	lsls	r3, r3, #3
 800113e:	4413      	add	r3, r2
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	440b      	add	r3, r1
 8001144:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001148:	7bfa      	ldrb	r2, [r7, #15]
 800114a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800114c:	7bfa      	ldrb	r2, [r7, #15]
 800114e:	6879      	ldr	r1, [r7, #4]
 8001150:	4613      	mov	r3, r2
 8001152:	00db      	lsls	r3, r3, #3
 8001154:	4413      	add	r3, r2
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	440b      	add	r3, r1
 800115a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800115e:	2200      	movs	r2, #0
 8001160:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001162:	7bfa      	ldrb	r2, [r7, #15]
 8001164:	6879      	ldr	r1, [r7, #4]
 8001166:	4613      	mov	r3, r2
 8001168:	00db      	lsls	r3, r3, #3
 800116a:	4413      	add	r3, r2
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	440b      	add	r3, r1
 8001170:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001178:	7bfa      	ldrb	r2, [r7, #15]
 800117a:	6879      	ldr	r1, [r7, #4]
 800117c:	4613      	mov	r3, r2
 800117e:	00db      	lsls	r3, r3, #3
 8001180:	4413      	add	r3, r2
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	440b      	add	r3, r1
 8001186:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800118e:	7bfa      	ldrb	r2, [r7, #15]
 8001190:	6879      	ldr	r1, [r7, #4]
 8001192:	4613      	mov	r3, r2
 8001194:	00db      	lsls	r3, r3, #3
 8001196:	4413      	add	r3, r2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	440b      	add	r3, r1
 800119c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011a4:	7bfb      	ldrb	r3, [r7, #15]
 80011a6:	3301      	adds	r3, #1
 80011a8:	73fb      	strb	r3, [r7, #15]
 80011aa:	7bfa      	ldrb	r2, [r7, #15]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d3b5      	bcc.n	8001120 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	603b      	str	r3, [r7, #0]
 80011ba:	687e      	ldr	r6, [r7, #4]
 80011bc:	466d      	mov	r5, sp
 80011be:	f106 0410 	add.w	r4, r6, #16
 80011c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80011ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80011d2:	1d33      	adds	r3, r6, #4
 80011d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011d6:	6838      	ldr	r0, [r7, #0]
 80011d8:	f002 fd24 	bl	8003c24 <USB_DevInit>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d005      	beq.n	80011ee <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2202      	movs	r2, #2
 80011e6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e014      	b.n	8001218 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2200      	movs	r2, #0
 80011f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2201      	movs	r2, #1
 80011fa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001202:	2b01      	cmp	r3, #1
 8001204:	d102      	bne.n	800120c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f001 f8ae 	bl	8002368 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4618      	mov	r0, r3
 8001212:	f003 fdac 	bl	8004d6e <USB_DevDisconnect>

  return HAL_OK;
 8001216:	2300      	movs	r3, #0
}
 8001218:	4618      	mov	r0, r3
 800121a:	3714      	adds	r7, #20
 800121c:	46bd      	mov	sp, r7
 800121e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001220 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001234:	2b01      	cmp	r3, #1
 8001236:	d101      	bne.n	800123c <HAL_PCD_Start+0x1c>
 8001238:	2302      	movs	r3, #2
 800123a:	e01c      	b.n	8001276 <HAL_PCD_Start+0x56>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2201      	movs	r2, #1
 8001240:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001248:	2b01      	cmp	r3, #1
 800124a:	d105      	bne.n	8001258 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001250:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f002 fc73 	bl	8003b48 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4618      	mov	r0, r3
 8001268:	f003 fd60 	bl	8004d2c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800127e:	b590      	push	{r4, r7, lr}
 8001280:	b08d      	sub	sp, #52	; 0x34
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800128c:	6a3b      	ldr	r3, [r7, #32]
 800128e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4618      	mov	r0, r3
 8001296:	f003 fe1e 	bl	8004ed6 <USB_GetMode>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	f040 847e 	bne.w	8001b9e <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f003 fd82 	bl	8004db0 <USB_ReadInterrupts>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f000 8474 	beq.w	8001b9c <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	0a1b      	lsrs	r3, r3, #8
 80012be:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f003 fd6f 	bl	8004db0 <USB_ReadInterrupts>
 80012d2:	4603      	mov	r3, r0
 80012d4:	f003 0302 	and.w	r3, r3, #2
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d107      	bne.n	80012ec <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	695a      	ldr	r2, [r3, #20]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f002 0202 	and.w	r2, r2, #2
 80012ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f003 fd5d 	bl	8004db0 <USB_ReadInterrupts>
 80012f6:	4603      	mov	r3, r0
 80012f8:	f003 0310 	and.w	r3, r3, #16
 80012fc:	2b10      	cmp	r3, #16
 80012fe:	d161      	bne.n	80013c4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	699a      	ldr	r2, [r3, #24]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f022 0210 	bic.w	r2, r2, #16
 800130e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001310:	6a3b      	ldr	r3, [r7, #32]
 8001312:	6a1b      	ldr	r3, [r3, #32]
 8001314:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	f003 020f 	and.w	r2, r3, #15
 800131c:	4613      	mov	r3, r2
 800131e:	00db      	lsls	r3, r3, #3
 8001320:	4413      	add	r3, r2
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	4413      	add	r3, r2
 800132c:	3304      	adds	r3, #4
 800132e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	0c5b      	lsrs	r3, r3, #17
 8001334:	f003 030f 	and.w	r3, r3, #15
 8001338:	2b02      	cmp	r3, #2
 800133a:	d124      	bne.n	8001386 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001342:	4013      	ands	r3, r2
 8001344:	2b00      	cmp	r3, #0
 8001346:	d035      	beq.n	80013b4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	091b      	lsrs	r3, r3, #4
 8001350:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001352:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001356:	b29b      	uxth	r3, r3
 8001358:	461a      	mov	r2, r3
 800135a:	6a38      	ldr	r0, [r7, #32]
 800135c:	f003 fb94 	bl	8004a88 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	691a      	ldr	r2, [r3, #16]
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	091b      	lsrs	r3, r3, #4
 8001368:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800136c:	441a      	add	r2, r3
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	6a1a      	ldr	r2, [r3, #32]
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	091b      	lsrs	r3, r3, #4
 800137a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800137e:	441a      	add	r2, r3
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	621a      	str	r2, [r3, #32]
 8001384:	e016      	b.n	80013b4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	0c5b      	lsrs	r3, r3, #17
 800138a:	f003 030f 	and.w	r3, r3, #15
 800138e:	2b06      	cmp	r3, #6
 8001390:	d110      	bne.n	80013b4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001398:	2208      	movs	r2, #8
 800139a:	4619      	mov	r1, r3
 800139c:	6a38      	ldr	r0, [r7, #32]
 800139e:	f003 fb73 	bl	8004a88 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	6a1a      	ldr	r2, [r3, #32]
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	091b      	lsrs	r3, r3, #4
 80013aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013ae:	441a      	add	r2, r3
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	699a      	ldr	r2, [r3, #24]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f042 0210 	orr.w	r2, r2, #16
 80013c2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f003 fcf1 	bl	8004db0 <USB_ReadInterrupts>
 80013ce:	4603      	mov	r3, r0
 80013d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013d4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80013d8:	f040 80a7 	bne.w	800152a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80013dc:	2300      	movs	r3, #0
 80013de:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f003 fcf6 	bl	8004dd6 <USB_ReadDevAllOutEpInterrupt>
 80013ea:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80013ec:	e099      	b.n	8001522 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80013ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f0:	f003 0301 	and.w	r3, r3, #1
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	f000 808e 	beq.w	8001516 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001400:	b2d2      	uxtb	r2, r2
 8001402:	4611      	mov	r1, r2
 8001404:	4618      	mov	r0, r3
 8001406:	f003 fd1a 	bl	8004e3e <USB_ReadDevOutEPInterrupt>
 800140a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	2b00      	cmp	r3, #0
 8001414:	d00c      	beq.n	8001430 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001418:	015a      	lsls	r2, r3, #5
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	4413      	add	r3, r2
 800141e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001422:	461a      	mov	r2, r3
 8001424:	2301      	movs	r3, #1
 8001426:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001428:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 fec2 	bl	80021b4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	f003 0308 	and.w	r3, r3, #8
 8001436:	2b00      	cmp	r3, #0
 8001438:	d00c      	beq.n	8001454 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800143a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143c:	015a      	lsls	r2, r3, #5
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	4413      	add	r3, r2
 8001442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001446:	461a      	mov	r2, r3
 8001448:	2308      	movs	r3, #8
 800144a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800144c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f000 fefe 	bl	8002250 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	f003 0310 	and.w	r3, r3, #16
 800145a:	2b00      	cmp	r3, #0
 800145c:	d008      	beq.n	8001470 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800145e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001460:	015a      	lsls	r2, r3, #5
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	4413      	add	r3, r2
 8001466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800146a:	461a      	mov	r2, r3
 800146c:	2310      	movs	r3, #16
 800146e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d030      	beq.n	80014dc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800147a:	6a3b      	ldr	r3, [r7, #32]
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001482:	2b80      	cmp	r3, #128	; 0x80
 8001484:	d109      	bne.n	800149a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	69fa      	ldr	r2, [r7, #28]
 8001490:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001494:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001498:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800149a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800149c:	4613      	mov	r3, r2
 800149e:	00db      	lsls	r3, r3, #3
 80014a0:	4413      	add	r3, r2
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	4413      	add	r3, r2
 80014ac:	3304      	adds	r3, #4
 80014ae:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	78db      	ldrb	r3, [r3, #3]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d108      	bne.n	80014ca <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	2200      	movs	r2, #0
 80014bc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80014be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	4619      	mov	r1, r3
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f007 f911 	bl	80086ec <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80014ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014cc:	015a      	lsls	r2, r3, #5
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	4413      	add	r3, r2
 80014d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014d6:	461a      	mov	r2, r3
 80014d8:	2302      	movs	r3, #2
 80014da:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	f003 0320 	and.w	r3, r3, #32
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d008      	beq.n	80014f8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80014e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e8:	015a      	lsls	r2, r3, #5
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	4413      	add	r3, r2
 80014ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014f2:	461a      	mov	r2, r3
 80014f4:	2320      	movs	r3, #32
 80014f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d009      	beq.n	8001516 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001504:	015a      	lsls	r2, r3, #5
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	4413      	add	r3, r2
 800150a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800150e:	461a      	mov	r2, r3
 8001510:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001514:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001518:	3301      	adds	r3, #1
 800151a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800151c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800151e:	085b      	lsrs	r3, r3, #1
 8001520:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001524:	2b00      	cmp	r3, #0
 8001526:	f47f af62 	bne.w	80013ee <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4618      	mov	r0, r3
 8001530:	f003 fc3e 	bl	8004db0 <USB_ReadInterrupts>
 8001534:	4603      	mov	r3, r0
 8001536:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800153a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800153e:	f040 80a4 	bne.w	800168a <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4618      	mov	r0, r3
 8001548:	f003 fc5f 	bl	8004e0a <USB_ReadDevAllInEpInterrupt>
 800154c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800154e:	2300      	movs	r3, #0
 8001550:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001552:	e096      	b.n	8001682 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	2b00      	cmp	r3, #0
 800155c:	f000 808b 	beq.w	8001676 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001566:	b2d2      	uxtb	r2, r2
 8001568:	4611      	mov	r1, r2
 800156a:	4618      	mov	r0, r3
 800156c:	f003 fc85 	bl	8004e7a <USB_ReadDevInEPInterrupt>
 8001570:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	f003 0301 	and.w	r3, r3, #1
 8001578:	2b00      	cmp	r3, #0
 800157a:	d020      	beq.n	80015be <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800157c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157e:	f003 030f 	and.w	r3, r3, #15
 8001582:	2201      	movs	r2, #1
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001590:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	43db      	mvns	r3, r3
 8001596:	69f9      	ldr	r1, [r7, #28]
 8001598:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800159c:	4013      	ands	r3, r2
 800159e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80015a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a2:	015a      	lsls	r2, r3, #5
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	4413      	add	r3, r2
 80015a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015ac:	461a      	mov	r2, r3
 80015ae:	2301      	movs	r3, #1
 80015b0:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80015b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	4619      	mov	r1, r3
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f007 f802 	bl	80085c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	f003 0308 	and.w	r3, r3, #8
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d008      	beq.n	80015da <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80015c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ca:	015a      	lsls	r2, r3, #5
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	4413      	add	r3, r2
 80015d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015d4:	461a      	mov	r2, r3
 80015d6:	2308      	movs	r3, #8
 80015d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	f003 0310 	and.w	r3, r3, #16
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d008      	beq.n	80015f6 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80015e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e6:	015a      	lsls	r2, r3, #5
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	4413      	add	r3, r2
 80015ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015f0:	461a      	mov	r2, r3
 80015f2:	2310      	movs	r3, #16
 80015f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d008      	beq.n	8001612 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001602:	015a      	lsls	r2, r3, #5
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	4413      	add	r3, r2
 8001608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800160c:	461a      	mov	r2, r3
 800160e:	2340      	movs	r3, #64	; 0x40
 8001610:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d023      	beq.n	8001664 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800161c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800161e:	6a38      	ldr	r0, [r7, #32]
 8001620:	f002 fc4c 	bl	8003ebc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001626:	4613      	mov	r3, r2
 8001628:	00db      	lsls	r3, r3, #3
 800162a:	4413      	add	r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	3338      	adds	r3, #56	; 0x38
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	4413      	add	r3, r2
 8001634:	3304      	adds	r3, #4
 8001636:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	78db      	ldrb	r3, [r3, #3]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d108      	bne.n	8001652 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	2200      	movs	r2, #0
 8001644:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001648:	b2db      	uxtb	r3, r3
 800164a:	4619      	mov	r1, r3
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f007 f85f 	bl	8008710 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001654:	015a      	lsls	r2, r3, #5
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	4413      	add	r3, r2
 800165a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800165e:	461a      	mov	r2, r3
 8001660:	2302      	movs	r3, #2
 8001662:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800166a:	2b00      	cmp	r3, #0
 800166c:	d003      	beq.n	8001676 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800166e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f000 fd17 	bl	80020a4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001678:	3301      	adds	r3, #1
 800167a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800167c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800167e:	085b      	lsrs	r3, r3, #1
 8001680:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001684:	2b00      	cmp	r3, #0
 8001686:	f47f af65 	bne.w	8001554 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4618      	mov	r0, r3
 8001690:	f003 fb8e 	bl	8004db0 <USB_ReadInterrupts>
 8001694:	4603      	mov	r3, r0
 8001696:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800169a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800169e:	d122      	bne.n	80016e6 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	69fa      	ldr	r2, [r7, #28]
 80016aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016ae:	f023 0301 	bic.w	r3, r3, #1
 80016b2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d108      	bne.n	80016d0 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80016c6:	2100      	movs	r1, #0
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f007 fac9 	bl	8008c60 <HAL_PCDEx_LPM_Callback>
 80016ce:	e002      	b.n	80016d6 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f006 ffe3 	bl	800869c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	695a      	ldr	r2, [r3, #20]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80016e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f003 fb60 	bl	8004db0 <USB_ReadInterrupts>
 80016f0:	4603      	mov	r3, r0
 80016f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016fa:	d112      	bne.n	8001722 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	f003 0301 	and.w	r3, r3, #1
 8001708:	2b01      	cmp	r3, #1
 800170a:	d102      	bne.n	8001712 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f006 ff9f 	bl	8008650 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	695a      	ldr	r2, [r3, #20]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001720:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4618      	mov	r0, r3
 8001728:	f003 fb42 	bl	8004db0 <USB_ReadInterrupts>
 800172c:	4603      	mov	r3, r0
 800172e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001732:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001736:	d121      	bne.n	800177c <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	695a      	ldr	r2, [r3, #20]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001746:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800174e:	2b00      	cmp	r3, #0
 8001750:	d111      	bne.n	8001776 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2201      	movs	r2, #1
 8001756:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001760:	089b      	lsrs	r3, r3, #2
 8001762:	f003 020f 	and.w	r2, r3, #15
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800176c:	2101      	movs	r1, #1
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f007 fa76 	bl	8008c60 <HAL_PCDEx_LPM_Callback>
 8001774:	e002      	b.n	800177c <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f006 ff6a 	bl	8008650 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4618      	mov	r0, r3
 8001782:	f003 fb15 	bl	8004db0 <USB_ReadInterrupts>
 8001786:	4603      	mov	r3, r0
 8001788:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800178c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001790:	f040 80b5 	bne.w	80018fe <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	69fa      	ldr	r2, [r7, #28]
 800179e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017a2:	f023 0301 	bic.w	r3, r3, #1
 80017a6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2110      	movs	r1, #16
 80017ae:	4618      	mov	r0, r3
 80017b0:	f002 fb84 	bl	8003ebc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017b4:	2300      	movs	r3, #0
 80017b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017b8:	e046      	b.n	8001848 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80017ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017bc:	015a      	lsls	r2, r3, #5
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	4413      	add	r3, r2
 80017c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017c6:	461a      	mov	r2, r3
 80017c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80017cc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80017ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017d0:	015a      	lsls	r2, r3, #5
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	4413      	add	r3, r2
 80017d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017de:	0151      	lsls	r1, r2, #5
 80017e0:	69fa      	ldr	r2, [r7, #28]
 80017e2:	440a      	add	r2, r1
 80017e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80017e8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80017ec:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80017ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017f0:	015a      	lsls	r2, r3, #5
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	4413      	add	r3, r2
 80017f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017fa:	461a      	mov	r2, r3
 80017fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001800:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001804:	015a      	lsls	r2, r3, #5
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	4413      	add	r3, r2
 800180a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001812:	0151      	lsls	r1, r2, #5
 8001814:	69fa      	ldr	r2, [r7, #28]
 8001816:	440a      	add	r2, r1
 8001818:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800181c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001820:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001824:	015a      	lsls	r2, r3, #5
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	4413      	add	r3, r2
 800182a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001832:	0151      	lsls	r1, r2, #5
 8001834:	69fa      	ldr	r2, [r7, #28]
 8001836:	440a      	add	r2, r1
 8001838:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800183c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001840:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001844:	3301      	adds	r3, #1
 8001846:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800184e:	429a      	cmp	r2, r3
 8001850:	d3b3      	bcc.n	80017ba <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001858:	69db      	ldr	r3, [r3, #28]
 800185a:	69fa      	ldr	r2, [r7, #28]
 800185c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001860:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001864:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	2b00      	cmp	r3, #0
 800186c:	d016      	beq.n	800189c <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001874:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001878:	69fa      	ldr	r2, [r7, #28]
 800187a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800187e:	f043 030b 	orr.w	r3, r3, #11
 8001882:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800188c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188e:	69fa      	ldr	r2, [r7, #28]
 8001890:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001894:	f043 030b 	orr.w	r3, r3, #11
 8001898:	6453      	str	r3, [r2, #68]	; 0x44
 800189a:	e015      	b.n	80018c8 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018a2:	695b      	ldr	r3, [r3, #20]
 80018a4:	69fa      	ldr	r2, [r7, #28]
 80018a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018ae:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80018b2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018ba:	691b      	ldr	r3, [r3, #16]
 80018bc:	69fa      	ldr	r2, [r7, #28]
 80018be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018c2:	f043 030b 	orr.w	r3, r3, #11
 80018c6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	69fa      	ldr	r2, [r7, #28]
 80018d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018d6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80018da:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80018e6:	4619      	mov	r1, r3
 80018e8:	4610      	mov	r0, r2
 80018ea:	f003 fb25 	bl	8004f38 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	695a      	ldr	r2, [r3, #20]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80018fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4618      	mov	r0, r3
 8001904:	f003 fa54 	bl	8004db0 <USB_ReadInterrupts>
 8001908:	4603      	mov	r3, r0
 800190a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800190e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001912:	d124      	bne.n	800195e <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4618      	mov	r0, r3
 800191a:	f003 faea 	bl	8004ef2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4618      	mov	r0, r3
 8001924:	f002 fb47 	bl	8003fb6 <USB_GetDevSpeed>
 8001928:	4603      	mov	r3, r0
 800192a:	461a      	mov	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681c      	ldr	r4, [r3, #0]
 8001934:	f001 fb18 	bl	8002f68 <HAL_RCC_GetHCLKFreq>
 8001938:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800193e:	b2db      	uxtb	r3, r3
 8001940:	461a      	mov	r2, r3
 8001942:	4620      	mov	r0, r4
 8001944:	f002 f864 	bl	8003a10 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f006 fe62 	bl	8008612 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	695a      	ldr	r2, [r3, #20]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800195c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f003 fa24 	bl	8004db0 <USB_ReadInterrupts>
 8001968:	4603      	mov	r3, r0
 800196a:	f003 0308 	and.w	r3, r3, #8
 800196e:	2b08      	cmp	r3, #8
 8001970:	d10a      	bne.n	8001988 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f006 fe3f 	bl	80085f6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	695a      	ldr	r2, [r3, #20]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f002 0208 	and.w	r2, r2, #8
 8001986:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f003 fa0f 	bl	8004db0 <USB_ReadInterrupts>
 8001992:	4603      	mov	r3, r0
 8001994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001998:	2b80      	cmp	r3, #128	; 0x80
 800199a:	d122      	bne.n	80019e2 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800199c:	6a3b      	ldr	r3, [r7, #32]
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80019a4:	6a3b      	ldr	r3, [r7, #32]
 80019a6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019a8:	2301      	movs	r3, #1
 80019aa:	627b      	str	r3, [r7, #36]	; 0x24
 80019ac:	e014      	b.n	80019d8 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80019ae:	6879      	ldr	r1, [r7, #4]
 80019b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019b2:	4613      	mov	r3, r2
 80019b4:	00db      	lsls	r3, r3, #3
 80019b6:	4413      	add	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	440b      	add	r3, r1
 80019bc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d105      	bne.n	80019d2 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80019c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	4619      	mov	r1, r3
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f000 fb0b 	bl	8001fe8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d4:	3301      	adds	r3, #1
 80019d6:	627b      	str	r3, [r7, #36]	; 0x24
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019de:	429a      	cmp	r2, r3
 80019e0:	d3e5      	bcc.n	80019ae <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f003 f9e2 	bl	8004db0 <USB_ReadInterrupts>
 80019ec:	4603      	mov	r3, r0
 80019ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019f6:	d13b      	bne.n	8001a70 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019f8:	2301      	movs	r3, #1
 80019fa:	627b      	str	r3, [r7, #36]	; 0x24
 80019fc:	e02b      	b.n	8001a56 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80019fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a00:	015a      	lsls	r2, r3, #5
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	4413      	add	r3, r2
 8001a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a0e:	6879      	ldr	r1, [r7, #4]
 8001a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a12:	4613      	mov	r3, r2
 8001a14:	00db      	lsls	r3, r3, #3
 8001a16:	4413      	add	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	440b      	add	r3, r1
 8001a1c:	3340      	adds	r3, #64	; 0x40
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d115      	bne.n	8001a50 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001a24:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	da12      	bge.n	8001a50 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001a2a:	6879      	ldr	r1, [r7, #4]
 8001a2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a2e:	4613      	mov	r3, r2
 8001a30:	00db      	lsls	r3, r3, #3
 8001a32:	4413      	add	r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	440b      	add	r3, r1
 8001a38:	333f      	adds	r3, #63	; 0x3f
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	4619      	mov	r1, r3
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f000 facc 	bl	8001fe8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a52:	3301      	adds	r3, #1
 8001a54:	627b      	str	r3, [r7, #36]	; 0x24
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d3ce      	bcc.n	80019fe <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	695a      	ldr	r2, [r3, #20]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001a6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f003 f99b 	bl	8004db0 <USB_ReadInterrupts>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a84:	d155      	bne.n	8001b32 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a86:	2301      	movs	r3, #1
 8001a88:	627b      	str	r3, [r7, #36]	; 0x24
 8001a8a:	e045      	b.n	8001b18 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8e:	015a      	lsls	r2, r3, #5
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	4413      	add	r3, r2
 8001a94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a9c:	6879      	ldr	r1, [r7, #4]
 8001a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	00db      	lsls	r3, r3, #3
 8001aa4:	4413      	add	r3, r2
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	440b      	add	r3, r1
 8001aaa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d12e      	bne.n	8001b12 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001ab4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	da2b      	bge.n	8001b12 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001ac6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d121      	bne.n	8001b12 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001ace:	6879      	ldr	r1, [r7, #4]
 8001ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	00db      	lsls	r3, r3, #3
 8001ad6:	4413      	add	r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	440b      	add	r3, r1
 8001adc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001ae4:	6a3b      	ldr	r3, [r7, #32]
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001aec:	6a3b      	ldr	r3, [r7, #32]
 8001aee:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001af0:	6a3b      	ldr	r3, [r7, #32]
 8001af2:	695b      	ldr	r3, [r3, #20]
 8001af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d10a      	bne.n	8001b12 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	69fa      	ldr	r2, [r7, #28]
 8001b06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b0e:	6053      	str	r3, [r2, #4]
            break;
 8001b10:	e007      	b.n	8001b22 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b14:	3301      	adds	r3, #1
 8001b16:	627b      	str	r3, [r7, #36]	; 0x24
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d3b4      	bcc.n	8001a8c <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	695a      	ldr	r2, [r3, #20]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001b30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f003 f93a 	bl	8004db0 <USB_ReadInterrupts>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001b42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b46:	d10a      	bne.n	8001b5e <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f006 fdf3 	bl	8008734 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	695a      	ldr	r2, [r3, #20]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001b5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f003 f924 	bl	8004db0 <USB_ReadInterrupts>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	f003 0304 	and.w	r3, r3, #4
 8001b6e:	2b04      	cmp	r3, #4
 8001b70:	d115      	bne.n	8001b9e <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	f003 0304 	and.w	r3, r3, #4
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d002      	beq.n	8001b8a <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f006 fde3 	bl	8008750 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	6859      	ldr	r1, [r3, #4]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	430a      	orrs	r2, r1
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	e000      	b.n	8001b9e <HAL_PCD_IRQHandler+0x920>
      return;
 8001b9c:	bf00      	nop
    }
  }
}
 8001b9e:	3734      	adds	r7, #52	; 0x34
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd90      	pop	{r4, r7, pc}

08001ba4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	460b      	mov	r3, r1
 8001bae:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d101      	bne.n	8001bbe <HAL_PCD_SetAddress+0x1a>
 8001bba:	2302      	movs	r3, #2
 8001bbc:	e013      	b.n	8001be6 <HAL_PCD_SetAddress+0x42>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	78fa      	ldrb	r2, [r7, #3]
 8001bca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	78fa      	ldrb	r2, [r7, #3]
 8001bd4:	4611      	mov	r1, r2
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f003 f882 	bl	8004ce0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b084      	sub	sp, #16
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
 8001bf6:	4608      	mov	r0, r1
 8001bf8:	4611      	mov	r1, r2
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	70fb      	strb	r3, [r7, #3]
 8001c00:	460b      	mov	r3, r1
 8001c02:	803b      	strh	r3, [r7, #0]
 8001c04:	4613      	mov	r3, r2
 8001c06:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	da0f      	bge.n	8001c34 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c14:	78fb      	ldrb	r3, [r7, #3]
 8001c16:	f003 020f 	and.w	r2, r3, #15
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	00db      	lsls	r3, r3, #3
 8001c1e:	4413      	add	r3, r2
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	3338      	adds	r3, #56	; 0x38
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	4413      	add	r3, r2
 8001c28:	3304      	adds	r3, #4
 8001c2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	705a      	strb	r2, [r3, #1]
 8001c32:	e00f      	b.n	8001c54 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c34:	78fb      	ldrb	r3, [r7, #3]
 8001c36:	f003 020f 	and.w	r2, r3, #15
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	4413      	add	r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	4413      	add	r3, r2
 8001c4a:	3304      	adds	r3, #4
 8001c4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2200      	movs	r2, #0
 8001c52:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c54:	78fb      	ldrb	r3, [r7, #3]
 8001c56:	f003 030f 	and.w	r3, r3, #15
 8001c5a:	b2da      	uxtb	r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001c60:	883a      	ldrh	r2, [r7, #0]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	78ba      	ldrb	r2, [r7, #2]
 8001c6a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	785b      	ldrb	r3, [r3, #1]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d004      	beq.n	8001c7e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	b29a      	uxth	r2, r3
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c7e:	78bb      	ldrb	r3, [r7, #2]
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d102      	bne.n	8001c8a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2200      	movs	r2, #0
 8001c88:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d101      	bne.n	8001c98 <HAL_PCD_EP_Open+0xaa>
 8001c94:	2302      	movs	r3, #2
 8001c96:	e00e      	b.n	8001cb6 <HAL_PCD_EP_Open+0xc8>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68f9      	ldr	r1, [r7, #12]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f002 f9a4 	bl	8003ff4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001cb4:	7afb      	ldrb	r3, [r7, #11]
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b084      	sub	sp, #16
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001cca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	da0f      	bge.n	8001cf2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cd2:	78fb      	ldrb	r3, [r7, #3]
 8001cd4:	f003 020f 	and.w	r2, r3, #15
 8001cd8:	4613      	mov	r3, r2
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	4413      	add	r3, r2
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	3338      	adds	r3, #56	; 0x38
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	3304      	adds	r3, #4
 8001ce8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2201      	movs	r2, #1
 8001cee:	705a      	strb	r2, [r3, #1]
 8001cf0:	e00f      	b.n	8001d12 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cf2:	78fb      	ldrb	r3, [r7, #3]
 8001cf4:	f003 020f 	and.w	r2, r3, #15
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	4413      	add	r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	4413      	add	r3, r2
 8001d08:	3304      	adds	r3, #4
 8001d0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001d12:	78fb      	ldrb	r3, [r7, #3]
 8001d14:	f003 030f 	and.w	r3, r3, #15
 8001d18:	b2da      	uxtb	r2, r3
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d101      	bne.n	8001d2c <HAL_PCD_EP_Close+0x6e>
 8001d28:	2302      	movs	r3, #2
 8001d2a:	e00e      	b.n	8001d4a <HAL_PCD_EP_Close+0x8c>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	68f9      	ldr	r1, [r7, #12]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f002 f9e2 	bl	8004104 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b086      	sub	sp, #24
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	60f8      	str	r0, [r7, #12]
 8001d5a:	607a      	str	r2, [r7, #4]
 8001d5c:	603b      	str	r3, [r7, #0]
 8001d5e:	460b      	mov	r3, r1
 8001d60:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d62:	7afb      	ldrb	r3, [r7, #11]
 8001d64:	f003 020f 	and.w	r2, r3, #15
 8001d68:	4613      	mov	r3, r2
 8001d6a:	00db      	lsls	r3, r3, #3
 8001d6c:	4413      	add	r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d74:	68fa      	ldr	r2, [r7, #12]
 8001d76:	4413      	add	r3, r2
 8001d78:	3304      	adds	r3, #4
 8001d7a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	2200      	movs	r2, #0
 8001d92:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d94:	7afb      	ldrb	r3, [r7, #11]
 8001d96:	f003 030f 	and.w	r3, r3, #15
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001da0:	7afb      	ldrb	r3, [r7, #11]
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d106      	bne.n	8001db8 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	6979      	ldr	r1, [r7, #20]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f002 fc63 	bl	800467c <USB_EP0StartXfer>
 8001db6:	e005      	b.n	8001dc4 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	6979      	ldr	r1, [r7, #20]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f002 fa7c 	bl	80042bc <USB_EPStartXfer>
  }

  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3718      	adds	r7, #24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b083      	sub	sp, #12
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001dda:	78fb      	ldrb	r3, [r7, #3]
 8001ddc:	f003 020f 	and.w	r2, r3, #15
 8001de0:	6879      	ldr	r1, [r7, #4]
 8001de2:	4613      	mov	r3, r2
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	4413      	add	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	440b      	add	r3, r1
 8001dec:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001df0:	681b      	ldr	r3, [r3, #0]
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b086      	sub	sp, #24
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	60f8      	str	r0, [r7, #12]
 8001e06:	607a      	str	r2, [r7, #4]
 8001e08:	603b      	str	r3, [r7, #0]
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e0e:	7afb      	ldrb	r3, [r7, #11]
 8001e10:	f003 020f 	and.w	r2, r3, #15
 8001e14:	4613      	mov	r3, r2
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	4413      	add	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	3338      	adds	r3, #56	; 0x38
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	4413      	add	r3, r2
 8001e22:	3304      	adds	r3, #4
 8001e24:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	683a      	ldr	r2, [r7, #0]
 8001e30:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	2200      	movs	r2, #0
 8001e36:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e3e:	7afb      	ldrb	r3, [r7, #11]
 8001e40:	f003 030f 	and.w	r3, r3, #15
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e4a:	7afb      	ldrb	r3, [r7, #11]
 8001e4c:	f003 030f 	and.w	r3, r3, #15
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d106      	bne.n	8001e62 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6979      	ldr	r1, [r7, #20]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f002 fc0e 	bl	800467c <USB_EP0StartXfer>
 8001e60:	e005      	b.n	8001e6e <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	6979      	ldr	r1, [r7, #20]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f002 fa27 	bl	80042bc <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3718      	adds	r7, #24
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	460b      	mov	r3, r1
 8001e82:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e84:	78fb      	ldrb	r3, [r7, #3]
 8001e86:	f003 020f 	and.w	r2, r3, #15
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d901      	bls.n	8001e96 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e04e      	b.n	8001f34 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	da0f      	bge.n	8001ebe <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e9e:	78fb      	ldrb	r3, [r7, #3]
 8001ea0:	f003 020f 	and.w	r2, r3, #15
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	4413      	add	r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	3338      	adds	r3, #56	; 0x38
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	3304      	adds	r3, #4
 8001eb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	705a      	strb	r2, [r3, #1]
 8001ebc:	e00d      	b.n	8001eda <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001ebe:	78fa      	ldrb	r2, [r7, #3]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	4413      	add	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	4413      	add	r3, r2
 8001ed0:	3304      	adds	r3, #4
 8001ed2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2201      	movs	r2, #1
 8001ede:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ee0:	78fb      	ldrb	r3, [r7, #3]
 8001ee2:	f003 030f 	and.w	r3, r3, #15
 8001ee6:	b2da      	uxtb	r2, r3
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d101      	bne.n	8001efa <HAL_PCD_EP_SetStall+0x82>
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	e01c      	b.n	8001f34 <HAL_PCD_EP_SetStall+0xbc>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2201      	movs	r2, #1
 8001efe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68f9      	ldr	r1, [r7, #12]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f002 fe15 	bl	8004b38 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f0e:	78fb      	ldrb	r3, [r7, #3]
 8001f10:	f003 030f 	and.w	r3, r3, #15
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d108      	bne.n	8001f2a <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001f22:	4619      	mov	r1, r3
 8001f24:	4610      	mov	r0, r2
 8001f26:	f003 f807 	bl	8004f38 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3710      	adds	r7, #16
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	460b      	mov	r3, r1
 8001f46:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f48:	78fb      	ldrb	r3, [r7, #3]
 8001f4a:	f003 020f 	and.w	r2, r3, #15
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d901      	bls.n	8001f5a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e042      	b.n	8001fe0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	da0f      	bge.n	8001f82 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f62:	78fb      	ldrb	r3, [r7, #3]
 8001f64:	f003 020f 	and.w	r2, r3, #15
 8001f68:	4613      	mov	r3, r2
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	4413      	add	r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	3338      	adds	r3, #56	; 0x38
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	4413      	add	r3, r2
 8001f76:	3304      	adds	r3, #4
 8001f78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	705a      	strb	r2, [r3, #1]
 8001f80:	e00f      	b.n	8001fa2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f82:	78fb      	ldrb	r3, [r7, #3]
 8001f84:	f003 020f 	and.w	r2, r3, #15
 8001f88:	4613      	mov	r3, r2
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	4413      	add	r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	4413      	add	r3, r2
 8001f98:	3304      	adds	r3, #4
 8001f9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fa8:	78fb      	ldrb	r3, [r7, #3]
 8001faa:	f003 030f 	and.w	r3, r3, #15
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d101      	bne.n	8001fc2 <HAL_PCD_EP_ClrStall+0x86>
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	e00e      	b.n	8001fe0 <HAL_PCD_EP_ClrStall+0xa4>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68f9      	ldr	r1, [r7, #12]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f002 fe1f 	bl	8004c14 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3710      	adds	r7, #16
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001ff4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	da0c      	bge.n	8002016 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ffc:	78fb      	ldrb	r3, [r7, #3]
 8001ffe:	f003 020f 	and.w	r2, r3, #15
 8002002:	4613      	mov	r3, r2
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	4413      	add	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	3338      	adds	r3, #56	; 0x38
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	4413      	add	r3, r2
 8002010:	3304      	adds	r3, #4
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	e00c      	b.n	8002030 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002016:	78fb      	ldrb	r3, [r7, #3]
 8002018:	f003 020f 	and.w	r2, r3, #15
 800201c:	4613      	mov	r3, r2
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	4413      	add	r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	4413      	add	r3, r2
 800202c:	3304      	adds	r3, #4
 800202e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68f9      	ldr	r1, [r7, #12]
 8002036:	4618      	mov	r0, r3
 8002038:	f002 fc42 	bl	80048c0 <USB_EPStopXfer>
 800203c:	4603      	mov	r3, r0
 800203e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002040:	7afb      	ldrb	r3, [r7, #11]
}
 8002042:	4618      	mov	r0, r3
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b082      	sub	sp, #8
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
 8002052:	460b      	mov	r3, r1
 8002054:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800205c:	2b01      	cmp	r3, #1
 800205e:	d101      	bne.n	8002064 <HAL_PCD_EP_Flush+0x1a>
 8002060:	2302      	movs	r3, #2
 8002062:	e01b      	b.n	800209c <HAL_PCD_EP_Flush+0x52>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((ep_addr & 0x80U) == 0x80U)
 800206c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002070:	2b00      	cmp	r3, #0
 8002072:	da09      	bge.n	8002088 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	78fb      	ldrb	r3, [r7, #3]
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	4619      	mov	r1, r3
 8002080:	4610      	mov	r0, r2
 8002082:	f001 ff1b 	bl	8003ebc <USB_FlushTxFifo>
 8002086:	e004      	b.n	8002092 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4618      	mov	r0, r3
 800208e:	f001 ff49 	bl	8003f24 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b088      	sub	sp, #32
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	4613      	mov	r3, r2
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	4413      	add	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	3338      	adds	r3, #56	; 0x38
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	4413      	add	r3, r2
 80020c8:	3304      	adds	r3, #4
 80020ca:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6a1a      	ldr	r2, [r3, #32]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d901      	bls.n	80020dc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e067      	b.n	80021ac <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	699a      	ldr	r2, [r3, #24]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6a1b      	ldr	r3, [r3, #32]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	69fa      	ldr	r2, [r7, #28]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d902      	bls.n	80020f8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	3303      	adds	r3, #3
 80020fc:	089b      	lsrs	r3, r3, #2
 80020fe:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002100:	e026      	b.n	8002150 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	699a      	ldr	r2, [r3, #24]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6a1b      	ldr	r3, [r3, #32]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	69fa      	ldr	r2, [r7, #28]
 8002114:	429a      	cmp	r2, r3
 8002116:	d902      	bls.n	800211e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	3303      	adds	r3, #3
 8002122:	089b      	lsrs	r3, r3, #2
 8002124:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6919      	ldr	r1, [r3, #16]
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	b2da      	uxtb	r2, r3
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	b29b      	uxth	r3, r3
 8002132:	6978      	ldr	r0, [r7, #20]
 8002134:	f002 fc6e 	bl	8004a14 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	691a      	ldr	r2, [r3, #16]
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	441a      	add	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6a1a      	ldr	r2, [r3, #32]
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	441a      	add	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	015a      	lsls	r2, r3, #5
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	4413      	add	r3, r2
 8002158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	b29b      	uxth	r3, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	429a      	cmp	r2, r3
 8002164:	d809      	bhi.n	800217a <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6a1a      	ldr	r2, [r3, #32]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800216e:	429a      	cmp	r2, r3
 8002170:	d203      	bcs.n	800217a <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1c3      	bne.n	8002102 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	699a      	ldr	r2, [r3, #24]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	429a      	cmp	r2, r3
 8002184:	d811      	bhi.n	80021aa <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	f003 030f 	and.w	r3, r3, #15
 800218c:	2201      	movs	r2, #1
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800219a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	43db      	mvns	r3, r3
 80021a0:	6939      	ldr	r1, [r7, #16]
 80021a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80021a6:	4013      	ands	r3, r2
 80021a8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3720      	adds	r7, #32
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	333c      	adds	r3, #60	; 0x3c
 80021cc:	3304      	adds	r3, #4
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	015a      	lsls	r2, r3, #5
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	4413      	add	r3, r2
 80021da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	4a19      	ldr	r2, [pc, #100]	; (800224c <PCD_EP_OutXfrComplete_int+0x98>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d124      	bne.n	8002234 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00a      	beq.n	800220a <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	015a      	lsls	r2, r3, #5
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	4413      	add	r3, r2
 80021fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002200:	461a      	mov	r2, r3
 8002202:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002206:	6093      	str	r3, [r2, #8]
 8002208:	e01a      	b.n	8002240 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	f003 0320 	and.w	r3, r3, #32
 8002210:	2b00      	cmp	r3, #0
 8002212:	d008      	beq.n	8002226 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	015a      	lsls	r2, r3, #5
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	4413      	add	r3, r2
 800221c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002220:	461a      	mov	r2, r3
 8002222:	2320      	movs	r3, #32
 8002224:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	b2db      	uxtb	r3, r3
 800222a:	4619      	mov	r1, r3
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f006 f9ad 	bl	800858c <HAL_PCD_DataOutStageCallback>
 8002232:	e005      	b.n	8002240 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	b2db      	uxtb	r3, r3
 8002238:	4619      	mov	r1, r3
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f006 f9a6 	bl	800858c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3718      	adds	r7, #24
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	4f54310a 	.word	0x4f54310a

08002250 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	333c      	adds	r3, #60	; 0x3c
 8002268:	3304      	adds	r3, #4
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	015a      	lsls	r2, r3, #5
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	4413      	add	r3, r2
 8002276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	4a0c      	ldr	r2, [pc, #48]	; (80022b4 <PCD_EP_OutSetupPacket_int+0x64>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d90e      	bls.n	80022a4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800228c:	2b00      	cmp	r3, #0
 800228e:	d009      	beq.n	80022a4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	015a      	lsls	r2, r3, #5
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	4413      	add	r3, r2
 8002298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800229c:	461a      	mov	r2, r3
 800229e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022a2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f006 f95f 	bl	8008568 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3718      	adds	r7, #24
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	4f54300a 	.word	0x4f54300a

080022b8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	460b      	mov	r3, r1
 80022c2:	70fb      	strb	r3, [r7, #3]
 80022c4:	4613      	mov	r3, r2
 80022c6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ce:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80022d0:	78fb      	ldrb	r3, [r7, #3]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d107      	bne.n	80022e6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80022d6:	883b      	ldrh	r3, [r7, #0]
 80022d8:	0419      	lsls	r1, r3, #16
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68ba      	ldr	r2, [r7, #8]
 80022e0:	430a      	orrs	r2, r1
 80022e2:	629a      	str	r2, [r3, #40]	; 0x28
 80022e4:	e028      	b.n	8002338 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ec:	0c1b      	lsrs	r3, r3, #16
 80022ee:	68ba      	ldr	r2, [r7, #8]
 80022f0:	4413      	add	r3, r2
 80022f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80022f4:	2300      	movs	r3, #0
 80022f6:	73fb      	strb	r3, [r7, #15]
 80022f8:	e00d      	b.n	8002316 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	7bfb      	ldrb	r3, [r7, #15]
 8002300:	3340      	adds	r3, #64	; 0x40
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	4413      	add	r3, r2
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	0c1b      	lsrs	r3, r3, #16
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	4413      	add	r3, r2
 800230e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002310:	7bfb      	ldrb	r3, [r7, #15]
 8002312:	3301      	adds	r3, #1
 8002314:	73fb      	strb	r3, [r7, #15]
 8002316:	7bfa      	ldrb	r2, [r7, #15]
 8002318:	78fb      	ldrb	r3, [r7, #3]
 800231a:	3b01      	subs	r3, #1
 800231c:	429a      	cmp	r2, r3
 800231e:	d3ec      	bcc.n	80022fa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002320:	883b      	ldrh	r3, [r7, #0]
 8002322:	0418      	lsls	r0, r3, #16
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6819      	ldr	r1, [r3, #0]
 8002328:	78fb      	ldrb	r3, [r7, #3]
 800232a:	3b01      	subs	r3, #1
 800232c:	68ba      	ldr	r2, [r7, #8]
 800232e:	4302      	orrs	r2, r0
 8002330:	3340      	adds	r3, #64	; 0x40
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	440b      	add	r3, r1
 8002336:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3714      	adds	r7, #20
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002346:	b480      	push	{r7}
 8002348:	b083      	sub	sp, #12
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
 800234e:	460b      	mov	r3, r1
 8002350:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	887a      	ldrh	r2, [r7, #2]
 8002358:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2201      	movs	r2, #1
 800237a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002396:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800239a:	f043 0303 	orr.w	r3, r3, #3
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80023a2:	2300      	movs	r3, #0
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3714      	adds	r7, #20
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80023b4:	4b04      	ldr	r3, [pc, #16]	; (80023c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80023bc:	4618      	mov	r0, r3
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	40007000 	.word	0x40007000

080023cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023da:	d130      	bne.n	800243e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80023dc:	4b23      	ldr	r3, [pc, #140]	; (800246c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80023e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023e8:	d038      	beq.n	800245c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023ea:	4b20      	ldr	r3, [pc, #128]	; (800246c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023f2:	4a1e      	ldr	r2, [pc, #120]	; (800246c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023f8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80023fa:	4b1d      	ldr	r3, [pc, #116]	; (8002470 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2232      	movs	r2, #50	; 0x32
 8002400:	fb02 f303 	mul.w	r3, r2, r3
 8002404:	4a1b      	ldr	r2, [pc, #108]	; (8002474 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002406:	fba2 2303 	umull	r2, r3, r2, r3
 800240a:	0c9b      	lsrs	r3, r3, #18
 800240c:	3301      	adds	r3, #1
 800240e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002410:	e002      	b.n	8002418 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	3b01      	subs	r3, #1
 8002416:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002418:	4b14      	ldr	r3, [pc, #80]	; (800246c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800241a:	695b      	ldr	r3, [r3, #20]
 800241c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002420:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002424:	d102      	bne.n	800242c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d1f2      	bne.n	8002412 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800242c:	4b0f      	ldr	r3, [pc, #60]	; (800246c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800242e:	695b      	ldr	r3, [r3, #20]
 8002430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002434:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002438:	d110      	bne.n	800245c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e00f      	b.n	800245e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800243e:	4b0b      	ldr	r3, [pc, #44]	; (800246c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002446:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800244a:	d007      	beq.n	800245c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800244c:	4b07      	ldr	r3, [pc, #28]	; (800246c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002454:	4a05      	ldr	r2, [pc, #20]	; (800246c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002456:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800245a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3714      	adds	r7, #20
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	40007000 	.word	0x40007000
 8002470:	20000000 	.word	0x20000000
 8002474:	431bde83 	.word	0x431bde83

08002478 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800247c:	4b05      	ldr	r3, [pc, #20]	; (8002494 <HAL_PWREx_EnableVddUSB+0x1c>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	4a04      	ldr	r2, [pc, #16]	; (8002494 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002482:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002486:	6053      	str	r3, [r2, #4]
}
 8002488:	bf00      	nop
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	40007000 	.word	0x40007000

08002498 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b088      	sub	sp, #32
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e3ca      	b.n	8002c40 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024aa:	4b97      	ldr	r3, [pc, #604]	; (8002708 <HAL_RCC_OscConfig+0x270>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f003 030c 	and.w	r3, r3, #12
 80024b2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024b4:	4b94      	ldr	r3, [pc, #592]	; (8002708 <HAL_RCC_OscConfig+0x270>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	f003 0303 	and.w	r3, r3, #3
 80024bc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0310 	and.w	r3, r3, #16
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f000 80e4 	beq.w	8002694 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d007      	beq.n	80024e2 <HAL_RCC_OscConfig+0x4a>
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	2b0c      	cmp	r3, #12
 80024d6:	f040 808b 	bne.w	80025f0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	f040 8087 	bne.w	80025f0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024e2:	4b89      	ldr	r3, [pc, #548]	; (8002708 <HAL_RCC_OscConfig+0x270>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d005      	beq.n	80024fa <HAL_RCC_OscConfig+0x62>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e3a2      	b.n	8002c40 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a1a      	ldr	r2, [r3, #32]
 80024fe:	4b82      	ldr	r3, [pc, #520]	; (8002708 <HAL_RCC_OscConfig+0x270>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0308 	and.w	r3, r3, #8
 8002506:	2b00      	cmp	r3, #0
 8002508:	d004      	beq.n	8002514 <HAL_RCC_OscConfig+0x7c>
 800250a:	4b7f      	ldr	r3, [pc, #508]	; (8002708 <HAL_RCC_OscConfig+0x270>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002512:	e005      	b.n	8002520 <HAL_RCC_OscConfig+0x88>
 8002514:	4b7c      	ldr	r3, [pc, #496]	; (8002708 <HAL_RCC_OscConfig+0x270>)
 8002516:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800251a:	091b      	lsrs	r3, r3, #4
 800251c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002520:	4293      	cmp	r3, r2
 8002522:	d223      	bcs.n	800256c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a1b      	ldr	r3, [r3, #32]
 8002528:	4618      	mov	r0, r3
 800252a:	f000 fd29 	bl	8002f80 <RCC_SetFlashLatencyFromMSIRange>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e383      	b.n	8002c40 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002538:	4b73      	ldr	r3, [pc, #460]	; (8002708 <HAL_RCC_OscConfig+0x270>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a72      	ldr	r2, [pc, #456]	; (8002708 <HAL_RCC_OscConfig+0x270>)
 800253e:	f043 0308 	orr.w	r3, r3, #8
 8002542:	6013      	str	r3, [r2, #0]
 8002544:	4b70      	ldr	r3, [pc, #448]	; (8002708 <HAL_RCC_OscConfig+0x270>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	496d      	ldr	r1, [pc, #436]	; (8002708 <HAL_RCC_OscConfig+0x270>)
 8002552:	4313      	orrs	r3, r2
 8002554:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002556:	4b6c      	ldr	r3, [pc, #432]	; (8002708 <HAL_RCC_OscConfig+0x270>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	69db      	ldr	r3, [r3, #28]
 8002562:	021b      	lsls	r3, r3, #8
 8002564:	4968      	ldr	r1, [pc, #416]	; (8002708 <HAL_RCC_OscConfig+0x270>)
 8002566:	4313      	orrs	r3, r2
 8002568:	604b      	str	r3, [r1, #4]
 800256a:	e025      	b.n	80025b8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800256c:	4b66      	ldr	r3, [pc, #408]	; (8002708 <HAL_RCC_OscConfig+0x270>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a65      	ldr	r2, [pc, #404]	; (8002708 <HAL_RCC_OscConfig+0x270>)
 8002572:	f043 0308 	orr.w	r3, r3, #8
 8002576:	6013      	str	r3, [r2, #0]
 8002578:	4b63      	ldr	r3, [pc, #396]	; (8002708 <HAL_RCC_OscConfig+0x270>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a1b      	ldr	r3, [r3, #32]
 8002584:	4960      	ldr	r1, [pc, #384]	; (8002708 <HAL_RCC_OscConfig+0x270>)
 8002586:	4313      	orrs	r3, r2
 8002588:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800258a:	4b5f      	ldr	r3, [pc, #380]	; (8002708 <HAL_RCC_OscConfig+0x270>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	69db      	ldr	r3, [r3, #28]
 8002596:	021b      	lsls	r3, r3, #8
 8002598:	495b      	ldr	r1, [pc, #364]	; (8002708 <HAL_RCC_OscConfig+0x270>)
 800259a:	4313      	orrs	r3, r2
 800259c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d109      	bne.n	80025b8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a1b      	ldr	r3, [r3, #32]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f000 fce9 	bl	8002f80 <RCC_SetFlashLatencyFromMSIRange>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e343      	b.n	8002c40 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025b8:	f000 fc4a 	bl	8002e50 <HAL_RCC_GetSysClockFreq>
 80025bc:	4602      	mov	r2, r0
 80025be:	4b52      	ldr	r3, [pc, #328]	; (8002708 <HAL_RCC_OscConfig+0x270>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	091b      	lsrs	r3, r3, #4
 80025c4:	f003 030f 	and.w	r3, r3, #15
 80025c8:	4950      	ldr	r1, [pc, #320]	; (800270c <HAL_RCC_OscConfig+0x274>)
 80025ca:	5ccb      	ldrb	r3, [r1, r3]
 80025cc:	f003 031f 	and.w	r3, r3, #31
 80025d0:	fa22 f303 	lsr.w	r3, r2, r3
 80025d4:	4a4e      	ldr	r2, [pc, #312]	; (8002710 <HAL_RCC_OscConfig+0x278>)
 80025d6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80025d8:	4b4e      	ldr	r3, [pc, #312]	; (8002714 <HAL_RCC_OscConfig+0x27c>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4618      	mov	r0, r3
 80025de:	f7fd ff2b 	bl	8000438 <HAL_InitTick>
 80025e2:	4603      	mov	r3, r0
 80025e4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80025e6:	7bfb      	ldrb	r3, [r7, #15]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d052      	beq.n	8002692 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80025ec:	7bfb      	ldrb	r3, [r7, #15]
 80025ee:	e327      	b.n	8002c40 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d032      	beq.n	800265e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80025f8:	4b43      	ldr	r3, [pc, #268]	; (8002708 <HAL_RCC_OscConfig+0x270>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a42      	ldr	r2, [pc, #264]	; (8002708 <HAL_RCC_OscConfig+0x270>)
 80025fe:	f043 0301 	orr.w	r3, r3, #1
 8002602:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002604:	f7fd ff68 	bl	80004d8 <HAL_GetTick>
 8002608:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800260a:	e008      	b.n	800261e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800260c:	f7fd ff64 	bl	80004d8 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b02      	cmp	r3, #2
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e310      	b.n	8002c40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800261e:	4b3a      	ldr	r3, [pc, #232]	; (8002708 <HAL_RCC_OscConfig+0x270>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d0f0      	beq.n	800260c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800262a:	4b37      	ldr	r3, [pc, #220]	; (8002708 <HAL_RCC_OscConfig+0x270>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a36      	ldr	r2, [pc, #216]	; (8002708 <HAL_RCC_OscConfig+0x270>)
 8002630:	f043 0308 	orr.w	r3, r3, #8
 8002634:	6013      	str	r3, [r2, #0]
 8002636:	4b34      	ldr	r3, [pc, #208]	; (8002708 <HAL_RCC_OscConfig+0x270>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a1b      	ldr	r3, [r3, #32]
 8002642:	4931      	ldr	r1, [pc, #196]	; (8002708 <HAL_RCC_OscConfig+0x270>)
 8002644:	4313      	orrs	r3, r2
 8002646:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002648:	4b2f      	ldr	r3, [pc, #188]	; (8002708 <HAL_RCC_OscConfig+0x270>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	69db      	ldr	r3, [r3, #28]
 8002654:	021b      	lsls	r3, r3, #8
 8002656:	492c      	ldr	r1, [pc, #176]	; (8002708 <HAL_RCC_OscConfig+0x270>)
 8002658:	4313      	orrs	r3, r2
 800265a:	604b      	str	r3, [r1, #4]
 800265c:	e01a      	b.n	8002694 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800265e:	4b2a      	ldr	r3, [pc, #168]	; (8002708 <HAL_RCC_OscConfig+0x270>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a29      	ldr	r2, [pc, #164]	; (8002708 <HAL_RCC_OscConfig+0x270>)
 8002664:	f023 0301 	bic.w	r3, r3, #1
 8002668:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800266a:	f7fd ff35 	bl	80004d8 <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002670:	e008      	b.n	8002684 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002672:	f7fd ff31 	bl	80004d8 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d901      	bls.n	8002684 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e2dd      	b.n	8002c40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002684:	4b20      	ldr	r3, [pc, #128]	; (8002708 <HAL_RCC_OscConfig+0x270>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d1f0      	bne.n	8002672 <HAL_RCC_OscConfig+0x1da>
 8002690:	e000      	b.n	8002694 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002692:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	2b00      	cmp	r3, #0
 800269e:	d074      	beq.n	800278a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	2b08      	cmp	r3, #8
 80026a4:	d005      	beq.n	80026b2 <HAL_RCC_OscConfig+0x21a>
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	2b0c      	cmp	r3, #12
 80026aa:	d10e      	bne.n	80026ca <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	2b03      	cmp	r3, #3
 80026b0:	d10b      	bne.n	80026ca <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b2:	4b15      	ldr	r3, [pc, #84]	; (8002708 <HAL_RCC_OscConfig+0x270>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d064      	beq.n	8002788 <HAL_RCC_OscConfig+0x2f0>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d160      	bne.n	8002788 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e2ba      	b.n	8002c40 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026d2:	d106      	bne.n	80026e2 <HAL_RCC_OscConfig+0x24a>
 80026d4:	4b0c      	ldr	r3, [pc, #48]	; (8002708 <HAL_RCC_OscConfig+0x270>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a0b      	ldr	r2, [pc, #44]	; (8002708 <HAL_RCC_OscConfig+0x270>)
 80026da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026de:	6013      	str	r3, [r2, #0]
 80026e0:	e026      	b.n	8002730 <HAL_RCC_OscConfig+0x298>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026ea:	d115      	bne.n	8002718 <HAL_RCC_OscConfig+0x280>
 80026ec:	4b06      	ldr	r3, [pc, #24]	; (8002708 <HAL_RCC_OscConfig+0x270>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a05      	ldr	r2, [pc, #20]	; (8002708 <HAL_RCC_OscConfig+0x270>)
 80026f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026f6:	6013      	str	r3, [r2, #0]
 80026f8:	4b03      	ldr	r3, [pc, #12]	; (8002708 <HAL_RCC_OscConfig+0x270>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a02      	ldr	r2, [pc, #8]	; (8002708 <HAL_RCC_OscConfig+0x270>)
 80026fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002702:	6013      	str	r3, [r2, #0]
 8002704:	e014      	b.n	8002730 <HAL_RCC_OscConfig+0x298>
 8002706:	bf00      	nop
 8002708:	40021000 	.word	0x40021000
 800270c:	08008e08 	.word	0x08008e08
 8002710:	20000000 	.word	0x20000000
 8002714:	20000004 	.word	0x20000004
 8002718:	4ba0      	ldr	r3, [pc, #640]	; (800299c <HAL_RCC_OscConfig+0x504>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a9f      	ldr	r2, [pc, #636]	; (800299c <HAL_RCC_OscConfig+0x504>)
 800271e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002722:	6013      	str	r3, [r2, #0]
 8002724:	4b9d      	ldr	r3, [pc, #628]	; (800299c <HAL_RCC_OscConfig+0x504>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a9c      	ldr	r2, [pc, #624]	; (800299c <HAL_RCC_OscConfig+0x504>)
 800272a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800272e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d013      	beq.n	8002760 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002738:	f7fd fece 	bl	80004d8 <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002740:	f7fd feca 	bl	80004d8 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b64      	cmp	r3, #100	; 0x64
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e276      	b.n	8002c40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002752:	4b92      	ldr	r3, [pc, #584]	; (800299c <HAL_RCC_OscConfig+0x504>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d0f0      	beq.n	8002740 <HAL_RCC_OscConfig+0x2a8>
 800275e:	e014      	b.n	800278a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002760:	f7fd feba 	bl	80004d8 <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002768:	f7fd feb6 	bl	80004d8 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b64      	cmp	r3, #100	; 0x64
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e262      	b.n	8002c40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800277a:	4b88      	ldr	r3, [pc, #544]	; (800299c <HAL_RCC_OscConfig+0x504>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1f0      	bne.n	8002768 <HAL_RCC_OscConfig+0x2d0>
 8002786:	e000      	b.n	800278a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002788:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d060      	beq.n	8002858 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	2b04      	cmp	r3, #4
 800279a:	d005      	beq.n	80027a8 <HAL_RCC_OscConfig+0x310>
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	2b0c      	cmp	r3, #12
 80027a0:	d119      	bne.n	80027d6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d116      	bne.n	80027d6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027a8:	4b7c      	ldr	r3, [pc, #496]	; (800299c <HAL_RCC_OscConfig+0x504>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d005      	beq.n	80027c0 <HAL_RCC_OscConfig+0x328>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d101      	bne.n	80027c0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e23f      	b.n	8002c40 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c0:	4b76      	ldr	r3, [pc, #472]	; (800299c <HAL_RCC_OscConfig+0x504>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	061b      	lsls	r3, r3, #24
 80027ce:	4973      	ldr	r1, [pc, #460]	; (800299c <HAL_RCC_OscConfig+0x504>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027d4:	e040      	b.n	8002858 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d023      	beq.n	8002826 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027de:	4b6f      	ldr	r3, [pc, #444]	; (800299c <HAL_RCC_OscConfig+0x504>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a6e      	ldr	r2, [pc, #440]	; (800299c <HAL_RCC_OscConfig+0x504>)
 80027e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ea:	f7fd fe75 	bl	80004d8 <HAL_GetTick>
 80027ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027f0:	e008      	b.n	8002804 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027f2:	f7fd fe71 	bl	80004d8 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e21d      	b.n	8002c40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002804:	4b65      	ldr	r3, [pc, #404]	; (800299c <HAL_RCC_OscConfig+0x504>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800280c:	2b00      	cmp	r3, #0
 800280e:	d0f0      	beq.n	80027f2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002810:	4b62      	ldr	r3, [pc, #392]	; (800299c <HAL_RCC_OscConfig+0x504>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	061b      	lsls	r3, r3, #24
 800281e:	495f      	ldr	r1, [pc, #380]	; (800299c <HAL_RCC_OscConfig+0x504>)
 8002820:	4313      	orrs	r3, r2
 8002822:	604b      	str	r3, [r1, #4]
 8002824:	e018      	b.n	8002858 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002826:	4b5d      	ldr	r3, [pc, #372]	; (800299c <HAL_RCC_OscConfig+0x504>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a5c      	ldr	r2, [pc, #368]	; (800299c <HAL_RCC_OscConfig+0x504>)
 800282c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002830:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002832:	f7fd fe51 	bl	80004d8 <HAL_GetTick>
 8002836:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002838:	e008      	b.n	800284c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800283a:	f7fd fe4d 	bl	80004d8 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e1f9      	b.n	8002c40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800284c:	4b53      	ldr	r3, [pc, #332]	; (800299c <HAL_RCC_OscConfig+0x504>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1f0      	bne.n	800283a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0308 	and.w	r3, r3, #8
 8002860:	2b00      	cmp	r3, #0
 8002862:	d03c      	beq.n	80028de <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	695b      	ldr	r3, [r3, #20]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d01c      	beq.n	80028a6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800286c:	4b4b      	ldr	r3, [pc, #300]	; (800299c <HAL_RCC_OscConfig+0x504>)
 800286e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002872:	4a4a      	ldr	r2, [pc, #296]	; (800299c <HAL_RCC_OscConfig+0x504>)
 8002874:	f043 0301 	orr.w	r3, r3, #1
 8002878:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800287c:	f7fd fe2c 	bl	80004d8 <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002884:	f7fd fe28 	bl	80004d8 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e1d4      	b.n	8002c40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002896:	4b41      	ldr	r3, [pc, #260]	; (800299c <HAL_RCC_OscConfig+0x504>)
 8002898:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800289c:	f003 0302 	and.w	r3, r3, #2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d0ef      	beq.n	8002884 <HAL_RCC_OscConfig+0x3ec>
 80028a4:	e01b      	b.n	80028de <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028a6:	4b3d      	ldr	r3, [pc, #244]	; (800299c <HAL_RCC_OscConfig+0x504>)
 80028a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028ac:	4a3b      	ldr	r2, [pc, #236]	; (800299c <HAL_RCC_OscConfig+0x504>)
 80028ae:	f023 0301 	bic.w	r3, r3, #1
 80028b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b6:	f7fd fe0f 	bl	80004d8 <HAL_GetTick>
 80028ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028bc:	e008      	b.n	80028d0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028be:	f7fd fe0b 	bl	80004d8 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e1b7      	b.n	8002c40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028d0:	4b32      	ldr	r3, [pc, #200]	; (800299c <HAL_RCC_OscConfig+0x504>)
 80028d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1ef      	bne.n	80028be <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0304 	and.w	r3, r3, #4
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	f000 80a6 	beq.w	8002a38 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ec:	2300      	movs	r3, #0
 80028ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80028f0:	4b2a      	ldr	r3, [pc, #168]	; (800299c <HAL_RCC_OscConfig+0x504>)
 80028f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10d      	bne.n	8002918 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028fc:	4b27      	ldr	r3, [pc, #156]	; (800299c <HAL_RCC_OscConfig+0x504>)
 80028fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002900:	4a26      	ldr	r2, [pc, #152]	; (800299c <HAL_RCC_OscConfig+0x504>)
 8002902:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002906:	6593      	str	r3, [r2, #88]	; 0x58
 8002908:	4b24      	ldr	r3, [pc, #144]	; (800299c <HAL_RCC_OscConfig+0x504>)
 800290a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800290c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002910:	60bb      	str	r3, [r7, #8]
 8002912:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002914:	2301      	movs	r3, #1
 8002916:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002918:	4b21      	ldr	r3, [pc, #132]	; (80029a0 <HAL_RCC_OscConfig+0x508>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002920:	2b00      	cmp	r3, #0
 8002922:	d118      	bne.n	8002956 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002924:	4b1e      	ldr	r3, [pc, #120]	; (80029a0 <HAL_RCC_OscConfig+0x508>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a1d      	ldr	r2, [pc, #116]	; (80029a0 <HAL_RCC_OscConfig+0x508>)
 800292a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800292e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002930:	f7fd fdd2 	bl	80004d8 <HAL_GetTick>
 8002934:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002936:	e008      	b.n	800294a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002938:	f7fd fdce 	bl	80004d8 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b02      	cmp	r3, #2
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e17a      	b.n	8002c40 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800294a:	4b15      	ldr	r3, [pc, #84]	; (80029a0 <HAL_RCC_OscConfig+0x508>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002952:	2b00      	cmp	r3, #0
 8002954:	d0f0      	beq.n	8002938 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d108      	bne.n	8002970 <HAL_RCC_OscConfig+0x4d8>
 800295e:	4b0f      	ldr	r3, [pc, #60]	; (800299c <HAL_RCC_OscConfig+0x504>)
 8002960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002964:	4a0d      	ldr	r2, [pc, #52]	; (800299c <HAL_RCC_OscConfig+0x504>)
 8002966:	f043 0301 	orr.w	r3, r3, #1
 800296a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800296e:	e029      	b.n	80029c4 <HAL_RCC_OscConfig+0x52c>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	2b05      	cmp	r3, #5
 8002976:	d115      	bne.n	80029a4 <HAL_RCC_OscConfig+0x50c>
 8002978:	4b08      	ldr	r3, [pc, #32]	; (800299c <HAL_RCC_OscConfig+0x504>)
 800297a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800297e:	4a07      	ldr	r2, [pc, #28]	; (800299c <HAL_RCC_OscConfig+0x504>)
 8002980:	f043 0304 	orr.w	r3, r3, #4
 8002984:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002988:	4b04      	ldr	r3, [pc, #16]	; (800299c <HAL_RCC_OscConfig+0x504>)
 800298a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800298e:	4a03      	ldr	r2, [pc, #12]	; (800299c <HAL_RCC_OscConfig+0x504>)
 8002990:	f043 0301 	orr.w	r3, r3, #1
 8002994:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002998:	e014      	b.n	80029c4 <HAL_RCC_OscConfig+0x52c>
 800299a:	bf00      	nop
 800299c:	40021000 	.word	0x40021000
 80029a0:	40007000 	.word	0x40007000
 80029a4:	4b9c      	ldr	r3, [pc, #624]	; (8002c18 <HAL_RCC_OscConfig+0x780>)
 80029a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029aa:	4a9b      	ldr	r2, [pc, #620]	; (8002c18 <HAL_RCC_OscConfig+0x780>)
 80029ac:	f023 0301 	bic.w	r3, r3, #1
 80029b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029b4:	4b98      	ldr	r3, [pc, #608]	; (8002c18 <HAL_RCC_OscConfig+0x780>)
 80029b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ba:	4a97      	ldr	r2, [pc, #604]	; (8002c18 <HAL_RCC_OscConfig+0x780>)
 80029bc:	f023 0304 	bic.w	r3, r3, #4
 80029c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d016      	beq.n	80029fa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029cc:	f7fd fd84 	bl	80004d8 <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029d2:	e00a      	b.n	80029ea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029d4:	f7fd fd80 	bl	80004d8 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e12a      	b.n	8002c40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029ea:	4b8b      	ldr	r3, [pc, #556]	; (8002c18 <HAL_RCC_OscConfig+0x780>)
 80029ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d0ed      	beq.n	80029d4 <HAL_RCC_OscConfig+0x53c>
 80029f8:	e015      	b.n	8002a26 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029fa:	f7fd fd6d 	bl	80004d8 <HAL_GetTick>
 80029fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a00:	e00a      	b.n	8002a18 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a02:	f7fd fd69 	bl	80004d8 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d901      	bls.n	8002a18 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e113      	b.n	8002c40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a18:	4b7f      	ldr	r3, [pc, #508]	; (8002c18 <HAL_RCC_OscConfig+0x780>)
 8002a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1ed      	bne.n	8002a02 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a26:	7ffb      	ldrb	r3, [r7, #31]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d105      	bne.n	8002a38 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a2c:	4b7a      	ldr	r3, [pc, #488]	; (8002c18 <HAL_RCC_OscConfig+0x780>)
 8002a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a30:	4a79      	ldr	r2, [pc, #484]	; (8002c18 <HAL_RCC_OscConfig+0x780>)
 8002a32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a36:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f000 80fe 	beq.w	8002c3e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	f040 80d0 	bne.w	8002bec <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002a4c:	4b72      	ldr	r3, [pc, #456]	; (8002c18 <HAL_RCC_OscConfig+0x780>)
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	f003 0203 	and.w	r2, r3, #3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d130      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d127      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a7c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d11f      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a8c:	2a07      	cmp	r2, #7
 8002a8e:	bf14      	ite	ne
 8002a90:	2201      	movne	r2, #1
 8002a92:	2200      	moveq	r2, #0
 8002a94:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d113      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa4:	085b      	lsrs	r3, r3, #1
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d109      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab8:	085b      	lsrs	r3, r3, #1
 8002aba:	3b01      	subs	r3, #1
 8002abc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d06e      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	2b0c      	cmp	r3, #12
 8002ac6:	d069      	beq.n	8002b9c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002ac8:	4b53      	ldr	r3, [pc, #332]	; (8002c18 <HAL_RCC_OscConfig+0x780>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d105      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002ad4:	4b50      	ldr	r3, [pc, #320]	; (8002c18 <HAL_RCC_OscConfig+0x780>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e0ad      	b.n	8002c40 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002ae4:	4b4c      	ldr	r3, [pc, #304]	; (8002c18 <HAL_RCC_OscConfig+0x780>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a4b      	ldr	r2, [pc, #300]	; (8002c18 <HAL_RCC_OscConfig+0x780>)
 8002aea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002aee:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002af0:	f7fd fcf2 	bl	80004d8 <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002af8:	f7fd fcee 	bl	80004d8 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e09a      	b.n	8002c40 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b0a:	4b43      	ldr	r3, [pc, #268]	; (8002c18 <HAL_RCC_OscConfig+0x780>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1f0      	bne.n	8002af8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b16:	4b40      	ldr	r3, [pc, #256]	; (8002c18 <HAL_RCC_OscConfig+0x780>)
 8002b18:	68da      	ldr	r2, [r3, #12]
 8002b1a:	4b40      	ldr	r3, [pc, #256]	; (8002c1c <HAL_RCC_OscConfig+0x784>)
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b26:	3a01      	subs	r2, #1
 8002b28:	0112      	lsls	r2, r2, #4
 8002b2a:	4311      	orrs	r1, r2
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b30:	0212      	lsls	r2, r2, #8
 8002b32:	4311      	orrs	r1, r2
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b38:	0852      	lsrs	r2, r2, #1
 8002b3a:	3a01      	subs	r2, #1
 8002b3c:	0552      	lsls	r2, r2, #21
 8002b3e:	4311      	orrs	r1, r2
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b44:	0852      	lsrs	r2, r2, #1
 8002b46:	3a01      	subs	r2, #1
 8002b48:	0652      	lsls	r2, r2, #25
 8002b4a:	4311      	orrs	r1, r2
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b50:	0912      	lsrs	r2, r2, #4
 8002b52:	0452      	lsls	r2, r2, #17
 8002b54:	430a      	orrs	r2, r1
 8002b56:	4930      	ldr	r1, [pc, #192]	; (8002c18 <HAL_RCC_OscConfig+0x780>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b5c:	4b2e      	ldr	r3, [pc, #184]	; (8002c18 <HAL_RCC_OscConfig+0x780>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a2d      	ldr	r2, [pc, #180]	; (8002c18 <HAL_RCC_OscConfig+0x780>)
 8002b62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b66:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b68:	4b2b      	ldr	r3, [pc, #172]	; (8002c18 <HAL_RCC_OscConfig+0x780>)
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	4a2a      	ldr	r2, [pc, #168]	; (8002c18 <HAL_RCC_OscConfig+0x780>)
 8002b6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b72:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b74:	f7fd fcb0 	bl	80004d8 <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b7c:	f7fd fcac 	bl	80004d8 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e058      	b.n	8002c40 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b8e:	4b22      	ldr	r3, [pc, #136]	; (8002c18 <HAL_RCC_OscConfig+0x780>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d0f0      	beq.n	8002b7c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b9a:	e050      	b.n	8002c3e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e04f      	b.n	8002c40 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ba0:	4b1d      	ldr	r3, [pc, #116]	; (8002c18 <HAL_RCC_OscConfig+0x780>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d148      	bne.n	8002c3e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002bac:	4b1a      	ldr	r3, [pc, #104]	; (8002c18 <HAL_RCC_OscConfig+0x780>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a19      	ldr	r2, [pc, #100]	; (8002c18 <HAL_RCC_OscConfig+0x780>)
 8002bb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bb6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bb8:	4b17      	ldr	r3, [pc, #92]	; (8002c18 <HAL_RCC_OscConfig+0x780>)
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	4a16      	ldr	r2, [pc, #88]	; (8002c18 <HAL_RCC_OscConfig+0x780>)
 8002bbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bc2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002bc4:	f7fd fc88 	bl	80004d8 <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bcc:	f7fd fc84 	bl	80004d8 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e030      	b.n	8002c40 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bde:	4b0e      	ldr	r3, [pc, #56]	; (8002c18 <HAL_RCC_OscConfig+0x780>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d0f0      	beq.n	8002bcc <HAL_RCC_OscConfig+0x734>
 8002bea:	e028      	b.n	8002c3e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	2b0c      	cmp	r3, #12
 8002bf0:	d023      	beq.n	8002c3a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bf2:	4b09      	ldr	r3, [pc, #36]	; (8002c18 <HAL_RCC_OscConfig+0x780>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a08      	ldr	r2, [pc, #32]	; (8002c18 <HAL_RCC_OscConfig+0x780>)
 8002bf8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bfe:	f7fd fc6b 	bl	80004d8 <HAL_GetTick>
 8002c02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c04:	e00c      	b.n	8002c20 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c06:	f7fd fc67 	bl	80004d8 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d905      	bls.n	8002c20 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e013      	b.n	8002c40 <HAL_RCC_OscConfig+0x7a8>
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c20:	4b09      	ldr	r3, [pc, #36]	; (8002c48 <HAL_RCC_OscConfig+0x7b0>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1ec      	bne.n	8002c06 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002c2c:	4b06      	ldr	r3, [pc, #24]	; (8002c48 <HAL_RCC_OscConfig+0x7b0>)
 8002c2e:	68da      	ldr	r2, [r3, #12]
 8002c30:	4905      	ldr	r1, [pc, #20]	; (8002c48 <HAL_RCC_OscConfig+0x7b0>)
 8002c32:	4b06      	ldr	r3, [pc, #24]	; (8002c4c <HAL_RCC_OscConfig+0x7b4>)
 8002c34:	4013      	ands	r3, r2
 8002c36:	60cb      	str	r3, [r1, #12]
 8002c38:	e001      	b.n	8002c3e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e000      	b.n	8002c40 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3720      	adds	r7, #32
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	40021000 	.word	0x40021000
 8002c4c:	feeefffc 	.word	0xfeeefffc

08002c50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d101      	bne.n	8002c64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e0e7      	b.n	8002e34 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c64:	4b75      	ldr	r3, [pc, #468]	; (8002e3c <HAL_RCC_ClockConfig+0x1ec>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0307 	and.w	r3, r3, #7
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d910      	bls.n	8002c94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c72:	4b72      	ldr	r3, [pc, #456]	; (8002e3c <HAL_RCC_ClockConfig+0x1ec>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f023 0207 	bic.w	r2, r3, #7
 8002c7a:	4970      	ldr	r1, [pc, #448]	; (8002e3c <HAL_RCC_ClockConfig+0x1ec>)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c82:	4b6e      	ldr	r3, [pc, #440]	; (8002e3c <HAL_RCC_ClockConfig+0x1ec>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0307 	and.w	r3, r3, #7
 8002c8a:	683a      	ldr	r2, [r7, #0]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d001      	beq.n	8002c94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e0cf      	b.n	8002e34 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d010      	beq.n	8002cc2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	4b66      	ldr	r3, [pc, #408]	; (8002e40 <HAL_RCC_ClockConfig+0x1f0>)
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d908      	bls.n	8002cc2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cb0:	4b63      	ldr	r3, [pc, #396]	; (8002e40 <HAL_RCC_ClockConfig+0x1f0>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	4960      	ldr	r1, [pc, #384]	; (8002e40 <HAL_RCC_ClockConfig+0x1f0>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d04c      	beq.n	8002d68 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	2b03      	cmp	r3, #3
 8002cd4:	d107      	bne.n	8002ce6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cd6:	4b5a      	ldr	r3, [pc, #360]	; (8002e40 <HAL_RCC_ClockConfig+0x1f0>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d121      	bne.n	8002d26 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e0a6      	b.n	8002e34 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d107      	bne.n	8002cfe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cee:	4b54      	ldr	r3, [pc, #336]	; (8002e40 <HAL_RCC_ClockConfig+0x1f0>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d115      	bne.n	8002d26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e09a      	b.n	8002e34 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d107      	bne.n	8002d16 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d06:	4b4e      	ldr	r3, [pc, #312]	; (8002e40 <HAL_RCC_ClockConfig+0x1f0>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d109      	bne.n	8002d26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e08e      	b.n	8002e34 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d16:	4b4a      	ldr	r3, [pc, #296]	; (8002e40 <HAL_RCC_ClockConfig+0x1f0>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d101      	bne.n	8002d26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e086      	b.n	8002e34 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d26:	4b46      	ldr	r3, [pc, #280]	; (8002e40 <HAL_RCC_ClockConfig+0x1f0>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f023 0203 	bic.w	r2, r3, #3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	4943      	ldr	r1, [pc, #268]	; (8002e40 <HAL_RCC_ClockConfig+0x1f0>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d38:	f7fd fbce 	bl	80004d8 <HAL_GetTick>
 8002d3c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d3e:	e00a      	b.n	8002d56 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d40:	f7fd fbca 	bl	80004d8 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e06e      	b.n	8002e34 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d56:	4b3a      	ldr	r3, [pc, #232]	; (8002e40 <HAL_RCC_ClockConfig+0x1f0>)
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f003 020c 	and.w	r2, r3, #12
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d1eb      	bne.n	8002d40 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d010      	beq.n	8002d96 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689a      	ldr	r2, [r3, #8]
 8002d78:	4b31      	ldr	r3, [pc, #196]	; (8002e40 <HAL_RCC_ClockConfig+0x1f0>)
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d208      	bcs.n	8002d96 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d84:	4b2e      	ldr	r3, [pc, #184]	; (8002e40 <HAL_RCC_ClockConfig+0x1f0>)
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	492b      	ldr	r1, [pc, #172]	; (8002e40 <HAL_RCC_ClockConfig+0x1f0>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d96:	4b29      	ldr	r3, [pc, #164]	; (8002e3c <HAL_RCC_ClockConfig+0x1ec>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0307 	and.w	r3, r3, #7
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d210      	bcs.n	8002dc6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002da4:	4b25      	ldr	r3, [pc, #148]	; (8002e3c <HAL_RCC_ClockConfig+0x1ec>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f023 0207 	bic.w	r2, r3, #7
 8002dac:	4923      	ldr	r1, [pc, #140]	; (8002e3c <HAL_RCC_ClockConfig+0x1ec>)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002db4:	4b21      	ldr	r3, [pc, #132]	; (8002e3c <HAL_RCC_ClockConfig+0x1ec>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0307 	and.w	r3, r3, #7
 8002dbc:	683a      	ldr	r2, [r7, #0]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d001      	beq.n	8002dc6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e036      	b.n	8002e34 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0304 	and.w	r3, r3, #4
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d008      	beq.n	8002de4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dd2:	4b1b      	ldr	r3, [pc, #108]	; (8002e40 <HAL_RCC_ClockConfig+0x1f0>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	4918      	ldr	r1, [pc, #96]	; (8002e40 <HAL_RCC_ClockConfig+0x1f0>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0308 	and.w	r3, r3, #8
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d009      	beq.n	8002e04 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002df0:	4b13      	ldr	r3, [pc, #76]	; (8002e40 <HAL_RCC_ClockConfig+0x1f0>)
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	4910      	ldr	r1, [pc, #64]	; (8002e40 <HAL_RCC_ClockConfig+0x1f0>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e04:	f000 f824 	bl	8002e50 <HAL_RCC_GetSysClockFreq>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	4b0d      	ldr	r3, [pc, #52]	; (8002e40 <HAL_RCC_ClockConfig+0x1f0>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	091b      	lsrs	r3, r3, #4
 8002e10:	f003 030f 	and.w	r3, r3, #15
 8002e14:	490b      	ldr	r1, [pc, #44]	; (8002e44 <HAL_RCC_ClockConfig+0x1f4>)
 8002e16:	5ccb      	ldrb	r3, [r1, r3]
 8002e18:	f003 031f 	and.w	r3, r3, #31
 8002e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e20:	4a09      	ldr	r2, [pc, #36]	; (8002e48 <HAL_RCC_ClockConfig+0x1f8>)
 8002e22:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e24:	4b09      	ldr	r3, [pc, #36]	; (8002e4c <HAL_RCC_ClockConfig+0x1fc>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7fd fb05 	bl	8000438 <HAL_InitTick>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	72fb      	strb	r3, [r7, #11]

  return status;
 8002e32:	7afb      	ldrb	r3, [r7, #11]
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3710      	adds	r7, #16
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	40022000 	.word	0x40022000
 8002e40:	40021000 	.word	0x40021000
 8002e44:	08008e08 	.word	0x08008e08
 8002e48:	20000000 	.word	0x20000000
 8002e4c:	20000004 	.word	0x20000004

08002e50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b089      	sub	sp, #36	; 0x24
 8002e54:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e56:	2300      	movs	r3, #0
 8002e58:	61fb      	str	r3, [r7, #28]
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e5e:	4b3e      	ldr	r3, [pc, #248]	; (8002f58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f003 030c 	and.w	r3, r3, #12
 8002e66:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e68:	4b3b      	ldr	r3, [pc, #236]	; (8002f58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	f003 0303 	and.w	r3, r3, #3
 8002e70:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d005      	beq.n	8002e84 <HAL_RCC_GetSysClockFreq+0x34>
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	2b0c      	cmp	r3, #12
 8002e7c:	d121      	bne.n	8002ec2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d11e      	bne.n	8002ec2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e84:	4b34      	ldr	r3, [pc, #208]	; (8002f58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0308 	and.w	r3, r3, #8
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d107      	bne.n	8002ea0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e90:	4b31      	ldr	r3, [pc, #196]	; (8002f58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e96:	0a1b      	lsrs	r3, r3, #8
 8002e98:	f003 030f 	and.w	r3, r3, #15
 8002e9c:	61fb      	str	r3, [r7, #28]
 8002e9e:	e005      	b.n	8002eac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ea0:	4b2d      	ldr	r3, [pc, #180]	; (8002f58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	091b      	lsrs	r3, r3, #4
 8002ea6:	f003 030f 	and.w	r3, r3, #15
 8002eaa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002eac:	4a2b      	ldr	r2, [pc, #172]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eb4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d10d      	bne.n	8002ed8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ec0:	e00a      	b.n	8002ed8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	2b04      	cmp	r3, #4
 8002ec6:	d102      	bne.n	8002ece <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ec8:	4b25      	ldr	r3, [pc, #148]	; (8002f60 <HAL_RCC_GetSysClockFreq+0x110>)
 8002eca:	61bb      	str	r3, [r7, #24]
 8002ecc:	e004      	b.n	8002ed8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	2b08      	cmp	r3, #8
 8002ed2:	d101      	bne.n	8002ed8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ed4:	4b23      	ldr	r3, [pc, #140]	; (8002f64 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ed6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	2b0c      	cmp	r3, #12
 8002edc:	d134      	bne.n	8002f48 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ede:	4b1e      	ldr	r3, [pc, #120]	; (8002f58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	f003 0303 	and.w	r3, r3, #3
 8002ee6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d003      	beq.n	8002ef6 <HAL_RCC_GetSysClockFreq+0xa6>
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	2b03      	cmp	r3, #3
 8002ef2:	d003      	beq.n	8002efc <HAL_RCC_GetSysClockFreq+0xac>
 8002ef4:	e005      	b.n	8002f02 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002ef6:	4b1a      	ldr	r3, [pc, #104]	; (8002f60 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ef8:	617b      	str	r3, [r7, #20]
      break;
 8002efa:	e005      	b.n	8002f08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002efc:	4b19      	ldr	r3, [pc, #100]	; (8002f64 <HAL_RCC_GetSysClockFreq+0x114>)
 8002efe:	617b      	str	r3, [r7, #20]
      break;
 8002f00:	e002      	b.n	8002f08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	617b      	str	r3, [r7, #20]
      break;
 8002f06:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f08:	4b13      	ldr	r3, [pc, #76]	; (8002f58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	091b      	lsrs	r3, r3, #4
 8002f0e:	f003 0307 	and.w	r3, r3, #7
 8002f12:	3301      	adds	r3, #1
 8002f14:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f16:	4b10      	ldr	r3, [pc, #64]	; (8002f58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	0a1b      	lsrs	r3, r3, #8
 8002f1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f20:	697a      	ldr	r2, [r7, #20]
 8002f22:	fb03 f202 	mul.w	r2, r3, r2
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f2c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f2e:	4b0a      	ldr	r3, [pc, #40]	; (8002f58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	0e5b      	lsrs	r3, r3, #25
 8002f34:	f003 0303 	and.w	r3, r3, #3
 8002f38:	3301      	adds	r3, #1
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f46:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002f48:	69bb      	ldr	r3, [r7, #24]
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3724      	adds	r7, #36	; 0x24
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	08008e18 	.word	0x08008e18
 8002f60:	00f42400 	.word	0x00f42400
 8002f64:	007a1200 	.word	0x007a1200

08002f68 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f6c:	4b03      	ldr	r3, [pc, #12]	; (8002f7c <HAL_RCC_GetHCLKFreq+0x14>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	20000000 	.word	0x20000000

08002f80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f88:	2300      	movs	r3, #0
 8002f8a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f8c:	4b2a      	ldr	r3, [pc, #168]	; (8003038 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d003      	beq.n	8002fa0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f98:	f7ff fa0a 	bl	80023b0 <HAL_PWREx_GetVoltageRange>
 8002f9c:	6178      	str	r0, [r7, #20]
 8002f9e:	e014      	b.n	8002fca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002fa0:	4b25      	ldr	r3, [pc, #148]	; (8003038 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa4:	4a24      	ldr	r2, [pc, #144]	; (8003038 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002faa:	6593      	str	r3, [r2, #88]	; 0x58
 8002fac:	4b22      	ldr	r3, [pc, #136]	; (8003038 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb4:	60fb      	str	r3, [r7, #12]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002fb8:	f7ff f9fa 	bl	80023b0 <HAL_PWREx_GetVoltageRange>
 8002fbc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002fbe:	4b1e      	ldr	r3, [pc, #120]	; (8003038 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc2:	4a1d      	ldr	r2, [pc, #116]	; (8003038 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fc8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fd0:	d10b      	bne.n	8002fea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b80      	cmp	r3, #128	; 0x80
 8002fd6:	d919      	bls.n	800300c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2ba0      	cmp	r3, #160	; 0xa0
 8002fdc:	d902      	bls.n	8002fe4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002fde:	2302      	movs	r3, #2
 8002fe0:	613b      	str	r3, [r7, #16]
 8002fe2:	e013      	b.n	800300c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	613b      	str	r3, [r7, #16]
 8002fe8:	e010      	b.n	800300c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2b80      	cmp	r3, #128	; 0x80
 8002fee:	d902      	bls.n	8002ff6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	613b      	str	r3, [r7, #16]
 8002ff4:	e00a      	b.n	800300c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2b80      	cmp	r3, #128	; 0x80
 8002ffa:	d102      	bne.n	8003002 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	613b      	str	r3, [r7, #16]
 8003000:	e004      	b.n	800300c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b70      	cmp	r3, #112	; 0x70
 8003006:	d101      	bne.n	800300c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003008:	2301      	movs	r3, #1
 800300a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800300c:	4b0b      	ldr	r3, [pc, #44]	; (800303c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f023 0207 	bic.w	r2, r3, #7
 8003014:	4909      	ldr	r1, [pc, #36]	; (800303c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	4313      	orrs	r3, r2
 800301a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800301c:	4b07      	ldr	r3, [pc, #28]	; (800303c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0307 	and.w	r3, r3, #7
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	429a      	cmp	r2, r3
 8003028:	d001      	beq.n	800302e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e000      	b.n	8003030 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3718      	adds	r7, #24
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	40021000 	.word	0x40021000
 800303c:	40022000 	.word	0x40022000

08003040 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003048:	2300      	movs	r3, #0
 800304a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800304c:	2300      	movs	r3, #0
 800304e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003058:	2b00      	cmp	r3, #0
 800305a:	d041      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003060:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003064:	d02a      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003066:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800306a:	d824      	bhi.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800306c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003070:	d008      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003072:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003076:	d81e      	bhi.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003078:	2b00      	cmp	r3, #0
 800307a:	d00a      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800307c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003080:	d010      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003082:	e018      	b.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003084:	4b86      	ldr	r3, [pc, #536]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	4a85      	ldr	r2, [pc, #532]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800308a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800308e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003090:	e015      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	3304      	adds	r3, #4
 8003096:	2100      	movs	r1, #0
 8003098:	4618      	mov	r0, r3
 800309a:	f000 fabb 	bl	8003614 <RCCEx_PLLSAI1_Config>
 800309e:	4603      	mov	r3, r0
 80030a0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030a2:	e00c      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	3320      	adds	r3, #32
 80030a8:	2100      	movs	r1, #0
 80030aa:	4618      	mov	r0, r3
 80030ac:	f000 fba6 	bl	80037fc <RCCEx_PLLSAI2_Config>
 80030b0:	4603      	mov	r3, r0
 80030b2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030b4:	e003      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	74fb      	strb	r3, [r7, #19]
      break;
 80030ba:	e000      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80030bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030be:	7cfb      	ldrb	r3, [r7, #19]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d10b      	bne.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030c4:	4b76      	ldr	r3, [pc, #472]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030d2:	4973      	ldr	r1, [pc, #460]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80030da:	e001      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030dc:	7cfb      	ldrb	r3, [r7, #19]
 80030de:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d041      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030f0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80030f4:	d02a      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80030f6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80030fa:	d824      	bhi.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80030fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003100:	d008      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003102:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003106:	d81e      	bhi.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00a      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800310c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003110:	d010      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003112:	e018      	b.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003114:	4b62      	ldr	r3, [pc, #392]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	4a61      	ldr	r2, [pc, #388]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800311a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800311e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003120:	e015      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	3304      	adds	r3, #4
 8003126:	2100      	movs	r1, #0
 8003128:	4618      	mov	r0, r3
 800312a:	f000 fa73 	bl	8003614 <RCCEx_PLLSAI1_Config>
 800312e:	4603      	mov	r3, r0
 8003130:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003132:	e00c      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	3320      	adds	r3, #32
 8003138:	2100      	movs	r1, #0
 800313a:	4618      	mov	r0, r3
 800313c:	f000 fb5e 	bl	80037fc <RCCEx_PLLSAI2_Config>
 8003140:	4603      	mov	r3, r0
 8003142:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003144:	e003      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	74fb      	strb	r3, [r7, #19]
      break;
 800314a:	e000      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800314c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800314e:	7cfb      	ldrb	r3, [r7, #19]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d10b      	bne.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003154:	4b52      	ldr	r3, [pc, #328]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800315a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003162:	494f      	ldr	r1, [pc, #316]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003164:	4313      	orrs	r3, r2
 8003166:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800316a:	e001      	b.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800316c:	7cfb      	ldrb	r3, [r7, #19]
 800316e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003178:	2b00      	cmp	r3, #0
 800317a:	f000 80a0 	beq.w	80032be <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800317e:	2300      	movs	r3, #0
 8003180:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003182:	4b47      	ldr	r3, [pc, #284]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d101      	bne.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800318e:	2301      	movs	r3, #1
 8003190:	e000      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003192:	2300      	movs	r3, #0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d00d      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003198:	4b41      	ldr	r3, [pc, #260]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800319a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800319c:	4a40      	ldr	r2, [pc, #256]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800319e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031a2:	6593      	str	r3, [r2, #88]	; 0x58
 80031a4:	4b3e      	ldr	r3, [pc, #248]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ac:	60bb      	str	r3, [r7, #8]
 80031ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031b0:	2301      	movs	r3, #1
 80031b2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031b4:	4b3b      	ldr	r3, [pc, #236]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a3a      	ldr	r2, [pc, #232]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80031ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031c0:	f7fd f98a 	bl	80004d8 <HAL_GetTick>
 80031c4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80031c6:	e009      	b.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031c8:	f7fd f986 	bl	80004d8 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d902      	bls.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	74fb      	strb	r3, [r7, #19]
        break;
 80031da:	e005      	b.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80031dc:	4b31      	ldr	r3, [pc, #196]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d0ef      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80031e8:	7cfb      	ldrb	r3, [r7, #19]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d15c      	bne.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80031ee:	4b2c      	ldr	r3, [pc, #176]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031f8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d01f      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	429a      	cmp	r2, r3
 800320a:	d019      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800320c:	4b24      	ldr	r3, [pc, #144]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800320e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003212:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003216:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003218:	4b21      	ldr	r3, [pc, #132]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800321a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800321e:	4a20      	ldr	r2, [pc, #128]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003224:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003228:	4b1d      	ldr	r3, [pc, #116]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800322a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800322e:	4a1c      	ldr	r2, [pc, #112]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003230:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003234:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003238:	4a19      	ldr	r2, [pc, #100]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b00      	cmp	r3, #0
 8003248:	d016      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800324a:	f7fd f945 	bl	80004d8 <HAL_GetTick>
 800324e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003250:	e00b      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003252:	f7fd f941 	bl	80004d8 <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003260:	4293      	cmp	r3, r2
 8003262:	d902      	bls.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	74fb      	strb	r3, [r7, #19]
            break;
 8003268:	e006      	b.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800326a:	4b0d      	ldr	r3, [pc, #52]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800326c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d0ec      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003278:	7cfb      	ldrb	r3, [r7, #19]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d10c      	bne.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800327e:	4b08      	ldr	r3, [pc, #32]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003284:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800328e:	4904      	ldr	r1, [pc, #16]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003290:	4313      	orrs	r3, r2
 8003292:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003296:	e009      	b.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003298:	7cfb      	ldrb	r3, [r7, #19]
 800329a:	74bb      	strb	r3, [r7, #18]
 800329c:	e006      	b.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800329e:	bf00      	nop
 80032a0:	40021000 	.word	0x40021000
 80032a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032a8:	7cfb      	ldrb	r3, [r7, #19]
 80032aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032ac:	7c7b      	ldrb	r3, [r7, #17]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d105      	bne.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032b2:	4b9e      	ldr	r3, [pc, #632]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b6:	4a9d      	ldr	r2, [pc, #628]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032bc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00a      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032ca:	4b98      	ldr	r3, [pc, #608]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d0:	f023 0203 	bic.w	r2, r3, #3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d8:	4994      	ldr	r1, [pc, #592]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00a      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032ec:	4b8f      	ldr	r3, [pc, #572]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f2:	f023 020c 	bic.w	r2, r3, #12
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032fa:	498c      	ldr	r1, [pc, #560]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0304 	and.w	r3, r3, #4
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00a      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800330e:	4b87      	ldr	r3, [pc, #540]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003314:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331c:	4983      	ldr	r1, [pc, #524]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800331e:	4313      	orrs	r3, r2
 8003320:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0308 	and.w	r3, r3, #8
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00a      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003330:	4b7e      	ldr	r3, [pc, #504]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003336:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333e:	497b      	ldr	r1, [pc, #492]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003340:	4313      	orrs	r3, r2
 8003342:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0310 	and.w	r3, r3, #16
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00a      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003352:	4b76      	ldr	r3, [pc, #472]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003358:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003360:	4972      	ldr	r1, [pc, #456]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003362:	4313      	orrs	r3, r2
 8003364:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0320 	and.w	r3, r3, #32
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00a      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003374:	4b6d      	ldr	r3, [pc, #436]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800337a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003382:	496a      	ldr	r1, [pc, #424]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003384:	4313      	orrs	r3, r2
 8003386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00a      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003396:	4b65      	ldr	r3, [pc, #404]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800339c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a4:	4961      	ldr	r1, [pc, #388]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00a      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80033b8:	4b5c      	ldr	r3, [pc, #368]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033c6:	4959      	ldr	r1, [pc, #356]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00a      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033da:	4b54      	ldr	r3, [pc, #336]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033e8:	4950      	ldr	r1, [pc, #320]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d00a      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033fc:	4b4b      	ldr	r3, [pc, #300]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003402:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800340a:	4948      	ldr	r1, [pc, #288]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800340c:	4313      	orrs	r3, r2
 800340e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00a      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800341e:	4b43      	ldr	r3, [pc, #268]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003424:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800342c:	493f      	ldr	r1, [pc, #252]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800342e:	4313      	orrs	r3, r2
 8003430:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d028      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003440:	4b3a      	ldr	r3, [pc, #232]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003446:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800344e:	4937      	ldr	r1, [pc, #220]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003450:	4313      	orrs	r3, r2
 8003452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800345a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800345e:	d106      	bne.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003460:	4b32      	ldr	r3, [pc, #200]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	4a31      	ldr	r2, [pc, #196]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003466:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800346a:	60d3      	str	r3, [r2, #12]
 800346c:	e011      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003472:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003476:	d10c      	bne.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	3304      	adds	r3, #4
 800347c:	2101      	movs	r1, #1
 800347e:	4618      	mov	r0, r3
 8003480:	f000 f8c8 	bl	8003614 <RCCEx_PLLSAI1_Config>
 8003484:	4603      	mov	r3, r0
 8003486:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003488:	7cfb      	ldrb	r3, [r7, #19]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d001      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800348e:	7cfb      	ldrb	r3, [r7, #19]
 8003490:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d028      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800349e:	4b23      	ldr	r3, [pc, #140]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ac:	491f      	ldr	r1, [pc, #124]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034bc:	d106      	bne.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034be:	4b1b      	ldr	r3, [pc, #108]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	4a1a      	ldr	r2, [pc, #104]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034c8:	60d3      	str	r3, [r2, #12]
 80034ca:	e011      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034d4:	d10c      	bne.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	3304      	adds	r3, #4
 80034da:	2101      	movs	r1, #1
 80034dc:	4618      	mov	r0, r3
 80034de:	f000 f899 	bl	8003614 <RCCEx_PLLSAI1_Config>
 80034e2:	4603      	mov	r3, r0
 80034e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034e6:	7cfb      	ldrb	r3, [r7, #19]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d001      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80034ec:	7cfb      	ldrb	r3, [r7, #19]
 80034ee:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d02b      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80034fc:	4b0b      	ldr	r3, [pc, #44]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003502:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800350a:	4908      	ldr	r1, [pc, #32]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800350c:	4313      	orrs	r3, r2
 800350e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003516:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800351a:	d109      	bne.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800351c:	4b03      	ldr	r3, [pc, #12]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	4a02      	ldr	r2, [pc, #8]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003522:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003526:	60d3      	str	r3, [r2, #12]
 8003528:	e014      	b.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800352a:	bf00      	nop
 800352c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003534:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003538:	d10c      	bne.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	3304      	adds	r3, #4
 800353e:	2101      	movs	r1, #1
 8003540:	4618      	mov	r0, r3
 8003542:	f000 f867 	bl	8003614 <RCCEx_PLLSAI1_Config>
 8003546:	4603      	mov	r3, r0
 8003548:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800354a:	7cfb      	ldrb	r3, [r7, #19]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d001      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003550:	7cfb      	ldrb	r3, [r7, #19]
 8003552:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d02f      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003560:	4b2b      	ldr	r3, [pc, #172]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003566:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800356e:	4928      	ldr	r1, [pc, #160]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003570:	4313      	orrs	r3, r2
 8003572:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800357a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800357e:	d10d      	bne.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	3304      	adds	r3, #4
 8003584:	2102      	movs	r1, #2
 8003586:	4618      	mov	r0, r3
 8003588:	f000 f844 	bl	8003614 <RCCEx_PLLSAI1_Config>
 800358c:	4603      	mov	r3, r0
 800358e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003590:	7cfb      	ldrb	r3, [r7, #19]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d014      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003596:	7cfb      	ldrb	r3, [r7, #19]
 8003598:	74bb      	strb	r3, [r7, #18]
 800359a:	e011      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035a4:	d10c      	bne.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	3320      	adds	r3, #32
 80035aa:	2102      	movs	r1, #2
 80035ac:	4618      	mov	r0, r3
 80035ae:	f000 f925 	bl	80037fc <RCCEx_PLLSAI2_Config>
 80035b2:	4603      	mov	r3, r0
 80035b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035b6:	7cfb      	ldrb	r3, [r7, #19]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d001      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80035bc:	7cfb      	ldrb	r3, [r7, #19]
 80035be:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00a      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80035cc:	4b10      	ldr	r3, [pc, #64]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035da:	490d      	ldr	r1, [pc, #52]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00b      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80035ee:	4b08      	ldr	r3, [pc, #32]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035fe:	4904      	ldr	r1, [pc, #16]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003600:	4313      	orrs	r3, r2
 8003602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003606:	7cbb      	ldrb	r3, [r7, #18]
}
 8003608:	4618      	mov	r0, r3
 800360a:	3718      	adds	r7, #24
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	40021000 	.word	0x40021000

08003614 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800361e:	2300      	movs	r3, #0
 8003620:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003622:	4b75      	ldr	r3, [pc, #468]	; (80037f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	f003 0303 	and.w	r3, r3, #3
 800362a:	2b00      	cmp	r3, #0
 800362c:	d018      	beq.n	8003660 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800362e:	4b72      	ldr	r3, [pc, #456]	; (80037f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	f003 0203 	and.w	r2, r3, #3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	429a      	cmp	r2, r3
 800363c:	d10d      	bne.n	800365a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
       ||
 8003642:	2b00      	cmp	r3, #0
 8003644:	d009      	beq.n	800365a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003646:	4b6c      	ldr	r3, [pc, #432]	; (80037f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	091b      	lsrs	r3, r3, #4
 800364c:	f003 0307 	and.w	r3, r3, #7
 8003650:	1c5a      	adds	r2, r3, #1
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
       ||
 8003656:	429a      	cmp	r2, r3
 8003658:	d047      	beq.n	80036ea <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	73fb      	strb	r3, [r7, #15]
 800365e:	e044      	b.n	80036ea <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2b03      	cmp	r3, #3
 8003666:	d018      	beq.n	800369a <RCCEx_PLLSAI1_Config+0x86>
 8003668:	2b03      	cmp	r3, #3
 800366a:	d825      	bhi.n	80036b8 <RCCEx_PLLSAI1_Config+0xa4>
 800366c:	2b01      	cmp	r3, #1
 800366e:	d002      	beq.n	8003676 <RCCEx_PLLSAI1_Config+0x62>
 8003670:	2b02      	cmp	r3, #2
 8003672:	d009      	beq.n	8003688 <RCCEx_PLLSAI1_Config+0x74>
 8003674:	e020      	b.n	80036b8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003676:	4b60      	ldr	r3, [pc, #384]	; (80037f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d11d      	bne.n	80036be <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003686:	e01a      	b.n	80036be <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003688:	4b5b      	ldr	r3, [pc, #364]	; (80037f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003690:	2b00      	cmp	r3, #0
 8003692:	d116      	bne.n	80036c2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003698:	e013      	b.n	80036c2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800369a:	4b57      	ldr	r3, [pc, #348]	; (80037f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d10f      	bne.n	80036c6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80036a6:	4b54      	ldr	r3, [pc, #336]	; (80037f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d109      	bne.n	80036c6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80036b6:	e006      	b.n	80036c6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	73fb      	strb	r3, [r7, #15]
      break;
 80036bc:	e004      	b.n	80036c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80036be:	bf00      	nop
 80036c0:	e002      	b.n	80036c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80036c2:	bf00      	nop
 80036c4:	e000      	b.n	80036c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80036c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80036c8:	7bfb      	ldrb	r3, [r7, #15]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10d      	bne.n	80036ea <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80036ce:	4b4a      	ldr	r3, [pc, #296]	; (80037f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6819      	ldr	r1, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	3b01      	subs	r3, #1
 80036e0:	011b      	lsls	r3, r3, #4
 80036e2:	430b      	orrs	r3, r1
 80036e4:	4944      	ldr	r1, [pc, #272]	; (80037f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80036ea:	7bfb      	ldrb	r3, [r7, #15]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d17d      	bne.n	80037ec <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80036f0:	4b41      	ldr	r3, [pc, #260]	; (80037f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a40      	ldr	r2, [pc, #256]	; (80037f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80036fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036fc:	f7fc feec 	bl	80004d8 <HAL_GetTick>
 8003700:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003702:	e009      	b.n	8003718 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003704:	f7fc fee8 	bl	80004d8 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b02      	cmp	r3, #2
 8003710:	d902      	bls.n	8003718 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	73fb      	strb	r3, [r7, #15]
        break;
 8003716:	e005      	b.n	8003724 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003718:	4b37      	ldr	r3, [pc, #220]	; (80037f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d1ef      	bne.n	8003704 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003724:	7bfb      	ldrb	r3, [r7, #15]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d160      	bne.n	80037ec <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d111      	bne.n	8003754 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003730:	4b31      	ldr	r3, [pc, #196]	; (80037f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003738:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	6892      	ldr	r2, [r2, #8]
 8003740:	0211      	lsls	r1, r2, #8
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	68d2      	ldr	r2, [r2, #12]
 8003746:	0912      	lsrs	r2, r2, #4
 8003748:	0452      	lsls	r2, r2, #17
 800374a:	430a      	orrs	r2, r1
 800374c:	492a      	ldr	r1, [pc, #168]	; (80037f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800374e:	4313      	orrs	r3, r2
 8003750:	610b      	str	r3, [r1, #16]
 8003752:	e027      	b.n	80037a4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d112      	bne.n	8003780 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800375a:	4b27      	ldr	r3, [pc, #156]	; (80037f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003762:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	6892      	ldr	r2, [r2, #8]
 800376a:	0211      	lsls	r1, r2, #8
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	6912      	ldr	r2, [r2, #16]
 8003770:	0852      	lsrs	r2, r2, #1
 8003772:	3a01      	subs	r2, #1
 8003774:	0552      	lsls	r2, r2, #21
 8003776:	430a      	orrs	r2, r1
 8003778:	491f      	ldr	r1, [pc, #124]	; (80037f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800377a:	4313      	orrs	r3, r2
 800377c:	610b      	str	r3, [r1, #16]
 800377e:	e011      	b.n	80037a4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003780:	4b1d      	ldr	r3, [pc, #116]	; (80037f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003788:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	6892      	ldr	r2, [r2, #8]
 8003790:	0211      	lsls	r1, r2, #8
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	6952      	ldr	r2, [r2, #20]
 8003796:	0852      	lsrs	r2, r2, #1
 8003798:	3a01      	subs	r2, #1
 800379a:	0652      	lsls	r2, r2, #25
 800379c:	430a      	orrs	r2, r1
 800379e:	4916      	ldr	r1, [pc, #88]	; (80037f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80037a4:	4b14      	ldr	r3, [pc, #80]	; (80037f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a13      	ldr	r2, [pc, #76]	; (80037f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80037ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037b0:	f7fc fe92 	bl	80004d8 <HAL_GetTick>
 80037b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80037b6:	e009      	b.n	80037cc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037b8:	f7fc fe8e 	bl	80004d8 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d902      	bls.n	80037cc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	73fb      	strb	r3, [r7, #15]
          break;
 80037ca:	e005      	b.n	80037d8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80037cc:	4b0a      	ldr	r3, [pc, #40]	; (80037f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d0ef      	beq.n	80037b8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80037d8:	7bfb      	ldrb	r3, [r7, #15]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d106      	bne.n	80037ec <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80037de:	4b06      	ldr	r3, [pc, #24]	; (80037f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037e0:	691a      	ldr	r2, [r3, #16]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	4904      	ldr	r1, [pc, #16]	; (80037f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80037ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3710      	adds	r7, #16
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	40021000 	.word	0x40021000

080037fc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003806:	2300      	movs	r3, #0
 8003808:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800380a:	4b6a      	ldr	r3, [pc, #424]	; (80039b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	f003 0303 	and.w	r3, r3, #3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d018      	beq.n	8003848 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003816:	4b67      	ldr	r3, [pc, #412]	; (80039b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	f003 0203 	and.w	r2, r3, #3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	429a      	cmp	r2, r3
 8003824:	d10d      	bne.n	8003842 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
       ||
 800382a:	2b00      	cmp	r3, #0
 800382c:	d009      	beq.n	8003842 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800382e:	4b61      	ldr	r3, [pc, #388]	; (80039b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	091b      	lsrs	r3, r3, #4
 8003834:	f003 0307 	and.w	r3, r3, #7
 8003838:	1c5a      	adds	r2, r3, #1
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
       ||
 800383e:	429a      	cmp	r2, r3
 8003840:	d047      	beq.n	80038d2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	73fb      	strb	r3, [r7, #15]
 8003846:	e044      	b.n	80038d2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2b03      	cmp	r3, #3
 800384e:	d018      	beq.n	8003882 <RCCEx_PLLSAI2_Config+0x86>
 8003850:	2b03      	cmp	r3, #3
 8003852:	d825      	bhi.n	80038a0 <RCCEx_PLLSAI2_Config+0xa4>
 8003854:	2b01      	cmp	r3, #1
 8003856:	d002      	beq.n	800385e <RCCEx_PLLSAI2_Config+0x62>
 8003858:	2b02      	cmp	r3, #2
 800385a:	d009      	beq.n	8003870 <RCCEx_PLLSAI2_Config+0x74>
 800385c:	e020      	b.n	80038a0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800385e:	4b55      	ldr	r3, [pc, #340]	; (80039b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d11d      	bne.n	80038a6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800386e:	e01a      	b.n	80038a6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003870:	4b50      	ldr	r3, [pc, #320]	; (80039b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003878:	2b00      	cmp	r3, #0
 800387a:	d116      	bne.n	80038aa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003880:	e013      	b.n	80038aa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003882:	4b4c      	ldr	r3, [pc, #304]	; (80039b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d10f      	bne.n	80038ae <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800388e:	4b49      	ldr	r3, [pc, #292]	; (80039b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d109      	bne.n	80038ae <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800389e:	e006      	b.n	80038ae <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	73fb      	strb	r3, [r7, #15]
      break;
 80038a4:	e004      	b.n	80038b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80038a6:	bf00      	nop
 80038a8:	e002      	b.n	80038b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80038aa:	bf00      	nop
 80038ac:	e000      	b.n	80038b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80038ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80038b0:	7bfb      	ldrb	r3, [r7, #15]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10d      	bne.n	80038d2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80038b6:	4b3f      	ldr	r3, [pc, #252]	; (80039b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6819      	ldr	r1, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	3b01      	subs	r3, #1
 80038c8:	011b      	lsls	r3, r3, #4
 80038ca:	430b      	orrs	r3, r1
 80038cc:	4939      	ldr	r1, [pc, #228]	; (80039b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80038d2:	7bfb      	ldrb	r3, [r7, #15]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d167      	bne.n	80039a8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80038d8:	4b36      	ldr	r3, [pc, #216]	; (80039b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a35      	ldr	r2, [pc, #212]	; (80039b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038e4:	f7fc fdf8 	bl	80004d8 <HAL_GetTick>
 80038e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80038ea:	e009      	b.n	8003900 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80038ec:	f7fc fdf4 	bl	80004d8 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d902      	bls.n	8003900 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	73fb      	strb	r3, [r7, #15]
        break;
 80038fe:	e005      	b.n	800390c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003900:	4b2c      	ldr	r3, [pc, #176]	; (80039b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1ef      	bne.n	80038ec <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800390c:	7bfb      	ldrb	r3, [r7, #15]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d14a      	bne.n	80039a8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d111      	bne.n	800393c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003918:	4b26      	ldr	r3, [pc, #152]	; (80039b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003920:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	6892      	ldr	r2, [r2, #8]
 8003928:	0211      	lsls	r1, r2, #8
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	68d2      	ldr	r2, [r2, #12]
 800392e:	0912      	lsrs	r2, r2, #4
 8003930:	0452      	lsls	r2, r2, #17
 8003932:	430a      	orrs	r2, r1
 8003934:	491f      	ldr	r1, [pc, #124]	; (80039b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003936:	4313      	orrs	r3, r2
 8003938:	614b      	str	r3, [r1, #20]
 800393a:	e011      	b.n	8003960 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800393c:	4b1d      	ldr	r3, [pc, #116]	; (80039b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003944:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	6892      	ldr	r2, [r2, #8]
 800394c:	0211      	lsls	r1, r2, #8
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	6912      	ldr	r2, [r2, #16]
 8003952:	0852      	lsrs	r2, r2, #1
 8003954:	3a01      	subs	r2, #1
 8003956:	0652      	lsls	r2, r2, #25
 8003958:	430a      	orrs	r2, r1
 800395a:	4916      	ldr	r1, [pc, #88]	; (80039b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800395c:	4313      	orrs	r3, r2
 800395e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003960:	4b14      	ldr	r3, [pc, #80]	; (80039b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a13      	ldr	r2, [pc, #76]	; (80039b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003966:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800396a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800396c:	f7fc fdb4 	bl	80004d8 <HAL_GetTick>
 8003970:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003972:	e009      	b.n	8003988 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003974:	f7fc fdb0 	bl	80004d8 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b02      	cmp	r3, #2
 8003980:	d902      	bls.n	8003988 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	73fb      	strb	r3, [r7, #15]
          break;
 8003986:	e005      	b.n	8003994 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003988:	4b0a      	ldr	r3, [pc, #40]	; (80039b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d0ef      	beq.n	8003974 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003994:	7bfb      	ldrb	r3, [r7, #15]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d106      	bne.n	80039a8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800399a:	4b06      	ldr	r3, [pc, #24]	; (80039b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800399c:	695a      	ldr	r2, [r3, #20]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	4904      	ldr	r1, [pc, #16]	; (80039b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80039a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	40021000 	.word	0x40021000

080039b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80039b8:	b084      	sub	sp, #16
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b084      	sub	sp, #16
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
 80039c2:	f107 001c 	add.w	r0, r7, #28
 80039c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f001 faf6 	bl	8004fc8 <USB_CoreReset>
 80039dc:	4603      	mov	r3, r0
 80039de:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80039e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d106      	bne.n	80039f4 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	639a      	str	r2, [r3, #56]	; 0x38
 80039f2:	e005      	b.n	8003a00 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8003a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a0c:	b004      	add	sp, #16
 8003a0e:	4770      	bx	lr

08003a10 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b087      	sub	sp, #28
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003a1e:	79fb      	ldrb	r3, [r7, #7]
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d165      	bne.n	8003af0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	4a3e      	ldr	r2, [pc, #248]	; (8003b20 <USB_SetTurnaroundTime+0x110>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d906      	bls.n	8003a3a <USB_SetTurnaroundTime+0x2a>
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	4a3d      	ldr	r2, [pc, #244]	; (8003b24 <USB_SetTurnaroundTime+0x114>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d202      	bcs.n	8003a3a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003a34:	230f      	movs	r3, #15
 8003a36:	617b      	str	r3, [r7, #20]
 8003a38:	e05c      	b.n	8003af4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	4a39      	ldr	r2, [pc, #228]	; (8003b24 <USB_SetTurnaroundTime+0x114>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d306      	bcc.n	8003a50 <USB_SetTurnaroundTime+0x40>
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	4a38      	ldr	r2, [pc, #224]	; (8003b28 <USB_SetTurnaroundTime+0x118>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d202      	bcs.n	8003a50 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003a4a:	230e      	movs	r3, #14
 8003a4c:	617b      	str	r3, [r7, #20]
 8003a4e:	e051      	b.n	8003af4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	4a35      	ldr	r2, [pc, #212]	; (8003b28 <USB_SetTurnaroundTime+0x118>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d306      	bcc.n	8003a66 <USB_SetTurnaroundTime+0x56>
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	4a34      	ldr	r2, [pc, #208]	; (8003b2c <USB_SetTurnaroundTime+0x11c>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d202      	bcs.n	8003a66 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003a60:	230d      	movs	r3, #13
 8003a62:	617b      	str	r3, [r7, #20]
 8003a64:	e046      	b.n	8003af4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	4a30      	ldr	r2, [pc, #192]	; (8003b2c <USB_SetTurnaroundTime+0x11c>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d306      	bcc.n	8003a7c <USB_SetTurnaroundTime+0x6c>
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	4a2f      	ldr	r2, [pc, #188]	; (8003b30 <USB_SetTurnaroundTime+0x120>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d802      	bhi.n	8003a7c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003a76:	230c      	movs	r3, #12
 8003a78:	617b      	str	r3, [r7, #20]
 8003a7a:	e03b      	b.n	8003af4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	4a2c      	ldr	r2, [pc, #176]	; (8003b30 <USB_SetTurnaroundTime+0x120>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d906      	bls.n	8003a92 <USB_SetTurnaroundTime+0x82>
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	4a2b      	ldr	r2, [pc, #172]	; (8003b34 <USB_SetTurnaroundTime+0x124>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d802      	bhi.n	8003a92 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003a8c:	230b      	movs	r3, #11
 8003a8e:	617b      	str	r3, [r7, #20]
 8003a90:	e030      	b.n	8003af4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	4a27      	ldr	r2, [pc, #156]	; (8003b34 <USB_SetTurnaroundTime+0x124>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d906      	bls.n	8003aa8 <USB_SetTurnaroundTime+0x98>
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	4a26      	ldr	r2, [pc, #152]	; (8003b38 <USB_SetTurnaroundTime+0x128>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d802      	bhi.n	8003aa8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003aa2:	230a      	movs	r3, #10
 8003aa4:	617b      	str	r3, [r7, #20]
 8003aa6:	e025      	b.n	8003af4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	4a23      	ldr	r2, [pc, #140]	; (8003b38 <USB_SetTurnaroundTime+0x128>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d906      	bls.n	8003abe <USB_SetTurnaroundTime+0xae>
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	4a22      	ldr	r2, [pc, #136]	; (8003b3c <USB_SetTurnaroundTime+0x12c>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d202      	bcs.n	8003abe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003ab8:	2309      	movs	r3, #9
 8003aba:	617b      	str	r3, [r7, #20]
 8003abc:	e01a      	b.n	8003af4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	4a1e      	ldr	r2, [pc, #120]	; (8003b3c <USB_SetTurnaroundTime+0x12c>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d306      	bcc.n	8003ad4 <USB_SetTurnaroundTime+0xc4>
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	4a1d      	ldr	r2, [pc, #116]	; (8003b40 <USB_SetTurnaroundTime+0x130>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d802      	bhi.n	8003ad4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003ace:	2308      	movs	r3, #8
 8003ad0:	617b      	str	r3, [r7, #20]
 8003ad2:	e00f      	b.n	8003af4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	4a1a      	ldr	r2, [pc, #104]	; (8003b40 <USB_SetTurnaroundTime+0x130>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d906      	bls.n	8003aea <USB_SetTurnaroundTime+0xda>
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	4a19      	ldr	r2, [pc, #100]	; (8003b44 <USB_SetTurnaroundTime+0x134>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d202      	bcs.n	8003aea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003ae4:	2307      	movs	r3, #7
 8003ae6:	617b      	str	r3, [r7, #20]
 8003ae8:	e004      	b.n	8003af4 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003aea:	2306      	movs	r3, #6
 8003aec:	617b      	str	r3, [r7, #20]
 8003aee:	e001      	b.n	8003af4 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003af0:	2309      	movs	r3, #9
 8003af2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	68da      	ldr	r2, [r3, #12]
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	029b      	lsls	r3, r3, #10
 8003b08:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003b0c:	431a      	orrs	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	371c      	adds	r7, #28
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr
 8003b20:	00d8acbf 	.word	0x00d8acbf
 8003b24:	00e4e1c0 	.word	0x00e4e1c0
 8003b28:	00f42400 	.word	0x00f42400
 8003b2c:	01067380 	.word	0x01067380
 8003b30:	011a499f 	.word	0x011a499f
 8003b34:	01312cff 	.word	0x01312cff
 8003b38:	014ca43f 	.word	0x014ca43f
 8003b3c:	016e3600 	.word	0x016e3600
 8003b40:	01a6ab1f 	.word	0x01a6ab1f
 8003b44:	01e84800 	.word	0x01e84800

08003b48 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f043 0201 	orr.w	r2, r3, #1
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr

08003b6a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	b083      	sub	sp, #12
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f023 0201 	bic.w	r2, r3, #1
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003b7e:	2300      	movs	r3, #0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	460b      	mov	r3, r1
 8003b96:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003ba8:	78fb      	ldrb	r3, [r7, #3]
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d115      	bne.n	8003bda <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003bba:	2001      	movs	r0, #1
 8003bbc:	f7fc fc98 	bl	80004f0 <HAL_Delay>
      ms++;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f001 f985 	bl	8004ed6 <USB_GetMode>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d01e      	beq.n	8003c10 <USB_SetCurrentMode+0x84>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2b31      	cmp	r3, #49	; 0x31
 8003bd6:	d9f0      	bls.n	8003bba <USB_SetCurrentMode+0x2e>
 8003bd8:	e01a      	b.n	8003c10 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003bda:	78fb      	ldrb	r3, [r7, #3]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d115      	bne.n	8003c0c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003bec:	2001      	movs	r0, #1
 8003bee:	f7fc fc7f 	bl	80004f0 <HAL_Delay>
      ms++;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f001 f96c 	bl	8004ed6 <USB_GetMode>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d005      	beq.n	8003c10 <USB_SetCurrentMode+0x84>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2b31      	cmp	r3, #49	; 0x31
 8003c08:	d9f0      	bls.n	8003bec <USB_SetCurrentMode+0x60>
 8003c0a:	e001      	b.n	8003c10 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e005      	b.n	8003c1c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2b32      	cmp	r3, #50	; 0x32
 8003c14:	d101      	bne.n	8003c1a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e000      	b.n	8003c1c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3710      	adds	r7, #16
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c24:	b084      	sub	sp, #16
 8003c26:	b580      	push	{r7, lr}
 8003c28:	b086      	sub	sp, #24
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
 8003c2e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003c32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003c36:	2300      	movs	r3, #0
 8003c38:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003c3e:	2300      	movs	r3, #0
 8003c40:	613b      	str	r3, [r7, #16]
 8003c42:	e009      	b.n	8003c58 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	3340      	adds	r3, #64	; 0x40
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	4413      	add	r3, r2
 8003c4e:	2200      	movs	r2, #0
 8003c50:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	3301      	adds	r3, #1
 8003c56:	613b      	str	r3, [r7, #16]
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	2b0e      	cmp	r3, #14
 8003c5c:	d9f2      	bls.n	8003c44 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003c5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d11c      	bne.n	8003c9e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c72:	f043 0302 	orr.w	r3, r3, #2
 8003c76:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	601a      	str	r2, [r3, #0]
 8003c9c:	e005      	b.n	8003caa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	680b      	ldr	r3, [r1, #0]
 8003cc8:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003cca:	2103      	movs	r1, #3
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f000 f959 	bl	8003f84 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003cd2:	2110      	movs	r1, #16
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f000 f8f1 	bl	8003ebc <USB_FlushTxFifo>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d001      	beq.n	8003ce4 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f000 f91d 	bl	8003f24 <USB_FlushRxFifo>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d001      	beq.n	8003cf4 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d06:	461a      	mov	r2, r3
 8003d08:	2300      	movs	r3, #0
 8003d0a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d12:	461a      	mov	r2, r3
 8003d14:	2300      	movs	r3, #0
 8003d16:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d18:	2300      	movs	r3, #0
 8003d1a:	613b      	str	r3, [r7, #16]
 8003d1c:	e043      	b.n	8003da6 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	015a      	lsls	r2, r3, #5
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	4413      	add	r3, r2
 8003d26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d34:	d118      	bne.n	8003d68 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d10a      	bne.n	8003d52 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	015a      	lsls	r2, r3, #5
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	4413      	add	r3, r2
 8003d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d48:	461a      	mov	r2, r3
 8003d4a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003d4e:	6013      	str	r3, [r2, #0]
 8003d50:	e013      	b.n	8003d7a <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	015a      	lsls	r2, r3, #5
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	4413      	add	r3, r2
 8003d5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d5e:	461a      	mov	r2, r3
 8003d60:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003d64:	6013      	str	r3, [r2, #0]
 8003d66:	e008      	b.n	8003d7a <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	015a      	lsls	r2, r3, #5
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	4413      	add	r3, r2
 8003d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d74:	461a      	mov	r2, r3
 8003d76:	2300      	movs	r3, #0
 8003d78:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	015a      	lsls	r2, r3, #5
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	4413      	add	r3, r2
 8003d82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d86:	461a      	mov	r2, r3
 8003d88:	2300      	movs	r3, #0
 8003d8a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	015a      	lsls	r2, r3, #5
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	4413      	add	r3, r2
 8003d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d98:	461a      	mov	r2, r3
 8003d9a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d9e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	3301      	adds	r3, #1
 8003da4:	613b      	str	r3, [r7, #16]
 8003da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d3b7      	bcc.n	8003d1e <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003dae:	2300      	movs	r3, #0
 8003db0:	613b      	str	r3, [r7, #16]
 8003db2:	e043      	b.n	8003e3c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	015a      	lsls	r2, r3, #5
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	4413      	add	r3, r2
 8003dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003dc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003dca:	d118      	bne.n	8003dfe <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10a      	bne.n	8003de8 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	015a      	lsls	r2, r3, #5
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	4413      	add	r3, r2
 8003dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dde:	461a      	mov	r2, r3
 8003de0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003de4:	6013      	str	r3, [r2, #0]
 8003de6:	e013      	b.n	8003e10 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	015a      	lsls	r2, r3, #5
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	4413      	add	r3, r2
 8003df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003df4:	461a      	mov	r2, r3
 8003df6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003dfa:	6013      	str	r3, [r2, #0]
 8003dfc:	e008      	b.n	8003e10 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	015a      	lsls	r2, r3, #5
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	4413      	add	r3, r2
 8003e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	015a      	lsls	r2, r3, #5
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	4413      	add	r3, r2
 8003e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	2300      	movs	r3, #0
 8003e20:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	015a      	lsls	r2, r3, #5
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	4413      	add	r3, r2
 8003e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e2e:	461a      	mov	r2, r3
 8003e30:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e34:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	3301      	adds	r3, #1
 8003e3a:	613b      	str	r3, [r7, #16]
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d3b7      	bcc.n	8003db4 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e56:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003e64:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	f043 0210 	orr.w	r2, r3, #16
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	699a      	ldr	r2, [r3, #24]
 8003e76:	4b10      	ldr	r3, [pc, #64]	; (8003eb8 <USB_DevInit+0x294>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d005      	beq.n	8003e90 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	f043 0208 	orr.w	r2, r3, #8
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003e90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d107      	bne.n	8003ea6 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e9e:	f043 0304 	orr.w	r3, r3, #4
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003ea6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3718      	adds	r7, #24
 8003eac:	46bd      	mov	sp, r7
 8003eae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003eb2:	b004      	add	sp, #16
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	803c3800 	.word	0x803c3800

08003ebc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	3301      	adds	r3, #1
 8003ece:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	4a13      	ldr	r2, [pc, #76]	; (8003f20 <USB_FlushTxFifo+0x64>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d901      	bls.n	8003edc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e01b      	b.n	8003f14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	daf2      	bge.n	8003eca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	019b      	lsls	r3, r3, #6
 8003eec:	f043 0220 	orr.w	r2, r3, #32
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	4a08      	ldr	r2, [pc, #32]	; (8003f20 <USB_FlushTxFifo+0x64>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d901      	bls.n	8003f06 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e006      	b.n	8003f14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	f003 0320 	and.w	r3, r3, #32
 8003f0e:	2b20      	cmp	r3, #32
 8003f10:	d0f0      	beq.n	8003ef4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3714      	adds	r7, #20
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr
 8003f20:	00030d40 	.word	0x00030d40

08003f24 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b085      	sub	sp, #20
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	3301      	adds	r3, #1
 8003f34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	4a11      	ldr	r2, [pc, #68]	; (8003f80 <USB_FlushRxFifo+0x5c>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d901      	bls.n	8003f42 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e018      	b.n	8003f74 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	daf2      	bge.n	8003f30 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2210      	movs	r2, #16
 8003f52:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	3301      	adds	r3, #1
 8003f58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	4a08      	ldr	r2, [pc, #32]	; (8003f80 <USB_FlushRxFifo+0x5c>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d901      	bls.n	8003f66 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e006      	b.n	8003f74 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	f003 0310 	and.w	r3, r3, #16
 8003f6e:	2b10      	cmp	r3, #16
 8003f70:	d0f0      	beq.n	8003f54 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3714      	adds	r7, #20
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr
 8003f80:	00030d40 	.word	0x00030d40

08003f84 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	78fb      	ldrb	r3, [r7, #3]
 8003f9e:	68f9      	ldr	r1, [r7, #12]
 8003fa0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3714      	adds	r7, #20
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr

08003fb6 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	b087      	sub	sp, #28
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f003 0306 	and.w	r3, r3, #6
 8003fce:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d002      	beq.n	8003fdc <USB_GetDevSpeed+0x26>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2b06      	cmp	r3, #6
 8003fda:	d102      	bne.n	8003fe2 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003fdc:	2302      	movs	r3, #2
 8003fde:	75fb      	strb	r3, [r7, #23]
 8003fe0:	e001      	b.n	8003fe6 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8003fe2:	230f      	movs	r3, #15
 8003fe4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003fe6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	371c      	adds	r7, #28
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b085      	sub	sp, #20
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	785b      	ldrb	r3, [r3, #1]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d13a      	bne.n	8004086 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004016:	69da      	ldr	r2, [r3, #28]
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	f003 030f 	and.w	r3, r3, #15
 8004020:	2101      	movs	r1, #1
 8004022:	fa01 f303 	lsl.w	r3, r1, r3
 8004026:	b29b      	uxth	r3, r3
 8004028:	68f9      	ldr	r1, [r7, #12]
 800402a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800402e:	4313      	orrs	r3, r2
 8004030:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	015a      	lsls	r2, r3, #5
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	4413      	add	r3, r2
 800403a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d155      	bne.n	80040f4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	015a      	lsls	r2, r3, #5
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	4413      	add	r3, r2
 8004050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	791b      	ldrb	r3, [r3, #4]
 8004062:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004064:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	059b      	lsls	r3, r3, #22
 800406a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800406c:	4313      	orrs	r3, r2
 800406e:	68ba      	ldr	r2, [r7, #8]
 8004070:	0151      	lsls	r1, r2, #5
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	440a      	add	r2, r1
 8004076:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800407a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800407e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004082:	6013      	str	r3, [r2, #0]
 8004084:	e036      	b.n	80040f4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800408c:	69da      	ldr	r2, [r3, #28]
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	f003 030f 	and.w	r3, r3, #15
 8004096:	2101      	movs	r1, #1
 8004098:	fa01 f303 	lsl.w	r3, r1, r3
 800409c:	041b      	lsls	r3, r3, #16
 800409e:	68f9      	ldr	r1, [r7, #12]
 80040a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040a4:	4313      	orrs	r3, r2
 80040a6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	015a      	lsls	r2, r3, #5
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	4413      	add	r3, r2
 80040b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d11a      	bne.n	80040f4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	015a      	lsls	r2, r3, #5
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	4413      	add	r3, r2
 80040c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	791b      	ldrb	r3, [r3, #4]
 80040d8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80040da:	430b      	orrs	r3, r1
 80040dc:	4313      	orrs	r3, r2
 80040de:	68ba      	ldr	r2, [r7, #8]
 80040e0:	0151      	lsls	r1, r2, #5
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	440a      	add	r2, r1
 80040e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040f2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3714      	adds	r7, #20
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
	...

08004104 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004104:	b480      	push	{r7}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	785b      	ldrb	r3, [r3, #1]
 800411c:	2b01      	cmp	r3, #1
 800411e:	d161      	bne.n	80041e4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	015a      	lsls	r2, r3, #5
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	4413      	add	r3, r2
 8004128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004132:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004136:	d11f      	bne.n	8004178 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	015a      	lsls	r2, r3, #5
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	4413      	add	r3, r2
 8004140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68ba      	ldr	r2, [r7, #8]
 8004148:	0151      	lsls	r1, r2, #5
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	440a      	add	r2, r1
 800414e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004152:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004156:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	015a      	lsls	r2, r3, #5
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	4413      	add	r3, r2
 8004160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68ba      	ldr	r2, [r7, #8]
 8004168:	0151      	lsls	r1, r2, #5
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	440a      	add	r2, r1
 800416e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004172:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004176:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800417e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	f003 030f 	and.w	r3, r3, #15
 8004188:	2101      	movs	r1, #1
 800418a:	fa01 f303 	lsl.w	r3, r1, r3
 800418e:	b29b      	uxth	r3, r3
 8004190:	43db      	mvns	r3, r3
 8004192:	68f9      	ldr	r1, [r7, #12]
 8004194:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004198:	4013      	ands	r3, r2
 800419a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041a2:	69da      	ldr	r2, [r3, #28]
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	f003 030f 	and.w	r3, r3, #15
 80041ac:	2101      	movs	r1, #1
 80041ae:	fa01 f303 	lsl.w	r3, r1, r3
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	43db      	mvns	r3, r3
 80041b6:	68f9      	ldr	r1, [r7, #12]
 80041b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041bc:	4013      	ands	r3, r2
 80041be:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	015a      	lsls	r2, r3, #5
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	4413      	add	r3, r2
 80041c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	0159      	lsls	r1, r3, #5
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	440b      	add	r3, r1
 80041d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041da:	4619      	mov	r1, r3
 80041dc:	4b35      	ldr	r3, [pc, #212]	; (80042b4 <USB_DeactivateEndpoint+0x1b0>)
 80041de:	4013      	ands	r3, r2
 80041e0:	600b      	str	r3, [r1, #0]
 80041e2:	e060      	b.n	80042a6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	015a      	lsls	r2, r3, #5
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	4413      	add	r3, r2
 80041ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041fa:	d11f      	bne.n	800423c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	015a      	lsls	r2, r3, #5
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	4413      	add	r3, r2
 8004204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68ba      	ldr	r2, [r7, #8]
 800420c:	0151      	lsls	r1, r2, #5
 800420e:	68fa      	ldr	r2, [r7, #12]
 8004210:	440a      	add	r2, r1
 8004212:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004216:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800421a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	015a      	lsls	r2, r3, #5
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	4413      	add	r3, r2
 8004224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68ba      	ldr	r2, [r7, #8]
 800422c:	0151      	lsls	r1, r2, #5
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	440a      	add	r2, r1
 8004232:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004236:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800423a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004242:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	f003 030f 	and.w	r3, r3, #15
 800424c:	2101      	movs	r1, #1
 800424e:	fa01 f303 	lsl.w	r3, r1, r3
 8004252:	041b      	lsls	r3, r3, #16
 8004254:	43db      	mvns	r3, r3
 8004256:	68f9      	ldr	r1, [r7, #12]
 8004258:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800425c:	4013      	ands	r3, r2
 800425e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004266:	69da      	ldr	r2, [r3, #28]
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	f003 030f 	and.w	r3, r3, #15
 8004270:	2101      	movs	r1, #1
 8004272:	fa01 f303 	lsl.w	r3, r1, r3
 8004276:	041b      	lsls	r3, r3, #16
 8004278:	43db      	mvns	r3, r3
 800427a:	68f9      	ldr	r1, [r7, #12]
 800427c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004280:	4013      	ands	r3, r2
 8004282:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	015a      	lsls	r2, r3, #5
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	4413      	add	r3, r2
 800428c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	0159      	lsls	r1, r3, #5
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	440b      	add	r3, r1
 800429a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800429e:	4619      	mov	r1, r3
 80042a0:	4b05      	ldr	r3, [pc, #20]	; (80042b8 <USB_DeactivateEndpoint+0x1b4>)
 80042a2:	4013      	ands	r3, r2
 80042a4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3714      	adds	r7, #20
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr
 80042b4:	ec337800 	.word	0xec337800
 80042b8:	eff37800 	.word	0xeff37800

080042bc <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b086      	sub	sp, #24
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	785b      	ldrb	r3, [r3, #1]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	f040 810a 	bne.w	80044ee <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d132      	bne.n	8004348 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	015a      	lsls	r2, r3, #5
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	4413      	add	r3, r2
 80042ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	693a      	ldr	r2, [r7, #16]
 80042f2:	0151      	lsls	r1, r2, #5
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	440a      	add	r2, r1
 80042f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004300:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004304:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	015a      	lsls	r2, r3, #5
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	4413      	add	r3, r2
 800430e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	0151      	lsls	r1, r2, #5
 8004318:	697a      	ldr	r2, [r7, #20]
 800431a:	440a      	add	r2, r1
 800431c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004320:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004324:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	015a      	lsls	r2, r3, #5
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	4413      	add	r3, r2
 800432e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	0151      	lsls	r1, r2, #5
 8004338:	697a      	ldr	r2, [r7, #20]
 800433a:	440a      	add	r2, r1
 800433c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004340:	0cdb      	lsrs	r3, r3, #19
 8004342:	04db      	lsls	r3, r3, #19
 8004344:	6113      	str	r3, [r2, #16]
 8004346:	e074      	b.n	8004432 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	015a      	lsls	r2, r3, #5
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	4413      	add	r3, r2
 8004350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	693a      	ldr	r2, [r7, #16]
 8004358:	0151      	lsls	r1, r2, #5
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	440a      	add	r2, r1
 800435e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004362:	0cdb      	lsrs	r3, r3, #19
 8004364:	04db      	lsls	r3, r3, #19
 8004366:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	015a      	lsls	r2, r3, #5
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	4413      	add	r3, r2
 8004370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	0151      	lsls	r1, r2, #5
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	440a      	add	r2, r1
 800437e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004382:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004386:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800438a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	015a      	lsls	r2, r3, #5
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	4413      	add	r3, r2
 8004394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004398:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	6999      	ldr	r1, [r3, #24]
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	440b      	add	r3, r1
 80043a4:	1e59      	subs	r1, r3, #1
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80043ae:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80043b0:	4b9e      	ldr	r3, [pc, #632]	; (800462c <USB_EPStartXfer+0x370>)
 80043b2:	400b      	ands	r3, r1
 80043b4:	6939      	ldr	r1, [r7, #16]
 80043b6:	0148      	lsls	r0, r1, #5
 80043b8:	6979      	ldr	r1, [r7, #20]
 80043ba:	4401      	add	r1, r0
 80043bc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80043c0:	4313      	orrs	r3, r2
 80043c2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	015a      	lsls	r2, r3, #5
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	4413      	add	r3, r2
 80043cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043d0:	691a      	ldr	r2, [r3, #16]
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043da:	6939      	ldr	r1, [r7, #16]
 80043dc:	0148      	lsls	r0, r1, #5
 80043de:	6979      	ldr	r1, [r7, #20]
 80043e0:	4401      	add	r1, r0
 80043e2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80043e6:	4313      	orrs	r3, r2
 80043e8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	791b      	ldrb	r3, [r3, #4]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d11f      	bne.n	8004432 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	015a      	lsls	r2, r3, #5
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	4413      	add	r3, r2
 80043fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	693a      	ldr	r2, [r7, #16]
 8004402:	0151      	lsls	r1, r2, #5
 8004404:	697a      	ldr	r2, [r7, #20]
 8004406:	440a      	add	r2, r1
 8004408:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800440c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004410:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	015a      	lsls	r2, r3, #5
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	4413      	add	r3, r2
 800441a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	693a      	ldr	r2, [r7, #16]
 8004422:	0151      	lsls	r1, r2, #5
 8004424:	697a      	ldr	r2, [r7, #20]
 8004426:	440a      	add	r2, r1
 8004428:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800442c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004430:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	015a      	lsls	r2, r3, #5
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	4413      	add	r3, r2
 800443a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	693a      	ldr	r2, [r7, #16]
 8004442:	0151      	lsls	r1, r2, #5
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	440a      	add	r2, r1
 8004448:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800444c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004450:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	791b      	ldrb	r3, [r3, #4]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d015      	beq.n	8004486 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	2b00      	cmp	r3, #0
 8004460:	f000 8106 	beq.w	8004670 <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800446a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	f003 030f 	and.w	r3, r3, #15
 8004474:	2101      	movs	r1, #1
 8004476:	fa01 f303 	lsl.w	r3, r1, r3
 800447a:	6979      	ldr	r1, [r7, #20]
 800447c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004480:	4313      	orrs	r3, r2
 8004482:	634b      	str	r3, [r1, #52]	; 0x34
 8004484:	e0f4      	b.n	8004670 <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004492:	2b00      	cmp	r3, #0
 8004494:	d110      	bne.n	80044b8 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	015a      	lsls	r2, r3, #5
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	4413      	add	r3, r2
 800449e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	0151      	lsls	r1, r2, #5
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	440a      	add	r2, r1
 80044ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80044b4:	6013      	str	r3, [r2, #0]
 80044b6:	e00f      	b.n	80044d8 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	015a      	lsls	r2, r3, #5
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	4413      	add	r3, r2
 80044c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	693a      	ldr	r2, [r7, #16]
 80044c8:	0151      	lsls	r1, r2, #5
 80044ca:	697a      	ldr	r2, [r7, #20]
 80044cc:	440a      	add	r2, r1
 80044ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044d6:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	6919      	ldr	r1, [r3, #16]
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	781a      	ldrb	r2, [r3, #0]
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	699b      	ldr	r3, [r3, #24]
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 fa94 	bl	8004a14 <USB_WritePacket>
 80044ec:	e0c0      	b.n	8004670 <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	015a      	lsls	r2, r3, #5
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	4413      	add	r3, r2
 80044f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	693a      	ldr	r2, [r7, #16]
 80044fe:	0151      	lsls	r1, r2, #5
 8004500:	697a      	ldr	r2, [r7, #20]
 8004502:	440a      	add	r2, r1
 8004504:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004508:	0cdb      	lsrs	r3, r3, #19
 800450a:	04db      	lsls	r3, r3, #19
 800450c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	015a      	lsls	r2, r3, #5
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	4413      	add	r3, r2
 8004516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	0151      	lsls	r1, r2, #5
 8004520:	697a      	ldr	r2, [r7, #20]
 8004522:	440a      	add	r2, r1
 8004524:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004528:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800452c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004530:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d123      	bne.n	8004582 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	015a      	lsls	r2, r3, #5
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	4413      	add	r3, r2
 8004542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004546:	691a      	ldr	r2, [r3, #16]
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004550:	6939      	ldr	r1, [r7, #16]
 8004552:	0148      	lsls	r0, r1, #5
 8004554:	6979      	ldr	r1, [r7, #20]
 8004556:	4401      	add	r1, r0
 8004558:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800455c:	4313      	orrs	r3, r2
 800455e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	015a      	lsls	r2, r3, #5
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	4413      	add	r3, r2
 8004568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	693a      	ldr	r2, [r7, #16]
 8004570:	0151      	lsls	r1, r2, #5
 8004572:	697a      	ldr	r2, [r7, #20]
 8004574:	440a      	add	r2, r1
 8004576:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800457a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800457e:	6113      	str	r3, [r2, #16]
 8004580:	e037      	b.n	80045f2 <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	699a      	ldr	r2, [r3, #24]
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	4413      	add	r3, r2
 800458c:	1e5a      	subs	r2, r3, #1
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	fbb2 f3f3 	udiv	r3, r2, r3
 8004596:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	89fa      	ldrh	r2, [r7, #14]
 800459e:	fb03 f202 	mul.w	r2, r3, r2
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	015a      	lsls	r2, r3, #5
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	4413      	add	r3, r2
 80045ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045b2:	691a      	ldr	r2, [r3, #16]
 80045b4:	89fb      	ldrh	r3, [r7, #14]
 80045b6:	04d9      	lsls	r1, r3, #19
 80045b8:	4b1c      	ldr	r3, [pc, #112]	; (800462c <USB_EPStartXfer+0x370>)
 80045ba:	400b      	ands	r3, r1
 80045bc:	6939      	ldr	r1, [r7, #16]
 80045be:	0148      	lsls	r0, r1, #5
 80045c0:	6979      	ldr	r1, [r7, #20]
 80045c2:	4401      	add	r1, r0
 80045c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80045c8:	4313      	orrs	r3, r2
 80045ca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	015a      	lsls	r2, r3, #5
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	4413      	add	r3, r2
 80045d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045d8:	691a      	ldr	r2, [r3, #16]
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	69db      	ldr	r3, [r3, #28]
 80045de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045e2:	6939      	ldr	r1, [r7, #16]
 80045e4:	0148      	lsls	r0, r1, #5
 80045e6:	6979      	ldr	r1, [r7, #20]
 80045e8:	4401      	add	r1, r0
 80045ea:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80045ee:	4313      	orrs	r3, r2
 80045f0:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	791b      	ldrb	r3, [r3, #4]
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d12a      	bne.n	8004650 <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004606:	2b00      	cmp	r3, #0
 8004608:	d112      	bne.n	8004630 <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	015a      	lsls	r2, r3, #5
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	4413      	add	r3, r2
 8004612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	693a      	ldr	r2, [r7, #16]
 800461a:	0151      	lsls	r1, r2, #5
 800461c:	697a      	ldr	r2, [r7, #20]
 800461e:	440a      	add	r2, r1
 8004620:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004624:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004628:	6013      	str	r3, [r2, #0]
 800462a:	e011      	b.n	8004650 <USB_EPStartXfer+0x394>
 800462c:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	015a      	lsls	r2, r3, #5
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	4413      	add	r3, r2
 8004638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	0151      	lsls	r1, r2, #5
 8004642:	697a      	ldr	r2, [r7, #20]
 8004644:	440a      	add	r2, r1
 8004646:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800464a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800464e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	015a      	lsls	r2, r3, #5
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	4413      	add	r3, r2
 8004658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	0151      	lsls	r1, r2, #5
 8004662:	697a      	ldr	r2, [r7, #20]
 8004664:	440a      	add	r2, r1
 8004666:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800466a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800466e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	3718      	adds	r7, #24
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop

0800467c <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800467c:	b480      	push	{r7}
 800467e:	b085      	sub	sp, #20
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	785b      	ldrb	r3, [r3, #1]
 8004694:	2b01      	cmp	r3, #1
 8004696:	f040 80ab 	bne.w	80047f0 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d132      	bne.n	8004708 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	015a      	lsls	r2, r3, #5
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	4413      	add	r3, r2
 80046aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	68ba      	ldr	r2, [r7, #8]
 80046b2:	0151      	lsls	r1, r2, #5
 80046b4:	68fa      	ldr	r2, [r7, #12]
 80046b6:	440a      	add	r2, r1
 80046b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80046c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80046c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	015a      	lsls	r2, r3, #5
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	4413      	add	r3, r2
 80046ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046d2:	691b      	ldr	r3, [r3, #16]
 80046d4:	68ba      	ldr	r2, [r7, #8]
 80046d6:	0151      	lsls	r1, r2, #5
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	440a      	add	r2, r1
 80046dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80046e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	015a      	lsls	r2, r3, #5
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	4413      	add	r3, r2
 80046ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	68ba      	ldr	r2, [r7, #8]
 80046f6:	0151      	lsls	r1, r2, #5
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	440a      	add	r2, r1
 80046fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004700:	0cdb      	lsrs	r3, r3, #19
 8004702:	04db      	lsls	r3, r3, #19
 8004704:	6113      	str	r3, [r2, #16]
 8004706:	e04e      	b.n	80047a6 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	015a      	lsls	r2, r3, #5
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	4413      	add	r3, r2
 8004710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	68ba      	ldr	r2, [r7, #8]
 8004718:	0151      	lsls	r1, r2, #5
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	440a      	add	r2, r1
 800471e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004722:	0cdb      	lsrs	r3, r3, #19
 8004724:	04db      	lsls	r3, r3, #19
 8004726:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	015a      	lsls	r2, r3, #5
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	4413      	add	r3, r2
 8004730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	68ba      	ldr	r2, [r7, #8]
 8004738:	0151      	lsls	r1, r2, #5
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	440a      	add	r2, r1
 800473e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004742:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004746:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800474a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	699a      	ldr	r2, [r3, #24]
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	429a      	cmp	r2, r3
 8004756:	d903      	bls.n	8004760 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	68da      	ldr	r2, [r3, #12]
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	015a      	lsls	r2, r3, #5
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	4413      	add	r3, r2
 8004768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	68ba      	ldr	r2, [r7, #8]
 8004770:	0151      	lsls	r1, r2, #5
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	440a      	add	r2, r1
 8004776:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800477a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800477e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	015a      	lsls	r2, r3, #5
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	4413      	add	r3, r2
 8004788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800478c:	691a      	ldr	r2, [r3, #16]
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004796:	68b9      	ldr	r1, [r7, #8]
 8004798:	0148      	lsls	r0, r1, #5
 800479a:	68f9      	ldr	r1, [r7, #12]
 800479c:	4401      	add	r1, r0
 800479e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80047a2:	4313      	orrs	r3, r2
 80047a4:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	015a      	lsls	r2, r3, #5
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	4413      	add	r3, r2
 80047ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68ba      	ldr	r2, [r7, #8]
 80047b6:	0151      	lsls	r1, r2, #5
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	440a      	add	r2, r1
 80047bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80047c4:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d071      	beq.n	80048b2 <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	f003 030f 	and.w	r3, r3, #15
 80047de:	2101      	movs	r1, #1
 80047e0:	fa01 f303 	lsl.w	r3, r1, r3
 80047e4:	68f9      	ldr	r1, [r7, #12]
 80047e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047ea:	4313      	orrs	r3, r2
 80047ec:	634b      	str	r3, [r1, #52]	; 0x34
 80047ee:	e060      	b.n	80048b2 <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	015a      	lsls	r2, r3, #5
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	4413      	add	r3, r2
 80047f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	68ba      	ldr	r2, [r7, #8]
 8004800:	0151      	lsls	r1, r2, #5
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	440a      	add	r2, r1
 8004806:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800480a:	0cdb      	lsrs	r3, r3, #19
 800480c:	04db      	lsls	r3, r3, #19
 800480e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	015a      	lsls	r2, r3, #5
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	4413      	add	r3, r2
 8004818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	68ba      	ldr	r2, [r7, #8]
 8004820:	0151      	lsls	r1, r2, #5
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	440a      	add	r2, r1
 8004826:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800482a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800482e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004832:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d003      	beq.n	8004844 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	68da      	ldr	r2, [r3, #12]
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	68da      	ldr	r2, [r3, #12]
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	015a      	lsls	r2, r3, #5
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	4413      	add	r3, r2
 8004854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	68ba      	ldr	r2, [r7, #8]
 800485c:	0151      	lsls	r1, r2, #5
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	440a      	add	r2, r1
 8004862:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004866:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800486a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	015a      	lsls	r2, r3, #5
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	4413      	add	r3, r2
 8004874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004878:	691a      	ldr	r2, [r3, #16]
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	69db      	ldr	r3, [r3, #28]
 800487e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004882:	68b9      	ldr	r1, [r7, #8]
 8004884:	0148      	lsls	r0, r1, #5
 8004886:	68f9      	ldr	r1, [r7, #12]
 8004888:	4401      	add	r1, r0
 800488a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800488e:	4313      	orrs	r3, r2
 8004890:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	015a      	lsls	r2, r3, #5
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	4413      	add	r3, r2
 800489a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68ba      	ldr	r2, [r7, #8]
 80048a2:	0151      	lsls	r1, r2, #5
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	440a      	add	r2, r1
 80048a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80048b0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3714      	adds	r7, #20
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b087      	sub	sp, #28
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80048ca:	2300      	movs	r3, #0
 80048cc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80048ce:	2300      	movs	r3, #0
 80048d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	785b      	ldrb	r3, [r3, #1]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d14a      	bne.n	8004974 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	015a      	lsls	r2, r3, #5
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	4413      	add	r3, r2
 80048e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048f6:	f040 8086 	bne.w	8004a06 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	015a      	lsls	r2, r3, #5
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	4413      	add	r3, r2
 8004904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	683a      	ldr	r2, [r7, #0]
 800490c:	7812      	ldrb	r2, [r2, #0]
 800490e:	0151      	lsls	r1, r2, #5
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	440a      	add	r2, r1
 8004914:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004918:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800491c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	015a      	lsls	r2, r3, #5
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	4413      	add	r3, r2
 8004928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	683a      	ldr	r2, [r7, #0]
 8004930:	7812      	ldrb	r2, [r2, #0]
 8004932:	0151      	lsls	r1, r2, #5
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	440a      	add	r2, r1
 8004938:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800493c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004940:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	3301      	adds	r3, #1
 8004946:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f242 7210 	movw	r2, #10000	; 0x2710
 800494e:	4293      	cmp	r3, r2
 8004950:	d902      	bls.n	8004958 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	75fb      	strb	r3, [r7, #23]
          break;
 8004956:	e056      	b.n	8004a06 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	015a      	lsls	r2, r3, #5
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	4413      	add	r3, r2
 8004962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800496c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004970:	d0e7      	beq.n	8004942 <USB_EPStopXfer+0x82>
 8004972:	e048      	b.n	8004a06 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	015a      	lsls	r2, r3, #5
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	4413      	add	r3, r2
 800497e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004988:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800498c:	d13b      	bne.n	8004a06 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	015a      	lsls	r2, r3, #5
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	4413      	add	r3, r2
 8004998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	683a      	ldr	r2, [r7, #0]
 80049a0:	7812      	ldrb	r2, [r2, #0]
 80049a2:	0151      	lsls	r1, r2, #5
 80049a4:	693a      	ldr	r2, [r7, #16]
 80049a6:	440a      	add	r2, r1
 80049a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80049b0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	015a      	lsls	r2, r3, #5
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	4413      	add	r3, r2
 80049bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	683a      	ldr	r2, [r7, #0]
 80049c4:	7812      	ldrb	r2, [r2, #0]
 80049c6:	0151      	lsls	r1, r2, #5
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	440a      	add	r2, r1
 80049cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80049d4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	3301      	adds	r3, #1
 80049da:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f242 7210 	movw	r2, #10000	; 0x2710
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d902      	bls.n	80049ec <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	75fb      	strb	r3, [r7, #23]
          break;
 80049ea:	e00c      	b.n	8004a06 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	015a      	lsls	r2, r3, #5
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	4413      	add	r3, r2
 80049f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a04:	d0e7      	beq.n	80049d6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004a06:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	371c      	adds	r7, #28
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b089      	sub	sp, #36	; 0x24
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	4611      	mov	r1, r2
 8004a20:	461a      	mov	r2, r3
 8004a22:	460b      	mov	r3, r1
 8004a24:	71fb      	strb	r3, [r7, #7]
 8004a26:	4613      	mov	r3, r2
 8004a28:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8004a32:	88bb      	ldrh	r3, [r7, #4]
 8004a34:	3303      	adds	r3, #3
 8004a36:	089b      	lsrs	r3, r3, #2
 8004a38:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	61bb      	str	r3, [r7, #24]
 8004a3e:	e018      	b.n	8004a72 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004a40:	79fb      	ldrb	r3, [r7, #7]
 8004a42:	031a      	lsls	r2, r3, #12
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	4413      	add	r3, r2
 8004a48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	6013      	str	r3, [r2, #0]
    pSrc++;
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	3301      	adds	r3, #1
 8004a58:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	3301      	adds	r3, #1
 8004a64:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	3301      	adds	r3, #1
 8004a6a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	3301      	adds	r3, #1
 8004a70:	61bb      	str	r3, [r7, #24]
 8004a72:	69ba      	ldr	r2, [r7, #24]
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d3e2      	bcc.n	8004a40 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3724      	adds	r7, #36	; 0x24
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b08b      	sub	sp, #44	; 0x2c
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	4613      	mov	r3, r2
 8004a94:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004a9e:	88fb      	ldrh	r3, [r7, #6]
 8004aa0:	089b      	lsrs	r3, r3, #2
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004aa6:	88fb      	ldrh	r3, [r7, #6]
 8004aa8:	f003 0303 	and.w	r3, r3, #3
 8004aac:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004aae:	2300      	movs	r3, #0
 8004ab0:	623b      	str	r3, [r7, #32]
 8004ab2:	e014      	b.n	8004ade <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abe:	601a      	str	r2, [r3, #0]
    pDest++;
 8004ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac8:	3301      	adds	r3, #1
 8004aca:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ace:	3301      	adds	r3, #1
 8004ad0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad4:	3301      	adds	r3, #1
 8004ad6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004ad8:	6a3b      	ldr	r3, [r7, #32]
 8004ada:	3301      	adds	r3, #1
 8004adc:	623b      	str	r3, [r7, #32]
 8004ade:	6a3a      	ldr	r2, [r7, #32]
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d3e6      	bcc.n	8004ab4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004ae6:	8bfb      	ldrh	r3, [r7, #30]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d01e      	beq.n	8004b2a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004aec:	2300      	movs	r3, #0
 8004aee:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004af6:	461a      	mov	r2, r3
 8004af8:	f107 0310 	add.w	r3, r7, #16
 8004afc:	6812      	ldr	r2, [r2, #0]
 8004afe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004b00:	693a      	ldr	r2, [r7, #16]
 8004b02:	6a3b      	ldr	r3, [r7, #32]
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	00db      	lsls	r3, r3, #3
 8004b08:	fa22 f303 	lsr.w	r3, r2, r3
 8004b0c:	b2da      	uxtb	r2, r3
 8004b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b10:	701a      	strb	r2, [r3, #0]
      i++;
 8004b12:	6a3b      	ldr	r3, [r7, #32]
 8004b14:	3301      	adds	r3, #1
 8004b16:	623b      	str	r3, [r7, #32]
      pDest++;
 8004b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004b1e:	8bfb      	ldrh	r3, [r7, #30]
 8004b20:	3b01      	subs	r3, #1
 8004b22:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004b24:	8bfb      	ldrh	r3, [r7, #30]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d1ea      	bne.n	8004b00 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	372c      	adds	r7, #44	; 0x2c
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b085      	sub	sp, #20
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	785b      	ldrb	r3, [r3, #1]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d12c      	bne.n	8004bae <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	015a      	lsls	r2, r3, #5
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	db12      	blt.n	8004b8c <USB_EPSetStall+0x54>
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d00f      	beq.n	8004b8c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	015a      	lsls	r2, r3, #5
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	4413      	add	r3, r2
 8004b74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68ba      	ldr	r2, [r7, #8]
 8004b7c:	0151      	lsls	r1, r2, #5
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	440a      	add	r2, r1
 8004b82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b86:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004b8a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	015a      	lsls	r2, r3, #5
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	4413      	add	r3, r2
 8004b94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	0151      	lsls	r1, r2, #5
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	440a      	add	r2, r1
 8004ba2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ba6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004baa:	6013      	str	r3, [r2, #0]
 8004bac:	e02b      	b.n	8004c06 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	015a      	lsls	r2, r3, #5
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	db12      	blt.n	8004be6 <USB_EPSetStall+0xae>
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d00f      	beq.n	8004be6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	015a      	lsls	r2, r3, #5
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	4413      	add	r3, r2
 8004bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68ba      	ldr	r2, [r7, #8]
 8004bd6:	0151      	lsls	r1, r2, #5
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	440a      	add	r2, r1
 8004bdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004be0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004be4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	015a      	lsls	r2, r3, #5
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	4413      	add	r3, r2
 8004bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68ba      	ldr	r2, [r7, #8]
 8004bf6:	0151      	lsls	r1, r2, #5
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	440a      	add	r2, r1
 8004bfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c04:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c06:	2300      	movs	r3, #0
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3714      	adds	r7, #20
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b085      	sub	sp, #20
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	785b      	ldrb	r3, [r3, #1]
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d128      	bne.n	8004c82 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	015a      	lsls	r2, r3, #5
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	4413      	add	r3, r2
 8004c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	68ba      	ldr	r2, [r7, #8]
 8004c40:	0151      	lsls	r1, r2, #5
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	440a      	add	r2, r1
 8004c46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c4e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	791b      	ldrb	r3, [r3, #4]
 8004c54:	2b03      	cmp	r3, #3
 8004c56:	d003      	beq.n	8004c60 <USB_EPClearStall+0x4c>
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	791b      	ldrb	r3, [r3, #4]
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d138      	bne.n	8004cd2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	015a      	lsls	r2, r3, #5
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	4413      	add	r3, r2
 8004c68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68ba      	ldr	r2, [r7, #8]
 8004c70:	0151      	lsls	r1, r2, #5
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	440a      	add	r2, r1
 8004c76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c7e:	6013      	str	r3, [r2, #0]
 8004c80:	e027      	b.n	8004cd2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	015a      	lsls	r2, r3, #5
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	4413      	add	r3, r2
 8004c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68ba      	ldr	r2, [r7, #8]
 8004c92:	0151      	lsls	r1, r2, #5
 8004c94:	68fa      	ldr	r2, [r7, #12]
 8004c96:	440a      	add	r2, r1
 8004c98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c9c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ca0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	791b      	ldrb	r3, [r3, #4]
 8004ca6:	2b03      	cmp	r3, #3
 8004ca8:	d003      	beq.n	8004cb2 <USB_EPClearStall+0x9e>
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	791b      	ldrb	r3, [r3, #4]
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d10f      	bne.n	8004cd2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	015a      	lsls	r2, r3, #5
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	4413      	add	r3, r2
 8004cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68ba      	ldr	r2, [r7, #8]
 8004cc2:	0151      	lsls	r1, r2, #5
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	440a      	add	r2, r1
 8004cc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cd0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3714      	adds	r7, #20
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b085      	sub	sp, #20
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	460b      	mov	r3, r1
 8004cea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cfe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004d02:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	78fb      	ldrb	r3, [r7, #3]
 8004d0e:	011b      	lsls	r3, r3, #4
 8004d10:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004d14:	68f9      	ldr	r1, [r7, #12]
 8004d16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3714      	adds	r7, #20
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004d46:	f023 0303 	bic.w	r3, r3, #3
 8004d4a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d5a:	f023 0302 	bic.w	r3, r3, #2
 8004d5e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3714      	adds	r7, #20
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr

08004d6e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b085      	sub	sp, #20
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004d88:	f023 0303 	bic.w	r3, r3, #3
 8004d8c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	68fa      	ldr	r2, [r7, #12]
 8004d98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d9c:	f043 0302 	orr.w	r3, r3, #2
 8004da0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3714      	adds	r7, #20
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	695b      	ldr	r3, [r3, #20]
 8004dbc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	699b      	ldr	r3, [r3, #24]
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3714      	adds	r7, #20
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr

08004dd6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004dd6:	b480      	push	{r7}
 8004dd8:	b085      	sub	sp, #20
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004df2:	69db      	ldr	r3, [r3, #28]
 8004df4:	68ba      	ldr	r2, [r7, #8]
 8004df6:	4013      	ands	r3, r2
 8004df8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	0c1b      	lsrs	r3, r3, #16
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3714      	adds	r7, #20
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr

08004e0a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	b085      	sub	sp, #20
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e26:	69db      	ldr	r3, [r3, #28]
 8004e28:	68ba      	ldr	r2, [r7, #8]
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	b29b      	uxth	r3, r3
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3714      	adds	r7, #20
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr

08004e3e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004e3e:	b480      	push	{r7}
 8004e40:	b085      	sub	sp, #20
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
 8004e46:	460b      	mov	r3, r1
 8004e48:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004e4e:	78fb      	ldrb	r3, [r7, #3]
 8004e50:	015a      	lsls	r2, r3, #5
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	4413      	add	r3, r2
 8004e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	68ba      	ldr	r2, [r7, #8]
 8004e68:	4013      	ands	r3, r2
 8004e6a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004e6c:	68bb      	ldr	r3, [r7, #8]
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3714      	adds	r7, #20
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr

08004e7a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004e7a:	b480      	push	{r7}
 8004e7c:	b087      	sub	sp, #28
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
 8004e82:	460b      	mov	r3, r1
 8004e84:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e9c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004e9e:	78fb      	ldrb	r3, [r7, #3]
 8004ea0:	f003 030f 	and.w	r3, r3, #15
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8004eaa:	01db      	lsls	r3, r3, #7
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	693a      	ldr	r2, [r7, #16]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004eb4:	78fb      	ldrb	r3, [r7, #3]
 8004eb6:	015a      	lsls	r2, r3, #5
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	4413      	add	r3, r2
 8004ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	693a      	ldr	r2, [r7, #16]
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004ec8:	68bb      	ldr	r3, [r7, #8]
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	371c      	adds	r7, #28
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr

08004ed6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004ed6:	b480      	push	{r7}
 8004ed8:	b083      	sub	sp, #12
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	695b      	ldr	r3, [r3, #20]
 8004ee2:	f003 0301 	and.w	r3, r3, #1
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	370c      	adds	r7, #12
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr

08004ef2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004ef2:	b480      	push	{r7}
 8004ef4:	b085      	sub	sp, #20
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f0c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004f10:	f023 0307 	bic.w	r3, r3, #7
 8004f14:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f28:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3714      	adds	r7, #20
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b085      	sub	sp, #20
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	333c      	adds	r3, #60	; 0x3c
 8004f4a:	3304      	adds	r3, #4
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	4a1c      	ldr	r2, [pc, #112]	; (8004fc4 <USB_EP0_OutStart+0x8c>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d90a      	bls.n	8004f6e <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f68:	d101      	bne.n	8004f6e <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	e024      	b.n	8004fb8 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f74:	461a      	mov	r2, r3
 8004f76:	2300      	movs	r3, #0
 8004f78:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f88:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f8c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f9c:	f043 0318 	orr.w	r3, r3, #24
 8004fa0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fb0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004fb4:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8004fb6:	2300      	movs	r3, #0
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3714      	adds	r7, #20
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr
 8004fc4:	4f54300a 	.word	0x4f54300a

08004fc8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	4a13      	ldr	r2, [pc, #76]	; (800502c <USB_CoreReset+0x64>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d901      	bls.n	8004fe6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e01b      	b.n	800501e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	daf2      	bge.n	8004fd4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	f043 0201 	orr.w	r2, r3, #1
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	3301      	adds	r3, #1
 8005002:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	4a09      	ldr	r2, [pc, #36]	; (800502c <USB_CoreReset+0x64>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d901      	bls.n	8005010 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800500c:	2303      	movs	r3, #3
 800500e:	e006      	b.n	800501e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	f003 0301 	and.w	r3, r3, #1
 8005018:	2b01      	cmp	r3, #1
 800501a:	d0f0      	beq.n	8004ffe <USB_CoreReset+0x36>

  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3714      	adds	r7, #20
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	00030d40 	.word	0x00030d40

08005030 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	460b      	mov	r3, r1
 800503a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800503c:	f44f 701d 	mov.w	r0, #628	; 0x274
 8005040:	f003 fe5c 	bl	8008cfc <USBD_static_malloc>
 8005044:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d105      	bne.n	8005058 <USBD_MSC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005054:	2302      	movs	r3, #2
 8005056:	e034      	b.n	80050c2 <USBD_MSC_Init+0x92>
  }

  pdev->pClassData = (void *)hmsc;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	7c1b      	ldrb	r3, [r3, #16]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d115      	bne.n	8005094 <USBD_MSC_Init+0x64>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8005068:	f44f 7300 	mov.w	r3, #512	; 0x200
 800506c:	2202      	movs	r2, #2
 800506e:	2101      	movs	r1, #1
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f003 fbf9 	bl	8008868 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2201      	movs	r2, #1
 800507a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800507e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005082:	2202      	movs	r2, #2
 8005084:	2181      	movs	r1, #129	; 0x81
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f003 fbee 	bl	8008868 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	871a      	strh	r2, [r3, #56]	; 0x38
 8005092:	e012      	b.n	80050ba <USBD_MSC_Init+0x8a>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8005094:	2340      	movs	r3, #64	; 0x40
 8005096:	2202      	movs	r2, #2
 8005098:	2101      	movs	r1, #1
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f003 fbe4 	bl	8008868 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80050a8:	2340      	movs	r3, #64	; 0x40
 80050aa:	2202      	movs	r2, #2
 80050ac:	2181      	movs	r1, #129	; 0x81
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f003 fbda 	bl	8008868 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 f999 	bl	80053f2 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3710      	adds	r7, #16
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}

080050ca <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80050ca:	b580      	push	{r7, lr}
 80050cc:	b082      	sub	sp, #8
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
 80050d2:	460b      	mov	r3, r1
 80050d4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 80050d6:	2101      	movs	r1, #1
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f003 fc03 	bl	80088e4 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 80050e6:	2181      	movs	r1, #129	; 0x81
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f003 fbfb 	bl	80088e4 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00c      	beq.n	8005118 <USBD_MSC_DeInit+0x4e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 f9d5 	bl	80054ae <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassData);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800510a:	4618      	mov	r0, r3
 800510c:	f003 fe04 	bl	8008d18 <USBD_static_free>
    pdev->pClassData = NULL;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3708      	adds	r7, #8
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
	...

08005124 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b086      	sub	sp, #24
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005134:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8005136:	2300      	movs	r3, #0
 8005138:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800513a:	2300      	movs	r3, #0
 800513c:	81fb      	strh	r3, [r7, #14]

  if (hmsc == NULL)
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d101      	bne.n	8005148 <USBD_MSC_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005144:	2303      	movs	r3, #3
 8005146:	e0db      	b.n	8005300 <USBD_MSC_Setup+0x1dc>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005150:	2b00      	cmp	r3, #0
 8005152:	d04e      	beq.n	80051f2 <USBD_MSC_Setup+0xce>
 8005154:	2b20      	cmp	r3, #32
 8005156:	f040 80cb 	bne.w	80052f0 <USBD_MSC_Setup+0x1cc>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	785b      	ldrb	r3, [r3, #1]
 800515e:	2bfe      	cmp	r3, #254	; 0xfe
 8005160:	d002      	beq.n	8005168 <USBD_MSC_Setup+0x44>
 8005162:	2bff      	cmp	r3, #255	; 0xff
 8005164:	d025      	beq.n	80051b2 <USBD_MSC_Setup+0x8e>
 8005166:	e03c      	b.n	80051e2 <USBD_MSC_Setup+0xbe>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	885b      	ldrh	r3, [r3, #2]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d119      	bne.n	80051a4 <USBD_MSC_Setup+0x80>
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	88db      	ldrh	r3, [r3, #6]
 8005174:	2b01      	cmp	r3, #1
 8005176:	d115      	bne.n	80051a4 <USBD_MSC_Setup+0x80>
              ((req->bmRequest & 0x80U) == 0x80U))
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800517e:	2b00      	cmp	r3, #0
 8005180:	da10      	bge.n	80051a4 <USBD_MSC_Setup+0x80>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	4798      	blx	r3
 800518c:	4603      	mov	r3, r0
 800518e:	461a      	mov	r2, r3
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	2201      	movs	r2, #1
 8005198:	4619      	mov	r1, r3
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f002 fe3d 	bl	8007e1a <USBD_CtlSendData>
 80051a0:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80051a2:	e025      	b.n	80051f0 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 80051a4:	6839      	ldr	r1, [r7, #0]
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f002 fdc6 	bl	8007d38 <USBD_CtlError>
            ret = USBD_FAIL;
 80051ac:	2303      	movs	r3, #3
 80051ae:	75fb      	strb	r3, [r7, #23]
          break;
 80051b0:	e01e      	b.n	80051f0 <USBD_MSC_Setup+0xcc>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	885b      	ldrh	r3, [r3, #2]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d10c      	bne.n	80051d4 <USBD_MSC_Setup+0xb0>
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	88db      	ldrh	r3, [r3, #6]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d108      	bne.n	80051d4 <USBD_MSC_Setup+0xb0>
              ((req->bmRequest & 0x80U) != 0x80U))
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	db03      	blt.n	80051d4 <USBD_MSC_Setup+0xb0>
          {
            MSC_BOT_Reset(pdev);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f000 f948 	bl	8005462 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80051d2:	e00d      	b.n	80051f0 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 80051d4:	6839      	ldr	r1, [r7, #0]
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f002 fdae 	bl	8007d38 <USBD_CtlError>
            ret = USBD_FAIL;
 80051dc:	2303      	movs	r3, #3
 80051de:	75fb      	strb	r3, [r7, #23]
          break;
 80051e0:	e006      	b.n	80051f0 <USBD_MSC_Setup+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80051e2:	6839      	ldr	r1, [r7, #0]
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f002 fda7 	bl	8007d38 <USBD_CtlError>
          ret = USBD_FAIL;
 80051ea:	2303      	movs	r3, #3
 80051ec:	75fb      	strb	r3, [r7, #23]
          break;
 80051ee:	bf00      	nop
      }
      break;
 80051f0:	e085      	b.n	80052fe <USBD_MSC_Setup+0x1da>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	785b      	ldrb	r3, [r3, #1]
 80051f6:	2b0b      	cmp	r3, #11
 80051f8:	d871      	bhi.n	80052de <USBD_MSC_Setup+0x1ba>
 80051fa:	a201      	add	r2, pc, #4	; (adr r2, 8005200 <USBD_MSC_Setup+0xdc>)
 80051fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005200:	08005231 	.word	0x08005231
 8005204:	080052ad 	.word	0x080052ad
 8005208:	080052df 	.word	0x080052df
 800520c:	080052df 	.word	0x080052df
 8005210:	080052df 	.word	0x080052df
 8005214:	080052df 	.word	0x080052df
 8005218:	080052df 	.word	0x080052df
 800521c:	080052df 	.word	0x080052df
 8005220:	080052df 	.word	0x080052df
 8005224:	080052df 	.word	0x080052df
 8005228:	0800525b 	.word	0x0800525b
 800522c:	08005285 	.word	0x08005285
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005236:	b2db      	uxtb	r3, r3
 8005238:	2b03      	cmp	r3, #3
 800523a:	d107      	bne.n	800524c <USBD_MSC_Setup+0x128>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800523c:	f107 030e 	add.w	r3, r7, #14
 8005240:	2202      	movs	r2, #2
 8005242:	4619      	mov	r1, r3
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f002 fde8 	bl	8007e1a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800524a:	e050      	b.n	80052ee <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 800524c:	6839      	ldr	r1, [r7, #0]
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f002 fd72 	bl	8007d38 <USBD_CtlError>
            ret = USBD_FAIL;
 8005254:	2303      	movs	r3, #3
 8005256:	75fb      	strb	r3, [r7, #23]
          break;
 8005258:	e049      	b.n	80052ee <USBD_MSC_Setup+0x1ca>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005260:	b2db      	uxtb	r3, r3
 8005262:	2b03      	cmp	r3, #3
 8005264:	d107      	bne.n	8005276 <USBD_MSC_Setup+0x152>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	3304      	adds	r3, #4
 800526a:	2201      	movs	r2, #1
 800526c:	4619      	mov	r1, r3
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f002 fdd3 	bl	8007e1a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005274:	e03b      	b.n	80052ee <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 8005276:	6839      	ldr	r1, [r7, #0]
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f002 fd5d 	bl	8007d38 <USBD_CtlError>
            ret = USBD_FAIL;
 800527e:	2303      	movs	r3, #3
 8005280:	75fb      	strb	r3, [r7, #23]
          break;
 8005282:	e034      	b.n	80052ee <USBD_MSC_Setup+0x1ca>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800528a:	b2db      	uxtb	r3, r3
 800528c:	2b03      	cmp	r3, #3
 800528e:	d106      	bne.n	800529e <USBD_MSC_Setup+0x17a>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	885b      	ldrh	r3, [r3, #2]
 8005294:	b2db      	uxtb	r3, r3
 8005296:	461a      	mov	r2, r3
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800529c:	e027      	b.n	80052ee <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 800529e:	6839      	ldr	r1, [r7, #0]
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f002 fd49 	bl	8007d38 <USBD_CtlError>
            ret = USBD_FAIL;
 80052a6:	2303      	movs	r3, #3
 80052a8:	75fb      	strb	r3, [r7, #23]
          break;
 80052aa:	e020      	b.n	80052ee <USBD_MSC_Setup+0x1ca>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	2b03      	cmp	r3, #3
 80052b6:	d119      	bne.n	80052ec <USBD_MSC_Setup+0x1c8>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	885b      	ldrh	r3, [r3, #2]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d115      	bne.n	80052ec <USBD_MSC_Setup+0x1c8>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	889b      	ldrh	r3, [r3, #4]
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	4619      	mov	r1, r3
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f003 fb41 	bl	8008950 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	889b      	ldrh	r3, [r3, #4]
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	4619      	mov	r1, r3
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 fa82 	bl	80057e0 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 80052dc:	e006      	b.n	80052ec <USBD_MSC_Setup+0x1c8>

        default:
          USBD_CtlError(pdev, req);
 80052de:	6839      	ldr	r1, [r7, #0]
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f002 fd29 	bl	8007d38 <USBD_CtlError>
          ret = USBD_FAIL;
 80052e6:	2303      	movs	r3, #3
 80052e8:	75fb      	strb	r3, [r7, #23]
          break;
 80052ea:	e000      	b.n	80052ee <USBD_MSC_Setup+0x1ca>
          break;
 80052ec:	bf00      	nop
      }
      break;
 80052ee:	e006      	b.n	80052fe <USBD_MSC_Setup+0x1da>

    default:
      USBD_CtlError(pdev, req);
 80052f0:	6839      	ldr	r1, [r7, #0]
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f002 fd20 	bl	8007d38 <USBD_CtlError>
      ret = USBD_FAIL;
 80052f8:	2303      	movs	r3, #3
 80052fa:	75fb      	strb	r3, [r7, #23]
      break;
 80052fc:	bf00      	nop
  }

  return (uint8_t)ret;
 80052fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005300:	4618      	mov	r0, r3
 8005302:	3718      	adds	r7, #24
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	460b      	mov	r3, r1
 8005312:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8005314:	78fb      	ldrb	r3, [r7, #3]
 8005316:	4619      	mov	r1, r3
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 f8dc 	bl	80054d6 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800531e:	2300      	movs	r3, #0
}
 8005320:	4618      	mov	r0, r3
 8005322:	3708      	adds	r7, #8
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	460b      	mov	r3, r1
 8005332:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8005334:	78fb      	ldrb	r3, [r7, #3]
 8005336:	4619      	mov	r1, r3
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 f902 	bl	8005542 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800533e:	2300      	movs	r3, #0
}
 8005340:	4618      	mov	r0, r3
 8005342:	3708      	adds	r7, #8
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2220      	movs	r2, #32
 8005354:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 8005356:	4b03      	ldr	r3, [pc, #12]	; (8005364 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8005358:	4618      	mov	r0, r3
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr
 8005364:	20000064 	.word	0x20000064

08005368 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2220      	movs	r2, #32
 8005374:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 8005376:	4b03      	ldr	r3, [pc, #12]	; (8005384 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8005378:	4618      	mov	r0, r3
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr
 8005384:	20000084 	.word	0x20000084

08005388 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2220      	movs	r2, #32
 8005394:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 8005396:	4b03      	ldr	r3, [pc, #12]	; (80053a4 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005398:	4618      	mov	r0, r3
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr
 80053a4:	200000a4 	.word	0x200000a4

080053a8 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	220a      	movs	r2, #10
 80053b4:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 80053b6:	4b03      	ldr	r3, [pc, #12]	; (80053c4 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr
 80053c4:	200000c4 	.word	0x200000c4

080053c8 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d101      	bne.n	80053dc <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80053d8:	2303      	movs	r3, #3
 80053da:	e004      	b.n	80053e6 <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	683a      	ldr	r2, [r7, #0]
 80053e0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	370c      	adds	r7, #12
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr

080053f2 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 80053f2:	b580      	push	{r7, lr}
 80053f4:	b084      	sub	sp, #16
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005400:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d028      	beq.n	800545a <MSC_BOT_Init+0x68>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2200      	movs	r2, #0
 800540c:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2200      	movs	r2, #0
 8005412:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2200      	movs	r2, #0
 8005418:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2200      	movs	r2, #0
 8005428:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2000      	movs	r0, #0
 8005436:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8005438:	2101      	movs	r1, #1
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f003 fa88 	bl	8008950 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8005440:	2181      	movs	r1, #129	; 0x81
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f003 fa84 	bl	8008950 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800544e:	231f      	movs	r3, #31
 8005450:	2101      	movs	r1, #1
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f003 fbb8 	bl	8008bc8 <USBD_LL_PrepareReceive>
 8005458:	e000      	b.n	800545c <MSC_BOT_Init+0x6a>
    return;
 800545a:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800545c:	3710      	adds	r7, #16
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8005462:	b580      	push	{r7, lr}
 8005464:	b084      	sub	sp, #16
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005470:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d016      	beq.n	80054a6 <MSC_BOT_Reset+0x44>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2200      	movs	r2, #0
 800547c:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2201      	movs	r2, #1
 8005482:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 8005484:	2181      	movs	r1, #129	; 0x81
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f003 face 	bl	8008a28 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 800548c:	2101      	movs	r1, #1
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f003 faca 	bl	8008a28 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800549a:	231f      	movs	r3, #31
 800549c:	2101      	movs	r1, #1
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f003 fb92 	bl	8008bc8 <USBD_LL_PrepareReceive>
 80054a4:	e000      	b.n	80054a8 <MSC_BOT_Reset+0x46>
    return;
 80054a6:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}

080054ae <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 80054ae:	b480      	push	{r7}
 80054b0:	b085      	sub	sp, #20
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80054bc:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d002      	beq.n	80054ca <MSC_BOT_DeInit+0x1c>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2200      	movs	r2, #0
 80054c8:	721a      	strb	r2, [r3, #8]
  }
}
 80054ca:	bf00      	nop
 80054cc:	3714      	adds	r7, #20
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr

080054d6 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80054d6:	b580      	push	{r7, lr}
 80054d8:	b084      	sub	sp, #16
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
 80054de:	460b      	mov	r3, r1
 80054e0:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80054e8:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d020      	beq.n	8005532 <MSC_BOT_DataIn+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	7a1b      	ldrb	r3, [r3, #8]
 80054f4:	2b02      	cmp	r3, #2
 80054f6:	d005      	beq.n	8005504 <MSC_BOT_DataIn+0x2e>
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	db1c      	blt.n	8005536 <MSC_BOT_DataIn+0x60>
 80054fc:	3b03      	subs	r3, #3
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d819      	bhi.n	8005536 <MSC_BOT_DataIn+0x60>
 8005502:	e011      	b.n	8005528 <MSC_BOT_DataIn+0x52>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8005510:	461a      	mov	r2, r3
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 f992 	bl	800583c <SCSI_ProcessCmd>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	da0d      	bge.n	800553a <MSC_BOT_DataIn+0x64>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800551e:	2101      	movs	r1, #1
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 f8fb 	bl	800571c <MSC_BOT_SendCSW>
      }
      break;
 8005526:	e008      	b.n	800553a <MSC_BOT_DataIn+0x64>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8005528:	2100      	movs	r1, #0
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 f8f6 	bl	800571c <MSC_BOT_SendCSW>
      break;
 8005530:	e004      	b.n	800553c <MSC_BOT_DataIn+0x66>
    return;
 8005532:	bf00      	nop
 8005534:	e002      	b.n	800553c <MSC_BOT_DataIn+0x66>

    default:
      break;
 8005536:	bf00      	nop
 8005538:	e000      	b.n	800553c <MSC_BOT_DataIn+0x66>
      break;
 800553a:	bf00      	nop
  }
}
 800553c:	3710      	adds	r7, #16
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}

08005542 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005542:	b580      	push	{r7, lr}
 8005544:	b084      	sub	sp, #16
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
 800554a:	460b      	mov	r3, r1
 800554c:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005554:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d01c      	beq.n	8005596 <MSC_BOT_DataOut+0x54>
  {
    return;
  }

  switch (hmsc->bot_state)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	7a1b      	ldrb	r3, [r3, #8]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d002      	beq.n	800556a <MSC_BOT_DataOut+0x28>
 8005564:	2b01      	cmp	r3, #1
 8005566:	d004      	beq.n	8005572 <MSC_BOT_DataOut+0x30>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8005568:	e018      	b.n	800559c <MSC_BOT_DataOut+0x5a>
      MSC_BOT_CBW_Decode(pdev);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f81a 	bl	80055a4 <MSC_BOT_CBW_Decode>
      break;
 8005570:	e014      	b.n	800559c <MSC_BOT_DataOut+0x5a>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800557e:	461a      	mov	r2, r3
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f000 f95b 	bl	800583c <SCSI_ProcessCmd>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	da06      	bge.n	800559a <MSC_BOT_DataOut+0x58>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800558c:	2101      	movs	r1, #1
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 f8c4 	bl	800571c <MSC_BOT_SendCSW>
      break;
 8005594:	e001      	b.n	800559a <MSC_BOT_DataOut+0x58>
    return;
 8005596:	bf00      	nop
 8005598:	e000      	b.n	800559c <MSC_BOT_DataOut+0x5a>
      break;
 800559a:	bf00      	nop
  }
}
 800559c:	3710      	adds	r7, #16
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
	...

080055a4 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80055b2:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d077      	beq.n	80056aa <MSC_BOT_CBW_Decode+0x106>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 80055d2:	2101      	movs	r1, #1
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f003 fb2f 	bl	8008c38 <USBD_LL_GetRxDataSize>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b1f      	cmp	r3, #31
 80055de:	d114      	bne.n	800560a <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 80055e6:	4a34      	ldr	r2, [pc, #208]	; (80056b8 <MSC_BOT_CBW_Decode+0x114>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d10e      	bne.n	800560a <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d809      	bhi.n	800560a <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d004      	beq.n	800560a <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bCBLength > 16U))
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8005606:	2b10      	cmp	r3, #16
 8005608:	d90e      	bls.n	8005628 <MSC_BOT_CBW_Decode+0x84>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005610:	2320      	movs	r3, #32
 8005612:	2205      	movs	r2, #5
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f000 fdbc 	bl	8006192 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2202      	movs	r2, #2
 800561e:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 f8ab 	bl	800577c <MSC_BOT_Abort>
 8005626:	e043      	b.n	80056b0 <MSC_BOT_CBW_Decode+0x10c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8005634:	461a      	mov	r2, r3
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 f900 	bl	800583c <SCSI_ProcessCmd>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	da0c      	bge.n	800565c <MSC_BOT_CBW_Decode+0xb8>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	7a1b      	ldrb	r3, [r3, #8]
 8005646:	2b05      	cmp	r3, #5
 8005648:	d104      	bne.n	8005654 <MSC_BOT_CBW_Decode+0xb0>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800564a:	2101      	movs	r1, #1
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f000 f865 	bl	800571c <MSC_BOT_SendCSW>
 8005652:	e02d      	b.n	80056b0 <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f000 f891 	bl	800577c <MSC_BOT_Abort>
 800565a:	e029      	b.n	80056b0 <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	7a1b      	ldrb	r3, [r3, #8]
 8005660:	2b02      	cmp	r3, #2
 8005662:	d024      	beq.n	80056ae <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8005668:	2b01      	cmp	r3, #1
 800566a:	d020      	beq.n	80056ae <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8005670:	2b03      	cmp	r3, #3
 8005672:	d01c      	beq.n	80056ae <MSC_BOT_CBW_Decode+0x10a>
    {
      if (hmsc->bot_data_length > 0U)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d009      	beq.n	8005690 <MSC_BOT_CBW_Decode+0xec>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f103 0110 	add.w	r1, r3, #16
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	461a      	mov	r2, r3
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 f817 	bl	80056bc <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800568e:	e00f      	b.n	80056b0 <MSC_BOT_CBW_Decode+0x10c>
      }
      else if (hmsc->bot_data_length == 0U)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d104      	bne.n	80056a2 <MSC_BOT_CBW_Decode+0xfe>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8005698:	2100      	movs	r1, #0
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 f83e 	bl	800571c <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 80056a0:	e006      	b.n	80056b0 <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 f86a 	bl	800577c <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 80056a8:	e002      	b.n	80056b0 <MSC_BOT_CBW_Decode+0x10c>
    return;
 80056aa:	bf00      	nop
 80056ac:	e000      	b.n	80056b0 <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    else
    {
      return;
 80056ae:	bf00      	nop
    }
  }
}
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	43425355 	.word	0x43425355

080056bc <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b086      	sub	sp, #24
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80056ce:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	4293      	cmp	r3, r2
 80056da:	bf28      	it	cs
 80056dc:	4613      	movcs	r3, r2
 80056de:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d015      	beq.n	8005712 <MSC_BOT_SendData+0x56>
  {
    return;
  }

  hmsc->csw.dDataResidue -= len;
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	1ad2      	subs	r2, r2, r3
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	2204      	movs	r2, #4
 8005702:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	68ba      	ldr	r2, [r7, #8]
 8005708:	2181      	movs	r1, #129	; 0x81
 800570a:	68f8      	ldr	r0, [r7, #12]
 800570c:	f003 fa24 	bl	8008b58 <USBD_LL_Transmit>
 8005710:	e000      	b.n	8005714 <MSC_BOT_SendData+0x58>
    return;
 8005712:	bf00      	nop
}
 8005714:	3718      	adds	r7, #24
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
	...

0800571c <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	460b      	mov	r3, r1
 8005726:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800572e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d01b      	beq.n	800576e <MSC_BOT_SendCSW+0x52>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	4a0f      	ldr	r2, [pc, #60]	; (8005778 <MSC_BOT_SendCSW+0x5c>)
 800573a:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	78fa      	ldrb	r2, [r7, #3]
 8005742:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2200      	movs	r2, #0
 800574a:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f503 720c 	add.w	r2, r3, #560	; 0x230
 8005752:	230d      	movs	r3, #13
 8005754:	2181      	movs	r1, #129	; 0x81
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f003 f9fe 	bl	8008b58 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8005762:	231f      	movs	r3, #31
 8005764:	2101      	movs	r1, #1
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f003 fa2e 	bl	8008bc8 <USBD_LL_PrepareReceive>
 800576c:	e000      	b.n	8005770 <MSC_BOT_SendCSW+0x54>
    return;
 800576e:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8005770:	3710      	adds	r7, #16
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	53425355 	.word	0x53425355

0800577c <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800578a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d022      	beq.n	80057d8 <MSC_BOT_Abort+0x5c>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8005798:	2b00      	cmp	r3, #0
 800579a:	d10c      	bne.n	80057b6 <MSC_BOT_Abort+0x3a>
      (hmsc->cbw.dDataLength != 0U) &&
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d007      	beq.n	80057b6 <MSC_BOT_Abort+0x3a>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d103      	bne.n	80057b6 <MSC_BOT_Abort+0x3a>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 80057ae:	2101      	movs	r1, #1
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f003 f903 	bl	80089bc <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80057b6:	2181      	movs	r1, #129	; 0x81
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f003 f8ff 	bl	80089bc <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	7a5b      	ldrb	r3, [r3, #9]
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	d109      	bne.n	80057da <MSC_BOT_Abort+0x5e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80057c6:	2181      	movs	r1, #129	; 0x81
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f003 f8f7 	bl	80089bc <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 80057ce:	2101      	movs	r1, #1
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f003 f8f3 	bl	80089bc <USBD_LL_StallEP>
 80057d6:	e000      	b.n	80057da <MSC_BOT_Abort+0x5e>
    return;
 80057d8:	bf00      	nop
  }
}
 80057da:	3710      	adds	r7, #16
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	460b      	mov	r3, r1
 80057ea:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057f2:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d019      	beq.n	800582e <MSC_BOT_CplClrFeature+0x4e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	7a5b      	ldrb	r3, [r3, #9]
 80057fe:	2b02      	cmp	r3, #2
 8005800:	d108      	bne.n	8005814 <MSC_BOT_CplClrFeature+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8005802:	2181      	movs	r1, #129	; 0x81
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f003 f8d9 	bl	80089bc <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800580a:	2101      	movs	r1, #1
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f003 f8d5 	bl	80089bc <USBD_LL_StallEP>
 8005812:	e00f      	b.n	8005834 <MSC_BOT_CplClrFeature+0x54>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8005814:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005818:	2b00      	cmp	r3, #0
 800581a:	da0a      	bge.n	8005832 <MSC_BOT_CplClrFeature+0x52>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	7a5b      	ldrb	r3, [r3, #9]
 8005820:	2b01      	cmp	r3, #1
 8005822:	d006      	beq.n	8005832 <MSC_BOT_CplClrFeature+0x52>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8005824:	2101      	movs	r1, #1
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f7ff ff78 	bl	800571c <MSC_BOT_SendCSW>
 800582c:	e002      	b.n	8005834 <MSC_BOT_CplClrFeature+0x54>
    return;
 800582e:	bf00      	nop
 8005830:	e000      	b.n	8005834 <MSC_BOT_CplClrFeature+0x54>
  }
  else
  {
    return;
 8005832:	bf00      	nop
  }
}
 8005834:	3710      	adds	r7, #16
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
	...

0800583c <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b086      	sub	sp, #24
 8005840:	af00      	add	r7, sp, #0
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	460b      	mov	r3, r1
 8005846:	607a      	str	r2, [r7, #4]
 8005848:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005850:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d102      	bne.n	800585e <SCSI_ProcessCmd+0x22>
  {
    return -1;
 8005858:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800585c:	e168      	b.n	8005b30 <SCSI_ProcessCmd+0x2f4>
  }

  switch (cmd[0])
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	2baa      	cmp	r3, #170	; 0xaa
 8005864:	f000 8144 	beq.w	8005af0 <SCSI_ProcessCmd+0x2b4>
 8005868:	2baa      	cmp	r3, #170	; 0xaa
 800586a:	f300 8153 	bgt.w	8005b14 <SCSI_ProcessCmd+0x2d8>
 800586e:	2ba8      	cmp	r3, #168	; 0xa8
 8005870:	f000 812c 	beq.w	8005acc <SCSI_ProcessCmd+0x290>
 8005874:	2ba8      	cmp	r3, #168	; 0xa8
 8005876:	f300 814d 	bgt.w	8005b14 <SCSI_ProcessCmd+0x2d8>
 800587a:	2b5a      	cmp	r3, #90	; 0x5a
 800587c:	f300 80c0 	bgt.w	8005a00 <SCSI_ProcessCmd+0x1c4>
 8005880:	2b00      	cmp	r3, #0
 8005882:	f2c0 8147 	blt.w	8005b14 <SCSI_ProcessCmd+0x2d8>
 8005886:	2b5a      	cmp	r3, #90	; 0x5a
 8005888:	f200 8144 	bhi.w	8005b14 <SCSI_ProcessCmd+0x2d8>
 800588c:	a201      	add	r2, pc, #4	; (adr r2, 8005894 <SCSI_ProcessCmd+0x58>)
 800588e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005892:	bf00      	nop
 8005894:	08005a07 	.word	0x08005a07
 8005898:	08005b15 	.word	0x08005b15
 800589c:	08005b15 	.word	0x08005b15
 80058a0:	08005a19 	.word	0x08005a19
 80058a4:	08005b15 	.word	0x08005b15
 80058a8:	08005b15 	.word	0x08005b15
 80058ac:	08005b15 	.word	0x08005b15
 80058b0:	08005b15 	.word	0x08005b15
 80058b4:	08005b15 	.word	0x08005b15
 80058b8:	08005b15 	.word	0x08005b15
 80058bc:	08005b15 	.word	0x08005b15
 80058c0:	08005b15 	.word	0x08005b15
 80058c4:	08005b15 	.word	0x08005b15
 80058c8:	08005b15 	.word	0x08005b15
 80058cc:	08005b15 	.word	0x08005b15
 80058d0:	08005b15 	.word	0x08005b15
 80058d4:	08005b15 	.word	0x08005b15
 80058d8:	08005b15 	.word	0x08005b15
 80058dc:	08005a2b 	.word	0x08005a2b
 80058e0:	08005b15 	.word	0x08005b15
 80058e4:	08005b15 	.word	0x08005b15
 80058e8:	08005b15 	.word	0x08005b15
 80058ec:	08005b15 	.word	0x08005b15
 80058f0:	08005b15 	.word	0x08005b15
 80058f4:	08005b15 	.word	0x08005b15
 80058f8:	08005b15 	.word	0x08005b15
 80058fc:	08005a61 	.word	0x08005a61
 8005900:	08005a3d 	.word	0x08005a3d
 8005904:	08005b15 	.word	0x08005b15
 8005908:	08005b15 	.word	0x08005b15
 800590c:	08005a4f 	.word	0x08005a4f
 8005910:	08005b15 	.word	0x08005b15
 8005914:	08005b15 	.word	0x08005b15
 8005918:	08005b15 	.word	0x08005b15
 800591c:	08005b15 	.word	0x08005b15
 8005920:	08005a85 	.word	0x08005a85
 8005924:	08005b15 	.word	0x08005b15
 8005928:	08005a97 	.word	0x08005a97
 800592c:	08005b15 	.word	0x08005b15
 8005930:	08005b15 	.word	0x08005b15
 8005934:	08005abb 	.word	0x08005abb
 8005938:	08005b15 	.word	0x08005b15
 800593c:	08005adf 	.word	0x08005adf
 8005940:	08005b15 	.word	0x08005b15
 8005944:	08005b15 	.word	0x08005b15
 8005948:	08005b15 	.word	0x08005b15
 800594c:	08005b15 	.word	0x08005b15
 8005950:	08005b03 	.word	0x08005b03
 8005954:	08005b15 	.word	0x08005b15
 8005958:	08005b15 	.word	0x08005b15
 800595c:	08005b15 	.word	0x08005b15
 8005960:	08005b15 	.word	0x08005b15
 8005964:	08005b15 	.word	0x08005b15
 8005968:	08005b15 	.word	0x08005b15
 800596c:	08005b15 	.word	0x08005b15
 8005970:	08005b15 	.word	0x08005b15
 8005974:	08005b15 	.word	0x08005b15
 8005978:	08005b15 	.word	0x08005b15
 800597c:	08005b15 	.word	0x08005b15
 8005980:	08005b15 	.word	0x08005b15
 8005984:	08005b15 	.word	0x08005b15
 8005988:	08005b15 	.word	0x08005b15
 800598c:	08005b15 	.word	0x08005b15
 8005990:	08005b15 	.word	0x08005b15
 8005994:	08005b15 	.word	0x08005b15
 8005998:	08005b15 	.word	0x08005b15
 800599c:	08005b15 	.word	0x08005b15
 80059a0:	08005b15 	.word	0x08005b15
 80059a4:	08005b15 	.word	0x08005b15
 80059a8:	08005b15 	.word	0x08005b15
 80059ac:	08005b15 	.word	0x08005b15
 80059b0:	08005b15 	.word	0x08005b15
 80059b4:	08005b15 	.word	0x08005b15
 80059b8:	08005b15 	.word	0x08005b15
 80059bc:	08005b15 	.word	0x08005b15
 80059c0:	08005b15 	.word	0x08005b15
 80059c4:	08005b15 	.word	0x08005b15
 80059c8:	08005b15 	.word	0x08005b15
 80059cc:	08005b15 	.word	0x08005b15
 80059d0:	08005b15 	.word	0x08005b15
 80059d4:	08005b15 	.word	0x08005b15
 80059d8:	08005b15 	.word	0x08005b15
 80059dc:	08005b15 	.word	0x08005b15
 80059e0:	08005b15 	.word	0x08005b15
 80059e4:	08005b15 	.word	0x08005b15
 80059e8:	08005b15 	.word	0x08005b15
 80059ec:	08005b15 	.word	0x08005b15
 80059f0:	08005b15 	.word	0x08005b15
 80059f4:	08005b15 	.word	0x08005b15
 80059f8:	08005b15 	.word	0x08005b15
 80059fc:	08005a73 	.word	0x08005a73
 8005a00:	2b9e      	cmp	r3, #158	; 0x9e
 8005a02:	d051      	beq.n	8005aa8 <SCSI_ProcessCmd+0x26c>
 8005a04:	e086      	b.n	8005b14 <SCSI_ProcessCmd+0x2d8>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8005a06:	7afb      	ldrb	r3, [r7, #11]
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	68f8      	ldr	r0, [r7, #12]
 8005a0e:	f000 f893 	bl	8005b38 <SCSI_TestUnitReady>
 8005a12:	4603      	mov	r3, r0
 8005a14:	75fb      	strb	r3, [r7, #23]
      break;
 8005a16:	e089      	b.n	8005b2c <SCSI_ProcessCmd+0x2f0>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8005a18:	7afb      	ldrb	r3, [r7, #11]
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	68f8      	ldr	r0, [r7, #12]
 8005a20:	f000 fb38 	bl	8006094 <SCSI_RequestSense>
 8005a24:	4603      	mov	r3, r0
 8005a26:	75fb      	strb	r3, [r7, #23]
      break;
 8005a28:	e080      	b.n	8005b2c <SCSI_ProcessCmd+0x2f0>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8005a2a:	7afb      	ldrb	r3, [r7, #11]
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	4619      	mov	r1, r3
 8005a30:	68f8      	ldr	r0, [r7, #12]
 8005a32:	f000 f8d1 	bl	8005bd8 <SCSI_Inquiry>
 8005a36:	4603      	mov	r3, r0
 8005a38:	75fb      	strb	r3, [r7, #23]
      break;
 8005a3a:	e077      	b.n	8005b2c <SCSI_ProcessCmd+0x2f0>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8005a3c:	7afb      	ldrb	r3, [r7, #11]
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	4619      	mov	r1, r3
 8005a42:	68f8      	ldr	r0, [r7, #12]
 8005a44:	f000 fbec 	bl	8006220 <SCSI_StartStopUnit>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	75fb      	strb	r3, [r7, #23]
      break;
 8005a4c:	e06e      	b.n	8005b2c <SCSI_ProcessCmd+0x2f0>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8005a4e:	7afb      	ldrb	r3, [r7, #11]
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	4619      	mov	r1, r3
 8005a54:	68f8      	ldr	r0, [r7, #12]
 8005a56:	f000 fc34 	bl	80062c2 <SCSI_AllowPreventRemovable>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	75fb      	strb	r3, [r7, #23]
      break;
 8005a5e:	e065      	b.n	8005b2c <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8005a60:	7afb      	ldrb	r3, [r7, #11]
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	4619      	mov	r1, r3
 8005a66:	68f8      	ldr	r0, [r7, #12]
 8005a68:	f000 fabc 	bl	8005fe4 <SCSI_ModeSense6>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	75fb      	strb	r3, [r7, #23]
      break;
 8005a70:	e05c      	b.n	8005b2c <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8005a72:	7afb      	ldrb	r3, [r7, #11]
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	4619      	mov	r1, r3
 8005a78:	68f8      	ldr	r0, [r7, #12]
 8005a7a:	f000 fadf 	bl	800603c <SCSI_ModeSense10>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	75fb      	strb	r3, [r7, #23]
      break;
 8005a82:	e053      	b.n	8005b2c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8005a84:	7afb      	ldrb	r3, [r7, #11]
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	4619      	mov	r1, r3
 8005a8a:	68f8      	ldr	r0, [r7, #12]
 8005a8c:	f000 fa37 	bl	8005efe <SCSI_ReadFormatCapacity>
 8005a90:	4603      	mov	r3, r0
 8005a92:	75fb      	strb	r3, [r7, #23]
      break;
 8005a94:	e04a      	b.n	8005b2c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8005a96:	7afb      	ldrb	r3, [r7, #11]
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	68f8      	ldr	r0, [r7, #12]
 8005a9e:	f000 f90f 	bl	8005cc0 <SCSI_ReadCapacity10>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	75fb      	strb	r3, [r7, #23]
      break;
 8005aa6:	e041      	b.n	8005b2c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8005aa8:	7afb      	ldrb	r3, [r7, #11]
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	4619      	mov	r1, r3
 8005aae:	68f8      	ldr	r0, [r7, #12]
 8005ab0:	f000 f97b 	bl	8005daa <SCSI_ReadCapacity16>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	75fb      	strb	r3, [r7, #23]
      break;
 8005ab8:	e038      	b.n	8005b2c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8005aba:	7afb      	ldrb	r3, [r7, #11]
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	4619      	mov	r1, r3
 8005ac0:	68f8      	ldr	r0, [r7, #12]
 8005ac2:	f000 fc27 	bl	8006314 <SCSI_Read10>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	75fb      	strb	r3, [r7, #23]
      break;
 8005aca:	e02f      	b.n	8005b2c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8005acc:	7afb      	ldrb	r3, [r7, #11]
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	68f8      	ldr	r0, [r7, #12]
 8005ad4:	f000 fcbe 	bl	8006454 <SCSI_Read12>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	75fb      	strb	r3, [r7, #23]
      break;
 8005adc:	e026      	b.n	8005b2c <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8005ade:	7afb      	ldrb	r3, [r7, #11]
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	68f8      	ldr	r0, [r7, #12]
 8005ae6:	f000 fd60 	bl	80065aa <SCSI_Write10>
 8005aea:	4603      	mov	r3, r0
 8005aec:	75fb      	strb	r3, [r7, #23]
      break;
 8005aee:	e01d      	b.n	8005b2c <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8005af0:	7afb      	ldrb	r3, [r7, #11]
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	4619      	mov	r1, r3
 8005af6:	68f8      	ldr	r0, [r7, #12]
 8005af8:	f000 fe1c 	bl	8006734 <SCSI_Write12>
 8005afc:	4603      	mov	r3, r0
 8005afe:	75fb      	strb	r3, [r7, #23]
      break;
 8005b00:	e014      	b.n	8005b2c <SCSI_ProcessCmd+0x2f0>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8005b02:	7afb      	ldrb	r3, [r7, #11]
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	4619      	mov	r1, r3
 8005b08:	68f8      	ldr	r0, [r7, #12]
 8005b0a:	f000 fee8 	bl	80068de <SCSI_Verify10>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	75fb      	strb	r3, [r7, #23]
      break;
 8005b12:	e00b      	b.n	8005b2c <SCSI_ProcessCmd+0x2f0>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8005b14:	7af9      	ldrb	r1, [r7, #11]
 8005b16:	2320      	movs	r3, #32
 8005b18:	2205      	movs	r2, #5
 8005b1a:	68f8      	ldr	r0, [r7, #12]
 8005b1c:	f000 fb39 	bl	8006192 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	2202      	movs	r2, #2
 8005b24:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8005b26:	23ff      	movs	r3, #255	; 0xff
 8005b28:	75fb      	strb	r3, [r7, #23]
      break;
 8005b2a:	bf00      	nop
  }

  return ret;
 8005b2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3718      	adds	r7, #24
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b086      	sub	sp, #24
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	460b      	mov	r3, r1
 8005b42:	607a      	str	r2, [r7, #4]
 8005b44:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b4c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d102      	bne.n	8005b5a <SCSI_TestUnitReady+0x22>
  {
    return -1;
 8005b54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b58:	e03a      	b.n	8005bd0 <SCSI_TestUnitReady+0x98>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d00a      	beq.n	8005b7a <SCSI_TestUnitReady+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005b6a:	2320      	movs	r3, #32
 8005b6c:	2205      	movs	r2, #5
 8005b6e:	68f8      	ldr	r0, [r7, #12]
 8005b70:	f000 fb0f 	bl	8006192 <SCSI_SenseCode>

    return -1;
 8005b74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b78:	e02a      	b.n	8005bd0 <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8005b80:	2b02      	cmp	r3, #2
 8005b82:	d10b      	bne.n	8005b9c <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005b84:	7af9      	ldrb	r1, [r7, #11]
 8005b86:	233a      	movs	r3, #58	; 0x3a
 8005b88:	2202      	movs	r2, #2
 8005b8a:	68f8      	ldr	r0, [r7, #12]
 8005b8c:	f000 fb01 	bl	8006192 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	2205      	movs	r2, #5
 8005b94:	721a      	strb	r2, [r3, #8]
    return -1;
 8005b96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b9a:	e019      	b.n	8005bd0 <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	7afa      	ldrb	r2, [r7, #11]
 8005ba6:	4610      	mov	r0, r2
 8005ba8:	4798      	blx	r3
 8005baa:	4603      	mov	r3, r0
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d00b      	beq.n	8005bc8 <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005bb0:	7af9      	ldrb	r1, [r7, #11]
 8005bb2:	233a      	movs	r3, #58	; 0x3a
 8005bb4:	2202      	movs	r2, #2
 8005bb6:	68f8      	ldr	r0, [r7, #12]
 8005bb8:	f000 faeb 	bl	8006192 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	2205      	movs	r2, #5
 8005bc0:	721a      	strb	r2, [r3, #8]

    return -1;
 8005bc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005bc6:	e003      	b.n	8005bd0 <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	60da      	str	r2, [r3, #12]

  return 0;
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3718      	adds	r7, #24
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b088      	sub	sp, #32
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	460b      	mov	r3, r1
 8005be2:	607a      	str	r2, [r7, #4]
 8005be4:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bec:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d102      	bne.n	8005bfa <SCSI_Inquiry+0x22>
  {
    return -1;
 8005bf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005bf8:	e05a      	b.n	8005cb0 <SCSI_Inquiry+0xd8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d10a      	bne.n	8005c1a <SCSI_Inquiry+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005c0a:	2320      	movs	r3, #32
 8005c0c:	2205      	movs	r2, #5
 8005c0e:	68f8      	ldr	r0, [r7, #12]
 8005c10:	f000 fabf 	bl	8006192 <SCSI_SenseCode>
    return -1;
 8005c14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c18:	e04a      	b.n	8005cb0 <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	f003 0301 	and.w	r3, r3, #1
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d020      	beq.n	8005c6a <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	3302      	adds	r3, #2
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d105      	bne.n	8005c3e <SCSI_Inquiry+0x66>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8005c32:	2206      	movs	r2, #6
 8005c34:	4920      	ldr	r1, [pc, #128]	; (8005cb8 <SCSI_Inquiry+0xe0>)
 8005c36:	69b8      	ldr	r0, [r7, #24]
 8005c38:	f000 ffb4 	bl	8006ba4 <SCSI_UpdateBotData>
 8005c3c:	e037      	b.n	8005cae <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	3302      	adds	r3, #2
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	2b80      	cmp	r3, #128	; 0x80
 8005c46:	d105      	bne.n	8005c54 <SCSI_Inquiry+0x7c>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8005c48:	2208      	movs	r2, #8
 8005c4a:	491c      	ldr	r1, [pc, #112]	; (8005cbc <SCSI_Inquiry+0xe4>)
 8005c4c:	69b8      	ldr	r0, [r7, #24]
 8005c4e:	f000 ffa9 	bl	8006ba4 <SCSI_UpdateBotData>
 8005c52:	e02c      	b.n	8005cae <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005c5a:	2324      	movs	r3, #36	; 0x24
 8005c5c:	2205      	movs	r2, #5
 8005c5e:	68f8      	ldr	r0, [r7, #12]
 8005c60:	f000 fa97 	bl	8006192 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8005c64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c68:	e022      	b.n	8005cb0 <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *) &((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c70:	69d9      	ldr	r1, [r3, #28]
 8005c72:	7afa      	ldrb	r2, [r7, #11]
 8005c74:	4613      	mov	r3, r2
 8005c76:	00db      	lsls	r3, r3, #3
 8005c78:	4413      	add	r3, r2
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	440b      	add	r3, r1
 8005c7e:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	3304      	adds	r3, #4
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	3305      	adds	r3, #5
 8005c8a:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	3304      	adds	r3, #4
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	8bfa      	ldrh	r2, [r7, #30]
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d303      	bcc.n	8005ca2 <SCSI_Inquiry+0xca>
    {
      len = params[4];
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	3304      	adds	r3, #4
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8005ca2:	8bfb      	ldrh	r3, [r7, #30]
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	6979      	ldr	r1, [r7, #20]
 8005ca8:	69b8      	ldr	r0, [r7, #24]
 8005caa:	f000 ff7b 	bl	8006ba4 <SCSI_UpdateBotData>
  }

  return 0;
 8005cae:	2300      	movs	r3, #0
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3720      	adds	r7, #32
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	200000d0 	.word	0x200000d0
 8005cbc:	200000d8 	.word	0x200000d8

08005cc0 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b086      	sub	sp, #24
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	460b      	mov	r3, r1
 8005cca:	607a      	str	r2, [r7, #4]
 8005ccc:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005cd4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d102      	bne.n	8005ce2 <SCSI_ReadCapacity10+0x22>
  {
    return -1;
 8005cdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ce0:	e05f      	b.n	8005da2 <SCSI_ReadCapacity10+0xe2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8005cf6:	7af8      	ldrb	r0, [r7, #11]
 8005cf8:	4798      	blx	r3
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8005cfe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d104      	bne.n	8005d10 <SCSI_ReadCapacity10+0x50>
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8005d0c:	2b02      	cmp	r3, #2
 8005d0e:	d108      	bne.n	8005d22 <SCSI_ReadCapacity10+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005d10:	7af9      	ldrb	r1, [r7, #11]
 8005d12:	233a      	movs	r3, #58	; 0x3a
 8005d14:	2202      	movs	r2, #2
 8005d16:	68f8      	ldr	r0, [r7, #12]
 8005d18:	f000 fa3b 	bl	8006192 <SCSI_SenseCode>
    return -1;
 8005d1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d20:	e03f      	b.n	8005da2 <SCSI_ReadCapacity10+0xe2>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005d28:	3b01      	subs	r3, #1
 8005d2a:	0e1b      	lsrs	r3, r3, #24
 8005d2c:	b2da      	uxtb	r2, r3
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005d38:	3b01      	subs	r3, #1
 8005d3a:	0c1b      	lsrs	r3, r3, #16
 8005d3c:	b2da      	uxtb	r2, r3
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	0a1b      	lsrs	r3, r3, #8
 8005d4c:	b2da      	uxtb	r2, r3
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	b2da      	uxtb	r2, r3
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005d68:	161b      	asrs	r3, r3, #24
 8005d6a:	b2da      	uxtb	r2, r3
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005d76:	141b      	asrs	r3, r3, #16
 8005d78:	b2da      	uxtb	r2, r3
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005d84:	0a1b      	lsrs	r3, r3, #8
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	b2da      	uxtb	r2, r3
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005d94:	b2da      	uxtb	r2, r3
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	2208      	movs	r2, #8
 8005d9e:	60da      	str	r2, [r3, #12]

  return 0;
 8005da0:	2300      	movs	r3, #0

}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3718      	adds	r7, #24
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}

08005daa <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005daa:	b580      	push	{r7, lr}
 8005dac:	b088      	sub	sp, #32
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	60f8      	str	r0, [r7, #12]
 8005db2:	460b      	mov	r3, r1
 8005db4:	607a      	str	r2, [r7, #4]
 8005db6:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005dbe:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d102      	bne.n	8005dcc <SCSI_ReadCapacity16+0x22>
  {
    return -1;
 8005dc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005dca:	e094      	b.n	8005ef6 <SCSI_ReadCapacity16+0x14c>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	69ba      	ldr	r2, [r7, #24]
 8005dd6:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8005dda:	69ba      	ldr	r2, [r7, #24]
 8005ddc:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8005de0:	7af8      	ldrb	r0, [r7, #11]
 8005de2:	4798      	blx	r3
 8005de4:	4603      	mov	r3, r0
 8005de6:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8005de8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d104      	bne.n	8005dfa <SCSI_ReadCapacity16+0x50>
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8005df6:	2b02      	cmp	r3, #2
 8005df8:	d108      	bne.n	8005e0c <SCSI_ReadCapacity16+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005dfa:	7af9      	ldrb	r1, [r7, #11]
 8005dfc:	233a      	movs	r3, #58	; 0x3a
 8005dfe:	2202      	movs	r2, #2
 8005e00:	68f8      	ldr	r0, [r7, #12]
 8005e02:	f000 f9c6 	bl	8006192 <SCSI_SenseCode>
    return -1;
 8005e06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e0a:	e074      	b.n	8005ef6 <SCSI_ReadCapacity16+0x14c>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	330a      	adds	r3, #10
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	330b      	adds	r3, #11
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8005e1c:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	330c      	adds	r3, #12
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8005e26:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	320d      	adds	r2, #13
 8005e2c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8005e2e:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8005e34:	2300      	movs	r3, #0
 8005e36:	77fb      	strb	r3, [r7, #31]
 8005e38:	e007      	b.n	8005e4a <SCSI_ReadCapacity16+0xa0>
  {
    hmsc->bot_data[idx] = 0U;
 8005e3a:	7ffb      	ldrb	r3, [r7, #31]
 8005e3c:	69ba      	ldr	r2, [r7, #24]
 8005e3e:	4413      	add	r3, r2
 8005e40:	2200      	movs	r2, #0
 8005e42:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8005e44:	7ffb      	ldrb	r3, [r7, #31]
 8005e46:	3301      	adds	r3, #1
 8005e48:	77fb      	strb	r3, [r7, #31]
 8005e4a:	7ffa      	ldrb	r2, [r7, #31]
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d3f2      	bcc.n	8005e3a <SCSI_ReadCapacity16+0x90>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8005e54:	69bb      	ldr	r3, [r7, #24]
 8005e56:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	0e1b      	lsrs	r3, r3, #24
 8005e5e:	b2da      	uxtb	r2, r3
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005e6a:	3b01      	subs	r3, #1
 8005e6c:	0c1b      	lsrs	r3, r3, #16
 8005e6e:	b2da      	uxtb	r2, r3
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8005e74:	69bb      	ldr	r3, [r7, #24]
 8005e76:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005e7a:	3b01      	subs	r3, #1
 8005e7c:	0a1b      	lsrs	r3, r3, #8
 8005e7e:	b2da      	uxtb	r2, r3
 8005e80:	69bb      	ldr	r3, [r7, #24]
 8005e82:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8005e84:	69bb      	ldr	r3, [r7, #24]
 8005e86:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	3b01      	subs	r3, #1
 8005e8e:	b2da      	uxtb	r2, r3
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8005e94:	69bb      	ldr	r3, [r7, #24]
 8005e96:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005e9a:	161b      	asrs	r3, r3, #24
 8005e9c:	b2da      	uxtb	r2, r3
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005ea8:	141b      	asrs	r3, r3, #16
 8005eaa:	b2da      	uxtb	r2, r3
 8005eac:	69bb      	ldr	r3, [r7, #24]
 8005eae:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005eb6:	0a1b      	lsrs	r3, r3, #8
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	b2da      	uxtb	r2, r3
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005ec6:	b2da      	uxtb	r2, r3
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	330a      	adds	r3, #10
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	330b      	adds	r3, #11
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8005edc:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	330c      	adds	r3, #12
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8005ee6:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	320d      	adds	r2, #13
 8005eec:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8005eee:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	60da      	str	r2, [r3, #12]

  return 0;
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3720      	adds	r7, #32
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}

08005efe <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005efe:	b580      	push	{r7, lr}
 8005f00:	b088      	sub	sp, #32
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	60f8      	str	r0, [r7, #12]
 8005f06:	460b      	mov	r3, r1
 8005f08:	607a      	str	r2, [r7, #4]
 8005f0a:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f12:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d102      	bne.n	8005f20 <SCSI_ReadFormatCapacity+0x22>
  {
    return -1;
 8005f1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f1e:	e05c      	b.n	8005fda <SCSI_ReadFormatCapacity+0xdc>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	f107 0214 	add.w	r2, r7, #20
 8005f2c:	f107 0110 	add.w	r1, r7, #16
 8005f30:	7af8      	ldrb	r0, [r7, #11]
 8005f32:	4798      	blx	r3
 8005f34:	4603      	mov	r3, r0
 8005f36:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8005f38:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d104      	bne.n	8005f4a <SCSI_ReadFormatCapacity+0x4c>
 8005f40:	69bb      	ldr	r3, [r7, #24]
 8005f42:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8005f46:	2b02      	cmp	r3, #2
 8005f48:	d108      	bne.n	8005f5c <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005f4a:	7af9      	ldrb	r1, [r7, #11]
 8005f4c:	233a      	movs	r3, #58	; 0x3a
 8005f4e:	2202      	movs	r2, #2
 8005f50:	68f8      	ldr	r0, [r7, #12]
 8005f52:	f000 f91e 	bl	8006192 <SCSI_SenseCode>
    return -1;
 8005f56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f5a:	e03e      	b.n	8005fda <SCSI_ReadFormatCapacity+0xdc>
  }

  for (i = 0U; i < 12U ; i++)
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	83fb      	strh	r3, [r7, #30]
 8005f60:	e007      	b.n	8005f72 <SCSI_ReadFormatCapacity+0x74>
  {
    hmsc->bot_data[i] = 0U;
 8005f62:	8bfb      	ldrh	r3, [r7, #30]
 8005f64:	69ba      	ldr	r2, [r7, #24]
 8005f66:	4413      	add	r3, r2
 8005f68:	2200      	movs	r2, #0
 8005f6a:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8005f6c:	8bfb      	ldrh	r3, [r7, #30]
 8005f6e:	3301      	adds	r3, #1
 8005f70:	83fb      	strh	r3, [r7, #30]
 8005f72:	8bfb      	ldrh	r3, [r7, #30]
 8005f74:	2b0b      	cmp	r3, #11
 8005f76:	d9f4      	bls.n	8005f62 <SCSI_ReadFormatCapacity+0x64>
  }

  hmsc->bot_data[3] = 0x08U;
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	2208      	movs	r2, #8
 8005f7c:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	3b01      	subs	r3, #1
 8005f82:	0e1b      	lsrs	r3, r3, #24
 8005f84:	b2da      	uxtb	r2, r3
 8005f86:	69bb      	ldr	r3, [r7, #24]
 8005f88:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	0c1b      	lsrs	r3, r3, #16
 8005f90:	b2da      	uxtb	r2, r3
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	3b01      	subs	r3, #1
 8005f9a:	0a1b      	lsrs	r3, r3, #8
 8005f9c:	b2da      	uxtb	r2, r3
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	3b01      	subs	r3, #1
 8005fa8:	b2da      	uxtb	r2, r3
 8005faa:	69bb      	ldr	r3, [r7, #24]
 8005fac:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	2202      	movs	r2, #2
 8005fb2:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8005fb4:	8abb      	ldrh	r3, [r7, #20]
 8005fb6:	141b      	asrs	r3, r3, #16
 8005fb8:	b2da      	uxtb	r2, r3
 8005fba:	69bb      	ldr	r3, [r7, #24]
 8005fbc:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8005fbe:	8abb      	ldrh	r3, [r7, #20]
 8005fc0:	0a1b      	lsrs	r3, r3, #8
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	b2da      	uxtb	r2, r3
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8005fca:	8abb      	ldrh	r3, [r7, #20]
 8005fcc:	b2da      	uxtb	r2, r3
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	220c      	movs	r2, #12
 8005fd6:	60da      	str	r2, [r3, #12]

  return 0;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3720      	adds	r7, #32
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
	...

08005fe4 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b086      	sub	sp, #24
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	460b      	mov	r3, r1
 8005fee:	607a      	str	r2, [r7, #4]
 8005ff0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ff8:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8005ffa:	2317      	movs	r3, #23
 8005ffc:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d102      	bne.n	800600a <SCSI_ModeSense6+0x26>
  {
    return -1;
 8006004:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006008:	e011      	b.n	800602e <SCSI_ModeSense6+0x4a>
  }

  if (params[4] <= len)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	3304      	adds	r3, #4
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	b29b      	uxth	r3, r3
 8006012:	8afa      	ldrh	r2, [r7, #22]
 8006014:	429a      	cmp	r2, r3
 8006016:	d303      	bcc.n	8006020 <SCSI_ModeSense6+0x3c>
  {
    len = params[4];
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	3304      	adds	r3, #4
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8006020:	8afb      	ldrh	r3, [r7, #22]
 8006022:	461a      	mov	r2, r3
 8006024:	4904      	ldr	r1, [pc, #16]	; (8006038 <SCSI_ModeSense6+0x54>)
 8006026:	6938      	ldr	r0, [r7, #16]
 8006028:	f000 fdbc 	bl	8006ba4 <SCSI_UpdateBotData>

  return 0;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	3718      	adds	r7, #24
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	200000e0 	.word	0x200000e0

0800603c <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b086      	sub	sp, #24
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	460b      	mov	r3, r1
 8006046:	607a      	str	r2, [r7, #4]
 8006048:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006050:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8006052:	231b      	movs	r3, #27
 8006054:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d102      	bne.n	8006062 <SCSI_ModeSense10+0x26>
  {
    return -1;
 800605c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006060:	e011      	b.n	8006086 <SCSI_ModeSense10+0x4a>
  }

  if (params[8] <= len)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	3308      	adds	r3, #8
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	b29b      	uxth	r3, r3
 800606a:	8afa      	ldrh	r2, [r7, #22]
 800606c:	429a      	cmp	r2, r3
 800606e:	d303      	bcc.n	8006078 <SCSI_ModeSense10+0x3c>
  {
    len = params[8];
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	3308      	adds	r3, #8
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8006078:	8afb      	ldrh	r3, [r7, #22]
 800607a:	461a      	mov	r2, r3
 800607c:	4904      	ldr	r1, [pc, #16]	; (8006090 <SCSI_ModeSense10+0x54>)
 800607e:	6938      	ldr	r0, [r7, #16]
 8006080:	f000 fd90 	bl	8006ba4 <SCSI_UpdateBotData>

  return 0;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	3718      	adds	r7, #24
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop
 8006090:	200000f8 	.word	0x200000f8

08006094 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b086      	sub	sp, #24
 8006098:	af00      	add	r7, sp, #0
 800609a:	60f8      	str	r0, [r7, #12]
 800609c:	460b      	mov	r3, r1
 800609e:	607a      	str	r2, [r7, #4]
 80060a0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060a8:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d102      	bne.n	80060b6 <SCSI_RequestSense+0x22>
  {
    return -1;
 80060b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80060b4:	e069      	b.n	800618a <SCSI_RequestSense+0xf6>
  }

  if (hmsc->cbw.dDataLength == 0U)
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d10a      	bne.n	80060d6 <SCSI_RequestSense+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80060c6:	2320      	movs	r3, #32
 80060c8:	2205      	movs	r2, #5
 80060ca:	68f8      	ldr	r0, [r7, #12]
 80060cc:	f000 f861 	bl	8006192 <SCSI_SenseCode>
    return -1;
 80060d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80060d4:	e059      	b.n	800618a <SCSI_RequestSense+0xf6>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 80060d6:	2300      	movs	r3, #0
 80060d8:	75fb      	strb	r3, [r7, #23]
 80060da:	e007      	b.n	80060ec <SCSI_RequestSense+0x58>
  {
    hmsc->bot_data[i] = 0U;
 80060dc:	7dfb      	ldrb	r3, [r7, #23]
 80060de:	693a      	ldr	r2, [r7, #16]
 80060e0:	4413      	add	r3, r2
 80060e2:	2200      	movs	r2, #0
 80060e4:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 80060e6:	7dfb      	ldrb	r3, [r7, #23]
 80060e8:	3301      	adds	r3, #1
 80060ea:	75fb      	strb	r3, [r7, #23]
 80060ec:	7dfb      	ldrb	r3, [r7, #23]
 80060ee:	2b11      	cmp	r3, #17
 80060f0:	d9f4      	bls.n	80060dc <SCSI_RequestSense+0x48>
  }

  hmsc->bot_data[0] = 0x70U;
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	2270      	movs	r2, #112	; 0x70
 80060f6:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	220c      	movs	r2, #12
 80060fc:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800610a:	429a      	cmp	r2, r3
 800610c:	d02e      	beq.n	800616c <SCSI_RequestSense+0xd8>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8006114:	461a      	mov	r2, r3
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	3248      	adds	r2, #72	; 0x48
 800611a:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8006128:	693a      	ldr	r2, [r7, #16]
 800612a:	3348      	adds	r3, #72	; 0x48
 800612c:	00db      	lsls	r3, r3, #3
 800612e:	4413      	add	r3, r2
 8006130:	791a      	ldrb	r2, [r3, #4]
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800613c:	693a      	ldr	r2, [r7, #16]
 800613e:	3348      	adds	r3, #72	; 0x48
 8006140:	00db      	lsls	r3, r3, #3
 8006142:	4413      	add	r3, r2
 8006144:	795a      	ldrb	r2, [r3, #5]
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8006150:	3301      	adds	r3, #1
 8006152:	b2da      	uxtb	r2, r3
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8006160:	2b04      	cmp	r3, #4
 8006162:	d103      	bne.n	800616c <SCSI_RequestSense+0xd8>
    {
      hmsc->scsi_sense_head = 0U;
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	2200      	movs	r2, #0
 8006168:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	2212      	movs	r2, #18
 8006170:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	3304      	adds	r3, #4
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	2b12      	cmp	r3, #18
 800617a:	d805      	bhi.n	8006188 <SCSI_RequestSense+0xf4>
  {
    hmsc->bot_data_length = params[4];
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	3304      	adds	r3, #4
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	461a      	mov	r2, r3
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	3718      	adds	r7, #24
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}

08006192 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8006192:	b480      	push	{r7}
 8006194:	b085      	sub	sp, #20
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
 800619a:	4608      	mov	r0, r1
 800619c:	4611      	mov	r1, r2
 800619e:	461a      	mov	r2, r3
 80061a0:	4603      	mov	r3, r0
 80061a2:	70fb      	strb	r3, [r7, #3]
 80061a4:	460b      	mov	r3, r1
 80061a6:	70bb      	strb	r3, [r7, #2]
 80061a8:	4613      	mov	r3, r2
 80061aa:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061b2:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d02c      	beq.n	8006214 <SCSI_SenseCode+0x82>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80061c0:	461a      	mov	r2, r3
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	3248      	adds	r2, #72	; 0x48
 80061c6:	78b9      	ldrb	r1, [r7, #2]
 80061c8:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80061d2:	68fa      	ldr	r2, [r7, #12]
 80061d4:	3348      	adds	r3, #72	; 0x48
 80061d6:	00db      	lsls	r3, r3, #3
 80061d8:	4413      	add	r3, r2
 80061da:	787a      	ldrb	r2, [r7, #1]
 80061dc:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80061e4:	68fa      	ldr	r2, [r7, #12]
 80061e6:	3348      	adds	r3, #72	; 0x48
 80061e8:	00db      	lsls	r3, r3, #3
 80061ea:	4413      	add	r3, r2
 80061ec:	2200      	movs	r2, #0
 80061ee:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80061f6:	3301      	adds	r3, #1
 80061f8:	b2da      	uxtb	r2, r3
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8006206:	2b04      	cmp	r3, #4
 8006208:	d105      	bne.n	8006216 <SCSI_SenseCode+0x84>
  {
    hmsc->scsi_sense_tail = 0U;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2200      	movs	r2, #0
 800620e:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 8006212:	e000      	b.n	8006216 <SCSI_SenseCode+0x84>
    return;
 8006214:	bf00      	nop
  }
}
 8006216:	3714      	adds	r7, #20
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b086      	sub	sp, #24
 8006224:	af00      	add	r7, sp, #0
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	460b      	mov	r3, r1
 800622a:	607a      	str	r2, [r7, #4]
 800622c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006234:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d102      	bne.n	8006242 <SCSI_StartStopUnit+0x22>
  {
    return -1;
 800623c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006240:	e03b      	b.n	80062ba <SCSI_StartStopUnit+0x9a>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8006248:	2b01      	cmp	r3, #1
 800624a:	d10f      	bne.n	800626c <SCSI_StartStopUnit+0x4c>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	3304      	adds	r3, #4
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	f003 0303 	and.w	r3, r3, #3
 8006256:	2b02      	cmp	r3, #2
 8006258:	d108      	bne.n	800626c <SCSI_StartStopUnit+0x4c>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800625a:	7af9      	ldrb	r1, [r7, #11]
 800625c:	2324      	movs	r3, #36	; 0x24
 800625e:	2205      	movs	r2, #5
 8006260:	68f8      	ldr	r0, [r7, #12]
 8006262:	f7ff ff96 	bl	8006192 <SCSI_SenseCode>

    return -1;
 8006266:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800626a:	e026      	b.n	80062ba <SCSI_StartStopUnit+0x9a>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	3304      	adds	r3, #4
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	f003 0303 	and.w	r3, r3, #3
 8006276:	2b01      	cmp	r3, #1
 8006278:	d104      	bne.n	8006284 <SCSI_StartStopUnit+0x64>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8006282:	e016      	b.n	80062b2 <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	3304      	adds	r3, #4
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	f003 0303 	and.w	r3, r3, #3
 800628e:	2b02      	cmp	r3, #2
 8006290:	d104      	bne.n	800629c <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	2202      	movs	r2, #2
 8006296:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800629a:	e00a      	b.n	80062b2 <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	3304      	adds	r3, #4
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	f003 0303 	and.w	r3, r3, #3
 80062a6:	2b03      	cmp	r3, #3
 80062a8:	d103      	bne.n	80062b2 <SCSI_StartStopUnit+0x92>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	2200      	movs	r2, #0
 80062ae:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	2200      	movs	r2, #0
 80062b6:	60da      	str	r2, [r3, #12]

  return 0;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3718      	adds	r7, #24
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}

080062c2 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80062c2:	b480      	push	{r7}
 80062c4:	b087      	sub	sp, #28
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	60f8      	str	r0, [r7, #12]
 80062ca:	460b      	mov	r3, r1
 80062cc:	607a      	str	r2, [r7, #4]
 80062ce:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062d6:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d102      	bne.n	80062e4 <SCSI_AllowPreventRemovable+0x22>
  {
    return -1;
 80062de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062e2:	e011      	b.n	8006308 <SCSI_AllowPreventRemovable+0x46>
  }

  if (params[4] == 0U)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	3304      	adds	r3, #4
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d104      	bne.n	80062f8 <SCSI_AllowPreventRemovable+0x36>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	2200      	movs	r2, #0
 80062f2:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 80062f6:	e003      	b.n	8006300 <SCSI_AllowPreventRemovable+0x3e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	2200      	movs	r2, #0
 8006304:	60da      	str	r2, [r3, #12]

  return 0;
 8006306:	2300      	movs	r3, #0
}
 8006308:	4618      	mov	r0, r3
 800630a:	371c      	adds	r7, #28
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr

08006314 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b086      	sub	sp, #24
 8006318:	af00      	add	r7, sp, #0
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	460b      	mov	r3, r1
 800631e:	607a      	str	r2, [r7, #4]
 8006320:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006328:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d102      	bne.n	8006336 <SCSI_Read10+0x22>
  {
    return -1;
 8006330:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006334:	e08a      	b.n	800644c <SCSI_Read10+0x138>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	7a1b      	ldrb	r3, [r3, #8]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d17c      	bne.n	8006438 <SCSI_Read10+0x124>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8006344:	b25b      	sxtb	r3, r3
 8006346:	2b00      	cmp	r3, #0
 8006348:	db0a      	blt.n	8006360 <SCSI_Read10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006350:	2320      	movs	r3, #32
 8006352:	2205      	movs	r2, #5
 8006354:	68f8      	ldr	r0, [r7, #12]
 8006356:	f7ff ff1c 	bl	8006192 <SCSI_SenseCode>
      return -1;
 800635a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800635e:	e075      	b.n	800644c <SCSI_Read10+0x138>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8006366:	2b02      	cmp	r3, #2
 8006368:	d108      	bne.n	800637c <SCSI_Read10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800636a:	7af9      	ldrb	r1, [r7, #11]
 800636c:	233a      	movs	r3, #58	; 0x3a
 800636e:	2202      	movs	r2, #2
 8006370:	68f8      	ldr	r0, [r7, #12]
 8006372:	f7ff ff0e 	bl	8006192 <SCSI_SenseCode>

      return -1;
 8006376:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800637a:	e067      	b.n	800644c <SCSI_Read10+0x138>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	7afa      	ldrb	r2, [r7, #11]
 8006386:	4610      	mov	r0, r2
 8006388:	4798      	blx	r3
 800638a:	4603      	mov	r3, r0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d008      	beq.n	80063a2 <SCSI_Read10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006390:	7af9      	ldrb	r1, [r7, #11]
 8006392:	233a      	movs	r3, #58	; 0x3a
 8006394:	2202      	movs	r2, #2
 8006396:	68f8      	ldr	r0, [r7, #12]
 8006398:	f7ff fefb 	bl	8006192 <SCSI_SenseCode>
      return -1;
 800639c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063a0:	e054      	b.n	800644c <SCSI_Read10+0x138>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	3302      	adds	r3, #2
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	3303      	adds	r3, #3
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80063b2:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	3304      	adds	r3, #4
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80063bc:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	3205      	adds	r2, #5
 80063c2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80063c4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	3307      	adds	r3, #7
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	021b      	lsls	r3, r3, #8
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	3208      	adds	r2, #8
 80063d8:	7812      	ldrb	r2, [r2, #0]
 80063da:	431a      	orrs	r2, r3
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80063ee:	7af9      	ldrb	r1, [r7, #11]
 80063f0:	68f8      	ldr	r0, [r7, #12]
 80063f2:	f000 faad 	bl	8006950 <SCSI_CheckAddressRange>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	da02      	bge.n	8006402 <SCSI_Read10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80063fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006400:	e024      	b.n	800644c <SCSI_Read10+0x138>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800640e:	6979      	ldr	r1, [r7, #20]
 8006410:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8006414:	fb01 f303 	mul.w	r3, r1, r3
 8006418:	429a      	cmp	r2, r3
 800641a:	d00a      	beq.n	8006432 <SCSI_Read10+0x11e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006422:	2320      	movs	r3, #32
 8006424:	2205      	movs	r2, #5
 8006426:	68f8      	ldr	r0, [r7, #12]
 8006428:	f7ff feb3 	bl	8006192 <SCSI_SenseCode>
      return -1;
 800642c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006430:	e00c      	b.n	800644c <SCSI_Read10+0x138>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	2202      	movs	r2, #2
 8006436:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800643e:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8006440:	7afb      	ldrb	r3, [r7, #11]
 8006442:	4619      	mov	r1, r3
 8006444:	68f8      	ldr	r0, [r7, #12]
 8006446:	f000 faab 	bl	80069a0 <SCSI_ProcessRead>
 800644a:	4603      	mov	r3, r0
}
 800644c:	4618      	mov	r0, r3
 800644e:	3718      	adds	r7, #24
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b086      	sub	sp, #24
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	460b      	mov	r3, r1
 800645e:	607a      	str	r2, [r7, #4]
 8006460:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006468:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d102      	bne.n	8006476 <SCSI_Read12+0x22>
  {
    return -1;
 8006470:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006474:	e095      	b.n	80065a2 <SCSI_Read12+0x14e>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	7a1b      	ldrb	r3, [r3, #8]
 800647a:	2b00      	cmp	r3, #0
 800647c:	f040 8087 	bne.w	800658e <SCSI_Read12+0x13a>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8006486:	b25b      	sxtb	r3, r3
 8006488:	2b00      	cmp	r3, #0
 800648a:	db0a      	blt.n	80064a2 <SCSI_Read12+0x4e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006492:	2320      	movs	r3, #32
 8006494:	2205      	movs	r2, #5
 8006496:	68f8      	ldr	r0, [r7, #12]
 8006498:	f7ff fe7b 	bl	8006192 <SCSI_SenseCode>
      return -1;
 800649c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064a0:	e07f      	b.n	80065a2 <SCSI_Read12+0x14e>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80064a8:	2b02      	cmp	r3, #2
 80064aa:	d108      	bne.n	80064be <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80064ac:	7af9      	ldrb	r1, [r7, #11]
 80064ae:	233a      	movs	r3, #58	; 0x3a
 80064b0:	2202      	movs	r2, #2
 80064b2:	68f8      	ldr	r0, [r7, #12]
 80064b4:	f7ff fe6d 	bl	8006192 <SCSI_SenseCode>
      return -1;
 80064b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064bc:	e071      	b.n	80065a2 <SCSI_Read12+0x14e>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	7afa      	ldrb	r2, [r7, #11]
 80064c8:	4610      	mov	r0, r2
 80064ca:	4798      	blx	r3
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d008      	beq.n	80064e4 <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80064d2:	7af9      	ldrb	r1, [r7, #11]
 80064d4:	233a      	movs	r3, #58	; 0x3a
 80064d6:	2202      	movs	r2, #2
 80064d8:	68f8      	ldr	r0, [r7, #12]
 80064da:	f7ff fe5a 	bl	8006192 <SCSI_SenseCode>
      return -1;
 80064de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064e2:	e05e      	b.n	80065a2 <SCSI_Read12+0x14e>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	3302      	adds	r3, #2
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	3303      	adds	r3, #3
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80064f4:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	3304      	adds	r3, #4
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80064fe:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	3205      	adds	r2, #5
 8006504:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8006506:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	3306      	adds	r3, #6
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	3307      	adds	r3, #7
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800651e:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	3308      	adds	r3, #8
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8006528:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	3209      	adds	r2, #9
 800652e:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8006530:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006544:	7af9      	ldrb	r1, [r7, #11]
 8006546:	68f8      	ldr	r0, [r7, #12]
 8006548:	f000 fa02 	bl	8006950 <SCSI_CheckAddressRange>
 800654c:	4603      	mov	r3, r0
 800654e:	2b00      	cmp	r3, #0
 8006550:	da02      	bge.n	8006558 <SCSI_Read12+0x104>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8006552:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006556:	e024      	b.n	80065a2 <SCSI_Read12+0x14e>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006564:	6979      	ldr	r1, [r7, #20]
 8006566:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800656a:	fb01 f303 	mul.w	r3, r1, r3
 800656e:	429a      	cmp	r2, r3
 8006570:	d00a      	beq.n	8006588 <SCSI_Read12+0x134>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006578:	2320      	movs	r3, #32
 800657a:	2205      	movs	r2, #5
 800657c:	68f8      	ldr	r0, [r7, #12]
 800657e:	f7ff fe08 	bl	8006192 <SCSI_SenseCode>
      return -1;
 8006582:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006586:	e00c      	b.n	80065a2 <SCSI_Read12+0x14e>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	2202      	movs	r2, #2
 800658c:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006594:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8006596:	7afb      	ldrb	r3, [r7, #11]
 8006598:	4619      	mov	r1, r3
 800659a:	68f8      	ldr	r0, [r7, #12]
 800659c:	f000 fa00 	bl	80069a0 <SCSI_ProcessRead>
 80065a0:	4603      	mov	r3, r0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3718      	adds	r7, #24
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}

080065aa <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80065aa:	b580      	push	{r7, lr}
 80065ac:	b086      	sub	sp, #24
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	60f8      	str	r0, [r7, #12]
 80065b2:	460b      	mov	r3, r1
 80065b4:	607a      	str	r2, [r7, #4]
 80065b6:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065be:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d102      	bne.n	80065cc <SCSI_Write10+0x22>
  {
    return -1;
 80065c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80065ca:	e0af      	b.n	800672c <SCSI_Write10+0x182>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	7a1b      	ldrb	r3, [r3, #8]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	f040 80a5 	bne.w	8006720 <SCSI_Write10+0x176>
  {
    if (hmsc->cbw.dDataLength == 0U)
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d10a      	bne.n	80065f6 <SCSI_Write10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80065e6:	2320      	movs	r3, #32
 80065e8:	2205      	movs	r2, #5
 80065ea:	68f8      	ldr	r0, [r7, #12]
 80065ec:	f7ff fdd1 	bl	8006192 <SCSI_SenseCode>
      return -1;
 80065f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80065f4:	e09a      	b.n	800672c <SCSI_Write10+0x182>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80065fc:	b25b      	sxtb	r3, r3
 80065fe:	2b00      	cmp	r3, #0
 8006600:	da0a      	bge.n	8006618 <SCSI_Write10+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006608:	2320      	movs	r3, #32
 800660a:	2205      	movs	r2, #5
 800660c:	68f8      	ldr	r0, [r7, #12]
 800660e:	f7ff fdc0 	bl	8006192 <SCSI_SenseCode>
      return -1;
 8006612:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006616:	e089      	b.n	800672c <SCSI_Write10+0x182>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	7afa      	ldrb	r2, [r7, #11]
 8006622:	4610      	mov	r0, r2
 8006624:	4798      	blx	r3
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d008      	beq.n	800663e <SCSI_Write10+0x94>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800662c:	7af9      	ldrb	r1, [r7, #11]
 800662e:	233a      	movs	r3, #58	; 0x3a
 8006630:	2202      	movs	r2, #2
 8006632:	68f8      	ldr	r0, [r7, #12]
 8006634:	f7ff fdad 	bl	8006192 <SCSI_SenseCode>
      return -1;
 8006638:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800663c:	e076      	b.n	800672c <SCSI_Write10+0x182>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006644:	68db      	ldr	r3, [r3, #12]
 8006646:	7afa      	ldrb	r2, [r7, #11]
 8006648:	4610      	mov	r0, r2
 800664a:	4798      	blx	r3
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d008      	beq.n	8006664 <SCSI_Write10+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8006652:	7af9      	ldrb	r1, [r7, #11]
 8006654:	2327      	movs	r3, #39	; 0x27
 8006656:	2202      	movs	r2, #2
 8006658:	68f8      	ldr	r0, [r7, #12]
 800665a:	f7ff fd9a 	bl	8006192 <SCSI_SenseCode>
      return -1;
 800665e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006662:	e063      	b.n	800672c <SCSI_Write10+0x182>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	3302      	adds	r3, #2
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	3303      	adds	r3, #3
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006674:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	3304      	adds	r3, #4
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800667e:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	3205      	adds	r2, #5
 8006684:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8006686:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	3307      	adds	r3, #7
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	3208      	adds	r2, #8
 800669a:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800669c:	431a      	orrs	r2, r3
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80066b0:	7af9      	ldrb	r1, [r7, #11]
 80066b2:	68f8      	ldr	r0, [r7, #12]
 80066b4:	f000 f94c 	bl	8006950 <SCSI_CheckAddressRange>
 80066b8:	4603      	mov	r3, r0
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	da02      	bge.n	80066c4 <SCSI_Write10+0x11a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80066be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80066c2:	e033      	b.n	800672c <SCSI_Write10+0x182>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80066ca:	697a      	ldr	r2, [r7, #20]
 80066cc:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80066d0:	fb02 f303 	mul.w	r3, r2, r3
 80066d4:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80066dc:	693a      	ldr	r2, [r7, #16]
 80066de:	429a      	cmp	r2, r3
 80066e0:	d00a      	beq.n	80066f8 <SCSI_Write10+0x14e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80066e8:	2320      	movs	r3, #32
 80066ea:	2205      	movs	r2, #5
 80066ec:	68f8      	ldr	r0, [r7, #12]
 80066ee:	f7ff fd50 	bl	8006192 <SCSI_SenseCode>
      return -1;
 80066f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80066f6:	e019      	b.n	800672c <SCSI_Write10+0x182>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066fe:	bf28      	it	cs
 8006700:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8006704:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	2201      	movs	r2, #1
 800670a:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	f103 0210 	add.w	r2, r3, #16
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	2101      	movs	r1, #1
 8006716:	68f8      	ldr	r0, [r7, #12]
 8006718:	f002 fa56 	bl	8008bc8 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800671c:	2300      	movs	r3, #0
 800671e:	e005      	b.n	800672c <SCSI_Write10+0x182>
    return SCSI_ProcessWrite(pdev, lun);
 8006720:	7afb      	ldrb	r3, [r7, #11]
 8006722:	4619      	mov	r1, r3
 8006724:	68f8      	ldr	r0, [r7, #12]
 8006726:	f000 f9b4 	bl	8006a92 <SCSI_ProcessWrite>
 800672a:	4603      	mov	r3, r0
}
 800672c:	4618      	mov	r0, r3
 800672e:	3718      	adds	r7, #24
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}

08006734 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b086      	sub	sp, #24
 8006738:	af00      	add	r7, sp, #0
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	460b      	mov	r3, r1
 800673e:	607a      	str	r2, [r7, #4]
 8006740:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006748:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d102      	bne.n	8006756 <SCSI_Write12+0x22>
  {
    return -1;
 8006750:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006754:	e0bf      	b.n	80068d6 <SCSI_Write12+0x1a2>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	7a1b      	ldrb	r3, [r3, #8]
 800675a:	2b00      	cmp	r3, #0
 800675c:	f040 80b5 	bne.w	80068ca <SCSI_Write12+0x196>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006766:	2b00      	cmp	r3, #0
 8006768:	d10a      	bne.n	8006780 <SCSI_Write12+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006770:	2320      	movs	r3, #32
 8006772:	2205      	movs	r2, #5
 8006774:	68f8      	ldr	r0, [r7, #12]
 8006776:	f7ff fd0c 	bl	8006192 <SCSI_SenseCode>
      return -1;
 800677a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800677e:	e0aa      	b.n	80068d6 <SCSI_Write12+0x1a2>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8006786:	b25b      	sxtb	r3, r3
 8006788:	2b00      	cmp	r3, #0
 800678a:	da0a      	bge.n	80067a2 <SCSI_Write12+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006792:	2320      	movs	r3, #32
 8006794:	2205      	movs	r2, #5
 8006796:	68f8      	ldr	r0, [r7, #12]
 8006798:	f7ff fcfb 	bl	8006192 <SCSI_SenseCode>
      return -1;
 800679c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80067a0:	e099      	b.n	80068d6 <SCSI_Write12+0x1a2>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	7afa      	ldrb	r2, [r7, #11]
 80067ac:	4610      	mov	r0, r2
 80067ae:	4798      	blx	r3
 80067b0:	4603      	mov	r3, r0
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d00b      	beq.n	80067ce <SCSI_Write12+0x9a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80067b6:	7af9      	ldrb	r1, [r7, #11]
 80067b8:	233a      	movs	r3, #58	; 0x3a
 80067ba:	2202      	movs	r2, #2
 80067bc:	68f8      	ldr	r0, [r7, #12]
 80067be:	f7ff fce8 	bl	8006192 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	2205      	movs	r2, #5
 80067c6:	721a      	strb	r2, [r3, #8]
      return -1;
 80067c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80067cc:	e083      	b.n	80068d6 <SCSI_Write12+0x1a2>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80067d4:	68db      	ldr	r3, [r3, #12]
 80067d6:	7afa      	ldrb	r2, [r7, #11]
 80067d8:	4610      	mov	r0, r2
 80067da:	4798      	blx	r3
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d00b      	beq.n	80067fa <SCSI_Write12+0xc6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80067e2:	7af9      	ldrb	r1, [r7, #11]
 80067e4:	2327      	movs	r3, #39	; 0x27
 80067e6:	2202      	movs	r2, #2
 80067e8:	68f8      	ldr	r0, [r7, #12]
 80067ea:	f7ff fcd2 	bl	8006192 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	2205      	movs	r2, #5
 80067f2:	721a      	strb	r2, [r3, #8]
      return -1;
 80067f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80067f8:	e06d      	b.n	80068d6 <SCSI_Write12+0x1a2>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	3302      	adds	r3, #2
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	3303      	adds	r3, #3
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800680a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	3304      	adds	r3, #4
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8006814:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	3205      	adds	r2, #5
 800681a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800681c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	3306      	adds	r3, #6
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	3307      	adds	r3, #7
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8006834:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	3308      	adds	r3, #8
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800683e:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	3209      	adds	r2, #9
 8006844:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8006846:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800685a:	7af9      	ldrb	r1, [r7, #11]
 800685c:	68f8      	ldr	r0, [r7, #12]
 800685e:	f000 f877 	bl	8006950 <SCSI_CheckAddressRange>
 8006862:	4603      	mov	r3, r0
 8006864:	2b00      	cmp	r3, #0
 8006866:	da02      	bge.n	800686e <SCSI_Write12+0x13a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8006868:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800686c:	e033      	b.n	80068d6 <SCSI_Write12+0x1a2>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006874:	697a      	ldr	r2, [r7, #20]
 8006876:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800687a:	fb02 f303 	mul.w	r3, r2, r3
 800687e:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006886:	693a      	ldr	r2, [r7, #16]
 8006888:	429a      	cmp	r2, r3
 800688a:	d00a      	beq.n	80068a2 <SCSI_Write12+0x16e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006892:	2320      	movs	r3, #32
 8006894:	2205      	movs	r2, #5
 8006896:	68f8      	ldr	r0, [r7, #12]
 8006898:	f7ff fc7b 	bl	8006192 <SCSI_SenseCode>
      return -1;
 800689c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068a0:	e019      	b.n	80068d6 <SCSI_Write12+0x1a2>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068a8:	bf28      	it	cs
 80068aa:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80068ae:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	2201      	movs	r2, #1
 80068b4:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	f103 0210 	add.w	r2, r3, #16
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	2101      	movs	r1, #1
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	f002 f981 	bl	8008bc8 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 80068c6:	2300      	movs	r3, #0
 80068c8:	e005      	b.n	80068d6 <SCSI_Write12+0x1a2>
    return SCSI_ProcessWrite(pdev, lun);
 80068ca:	7afb      	ldrb	r3, [r7, #11]
 80068cc:	4619      	mov	r1, r3
 80068ce:	68f8      	ldr	r0, [r7, #12]
 80068d0:	f000 f8df 	bl	8006a92 <SCSI_ProcessWrite>
 80068d4:	4603      	mov	r3, r0
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3718      	adds	r7, #24
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}

080068de <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80068de:	b580      	push	{r7, lr}
 80068e0:	b086      	sub	sp, #24
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	60f8      	str	r0, [r7, #12]
 80068e6:	460b      	mov	r3, r1
 80068e8:	607a      	str	r2, [r7, #4]
 80068ea:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068f2:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d102      	bne.n	8006900 <SCSI_Verify10+0x22>
  {
    return -1;
 80068fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068fe:	e023      	b.n	8006948 <SCSI_Verify10+0x6a>
  }

  if ((params[1] & 0x02U) == 0x02U)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	3301      	adds	r3, #1
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	f003 0302 	and.w	r3, r3, #2
 800690a:	2b00      	cmp	r3, #0
 800690c:	d008      	beq.n	8006920 <SCSI_Verify10+0x42>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800690e:	7af9      	ldrb	r1, [r7, #11]
 8006910:	2324      	movs	r3, #36	; 0x24
 8006912:	2205      	movs	r2, #5
 8006914:	68f8      	ldr	r0, [r7, #12]
 8006916:	f7ff fc3c 	bl	8006192 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800691a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800691e:	e013      	b.n	8006948 <SCSI_Verify10+0x6a>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800692c:	7af9      	ldrb	r1, [r7, #11]
 800692e:	68f8      	ldr	r0, [r7, #12]
 8006930:	f000 f80e 	bl	8006950 <SCSI_CheckAddressRange>
 8006934:	4603      	mov	r3, r0
 8006936:	2b00      	cmp	r3, #0
 8006938:	da02      	bge.n	8006940 <SCSI_Verify10+0x62>
  {
    return -1; /* error */
 800693a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800693e:	e003      	b.n	8006948 <SCSI_Verify10+0x6a>
  }

  hmsc->bot_data_length = 0U;
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	2200      	movs	r2, #0
 8006944:	60da      	str	r2, [r3, #12]

  return 0;
 8006946:	2300      	movs	r3, #0
}
 8006948:	4618      	mov	r0, r3
 800694a:	3718      	adds	r7, #24
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b086      	sub	sp, #24
 8006954:	af00      	add	r7, sp, #0
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	607a      	str	r2, [r7, #4]
 800695a:	603b      	str	r3, [r7, #0]
 800695c:	460b      	mov	r3, r1
 800695e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006966:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d102      	bne.n	8006974 <SCSI_CheckAddressRange+0x24>
  {
    return -1;
 800696e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006972:	e011      	b.n	8006998 <SCSI_CheckAddressRange+0x48>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	441a      	add	r2, r3
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006980:	429a      	cmp	r2, r3
 8006982:	d908      	bls.n	8006996 <SCSI_CheckAddressRange+0x46>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8006984:	7af9      	ldrb	r1, [r7, #11]
 8006986:	2321      	movs	r3, #33	; 0x21
 8006988:	2205      	movs	r2, #5
 800698a:	68f8      	ldr	r0, [r7, #12]
 800698c:	f7ff fc01 	bl	8006192 <SCSI_SenseCode>
    return -1;
 8006990:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006994:	e000      	b.n	8006998 <SCSI_CheckAddressRange+0x48>
  }

  return 0;
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	3718      	adds	r7, #24
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 80069a0:	b590      	push	{r4, r7, lr}
 80069a2:	b085      	sub	sp, #20
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	460b      	mov	r3, r1
 80069aa:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069b2:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80069c0:	fb02 f303 	mul.w	r3, r2, r3
 80069c4:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d102      	bne.n	80069d2 <SCSI_ProcessRead+0x32>
  {
    return -1;
 80069cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069d0:	e05b      	b.n	8006a8a <SCSI_ProcessRead+0xea>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069d8:	bf28      	it	cs
 80069da:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80069de:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80069e6:	691c      	ldr	r4, [r3, #16]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f103 0110 	add.w	r1, r3, #16
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80069fa:	4618      	mov	r0, r3
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	78f8      	ldrb	r0, [r7, #3]
 8006a06:	47a0      	blx	r4
 8006a08:	4603      	mov	r3, r0
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	da08      	bge.n	8006a20 <SCSI_ProcessRead+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8006a0e:	78f9      	ldrb	r1, [r7, #3]
 8006a10:	2311      	movs	r3, #17
 8006a12:	2204      	movs	r2, #4
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f7ff fbbc 	bl	8006192 <SCSI_SenseCode>
    return -1;
 8006a1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a1e:	e034      	b.n	8006a8a <SCSI_ProcessRead+0xea>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f103 0210 	add.w	r2, r3, #16
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	2181      	movs	r1, #129	; 0x81
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f002 f894 	bl	8008b58 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	fbb3 f3f1 	udiv	r3, r3, r1
 8006a44:	441a      	add	r2, r3
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006a58:	4619      	mov	r1, r3
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006a60:	1ad2      	subs	r2, r2, r3
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	1ad2      	subs	r2, r2, r3
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d102      	bne.n	8006a88 <SCSI_ProcessRead+0xe8>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2203      	movs	r2, #3
 8006a86:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8006a88:	2300      	movs	r3, #0
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3714      	adds	r7, #20
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd90      	pop	{r4, r7, pc}

08006a92 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8006a92:	b590      	push	{r4, r7, lr}
 8006a94:	b085      	sub	sp, #20
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
 8006a9a:	460b      	mov	r3, r1
 8006a9c:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006aa4:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006aac:	68fa      	ldr	r2, [r7, #12]
 8006aae:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8006ab2:	fb02 f303 	mul.w	r3, r2, r3
 8006ab6:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d102      	bne.n	8006ac4 <SCSI_ProcessWrite+0x32>
  {
    return -1;
 8006abe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ac2:	e06b      	b.n	8006b9c <SCSI_ProcessWrite+0x10a>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006aca:	bf28      	it	cs
 8006acc:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8006ad0:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ad8:	695c      	ldr	r4, [r3, #20]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f103 0110 	add.w	r1, r3, #16
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006aec:	4618      	mov	r0, r3
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	78f8      	ldrb	r0, [r7, #3]
 8006af8:	47a0      	blx	r4
 8006afa:	4603      	mov	r3, r0
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	da08      	bge.n	8006b12 <SCSI_ProcessWrite+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8006b00:	78f9      	ldrb	r1, [r7, #3]
 8006b02:	2303      	movs	r3, #3
 8006b04:	2204      	movs	r2, #4
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f7ff fb43 	bl	8006192 <SCSI_SenseCode>
    return -1;
 8006b0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b10:	e044      	b.n	8006b9c <SCSI_ProcessWrite+0x10a>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006b1e:	4619      	mov	r1, r3
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b26:	441a      	add	r2, r3
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b42:	1ad2      	subs	r2, r2, r3
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	1ad2      	subs	r2, r2, r3
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d104      	bne.n	8006b6e <SCSI_ProcessWrite+0xdc>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8006b64:	2100      	movs	r1, #0
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f7fe fdd8 	bl	800571c <MSC_BOT_SendCSW>
 8006b6c:	e015      	b.n	8006b9a <SCSI_ProcessWrite+0x108>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006b74:	68fa      	ldr	r2, [r7, #12]
 8006b76:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8006b7a:	fb02 f303 	mul.w	r3, r2, r3
 8006b7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b82:	bf28      	it	cs
 8006b84:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8006b88:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f103 0210 	add.w	r2, r3, #16
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	2101      	movs	r1, #1
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f002 f817 	bl	8008bc8 <USBD_LL_PrepareReceive>
  }

  return 0;
 8006b9a:	2300      	movs	r3, #0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3714      	adds	r7, #20
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd90      	pop	{r4, r7, pc}

08006ba4 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b087      	sub	sp, #28
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	60b9      	str	r1, [r7, #8]
 8006bae:	4613      	mov	r3, r2
 8006bb0:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8006bb2:	88fb      	ldrh	r3, [r7, #6]
 8006bb4:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d102      	bne.n	8006bc2 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8006bbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006bc0:	e013      	b.n	8006bea <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 8006bc2:	8afa      	ldrh	r2, [r7, #22]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8006bc8:	e00b      	b.n	8006be2 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8006bca:	8afb      	ldrh	r3, [r7, #22]
 8006bcc:	3b01      	subs	r3, #1
 8006bce:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8006bd0:	8afb      	ldrh	r3, [r7, #22]
 8006bd2:	68ba      	ldr	r2, [r7, #8]
 8006bd4:	441a      	add	r2, r3
 8006bd6:	8afb      	ldrh	r3, [r7, #22]
 8006bd8:	7811      	ldrb	r1, [r2, #0]
 8006bda:	68fa      	ldr	r2, [r7, #12]
 8006bdc:	4413      	add	r3, r2
 8006bde:	460a      	mov	r2, r1
 8006be0:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8006be2:	8afb      	ldrh	r3, [r7, #22]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d1f0      	bne.n	8006bca <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8006be8:	2300      	movs	r3, #0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	371c      	adds	r7, #28
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr

08006bf6 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006bf6:	b580      	push	{r7, lr}
 8006bf8:	b086      	sub	sp, #24
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	60f8      	str	r0, [r7, #12]
 8006bfe:	60b9      	str	r1, [r7, #8]
 8006c00:	4613      	mov	r3, r2
 8006c02:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d101      	bne.n	8006c0e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006c0a:	2303      	movs	r3, #3
 8006c0c:	e01f      	b.n	8006c4e <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2200      	movs	r2, #0
 8006c22:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d003      	beq.n	8006c34 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	68ba      	ldr	r2, [r7, #8]
 8006c30:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	79fa      	ldrb	r2, [r7, #7]
 8006c40:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006c42:	68f8      	ldr	r0, [r7, #12]
 8006c44:	f001 fd92 	bl	800876c <USBD_LL_Init>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006c4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3718      	adds	r7, #24
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}

08006c56 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006c56:	b580      	push	{r7, lr}
 8006c58:	b084      	sub	sp, #16
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
 8006c5e:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006c60:	2300      	movs	r3, #0
 8006c62:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d101      	bne.n	8006c6e <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	e016      	b.n	8006c9c <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	683a      	ldr	r2, [r7, #0]
 8006c72:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d00b      	beq.n	8006c9a <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c8a:	f107 020e 	add.w	r2, r7, #14
 8006c8e:	4610      	mov	r0, r2
 8006c90:	4798      	blx	r3
 8006c92:	4602      	mov	r2, r0
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006c9a:	2300      	movs	r3, #0
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3710      	adds	r7, #16
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b082      	sub	sp, #8
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f001 fda9 	bl	8008804 <USBD_LL_Start>
 8006cb2:	4603      	mov	r3, r0
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3708      	adds	r7, #8
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}

08006cbc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b083      	sub	sp, #12
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	370c      	adds	r7, #12
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr

08006cd2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006cd2:	b580      	push	{r7, lr}
 8006cd4:	b084      	sub	sp, #16
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
 8006cda:	460b      	mov	r3, r1
 8006cdc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006cde:	2303      	movs	r3, #3
 8006ce0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d009      	beq.n	8006d00 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	78fa      	ldrb	r2, [r7, #3]
 8006cf6:	4611      	mov	r1, r2
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	4798      	blx	r3
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3710      	adds	r7, #16
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}

08006d0a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d0a:	b580      	push	{r7, lr}
 8006d0c:	b082      	sub	sp, #8
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6078      	str	r0, [r7, #4]
 8006d12:	460b      	mov	r3, r1
 8006d14:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d007      	beq.n	8006d30 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	78fa      	ldrb	r2, [r7, #3]
 8006d2a:	4611      	mov	r1, r2
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	4798      	blx	r3
  }

  return USBD_OK;
 8006d30:	2300      	movs	r3, #0
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3708      	adds	r7, #8
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}

08006d3a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006d3a:	b580      	push	{r7, lr}
 8006d3c:	b084      	sub	sp, #16
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
 8006d42:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d4a:	6839      	ldr	r1, [r7, #0]
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f000 ffb9 	bl	8007cc4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2201      	movs	r2, #1
 8006d56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006d60:	461a      	mov	r2, r3
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006d6e:	f003 031f 	and.w	r3, r3, #31
 8006d72:	2b02      	cmp	r3, #2
 8006d74:	d01a      	beq.n	8006dac <USBD_LL_SetupStage+0x72>
 8006d76:	2b02      	cmp	r3, #2
 8006d78:	d822      	bhi.n	8006dc0 <USBD_LL_SetupStage+0x86>
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d002      	beq.n	8006d84 <USBD_LL_SetupStage+0x4a>
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d00a      	beq.n	8006d98 <USBD_LL_SetupStage+0x5e>
 8006d82:	e01d      	b.n	8006dc0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 fa61 	bl	8007254 <USBD_StdDevReq>
 8006d92:	4603      	mov	r3, r0
 8006d94:	73fb      	strb	r3, [r7, #15]
      break;
 8006d96:	e020      	b.n	8006dda <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d9e:	4619      	mov	r1, r3
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 fac5 	bl	8007330 <USBD_StdItfReq>
 8006da6:	4603      	mov	r3, r0
 8006da8:	73fb      	strb	r3, [r7, #15]
      break;
 8006daa:	e016      	b.n	8006dda <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006db2:	4619      	mov	r1, r3
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 fb04 	bl	80073c2 <USBD_StdEPReq>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	73fb      	strb	r3, [r7, #15]
      break;
 8006dbe:	e00c      	b.n	8006dda <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006dc6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006dca:	b2db      	uxtb	r3, r3
 8006dcc:	4619      	mov	r1, r3
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f001 fdf4 	bl	80089bc <USBD_LL_StallEP>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	73fb      	strb	r3, [r7, #15]
      break;
 8006dd8:	bf00      	nop
  }

  return ret;
 8006dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3710      	adds	r7, #16
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b086      	sub	sp, #24
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	460b      	mov	r3, r1
 8006dee:	607a      	str	r2, [r7, #4]
 8006df0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006df2:	7afb      	ldrb	r3, [r7, #11]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d138      	bne.n	8006e6a <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006dfe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e06:	2b03      	cmp	r3, #3
 8006e08:	d14a      	bne.n	8006ea0 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	689a      	ldr	r2, [r3, #8]
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d913      	bls.n	8006e3e <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	689a      	ldr	r2, [r3, #8]
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	68db      	ldr	r3, [r3, #12]
 8006e1e:	1ad2      	subs	r2, r2, r3
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	68da      	ldr	r2, [r3, #12]
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	bf28      	it	cs
 8006e30:	4613      	movcs	r3, r2
 8006e32:	461a      	mov	r2, r3
 8006e34:	6879      	ldr	r1, [r7, #4]
 8006e36:	68f8      	ldr	r0, [r7, #12]
 8006e38:	f001 f81b 	bl	8007e72 <USBD_CtlContinueRx>
 8006e3c:	e030      	b.n	8006ea0 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	2b03      	cmp	r3, #3
 8006e48:	d10b      	bne.n	8006e62 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e50:	691b      	ldr	r3, [r3, #16]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d005      	beq.n	8006e62 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	68f8      	ldr	r0, [r7, #12]
 8006e60:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006e62:	68f8      	ldr	r0, [r7, #12]
 8006e64:	f001 f816 	bl	8007e94 <USBD_CtlSendStatus>
 8006e68:	e01a      	b.n	8006ea0 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	2b03      	cmp	r3, #3
 8006e74:	d114      	bne.n	8006ea0 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e7c:	699b      	ldr	r3, [r3, #24]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d00e      	beq.n	8006ea0 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e88:	699b      	ldr	r3, [r3, #24]
 8006e8a:	7afa      	ldrb	r2, [r7, #11]
 8006e8c:	4611      	mov	r1, r2
 8006e8e:	68f8      	ldr	r0, [r7, #12]
 8006e90:	4798      	blx	r3
 8006e92:	4603      	mov	r3, r0
 8006e94:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006e96:	7dfb      	ldrb	r3, [r7, #23]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d001      	beq.n	8006ea0 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006e9c:	7dfb      	ldrb	r3, [r7, #23]
 8006e9e:	e000      	b.n	8006ea2 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3718      	adds	r7, #24
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}

08006eaa <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006eaa:	b580      	push	{r7, lr}
 8006eac:	b086      	sub	sp, #24
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	60f8      	str	r0, [r7, #12]
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	607a      	str	r2, [r7, #4]
 8006eb6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006eb8:	7afb      	ldrb	r3, [r7, #11]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d16b      	bne.n	8006f96 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	3314      	adds	r3, #20
 8006ec2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006eca:	2b02      	cmp	r3, #2
 8006ecc:	d156      	bne.n	8006f7c <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	689a      	ldr	r2, [r3, #8]
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	68db      	ldr	r3, [r3, #12]
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d914      	bls.n	8006f04 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	689a      	ldr	r2, [r3, #8]
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	1ad2      	subs	r2, r2, r3
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	461a      	mov	r2, r3
 8006eee:	6879      	ldr	r1, [r7, #4]
 8006ef0:	68f8      	ldr	r0, [r7, #12]
 8006ef2:	f000 ffad 	bl	8007e50 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	2200      	movs	r2, #0
 8006efa:	2100      	movs	r1, #0
 8006efc:	68f8      	ldr	r0, [r7, #12]
 8006efe:	f001 fe63 	bl	8008bc8 <USBD_LL_PrepareReceive>
 8006f02:	e03b      	b.n	8006f7c <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	68da      	ldr	r2, [r3, #12]
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d11c      	bne.n	8006f4a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	685a      	ldr	r2, [r3, #4]
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d316      	bcc.n	8006f4a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	685a      	ldr	r2, [r3, #4]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d20f      	bcs.n	8006f4a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	2100      	movs	r1, #0
 8006f2e:	68f8      	ldr	r0, [r7, #12]
 8006f30:	f000 ff8e 	bl	8007e50 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2200      	movs	r2, #0
 8006f38:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	2200      	movs	r2, #0
 8006f40:	2100      	movs	r1, #0
 8006f42:	68f8      	ldr	r0, [r7, #12]
 8006f44:	f001 fe40 	bl	8008bc8 <USBD_LL_PrepareReceive>
 8006f48:	e018      	b.n	8006f7c <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	2b03      	cmp	r3, #3
 8006f54:	d10b      	bne.n	8006f6e <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f5c:	68db      	ldr	r3, [r3, #12]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d005      	beq.n	8006f6e <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f68:	68db      	ldr	r3, [r3, #12]
 8006f6a:	68f8      	ldr	r0, [r7, #12]
 8006f6c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006f6e:	2180      	movs	r1, #128	; 0x80
 8006f70:	68f8      	ldr	r0, [r7, #12]
 8006f72:	f001 fd23 	bl	80089bc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006f76:	68f8      	ldr	r0, [r7, #12]
 8006f78:	f000 ff9f 	bl	8007eba <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d122      	bne.n	8006fcc <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006f86:	68f8      	ldr	r0, [r7, #12]
 8006f88:	f7ff fe98 	bl	8006cbc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006f94:	e01a      	b.n	8006fcc <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	2b03      	cmp	r3, #3
 8006fa0:	d114      	bne.n	8006fcc <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fa8:	695b      	ldr	r3, [r3, #20]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d00e      	beq.n	8006fcc <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fb4:	695b      	ldr	r3, [r3, #20]
 8006fb6:	7afa      	ldrb	r2, [r7, #11]
 8006fb8:	4611      	mov	r1, r2
 8006fba:	68f8      	ldr	r0, [r7, #12]
 8006fbc:	4798      	blx	r3
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006fc2:	7dfb      	ldrb	r3, [r7, #23]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d001      	beq.n	8006fcc <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006fc8:	7dfb      	ldrb	r3, [r7, #23]
 8006fca:	e000      	b.n	8006fce <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006fcc:	2300      	movs	r3, #0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3718      	adds	r7, #24
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006fd6:	b580      	push	{r7, lr}
 8006fd8:	b082      	sub	sp, #8
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007002:	2b00      	cmp	r3, #0
 8007004:	d101      	bne.n	800700a <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007006:	2303      	movs	r3, #3
 8007008:	e02f      	b.n	800706a <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007010:	2b00      	cmp	r3, #0
 8007012:	d00f      	beq.n	8007034 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d009      	beq.n	8007034 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	6852      	ldr	r2, [r2, #4]
 800702c:	b2d2      	uxtb	r2, r2
 800702e:	4611      	mov	r1, r2
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007034:	2340      	movs	r3, #64	; 0x40
 8007036:	2200      	movs	r2, #0
 8007038:	2100      	movs	r1, #0
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f001 fc14 	bl	8008868 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2201      	movs	r2, #1
 8007044:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2240      	movs	r2, #64	; 0x40
 800704c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007050:	2340      	movs	r3, #64	; 0x40
 8007052:	2200      	movs	r2, #0
 8007054:	2180      	movs	r1, #128	; 0x80
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f001 fc06 	bl	8008868 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2201      	movs	r2, #1
 8007060:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2240      	movs	r2, #64	; 0x40
 8007066:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	3708      	adds	r7, #8
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}

08007072 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007072:	b480      	push	{r7}
 8007074:	b083      	sub	sp, #12
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
 800707a:	460b      	mov	r3, r1
 800707c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	78fa      	ldrb	r2, [r7, #3]
 8007082:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007084:	2300      	movs	r3, #0
}
 8007086:	4618      	mov	r0, r3
 8007088:	370c      	adds	r7, #12
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr

08007092 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007092:	b480      	push	{r7}
 8007094:	b083      	sub	sp, #12
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070a0:	b2da      	uxtb	r2, r3
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2204      	movs	r2, #4
 80070ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	370c      	adds	r7, #12
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr

080070be <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80070be:	b480      	push	{r7}
 80070c0:	b083      	sub	sp, #12
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	2b04      	cmp	r3, #4
 80070d0:	d106      	bne.n	80070e0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80070d8:	b2da      	uxtb	r2, r3
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80070e0:	2300      	movs	r3, #0
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	370c      	adds	r7, #12
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr

080070ee <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b082      	sub	sp, #8
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d101      	bne.n	8007104 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007100:	2303      	movs	r3, #3
 8007102:	e012      	b.n	800712a <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800710a:	b2db      	uxtb	r3, r3
 800710c:	2b03      	cmp	r3, #3
 800710e:	d10b      	bne.n	8007128 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007116:	69db      	ldr	r3, [r3, #28]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d005      	beq.n	8007128 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007122:	69db      	ldr	r3, [r3, #28]
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007128:	2300      	movs	r3, #0
}
 800712a:	4618      	mov	r0, r3
 800712c:	3708      	adds	r7, #8
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}

08007132 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007132:	b580      	push	{r7, lr}
 8007134:	b082      	sub	sp, #8
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
 800713a:	460b      	mov	r3, r1
 800713c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007144:	2b00      	cmp	r3, #0
 8007146:	d101      	bne.n	800714c <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007148:	2303      	movs	r3, #3
 800714a:	e014      	b.n	8007176 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007152:	b2db      	uxtb	r3, r3
 8007154:	2b03      	cmp	r3, #3
 8007156:	d10d      	bne.n	8007174 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800715e:	6a1b      	ldr	r3, [r3, #32]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d007      	beq.n	8007174 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800716a:	6a1b      	ldr	r3, [r3, #32]
 800716c:	78fa      	ldrb	r2, [r7, #3]
 800716e:	4611      	mov	r1, r2
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	3708      	adds	r7, #8
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}

0800717e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800717e:	b580      	push	{r7, lr}
 8007180:	b082      	sub	sp, #8
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
 8007186:	460b      	mov	r3, r1
 8007188:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007190:	2b00      	cmp	r3, #0
 8007192:	d101      	bne.n	8007198 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007194:	2303      	movs	r3, #3
 8007196:	e014      	b.n	80071c2 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	2b03      	cmp	r3, #3
 80071a2:	d10d      	bne.n	80071c0 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d007      	beq.n	80071c0 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b8:	78fa      	ldrb	r2, [r7, #3]
 80071ba:	4611      	mov	r1, r2
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80071c0:	2300      	movs	r3, #0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3708      	adds	r7, #8
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}

080071ca <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80071ca:	b480      	push	{r7}
 80071cc:	b083      	sub	sp, #12
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80071d2:	2300      	movs	r3, #0
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	370c      	adds	r7, #12
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr

080071e0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b082      	sub	sp, #8
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2201      	movs	r2, #1
 80071ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d009      	beq.n	800720e <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	6852      	ldr	r2, [r2, #4]
 8007206:	b2d2      	uxtb	r2, r2
 8007208:	4611      	mov	r1, r2
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	4798      	blx	r3
  }

  return USBD_OK;
 800720e:	2300      	movs	r3, #0
}
 8007210:	4618      	mov	r0, r3
 8007212:	3708      	adds	r7, #8
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007218:	b480      	push	{r7}
 800721a:	b087      	sub	sp, #28
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	3301      	adds	r3, #1
 800722e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007236:	8a3b      	ldrh	r3, [r7, #16]
 8007238:	021b      	lsls	r3, r3, #8
 800723a:	b21a      	sxth	r2, r3
 800723c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007240:	4313      	orrs	r3, r2
 8007242:	b21b      	sxth	r3, r3
 8007244:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007246:	89fb      	ldrh	r3, [r7, #14]
}
 8007248:	4618      	mov	r0, r3
 800724a:	371c      	adds	r7, #28
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr

08007254 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b084      	sub	sp, #16
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800725e:	2300      	movs	r3, #0
 8007260:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800726a:	2b40      	cmp	r3, #64	; 0x40
 800726c:	d005      	beq.n	800727a <USBD_StdDevReq+0x26>
 800726e:	2b40      	cmp	r3, #64	; 0x40
 8007270:	d853      	bhi.n	800731a <USBD_StdDevReq+0xc6>
 8007272:	2b00      	cmp	r3, #0
 8007274:	d00b      	beq.n	800728e <USBD_StdDevReq+0x3a>
 8007276:	2b20      	cmp	r3, #32
 8007278:	d14f      	bne.n	800731a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	6839      	ldr	r1, [r7, #0]
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	4798      	blx	r3
 8007288:	4603      	mov	r3, r0
 800728a:	73fb      	strb	r3, [r7, #15]
      break;
 800728c:	e04a      	b.n	8007324 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	785b      	ldrb	r3, [r3, #1]
 8007292:	2b09      	cmp	r3, #9
 8007294:	d83b      	bhi.n	800730e <USBD_StdDevReq+0xba>
 8007296:	a201      	add	r2, pc, #4	; (adr r2, 800729c <USBD_StdDevReq+0x48>)
 8007298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800729c:	080072f1 	.word	0x080072f1
 80072a0:	08007305 	.word	0x08007305
 80072a4:	0800730f 	.word	0x0800730f
 80072a8:	080072fb 	.word	0x080072fb
 80072ac:	0800730f 	.word	0x0800730f
 80072b0:	080072cf 	.word	0x080072cf
 80072b4:	080072c5 	.word	0x080072c5
 80072b8:	0800730f 	.word	0x0800730f
 80072bc:	080072e7 	.word	0x080072e7
 80072c0:	080072d9 	.word	0x080072d9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80072c4:	6839      	ldr	r1, [r7, #0]
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 f9de 	bl	8007688 <USBD_GetDescriptor>
          break;
 80072cc:	e024      	b.n	8007318 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80072ce:	6839      	ldr	r1, [r7, #0]
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 fb6d 	bl	80079b0 <USBD_SetAddress>
          break;
 80072d6:	e01f      	b.n	8007318 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80072d8:	6839      	ldr	r1, [r7, #0]
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 fbac 	bl	8007a38 <USBD_SetConfig>
 80072e0:	4603      	mov	r3, r0
 80072e2:	73fb      	strb	r3, [r7, #15]
          break;
 80072e4:	e018      	b.n	8007318 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80072e6:	6839      	ldr	r1, [r7, #0]
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 fc4b 	bl	8007b84 <USBD_GetConfig>
          break;
 80072ee:	e013      	b.n	8007318 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80072f0:	6839      	ldr	r1, [r7, #0]
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 fc7c 	bl	8007bf0 <USBD_GetStatus>
          break;
 80072f8:	e00e      	b.n	8007318 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80072fa:	6839      	ldr	r1, [r7, #0]
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f000 fcab 	bl	8007c58 <USBD_SetFeature>
          break;
 8007302:	e009      	b.n	8007318 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007304:	6839      	ldr	r1, [r7, #0]
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 fcba 	bl	8007c80 <USBD_ClrFeature>
          break;
 800730c:	e004      	b.n	8007318 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800730e:	6839      	ldr	r1, [r7, #0]
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 fd11 	bl	8007d38 <USBD_CtlError>
          break;
 8007316:	bf00      	nop
      }
      break;
 8007318:	e004      	b.n	8007324 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800731a:	6839      	ldr	r1, [r7, #0]
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f000 fd0b 	bl	8007d38 <USBD_CtlError>
      break;
 8007322:	bf00      	nop
  }

  return ret;
 8007324:	7bfb      	ldrb	r3, [r7, #15]
}
 8007326:	4618      	mov	r0, r3
 8007328:	3710      	adds	r7, #16
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
 800732e:	bf00      	nop

08007330 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800733a:	2300      	movs	r3, #0
 800733c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007346:	2b40      	cmp	r3, #64	; 0x40
 8007348:	d005      	beq.n	8007356 <USBD_StdItfReq+0x26>
 800734a:	2b40      	cmp	r3, #64	; 0x40
 800734c:	d82f      	bhi.n	80073ae <USBD_StdItfReq+0x7e>
 800734e:	2b00      	cmp	r3, #0
 8007350:	d001      	beq.n	8007356 <USBD_StdItfReq+0x26>
 8007352:	2b20      	cmp	r3, #32
 8007354:	d12b      	bne.n	80073ae <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800735c:	b2db      	uxtb	r3, r3
 800735e:	3b01      	subs	r3, #1
 8007360:	2b02      	cmp	r3, #2
 8007362:	d81d      	bhi.n	80073a0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	889b      	ldrh	r3, [r3, #4]
 8007368:	b2db      	uxtb	r3, r3
 800736a:	2b01      	cmp	r3, #1
 800736c:	d813      	bhi.n	8007396 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	6839      	ldr	r1, [r7, #0]
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	4798      	blx	r3
 800737c:	4603      	mov	r3, r0
 800737e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	88db      	ldrh	r3, [r3, #6]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d110      	bne.n	80073aa <USBD_StdItfReq+0x7a>
 8007388:	7bfb      	ldrb	r3, [r7, #15]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d10d      	bne.n	80073aa <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 fd80 	bl	8007e94 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007394:	e009      	b.n	80073aa <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007396:	6839      	ldr	r1, [r7, #0]
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 fccd 	bl	8007d38 <USBD_CtlError>
          break;
 800739e:	e004      	b.n	80073aa <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80073a0:	6839      	ldr	r1, [r7, #0]
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 fcc8 	bl	8007d38 <USBD_CtlError>
          break;
 80073a8:	e000      	b.n	80073ac <USBD_StdItfReq+0x7c>
          break;
 80073aa:	bf00      	nop
      }
      break;
 80073ac:	e004      	b.n	80073b8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80073ae:	6839      	ldr	r1, [r7, #0]
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f000 fcc1 	bl	8007d38 <USBD_CtlError>
      break;
 80073b6:	bf00      	nop
  }

  return ret;
 80073b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3710      	adds	r7, #16
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}

080073c2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073c2:	b580      	push	{r7, lr}
 80073c4:	b084      	sub	sp, #16
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	6078      	str	r0, [r7, #4]
 80073ca:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80073cc:	2300      	movs	r3, #0
 80073ce:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	889b      	ldrh	r3, [r3, #4]
 80073d4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80073de:	2b40      	cmp	r3, #64	; 0x40
 80073e0:	d007      	beq.n	80073f2 <USBD_StdEPReq+0x30>
 80073e2:	2b40      	cmp	r3, #64	; 0x40
 80073e4:	f200 8145 	bhi.w	8007672 <USBD_StdEPReq+0x2b0>
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d00c      	beq.n	8007406 <USBD_StdEPReq+0x44>
 80073ec:	2b20      	cmp	r3, #32
 80073ee:	f040 8140 	bne.w	8007672 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	6839      	ldr	r1, [r7, #0]
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	4798      	blx	r3
 8007400:	4603      	mov	r3, r0
 8007402:	73fb      	strb	r3, [r7, #15]
      break;
 8007404:	e13a      	b.n	800767c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	785b      	ldrb	r3, [r3, #1]
 800740a:	2b03      	cmp	r3, #3
 800740c:	d007      	beq.n	800741e <USBD_StdEPReq+0x5c>
 800740e:	2b03      	cmp	r3, #3
 8007410:	f300 8129 	bgt.w	8007666 <USBD_StdEPReq+0x2a4>
 8007414:	2b00      	cmp	r3, #0
 8007416:	d07f      	beq.n	8007518 <USBD_StdEPReq+0x156>
 8007418:	2b01      	cmp	r3, #1
 800741a:	d03c      	beq.n	8007496 <USBD_StdEPReq+0xd4>
 800741c:	e123      	b.n	8007666 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007424:	b2db      	uxtb	r3, r3
 8007426:	2b02      	cmp	r3, #2
 8007428:	d002      	beq.n	8007430 <USBD_StdEPReq+0x6e>
 800742a:	2b03      	cmp	r3, #3
 800742c:	d016      	beq.n	800745c <USBD_StdEPReq+0x9a>
 800742e:	e02c      	b.n	800748a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007430:	7bbb      	ldrb	r3, [r7, #14]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d00d      	beq.n	8007452 <USBD_StdEPReq+0x90>
 8007436:	7bbb      	ldrb	r3, [r7, #14]
 8007438:	2b80      	cmp	r3, #128	; 0x80
 800743a:	d00a      	beq.n	8007452 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800743c:	7bbb      	ldrb	r3, [r7, #14]
 800743e:	4619      	mov	r1, r3
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f001 fabb 	bl	80089bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007446:	2180      	movs	r1, #128	; 0x80
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f001 fab7 	bl	80089bc <USBD_LL_StallEP>
 800744e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007450:	e020      	b.n	8007494 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007452:	6839      	ldr	r1, [r7, #0]
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 fc6f 	bl	8007d38 <USBD_CtlError>
              break;
 800745a:	e01b      	b.n	8007494 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	885b      	ldrh	r3, [r3, #2]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d10e      	bne.n	8007482 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007464:	7bbb      	ldrb	r3, [r7, #14]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d00b      	beq.n	8007482 <USBD_StdEPReq+0xc0>
 800746a:	7bbb      	ldrb	r3, [r7, #14]
 800746c:	2b80      	cmp	r3, #128	; 0x80
 800746e:	d008      	beq.n	8007482 <USBD_StdEPReq+0xc0>
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	88db      	ldrh	r3, [r3, #6]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d104      	bne.n	8007482 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007478:	7bbb      	ldrb	r3, [r7, #14]
 800747a:	4619      	mov	r1, r3
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f001 fa9d 	bl	80089bc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 fd06 	bl	8007e94 <USBD_CtlSendStatus>

              break;
 8007488:	e004      	b.n	8007494 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800748a:	6839      	ldr	r1, [r7, #0]
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 fc53 	bl	8007d38 <USBD_CtlError>
              break;
 8007492:	bf00      	nop
          }
          break;
 8007494:	e0ec      	b.n	8007670 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800749c:	b2db      	uxtb	r3, r3
 800749e:	2b02      	cmp	r3, #2
 80074a0:	d002      	beq.n	80074a8 <USBD_StdEPReq+0xe6>
 80074a2:	2b03      	cmp	r3, #3
 80074a4:	d016      	beq.n	80074d4 <USBD_StdEPReq+0x112>
 80074a6:	e030      	b.n	800750a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80074a8:	7bbb      	ldrb	r3, [r7, #14]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d00d      	beq.n	80074ca <USBD_StdEPReq+0x108>
 80074ae:	7bbb      	ldrb	r3, [r7, #14]
 80074b0:	2b80      	cmp	r3, #128	; 0x80
 80074b2:	d00a      	beq.n	80074ca <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80074b4:	7bbb      	ldrb	r3, [r7, #14]
 80074b6:	4619      	mov	r1, r3
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f001 fa7f 	bl	80089bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80074be:	2180      	movs	r1, #128	; 0x80
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f001 fa7b 	bl	80089bc <USBD_LL_StallEP>
 80074c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80074c8:	e025      	b.n	8007516 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80074ca:	6839      	ldr	r1, [r7, #0]
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 fc33 	bl	8007d38 <USBD_CtlError>
              break;
 80074d2:	e020      	b.n	8007516 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	885b      	ldrh	r3, [r3, #2]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d11b      	bne.n	8007514 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80074dc:	7bbb      	ldrb	r3, [r7, #14]
 80074de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d004      	beq.n	80074f0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80074e6:	7bbb      	ldrb	r3, [r7, #14]
 80074e8:	4619      	mov	r1, r3
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f001 fa9c 	bl	8008a28 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 fccf 	bl	8007e94 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	6839      	ldr	r1, [r7, #0]
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	4798      	blx	r3
 8007504:	4603      	mov	r3, r0
 8007506:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007508:	e004      	b.n	8007514 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800750a:	6839      	ldr	r1, [r7, #0]
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 fc13 	bl	8007d38 <USBD_CtlError>
              break;
 8007512:	e000      	b.n	8007516 <USBD_StdEPReq+0x154>
              break;
 8007514:	bf00      	nop
          }
          break;
 8007516:	e0ab      	b.n	8007670 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800751e:	b2db      	uxtb	r3, r3
 8007520:	2b02      	cmp	r3, #2
 8007522:	d002      	beq.n	800752a <USBD_StdEPReq+0x168>
 8007524:	2b03      	cmp	r3, #3
 8007526:	d032      	beq.n	800758e <USBD_StdEPReq+0x1cc>
 8007528:	e097      	b.n	800765a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800752a:	7bbb      	ldrb	r3, [r7, #14]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d007      	beq.n	8007540 <USBD_StdEPReq+0x17e>
 8007530:	7bbb      	ldrb	r3, [r7, #14]
 8007532:	2b80      	cmp	r3, #128	; 0x80
 8007534:	d004      	beq.n	8007540 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8007536:	6839      	ldr	r1, [r7, #0]
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 fbfd 	bl	8007d38 <USBD_CtlError>
                break;
 800753e:	e091      	b.n	8007664 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007540:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007544:	2b00      	cmp	r3, #0
 8007546:	da0b      	bge.n	8007560 <USBD_StdEPReq+0x19e>
 8007548:	7bbb      	ldrb	r3, [r7, #14]
 800754a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800754e:	4613      	mov	r3, r2
 8007550:	009b      	lsls	r3, r3, #2
 8007552:	4413      	add	r3, r2
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	3310      	adds	r3, #16
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	4413      	add	r3, r2
 800755c:	3304      	adds	r3, #4
 800755e:	e00b      	b.n	8007578 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007560:	7bbb      	ldrb	r3, [r7, #14]
 8007562:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007566:	4613      	mov	r3, r2
 8007568:	009b      	lsls	r3, r3, #2
 800756a:	4413      	add	r3, r2
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007572:	687a      	ldr	r2, [r7, #4]
 8007574:	4413      	add	r3, r2
 8007576:	3304      	adds	r3, #4
 8007578:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	2200      	movs	r2, #0
 800757e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	2202      	movs	r2, #2
 8007584:	4619      	mov	r1, r3
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 fc47 	bl	8007e1a <USBD_CtlSendData>
              break;
 800758c:	e06a      	b.n	8007664 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800758e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007592:	2b00      	cmp	r3, #0
 8007594:	da11      	bge.n	80075ba <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007596:	7bbb      	ldrb	r3, [r7, #14]
 8007598:	f003 020f 	and.w	r2, r3, #15
 800759c:	6879      	ldr	r1, [r7, #4]
 800759e:	4613      	mov	r3, r2
 80075a0:	009b      	lsls	r3, r3, #2
 80075a2:	4413      	add	r3, r2
 80075a4:	009b      	lsls	r3, r3, #2
 80075a6:	440b      	add	r3, r1
 80075a8:	3324      	adds	r3, #36	; 0x24
 80075aa:	881b      	ldrh	r3, [r3, #0]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d117      	bne.n	80075e0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80075b0:	6839      	ldr	r1, [r7, #0]
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 fbc0 	bl	8007d38 <USBD_CtlError>
                  break;
 80075b8:	e054      	b.n	8007664 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80075ba:	7bbb      	ldrb	r3, [r7, #14]
 80075bc:	f003 020f 	and.w	r2, r3, #15
 80075c0:	6879      	ldr	r1, [r7, #4]
 80075c2:	4613      	mov	r3, r2
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	4413      	add	r3, r2
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	440b      	add	r3, r1
 80075cc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80075d0:	881b      	ldrh	r3, [r3, #0]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d104      	bne.n	80075e0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80075d6:	6839      	ldr	r1, [r7, #0]
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 fbad 	bl	8007d38 <USBD_CtlError>
                  break;
 80075de:	e041      	b.n	8007664 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	da0b      	bge.n	8007600 <USBD_StdEPReq+0x23e>
 80075e8:	7bbb      	ldrb	r3, [r7, #14]
 80075ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075ee:	4613      	mov	r3, r2
 80075f0:	009b      	lsls	r3, r3, #2
 80075f2:	4413      	add	r3, r2
 80075f4:	009b      	lsls	r3, r3, #2
 80075f6:	3310      	adds	r3, #16
 80075f8:	687a      	ldr	r2, [r7, #4]
 80075fa:	4413      	add	r3, r2
 80075fc:	3304      	adds	r3, #4
 80075fe:	e00b      	b.n	8007618 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007600:	7bbb      	ldrb	r3, [r7, #14]
 8007602:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007606:	4613      	mov	r3, r2
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	4413      	add	r3, r2
 800760c:	009b      	lsls	r3, r3, #2
 800760e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	4413      	add	r3, r2
 8007616:	3304      	adds	r3, #4
 8007618:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800761a:	7bbb      	ldrb	r3, [r7, #14]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d002      	beq.n	8007626 <USBD_StdEPReq+0x264>
 8007620:	7bbb      	ldrb	r3, [r7, #14]
 8007622:	2b80      	cmp	r3, #128	; 0x80
 8007624:	d103      	bne.n	800762e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	2200      	movs	r2, #0
 800762a:	601a      	str	r2, [r3, #0]
 800762c:	e00e      	b.n	800764c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800762e:	7bbb      	ldrb	r3, [r7, #14]
 8007630:	4619      	mov	r1, r3
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f001 fa2e 	bl	8008a94 <USBD_LL_IsStallEP>
 8007638:	4603      	mov	r3, r0
 800763a:	2b00      	cmp	r3, #0
 800763c:	d003      	beq.n	8007646 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	2201      	movs	r2, #1
 8007642:	601a      	str	r2, [r3, #0]
 8007644:	e002      	b.n	800764c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	2200      	movs	r2, #0
 800764a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	2202      	movs	r2, #2
 8007650:	4619      	mov	r1, r3
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 fbe1 	bl	8007e1a <USBD_CtlSendData>
              break;
 8007658:	e004      	b.n	8007664 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800765a:	6839      	ldr	r1, [r7, #0]
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f000 fb6b 	bl	8007d38 <USBD_CtlError>
              break;
 8007662:	bf00      	nop
          }
          break;
 8007664:	e004      	b.n	8007670 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8007666:	6839      	ldr	r1, [r7, #0]
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f000 fb65 	bl	8007d38 <USBD_CtlError>
          break;
 800766e:	bf00      	nop
      }
      break;
 8007670:	e004      	b.n	800767c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007672:	6839      	ldr	r1, [r7, #0]
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 fb5f 	bl	8007d38 <USBD_CtlError>
      break;
 800767a:	bf00      	nop
  }

  return ret;
 800767c:	7bfb      	ldrb	r3, [r7, #15]
}
 800767e:	4618      	mov	r0, r3
 8007680:	3710      	adds	r7, #16
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
	...

08007688 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b084      	sub	sp, #16
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007692:	2300      	movs	r3, #0
 8007694:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007696:	2300      	movs	r3, #0
 8007698:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800769a:	2300      	movs	r3, #0
 800769c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	885b      	ldrh	r3, [r3, #2]
 80076a2:	0a1b      	lsrs	r3, r3, #8
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	3b01      	subs	r3, #1
 80076a8:	2b0e      	cmp	r3, #14
 80076aa:	f200 8152 	bhi.w	8007952 <USBD_GetDescriptor+0x2ca>
 80076ae:	a201      	add	r2, pc, #4	; (adr r2, 80076b4 <USBD_GetDescriptor+0x2c>)
 80076b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b4:	08007725 	.word	0x08007725
 80076b8:	0800773d 	.word	0x0800773d
 80076bc:	0800777d 	.word	0x0800777d
 80076c0:	08007953 	.word	0x08007953
 80076c4:	08007953 	.word	0x08007953
 80076c8:	080078f3 	.word	0x080078f3
 80076cc:	0800791f 	.word	0x0800791f
 80076d0:	08007953 	.word	0x08007953
 80076d4:	08007953 	.word	0x08007953
 80076d8:	08007953 	.word	0x08007953
 80076dc:	08007953 	.word	0x08007953
 80076e0:	08007953 	.word	0x08007953
 80076e4:	08007953 	.word	0x08007953
 80076e8:	08007953 	.word	0x08007953
 80076ec:	080076f1 	.word	0x080076f1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076f6:	69db      	ldr	r3, [r3, #28]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d00b      	beq.n	8007714 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007702:	69db      	ldr	r3, [r3, #28]
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	7c12      	ldrb	r2, [r2, #16]
 8007708:	f107 0108 	add.w	r1, r7, #8
 800770c:	4610      	mov	r0, r2
 800770e:	4798      	blx	r3
 8007710:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007712:	e126      	b.n	8007962 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007714:	6839      	ldr	r1, [r7, #0]
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 fb0e 	bl	8007d38 <USBD_CtlError>
        err++;
 800771c:	7afb      	ldrb	r3, [r7, #11]
 800771e:	3301      	adds	r3, #1
 8007720:	72fb      	strb	r3, [r7, #11]
      break;
 8007722:	e11e      	b.n	8007962 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	687a      	ldr	r2, [r7, #4]
 800772e:	7c12      	ldrb	r2, [r2, #16]
 8007730:	f107 0108 	add.w	r1, r7, #8
 8007734:	4610      	mov	r0, r2
 8007736:	4798      	blx	r3
 8007738:	60f8      	str	r0, [r7, #12]
      break;
 800773a:	e112      	b.n	8007962 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	7c1b      	ldrb	r3, [r3, #16]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d10d      	bne.n	8007760 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800774a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800774c:	f107 0208 	add.w	r2, r7, #8
 8007750:	4610      	mov	r0, r2
 8007752:	4798      	blx	r3
 8007754:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	3301      	adds	r3, #1
 800775a:	2202      	movs	r2, #2
 800775c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800775e:	e100      	b.n	8007962 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007768:	f107 0208 	add.w	r2, r7, #8
 800776c:	4610      	mov	r0, r2
 800776e:	4798      	blx	r3
 8007770:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	3301      	adds	r3, #1
 8007776:	2202      	movs	r2, #2
 8007778:	701a      	strb	r2, [r3, #0]
      break;
 800777a:	e0f2      	b.n	8007962 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	885b      	ldrh	r3, [r3, #2]
 8007780:	b2db      	uxtb	r3, r3
 8007782:	2b05      	cmp	r3, #5
 8007784:	f200 80ac 	bhi.w	80078e0 <USBD_GetDescriptor+0x258>
 8007788:	a201      	add	r2, pc, #4	; (adr r2, 8007790 <USBD_GetDescriptor+0x108>)
 800778a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800778e:	bf00      	nop
 8007790:	080077a9 	.word	0x080077a9
 8007794:	080077dd 	.word	0x080077dd
 8007798:	08007811 	.word	0x08007811
 800779c:	08007845 	.word	0x08007845
 80077a0:	08007879 	.word	0x08007879
 80077a4:	080078ad 	.word	0x080078ad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d00b      	beq.n	80077cc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	7c12      	ldrb	r2, [r2, #16]
 80077c0:	f107 0108 	add.w	r1, r7, #8
 80077c4:	4610      	mov	r0, r2
 80077c6:	4798      	blx	r3
 80077c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077ca:	e091      	b.n	80078f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80077cc:	6839      	ldr	r1, [r7, #0]
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 fab2 	bl	8007d38 <USBD_CtlError>
            err++;
 80077d4:	7afb      	ldrb	r3, [r7, #11]
 80077d6:	3301      	adds	r3, #1
 80077d8:	72fb      	strb	r3, [r7, #11]
          break;
 80077da:	e089      	b.n	80078f0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d00b      	beq.n	8007800 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	7c12      	ldrb	r2, [r2, #16]
 80077f4:	f107 0108 	add.w	r1, r7, #8
 80077f8:	4610      	mov	r0, r2
 80077fa:	4798      	blx	r3
 80077fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077fe:	e077      	b.n	80078f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007800:	6839      	ldr	r1, [r7, #0]
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 fa98 	bl	8007d38 <USBD_CtlError>
            err++;
 8007808:	7afb      	ldrb	r3, [r7, #11]
 800780a:	3301      	adds	r3, #1
 800780c:	72fb      	strb	r3, [r7, #11]
          break;
 800780e:	e06f      	b.n	80078f0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d00b      	beq.n	8007834 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007822:	68db      	ldr	r3, [r3, #12]
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	7c12      	ldrb	r2, [r2, #16]
 8007828:	f107 0108 	add.w	r1, r7, #8
 800782c:	4610      	mov	r0, r2
 800782e:	4798      	blx	r3
 8007830:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007832:	e05d      	b.n	80078f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007834:	6839      	ldr	r1, [r7, #0]
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 fa7e 	bl	8007d38 <USBD_CtlError>
            err++;
 800783c:	7afb      	ldrb	r3, [r7, #11]
 800783e:	3301      	adds	r3, #1
 8007840:	72fb      	strb	r3, [r7, #11]
          break;
 8007842:	e055      	b.n	80078f0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800784a:	691b      	ldr	r3, [r3, #16]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d00b      	beq.n	8007868 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007856:	691b      	ldr	r3, [r3, #16]
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	7c12      	ldrb	r2, [r2, #16]
 800785c:	f107 0108 	add.w	r1, r7, #8
 8007860:	4610      	mov	r0, r2
 8007862:	4798      	blx	r3
 8007864:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007866:	e043      	b.n	80078f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007868:	6839      	ldr	r1, [r7, #0]
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 fa64 	bl	8007d38 <USBD_CtlError>
            err++;
 8007870:	7afb      	ldrb	r3, [r7, #11]
 8007872:	3301      	adds	r3, #1
 8007874:	72fb      	strb	r3, [r7, #11]
          break;
 8007876:	e03b      	b.n	80078f0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800787e:	695b      	ldr	r3, [r3, #20]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d00b      	beq.n	800789c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800788a:	695b      	ldr	r3, [r3, #20]
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	7c12      	ldrb	r2, [r2, #16]
 8007890:	f107 0108 	add.w	r1, r7, #8
 8007894:	4610      	mov	r0, r2
 8007896:	4798      	blx	r3
 8007898:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800789a:	e029      	b.n	80078f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800789c:	6839      	ldr	r1, [r7, #0]
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 fa4a 	bl	8007d38 <USBD_CtlError>
            err++;
 80078a4:	7afb      	ldrb	r3, [r7, #11]
 80078a6:	3301      	adds	r3, #1
 80078a8:	72fb      	strb	r3, [r7, #11]
          break;
 80078aa:	e021      	b.n	80078f0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078b2:	699b      	ldr	r3, [r3, #24]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d00b      	beq.n	80078d0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078be:	699b      	ldr	r3, [r3, #24]
 80078c0:	687a      	ldr	r2, [r7, #4]
 80078c2:	7c12      	ldrb	r2, [r2, #16]
 80078c4:	f107 0108 	add.w	r1, r7, #8
 80078c8:	4610      	mov	r0, r2
 80078ca:	4798      	blx	r3
 80078cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078ce:	e00f      	b.n	80078f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80078d0:	6839      	ldr	r1, [r7, #0]
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 fa30 	bl	8007d38 <USBD_CtlError>
            err++;
 80078d8:	7afb      	ldrb	r3, [r7, #11]
 80078da:	3301      	adds	r3, #1
 80078dc:	72fb      	strb	r3, [r7, #11]
          break;
 80078de:	e007      	b.n	80078f0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80078e0:	6839      	ldr	r1, [r7, #0]
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 fa28 	bl	8007d38 <USBD_CtlError>
          err++;
 80078e8:	7afb      	ldrb	r3, [r7, #11]
 80078ea:	3301      	adds	r3, #1
 80078ec:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80078ee:	bf00      	nop
      }
      break;
 80078f0:	e037      	b.n	8007962 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	7c1b      	ldrb	r3, [r3, #16]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d109      	bne.n	800790e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007902:	f107 0208 	add.w	r2, r7, #8
 8007906:	4610      	mov	r0, r2
 8007908:	4798      	blx	r3
 800790a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800790c:	e029      	b.n	8007962 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800790e:	6839      	ldr	r1, [r7, #0]
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 fa11 	bl	8007d38 <USBD_CtlError>
        err++;
 8007916:	7afb      	ldrb	r3, [r7, #11]
 8007918:	3301      	adds	r3, #1
 800791a:	72fb      	strb	r3, [r7, #11]
      break;
 800791c:	e021      	b.n	8007962 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	7c1b      	ldrb	r3, [r3, #16]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d10d      	bne.n	8007942 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800792c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800792e:	f107 0208 	add.w	r2, r7, #8
 8007932:	4610      	mov	r0, r2
 8007934:	4798      	blx	r3
 8007936:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	3301      	adds	r3, #1
 800793c:	2207      	movs	r2, #7
 800793e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007940:	e00f      	b.n	8007962 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007942:	6839      	ldr	r1, [r7, #0]
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 f9f7 	bl	8007d38 <USBD_CtlError>
        err++;
 800794a:	7afb      	ldrb	r3, [r7, #11]
 800794c:	3301      	adds	r3, #1
 800794e:	72fb      	strb	r3, [r7, #11]
      break;
 8007950:	e007      	b.n	8007962 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007952:	6839      	ldr	r1, [r7, #0]
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 f9ef 	bl	8007d38 <USBD_CtlError>
      err++;
 800795a:	7afb      	ldrb	r3, [r7, #11]
 800795c:	3301      	adds	r3, #1
 800795e:	72fb      	strb	r3, [r7, #11]
      break;
 8007960:	bf00      	nop
  }

  if (err != 0U)
 8007962:	7afb      	ldrb	r3, [r7, #11]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d11e      	bne.n	80079a6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	88db      	ldrh	r3, [r3, #6]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d016      	beq.n	800799e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007970:	893b      	ldrh	r3, [r7, #8]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d00e      	beq.n	8007994 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	88da      	ldrh	r2, [r3, #6]
 800797a:	893b      	ldrh	r3, [r7, #8]
 800797c:	4293      	cmp	r3, r2
 800797e:	bf28      	it	cs
 8007980:	4613      	movcs	r3, r2
 8007982:	b29b      	uxth	r3, r3
 8007984:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007986:	893b      	ldrh	r3, [r7, #8]
 8007988:	461a      	mov	r2, r3
 800798a:	68f9      	ldr	r1, [r7, #12]
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 fa44 	bl	8007e1a <USBD_CtlSendData>
 8007992:	e009      	b.n	80079a8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007994:	6839      	ldr	r1, [r7, #0]
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f000 f9ce 	bl	8007d38 <USBD_CtlError>
 800799c:	e004      	b.n	80079a8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 fa78 	bl	8007e94 <USBD_CtlSendStatus>
 80079a4:	e000      	b.n	80079a8 <USBD_GetDescriptor+0x320>
    return;
 80079a6:	bf00      	nop
  }
}
 80079a8:	3710      	adds	r7, #16
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	bf00      	nop

080079b0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b084      	sub	sp, #16
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	889b      	ldrh	r3, [r3, #4]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d131      	bne.n	8007a26 <USBD_SetAddress+0x76>
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	88db      	ldrh	r3, [r3, #6]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d12d      	bne.n	8007a26 <USBD_SetAddress+0x76>
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	885b      	ldrh	r3, [r3, #2]
 80079ce:	2b7f      	cmp	r3, #127	; 0x7f
 80079d0:	d829      	bhi.n	8007a26 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	885b      	ldrh	r3, [r3, #2]
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079dc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	2b03      	cmp	r3, #3
 80079e8:	d104      	bne.n	80079f4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80079ea:	6839      	ldr	r1, [r7, #0]
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 f9a3 	bl	8007d38 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079f2:	e01d      	b.n	8007a30 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	7bfa      	ldrb	r2, [r7, #15]
 80079f8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80079fc:	7bfb      	ldrb	r3, [r7, #15]
 80079fe:	4619      	mov	r1, r3
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f001 f873 	bl	8008aec <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 fa44 	bl	8007e94 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007a0c:	7bfb      	ldrb	r3, [r7, #15]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d004      	beq.n	8007a1c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2202      	movs	r2, #2
 8007a16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a1a:	e009      	b.n	8007a30 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a24:	e004      	b.n	8007a30 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007a26:	6839      	ldr	r1, [r7, #0]
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f000 f985 	bl	8007d38 <USBD_CtlError>
  }
}
 8007a2e:	bf00      	nop
 8007a30:	bf00      	nop
 8007a32:	3710      	adds	r7, #16
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b084      	sub	sp, #16
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a42:	2300      	movs	r3, #0
 8007a44:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	885b      	ldrh	r3, [r3, #2]
 8007a4a:	b2da      	uxtb	r2, r3
 8007a4c:	4b4c      	ldr	r3, [pc, #304]	; (8007b80 <USBD_SetConfig+0x148>)
 8007a4e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007a50:	4b4b      	ldr	r3, [pc, #300]	; (8007b80 <USBD_SetConfig+0x148>)
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	d905      	bls.n	8007a64 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007a58:	6839      	ldr	r1, [r7, #0]
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 f96c 	bl	8007d38 <USBD_CtlError>
    return USBD_FAIL;
 8007a60:	2303      	movs	r3, #3
 8007a62:	e088      	b.n	8007b76 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a6a:	b2db      	uxtb	r3, r3
 8007a6c:	2b02      	cmp	r3, #2
 8007a6e:	d002      	beq.n	8007a76 <USBD_SetConfig+0x3e>
 8007a70:	2b03      	cmp	r3, #3
 8007a72:	d025      	beq.n	8007ac0 <USBD_SetConfig+0x88>
 8007a74:	e071      	b.n	8007b5a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007a76:	4b42      	ldr	r3, [pc, #264]	; (8007b80 <USBD_SetConfig+0x148>)
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d01c      	beq.n	8007ab8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007a7e:	4b40      	ldr	r3, [pc, #256]	; (8007b80 <USBD_SetConfig+0x148>)
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	461a      	mov	r2, r3
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007a88:	4b3d      	ldr	r3, [pc, #244]	; (8007b80 <USBD_SetConfig+0x148>)
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f7ff f91f 	bl	8006cd2 <USBD_SetClassConfig>
 8007a94:	4603      	mov	r3, r0
 8007a96:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007a98:	7bfb      	ldrb	r3, [r7, #15]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d004      	beq.n	8007aa8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007a9e:	6839      	ldr	r1, [r7, #0]
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f000 f949 	bl	8007d38 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007aa6:	e065      	b.n	8007b74 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 f9f3 	bl	8007e94 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2203      	movs	r2, #3
 8007ab2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007ab6:	e05d      	b.n	8007b74 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 f9eb 	bl	8007e94 <USBD_CtlSendStatus>
      break;
 8007abe:	e059      	b.n	8007b74 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007ac0:	4b2f      	ldr	r3, [pc, #188]	; (8007b80 <USBD_SetConfig+0x148>)
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d112      	bne.n	8007aee <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2202      	movs	r2, #2
 8007acc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007ad0:	4b2b      	ldr	r3, [pc, #172]	; (8007b80 <USBD_SetConfig+0x148>)
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007ada:	4b29      	ldr	r3, [pc, #164]	; (8007b80 <USBD_SetConfig+0x148>)
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	4619      	mov	r1, r3
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f7ff f912 	bl	8006d0a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 f9d4 	bl	8007e94 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007aec:	e042      	b.n	8007b74 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007aee:	4b24      	ldr	r3, [pc, #144]	; (8007b80 <USBD_SetConfig+0x148>)
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	461a      	mov	r2, r3
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d02a      	beq.n	8007b52 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	b2db      	uxtb	r3, r3
 8007b02:	4619      	mov	r1, r3
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f7ff f900 	bl	8006d0a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007b0a:	4b1d      	ldr	r3, [pc, #116]	; (8007b80 <USBD_SetConfig+0x148>)
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	461a      	mov	r2, r3
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007b14:	4b1a      	ldr	r3, [pc, #104]	; (8007b80 <USBD_SetConfig+0x148>)
 8007b16:	781b      	ldrb	r3, [r3, #0]
 8007b18:	4619      	mov	r1, r3
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f7ff f8d9 	bl	8006cd2 <USBD_SetClassConfig>
 8007b20:	4603      	mov	r3, r0
 8007b22:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007b24:	7bfb      	ldrb	r3, [r7, #15]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d00f      	beq.n	8007b4a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007b2a:	6839      	ldr	r1, [r7, #0]
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 f903 	bl	8007d38 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	b2db      	uxtb	r3, r3
 8007b38:	4619      	mov	r1, r3
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f7ff f8e5 	bl	8006d0a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2202      	movs	r2, #2
 8007b44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007b48:	e014      	b.n	8007b74 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 f9a2 	bl	8007e94 <USBD_CtlSendStatus>
      break;
 8007b50:	e010      	b.n	8007b74 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 f99e 	bl	8007e94 <USBD_CtlSendStatus>
      break;
 8007b58:	e00c      	b.n	8007b74 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007b5a:	6839      	ldr	r1, [r7, #0]
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 f8eb 	bl	8007d38 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007b62:	4b07      	ldr	r3, [pc, #28]	; (8007b80 <USBD_SetConfig+0x148>)
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	4619      	mov	r1, r3
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f7ff f8ce 	bl	8006d0a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007b6e:	2303      	movs	r3, #3
 8007b70:	73fb      	strb	r3, [r7, #15]
      break;
 8007b72:	bf00      	nop
  }

  return ret;
 8007b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3710      	adds	r7, #16
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
 8007b7e:	bf00      	nop
 8007b80:	200001b4 	.word	0x200001b4

08007b84 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b082      	sub	sp, #8
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	88db      	ldrh	r3, [r3, #6]
 8007b92:	2b01      	cmp	r3, #1
 8007b94:	d004      	beq.n	8007ba0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007b96:	6839      	ldr	r1, [r7, #0]
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f000 f8cd 	bl	8007d38 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007b9e:	e023      	b.n	8007be8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	2b02      	cmp	r3, #2
 8007baa:	dc02      	bgt.n	8007bb2 <USBD_GetConfig+0x2e>
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	dc03      	bgt.n	8007bb8 <USBD_GetConfig+0x34>
 8007bb0:	e015      	b.n	8007bde <USBD_GetConfig+0x5a>
 8007bb2:	2b03      	cmp	r3, #3
 8007bb4:	d00b      	beq.n	8007bce <USBD_GetConfig+0x4a>
 8007bb6:	e012      	b.n	8007bde <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	3308      	adds	r3, #8
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 f927 	bl	8007e1a <USBD_CtlSendData>
        break;
 8007bcc:	e00c      	b.n	8007be8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	3304      	adds	r3, #4
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 f91f 	bl	8007e1a <USBD_CtlSendData>
        break;
 8007bdc:	e004      	b.n	8007be8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007bde:	6839      	ldr	r1, [r7, #0]
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 f8a9 	bl	8007d38 <USBD_CtlError>
        break;
 8007be6:	bf00      	nop
}
 8007be8:	bf00      	nop
 8007bea:	3708      	adds	r7, #8
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}

08007bf0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b082      	sub	sp, #8
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c00:	b2db      	uxtb	r3, r3
 8007c02:	3b01      	subs	r3, #1
 8007c04:	2b02      	cmp	r3, #2
 8007c06:	d81e      	bhi.n	8007c46 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	88db      	ldrh	r3, [r3, #6]
 8007c0c:	2b02      	cmp	r3, #2
 8007c0e:	d004      	beq.n	8007c1a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007c10:	6839      	ldr	r1, [r7, #0]
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 f890 	bl	8007d38 <USBD_CtlError>
        break;
 8007c18:	e01a      	b.n	8007c50 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d005      	beq.n	8007c36 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	68db      	ldr	r3, [r3, #12]
 8007c2e:	f043 0202 	orr.w	r2, r3, #2
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	330c      	adds	r3, #12
 8007c3a:	2202      	movs	r2, #2
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 f8eb 	bl	8007e1a <USBD_CtlSendData>
      break;
 8007c44:	e004      	b.n	8007c50 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007c46:	6839      	ldr	r1, [r7, #0]
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f000 f875 	bl	8007d38 <USBD_CtlError>
      break;
 8007c4e:	bf00      	nop
  }
}
 8007c50:	bf00      	nop
 8007c52:	3708      	adds	r7, #8
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	885b      	ldrh	r3, [r3, #2]
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d106      	bne.n	8007c78 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 f90e 	bl	8007e94 <USBD_CtlSendStatus>
  }
}
 8007c78:	bf00      	nop
 8007c7a:	3708      	adds	r7, #8
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b082      	sub	sp, #8
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	3b01      	subs	r3, #1
 8007c94:	2b02      	cmp	r3, #2
 8007c96:	d80b      	bhi.n	8007cb0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	885b      	ldrh	r3, [r3, #2]
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d10c      	bne.n	8007cba <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f000 f8f3 	bl	8007e94 <USBD_CtlSendStatus>
      }
      break;
 8007cae:	e004      	b.n	8007cba <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007cb0:	6839      	ldr	r1, [r7, #0]
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 f840 	bl	8007d38 <USBD_CtlError>
      break;
 8007cb8:	e000      	b.n	8007cbc <USBD_ClrFeature+0x3c>
      break;
 8007cba:	bf00      	nop
  }
}
 8007cbc:	bf00      	nop
 8007cbe:	3708      	adds	r7, #8
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	781a      	ldrb	r2, [r3, #0]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	3301      	adds	r3, #1
 8007cde:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	781a      	ldrb	r2, [r3, #0]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	3301      	adds	r3, #1
 8007cec:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007cee:	68f8      	ldr	r0, [r7, #12]
 8007cf0:	f7ff fa92 	bl	8007218 <SWAPBYTE>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	3301      	adds	r3, #1
 8007d00:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	3301      	adds	r3, #1
 8007d06:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007d08:	68f8      	ldr	r0, [r7, #12]
 8007d0a:	f7ff fa85 	bl	8007218 <SWAPBYTE>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	461a      	mov	r2, r3
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	3301      	adds	r3, #1
 8007d1a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	3301      	adds	r3, #1
 8007d20:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007d22:	68f8      	ldr	r0, [r7, #12]
 8007d24:	f7ff fa78 	bl	8007218 <SWAPBYTE>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	80da      	strh	r2, [r3, #6]
}
 8007d30:	bf00      	nop
 8007d32:	3710      	adds	r7, #16
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b082      	sub	sp, #8
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d42:	2180      	movs	r1, #128	; 0x80
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f000 fe39 	bl	80089bc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007d4a:	2100      	movs	r1, #0
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 fe35 	bl	80089bc <USBD_LL_StallEP>
}
 8007d52:	bf00      	nop
 8007d54:	3708      	adds	r7, #8
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}

08007d5a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007d5a:	b580      	push	{r7, lr}
 8007d5c:	b086      	sub	sp, #24
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	60f8      	str	r0, [r7, #12]
 8007d62:	60b9      	str	r1, [r7, #8]
 8007d64:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007d66:	2300      	movs	r3, #0
 8007d68:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d036      	beq.n	8007dde <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007d74:	6938      	ldr	r0, [r7, #16]
 8007d76:	f000 f836 	bl	8007de6 <USBD_GetLen>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	005b      	lsls	r3, r3, #1
 8007d82:	b29a      	uxth	r2, r3
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007d88:	7dfb      	ldrb	r3, [r7, #23]
 8007d8a:	68ba      	ldr	r2, [r7, #8]
 8007d8c:	4413      	add	r3, r2
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	7812      	ldrb	r2, [r2, #0]
 8007d92:	701a      	strb	r2, [r3, #0]
  idx++;
 8007d94:	7dfb      	ldrb	r3, [r7, #23]
 8007d96:	3301      	adds	r3, #1
 8007d98:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007d9a:	7dfb      	ldrb	r3, [r7, #23]
 8007d9c:	68ba      	ldr	r2, [r7, #8]
 8007d9e:	4413      	add	r3, r2
 8007da0:	2203      	movs	r2, #3
 8007da2:	701a      	strb	r2, [r3, #0]
  idx++;
 8007da4:	7dfb      	ldrb	r3, [r7, #23]
 8007da6:	3301      	adds	r3, #1
 8007da8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007daa:	e013      	b.n	8007dd4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007dac:	7dfb      	ldrb	r3, [r7, #23]
 8007dae:	68ba      	ldr	r2, [r7, #8]
 8007db0:	4413      	add	r3, r2
 8007db2:	693a      	ldr	r2, [r7, #16]
 8007db4:	7812      	ldrb	r2, [r2, #0]
 8007db6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	3301      	adds	r3, #1
 8007dbc:	613b      	str	r3, [r7, #16]
    idx++;
 8007dbe:	7dfb      	ldrb	r3, [r7, #23]
 8007dc0:	3301      	adds	r3, #1
 8007dc2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007dc4:	7dfb      	ldrb	r3, [r7, #23]
 8007dc6:	68ba      	ldr	r2, [r7, #8]
 8007dc8:	4413      	add	r3, r2
 8007dca:	2200      	movs	r2, #0
 8007dcc:	701a      	strb	r2, [r3, #0]
    idx++;
 8007dce:	7dfb      	ldrb	r3, [r7, #23]
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d1e7      	bne.n	8007dac <USBD_GetString+0x52>
 8007ddc:	e000      	b.n	8007de0 <USBD_GetString+0x86>
    return;
 8007dde:	bf00      	nop
  }
}
 8007de0:	3718      	adds	r7, #24
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}

08007de6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007de6:	b480      	push	{r7}
 8007de8:	b085      	sub	sp, #20
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007dee:	2300      	movs	r3, #0
 8007df0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007df6:	e005      	b.n	8007e04 <USBD_GetLen+0x1e>
  {
    len++;
 8007df8:	7bfb      	ldrb	r3, [r7, #15]
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	3301      	adds	r3, #1
 8007e02:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d1f5      	bne.n	8007df8 <USBD_GetLen+0x12>
  }

  return len;
 8007e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3714      	adds	r7, #20
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr

08007e1a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007e1a:	b580      	push	{r7, lr}
 8007e1c:	b084      	sub	sp, #16
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	60f8      	str	r0, [r7, #12]
 8007e22:	60b9      	str	r1, [r7, #8]
 8007e24:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2202      	movs	r2, #2
 8007e2a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	687a      	ldr	r2, [r7, #4]
 8007e32:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	687a      	ldr	r2, [r7, #4]
 8007e38:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	68ba      	ldr	r2, [r7, #8]
 8007e3e:	2100      	movs	r1, #0
 8007e40:	68f8      	ldr	r0, [r7, #12]
 8007e42:	f000 fe89 	bl	8008b58 <USBD_LL_Transmit>

  return USBD_OK;
 8007e46:	2300      	movs	r3, #0
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3710      	adds	r7, #16
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	60f8      	str	r0, [r7, #12]
 8007e58:	60b9      	str	r1, [r7, #8]
 8007e5a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	68ba      	ldr	r2, [r7, #8]
 8007e60:	2100      	movs	r1, #0
 8007e62:	68f8      	ldr	r0, [r7, #12]
 8007e64:	f000 fe78 	bl	8008b58 <USBD_LL_Transmit>

  return USBD_OK;
 8007e68:	2300      	movs	r3, #0
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3710      	adds	r7, #16
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}

08007e72 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007e72:	b580      	push	{r7, lr}
 8007e74:	b084      	sub	sp, #16
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	60f8      	str	r0, [r7, #12]
 8007e7a:	60b9      	str	r1, [r7, #8]
 8007e7c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	68ba      	ldr	r2, [r7, #8]
 8007e82:	2100      	movs	r1, #0
 8007e84:	68f8      	ldr	r0, [r7, #12]
 8007e86:	f000 fe9f 	bl	8008bc8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e8a:	2300      	movs	r3, #0
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3710      	adds	r7, #16
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b082      	sub	sp, #8
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2204      	movs	r2, #4
 8007ea0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	2100      	movs	r1, #0
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 fe54 	bl	8008b58 <USBD_LL_Transmit>

  return USBD_OK;
 8007eb0:	2300      	movs	r3, #0
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3708      	adds	r7, #8
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}

08007eba <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007eba:	b580      	push	{r7, lr}
 8007ebc:	b082      	sub	sp, #8
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2205      	movs	r2, #5
 8007ec6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007eca:	2300      	movs	r3, #0
 8007ecc:	2200      	movs	r2, #0
 8007ece:	2100      	movs	r1, #0
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f000 fe79 	bl	8008bc8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ed6:	2300      	movs	r3, #0
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3708      	adds	r7, #8
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	4912      	ldr	r1, [pc, #72]	; (8007f30 <MX_USB_DEVICE_Init+0x50>)
 8007ee8:	4812      	ldr	r0, [pc, #72]	; (8007f34 <MX_USB_DEVICE_Init+0x54>)
 8007eea:	f7fe fe84 	bl	8006bf6 <USBD_Init>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d001      	beq.n	8007ef8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007ef4:	f7f8 f9e6 	bl	80002c4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8007ef8:	490f      	ldr	r1, [pc, #60]	; (8007f38 <MX_USB_DEVICE_Init+0x58>)
 8007efa:	480e      	ldr	r0, [pc, #56]	; (8007f34 <MX_USB_DEVICE_Init+0x54>)
 8007efc:	f7fe feab 	bl	8006c56 <USBD_RegisterClass>
 8007f00:	4603      	mov	r3, r0
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d001      	beq.n	8007f0a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007f06:	f7f8 f9dd 	bl	80002c4 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8007f0a:	490c      	ldr	r1, [pc, #48]	; (8007f3c <MX_USB_DEVICE_Init+0x5c>)
 8007f0c:	4809      	ldr	r0, [pc, #36]	; (8007f34 <MX_USB_DEVICE_Init+0x54>)
 8007f0e:	f7fd fa5b 	bl	80053c8 <USBD_MSC_RegisterStorage>
 8007f12:	4603      	mov	r3, r0
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d001      	beq.n	8007f1c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007f18:	f7f8 f9d4 	bl	80002c4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007f1c:	4805      	ldr	r0, [pc, #20]	; (8007f34 <MX_USB_DEVICE_Init+0x54>)
 8007f1e:	f7fe fec1 	bl	8006ca4 <USBD_Start>
 8007f22:	4603      	mov	r3, r0
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d001      	beq.n	8007f2c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007f28:	f7f8 f9cc 	bl	80002c4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007f2c:	bf00      	nop
 8007f2e:	bd80      	pop	{r7, pc}
 8007f30:	20000114 	.word	0x20000114
 8007f34:	200001b8 	.word	0x200001b8
 8007f38:	2000002c 	.word	0x2000002c
 8007f3c:	20000174 	.word	0x20000174

08007f40 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b083      	sub	sp, #12
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	4603      	mov	r3, r0
 8007f48:	6039      	str	r1, [r7, #0]
 8007f4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	2212      	movs	r2, #18
 8007f50:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007f52:	4b03      	ldr	r3, [pc, #12]	; (8007f60 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	370c      	adds	r7, #12
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr
 8007f60:	20000134 	.word	0x20000134

08007f64 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b083      	sub	sp, #12
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	6039      	str	r1, [r7, #0]
 8007f6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	2204      	movs	r2, #4
 8007f74:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007f76:	4b03      	ldr	r3, [pc, #12]	; (8007f84 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	370c      	adds	r7, #12
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr
 8007f84:	20000154 	.word	0x20000154

08007f88 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	4603      	mov	r3, r0
 8007f90:	6039      	str	r1, [r7, #0]
 8007f92:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007f94:	79fb      	ldrb	r3, [r7, #7]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d105      	bne.n	8007fa6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007f9a:	683a      	ldr	r2, [r7, #0]
 8007f9c:	4907      	ldr	r1, [pc, #28]	; (8007fbc <USBD_FS_ProductStrDescriptor+0x34>)
 8007f9e:	4808      	ldr	r0, [pc, #32]	; (8007fc0 <USBD_FS_ProductStrDescriptor+0x38>)
 8007fa0:	f7ff fedb 	bl	8007d5a <USBD_GetString>
 8007fa4:	e004      	b.n	8007fb0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007fa6:	683a      	ldr	r2, [r7, #0]
 8007fa8:	4904      	ldr	r1, [pc, #16]	; (8007fbc <USBD_FS_ProductStrDescriptor+0x34>)
 8007faa:	4805      	ldr	r0, [pc, #20]	; (8007fc0 <USBD_FS_ProductStrDescriptor+0x38>)
 8007fac:	f7ff fed5 	bl	8007d5a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007fb0:	4b02      	ldr	r3, [pc, #8]	; (8007fbc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3708      	adds	r7, #8
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}
 8007fba:	bf00      	nop
 8007fbc:	20000488 	.word	0x20000488
 8007fc0:	08008dc4 	.word	0x08008dc4

08007fc4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b082      	sub	sp, #8
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	4603      	mov	r3, r0
 8007fcc:	6039      	str	r1, [r7, #0]
 8007fce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007fd0:	683a      	ldr	r2, [r7, #0]
 8007fd2:	4904      	ldr	r1, [pc, #16]	; (8007fe4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007fd4:	4804      	ldr	r0, [pc, #16]	; (8007fe8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007fd6:	f7ff fec0 	bl	8007d5a <USBD_GetString>
  return USBD_StrDesc;
 8007fda:	4b02      	ldr	r3, [pc, #8]	; (8007fe4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3708      	adds	r7, #8
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}
 8007fe4:	20000488 	.word	0x20000488
 8007fe8:	08008dd8 	.word	0x08008dd8

08007fec <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b082      	sub	sp, #8
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	6039      	str	r1, [r7, #0]
 8007ff6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	221a      	movs	r2, #26
 8007ffc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007ffe:	f000 f855 	bl	80080ac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008002:	4b02      	ldr	r3, [pc, #8]	; (800800c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008004:	4618      	mov	r0, r3
 8008006:	3708      	adds	r7, #8
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}
 800800c:	20000158 	.word	0x20000158

08008010 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b082      	sub	sp, #8
 8008014:	af00      	add	r7, sp, #0
 8008016:	4603      	mov	r3, r0
 8008018:	6039      	str	r1, [r7, #0]
 800801a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800801c:	79fb      	ldrb	r3, [r7, #7]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d105      	bne.n	800802e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008022:	683a      	ldr	r2, [r7, #0]
 8008024:	4907      	ldr	r1, [pc, #28]	; (8008044 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008026:	4808      	ldr	r0, [pc, #32]	; (8008048 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008028:	f7ff fe97 	bl	8007d5a <USBD_GetString>
 800802c:	e004      	b.n	8008038 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800802e:	683a      	ldr	r2, [r7, #0]
 8008030:	4904      	ldr	r1, [pc, #16]	; (8008044 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008032:	4805      	ldr	r0, [pc, #20]	; (8008048 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008034:	f7ff fe91 	bl	8007d5a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008038:	4b02      	ldr	r3, [pc, #8]	; (8008044 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800803a:	4618      	mov	r0, r3
 800803c:	3708      	adds	r7, #8
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
 8008042:	bf00      	nop
 8008044:	20000488 	.word	0x20000488
 8008048:	08008dec 	.word	0x08008dec

0800804c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b082      	sub	sp, #8
 8008050:	af00      	add	r7, sp, #0
 8008052:	4603      	mov	r3, r0
 8008054:	6039      	str	r1, [r7, #0]
 8008056:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008058:	79fb      	ldrb	r3, [r7, #7]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d105      	bne.n	800806a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800805e:	683a      	ldr	r2, [r7, #0]
 8008060:	4907      	ldr	r1, [pc, #28]	; (8008080 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008062:	4808      	ldr	r0, [pc, #32]	; (8008084 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008064:	f7ff fe79 	bl	8007d5a <USBD_GetString>
 8008068:	e004      	b.n	8008074 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800806a:	683a      	ldr	r2, [r7, #0]
 800806c:	4904      	ldr	r1, [pc, #16]	; (8008080 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800806e:	4805      	ldr	r0, [pc, #20]	; (8008084 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008070:	f7ff fe73 	bl	8007d5a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008074:	4b02      	ldr	r3, [pc, #8]	; (8008080 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008076:	4618      	mov	r0, r3
 8008078:	3708      	adds	r7, #8
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}
 800807e:	bf00      	nop
 8008080:	20000488 	.word	0x20000488
 8008084:	08008df8 	.word	0x08008df8

08008088 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008088:	b480      	push	{r7}
 800808a:	b083      	sub	sp, #12
 800808c:	af00      	add	r7, sp, #0
 800808e:	4603      	mov	r3, r0
 8008090:	6039      	str	r1, [r7, #0]
 8008092:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	220c      	movs	r2, #12
 8008098:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800809a:	4b03      	ldr	r3, [pc, #12]	; (80080a8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800809c:	4618      	mov	r0, r3
 800809e:	370c      	adds	r7, #12
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr
 80080a8:	20000148 	.word	0x20000148

080080ac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b084      	sub	sp, #16
 80080b0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80080b2:	4b0f      	ldr	r3, [pc, #60]	; (80080f0 <Get_SerialNum+0x44>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80080b8:	4b0e      	ldr	r3, [pc, #56]	; (80080f4 <Get_SerialNum+0x48>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80080be:	4b0e      	ldr	r3, [pc, #56]	; (80080f8 <Get_SerialNum+0x4c>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80080c4:	68fa      	ldr	r2, [r7, #12]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	4413      	add	r3, r2
 80080ca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d009      	beq.n	80080e6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80080d2:	2208      	movs	r2, #8
 80080d4:	4909      	ldr	r1, [pc, #36]	; (80080fc <Get_SerialNum+0x50>)
 80080d6:	68f8      	ldr	r0, [r7, #12]
 80080d8:	f000 f814 	bl	8008104 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80080dc:	2204      	movs	r2, #4
 80080de:	4908      	ldr	r1, [pc, #32]	; (8008100 <Get_SerialNum+0x54>)
 80080e0:	68b8      	ldr	r0, [r7, #8]
 80080e2:	f000 f80f 	bl	8008104 <IntToUnicode>
  }
}
 80080e6:	bf00      	nop
 80080e8:	3710      	adds	r7, #16
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}
 80080ee:	bf00      	nop
 80080f0:	1fff7590 	.word	0x1fff7590
 80080f4:	1fff7594 	.word	0x1fff7594
 80080f8:	1fff7598 	.word	0x1fff7598
 80080fc:	2000015a 	.word	0x2000015a
 8008100:	2000016a 	.word	0x2000016a

08008104 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008104:	b480      	push	{r7}
 8008106:	b087      	sub	sp, #28
 8008108:	af00      	add	r7, sp, #0
 800810a:	60f8      	str	r0, [r7, #12]
 800810c:	60b9      	str	r1, [r7, #8]
 800810e:	4613      	mov	r3, r2
 8008110:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008112:	2300      	movs	r3, #0
 8008114:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008116:	2300      	movs	r3, #0
 8008118:	75fb      	strb	r3, [r7, #23]
 800811a:	e027      	b.n	800816c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	0f1b      	lsrs	r3, r3, #28
 8008120:	2b09      	cmp	r3, #9
 8008122:	d80b      	bhi.n	800813c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	0f1b      	lsrs	r3, r3, #28
 8008128:	b2da      	uxtb	r2, r3
 800812a:	7dfb      	ldrb	r3, [r7, #23]
 800812c:	005b      	lsls	r3, r3, #1
 800812e:	4619      	mov	r1, r3
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	440b      	add	r3, r1
 8008134:	3230      	adds	r2, #48	; 0x30
 8008136:	b2d2      	uxtb	r2, r2
 8008138:	701a      	strb	r2, [r3, #0]
 800813a:	e00a      	b.n	8008152 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	0f1b      	lsrs	r3, r3, #28
 8008140:	b2da      	uxtb	r2, r3
 8008142:	7dfb      	ldrb	r3, [r7, #23]
 8008144:	005b      	lsls	r3, r3, #1
 8008146:	4619      	mov	r1, r3
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	440b      	add	r3, r1
 800814c:	3237      	adds	r2, #55	; 0x37
 800814e:	b2d2      	uxtb	r2, r2
 8008150:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	011b      	lsls	r3, r3, #4
 8008156:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008158:	7dfb      	ldrb	r3, [r7, #23]
 800815a:	005b      	lsls	r3, r3, #1
 800815c:	3301      	adds	r3, #1
 800815e:	68ba      	ldr	r2, [r7, #8]
 8008160:	4413      	add	r3, r2
 8008162:	2200      	movs	r2, #0
 8008164:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008166:	7dfb      	ldrb	r3, [r7, #23]
 8008168:	3301      	adds	r3, #1
 800816a:	75fb      	strb	r3, [r7, #23]
 800816c:	7dfa      	ldrb	r2, [r7, #23]
 800816e:	79fb      	ldrb	r3, [r7, #7]
 8008170:	429a      	cmp	r2, r3
 8008172:	d3d3      	bcc.n	800811c <IntToUnicode+0x18>
  }
}
 8008174:	bf00      	nop
 8008176:	bf00      	nop
 8008178:	371c      	adds	r7, #28
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr
	...

08008184 <write_data_to_flash>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval HAL_StatusTypeDef
  */
static HAL_StatusTypeDef write_data_to_flash( uint8_t *buf, uint32_t blk_addr, uint16_t blk_len )
{
 8008184:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008188:	f5ad 3d80 	sub.w	sp, sp, #65536	; 0x10000
 800818c:	b08e      	sub	sp, #56	; 0x38
 800818e:	af00      	add	r7, sp, #0
 8008190:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008194:	f843 0c2c 	str.w	r0, [r3, #-44]
 8008198:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800819c:	f843 1c30 	str.w	r1, [r3, #-48]
 80081a0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80081a4:	f823 2c32 	strh.w	r2, [r3, #-50]
  HAL_StatusTypeDef ret = HAL_OK;
 80081a8:	2300      	movs	r3, #0
 80081aa:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 80081ae:	f102 0237 	add.w	r2, r2, #55	; 0x37
 80081b2:	7013      	strb	r3, [r2, #0]
  uint8_t           data[ TOTAL_USB_DEVICE_SIZE ];

    /* First copy the data to the local buffer from Flash */
    memcpy( data, (const void *)USB_FLASH_START_ADDRESS, TOTAL_USB_DEVICE_SIZE );
 80081b4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80081b8:	4a64      	ldr	r2, [pc, #400]	; (800834c <write_data_to_flash+0x1c8>)
 80081ba:	3b10      	subs	r3, #16
 80081bc:	4611      	mov	r1, r2
 80081be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80081c2:	4618      	mov	r0, r3
 80081c4:	f000 fddc 	bl	8008d80 <memcpy>

    /* Make modifications in the local buffer */
    memcpy((void*)&data[blk_addr*STORAGE_BLK_SIZ], buf, (blk_len*STORAGE_BLK_SIZ));
 80081c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80081cc:	f853 3c30 	ldr.w	r3, [r3, #-48]
 80081d0:	025a      	lsls	r2, r3, #9
 80081d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80081d6:	3b10      	subs	r3, #16
 80081d8:	1898      	adds	r0, r3, r2
 80081da:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80081de:	f833 3c32 	ldrh.w	r3, [r3, #-50]
 80081e2:	025b      	lsls	r3, r3, #9
 80081e4:	461a      	mov	r2, r3
 80081e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80081ea:	f853 1c2c 	ldr.w	r1, [r3, #-44]
 80081ee:	f000 fdc7 	bl	8008d80 <memcpy>

    ret = HAL_FLASH_Unlock();
 80081f2:	f7f8 fb1f 	bl	8000834 <HAL_FLASH_Unlock>
 80081f6:	4603      	mov	r3, r0
 80081f8:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 80081fc:	f102 0237 	add.w	r2, r2, #55	; 0x37
 8008200:	7013      	strb	r3, [r2, #0]
    if( ret != HAL_OK )
 8008202:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8008206:	f103 0337 	add.w	r3, r3, #55	; 0x37
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d005      	beq.n	800821c <write_data_to_flash+0x98>
    {
    	return ret;
 8008210:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8008214:	f103 0337 	add.w	r3, r3, #55	; 0x37
 8008218:	781b      	ldrb	r3, [r3, #0]
 800821a:	e090      	b.n	800833e <write_data_to_flash+0x1ba>
    }

    /* Erase the Flash */
    FLASH_EraseInitTypeDef EraseInitStruct;
    uint32_t PageError;
    EraseInitStruct.TypeErase     = FLASH_TYPEERASE_PAGES;
 800821c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008220:	461a      	mov	r2, r3
 8008222:	2300      	movs	r3, #0
 8008224:	f842 3c20 	str.w	r3, [r2, #-32]
    EraseInitStruct.Banks         = FLASH_BANK_2;
 8008228:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800822c:	461a      	mov	r2, r3
 800822e:	2302      	movs	r3, #2
 8008230:	f842 3c1c 	str.w	r3, [r2, #-28]
    EraseInitStruct.Page          = 256;
 8008234:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008238:	461a      	mov	r2, r3
 800823a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800823e:	f842 3c18 	str.w	r3, [r2, #-24]
    EraseInitStruct.NbPages       = 32;
 8008242:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008246:	461a      	mov	r2, r3
 8008248:	2320      	movs	r3, #32
 800824a:	f842 3c14 	str.w	r3, [r2, #-20]

    ret = HAL_FLASHEx_Erase( &EraseInitStruct, &PageError );
 800824e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8008252:	3a24      	subs	r2, #36	; 0x24
 8008254:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008258:	3b20      	subs	r3, #32
 800825a:	4611      	mov	r1, r2
 800825c:	4618      	mov	r0, r3
 800825e:	f7f8 fbcd 	bl	80009fc <HAL_FLASHEx_Erase>
 8008262:	4603      	mov	r3, r0
 8008264:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8008268:	f102 0237 	add.w	r2, r2, #55	; 0x37
 800826c:	7013      	strb	r3, [r2, #0]

    if (ret != HAL_OK) {
 800826e:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8008272:	f103 0337 	add.w	r3, r3, #55	; 0x37
 8008276:	781b      	ldrb	r3, [r3, #0]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d007      	beq.n	800828c <write_data_to_flash+0x108>
        HAL_FLASH_Lock();
 800827c:	f7f8 fafc 	bl	8000878 <HAL_FLASH_Lock>
        return ret;
 8008280:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8008284:	f103 0337 	add.w	r3, r3, #55	; 0x37
 8008288:	781b      	ldrb	r3, [r3, #0]
 800828a:	e058      	b.n	800833e <write_data_to_flash+0x1ba>
    }

    /* Write the data to the Flash */
    for( uint64_t i = 0; i < TOTAL_USB_DEVICE_SIZE; i+= 8)
 800828c:	f04f 0200 	mov.w	r2, #0
 8008290:	f04f 0300 	mov.w	r3, #0
 8008294:	f507 3180 	add.w	r1, r7, #65536	; 0x10000
 8008298:	f101 0128 	add.w	r1, r1, #40	; 0x28
 800829c:	e9c1 2300 	strd	r2, r3, [r1]
 80082a0:	e039      	b.n	8008316 <write_data_to_flash+0x192>
    {
      ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_DOUBLEWORD,
 80082a2:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80082a6:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 80082b0:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
                  ( USB_FLASH_START_ADDRESS + i ),
                  data[i]
 80082b4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80082b8:	461a      	mov	r2, r3
 80082ba:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80082be:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4413      	add	r3, r2
 80082c6:	3b10      	subs	r3, #16
 80082c8:	781b      	ldrb	r3, [r3, #0]
      ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_DOUBLEWORD,
 80082ca:	b2db      	uxtb	r3, r3
 80082cc:	2200      	movs	r2, #0
 80082ce:	4698      	mov	r8, r3
 80082d0:	4691      	mov	r9, r2
 80082d2:	4642      	mov	r2, r8
 80082d4:	464b      	mov	r3, r9
 80082d6:	2000      	movs	r0, #0
 80082d8:	f7f8 fa40 	bl	800075c <HAL_FLASH_Program>
 80082dc:	4603      	mov	r3, r0
 80082de:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 80082e2:	f102 0237 	add.w	r2, r2, #55	; 0x37
 80082e6:	7013      	strb	r3, [r2, #0]
                  );

      if( ret != HAL_OK )
 80082e8:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80082ec:	f103 0337 	add.w	r3, r3, #55	; 0x37
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d11b      	bne.n	800832e <write_data_to_flash+0x1aa>
    for( uint64_t i = 0; i < TOTAL_USB_DEVICE_SIZE; i+= 8)
 80082f6:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80082fa:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80082fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008302:	f112 0408 	adds.w	r4, r2, #8
 8008306:	f143 0500 	adc.w	r5, r3, #0
 800830a:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 800830e:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8008312:	e9c3 4500 	strd	r4, r5, [r3]
 8008316:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 800831a:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800831e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008322:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8008326:	f173 0300 	sbcs.w	r3, r3, #0
 800832a:	d3ba      	bcc.n	80082a2 <write_data_to_flash+0x11e>
 800832c:	e000      	b.n	8008330 <write_data_to_flash+0x1ac>
      {
        break;
 800832e:	bf00      	nop
      }
    }

    HAL_FLASH_Lock();
 8008330:	f7f8 faa2 	bl	8000878 <HAL_FLASH_Lock>
  return( ret );
 8008334:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8008338:	f103 0337 	add.w	r3, r3, #55	; 0x37
 800833c:	781b      	ldrb	r3, [r3, #0]

}
 800833e:	4618      	mov	r0, r3
 8008340:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8008344:	3738      	adds	r7, #56	; 0x38
 8008346:	46bd      	mov	sp, r7
 8008348:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800834c:	08020000 	.word	0x08020000

08008350 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8008350:	b480      	push	{r7}
 8008352:	b083      	sub	sp, #12
 8008354:	af00      	add	r7, sp, #0
 8008356:	4603      	mov	r3, r0
 8008358:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 800835a:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800835c:	4618      	mov	r0, r3
 800835e:	370c      	adds	r7, #12
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr

08008368 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8008368:	b480      	push	{r7}
 800836a:	b085      	sub	sp, #20
 800836c:	af00      	add	r7, sp, #0
 800836e:	4603      	mov	r3, r0
 8008370:	60b9      	str	r1, [r7, #8]
 8008372:	607a      	str	r2, [r7, #4]
 8008374:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	2280      	movs	r2, #128	; 0x80
 800837a:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008382:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 8008384:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008386:	4618      	mov	r0, r3
 8008388:	3714      	adds	r7, #20
 800838a:	46bd      	mov	sp, r7
 800838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008390:	4770      	bx	lr

08008392 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8008392:	b480      	push	{r7}
 8008394:	b083      	sub	sp, #12
 8008396:	af00      	add	r7, sp, #0
 8008398:	4603      	mov	r3, r0
 800839a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800839c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800839e:	4618      	mov	r0, r3
 80083a0:	370c      	adds	r7, #12
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	4770      	bx	lr

080083aa <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 80083aa:	b480      	push	{r7}
 80083ac:	b083      	sub	sp, #12
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	4603      	mov	r3, r0
 80083b2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 80083b4:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	370c      	adds	r7, #12
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr

080083c2 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80083c2:	b580      	push	{r7, lr}
 80083c4:	b084      	sub	sp, #16
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	60b9      	str	r1, [r7, #8]
 80083ca:	607a      	str	r2, [r7, #4]
 80083cc:	461a      	mov	r2, r3
 80083ce:	4603      	mov	r3, r0
 80083d0:	73fb      	strb	r3, [r7, #15]
 80083d2:	4613      	mov	r3, r2
 80083d4:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */

	  memcpy( buf,
	          (const void *)(USB_FLASH_START_ADDRESS + ( blk_addr * STORAGE_BLK_SIZ )),
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 80083dc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80083e0:	025b      	lsls	r3, r3, #9
	  memcpy( buf,
 80083e2:	4619      	mov	r1, r3
	          (blk_len * STORAGE_BLK_SIZ)
 80083e4:	89bb      	ldrh	r3, [r7, #12]
 80083e6:	025b      	lsls	r3, r3, #9
	  memcpy( buf,
 80083e8:	461a      	mov	r2, r3
 80083ea:	68b8      	ldr	r0, [r7, #8]
 80083ec:	f000 fcc8 	bl	8008d80 <memcpy>
	        );

  return (USBD_OK);
 80083f0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3710      	adds	r7, #16
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}

080083fa <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80083fa:	b580      	push	{r7, lr}
 80083fc:	b086      	sub	sp, #24
 80083fe:	af00      	add	r7, sp, #0
 8008400:	60b9      	str	r1, [r7, #8]
 8008402:	607a      	str	r2, [r7, #4]
 8008404:	461a      	mov	r2, r3
 8008406:	4603      	mov	r3, r0
 8008408:	73fb      	strb	r3, [r7, #15]
 800840a:	4613      	mov	r3, r2
 800840c:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	 HAL_StatusTypeDef ret = write_data_to_flash(buf, blk_addr, blk_len);
 800840e:	89bb      	ldrh	r3, [r7, #12]
 8008410:	461a      	mov	r2, r3
 8008412:	6879      	ldr	r1, [r7, #4]
 8008414:	68b8      	ldr	r0, [r7, #8]
 8008416:	f7ff feb5 	bl	8008184 <write_data_to_flash>
 800841a:	4603      	mov	r3, r0
 800841c:	75fb      	strb	r3, [r7, #23]
	 return (ret == HAL_OK) ? USBD_OK : USBD_FAIL;
 800841e:	7dfb      	ldrb	r3, [r7, #23]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d101      	bne.n	8008428 <STORAGE_Write_FS+0x2e>
 8008424:	2300      	movs	r3, #0
 8008426:	e000      	b.n	800842a <STORAGE_Write_FS+0x30>
 8008428:	2303      	movs	r3, #3
//  return (USBD_OK);
  /* USER CODE END 7 */
}
 800842a:	4618      	mov	r0, r3
 800842c:	3718      	adds	r7, #24
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}

08008432 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8008432:	b480      	push	{r7}
 8008434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8008436:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8008438:	4618      	mov	r0, r3
 800843a:	46bd      	mov	sp, r7
 800843c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008440:	4770      	bx	lr
	...

08008444 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b0ac      	sub	sp, #176	; 0xb0
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800844c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008450:	2200      	movs	r2, #0
 8008452:	601a      	str	r2, [r3, #0]
 8008454:	605a      	str	r2, [r3, #4]
 8008456:	609a      	str	r2, [r3, #8]
 8008458:	60da      	str	r2, [r3, #12]
 800845a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800845c:	f107 0314 	add.w	r3, r7, #20
 8008460:	2288      	movs	r2, #136	; 0x88
 8008462:	2100      	movs	r1, #0
 8008464:	4618      	mov	r0, r3
 8008466:	f000 fc99 	bl	8008d9c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008472:	d173      	bne.n	800855c <HAL_PCD_MspInit+0x118>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8008474:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008478:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800847a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800847e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8008482:	2303      	movs	r3, #3
 8008484:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8008486:	2301      	movs	r3, #1
 8008488:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 800848a:	230c      	movs	r3, #12
 800848c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800848e:	2307      	movs	r3, #7
 8008490:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8008492:	2302      	movs	r3, #2
 8008494:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8008496:	2302      	movs	r3, #2
 8008498:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800849a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800849e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80084a0:	f107 0314 	add.w	r3, r7, #20
 80084a4:	4618      	mov	r0, r3
 80084a6:	f7fa fdcb 	bl	8003040 <HAL_RCCEx_PeriphCLKConfig>
 80084aa:	4603      	mov	r3, r0
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d001      	beq.n	80084b4 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80084b0:	f7f7 ff08 	bl	80002c4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80084b4:	4b2b      	ldr	r3, [pc, #172]	; (8008564 <HAL_PCD_MspInit+0x120>)
 80084b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084b8:	4a2a      	ldr	r2, [pc, #168]	; (8008564 <HAL_PCD_MspInit+0x120>)
 80084ba:	f043 0301 	orr.w	r3, r3, #1
 80084be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80084c0:	4b28      	ldr	r3, [pc, #160]	; (8008564 <HAL_PCD_MspInit+0x120>)
 80084c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084c4:	f003 0301 	and.w	r3, r3, #1
 80084c8:	613b      	str	r3, [r7, #16]
 80084ca:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80084cc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80084d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084d4:	2302      	movs	r3, #2
 80084d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084da:	2300      	movs	r3, #0
 80084dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80084e0:	2303      	movs	r3, #3
 80084e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80084e6:	230a      	movs	r3, #10
 80084e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80084ec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80084f0:	4619      	mov	r1, r3
 80084f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80084f6:	f7f8 fbc5 	bl	8000c84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80084fa:	4b1a      	ldr	r3, [pc, #104]	; (8008564 <HAL_PCD_MspInit+0x120>)
 80084fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084fe:	4a19      	ldr	r2, [pc, #100]	; (8008564 <HAL_PCD_MspInit+0x120>)
 8008500:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008504:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008506:	4b17      	ldr	r3, [pc, #92]	; (8008564 <HAL_PCD_MspInit+0x120>)
 8008508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800850a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800850e:	60fb      	str	r3, [r7, #12]
 8008510:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008512:	4b14      	ldr	r3, [pc, #80]	; (8008564 <HAL_PCD_MspInit+0x120>)
 8008514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800851a:	2b00      	cmp	r3, #0
 800851c:	d114      	bne.n	8008548 <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800851e:	4b11      	ldr	r3, [pc, #68]	; (8008564 <HAL_PCD_MspInit+0x120>)
 8008520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008522:	4a10      	ldr	r2, [pc, #64]	; (8008564 <HAL_PCD_MspInit+0x120>)
 8008524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008528:	6593      	str	r3, [r2, #88]	; 0x58
 800852a:	4b0e      	ldr	r3, [pc, #56]	; (8008564 <HAL_PCD_MspInit+0x120>)
 800852c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800852e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008532:	60bb      	str	r3, [r7, #8]
 8008534:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8008536:	f7f9 ff9f 	bl	8002478 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800853a:	4b0a      	ldr	r3, [pc, #40]	; (8008564 <HAL_PCD_MspInit+0x120>)
 800853c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800853e:	4a09      	ldr	r2, [pc, #36]	; (8008564 <HAL_PCD_MspInit+0x120>)
 8008540:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008544:	6593      	str	r3, [r2, #88]	; 0x58
 8008546:	e001      	b.n	800854c <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8008548:	f7f9 ff96 	bl	8002478 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800854c:	2200      	movs	r2, #0
 800854e:	2100      	movs	r1, #0
 8008550:	2043      	movs	r0, #67	; 0x43
 8008552:	f7f8 f8cc 	bl	80006ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008556:	2043      	movs	r0, #67	; 0x43
 8008558:	f7f8 f8e5 	bl	8000726 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800855c:	bf00      	nop
 800855e:	37b0      	adds	r7, #176	; 0xb0
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}
 8008564:	40021000 	.word	0x40021000

08008568 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b082      	sub	sp, #8
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800857c:	4619      	mov	r1, r3
 800857e:	4610      	mov	r0, r2
 8008580:	f7fe fbdb 	bl	8006d3a <USBD_LL_SetupStage>
}
 8008584:	bf00      	nop
 8008586:	3708      	adds	r7, #8
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b082      	sub	sp, #8
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	460b      	mov	r3, r1
 8008596:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800859e:	78fa      	ldrb	r2, [r7, #3]
 80085a0:	6879      	ldr	r1, [r7, #4]
 80085a2:	4613      	mov	r3, r2
 80085a4:	00db      	lsls	r3, r3, #3
 80085a6:	4413      	add	r3, r2
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	440b      	add	r3, r1
 80085ac:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80085b0:	681a      	ldr	r2, [r3, #0]
 80085b2:	78fb      	ldrb	r3, [r7, #3]
 80085b4:	4619      	mov	r1, r3
 80085b6:	f7fe fc15 	bl	8006de4 <USBD_LL_DataOutStage>
}
 80085ba:	bf00      	nop
 80085bc:	3708      	adds	r7, #8
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}

080085c2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085c2:	b580      	push	{r7, lr}
 80085c4:	b082      	sub	sp, #8
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	6078      	str	r0, [r7, #4]
 80085ca:	460b      	mov	r3, r1
 80085cc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80085d4:	78fa      	ldrb	r2, [r7, #3]
 80085d6:	6879      	ldr	r1, [r7, #4]
 80085d8:	4613      	mov	r3, r2
 80085da:	00db      	lsls	r3, r3, #3
 80085dc:	4413      	add	r3, r2
 80085de:	009b      	lsls	r3, r3, #2
 80085e0:	440b      	add	r3, r1
 80085e2:	334c      	adds	r3, #76	; 0x4c
 80085e4:	681a      	ldr	r2, [r3, #0]
 80085e6:	78fb      	ldrb	r3, [r7, #3]
 80085e8:	4619      	mov	r1, r3
 80085ea:	f7fe fc5e 	bl	8006eaa <USBD_LL_DataInStage>
}
 80085ee:	bf00      	nop
 80085f0:	3708      	adds	r7, #8
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}

080085f6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085f6:	b580      	push	{r7, lr}
 80085f8:	b082      	sub	sp, #8
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008604:	4618      	mov	r0, r3
 8008606:	f7fe fd72 	bl	80070ee <USBD_LL_SOF>
}
 800860a:	bf00      	nop
 800860c:	3708      	adds	r7, #8
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}

08008612 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008612:	b580      	push	{r7, lr}
 8008614:	b084      	sub	sp, #16
 8008616:	af00      	add	r7, sp, #0
 8008618:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800861a:	2301      	movs	r3, #1
 800861c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	68db      	ldr	r3, [r3, #12]
 8008622:	2b02      	cmp	r3, #2
 8008624:	d001      	beq.n	800862a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008626:	f7f7 fe4d 	bl	80002c4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008630:	7bfa      	ldrb	r2, [r7, #15]
 8008632:	4611      	mov	r1, r2
 8008634:	4618      	mov	r0, r3
 8008636:	f7fe fd1c 	bl	8007072 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008640:	4618      	mov	r0, r3
 8008642:	f7fe fcc8 	bl	8006fd6 <USBD_LL_Reset>
}
 8008646:	bf00      	nop
 8008648:	3710      	adds	r7, #16
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}
	...

08008650 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b082      	sub	sp, #8
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	687a      	ldr	r2, [r7, #4]
 8008664:	6812      	ldr	r2, [r2, #0]
 8008666:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800866a:	f043 0301 	orr.w	r3, r3, #1
 800866e:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008676:	4618      	mov	r0, r3
 8008678:	f7fe fd0b 	bl	8007092 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6a1b      	ldr	r3, [r3, #32]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d005      	beq.n	8008690 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008684:	4b04      	ldr	r3, [pc, #16]	; (8008698 <HAL_PCD_SuspendCallback+0x48>)
 8008686:	691b      	ldr	r3, [r3, #16]
 8008688:	4a03      	ldr	r2, [pc, #12]	; (8008698 <HAL_PCD_SuspendCallback+0x48>)
 800868a:	f043 0306 	orr.w	r3, r3, #6
 800868e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008690:	bf00      	nop
 8008692:	3708      	adds	r7, #8
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}
 8008698:	e000ed00 	.word	0xe000ed00

0800869c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b082      	sub	sp, #8
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	6812      	ldr	r2, [r2, #0]
 80086b2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80086b6:	f023 0301 	bic.w	r3, r3, #1
 80086ba:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6a1b      	ldr	r3, [r3, #32]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d007      	beq.n	80086d4 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80086c4:	4b08      	ldr	r3, [pc, #32]	; (80086e8 <HAL_PCD_ResumeCallback+0x4c>)
 80086c6:	691b      	ldr	r3, [r3, #16]
 80086c8:	4a07      	ldr	r2, [pc, #28]	; (80086e8 <HAL_PCD_ResumeCallback+0x4c>)
 80086ca:	f023 0306 	bic.w	r3, r3, #6
 80086ce:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80086d0:	f000 fb2c 	bl	8008d2c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80086da:	4618      	mov	r0, r3
 80086dc:	f7fe fcef 	bl	80070be <USBD_LL_Resume>
}
 80086e0:	bf00      	nop
 80086e2:	3708      	adds	r7, #8
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}
 80086e8:	e000ed00 	.word	0xe000ed00

080086ec <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b082      	sub	sp, #8
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	460b      	mov	r3, r1
 80086f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80086fe:	78fa      	ldrb	r2, [r7, #3]
 8008700:	4611      	mov	r1, r2
 8008702:	4618      	mov	r0, r3
 8008704:	f7fe fd3b 	bl	800717e <USBD_LL_IsoOUTIncomplete>
}
 8008708:	bf00      	nop
 800870a:	3708      	adds	r7, #8
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}

08008710 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b082      	sub	sp, #8
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	460b      	mov	r3, r1
 800871a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008722:	78fa      	ldrb	r2, [r7, #3]
 8008724:	4611      	mov	r1, r2
 8008726:	4618      	mov	r0, r3
 8008728:	f7fe fd03 	bl	8007132 <USBD_LL_IsoINIncomplete>
}
 800872c:	bf00      	nop
 800872e:	3708      	adds	r7, #8
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}

08008734 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b082      	sub	sp, #8
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008742:	4618      	mov	r0, r3
 8008744:	f7fe fd41 	bl	80071ca <USBD_LL_DevConnected>
}
 8008748:	bf00      	nop
 800874a:	3708      	adds	r7, #8
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}

08008750 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b082      	sub	sp, #8
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800875e:	4618      	mov	r0, r3
 8008760:	f7fe fd3e 	bl	80071e0 <USBD_LL_DevDisconnected>
}
 8008764:	bf00      	nop
 8008766:	3708      	adds	r7, #8
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b082      	sub	sp, #8
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	781b      	ldrb	r3, [r3, #0]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d13c      	bne.n	80087f6 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800877c:	4a20      	ldr	r2, [pc, #128]	; (8008800 <USBD_LL_Init+0x94>)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	4a1e      	ldr	r2, [pc, #120]	; (8008800 <USBD_LL_Init+0x94>)
 8008788:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800878c:	4b1c      	ldr	r3, [pc, #112]	; (8008800 <USBD_LL_Init+0x94>)
 800878e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008792:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8008794:	4b1a      	ldr	r3, [pc, #104]	; (8008800 <USBD_LL_Init+0x94>)
 8008796:	2206      	movs	r2, #6
 8008798:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800879a:	4b19      	ldr	r3, [pc, #100]	; (8008800 <USBD_LL_Init+0x94>)
 800879c:	2202      	movs	r2, #2
 800879e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80087a0:	4b17      	ldr	r3, [pc, #92]	; (8008800 <USBD_LL_Init+0x94>)
 80087a2:	2202      	movs	r2, #2
 80087a4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80087a6:	4b16      	ldr	r3, [pc, #88]	; (8008800 <USBD_LL_Init+0x94>)
 80087a8:	2200      	movs	r2, #0
 80087aa:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80087ac:	4b14      	ldr	r3, [pc, #80]	; (8008800 <USBD_LL_Init+0x94>)
 80087ae:	2200      	movs	r2, #0
 80087b0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80087b2:	4b13      	ldr	r3, [pc, #76]	; (8008800 <USBD_LL_Init+0x94>)
 80087b4:	2200      	movs	r2, #0
 80087b6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80087b8:	4b11      	ldr	r3, [pc, #68]	; (8008800 <USBD_LL_Init+0x94>)
 80087ba:	2200      	movs	r2, #0
 80087bc:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80087be:	4b10      	ldr	r3, [pc, #64]	; (8008800 <USBD_LL_Init+0x94>)
 80087c0:	2200      	movs	r2, #0
 80087c2:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80087c4:	4b0e      	ldr	r3, [pc, #56]	; (8008800 <USBD_LL_Init+0x94>)
 80087c6:	2200      	movs	r2, #0
 80087c8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80087ca:	480d      	ldr	r0, [pc, #52]	; (8008800 <USBD_LL_Init+0x94>)
 80087cc:	f7f8 fc04 	bl	8000fd8 <HAL_PCD_Init>
 80087d0:	4603      	mov	r3, r0
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d001      	beq.n	80087da <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80087d6:	f7f7 fd75 	bl	80002c4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80087da:	2180      	movs	r1, #128	; 0x80
 80087dc:	4808      	ldr	r0, [pc, #32]	; (8008800 <USBD_LL_Init+0x94>)
 80087de:	f7f9 fdb2 	bl	8002346 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80087e2:	2240      	movs	r2, #64	; 0x40
 80087e4:	2100      	movs	r1, #0
 80087e6:	4806      	ldr	r0, [pc, #24]	; (8008800 <USBD_LL_Init+0x94>)
 80087e8:	f7f9 fd66 	bl	80022b8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80087ec:	2280      	movs	r2, #128	; 0x80
 80087ee:	2101      	movs	r1, #1
 80087f0:	4803      	ldr	r0, [pc, #12]	; (8008800 <USBD_LL_Init+0x94>)
 80087f2:	f7f9 fd61 	bl	80022b8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80087f6:	2300      	movs	r3, #0
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3708      	adds	r7, #8
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}
 8008800:	20000688 	.word	0x20000688

08008804 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b084      	sub	sp, #16
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800880c:	2300      	movs	r3, #0
 800880e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008810:	2300      	movs	r3, #0
 8008812:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800881a:	4618      	mov	r0, r3
 800881c:	f7f8 fd00 	bl	8001220 <HAL_PCD_Start>
 8008820:	4603      	mov	r3, r0
 8008822:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008824:	7bbb      	ldrb	r3, [r7, #14]
 8008826:	2b03      	cmp	r3, #3
 8008828:	d816      	bhi.n	8008858 <USBD_LL_Start+0x54>
 800882a:	a201      	add	r2, pc, #4	; (adr r2, 8008830 <USBD_LL_Start+0x2c>)
 800882c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008830:	08008841 	.word	0x08008841
 8008834:	08008847 	.word	0x08008847
 8008838:	0800884d 	.word	0x0800884d
 800883c:	08008853 	.word	0x08008853
    case HAL_OK :
      usb_status = USBD_OK;
 8008840:	2300      	movs	r3, #0
 8008842:	73fb      	strb	r3, [r7, #15]
    break;
 8008844:	e00b      	b.n	800885e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008846:	2303      	movs	r3, #3
 8008848:	73fb      	strb	r3, [r7, #15]
    break;
 800884a:	e008      	b.n	800885e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800884c:	2301      	movs	r3, #1
 800884e:	73fb      	strb	r3, [r7, #15]
    break;
 8008850:	e005      	b.n	800885e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008852:	2303      	movs	r3, #3
 8008854:	73fb      	strb	r3, [r7, #15]
    break;
 8008856:	e002      	b.n	800885e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8008858:	2303      	movs	r3, #3
 800885a:	73fb      	strb	r3, [r7, #15]
    break;
 800885c:	bf00      	nop
  }
  return usb_status;
 800885e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008860:	4618      	mov	r0, r3
 8008862:	3710      	adds	r7, #16
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}

08008868 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b084      	sub	sp, #16
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	4608      	mov	r0, r1
 8008872:	4611      	mov	r1, r2
 8008874:	461a      	mov	r2, r3
 8008876:	4603      	mov	r3, r0
 8008878:	70fb      	strb	r3, [r7, #3]
 800887a:	460b      	mov	r3, r1
 800887c:	70bb      	strb	r3, [r7, #2]
 800887e:	4613      	mov	r3, r2
 8008880:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008882:	2300      	movs	r3, #0
 8008884:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008886:	2300      	movs	r3, #0
 8008888:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008890:	78bb      	ldrb	r3, [r7, #2]
 8008892:	883a      	ldrh	r2, [r7, #0]
 8008894:	78f9      	ldrb	r1, [r7, #3]
 8008896:	f7f9 f9aa 	bl	8001bee <HAL_PCD_EP_Open>
 800889a:	4603      	mov	r3, r0
 800889c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800889e:	7bbb      	ldrb	r3, [r7, #14]
 80088a0:	2b03      	cmp	r3, #3
 80088a2:	d817      	bhi.n	80088d4 <USBD_LL_OpenEP+0x6c>
 80088a4:	a201      	add	r2, pc, #4	; (adr r2, 80088ac <USBD_LL_OpenEP+0x44>)
 80088a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088aa:	bf00      	nop
 80088ac:	080088bd 	.word	0x080088bd
 80088b0:	080088c3 	.word	0x080088c3
 80088b4:	080088c9 	.word	0x080088c9
 80088b8:	080088cf 	.word	0x080088cf
    case HAL_OK :
      usb_status = USBD_OK;
 80088bc:	2300      	movs	r3, #0
 80088be:	73fb      	strb	r3, [r7, #15]
    break;
 80088c0:	e00b      	b.n	80088da <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80088c2:	2303      	movs	r3, #3
 80088c4:	73fb      	strb	r3, [r7, #15]
    break;
 80088c6:	e008      	b.n	80088da <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80088c8:	2301      	movs	r3, #1
 80088ca:	73fb      	strb	r3, [r7, #15]
    break;
 80088cc:	e005      	b.n	80088da <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80088ce:	2303      	movs	r3, #3
 80088d0:	73fb      	strb	r3, [r7, #15]
    break;
 80088d2:	e002      	b.n	80088da <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 80088d4:	2303      	movs	r3, #3
 80088d6:	73fb      	strb	r3, [r7, #15]
    break;
 80088d8:	bf00      	nop
  }
  return usb_status;
 80088da:	7bfb      	ldrb	r3, [r7, #15]
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3710      	adds	r7, #16
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b084      	sub	sp, #16
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	460b      	mov	r3, r1
 80088ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088f0:	2300      	movs	r3, #0
 80088f2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088f4:	2300      	movs	r3, #0
 80088f6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80088fe:	78fa      	ldrb	r2, [r7, #3]
 8008900:	4611      	mov	r1, r2
 8008902:	4618      	mov	r0, r3
 8008904:	f7f9 f9db 	bl	8001cbe <HAL_PCD_EP_Close>
 8008908:	4603      	mov	r3, r0
 800890a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800890c:	7bbb      	ldrb	r3, [r7, #14]
 800890e:	2b03      	cmp	r3, #3
 8008910:	d816      	bhi.n	8008940 <USBD_LL_CloseEP+0x5c>
 8008912:	a201      	add	r2, pc, #4	; (adr r2, 8008918 <USBD_LL_CloseEP+0x34>)
 8008914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008918:	08008929 	.word	0x08008929
 800891c:	0800892f 	.word	0x0800892f
 8008920:	08008935 	.word	0x08008935
 8008924:	0800893b 	.word	0x0800893b
    case HAL_OK :
      usb_status = USBD_OK;
 8008928:	2300      	movs	r3, #0
 800892a:	73fb      	strb	r3, [r7, #15]
    break;
 800892c:	e00b      	b.n	8008946 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800892e:	2303      	movs	r3, #3
 8008930:	73fb      	strb	r3, [r7, #15]
    break;
 8008932:	e008      	b.n	8008946 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008934:	2301      	movs	r3, #1
 8008936:	73fb      	strb	r3, [r7, #15]
    break;
 8008938:	e005      	b.n	8008946 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800893a:	2303      	movs	r3, #3
 800893c:	73fb      	strb	r3, [r7, #15]
    break;
 800893e:	e002      	b.n	8008946 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008940:	2303      	movs	r3, #3
 8008942:	73fb      	strb	r3, [r7, #15]
    break;
 8008944:	bf00      	nop
  }
  return usb_status;
 8008946:	7bfb      	ldrb	r3, [r7, #15]
}
 8008948:	4618      	mov	r0, r3
 800894a:	3710      	adds	r7, #16
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b084      	sub	sp, #16
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	460b      	mov	r3, r1
 800895a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800895c:	2300      	movs	r3, #0
 800895e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008960:	2300      	movs	r3, #0
 8008962:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800896a:	78fa      	ldrb	r2, [r7, #3]
 800896c:	4611      	mov	r1, r2
 800896e:	4618      	mov	r0, r3
 8008970:	f7f9 fb6b 	bl	800204a <HAL_PCD_EP_Flush>
 8008974:	4603      	mov	r3, r0
 8008976:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008978:	7bbb      	ldrb	r3, [r7, #14]
 800897a:	2b03      	cmp	r3, #3
 800897c:	d816      	bhi.n	80089ac <USBD_LL_FlushEP+0x5c>
 800897e:	a201      	add	r2, pc, #4	; (adr r2, 8008984 <USBD_LL_FlushEP+0x34>)
 8008980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008984:	08008995 	.word	0x08008995
 8008988:	0800899b 	.word	0x0800899b
 800898c:	080089a1 	.word	0x080089a1
 8008990:	080089a7 	.word	0x080089a7
    case HAL_OK :
      usb_status = USBD_OK;
 8008994:	2300      	movs	r3, #0
 8008996:	73fb      	strb	r3, [r7, #15]
    break;
 8008998:	e00b      	b.n	80089b2 <USBD_LL_FlushEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800899a:	2303      	movs	r3, #3
 800899c:	73fb      	strb	r3, [r7, #15]
    break;
 800899e:	e008      	b.n	80089b2 <USBD_LL_FlushEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80089a0:	2301      	movs	r3, #1
 80089a2:	73fb      	strb	r3, [r7, #15]
    break;
 80089a4:	e005      	b.n	80089b2 <USBD_LL_FlushEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80089a6:	2303      	movs	r3, #3
 80089a8:	73fb      	strb	r3, [r7, #15]
    break;
 80089aa:	e002      	b.n	80089b2 <USBD_LL_FlushEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80089ac:	2303      	movs	r3, #3
 80089ae:	73fb      	strb	r3, [r7, #15]
    break;
 80089b0:	bf00      	nop
  }
  return usb_status;
 80089b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3710      	adds	r7, #16
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b084      	sub	sp, #16
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	460b      	mov	r3, r1
 80089c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089c8:	2300      	movs	r3, #0
 80089ca:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089cc:	2300      	movs	r3, #0
 80089ce:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80089d6:	78fa      	ldrb	r2, [r7, #3]
 80089d8:	4611      	mov	r1, r2
 80089da:	4618      	mov	r0, r3
 80089dc:	f7f9 fa4c 	bl	8001e78 <HAL_PCD_EP_SetStall>
 80089e0:	4603      	mov	r3, r0
 80089e2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80089e4:	7bbb      	ldrb	r3, [r7, #14]
 80089e6:	2b03      	cmp	r3, #3
 80089e8:	d816      	bhi.n	8008a18 <USBD_LL_StallEP+0x5c>
 80089ea:	a201      	add	r2, pc, #4	; (adr r2, 80089f0 <USBD_LL_StallEP+0x34>)
 80089ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089f0:	08008a01 	.word	0x08008a01
 80089f4:	08008a07 	.word	0x08008a07
 80089f8:	08008a0d 	.word	0x08008a0d
 80089fc:	08008a13 	.word	0x08008a13
    case HAL_OK :
      usb_status = USBD_OK;
 8008a00:	2300      	movs	r3, #0
 8008a02:	73fb      	strb	r3, [r7, #15]
    break;
 8008a04:	e00b      	b.n	8008a1e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008a06:	2303      	movs	r3, #3
 8008a08:	73fb      	strb	r3, [r7, #15]
    break;
 8008a0a:	e008      	b.n	8008a1e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	73fb      	strb	r3, [r7, #15]
    break;
 8008a10:	e005      	b.n	8008a1e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008a12:	2303      	movs	r3, #3
 8008a14:	73fb      	strb	r3, [r7, #15]
    break;
 8008a16:	e002      	b.n	8008a1e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008a18:	2303      	movs	r3, #3
 8008a1a:	73fb      	strb	r3, [r7, #15]
    break;
 8008a1c:	bf00      	nop
  }
  return usb_status;
 8008a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3710      	adds	r7, #16
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}

08008a28 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b084      	sub	sp, #16
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
 8008a30:	460b      	mov	r3, r1
 8008a32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a34:	2300      	movs	r3, #0
 8008a36:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008a42:	78fa      	ldrb	r2, [r7, #3]
 8008a44:	4611      	mov	r1, r2
 8008a46:	4618      	mov	r0, r3
 8008a48:	f7f9 fa78 	bl	8001f3c <HAL_PCD_EP_ClrStall>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008a50:	7bbb      	ldrb	r3, [r7, #14]
 8008a52:	2b03      	cmp	r3, #3
 8008a54:	d816      	bhi.n	8008a84 <USBD_LL_ClearStallEP+0x5c>
 8008a56:	a201      	add	r2, pc, #4	; (adr r2, 8008a5c <USBD_LL_ClearStallEP+0x34>)
 8008a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a5c:	08008a6d 	.word	0x08008a6d
 8008a60:	08008a73 	.word	0x08008a73
 8008a64:	08008a79 	.word	0x08008a79
 8008a68:	08008a7f 	.word	0x08008a7f
    case HAL_OK :
      usb_status = USBD_OK;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	73fb      	strb	r3, [r7, #15]
    break;
 8008a70:	e00b      	b.n	8008a8a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008a72:	2303      	movs	r3, #3
 8008a74:	73fb      	strb	r3, [r7, #15]
    break;
 8008a76:	e008      	b.n	8008a8a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008a78:	2301      	movs	r3, #1
 8008a7a:	73fb      	strb	r3, [r7, #15]
    break;
 8008a7c:	e005      	b.n	8008a8a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008a7e:	2303      	movs	r3, #3
 8008a80:	73fb      	strb	r3, [r7, #15]
    break;
 8008a82:	e002      	b.n	8008a8a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008a84:	2303      	movs	r3, #3
 8008a86:	73fb      	strb	r3, [r7, #15]
    break;
 8008a88:	bf00      	nop
  }
  return usb_status;
 8008a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3710      	adds	r7, #16
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}

08008a94 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b085      	sub	sp, #20
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	460b      	mov	r3, r1
 8008a9e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008aa6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008aa8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	da0b      	bge.n	8008ac8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008ab0:	78fb      	ldrb	r3, [r7, #3]
 8008ab2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ab6:	68f9      	ldr	r1, [r7, #12]
 8008ab8:	4613      	mov	r3, r2
 8008aba:	00db      	lsls	r3, r3, #3
 8008abc:	4413      	add	r3, r2
 8008abe:	009b      	lsls	r3, r3, #2
 8008ac0:	440b      	add	r3, r1
 8008ac2:	333e      	adds	r3, #62	; 0x3e
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	e00b      	b.n	8008ae0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008ac8:	78fb      	ldrb	r3, [r7, #3]
 8008aca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ace:	68f9      	ldr	r1, [r7, #12]
 8008ad0:	4613      	mov	r3, r2
 8008ad2:	00db      	lsls	r3, r3, #3
 8008ad4:	4413      	add	r3, r2
 8008ad6:	009b      	lsls	r3, r3, #2
 8008ad8:	440b      	add	r3, r1
 8008ada:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008ade:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3714      	adds	r7, #20
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr

08008aec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b084      	sub	sp, #16
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	460b      	mov	r3, r1
 8008af6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008af8:	2300      	movs	r3, #0
 8008afa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008afc:	2300      	movs	r3, #0
 8008afe:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b06:	78fa      	ldrb	r2, [r7, #3]
 8008b08:	4611      	mov	r1, r2
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f7f9 f84a 	bl	8001ba4 <HAL_PCD_SetAddress>
 8008b10:	4603      	mov	r3, r0
 8008b12:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008b14:	7bbb      	ldrb	r3, [r7, #14]
 8008b16:	2b03      	cmp	r3, #3
 8008b18:	d816      	bhi.n	8008b48 <USBD_LL_SetUSBAddress+0x5c>
 8008b1a:	a201      	add	r2, pc, #4	; (adr r2, 8008b20 <USBD_LL_SetUSBAddress+0x34>)
 8008b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b20:	08008b31 	.word	0x08008b31
 8008b24:	08008b37 	.word	0x08008b37
 8008b28:	08008b3d 	.word	0x08008b3d
 8008b2c:	08008b43 	.word	0x08008b43
    case HAL_OK :
      usb_status = USBD_OK;
 8008b30:	2300      	movs	r3, #0
 8008b32:	73fb      	strb	r3, [r7, #15]
    break;
 8008b34:	e00b      	b.n	8008b4e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008b36:	2303      	movs	r3, #3
 8008b38:	73fb      	strb	r3, [r7, #15]
    break;
 8008b3a:	e008      	b.n	8008b4e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	73fb      	strb	r3, [r7, #15]
    break;
 8008b40:	e005      	b.n	8008b4e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008b42:	2303      	movs	r3, #3
 8008b44:	73fb      	strb	r3, [r7, #15]
    break;
 8008b46:	e002      	b.n	8008b4e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8008b48:	2303      	movs	r3, #3
 8008b4a:	73fb      	strb	r3, [r7, #15]
    break;
 8008b4c:	bf00      	nop
  }
  return usb_status;
 8008b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3710      	adds	r7, #16
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b086      	sub	sp, #24
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	60f8      	str	r0, [r7, #12]
 8008b60:	607a      	str	r2, [r7, #4]
 8008b62:	603b      	str	r3, [r7, #0]
 8008b64:	460b      	mov	r3, r1
 8008b66:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008b76:	7af9      	ldrb	r1, [r7, #11]
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	687a      	ldr	r2, [r7, #4]
 8008b7c:	f7f9 f93f 	bl	8001dfe <HAL_PCD_EP_Transmit>
 8008b80:	4603      	mov	r3, r0
 8008b82:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8008b84:	7dbb      	ldrb	r3, [r7, #22]
 8008b86:	2b03      	cmp	r3, #3
 8008b88:	d816      	bhi.n	8008bb8 <USBD_LL_Transmit+0x60>
 8008b8a:	a201      	add	r2, pc, #4	; (adr r2, 8008b90 <USBD_LL_Transmit+0x38>)
 8008b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b90:	08008ba1 	.word	0x08008ba1
 8008b94:	08008ba7 	.word	0x08008ba7
 8008b98:	08008bad 	.word	0x08008bad
 8008b9c:	08008bb3 	.word	0x08008bb3
    case HAL_OK :
      usb_status = USBD_OK;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	75fb      	strb	r3, [r7, #23]
    break;
 8008ba4:	e00b      	b.n	8008bbe <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008ba6:	2303      	movs	r3, #3
 8008ba8:	75fb      	strb	r3, [r7, #23]
    break;
 8008baa:	e008      	b.n	8008bbe <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008bac:	2301      	movs	r3, #1
 8008bae:	75fb      	strb	r3, [r7, #23]
    break;
 8008bb0:	e005      	b.n	8008bbe <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008bb2:	2303      	movs	r3, #3
 8008bb4:	75fb      	strb	r3, [r7, #23]
    break;
 8008bb6:	e002      	b.n	8008bbe <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8008bb8:	2303      	movs	r3, #3
 8008bba:	75fb      	strb	r3, [r7, #23]
    break;
 8008bbc:	bf00      	nop
  }
  return usb_status;
 8008bbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3718      	adds	r7, #24
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b086      	sub	sp, #24
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	60f8      	str	r0, [r7, #12]
 8008bd0:	607a      	str	r2, [r7, #4]
 8008bd2:	603b      	str	r3, [r7, #0]
 8008bd4:	460b      	mov	r3, r1
 8008bd6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008be6:	7af9      	ldrb	r1, [r7, #11]
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	687a      	ldr	r2, [r7, #4]
 8008bec:	f7f9 f8b1 	bl	8001d52 <HAL_PCD_EP_Receive>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8008bf4:	7dbb      	ldrb	r3, [r7, #22]
 8008bf6:	2b03      	cmp	r3, #3
 8008bf8:	d816      	bhi.n	8008c28 <USBD_LL_PrepareReceive+0x60>
 8008bfa:	a201      	add	r2, pc, #4	; (adr r2, 8008c00 <USBD_LL_PrepareReceive+0x38>)
 8008bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c00:	08008c11 	.word	0x08008c11
 8008c04:	08008c17 	.word	0x08008c17
 8008c08:	08008c1d 	.word	0x08008c1d
 8008c0c:	08008c23 	.word	0x08008c23
    case HAL_OK :
      usb_status = USBD_OK;
 8008c10:	2300      	movs	r3, #0
 8008c12:	75fb      	strb	r3, [r7, #23]
    break;
 8008c14:	e00b      	b.n	8008c2e <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008c16:	2303      	movs	r3, #3
 8008c18:	75fb      	strb	r3, [r7, #23]
    break;
 8008c1a:	e008      	b.n	8008c2e <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	75fb      	strb	r3, [r7, #23]
    break;
 8008c20:	e005      	b.n	8008c2e <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008c22:	2303      	movs	r3, #3
 8008c24:	75fb      	strb	r3, [r7, #23]
    break;
 8008c26:	e002      	b.n	8008c2e <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8008c28:	2303      	movs	r3, #3
 8008c2a:	75fb      	strb	r3, [r7, #23]
    break;
 8008c2c:	bf00      	nop
  }
  return usb_status;
 8008c2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3718      	adds	r7, #24
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b082      	sub	sp, #8
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	460b      	mov	r3, r1
 8008c42:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008c4a:	78fa      	ldrb	r2, [r7, #3]
 8008c4c:	4611      	mov	r1, r2
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f7f9 f8bd 	bl	8001dce <HAL_PCD_EP_GetRxCount>
 8008c54:	4603      	mov	r3, r0
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3708      	adds	r7, #8
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}
	...

08008c60 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b082      	sub	sp, #8
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
 8008c68:	460b      	mov	r3, r1
 8008c6a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008c6c:	78fb      	ldrb	r3, [r7, #3]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d002      	beq.n	8008c78 <HAL_PCDEx_LPM_Callback+0x18>
 8008c72:	2b01      	cmp	r3, #1
 8008c74:	d01f      	beq.n	8008cb6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8008c76:	e03b      	b.n	8008cf0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6a1b      	ldr	r3, [r3, #32]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d007      	beq.n	8008c90 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8008c80:	f000 f854 	bl	8008d2c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008c84:	4b1c      	ldr	r3, [pc, #112]	; (8008cf8 <HAL_PCDEx_LPM_Callback+0x98>)
 8008c86:	691b      	ldr	r3, [r3, #16]
 8008c88:	4a1b      	ldr	r2, [pc, #108]	; (8008cf8 <HAL_PCDEx_LPM_Callback+0x98>)
 8008c8a:	f023 0306 	bic.w	r3, r3, #6
 8008c8e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	687a      	ldr	r2, [r7, #4]
 8008c9c:	6812      	ldr	r2, [r2, #0]
 8008c9e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008ca2:	f023 0301 	bic.w	r3, r3, #1
 8008ca6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f7fe fa05 	bl	80070be <USBD_LL_Resume>
    break;
 8008cb4:	e01c      	b.n	8008cf0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	687a      	ldr	r2, [r7, #4]
 8008cc2:	6812      	ldr	r2, [r2, #0]
 8008cc4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008cc8:	f043 0301 	orr.w	r3, r3, #1
 8008ccc:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f7fe f9dc 	bl	8007092 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6a1b      	ldr	r3, [r3, #32]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d005      	beq.n	8008cee <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008ce2:	4b05      	ldr	r3, [pc, #20]	; (8008cf8 <HAL_PCDEx_LPM_Callback+0x98>)
 8008ce4:	691b      	ldr	r3, [r3, #16]
 8008ce6:	4a04      	ldr	r2, [pc, #16]	; (8008cf8 <HAL_PCDEx_LPM_Callback+0x98>)
 8008ce8:	f043 0306 	orr.w	r3, r3, #6
 8008cec:	6113      	str	r3, [r2, #16]
    break;
 8008cee:	bf00      	nop
}
 8008cf0:	bf00      	nop
 8008cf2:	3708      	adds	r7, #8
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}
 8008cf8:	e000ed00 	.word	0xe000ed00

08008cfc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b083      	sub	sp, #12
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008d04:	4b03      	ldr	r3, [pc, #12]	; (8008d14 <USBD_static_malloc+0x18>)
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	370c      	adds	r7, #12
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d10:	4770      	bx	lr
 8008d12:	bf00      	nop
 8008d14:	20000b94 	.word	0x20000b94

08008d18 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b083      	sub	sp, #12
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]

}
 8008d20:	bf00      	nop
 8008d22:	370c      	adds	r7, #12
 8008d24:	46bd      	mov	sp, r7
 8008d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2a:	4770      	bx	lr

08008d2c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8008d30:	f7f7 fa55 	bl	80001de <SystemClock_Config>
}
 8008d34:	bf00      	nop
 8008d36:	bd80      	pop	{r7, pc}

08008d38 <__libc_init_array>:
 8008d38:	b570      	push	{r4, r5, r6, lr}
 8008d3a:	4d0d      	ldr	r5, [pc, #52]	; (8008d70 <__libc_init_array+0x38>)
 8008d3c:	4c0d      	ldr	r4, [pc, #52]	; (8008d74 <__libc_init_array+0x3c>)
 8008d3e:	1b64      	subs	r4, r4, r5
 8008d40:	10a4      	asrs	r4, r4, #2
 8008d42:	2600      	movs	r6, #0
 8008d44:	42a6      	cmp	r6, r4
 8008d46:	d109      	bne.n	8008d5c <__libc_init_array+0x24>
 8008d48:	4d0b      	ldr	r5, [pc, #44]	; (8008d78 <__libc_init_array+0x40>)
 8008d4a:	4c0c      	ldr	r4, [pc, #48]	; (8008d7c <__libc_init_array+0x44>)
 8008d4c:	f000 f82e 	bl	8008dac <_init>
 8008d50:	1b64      	subs	r4, r4, r5
 8008d52:	10a4      	asrs	r4, r4, #2
 8008d54:	2600      	movs	r6, #0
 8008d56:	42a6      	cmp	r6, r4
 8008d58:	d105      	bne.n	8008d66 <__libc_init_array+0x2e>
 8008d5a:	bd70      	pop	{r4, r5, r6, pc}
 8008d5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d60:	4798      	blx	r3
 8008d62:	3601      	adds	r6, #1
 8008d64:	e7ee      	b.n	8008d44 <__libc_init_array+0xc>
 8008d66:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d6a:	4798      	blx	r3
 8008d6c:	3601      	adds	r6, #1
 8008d6e:	e7f2      	b.n	8008d56 <__libc_init_array+0x1e>
 8008d70:	08008e6c 	.word	0x08008e6c
 8008d74:	08008e6c 	.word	0x08008e6c
 8008d78:	08008e6c 	.word	0x08008e6c
 8008d7c:	08008e70 	.word	0x08008e70

08008d80 <memcpy>:
 8008d80:	440a      	add	r2, r1
 8008d82:	4291      	cmp	r1, r2
 8008d84:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008d88:	d100      	bne.n	8008d8c <memcpy+0xc>
 8008d8a:	4770      	bx	lr
 8008d8c:	b510      	push	{r4, lr}
 8008d8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d96:	4291      	cmp	r1, r2
 8008d98:	d1f9      	bne.n	8008d8e <memcpy+0xe>
 8008d9a:	bd10      	pop	{r4, pc}

08008d9c <memset>:
 8008d9c:	4402      	add	r2, r0
 8008d9e:	4603      	mov	r3, r0
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d100      	bne.n	8008da6 <memset+0xa>
 8008da4:	4770      	bx	lr
 8008da6:	f803 1b01 	strb.w	r1, [r3], #1
 8008daa:	e7f9      	b.n	8008da0 <memset+0x4>

08008dac <_init>:
 8008dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dae:	bf00      	nop
 8008db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008db2:	bc08      	pop	{r3}
 8008db4:	469e      	mov	lr, r3
 8008db6:	4770      	bx	lr

08008db8 <_fini>:
 8008db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dba:	bf00      	nop
 8008dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dbe:	bc08      	pop	{r3}
 8008dc0:	469e      	mov	lr, r3
 8008dc2:	4770      	bx	lr
