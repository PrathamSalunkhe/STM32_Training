
06_USB_MSC_DEVICE_NEW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008544  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080086cc  080086cc  000186cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008774  08008774  00020174  2**0
                  CONTENTS
  4 .ARM          00000000  08008774  08008774  00020174  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008774  08008774  00020174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008774  08008774  00018774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008778  08008778  00018778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  0800877c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d478  20000174  080088f0  00020174  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000d5ec  080088f0  0002d5ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY
 12 .debug_info   000113f8  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032b6  00000000  00000000  0003159c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec8  00000000  00000000  00034858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d38  00000000  00000000  00035720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028eff  00000000  00000000  00036458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000130f2  00000000  00000000  0005f357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6afb  00000000  00000000  00072449  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00158f44  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a28  00000000  00000000  00158f94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000174 	.word	0x20000174
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080086b4 	.word	0x080086b4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000178 	.word	0x20000178
 80001c4:	080086b4 	.word	0x080086b4

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 f914 	bl	80003f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f805 	bl	80001de <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f852 	bl	800027c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80001d8:	f007 fbee 	bl	80079b8 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001dc:	e7fe      	b.n	80001dc <main+0x14>

080001de <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001de:	b580      	push	{r7, lr}
 80001e0:	b096      	sub	sp, #88	; 0x58
 80001e2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001e4:	f107 0314 	add.w	r3, r7, #20
 80001e8:	2244      	movs	r2, #68	; 0x44
 80001ea:	2100      	movs	r1, #0
 80001ec:	4618      	mov	r0, r3
 80001ee:	f008 fa59 	bl	80086a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f2:	463b      	mov	r3, r7
 80001f4:	2200      	movs	r2, #0
 80001f6:	601a      	str	r2, [r3, #0]
 80001f8:	605a      	str	r2, [r3, #4]
 80001fa:	609a      	str	r2, [r3, #8]
 80001fc:	60da      	str	r2, [r3, #12]
 80001fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000200:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000204:	f001 fe4e 	bl	8001ea4 <HAL_PWREx_ControlVoltageScaling>
 8000208:	4603      	mov	r3, r0
 800020a:	2b00      	cmp	r3, #0
 800020c:	d001      	beq.n	8000212 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800020e:	f000 f859 	bl	80002c4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000212:	2301      	movs	r3, #1
 8000214:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000216:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800021a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800021c:	2302      	movs	r3, #2
 800021e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000220:	2303      	movs	r3, #3
 8000222:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000224:	2301      	movs	r3, #1
 8000226:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000228:	2314      	movs	r3, #20
 800022a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800022c:	2307      	movs	r3, #7
 800022e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000230:	2302      	movs	r3, #2
 8000232:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000234:	2302      	movs	r3, #2
 8000236:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000238:	f107 0314 	add.w	r3, r7, #20
 800023c:	4618      	mov	r0, r3
 800023e:	f001 fe97 	bl	8001f70 <HAL_RCC_OscConfig>
 8000242:	4603      	mov	r3, r0
 8000244:	2b00      	cmp	r3, #0
 8000246:	d001      	beq.n	800024c <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000248:	f000 f83c 	bl	80002c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800024c:	230f      	movs	r3, #15
 800024e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000250:	2303      	movs	r3, #3
 8000252:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000254:	2300      	movs	r3, #0
 8000256:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000258:	2300      	movs	r3, #0
 800025a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800025c:	2300      	movs	r3, #0
 800025e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000260:	463b      	mov	r3, r7
 8000262:	2104      	movs	r1, #4
 8000264:	4618      	mov	r0, r3
 8000266:	f002 fa5f 	bl	8002728 <HAL_RCC_ClockConfig>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d001      	beq.n	8000274 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000270:	f000 f828 	bl	80002c4 <Error_Handler>
  }
}
 8000274:	bf00      	nop
 8000276:	3758      	adds	r7, #88	; 0x58
 8000278:	46bd      	mov	sp, r7
 800027a:	bd80      	pop	{r7, pc}

0800027c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800027c:	b480      	push	{r7}
 800027e:	b083      	sub	sp, #12
 8000280:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000282:	4b0f      	ldr	r3, [pc, #60]	; (80002c0 <MX_GPIO_Init+0x44>)
 8000284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000286:	4a0e      	ldr	r2, [pc, #56]	; (80002c0 <MX_GPIO_Init+0x44>)
 8000288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800028c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800028e:	4b0c      	ldr	r3, [pc, #48]	; (80002c0 <MX_GPIO_Init+0x44>)
 8000290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000296:	607b      	str	r3, [r7, #4]
 8000298:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800029a:	4b09      	ldr	r3, [pc, #36]	; (80002c0 <MX_GPIO_Init+0x44>)
 800029c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800029e:	4a08      	ldr	r2, [pc, #32]	; (80002c0 <MX_GPIO_Init+0x44>)
 80002a0:	f043 0301 	orr.w	r3, r3, #1
 80002a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002a6:	4b06      	ldr	r3, [pc, #24]	; (80002c0 <MX_GPIO_Init+0x44>)
 80002a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002aa:	f003 0301 	and.w	r3, r3, #1
 80002ae:	603b      	str	r3, [r7, #0]
 80002b0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80002b2:	bf00      	nop
 80002b4:	370c      	adds	r7, #12
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	40021000 	.word	0x40021000

080002c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002c4:	b480      	push	{r7}
 80002c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002c8:	b672      	cpsid	i
}
 80002ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002cc:	e7fe      	b.n	80002cc <Error_Handler+0x8>
	...

080002d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80002d6:	4b0f      	ldr	r3, [pc, #60]	; (8000314 <HAL_MspInit+0x44>)
 80002d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80002da:	4a0e      	ldr	r2, [pc, #56]	; (8000314 <HAL_MspInit+0x44>)
 80002dc:	f043 0301 	orr.w	r3, r3, #1
 80002e0:	6613      	str	r3, [r2, #96]	; 0x60
 80002e2:	4b0c      	ldr	r3, [pc, #48]	; (8000314 <HAL_MspInit+0x44>)
 80002e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80002e6:	f003 0301 	and.w	r3, r3, #1
 80002ea:	607b      	str	r3, [r7, #4]
 80002ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002ee:	4b09      	ldr	r3, [pc, #36]	; (8000314 <HAL_MspInit+0x44>)
 80002f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80002f2:	4a08      	ldr	r2, [pc, #32]	; (8000314 <HAL_MspInit+0x44>)
 80002f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002f8:	6593      	str	r3, [r2, #88]	; 0x58
 80002fa:	4b06      	ldr	r3, [pc, #24]	; (8000314 <HAL_MspInit+0x44>)
 80002fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80002fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000302:	603b      	str	r3, [r7, #0]
 8000304:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000306:	bf00      	nop
 8000308:	370c      	adds	r7, #12
 800030a:	46bd      	mov	sp, r7
 800030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	40021000 	.word	0x40021000

08000318 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800031c:	e7fe      	b.n	800031c <NMI_Handler+0x4>

0800031e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800031e:	b480      	push	{r7}
 8000320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000322:	e7fe      	b.n	8000322 <HardFault_Handler+0x4>

08000324 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000328:	e7fe      	b.n	8000328 <MemManage_Handler+0x4>

0800032a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800032a:	b480      	push	{r7}
 800032c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800032e:	e7fe      	b.n	800032e <BusFault_Handler+0x4>

08000330 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000334:	e7fe      	b.n	8000334 <UsageFault_Handler+0x4>

08000336 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000336:	b480      	push	{r7}
 8000338:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800033a:	bf00      	nop
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr

08000344 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000348:	bf00      	nop
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr

08000352 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000352:	b480      	push	{r7}
 8000354:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000356:	bf00      	nop
 8000358:	46bd      	mov	sp, r7
 800035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035e:	4770      	bx	lr

08000360 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000364:	f000 f8a4 	bl	80004b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000368:	bf00      	nop
 800036a:	bd80      	pop	{r7, pc}

0800036c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000370:	4802      	ldr	r0, [pc, #8]	; (800037c <OTG_FS_IRQHandler+0x10>)
 8000372:	f000 fcf0 	bl	8000d56 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000376:	bf00      	nop
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	2000ce68 	.word	0x2000ce68

08000380 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000384:	4b06      	ldr	r3, [pc, #24]	; (80003a0 <SystemInit+0x20>)
 8000386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800038a:	4a05      	ldr	r2, [pc, #20]	; (80003a0 <SystemInit+0x20>)
 800038c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000390:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000394:	bf00      	nop
 8000396:	46bd      	mov	sp, r7
 8000398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop
 80003a0:	e000ed00 	.word	0xe000ed00

080003a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80003a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003dc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80003a8:	f7ff ffea 	bl	8000380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003ac:	480c      	ldr	r0, [pc, #48]	; (80003e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80003ae:	490d      	ldr	r1, [pc, #52]	; (80003e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003b0:	4a0d      	ldr	r2, [pc, #52]	; (80003e8 <LoopForever+0xe>)
  movs r3, #0
 80003b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003b4:	e002      	b.n	80003bc <LoopCopyDataInit>

080003b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ba:	3304      	adds	r3, #4

080003bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003c0:	d3f9      	bcc.n	80003b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003c2:	4a0a      	ldr	r2, [pc, #40]	; (80003ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80003c4:	4c0a      	ldr	r4, [pc, #40]	; (80003f0 <LoopForever+0x16>)
  movs r3, #0
 80003c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003c8:	e001      	b.n	80003ce <LoopFillZerobss>

080003ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003cc:	3204      	adds	r2, #4

080003ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003d0:	d3fb      	bcc.n	80003ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80003d2:	f008 f935 	bl	8008640 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80003d6:	f7ff fef7 	bl	80001c8 <main>

080003da <LoopForever>:

LoopForever:
    b LoopForever
 80003da:	e7fe      	b.n	80003da <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80003dc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80003e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003e4:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 80003e8:	0800877c 	.word	0x0800877c
  ldr r2, =_sbss
 80003ec:	20000174 	.word	0x20000174
  ldr r4, =_ebss
 80003f0:	2000d5ec 	.word	0x2000d5ec

080003f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80003f4:	e7fe      	b.n	80003f4 <ADC1_2_IRQHandler>
	...

080003f8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80003fe:	2300      	movs	r3, #0
 8000400:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000402:	4b0c      	ldr	r3, [pc, #48]	; (8000434 <HAL_Init+0x3c>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	4a0b      	ldr	r2, [pc, #44]	; (8000434 <HAL_Init+0x3c>)
 8000408:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800040c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800040e:	2003      	movs	r0, #3
 8000410:	f000 f962 	bl	80006d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f80f 	bl	8000438 <HAL_InitTick>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d002      	beq.n	8000426 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000420:	2301      	movs	r3, #1
 8000422:	71fb      	strb	r3, [r7, #7]
 8000424:	e001      	b.n	800042a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000426:	f7ff ff53 	bl	80002d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800042a:	79fb      	ldrb	r3, [r7, #7]
}
 800042c:	4618      	mov	r0, r3
 800042e:	3708      	adds	r7, #8
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}
 8000434:	40022000 	.word	0x40022000

08000438 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b084      	sub	sp, #16
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000440:	2300      	movs	r3, #0
 8000442:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000444:	4b17      	ldr	r3, [pc, #92]	; (80004a4 <HAL_InitTick+0x6c>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b00      	cmp	r3, #0
 800044a:	d023      	beq.n	8000494 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800044c:	4b16      	ldr	r3, [pc, #88]	; (80004a8 <HAL_InitTick+0x70>)
 800044e:	681a      	ldr	r2, [r3, #0]
 8000450:	4b14      	ldr	r3, [pc, #80]	; (80004a4 <HAL_InitTick+0x6c>)
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	4619      	mov	r1, r3
 8000456:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800045a:	fbb3 f3f1 	udiv	r3, r3, r1
 800045e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000462:	4618      	mov	r0, r3
 8000464:	f000 f96d 	bl	8000742 <HAL_SYSTICK_Config>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d10f      	bne.n	800048e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	2b0f      	cmp	r3, #15
 8000472:	d809      	bhi.n	8000488 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000474:	2200      	movs	r2, #0
 8000476:	6879      	ldr	r1, [r7, #4]
 8000478:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800047c:	f000 f937 	bl	80006ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000480:	4a0a      	ldr	r2, [pc, #40]	; (80004ac <HAL_InitTick+0x74>)
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	6013      	str	r3, [r2, #0]
 8000486:	e007      	b.n	8000498 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000488:	2301      	movs	r3, #1
 800048a:	73fb      	strb	r3, [r7, #15]
 800048c:	e004      	b.n	8000498 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800048e:	2301      	movs	r3, #1
 8000490:	73fb      	strb	r3, [r7, #15]
 8000492:	e001      	b.n	8000498 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000494:	2301      	movs	r3, #1
 8000496:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000498:	7bfb      	ldrb	r3, [r7, #15]
}
 800049a:	4618      	mov	r0, r3
 800049c:	3710      	adds	r7, #16
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	20000008 	.word	0x20000008
 80004a8:	20000000 	.word	0x20000000
 80004ac:	20000004 	.word	0x20000004

080004b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80004b4:	4b06      	ldr	r3, [pc, #24]	; (80004d0 <HAL_IncTick+0x20>)
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	461a      	mov	r2, r3
 80004ba:	4b06      	ldr	r3, [pc, #24]	; (80004d4 <HAL_IncTick+0x24>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	4413      	add	r3, r2
 80004c0:	4a04      	ldr	r2, [pc, #16]	; (80004d4 <HAL_IncTick+0x24>)
 80004c2:	6013      	str	r3, [r2, #0]
}
 80004c4:	bf00      	nop
 80004c6:	46bd      	mov	sp, r7
 80004c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
 80004d0:	20000008 	.word	0x20000008
 80004d4:	20000190 	.word	0x20000190

080004d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  return uwTick;
 80004dc:	4b03      	ldr	r3, [pc, #12]	; (80004ec <HAL_GetTick+0x14>)
 80004de:	681b      	ldr	r3, [r3, #0]
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	20000190 	.word	0x20000190

080004f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b084      	sub	sp, #16
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80004f8:	f7ff ffee 	bl	80004d8 <HAL_GetTick>
 80004fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000508:	d005      	beq.n	8000516 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800050a:	4b0a      	ldr	r3, [pc, #40]	; (8000534 <HAL_Delay+0x44>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	461a      	mov	r2, r3
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	4413      	add	r3, r2
 8000514:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000516:	bf00      	nop
 8000518:	f7ff ffde 	bl	80004d8 <HAL_GetTick>
 800051c:	4602      	mov	r2, r0
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	1ad3      	subs	r3, r2, r3
 8000522:	68fa      	ldr	r2, [r7, #12]
 8000524:	429a      	cmp	r2, r3
 8000526:	d8f7      	bhi.n	8000518 <HAL_Delay+0x28>
  {
  }
}
 8000528:	bf00      	nop
 800052a:	bf00      	nop
 800052c:	3710      	adds	r7, #16
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	20000008 	.word	0x20000008

08000538 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000538:	b480      	push	{r7}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	f003 0307 	and.w	r3, r3, #7
 8000546:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000548:	4b0c      	ldr	r3, [pc, #48]	; (800057c <__NVIC_SetPriorityGrouping+0x44>)
 800054a:	68db      	ldr	r3, [r3, #12]
 800054c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800054e:	68ba      	ldr	r2, [r7, #8]
 8000550:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000554:	4013      	ands	r3, r2
 8000556:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800055c:	68bb      	ldr	r3, [r7, #8]
 800055e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000560:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000564:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000568:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800056a:	4a04      	ldr	r2, [pc, #16]	; (800057c <__NVIC_SetPriorityGrouping+0x44>)
 800056c:	68bb      	ldr	r3, [r7, #8]
 800056e:	60d3      	str	r3, [r2, #12]
}
 8000570:	bf00      	nop
 8000572:	3714      	adds	r7, #20
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr
 800057c:	e000ed00 	.word	0xe000ed00

08000580 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000584:	4b04      	ldr	r3, [pc, #16]	; (8000598 <__NVIC_GetPriorityGrouping+0x18>)
 8000586:	68db      	ldr	r3, [r3, #12]
 8000588:	0a1b      	lsrs	r3, r3, #8
 800058a:	f003 0307 	and.w	r3, r3, #7
}
 800058e:	4618      	mov	r0, r3
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr
 8000598:	e000ed00 	.word	0xe000ed00

0800059c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	db0b      	blt.n	80005c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	f003 021f 	and.w	r2, r3, #31
 80005b4:	4907      	ldr	r1, [pc, #28]	; (80005d4 <__NVIC_EnableIRQ+0x38>)
 80005b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ba:	095b      	lsrs	r3, r3, #5
 80005bc:	2001      	movs	r0, #1
 80005be:	fa00 f202 	lsl.w	r2, r0, r2
 80005c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80005c6:	bf00      	nop
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	e000e100 	.word	0xe000e100

080005d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	6039      	str	r1, [r7, #0]
 80005e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	db0a      	blt.n	8000602 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	b2da      	uxtb	r2, r3
 80005f0:	490c      	ldr	r1, [pc, #48]	; (8000624 <__NVIC_SetPriority+0x4c>)
 80005f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005f6:	0112      	lsls	r2, r2, #4
 80005f8:	b2d2      	uxtb	r2, r2
 80005fa:	440b      	add	r3, r1
 80005fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000600:	e00a      	b.n	8000618 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	b2da      	uxtb	r2, r3
 8000606:	4908      	ldr	r1, [pc, #32]	; (8000628 <__NVIC_SetPriority+0x50>)
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	f003 030f 	and.w	r3, r3, #15
 800060e:	3b04      	subs	r3, #4
 8000610:	0112      	lsls	r2, r2, #4
 8000612:	b2d2      	uxtb	r2, r2
 8000614:	440b      	add	r3, r1
 8000616:	761a      	strb	r2, [r3, #24]
}
 8000618:	bf00      	nop
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr
 8000624:	e000e100 	.word	0xe000e100
 8000628:	e000ed00 	.word	0xe000ed00

0800062c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800062c:	b480      	push	{r7}
 800062e:	b089      	sub	sp, #36	; 0x24
 8000630:	af00      	add	r7, sp, #0
 8000632:	60f8      	str	r0, [r7, #12]
 8000634:	60b9      	str	r1, [r7, #8]
 8000636:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	f003 0307 	and.w	r3, r3, #7
 800063e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000640:	69fb      	ldr	r3, [r7, #28]
 8000642:	f1c3 0307 	rsb	r3, r3, #7
 8000646:	2b04      	cmp	r3, #4
 8000648:	bf28      	it	cs
 800064a:	2304      	movcs	r3, #4
 800064c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800064e:	69fb      	ldr	r3, [r7, #28]
 8000650:	3304      	adds	r3, #4
 8000652:	2b06      	cmp	r3, #6
 8000654:	d902      	bls.n	800065c <NVIC_EncodePriority+0x30>
 8000656:	69fb      	ldr	r3, [r7, #28]
 8000658:	3b03      	subs	r3, #3
 800065a:	e000      	b.n	800065e <NVIC_EncodePriority+0x32>
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000660:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000664:	69bb      	ldr	r3, [r7, #24]
 8000666:	fa02 f303 	lsl.w	r3, r2, r3
 800066a:	43da      	mvns	r2, r3
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	401a      	ands	r2, r3
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000674:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	fa01 f303 	lsl.w	r3, r1, r3
 800067e:	43d9      	mvns	r1, r3
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000684:	4313      	orrs	r3, r2
         );
}
 8000686:	4618      	mov	r0, r3
 8000688:	3724      	adds	r7, #36	; 0x24
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
	...

08000694 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	3b01      	subs	r3, #1
 80006a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006a4:	d301      	bcc.n	80006aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006a6:	2301      	movs	r3, #1
 80006a8:	e00f      	b.n	80006ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006aa:	4a0a      	ldr	r2, [pc, #40]	; (80006d4 <SysTick_Config+0x40>)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	3b01      	subs	r3, #1
 80006b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006b2:	210f      	movs	r1, #15
 80006b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006b8:	f7ff ff8e 	bl	80005d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006bc:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <SysTick_Config+0x40>)
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <SysTick_Config+0x40>)
 80006c4:	2207      	movs	r2, #7
 80006c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006c8:	2300      	movs	r3, #0
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	e000e010 	.word	0xe000e010

080006d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006e0:	6878      	ldr	r0, [r7, #4]
 80006e2:	f7ff ff29 	bl	8000538 <__NVIC_SetPriorityGrouping>
}
 80006e6:	bf00      	nop
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}

080006ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006ee:	b580      	push	{r7, lr}
 80006f0:	b086      	sub	sp, #24
 80006f2:	af00      	add	r7, sp, #0
 80006f4:	4603      	mov	r3, r0
 80006f6:	60b9      	str	r1, [r7, #8]
 80006f8:	607a      	str	r2, [r7, #4]
 80006fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000700:	f7ff ff3e 	bl	8000580 <__NVIC_GetPriorityGrouping>
 8000704:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000706:	687a      	ldr	r2, [r7, #4]
 8000708:	68b9      	ldr	r1, [r7, #8]
 800070a:	6978      	ldr	r0, [r7, #20]
 800070c:	f7ff ff8e 	bl	800062c <NVIC_EncodePriority>
 8000710:	4602      	mov	r2, r0
 8000712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000716:	4611      	mov	r1, r2
 8000718:	4618      	mov	r0, r3
 800071a:	f7ff ff5d 	bl	80005d8 <__NVIC_SetPriority>
}
 800071e:	bf00      	nop
 8000720:	3718      	adds	r7, #24
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}

08000726 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000726:	b580      	push	{r7, lr}
 8000728:	b082      	sub	sp, #8
 800072a:	af00      	add	r7, sp, #0
 800072c:	4603      	mov	r3, r0
 800072e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000734:	4618      	mov	r0, r3
 8000736:	f7ff ff31 	bl	800059c <__NVIC_EnableIRQ>
}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}

08000742 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000742:	b580      	push	{r7, lr}
 8000744:	b082      	sub	sp, #8
 8000746:	af00      	add	r7, sp, #0
 8000748:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800074a:	6878      	ldr	r0, [r7, #4]
 800074c:	f7ff ffa2 	bl	8000694 <SysTick_Config>
 8000750:	4603      	mov	r3, r0
}
 8000752:	4618      	mov	r0, r3
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
	...

0800075c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800075c:	b480      	push	{r7}
 800075e:	b087      	sub	sp, #28
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800076a:	e17f      	b.n	8000a6c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	681a      	ldr	r2, [r3, #0]
 8000770:	2101      	movs	r1, #1
 8000772:	697b      	ldr	r3, [r7, #20]
 8000774:	fa01 f303 	lsl.w	r3, r1, r3
 8000778:	4013      	ands	r3, r2
 800077a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	2b00      	cmp	r3, #0
 8000780:	f000 8171 	beq.w	8000a66 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	685b      	ldr	r3, [r3, #4]
 8000788:	f003 0303 	and.w	r3, r3, #3
 800078c:	2b01      	cmp	r3, #1
 800078e:	d005      	beq.n	800079c <HAL_GPIO_Init+0x40>
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	685b      	ldr	r3, [r3, #4]
 8000794:	f003 0303 	and.w	r3, r3, #3
 8000798:	2b02      	cmp	r3, #2
 800079a:	d130      	bne.n	80007fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	689b      	ldr	r3, [r3, #8]
 80007a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80007a2:	697b      	ldr	r3, [r7, #20]
 80007a4:	005b      	lsls	r3, r3, #1
 80007a6:	2203      	movs	r2, #3
 80007a8:	fa02 f303 	lsl.w	r3, r2, r3
 80007ac:	43db      	mvns	r3, r3
 80007ae:	693a      	ldr	r2, [r7, #16]
 80007b0:	4013      	ands	r3, r2
 80007b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	68da      	ldr	r2, [r3, #12]
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	005b      	lsls	r3, r3, #1
 80007bc:	fa02 f303 	lsl.w	r3, r2, r3
 80007c0:	693a      	ldr	r2, [r7, #16]
 80007c2:	4313      	orrs	r3, r2
 80007c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	693a      	ldr	r2, [r7, #16]
 80007ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	685b      	ldr	r3, [r3, #4]
 80007d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80007d2:	2201      	movs	r2, #1
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	fa02 f303 	lsl.w	r3, r2, r3
 80007da:	43db      	mvns	r3, r3
 80007dc:	693a      	ldr	r2, [r7, #16]
 80007de:	4013      	ands	r3, r2
 80007e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	685b      	ldr	r3, [r3, #4]
 80007e6:	091b      	lsrs	r3, r3, #4
 80007e8:	f003 0201 	and.w	r2, r3, #1
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	fa02 f303 	lsl.w	r3, r2, r3
 80007f2:	693a      	ldr	r2, [r7, #16]
 80007f4:	4313      	orrs	r3, r2
 80007f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	693a      	ldr	r2, [r7, #16]
 80007fc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	685b      	ldr	r3, [r3, #4]
 8000802:	f003 0303 	and.w	r3, r3, #3
 8000806:	2b03      	cmp	r3, #3
 8000808:	d118      	bne.n	800083c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800080e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000810:	2201      	movs	r2, #1
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	fa02 f303 	lsl.w	r3, r2, r3
 8000818:	43db      	mvns	r3, r3
 800081a:	693a      	ldr	r2, [r7, #16]
 800081c:	4013      	ands	r3, r2
 800081e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	08db      	lsrs	r3, r3, #3
 8000826:	f003 0201 	and.w	r2, r3, #1
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	fa02 f303 	lsl.w	r3, r2, r3
 8000830:	693a      	ldr	r2, [r7, #16]
 8000832:	4313      	orrs	r3, r2
 8000834:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	693a      	ldr	r2, [r7, #16]
 800083a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	685b      	ldr	r3, [r3, #4]
 8000840:	f003 0303 	and.w	r3, r3, #3
 8000844:	2b03      	cmp	r3, #3
 8000846:	d017      	beq.n	8000878 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	68db      	ldr	r3, [r3, #12]
 800084c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	005b      	lsls	r3, r3, #1
 8000852:	2203      	movs	r2, #3
 8000854:	fa02 f303 	lsl.w	r3, r2, r3
 8000858:	43db      	mvns	r3, r3
 800085a:	693a      	ldr	r2, [r7, #16]
 800085c:	4013      	ands	r3, r2
 800085e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	689a      	ldr	r2, [r3, #8]
 8000864:	697b      	ldr	r3, [r7, #20]
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	fa02 f303 	lsl.w	r3, r2, r3
 800086c:	693a      	ldr	r2, [r7, #16]
 800086e:	4313      	orrs	r3, r2
 8000870:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	693a      	ldr	r2, [r7, #16]
 8000876:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	685b      	ldr	r3, [r3, #4]
 800087c:	f003 0303 	and.w	r3, r3, #3
 8000880:	2b02      	cmp	r3, #2
 8000882:	d123      	bne.n	80008cc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	08da      	lsrs	r2, r3, #3
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	3208      	adds	r2, #8
 800088c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000890:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	f003 0307 	and.w	r3, r3, #7
 8000898:	009b      	lsls	r3, r3, #2
 800089a:	220f      	movs	r2, #15
 800089c:	fa02 f303 	lsl.w	r3, r2, r3
 80008a0:	43db      	mvns	r3, r3
 80008a2:	693a      	ldr	r2, [r7, #16]
 80008a4:	4013      	ands	r3, r2
 80008a6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	691a      	ldr	r2, [r3, #16]
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	f003 0307 	and.w	r3, r3, #7
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	fa02 f303 	lsl.w	r3, r2, r3
 80008b8:	693a      	ldr	r2, [r7, #16]
 80008ba:	4313      	orrs	r3, r2
 80008bc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80008be:	697b      	ldr	r3, [r7, #20]
 80008c0:	08da      	lsrs	r2, r3, #3
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	3208      	adds	r2, #8
 80008c6:	6939      	ldr	r1, [r7, #16]
 80008c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	2203      	movs	r2, #3
 80008d8:	fa02 f303 	lsl.w	r3, r2, r3
 80008dc:	43db      	mvns	r3, r3
 80008de:	693a      	ldr	r2, [r7, #16]
 80008e0:	4013      	ands	r3, r2
 80008e2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	f003 0203 	and.w	r2, r3, #3
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	fa02 f303 	lsl.w	r3, r2, r3
 80008f4:	693a      	ldr	r2, [r7, #16]
 80008f6:	4313      	orrs	r3, r2
 80008f8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	693a      	ldr	r2, [r7, #16]
 80008fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000908:	2b00      	cmp	r3, #0
 800090a:	f000 80ac 	beq.w	8000a66 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090e:	4b5f      	ldr	r3, [pc, #380]	; (8000a8c <HAL_GPIO_Init+0x330>)
 8000910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000912:	4a5e      	ldr	r2, [pc, #376]	; (8000a8c <HAL_GPIO_Init+0x330>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	6613      	str	r3, [r2, #96]	; 0x60
 800091a:	4b5c      	ldr	r3, [pc, #368]	; (8000a8c <HAL_GPIO_Init+0x330>)
 800091c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	60bb      	str	r3, [r7, #8]
 8000924:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000926:	4a5a      	ldr	r2, [pc, #360]	; (8000a90 <HAL_GPIO_Init+0x334>)
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	089b      	lsrs	r3, r3, #2
 800092c:	3302      	adds	r3, #2
 800092e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000932:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	f003 0303 	and.w	r3, r3, #3
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	220f      	movs	r2, #15
 800093e:	fa02 f303 	lsl.w	r3, r2, r3
 8000942:	43db      	mvns	r3, r3
 8000944:	693a      	ldr	r2, [r7, #16]
 8000946:	4013      	ands	r3, r2
 8000948:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000950:	d025      	beq.n	800099e <HAL_GPIO_Init+0x242>
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4a4f      	ldr	r2, [pc, #316]	; (8000a94 <HAL_GPIO_Init+0x338>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d01f      	beq.n	800099a <HAL_GPIO_Init+0x23e>
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4a4e      	ldr	r2, [pc, #312]	; (8000a98 <HAL_GPIO_Init+0x33c>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d019      	beq.n	8000996 <HAL_GPIO_Init+0x23a>
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4a4d      	ldr	r2, [pc, #308]	; (8000a9c <HAL_GPIO_Init+0x340>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d013      	beq.n	8000992 <HAL_GPIO_Init+0x236>
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4a4c      	ldr	r2, [pc, #304]	; (8000aa0 <HAL_GPIO_Init+0x344>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d00d      	beq.n	800098e <HAL_GPIO_Init+0x232>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4a4b      	ldr	r2, [pc, #300]	; (8000aa4 <HAL_GPIO_Init+0x348>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d007      	beq.n	800098a <HAL_GPIO_Init+0x22e>
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4a4a      	ldr	r2, [pc, #296]	; (8000aa8 <HAL_GPIO_Init+0x34c>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d101      	bne.n	8000986 <HAL_GPIO_Init+0x22a>
 8000982:	2306      	movs	r3, #6
 8000984:	e00c      	b.n	80009a0 <HAL_GPIO_Init+0x244>
 8000986:	2307      	movs	r3, #7
 8000988:	e00a      	b.n	80009a0 <HAL_GPIO_Init+0x244>
 800098a:	2305      	movs	r3, #5
 800098c:	e008      	b.n	80009a0 <HAL_GPIO_Init+0x244>
 800098e:	2304      	movs	r3, #4
 8000990:	e006      	b.n	80009a0 <HAL_GPIO_Init+0x244>
 8000992:	2303      	movs	r3, #3
 8000994:	e004      	b.n	80009a0 <HAL_GPIO_Init+0x244>
 8000996:	2302      	movs	r3, #2
 8000998:	e002      	b.n	80009a0 <HAL_GPIO_Init+0x244>
 800099a:	2301      	movs	r3, #1
 800099c:	e000      	b.n	80009a0 <HAL_GPIO_Init+0x244>
 800099e:	2300      	movs	r3, #0
 80009a0:	697a      	ldr	r2, [r7, #20]
 80009a2:	f002 0203 	and.w	r2, r2, #3
 80009a6:	0092      	lsls	r2, r2, #2
 80009a8:	4093      	lsls	r3, r2
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	4313      	orrs	r3, r2
 80009ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80009b0:	4937      	ldr	r1, [pc, #220]	; (8000a90 <HAL_GPIO_Init+0x334>)
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	089b      	lsrs	r3, r3, #2
 80009b6:	3302      	adds	r3, #2
 80009b8:	693a      	ldr	r2, [r7, #16]
 80009ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80009be:	4b3b      	ldr	r3, [pc, #236]	; (8000aac <HAL_GPIO_Init+0x350>)
 80009c0:	689b      	ldr	r3, [r3, #8]
 80009c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	43db      	mvns	r3, r3
 80009c8:	693a      	ldr	r2, [r7, #16]
 80009ca:	4013      	ands	r3, r2
 80009cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d003      	beq.n	80009e2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80009da:	693a      	ldr	r2, [r7, #16]
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	4313      	orrs	r3, r2
 80009e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80009e2:	4a32      	ldr	r2, [pc, #200]	; (8000aac <HAL_GPIO_Init+0x350>)
 80009e4:	693b      	ldr	r3, [r7, #16]
 80009e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80009e8:	4b30      	ldr	r3, [pc, #192]	; (8000aac <HAL_GPIO_Init+0x350>)
 80009ea:	68db      	ldr	r3, [r3, #12]
 80009ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	43db      	mvns	r3, r3
 80009f2:	693a      	ldr	r2, [r7, #16]
 80009f4:	4013      	ands	r3, r2
 80009f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d003      	beq.n	8000a0c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000a04:	693a      	ldr	r2, [r7, #16]
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000a0c:	4a27      	ldr	r2, [pc, #156]	; (8000aac <HAL_GPIO_Init+0x350>)
 8000a0e:	693b      	ldr	r3, [r7, #16]
 8000a10:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000a12:	4b26      	ldr	r3, [pc, #152]	; (8000aac <HAL_GPIO_Init+0x350>)
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	43db      	mvns	r3, r3
 8000a1c:	693a      	ldr	r2, [r7, #16]
 8000a1e:	4013      	ands	r3, r2
 8000a20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d003      	beq.n	8000a36 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000a2e:	693a      	ldr	r2, [r7, #16]
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	4313      	orrs	r3, r2
 8000a34:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000a36:	4a1d      	ldr	r2, [pc, #116]	; (8000aac <HAL_GPIO_Init+0x350>)
 8000a38:	693b      	ldr	r3, [r7, #16]
 8000a3a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000a3c:	4b1b      	ldr	r3, [pc, #108]	; (8000aac <HAL_GPIO_Init+0x350>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	43db      	mvns	r3, r3
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	4013      	ands	r3, r2
 8000a4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d003      	beq.n	8000a60 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000a58:	693a      	ldr	r2, [r7, #16]
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000a60:	4a12      	ldr	r2, [pc, #72]	; (8000aac <HAL_GPIO_Init+0x350>)
 8000a62:	693b      	ldr	r3, [r7, #16]
 8000a64:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	fa22 f303 	lsr.w	r3, r2, r3
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	f47f ae78 	bne.w	800076c <HAL_GPIO_Init+0x10>
  }
}
 8000a7c:	bf00      	nop
 8000a7e:	bf00      	nop
 8000a80:	371c      	adds	r7, #28
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	40021000 	.word	0x40021000
 8000a90:	40010000 	.word	0x40010000
 8000a94:	48000400 	.word	0x48000400
 8000a98:	48000800 	.word	0x48000800
 8000a9c:	48000c00 	.word	0x48000c00
 8000aa0:	48001000 	.word	0x48001000
 8000aa4:	48001400 	.word	0x48001400
 8000aa8:	48001800 	.word	0x48001800
 8000aac:	40010400 	.word	0x40010400

08000ab0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ab2:	b08f      	sub	sp, #60	; 0x3c
 8000ab4:	af0a      	add	r7, sp, #40	; 0x28
 8000ab6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d101      	bne.n	8000ac2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	e116      	b.n	8000cf0 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d106      	bne.n	8000ae2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f007 f935 	bl	8007d4c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2203      	movs	r2, #3
 8000ae6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d102      	bne.n	8000afc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2200      	movs	r2, #0
 8000afa:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4618      	mov	r0, r3
 8000b02:	f002 fd9e 	bl	8003642 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	687e      	ldr	r6, [r7, #4]
 8000b0e:	466d      	mov	r5, sp
 8000b10:	f106 0410 	add.w	r4, r6, #16
 8000b14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b1c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000b20:	e885 0003 	stmia.w	r5, {r0, r1}
 8000b24:	1d33      	adds	r3, r6, #4
 8000b26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b28:	6838      	ldr	r0, [r7, #0]
 8000b2a:	f002 fcb1 	bl	8003490 <USB_CoreInit>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d005      	beq.n	8000b40 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2202      	movs	r2, #2
 8000b38:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	e0d7      	b.n	8000cf0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2100      	movs	r1, #0
 8000b46:	4618      	mov	r0, r3
 8000b48:	f002 fd8c 	bl	8003664 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	73fb      	strb	r3, [r7, #15]
 8000b50:	e04a      	b.n	8000be8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000b52:	7bfa      	ldrb	r2, [r7, #15]
 8000b54:	6879      	ldr	r1, [r7, #4]
 8000b56:	4613      	mov	r3, r2
 8000b58:	00db      	lsls	r3, r3, #3
 8000b5a:	4413      	add	r3, r2
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	440b      	add	r3, r1
 8000b60:	333d      	adds	r3, #61	; 0x3d
 8000b62:	2201      	movs	r2, #1
 8000b64:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000b66:	7bfa      	ldrb	r2, [r7, #15]
 8000b68:	6879      	ldr	r1, [r7, #4]
 8000b6a:	4613      	mov	r3, r2
 8000b6c:	00db      	lsls	r3, r3, #3
 8000b6e:	4413      	add	r3, r2
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	440b      	add	r3, r1
 8000b74:	333c      	adds	r3, #60	; 0x3c
 8000b76:	7bfa      	ldrb	r2, [r7, #15]
 8000b78:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000b7a:	7bfa      	ldrb	r2, [r7, #15]
 8000b7c:	7bfb      	ldrb	r3, [r7, #15]
 8000b7e:	b298      	uxth	r0, r3
 8000b80:	6879      	ldr	r1, [r7, #4]
 8000b82:	4613      	mov	r3, r2
 8000b84:	00db      	lsls	r3, r3, #3
 8000b86:	4413      	add	r3, r2
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	440b      	add	r3, r1
 8000b8c:	3344      	adds	r3, #68	; 0x44
 8000b8e:	4602      	mov	r2, r0
 8000b90:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000b92:	7bfa      	ldrb	r2, [r7, #15]
 8000b94:	6879      	ldr	r1, [r7, #4]
 8000b96:	4613      	mov	r3, r2
 8000b98:	00db      	lsls	r3, r3, #3
 8000b9a:	4413      	add	r3, r2
 8000b9c:	009b      	lsls	r3, r3, #2
 8000b9e:	440b      	add	r3, r1
 8000ba0:	3340      	adds	r3, #64	; 0x40
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000ba6:	7bfa      	ldrb	r2, [r7, #15]
 8000ba8:	6879      	ldr	r1, [r7, #4]
 8000baa:	4613      	mov	r3, r2
 8000bac:	00db      	lsls	r3, r3, #3
 8000bae:	4413      	add	r3, r2
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	440b      	add	r3, r1
 8000bb4:	3348      	adds	r3, #72	; 0x48
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000bba:	7bfa      	ldrb	r2, [r7, #15]
 8000bbc:	6879      	ldr	r1, [r7, #4]
 8000bbe:	4613      	mov	r3, r2
 8000bc0:	00db      	lsls	r3, r3, #3
 8000bc2:	4413      	add	r3, r2
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	440b      	add	r3, r1
 8000bc8:	334c      	adds	r3, #76	; 0x4c
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000bce:	7bfa      	ldrb	r2, [r7, #15]
 8000bd0:	6879      	ldr	r1, [r7, #4]
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	00db      	lsls	r3, r3, #3
 8000bd6:	4413      	add	r3, r2
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	440b      	add	r3, r1
 8000bdc:	3354      	adds	r3, #84	; 0x54
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000be2:	7bfb      	ldrb	r3, [r7, #15]
 8000be4:	3301      	adds	r3, #1
 8000be6:	73fb      	strb	r3, [r7, #15]
 8000be8:	7bfa      	ldrb	r2, [r7, #15]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	d3af      	bcc.n	8000b52 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	73fb      	strb	r3, [r7, #15]
 8000bf6:	e044      	b.n	8000c82 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000bf8:	7bfa      	ldrb	r2, [r7, #15]
 8000bfa:	6879      	ldr	r1, [r7, #4]
 8000bfc:	4613      	mov	r3, r2
 8000bfe:	00db      	lsls	r3, r3, #3
 8000c00:	4413      	add	r3, r2
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	440b      	add	r3, r1
 8000c06:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000c0e:	7bfa      	ldrb	r2, [r7, #15]
 8000c10:	6879      	ldr	r1, [r7, #4]
 8000c12:	4613      	mov	r3, r2
 8000c14:	00db      	lsls	r3, r3, #3
 8000c16:	4413      	add	r3, r2
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	440b      	add	r3, r1
 8000c1c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8000c20:	7bfa      	ldrb	r2, [r7, #15]
 8000c22:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000c24:	7bfa      	ldrb	r2, [r7, #15]
 8000c26:	6879      	ldr	r1, [r7, #4]
 8000c28:	4613      	mov	r3, r2
 8000c2a:	00db      	lsls	r3, r3, #3
 8000c2c:	4413      	add	r3, r2
 8000c2e:	009b      	lsls	r3, r3, #2
 8000c30:	440b      	add	r3, r1
 8000c32:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8000c36:	2200      	movs	r2, #0
 8000c38:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000c3a:	7bfa      	ldrb	r2, [r7, #15]
 8000c3c:	6879      	ldr	r1, [r7, #4]
 8000c3e:	4613      	mov	r3, r2
 8000c40:	00db      	lsls	r3, r3, #3
 8000c42:	4413      	add	r3, r2
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	440b      	add	r3, r1
 8000c48:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000c50:	7bfa      	ldrb	r2, [r7, #15]
 8000c52:	6879      	ldr	r1, [r7, #4]
 8000c54:	4613      	mov	r3, r2
 8000c56:	00db      	lsls	r3, r3, #3
 8000c58:	4413      	add	r3, r2
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	440b      	add	r3, r1
 8000c5e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000c66:	7bfa      	ldrb	r2, [r7, #15]
 8000c68:	6879      	ldr	r1, [r7, #4]
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	00db      	lsls	r3, r3, #3
 8000c6e:	4413      	add	r3, r2
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	440b      	add	r3, r1
 8000c74:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c7c:	7bfb      	ldrb	r3, [r7, #15]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	73fb      	strb	r3, [r7, #15]
 8000c82:	7bfa      	ldrb	r2, [r7, #15]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d3b5      	bcc.n	8000bf8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	603b      	str	r3, [r7, #0]
 8000c92:	687e      	ldr	r6, [r7, #4]
 8000c94:	466d      	mov	r5, sp
 8000c96:	f106 0410 	add.w	r4, r6, #16
 8000c9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ca0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ca2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000ca6:	e885 0003 	stmia.w	r5, {r0, r1}
 8000caa:	1d33      	adds	r3, r6, #4
 8000cac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cae:	6838      	ldr	r0, [r7, #0]
 8000cb0:	f002 fd24 	bl	80036fc <USB_DevInit>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d005      	beq.n	8000cc6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2202      	movs	r2, #2
 8000cbe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e014      	b.n	8000cf0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d102      	bne.n	8000ce4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f001 f8ae 	bl	8001e40 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f003 fdac 	bl	8004846 <USB_DevDisconnect>

  return HAL_OK;
 8000cee:	2300      	movs	r3, #0
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3714      	adds	r7, #20
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000cf8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d101      	bne.n	8000d14 <HAL_PCD_Start+0x1c>
 8000d10:	2302      	movs	r3, #2
 8000d12:	e01c      	b.n	8000d4e <HAL_PCD_Start+0x56>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2201      	movs	r2, #1
 8000d18:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d105      	bne.n	8000d30 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d28:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4618      	mov	r0, r3
 8000d36:	f002 fc73 	bl	8003620 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f003 fd60 	bl	8004804 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2200      	movs	r2, #0
 8000d48:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000d56:	b590      	push	{r4, r7, lr}
 8000d58:	b08d      	sub	sp, #52	; 0x34
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000d64:	6a3b      	ldr	r3, [r7, #32]
 8000d66:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f003 fe1e 	bl	80049ae <USB_GetMode>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	f040 847e 	bne.w	8001676 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f003 fd82 	bl	8004888 <USB_ReadInterrupts>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	f000 8474 	beq.w	8001674 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	0a1b      	lsrs	r3, r3, #8
 8000d96:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f003 fd6f 	bl	8004888 <USB_ReadInterrupts>
 8000daa:	4603      	mov	r3, r0
 8000dac:	f003 0302 	and.w	r3, r3, #2
 8000db0:	2b02      	cmp	r3, #2
 8000db2:	d107      	bne.n	8000dc4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	695a      	ldr	r2, [r3, #20]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f002 0202 	and.w	r2, r2, #2
 8000dc2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f003 fd5d 	bl	8004888 <USB_ReadInterrupts>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	f003 0310 	and.w	r3, r3, #16
 8000dd4:	2b10      	cmp	r3, #16
 8000dd6:	d161      	bne.n	8000e9c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	699a      	ldr	r2, [r3, #24]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f022 0210 	bic.w	r2, r2, #16
 8000de6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8000de8:	6a3b      	ldr	r3, [r7, #32]
 8000dea:	6a1b      	ldr	r3, [r3, #32]
 8000dec:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8000dee:	69bb      	ldr	r3, [r7, #24]
 8000df0:	f003 020f 	and.w	r2, r3, #15
 8000df4:	4613      	mov	r3, r2
 8000df6:	00db      	lsls	r3, r3, #3
 8000df8:	4413      	add	r3, r2
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8000e00:	687a      	ldr	r2, [r7, #4]
 8000e02:	4413      	add	r3, r2
 8000e04:	3304      	adds	r3, #4
 8000e06:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	0c5b      	lsrs	r3, r3, #17
 8000e0c:	f003 030f 	and.w	r3, r3, #15
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d124      	bne.n	8000e5e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d035      	beq.n	8000e8c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	091b      	lsrs	r3, r3, #4
 8000e28:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8000e2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	461a      	mov	r2, r3
 8000e32:	6a38      	ldr	r0, [r7, #32]
 8000e34:	f003 fb94 	bl	8004560 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	691a      	ldr	r2, [r3, #16]
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	091b      	lsrs	r3, r3, #4
 8000e40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e44:	441a      	add	r2, r3
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	6a1a      	ldr	r2, [r3, #32]
 8000e4e:	69bb      	ldr	r3, [r7, #24]
 8000e50:	091b      	lsrs	r3, r3, #4
 8000e52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e56:	441a      	add	r2, r3
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	621a      	str	r2, [r3, #32]
 8000e5c:	e016      	b.n	8000e8c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8000e5e:	69bb      	ldr	r3, [r7, #24]
 8000e60:	0c5b      	lsrs	r3, r3, #17
 8000e62:	f003 030f 	and.w	r3, r3, #15
 8000e66:	2b06      	cmp	r3, #6
 8000e68:	d110      	bne.n	8000e8c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8000e70:	2208      	movs	r2, #8
 8000e72:	4619      	mov	r1, r3
 8000e74:	6a38      	ldr	r0, [r7, #32]
 8000e76:	f003 fb73 	bl	8004560 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	6a1a      	ldr	r2, [r3, #32]
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	091b      	lsrs	r3, r3, #4
 8000e82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e86:	441a      	add	r2, r3
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	699a      	ldr	r2, [r3, #24]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f042 0210 	orr.w	r2, r2, #16
 8000e9a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f003 fcf1 	bl	8004888 <USB_ReadInterrupts>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000eac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000eb0:	f040 80a7 	bne.w	8001002 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f003 fcf6 	bl	80048ae <USB_ReadDevAllOutEpInterrupt>
 8000ec2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8000ec4:	e099      	b.n	8000ffa <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8000ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ec8:	f003 0301 	and.w	r3, r3, #1
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	f000 808e 	beq.w	8000fee <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ed8:	b2d2      	uxtb	r2, r2
 8000eda:	4611      	mov	r1, r2
 8000edc:	4618      	mov	r0, r3
 8000ede:	f003 fd1a 	bl	8004916 <USB_ReadDevOutEPInterrupt>
 8000ee2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d00c      	beq.n	8000f08 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef0:	015a      	lsls	r2, r3, #5
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000efa:	461a      	mov	r2, r3
 8000efc:	2301      	movs	r3, #1
 8000efe:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8000f00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f000 fec2 	bl	8001c8c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	f003 0308 	and.w	r3, r3, #8
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d00c      	beq.n	8000f2c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8000f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f14:	015a      	lsls	r2, r3, #5
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	4413      	add	r3, r2
 8000f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000f1e:	461a      	mov	r2, r3
 8000f20:	2308      	movs	r3, #8
 8000f22:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8000f24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f000 fefe 	bl	8001d28 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	f003 0310 	and.w	r3, r3, #16
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d008      	beq.n	8000f48 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8000f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f38:	015a      	lsls	r2, r3, #5
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000f42:	461a      	mov	r2, r3
 8000f44:	2310      	movs	r3, #16
 8000f46:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	f003 0302 	and.w	r3, r3, #2
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d030      	beq.n	8000fb4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8000f52:	6a3b      	ldr	r3, [r7, #32]
 8000f54:	695b      	ldr	r3, [r3, #20]
 8000f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f5a:	2b80      	cmp	r3, #128	; 0x80
 8000f5c:	d109      	bne.n	8000f72 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	69fa      	ldr	r2, [r7, #28]
 8000f68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8000f6c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f70:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8000f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f74:	4613      	mov	r3, r2
 8000f76:	00db      	lsls	r3, r3, #3
 8000f78:	4413      	add	r3, r2
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	4413      	add	r3, r2
 8000f84:	3304      	adds	r3, #4
 8000f86:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	78db      	ldrb	r3, [r3, #3]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d108      	bne.n	8000fa2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	2200      	movs	r2, #0
 8000f94:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8000f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f007 f829 	bl	8007ff4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8000fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa4:	015a      	lsls	r2, r3, #5
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	4413      	add	r3, r2
 8000faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000fae:	461a      	mov	r2, r3
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	f003 0320 	and.w	r3, r3, #32
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d008      	beq.n	8000fd0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8000fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc0:	015a      	lsls	r2, r3, #5
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000fca:	461a      	mov	r2, r3
 8000fcc:	2320      	movs	r3, #32
 8000fce:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d009      	beq.n	8000fee <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8000fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fdc:	015a      	lsls	r2, r3, #5
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fec:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8000fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8000ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ff6:	085b      	lsrs	r3, r3, #1
 8000ff8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8000ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	f47f af62 	bne.w	8000ec6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4618      	mov	r0, r3
 8001008:	f003 fc3e 	bl	8004888 <USB_ReadInterrupts>
 800100c:	4603      	mov	r3, r0
 800100e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001012:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001016:	f040 80a4 	bne.w	8001162 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4618      	mov	r0, r3
 8001020:	f003 fc5f 	bl	80048e2 <USB_ReadDevAllInEpInterrupt>
 8001024:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001026:	2300      	movs	r3, #0
 8001028:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800102a:	e096      	b.n	800115a <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800102c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	2b00      	cmp	r3, #0
 8001034:	f000 808b 	beq.w	800114e <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800103e:	b2d2      	uxtb	r2, r2
 8001040:	4611      	mov	r1, r2
 8001042:	4618      	mov	r0, r3
 8001044:	f003 fc85 	bl	8004952 <USB_ReadDevInEPInterrupt>
 8001048:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	f003 0301 	and.w	r3, r3, #1
 8001050:	2b00      	cmp	r3, #0
 8001052:	d020      	beq.n	8001096 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001056:	f003 030f 	and.w	r3, r3, #15
 800105a:	2201      	movs	r2, #1
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001068:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	43db      	mvns	r3, r3
 800106e:	69f9      	ldr	r1, [r7, #28]
 8001070:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001074:	4013      	ands	r3, r2
 8001076:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107a:	015a      	lsls	r2, r3, #5
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	4413      	add	r3, r2
 8001080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001084:	461a      	mov	r2, r3
 8001086:	2301      	movs	r3, #1
 8001088:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800108a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108c:	b2db      	uxtb	r3, r3
 800108e:	4619      	mov	r1, r3
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f006 ff1a 	bl	8007eca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	f003 0308 	and.w	r3, r3, #8
 800109c:	2b00      	cmp	r3, #0
 800109e:	d008      	beq.n	80010b2 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80010a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a2:	015a      	lsls	r2, r3, #5
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	4413      	add	r3, r2
 80010a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80010ac:	461a      	mov	r2, r3
 80010ae:	2308      	movs	r3, #8
 80010b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	f003 0310 	and.w	r3, r3, #16
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d008      	beq.n	80010ce <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80010bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010be:	015a      	lsls	r2, r3, #5
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	4413      	add	r3, r2
 80010c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80010c8:	461a      	mov	r2, r3
 80010ca:	2310      	movs	r3, #16
 80010cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d008      	beq.n	80010ea <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80010d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010da:	015a      	lsls	r2, r3, #5
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	4413      	add	r3, r2
 80010e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80010e4:	461a      	mov	r2, r3
 80010e6:	2340      	movs	r3, #64	; 0x40
 80010e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	f003 0302 	and.w	r3, r3, #2
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d023      	beq.n	800113c <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80010f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80010f6:	6a38      	ldr	r0, [r7, #32]
 80010f8:	f002 fc4c 	bl	8003994 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80010fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010fe:	4613      	mov	r3, r2
 8001100:	00db      	lsls	r3, r3, #3
 8001102:	4413      	add	r3, r2
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	3338      	adds	r3, #56	; 0x38
 8001108:	687a      	ldr	r2, [r7, #4]
 800110a:	4413      	add	r3, r2
 800110c:	3304      	adds	r3, #4
 800110e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	78db      	ldrb	r3, [r3, #3]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d108      	bne.n	800112a <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	2200      	movs	r2, #0
 800111c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800111e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001120:	b2db      	uxtb	r3, r3
 8001122:	4619      	mov	r1, r3
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f006 ff77 	bl	8008018 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800112a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112c:	015a      	lsls	r2, r3, #5
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	4413      	add	r3, r2
 8001132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001136:	461a      	mov	r2, r3
 8001138:	2302      	movs	r3, #2
 800113a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001146:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f000 fd17 	bl	8001b7c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800114e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001150:	3301      	adds	r3, #1
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001156:	085b      	lsrs	r3, r3, #1
 8001158:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800115a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800115c:	2b00      	cmp	r3, #0
 800115e:	f47f af65 	bne.w	800102c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4618      	mov	r0, r3
 8001168:	f003 fb8e 	bl	8004888 <USB_ReadInterrupts>
 800116c:	4603      	mov	r3, r0
 800116e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001172:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001176:	d122      	bne.n	80011be <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	69fa      	ldr	r2, [r7, #28]
 8001182:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001186:	f023 0301 	bic.w	r3, r3, #1
 800118a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001192:	2b01      	cmp	r3, #1
 8001194:	d108      	bne.n	80011a8 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2200      	movs	r2, #0
 800119a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800119e:	2100      	movs	r1, #0
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f007 f9e1 	bl	8008568 <HAL_PCDEx_LPM_Callback>
 80011a6:	e002      	b.n	80011ae <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f006 fefb 	bl	8007fa4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	695a      	ldr	r2, [r3, #20]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80011bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f003 fb60 	bl	8004888 <USB_ReadInterrupts>
 80011c8:	4603      	mov	r3, r0
 80011ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80011d2:	d112      	bne.n	80011fa <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	f003 0301 	and.w	r3, r3, #1
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d102      	bne.n	80011ea <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f006 feb7 	bl	8007f58 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	695a      	ldr	r2, [r3, #20]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80011f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4618      	mov	r0, r3
 8001200:	f003 fb42 	bl	8004888 <USB_ReadInterrupts>
 8001204:	4603      	mov	r3, r0
 8001206:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800120a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800120e:	d121      	bne.n	8001254 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	695a      	ldr	r2, [r3, #20]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800121e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001226:	2b00      	cmp	r3, #0
 8001228:	d111      	bne.n	800124e <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2201      	movs	r2, #1
 800122e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001238:	089b      	lsrs	r3, r3, #2
 800123a:	f003 020f 	and.w	r2, r3, #15
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001244:	2101      	movs	r1, #1
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f007 f98e 	bl	8008568 <HAL_PCDEx_LPM_Callback>
 800124c:	e002      	b.n	8001254 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f006 fe82 	bl	8007f58 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4618      	mov	r0, r3
 800125a:	f003 fb15 	bl	8004888 <USB_ReadInterrupts>
 800125e:	4603      	mov	r3, r0
 8001260:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001264:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001268:	f040 80b5 	bne.w	80013d6 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	69fa      	ldr	r2, [r7, #28]
 8001276:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800127a:	f023 0301 	bic.w	r3, r3, #1
 800127e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2110      	movs	r1, #16
 8001286:	4618      	mov	r0, r3
 8001288:	f002 fb84 	bl	8003994 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800128c:	2300      	movs	r3, #0
 800128e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001290:	e046      	b.n	8001320 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001294:	015a      	lsls	r2, r3, #5
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	4413      	add	r3, r2
 800129a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800129e:	461a      	mov	r2, r3
 80012a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80012a4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80012a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012a8:	015a      	lsls	r2, r3, #5
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	4413      	add	r3, r2
 80012ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012b6:	0151      	lsls	r1, r2, #5
 80012b8:	69fa      	ldr	r2, [r7, #28]
 80012ba:	440a      	add	r2, r1
 80012bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80012c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80012c4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80012c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012c8:	015a      	lsls	r2, r3, #5
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	4413      	add	r3, r2
 80012ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012d2:	461a      	mov	r2, r3
 80012d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80012d8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80012da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012dc:	015a      	lsls	r2, r3, #5
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	4413      	add	r3, r2
 80012e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012ea:	0151      	lsls	r1, r2, #5
 80012ec:	69fa      	ldr	r2, [r7, #28]
 80012ee:	440a      	add	r2, r1
 80012f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80012f4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80012f8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80012fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012fc:	015a      	lsls	r2, r3, #5
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	4413      	add	r3, r2
 8001302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800130a:	0151      	lsls	r1, r2, #5
 800130c:	69fa      	ldr	r2, [r7, #28]
 800130e:	440a      	add	r2, r1
 8001310:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001314:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001318:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800131a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800131c:	3301      	adds	r3, #1
 800131e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001326:	429a      	cmp	r2, r3
 8001328:	d3b3      	bcc.n	8001292 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001330:	69db      	ldr	r3, [r3, #28]
 8001332:	69fa      	ldr	r2, [r7, #28]
 8001334:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001338:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800133c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	2b00      	cmp	r3, #0
 8001344:	d016      	beq.n	8001374 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800134c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001350:	69fa      	ldr	r2, [r7, #28]
 8001352:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001356:	f043 030b 	orr.w	r3, r3, #11
 800135a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001366:	69fa      	ldr	r2, [r7, #28]
 8001368:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800136c:	f043 030b 	orr.w	r3, r3, #11
 8001370:	6453      	str	r3, [r2, #68]	; 0x44
 8001372:	e015      	b.n	80013a0 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800137a:	695b      	ldr	r3, [r3, #20]
 800137c:	69fa      	ldr	r2, [r7, #28]
 800137e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001382:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001386:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800138a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001392:	691b      	ldr	r3, [r3, #16]
 8001394:	69fa      	ldr	r2, [r7, #28]
 8001396:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800139a:	f043 030b 	orr.w	r3, r3, #11
 800139e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	69fa      	ldr	r2, [r7, #28]
 80013aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80013ae:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80013b2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80013be:	4619      	mov	r1, r3
 80013c0:	4610      	mov	r0, r2
 80013c2:	f003 fb25 	bl	8004a10 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	695a      	ldr	r2, [r3, #20]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80013d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4618      	mov	r0, r3
 80013dc:	f003 fa54 	bl	8004888 <USB_ReadInterrupts>
 80013e0:	4603      	mov	r3, r0
 80013e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013ea:	d124      	bne.n	8001436 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f003 faea 	bl	80049ca <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f002 fb47 	bl	8003a8e <USB_GetDevSpeed>
 8001400:	4603      	mov	r3, r0
 8001402:	461a      	mov	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681c      	ldr	r4, [r3, #0]
 800140c:	f001 fb18 	bl	8002a40 <HAL_RCC_GetHCLKFreq>
 8001410:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001416:	b2db      	uxtb	r3, r3
 8001418:	461a      	mov	r2, r3
 800141a:	4620      	mov	r0, r4
 800141c:	f002 f864 	bl	80034e8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f006 fd7a 	bl	8007f1a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	695a      	ldr	r2, [r3, #20]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001434:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4618      	mov	r0, r3
 800143c:	f003 fa24 	bl	8004888 <USB_ReadInterrupts>
 8001440:	4603      	mov	r3, r0
 8001442:	f003 0308 	and.w	r3, r3, #8
 8001446:	2b08      	cmp	r3, #8
 8001448:	d10a      	bne.n	8001460 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f006 fd57 	bl	8007efe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	695a      	ldr	r2, [r3, #20]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f002 0208 	and.w	r2, r2, #8
 800145e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4618      	mov	r0, r3
 8001466:	f003 fa0f 	bl	8004888 <USB_ReadInterrupts>
 800146a:	4603      	mov	r3, r0
 800146c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001470:	2b80      	cmp	r3, #128	; 0x80
 8001472:	d122      	bne.n	80014ba <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001474:	6a3b      	ldr	r3, [r7, #32]
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800147c:	6a3b      	ldr	r3, [r7, #32]
 800147e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001480:	2301      	movs	r3, #1
 8001482:	627b      	str	r3, [r7, #36]	; 0x24
 8001484:	e014      	b.n	80014b0 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001486:	6879      	ldr	r1, [r7, #4]
 8001488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800148a:	4613      	mov	r3, r2
 800148c:	00db      	lsls	r3, r3, #3
 800148e:	4413      	add	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	440b      	add	r3, r1
 8001494:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d105      	bne.n	80014aa <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800149e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	4619      	mov	r1, r3
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f000 fb0b 	bl	8001ac0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80014aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ac:	3301      	adds	r3, #1
 80014ae:	627b      	str	r3, [r7, #36]	; 0x24
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d3e5      	bcc.n	8001486 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4618      	mov	r0, r3
 80014c0:	f003 f9e2 	bl	8004888 <USB_ReadInterrupts>
 80014c4:	4603      	mov	r3, r0
 80014c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80014ce:	d13b      	bne.n	8001548 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80014d0:	2301      	movs	r3, #1
 80014d2:	627b      	str	r3, [r7, #36]	; 0x24
 80014d4:	e02b      	b.n	800152e <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80014d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d8:	015a      	lsls	r2, r3, #5
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	4413      	add	r3, r2
 80014de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80014e6:	6879      	ldr	r1, [r7, #4]
 80014e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014ea:	4613      	mov	r3, r2
 80014ec:	00db      	lsls	r3, r3, #3
 80014ee:	4413      	add	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	440b      	add	r3, r1
 80014f4:	3340      	adds	r3, #64	; 0x40
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d115      	bne.n	8001528 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80014fc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80014fe:	2b00      	cmp	r3, #0
 8001500:	da12      	bge.n	8001528 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001502:	6879      	ldr	r1, [r7, #4]
 8001504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001506:	4613      	mov	r3, r2
 8001508:	00db      	lsls	r3, r3, #3
 800150a:	4413      	add	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	440b      	add	r3, r1
 8001510:	333f      	adds	r3, #63	; 0x3f
 8001512:	2201      	movs	r2, #1
 8001514:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001518:	b2db      	uxtb	r3, r3
 800151a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800151e:	b2db      	uxtb	r3, r3
 8001520:	4619      	mov	r1, r3
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f000 facc 	bl	8001ac0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152a:	3301      	adds	r3, #1
 800152c:	627b      	str	r3, [r7, #36]	; 0x24
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001534:	429a      	cmp	r2, r3
 8001536:	d3ce      	bcc.n	80014d6 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	695a      	ldr	r2, [r3, #20]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001546:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f003 f99b 	bl	8004888 <USB_ReadInterrupts>
 8001552:	4603      	mov	r3, r0
 8001554:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001558:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800155c:	d155      	bne.n	800160a <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800155e:	2301      	movs	r3, #1
 8001560:	627b      	str	r3, [r7, #36]	; 0x24
 8001562:	e045      	b.n	80015f0 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001566:	015a      	lsls	r2, r3, #5
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	4413      	add	r3, r2
 800156c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001574:	6879      	ldr	r1, [r7, #4]
 8001576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001578:	4613      	mov	r3, r2
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	4413      	add	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	440b      	add	r3, r1
 8001582:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d12e      	bne.n	80015ea <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800158c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800158e:	2b00      	cmp	r3, #0
 8001590:	da2b      	bge.n	80015ea <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800159e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d121      	bne.n	80015ea <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80015a6:	6879      	ldr	r1, [r7, #4]
 80015a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015aa:	4613      	mov	r3, r2
 80015ac:	00db      	lsls	r3, r3, #3
 80015ae:	4413      	add	r3, r2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	440b      	add	r3, r1
 80015b4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80015b8:	2201      	movs	r2, #1
 80015ba:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80015bc:	6a3b      	ldr	r3, [r7, #32]
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80015c4:	6a3b      	ldr	r3, [r7, #32]
 80015c6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80015c8:	6a3b      	ldr	r3, [r7, #32]
 80015ca:	695b      	ldr	r3, [r3, #20]
 80015cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d10a      	bne.n	80015ea <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	69fa      	ldr	r2, [r7, #28]
 80015de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015e6:	6053      	str	r3, [r2, #4]
            break;
 80015e8:	e007      	b.n	80015fa <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80015ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ec:	3301      	adds	r3, #1
 80015ee:	627b      	str	r3, [r7, #36]	; 0x24
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d3b4      	bcc.n	8001564 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	695a      	ldr	r2, [r3, #20]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001608:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4618      	mov	r0, r3
 8001610:	f003 f93a 	bl	8004888 <USB_ReadInterrupts>
 8001614:	4603      	mov	r3, r0
 8001616:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800161a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800161e:	d10a      	bne.n	8001636 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f006 fd0b 	bl	800803c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	695a      	ldr	r2, [r3, #20]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001634:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4618      	mov	r0, r3
 800163c:	f003 f924 	bl	8004888 <USB_ReadInterrupts>
 8001640:	4603      	mov	r3, r0
 8001642:	f003 0304 	and.w	r3, r3, #4
 8001646:	2b04      	cmp	r3, #4
 8001648:	d115      	bne.n	8001676 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	f003 0304 	and.w	r3, r3, #4
 8001658:	2b00      	cmp	r3, #0
 800165a:	d002      	beq.n	8001662 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f006 fcfb 	bl	8008058 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	6859      	ldr	r1, [r3, #4]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	430a      	orrs	r2, r1
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	e000      	b.n	8001676 <HAL_PCD_IRQHandler+0x920>
      return;
 8001674:	bf00      	nop
    }
  }
}
 8001676:	3734      	adds	r7, #52	; 0x34
 8001678:	46bd      	mov	sp, r7
 800167a:	bd90      	pop	{r4, r7, pc}

0800167c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	460b      	mov	r3, r1
 8001686:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800168e:	2b01      	cmp	r3, #1
 8001690:	d101      	bne.n	8001696 <HAL_PCD_SetAddress+0x1a>
 8001692:	2302      	movs	r3, #2
 8001694:	e013      	b.n	80016be <HAL_PCD_SetAddress+0x42>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2201      	movs	r2, #1
 800169a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	78fa      	ldrb	r2, [r7, #3]
 80016a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	78fa      	ldrb	r2, [r7, #3]
 80016ac:	4611      	mov	r1, r2
 80016ae:	4618      	mov	r0, r3
 80016b0:	f003 f882 	bl	80047b8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b084      	sub	sp, #16
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
 80016ce:	4608      	mov	r0, r1
 80016d0:	4611      	mov	r1, r2
 80016d2:	461a      	mov	r2, r3
 80016d4:	4603      	mov	r3, r0
 80016d6:	70fb      	strb	r3, [r7, #3]
 80016d8:	460b      	mov	r3, r1
 80016da:	803b      	strh	r3, [r7, #0]
 80016dc:	4613      	mov	r3, r2
 80016de:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80016e0:	2300      	movs	r3, #0
 80016e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80016e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	da0f      	bge.n	800170c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016ec:	78fb      	ldrb	r3, [r7, #3]
 80016ee:	f003 020f 	and.w	r2, r3, #15
 80016f2:	4613      	mov	r3, r2
 80016f4:	00db      	lsls	r3, r3, #3
 80016f6:	4413      	add	r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	3338      	adds	r3, #56	; 0x38
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	4413      	add	r3, r2
 8001700:	3304      	adds	r3, #4
 8001702:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2201      	movs	r2, #1
 8001708:	705a      	strb	r2, [r3, #1]
 800170a:	e00f      	b.n	800172c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800170c:	78fb      	ldrb	r3, [r7, #3]
 800170e:	f003 020f 	and.w	r2, r3, #15
 8001712:	4613      	mov	r3, r2
 8001714:	00db      	lsls	r3, r3, #3
 8001716:	4413      	add	r3, r2
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	4413      	add	r3, r2
 8001722:	3304      	adds	r3, #4
 8001724:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2200      	movs	r2, #0
 800172a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800172c:	78fb      	ldrb	r3, [r7, #3]
 800172e:	f003 030f 	and.w	r3, r3, #15
 8001732:	b2da      	uxtb	r2, r3
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001738:	883a      	ldrh	r2, [r7, #0]
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	78ba      	ldrb	r2, [r7, #2]
 8001742:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	785b      	ldrb	r3, [r3, #1]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d004      	beq.n	8001756 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	b29a      	uxth	r2, r3
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001756:	78bb      	ldrb	r3, [r7, #2]
 8001758:	2b02      	cmp	r3, #2
 800175a:	d102      	bne.n	8001762 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2200      	movs	r2, #0
 8001760:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001768:	2b01      	cmp	r3, #1
 800176a:	d101      	bne.n	8001770 <HAL_PCD_EP_Open+0xaa>
 800176c:	2302      	movs	r3, #2
 800176e:	e00e      	b.n	800178e <HAL_PCD_EP_Open+0xc8>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2201      	movs	r2, #1
 8001774:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	68f9      	ldr	r1, [r7, #12]
 800177e:	4618      	mov	r0, r3
 8001780:	f002 f9a4 	bl	8003acc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800178c:	7afb      	ldrb	r3, [r7, #11]
}
 800178e:	4618      	mov	r0, r3
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b084      	sub	sp, #16
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
 800179e:	460b      	mov	r3, r1
 80017a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80017a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	da0f      	bge.n	80017ca <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017aa:	78fb      	ldrb	r3, [r7, #3]
 80017ac:	f003 020f 	and.w	r2, r3, #15
 80017b0:	4613      	mov	r3, r2
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	4413      	add	r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	3338      	adds	r3, #56	; 0x38
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	4413      	add	r3, r2
 80017be:	3304      	adds	r3, #4
 80017c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2201      	movs	r2, #1
 80017c6:	705a      	strb	r2, [r3, #1]
 80017c8:	e00f      	b.n	80017ea <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017ca:	78fb      	ldrb	r3, [r7, #3]
 80017cc:	f003 020f 	and.w	r2, r3, #15
 80017d0:	4613      	mov	r3, r2
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	4413      	add	r3, r2
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	4413      	add	r3, r2
 80017e0:	3304      	adds	r3, #4
 80017e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2200      	movs	r2, #0
 80017e8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80017ea:	78fb      	ldrb	r3, [r7, #3]
 80017ec:	f003 030f 	and.w	r3, r3, #15
 80017f0:	b2da      	uxtb	r2, r3
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d101      	bne.n	8001804 <HAL_PCD_EP_Close+0x6e>
 8001800:	2302      	movs	r3, #2
 8001802:	e00e      	b.n	8001822 <HAL_PCD_EP_Close+0x8c>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2201      	movs	r2, #1
 8001808:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	68f9      	ldr	r1, [r7, #12]
 8001812:	4618      	mov	r0, r3
 8001814:	f002 f9e2 	bl	8003bdc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b086      	sub	sp, #24
 800182e:	af00      	add	r7, sp, #0
 8001830:	60f8      	str	r0, [r7, #12]
 8001832:	607a      	str	r2, [r7, #4]
 8001834:	603b      	str	r3, [r7, #0]
 8001836:	460b      	mov	r3, r1
 8001838:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800183a:	7afb      	ldrb	r3, [r7, #11]
 800183c:	f003 020f 	and.w	r2, r3, #15
 8001840:	4613      	mov	r3, r2
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	4413      	add	r3, r2
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800184c:	68fa      	ldr	r2, [r7, #12]
 800184e:	4413      	add	r3, r2
 8001850:	3304      	adds	r3, #4
 8001852:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	683a      	ldr	r2, [r7, #0]
 800185e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	2200      	movs	r2, #0
 8001864:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	2200      	movs	r2, #0
 800186a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800186c:	7afb      	ldrb	r3, [r7, #11]
 800186e:	f003 030f 	and.w	r3, r3, #15
 8001872:	b2da      	uxtb	r2, r3
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001878:	7afb      	ldrb	r3, [r7, #11]
 800187a:	f003 030f 	and.w	r3, r3, #15
 800187e:	2b00      	cmp	r3, #0
 8001880:	d106      	bne.n	8001890 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6979      	ldr	r1, [r7, #20]
 8001888:	4618      	mov	r0, r3
 800188a:	f002 fc63 	bl	8004154 <USB_EP0StartXfer>
 800188e:	e005      	b.n	800189c <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	6979      	ldr	r1, [r7, #20]
 8001896:	4618      	mov	r0, r3
 8001898:	f002 fa7c 	bl	8003d94 <USB_EPStartXfer>
  }

  return HAL_OK;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3718      	adds	r7, #24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
 80018ae:	460b      	mov	r3, r1
 80018b0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80018b2:	78fb      	ldrb	r3, [r7, #3]
 80018b4:	f003 020f 	and.w	r2, r3, #15
 80018b8:	6879      	ldr	r1, [r7, #4]
 80018ba:	4613      	mov	r3, r2
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	4413      	add	r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	440b      	add	r3, r1
 80018c4:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80018c8:	681b      	ldr	r3, [r3, #0]
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b086      	sub	sp, #24
 80018da:	af00      	add	r7, sp, #0
 80018dc:	60f8      	str	r0, [r7, #12]
 80018de:	607a      	str	r2, [r7, #4]
 80018e0:	603b      	str	r3, [r7, #0]
 80018e2:	460b      	mov	r3, r1
 80018e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018e6:	7afb      	ldrb	r3, [r7, #11]
 80018e8:	f003 020f 	and.w	r2, r3, #15
 80018ec:	4613      	mov	r3, r2
 80018ee:	00db      	lsls	r3, r3, #3
 80018f0:	4413      	add	r3, r2
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	3338      	adds	r3, #56	; 0x38
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	4413      	add	r3, r2
 80018fa:	3304      	adds	r3, #4
 80018fc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	683a      	ldr	r2, [r7, #0]
 8001908:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	2200      	movs	r2, #0
 800190e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	2201      	movs	r2, #1
 8001914:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001916:	7afb      	ldrb	r3, [r7, #11]
 8001918:	f003 030f 	and.w	r3, r3, #15
 800191c:	b2da      	uxtb	r2, r3
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001922:	7afb      	ldrb	r3, [r7, #11]
 8001924:	f003 030f 	and.w	r3, r3, #15
 8001928:	2b00      	cmp	r3, #0
 800192a:	d106      	bne.n	800193a <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	6979      	ldr	r1, [r7, #20]
 8001932:	4618      	mov	r0, r3
 8001934:	f002 fc0e 	bl	8004154 <USB_EP0StartXfer>
 8001938:	e005      	b.n	8001946 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6979      	ldr	r1, [r7, #20]
 8001940:	4618      	mov	r0, r3
 8001942:	f002 fa27 	bl	8003d94 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001946:	2300      	movs	r3, #0
}
 8001948:	4618      	mov	r0, r3
 800194a:	3718      	adds	r7, #24
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	460b      	mov	r3, r1
 800195a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800195c:	78fb      	ldrb	r3, [r7, #3]
 800195e:	f003 020f 	and.w	r2, r3, #15
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	429a      	cmp	r2, r3
 8001968:	d901      	bls.n	800196e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e04e      	b.n	8001a0c <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800196e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001972:	2b00      	cmp	r3, #0
 8001974:	da0f      	bge.n	8001996 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001976:	78fb      	ldrb	r3, [r7, #3]
 8001978:	f003 020f 	and.w	r2, r3, #15
 800197c:	4613      	mov	r3, r2
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	4413      	add	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	3338      	adds	r3, #56	; 0x38
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	4413      	add	r3, r2
 800198a:	3304      	adds	r3, #4
 800198c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2201      	movs	r2, #1
 8001992:	705a      	strb	r2, [r3, #1]
 8001994:	e00d      	b.n	80019b2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001996:	78fa      	ldrb	r2, [r7, #3]
 8001998:	4613      	mov	r3, r2
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	4413      	add	r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	4413      	add	r3, r2
 80019a8:	3304      	adds	r3, #4
 80019aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2200      	movs	r2, #0
 80019b0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2201      	movs	r2, #1
 80019b6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019b8:	78fb      	ldrb	r3, [r7, #3]
 80019ba:	f003 030f 	and.w	r3, r3, #15
 80019be:	b2da      	uxtb	r2, r3
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d101      	bne.n	80019d2 <HAL_PCD_EP_SetStall+0x82>
 80019ce:	2302      	movs	r3, #2
 80019d0:	e01c      	b.n	8001a0c <HAL_PCD_EP_SetStall+0xbc>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2201      	movs	r2, #1
 80019d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	68f9      	ldr	r1, [r7, #12]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f002 fe15 	bl	8004610 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80019e6:	78fb      	ldrb	r3, [r7, #3]
 80019e8:	f003 030f 	and.w	r3, r3, #15
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d108      	bne.n	8001a02 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80019fa:	4619      	mov	r1, r3
 80019fc:	4610      	mov	r0, r2
 80019fe:	f003 f807 	bl	8004a10 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3710      	adds	r7, #16
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001a20:	78fb      	ldrb	r3, [r7, #3]
 8001a22:	f003 020f 	and.w	r2, r3, #15
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d901      	bls.n	8001a32 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e042      	b.n	8001ab8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	da0f      	bge.n	8001a5a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a3a:	78fb      	ldrb	r3, [r7, #3]
 8001a3c:	f003 020f 	and.w	r2, r3, #15
 8001a40:	4613      	mov	r3, r2
 8001a42:	00db      	lsls	r3, r3, #3
 8001a44:	4413      	add	r3, r2
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	3338      	adds	r3, #56	; 0x38
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	3304      	adds	r3, #4
 8001a50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2201      	movs	r2, #1
 8001a56:	705a      	strb	r2, [r3, #1]
 8001a58:	e00f      	b.n	8001a7a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a5a:	78fb      	ldrb	r3, [r7, #3]
 8001a5c:	f003 020f 	and.w	r2, r3, #15
 8001a60:	4613      	mov	r3, r2
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	4413      	add	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	4413      	add	r3, r2
 8001a70:	3304      	adds	r3, #4
 8001a72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2200      	movs	r2, #0
 8001a78:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a80:	78fb      	ldrb	r3, [r7, #3]
 8001a82:	f003 030f 	and.w	r3, r3, #15
 8001a86:	b2da      	uxtb	r2, r3
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d101      	bne.n	8001a9a <HAL_PCD_EP_ClrStall+0x86>
 8001a96:	2302      	movs	r3, #2
 8001a98:	e00e      	b.n	8001ab8 <HAL_PCD_EP_ClrStall+0xa4>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	68f9      	ldr	r1, [r7, #12]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f002 fe1f 	bl	80046ec <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	460b      	mov	r3, r1
 8001aca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001acc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	da0c      	bge.n	8001aee <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ad4:	78fb      	ldrb	r3, [r7, #3]
 8001ad6:	f003 020f 	and.w	r2, r3, #15
 8001ada:	4613      	mov	r3, r2
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	4413      	add	r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	3338      	adds	r3, #56	; 0x38
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	3304      	adds	r3, #4
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	e00c      	b.n	8001b08 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001aee:	78fb      	ldrb	r3, [r7, #3]
 8001af0:	f003 020f 	and.w	r2, r3, #15
 8001af4:	4613      	mov	r3, r2
 8001af6:	00db      	lsls	r3, r3, #3
 8001af8:	4413      	add	r3, r2
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	4413      	add	r3, r2
 8001b04:	3304      	adds	r3, #4
 8001b06:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	68f9      	ldr	r1, [r7, #12]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f002 fc42 	bl	8004398 <USB_EPStopXfer>
 8001b14:	4603      	mov	r3, r0
 8001b16:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001b18:	7afb      	ldrb	r3, [r7, #11]
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b082      	sub	sp, #8
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d101      	bne.n	8001b3c <HAL_PCD_EP_Flush+0x1a>
 8001b38:	2302      	movs	r3, #2
 8001b3a:	e01b      	b.n	8001b74 <HAL_PCD_EP_Flush+0x52>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((ep_addr & 0x80U) == 0x80U)
 8001b44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	da09      	bge.n	8001b60 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	78fb      	ldrb	r3, [r7, #3]
 8001b52:	f003 030f 	and.w	r3, r3, #15
 8001b56:	4619      	mov	r1, r3
 8001b58:	4610      	mov	r0, r2
 8001b5a:	f001 ff1b 	bl	8003994 <USB_FlushTxFifo>
 8001b5e:	e004      	b.n	8001b6a <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f001 ff49 	bl	80039fc <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b088      	sub	sp, #32
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	4613      	mov	r3, r2
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	4413      	add	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	3338      	adds	r3, #56	; 0x38
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	3304      	adds	r3, #4
 8001ba2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6a1a      	ldr	r2, [r3, #32]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d901      	bls.n	8001bb4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e067      	b.n	8001c84 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	699a      	ldr	r2, [r3, #24]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6a1b      	ldr	r3, [r3, #32]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	69fa      	ldr	r2, [r7, #28]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d902      	bls.n	8001bd0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	3303      	adds	r3, #3
 8001bd4:	089b      	lsrs	r3, r3, #2
 8001bd6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001bd8:	e026      	b.n	8001c28 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	699a      	ldr	r2, [r3, #24]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	6a1b      	ldr	r3, [r3, #32]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	69fa      	ldr	r2, [r7, #28]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d902      	bls.n	8001bf6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	3303      	adds	r3, #3
 8001bfa:	089b      	lsrs	r3, r3, #2
 8001bfc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	6919      	ldr	r1, [r3, #16]
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	b2da      	uxtb	r2, r3
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	6978      	ldr	r0, [r7, #20]
 8001c0c:	f002 fc6e 	bl	80044ec <USB_WritePacket>

    ep->xfer_buff  += len;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	691a      	ldr	r2, [r3, #16]
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	441a      	add	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	6a1a      	ldr	r2, [r3, #32]
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	441a      	add	r2, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	015a      	lsls	r2, r3, #5
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	4413      	add	r3, r2
 8001c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c34:	699b      	ldr	r3, [r3, #24]
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d809      	bhi.n	8001c52 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	6a1a      	ldr	r2, [r3, #32]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d203      	bcs.n	8001c52 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	699b      	ldr	r3, [r3, #24]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d1c3      	bne.n	8001bda <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	699a      	ldr	r2, [r3, #24]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6a1b      	ldr	r3, [r3, #32]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d811      	bhi.n	8001c82 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	f003 030f 	and.w	r3, r3, #15
 8001c64:	2201      	movs	r2, #1
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	43db      	mvns	r3, r3
 8001c78:	6939      	ldr	r1, [r7, #16]
 8001c7a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001c7e:	4013      	ands	r3, r2
 8001c80:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3720      	adds	r7, #32
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	333c      	adds	r3, #60	; 0x3c
 8001ca4:	3304      	adds	r3, #4
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	015a      	lsls	r2, r3, #5
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	4a19      	ldr	r2, [pc, #100]	; (8001d24 <PCD_EP_OutXfrComplete_int+0x98>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d124      	bne.n	8001d0c <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d00a      	beq.n	8001ce2 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	015a      	lsls	r2, r3, #5
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cd8:	461a      	mov	r2, r3
 8001cda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cde:	6093      	str	r3, [r2, #8]
 8001ce0:	e01a      	b.n	8001d18 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	f003 0320 	and.w	r3, r3, #32
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d008      	beq.n	8001cfe <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	015a      	lsls	r2, r3, #5
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	2320      	movs	r3, #32
 8001cfc:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	4619      	mov	r1, r3
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f006 f8c5 	bl	8007e94 <HAL_PCD_DataOutStageCallback>
 8001d0a:	e005      	b.n	8001d18 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	4619      	mov	r1, r3
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f006 f8be 	bl	8007e94 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3718      	adds	r7, #24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	4f54310a 	.word	0x4f54310a

08001d28 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	333c      	adds	r3, #60	; 0x3c
 8001d40:	3304      	adds	r3, #4
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	015a      	lsls	r2, r3, #5
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	4a0c      	ldr	r2, [pc, #48]	; (8001d8c <PCD_EP_OutSetupPacket_int+0x64>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d90e      	bls.n	8001d7c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d009      	beq.n	8001d7c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	015a      	lsls	r2, r3, #5
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	4413      	add	r3, r2
 8001d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d74:	461a      	mov	r2, r3
 8001d76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d7a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f006 f877 	bl	8007e70 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8001d82:	2300      	movs	r3, #0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3718      	adds	r7, #24
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	4f54300a 	.word	0x4f54300a

08001d90 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	460b      	mov	r3, r1
 8001d9a:	70fb      	strb	r3, [r7, #3]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8001da8:	78fb      	ldrb	r3, [r7, #3]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d107      	bne.n	8001dbe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001dae:	883b      	ldrh	r3, [r7, #0]
 8001db0:	0419      	lsls	r1, r3, #16
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68ba      	ldr	r2, [r7, #8]
 8001db8:	430a      	orrs	r2, r1
 8001dba:	629a      	str	r2, [r3, #40]	; 0x28
 8001dbc:	e028      	b.n	8001e10 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc4:	0c1b      	lsrs	r3, r3, #16
 8001dc6:	68ba      	ldr	r2, [r7, #8]
 8001dc8:	4413      	add	r3, r2
 8001dca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001dcc:	2300      	movs	r3, #0
 8001dce:	73fb      	strb	r3, [r7, #15]
 8001dd0:	e00d      	b.n	8001dee <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	7bfb      	ldrb	r3, [r7, #15]
 8001dd8:	3340      	adds	r3, #64	; 0x40
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	4413      	add	r3, r2
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	0c1b      	lsrs	r3, r3, #16
 8001de2:	68ba      	ldr	r2, [r7, #8]
 8001de4:	4413      	add	r3, r2
 8001de6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001de8:	7bfb      	ldrb	r3, [r7, #15]
 8001dea:	3301      	adds	r3, #1
 8001dec:	73fb      	strb	r3, [r7, #15]
 8001dee:	7bfa      	ldrb	r2, [r7, #15]
 8001df0:	78fb      	ldrb	r3, [r7, #3]
 8001df2:	3b01      	subs	r3, #1
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d3ec      	bcc.n	8001dd2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8001df8:	883b      	ldrh	r3, [r7, #0]
 8001dfa:	0418      	lsls	r0, r3, #16
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6819      	ldr	r1, [r3, #0]
 8001e00:	78fb      	ldrb	r3, [r7, #3]
 8001e02:	3b01      	subs	r3, #1
 8001e04:	68ba      	ldr	r2, [r7, #8]
 8001e06:	4302      	orrs	r2, r0
 8001e08:	3340      	adds	r3, #64	; 0x40
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	440b      	add	r3, r1
 8001e0e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3714      	adds	r7, #20
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr

08001e1e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b083      	sub	sp, #12
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
 8001e26:	460b      	mov	r3, r1
 8001e28:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	887a      	ldrh	r2, [r7, #2]
 8001e30:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e72:	f043 0303 	orr.w	r3, r3, #3
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3714      	adds	r7, #20
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001e8c:	4b04      	ldr	r3, [pc, #16]	; (8001ea0 <HAL_PWREx_GetVoltageRange+0x18>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	40007000 	.word	0x40007000

08001ea4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001eb2:	d130      	bne.n	8001f16 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001eb4:	4b23      	ldr	r3, [pc, #140]	; (8001f44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ebc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ec0:	d038      	beq.n	8001f34 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ec2:	4b20      	ldr	r3, [pc, #128]	; (8001f44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001eca:	4a1e      	ldr	r2, [pc, #120]	; (8001f44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ecc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ed0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ed2:	4b1d      	ldr	r3, [pc, #116]	; (8001f48 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2232      	movs	r2, #50	; 0x32
 8001ed8:	fb02 f303 	mul.w	r3, r2, r3
 8001edc:	4a1b      	ldr	r2, [pc, #108]	; (8001f4c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001ede:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee2:	0c9b      	lsrs	r3, r3, #18
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ee8:	e002      	b.n	8001ef0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	3b01      	subs	r3, #1
 8001eee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ef0:	4b14      	ldr	r3, [pc, #80]	; (8001f44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ef2:	695b      	ldr	r3, [r3, #20]
 8001ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ef8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001efc:	d102      	bne.n	8001f04 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d1f2      	bne.n	8001eea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f04:	4b0f      	ldr	r3, [pc, #60]	; (8001f44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f06:	695b      	ldr	r3, [r3, #20]
 8001f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f10:	d110      	bne.n	8001f34 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e00f      	b.n	8001f36 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f16:	4b0b      	ldr	r3, [pc, #44]	; (8001f44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f22:	d007      	beq.n	8001f34 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f24:	4b07      	ldr	r3, [pc, #28]	; (8001f44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f2c:	4a05      	ldr	r2, [pc, #20]	; (8001f44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f32:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3714      	adds	r7, #20
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	40007000 	.word	0x40007000
 8001f48:	20000000 	.word	0x20000000
 8001f4c:	431bde83 	.word	0x431bde83

08001f50 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8001f54:	4b05      	ldr	r3, [pc, #20]	; (8001f6c <HAL_PWREx_EnableVddUSB+0x1c>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	4a04      	ldr	r2, [pc, #16]	; (8001f6c <HAL_PWREx_EnableVddUSB+0x1c>)
 8001f5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f5e:	6053      	str	r3, [r2, #4]
}
 8001f60:	bf00      	nop
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	40007000 	.word	0x40007000

08001f70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b088      	sub	sp, #32
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e3ca      	b.n	8002718 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f82:	4b97      	ldr	r3, [pc, #604]	; (80021e0 <HAL_RCC_OscConfig+0x270>)
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f003 030c 	and.w	r3, r3, #12
 8001f8a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f8c:	4b94      	ldr	r3, [pc, #592]	; (80021e0 <HAL_RCC_OscConfig+0x270>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	f003 0303 	and.w	r3, r3, #3
 8001f94:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0310 	and.w	r3, r3, #16
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f000 80e4 	beq.w	800216c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d007      	beq.n	8001fba <HAL_RCC_OscConfig+0x4a>
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	2b0c      	cmp	r3, #12
 8001fae:	f040 808b 	bne.w	80020c8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	f040 8087 	bne.w	80020c8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001fba:	4b89      	ldr	r3, [pc, #548]	; (80021e0 <HAL_RCC_OscConfig+0x270>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d005      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x62>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e3a2      	b.n	8002718 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a1a      	ldr	r2, [r3, #32]
 8001fd6:	4b82      	ldr	r3, [pc, #520]	; (80021e0 <HAL_RCC_OscConfig+0x270>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0308 	and.w	r3, r3, #8
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d004      	beq.n	8001fec <HAL_RCC_OscConfig+0x7c>
 8001fe2:	4b7f      	ldr	r3, [pc, #508]	; (80021e0 <HAL_RCC_OscConfig+0x270>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fea:	e005      	b.n	8001ff8 <HAL_RCC_OscConfig+0x88>
 8001fec:	4b7c      	ldr	r3, [pc, #496]	; (80021e0 <HAL_RCC_OscConfig+0x270>)
 8001fee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ff2:	091b      	lsrs	r3, r3, #4
 8001ff4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d223      	bcs.n	8002044 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	4618      	mov	r0, r3
 8002002:	f000 fd29 	bl	8002a58 <RCC_SetFlashLatencyFromMSIRange>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e383      	b.n	8002718 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002010:	4b73      	ldr	r3, [pc, #460]	; (80021e0 <HAL_RCC_OscConfig+0x270>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a72      	ldr	r2, [pc, #456]	; (80021e0 <HAL_RCC_OscConfig+0x270>)
 8002016:	f043 0308 	orr.w	r3, r3, #8
 800201a:	6013      	str	r3, [r2, #0]
 800201c:	4b70      	ldr	r3, [pc, #448]	; (80021e0 <HAL_RCC_OscConfig+0x270>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a1b      	ldr	r3, [r3, #32]
 8002028:	496d      	ldr	r1, [pc, #436]	; (80021e0 <HAL_RCC_OscConfig+0x270>)
 800202a:	4313      	orrs	r3, r2
 800202c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800202e:	4b6c      	ldr	r3, [pc, #432]	; (80021e0 <HAL_RCC_OscConfig+0x270>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	69db      	ldr	r3, [r3, #28]
 800203a:	021b      	lsls	r3, r3, #8
 800203c:	4968      	ldr	r1, [pc, #416]	; (80021e0 <HAL_RCC_OscConfig+0x270>)
 800203e:	4313      	orrs	r3, r2
 8002040:	604b      	str	r3, [r1, #4]
 8002042:	e025      	b.n	8002090 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002044:	4b66      	ldr	r3, [pc, #408]	; (80021e0 <HAL_RCC_OscConfig+0x270>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a65      	ldr	r2, [pc, #404]	; (80021e0 <HAL_RCC_OscConfig+0x270>)
 800204a:	f043 0308 	orr.w	r3, r3, #8
 800204e:	6013      	str	r3, [r2, #0]
 8002050:	4b63      	ldr	r3, [pc, #396]	; (80021e0 <HAL_RCC_OscConfig+0x270>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a1b      	ldr	r3, [r3, #32]
 800205c:	4960      	ldr	r1, [pc, #384]	; (80021e0 <HAL_RCC_OscConfig+0x270>)
 800205e:	4313      	orrs	r3, r2
 8002060:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002062:	4b5f      	ldr	r3, [pc, #380]	; (80021e0 <HAL_RCC_OscConfig+0x270>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	021b      	lsls	r3, r3, #8
 8002070:	495b      	ldr	r1, [pc, #364]	; (80021e0 <HAL_RCC_OscConfig+0x270>)
 8002072:	4313      	orrs	r3, r2
 8002074:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d109      	bne.n	8002090 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a1b      	ldr	r3, [r3, #32]
 8002080:	4618      	mov	r0, r3
 8002082:	f000 fce9 	bl	8002a58 <RCC_SetFlashLatencyFromMSIRange>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e343      	b.n	8002718 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002090:	f000 fc4a 	bl	8002928 <HAL_RCC_GetSysClockFreq>
 8002094:	4602      	mov	r2, r0
 8002096:	4b52      	ldr	r3, [pc, #328]	; (80021e0 <HAL_RCC_OscConfig+0x270>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	091b      	lsrs	r3, r3, #4
 800209c:	f003 030f 	and.w	r3, r3, #15
 80020a0:	4950      	ldr	r1, [pc, #320]	; (80021e4 <HAL_RCC_OscConfig+0x274>)
 80020a2:	5ccb      	ldrb	r3, [r1, r3]
 80020a4:	f003 031f 	and.w	r3, r3, #31
 80020a8:	fa22 f303 	lsr.w	r3, r2, r3
 80020ac:	4a4e      	ldr	r2, [pc, #312]	; (80021e8 <HAL_RCC_OscConfig+0x278>)
 80020ae:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80020b0:	4b4e      	ldr	r3, [pc, #312]	; (80021ec <HAL_RCC_OscConfig+0x27c>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7fe f9bf 	bl	8000438 <HAL_InitTick>
 80020ba:	4603      	mov	r3, r0
 80020bc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80020be:	7bfb      	ldrb	r3, [r7, #15]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d052      	beq.n	800216a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80020c4:	7bfb      	ldrb	r3, [r7, #15]
 80020c6:	e327      	b.n	8002718 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d032      	beq.n	8002136 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80020d0:	4b43      	ldr	r3, [pc, #268]	; (80021e0 <HAL_RCC_OscConfig+0x270>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a42      	ldr	r2, [pc, #264]	; (80021e0 <HAL_RCC_OscConfig+0x270>)
 80020d6:	f043 0301 	orr.w	r3, r3, #1
 80020da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020dc:	f7fe f9fc 	bl	80004d8 <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020e4:	f7fe f9f8 	bl	80004d8 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e310      	b.n	8002718 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020f6:	4b3a      	ldr	r3, [pc, #232]	; (80021e0 <HAL_RCC_OscConfig+0x270>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d0f0      	beq.n	80020e4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002102:	4b37      	ldr	r3, [pc, #220]	; (80021e0 <HAL_RCC_OscConfig+0x270>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a36      	ldr	r2, [pc, #216]	; (80021e0 <HAL_RCC_OscConfig+0x270>)
 8002108:	f043 0308 	orr.w	r3, r3, #8
 800210c:	6013      	str	r3, [r2, #0]
 800210e:	4b34      	ldr	r3, [pc, #208]	; (80021e0 <HAL_RCC_OscConfig+0x270>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a1b      	ldr	r3, [r3, #32]
 800211a:	4931      	ldr	r1, [pc, #196]	; (80021e0 <HAL_RCC_OscConfig+0x270>)
 800211c:	4313      	orrs	r3, r2
 800211e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002120:	4b2f      	ldr	r3, [pc, #188]	; (80021e0 <HAL_RCC_OscConfig+0x270>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	69db      	ldr	r3, [r3, #28]
 800212c:	021b      	lsls	r3, r3, #8
 800212e:	492c      	ldr	r1, [pc, #176]	; (80021e0 <HAL_RCC_OscConfig+0x270>)
 8002130:	4313      	orrs	r3, r2
 8002132:	604b      	str	r3, [r1, #4]
 8002134:	e01a      	b.n	800216c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002136:	4b2a      	ldr	r3, [pc, #168]	; (80021e0 <HAL_RCC_OscConfig+0x270>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a29      	ldr	r2, [pc, #164]	; (80021e0 <HAL_RCC_OscConfig+0x270>)
 800213c:	f023 0301 	bic.w	r3, r3, #1
 8002140:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002142:	f7fe f9c9 	bl	80004d8 <HAL_GetTick>
 8002146:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002148:	e008      	b.n	800215c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800214a:	f7fe f9c5 	bl	80004d8 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e2dd      	b.n	8002718 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800215c:	4b20      	ldr	r3, [pc, #128]	; (80021e0 <HAL_RCC_OscConfig+0x270>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1f0      	bne.n	800214a <HAL_RCC_OscConfig+0x1da>
 8002168:	e000      	b.n	800216c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800216a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0301 	and.w	r3, r3, #1
 8002174:	2b00      	cmp	r3, #0
 8002176:	d074      	beq.n	8002262 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	2b08      	cmp	r3, #8
 800217c:	d005      	beq.n	800218a <HAL_RCC_OscConfig+0x21a>
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	2b0c      	cmp	r3, #12
 8002182:	d10e      	bne.n	80021a2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	2b03      	cmp	r3, #3
 8002188:	d10b      	bne.n	80021a2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800218a:	4b15      	ldr	r3, [pc, #84]	; (80021e0 <HAL_RCC_OscConfig+0x270>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d064      	beq.n	8002260 <HAL_RCC_OscConfig+0x2f0>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d160      	bne.n	8002260 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e2ba      	b.n	8002718 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021aa:	d106      	bne.n	80021ba <HAL_RCC_OscConfig+0x24a>
 80021ac:	4b0c      	ldr	r3, [pc, #48]	; (80021e0 <HAL_RCC_OscConfig+0x270>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a0b      	ldr	r2, [pc, #44]	; (80021e0 <HAL_RCC_OscConfig+0x270>)
 80021b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021b6:	6013      	str	r3, [r2, #0]
 80021b8:	e026      	b.n	8002208 <HAL_RCC_OscConfig+0x298>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021c2:	d115      	bne.n	80021f0 <HAL_RCC_OscConfig+0x280>
 80021c4:	4b06      	ldr	r3, [pc, #24]	; (80021e0 <HAL_RCC_OscConfig+0x270>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a05      	ldr	r2, [pc, #20]	; (80021e0 <HAL_RCC_OscConfig+0x270>)
 80021ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021ce:	6013      	str	r3, [r2, #0]
 80021d0:	4b03      	ldr	r3, [pc, #12]	; (80021e0 <HAL_RCC_OscConfig+0x270>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a02      	ldr	r2, [pc, #8]	; (80021e0 <HAL_RCC_OscConfig+0x270>)
 80021d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021da:	6013      	str	r3, [r2, #0]
 80021dc:	e014      	b.n	8002208 <HAL_RCC_OscConfig+0x298>
 80021de:	bf00      	nop
 80021e0:	40021000 	.word	0x40021000
 80021e4:	08008710 	.word	0x08008710
 80021e8:	20000000 	.word	0x20000000
 80021ec:	20000004 	.word	0x20000004
 80021f0:	4ba0      	ldr	r3, [pc, #640]	; (8002474 <HAL_RCC_OscConfig+0x504>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a9f      	ldr	r2, [pc, #636]	; (8002474 <HAL_RCC_OscConfig+0x504>)
 80021f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021fa:	6013      	str	r3, [r2, #0]
 80021fc:	4b9d      	ldr	r3, [pc, #628]	; (8002474 <HAL_RCC_OscConfig+0x504>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a9c      	ldr	r2, [pc, #624]	; (8002474 <HAL_RCC_OscConfig+0x504>)
 8002202:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002206:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d013      	beq.n	8002238 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002210:	f7fe f962 	bl	80004d8 <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002218:	f7fe f95e 	bl	80004d8 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b64      	cmp	r3, #100	; 0x64
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e276      	b.n	8002718 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800222a:	4b92      	ldr	r3, [pc, #584]	; (8002474 <HAL_RCC_OscConfig+0x504>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d0f0      	beq.n	8002218 <HAL_RCC_OscConfig+0x2a8>
 8002236:	e014      	b.n	8002262 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002238:	f7fe f94e 	bl	80004d8 <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002240:	f7fe f94a 	bl	80004d8 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b64      	cmp	r3, #100	; 0x64
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e262      	b.n	8002718 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002252:	4b88      	ldr	r3, [pc, #544]	; (8002474 <HAL_RCC_OscConfig+0x504>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1f0      	bne.n	8002240 <HAL_RCC_OscConfig+0x2d0>
 800225e:	e000      	b.n	8002262 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002260:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d060      	beq.n	8002330 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	2b04      	cmp	r3, #4
 8002272:	d005      	beq.n	8002280 <HAL_RCC_OscConfig+0x310>
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	2b0c      	cmp	r3, #12
 8002278:	d119      	bne.n	80022ae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	2b02      	cmp	r3, #2
 800227e:	d116      	bne.n	80022ae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002280:	4b7c      	ldr	r3, [pc, #496]	; (8002474 <HAL_RCC_OscConfig+0x504>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002288:	2b00      	cmp	r3, #0
 800228a:	d005      	beq.n	8002298 <HAL_RCC_OscConfig+0x328>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d101      	bne.n	8002298 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e23f      	b.n	8002718 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002298:	4b76      	ldr	r3, [pc, #472]	; (8002474 <HAL_RCC_OscConfig+0x504>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	691b      	ldr	r3, [r3, #16]
 80022a4:	061b      	lsls	r3, r3, #24
 80022a6:	4973      	ldr	r1, [pc, #460]	; (8002474 <HAL_RCC_OscConfig+0x504>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022ac:	e040      	b.n	8002330 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d023      	beq.n	80022fe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022b6:	4b6f      	ldr	r3, [pc, #444]	; (8002474 <HAL_RCC_OscConfig+0x504>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a6e      	ldr	r2, [pc, #440]	; (8002474 <HAL_RCC_OscConfig+0x504>)
 80022bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c2:	f7fe f909 	bl	80004d8 <HAL_GetTick>
 80022c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022c8:	e008      	b.n	80022dc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ca:	f7fe f905 	bl	80004d8 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d901      	bls.n	80022dc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e21d      	b.n	8002718 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022dc:	4b65      	ldr	r3, [pc, #404]	; (8002474 <HAL_RCC_OscConfig+0x504>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d0f0      	beq.n	80022ca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022e8:	4b62      	ldr	r3, [pc, #392]	; (8002474 <HAL_RCC_OscConfig+0x504>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	061b      	lsls	r3, r3, #24
 80022f6:	495f      	ldr	r1, [pc, #380]	; (8002474 <HAL_RCC_OscConfig+0x504>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	604b      	str	r3, [r1, #4]
 80022fc:	e018      	b.n	8002330 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022fe:	4b5d      	ldr	r3, [pc, #372]	; (8002474 <HAL_RCC_OscConfig+0x504>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a5c      	ldr	r2, [pc, #368]	; (8002474 <HAL_RCC_OscConfig+0x504>)
 8002304:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002308:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800230a:	f7fe f8e5 	bl	80004d8 <HAL_GetTick>
 800230e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002310:	e008      	b.n	8002324 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002312:	f7fe f8e1 	bl	80004d8 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e1f9      	b.n	8002718 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002324:	4b53      	ldr	r3, [pc, #332]	; (8002474 <HAL_RCC_OscConfig+0x504>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800232c:	2b00      	cmp	r3, #0
 800232e:	d1f0      	bne.n	8002312 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0308 	and.w	r3, r3, #8
 8002338:	2b00      	cmp	r3, #0
 800233a:	d03c      	beq.n	80023b6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	695b      	ldr	r3, [r3, #20]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d01c      	beq.n	800237e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002344:	4b4b      	ldr	r3, [pc, #300]	; (8002474 <HAL_RCC_OscConfig+0x504>)
 8002346:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800234a:	4a4a      	ldr	r2, [pc, #296]	; (8002474 <HAL_RCC_OscConfig+0x504>)
 800234c:	f043 0301 	orr.w	r3, r3, #1
 8002350:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002354:	f7fe f8c0 	bl	80004d8 <HAL_GetTick>
 8002358:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800235c:	f7fe f8bc 	bl	80004d8 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e1d4      	b.n	8002718 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800236e:	4b41      	ldr	r3, [pc, #260]	; (8002474 <HAL_RCC_OscConfig+0x504>)
 8002370:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d0ef      	beq.n	800235c <HAL_RCC_OscConfig+0x3ec>
 800237c:	e01b      	b.n	80023b6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800237e:	4b3d      	ldr	r3, [pc, #244]	; (8002474 <HAL_RCC_OscConfig+0x504>)
 8002380:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002384:	4a3b      	ldr	r2, [pc, #236]	; (8002474 <HAL_RCC_OscConfig+0x504>)
 8002386:	f023 0301 	bic.w	r3, r3, #1
 800238a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800238e:	f7fe f8a3 	bl	80004d8 <HAL_GetTick>
 8002392:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002394:	e008      	b.n	80023a8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002396:	f7fe f89f 	bl	80004d8 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e1b7      	b.n	8002718 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023a8:	4b32      	ldr	r3, [pc, #200]	; (8002474 <HAL_RCC_OscConfig+0x504>)
 80023aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1ef      	bne.n	8002396 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0304 	and.w	r3, r3, #4
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f000 80a6 	beq.w	8002510 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023c4:	2300      	movs	r3, #0
 80023c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80023c8:	4b2a      	ldr	r3, [pc, #168]	; (8002474 <HAL_RCC_OscConfig+0x504>)
 80023ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d10d      	bne.n	80023f0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023d4:	4b27      	ldr	r3, [pc, #156]	; (8002474 <HAL_RCC_OscConfig+0x504>)
 80023d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d8:	4a26      	ldr	r2, [pc, #152]	; (8002474 <HAL_RCC_OscConfig+0x504>)
 80023da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023de:	6593      	str	r3, [r2, #88]	; 0x58
 80023e0:	4b24      	ldr	r3, [pc, #144]	; (8002474 <HAL_RCC_OscConfig+0x504>)
 80023e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e8:	60bb      	str	r3, [r7, #8]
 80023ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023ec:	2301      	movs	r3, #1
 80023ee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023f0:	4b21      	ldr	r3, [pc, #132]	; (8002478 <HAL_RCC_OscConfig+0x508>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d118      	bne.n	800242e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023fc:	4b1e      	ldr	r3, [pc, #120]	; (8002478 <HAL_RCC_OscConfig+0x508>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a1d      	ldr	r2, [pc, #116]	; (8002478 <HAL_RCC_OscConfig+0x508>)
 8002402:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002406:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002408:	f7fe f866 	bl	80004d8 <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002410:	f7fe f862 	bl	80004d8 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e17a      	b.n	8002718 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002422:	4b15      	ldr	r3, [pc, #84]	; (8002478 <HAL_RCC_OscConfig+0x508>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242a:	2b00      	cmp	r3, #0
 800242c:	d0f0      	beq.n	8002410 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d108      	bne.n	8002448 <HAL_RCC_OscConfig+0x4d8>
 8002436:	4b0f      	ldr	r3, [pc, #60]	; (8002474 <HAL_RCC_OscConfig+0x504>)
 8002438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243c:	4a0d      	ldr	r2, [pc, #52]	; (8002474 <HAL_RCC_OscConfig+0x504>)
 800243e:	f043 0301 	orr.w	r3, r3, #1
 8002442:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002446:	e029      	b.n	800249c <HAL_RCC_OscConfig+0x52c>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	2b05      	cmp	r3, #5
 800244e:	d115      	bne.n	800247c <HAL_RCC_OscConfig+0x50c>
 8002450:	4b08      	ldr	r3, [pc, #32]	; (8002474 <HAL_RCC_OscConfig+0x504>)
 8002452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002456:	4a07      	ldr	r2, [pc, #28]	; (8002474 <HAL_RCC_OscConfig+0x504>)
 8002458:	f043 0304 	orr.w	r3, r3, #4
 800245c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002460:	4b04      	ldr	r3, [pc, #16]	; (8002474 <HAL_RCC_OscConfig+0x504>)
 8002462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002466:	4a03      	ldr	r2, [pc, #12]	; (8002474 <HAL_RCC_OscConfig+0x504>)
 8002468:	f043 0301 	orr.w	r3, r3, #1
 800246c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002470:	e014      	b.n	800249c <HAL_RCC_OscConfig+0x52c>
 8002472:	bf00      	nop
 8002474:	40021000 	.word	0x40021000
 8002478:	40007000 	.word	0x40007000
 800247c:	4b9c      	ldr	r3, [pc, #624]	; (80026f0 <HAL_RCC_OscConfig+0x780>)
 800247e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002482:	4a9b      	ldr	r2, [pc, #620]	; (80026f0 <HAL_RCC_OscConfig+0x780>)
 8002484:	f023 0301 	bic.w	r3, r3, #1
 8002488:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800248c:	4b98      	ldr	r3, [pc, #608]	; (80026f0 <HAL_RCC_OscConfig+0x780>)
 800248e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002492:	4a97      	ldr	r2, [pc, #604]	; (80026f0 <HAL_RCC_OscConfig+0x780>)
 8002494:	f023 0304 	bic.w	r3, r3, #4
 8002498:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d016      	beq.n	80024d2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a4:	f7fe f818 	bl	80004d8 <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024aa:	e00a      	b.n	80024c2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ac:	f7fe f814 	bl	80004d8 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e12a      	b.n	8002718 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024c2:	4b8b      	ldr	r3, [pc, #556]	; (80026f0 <HAL_RCC_OscConfig+0x780>)
 80024c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d0ed      	beq.n	80024ac <HAL_RCC_OscConfig+0x53c>
 80024d0:	e015      	b.n	80024fe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d2:	f7fe f801 	bl	80004d8 <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024d8:	e00a      	b.n	80024f0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024da:	f7fd fffd 	bl	80004d8 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e113      	b.n	8002718 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024f0:	4b7f      	ldr	r3, [pc, #508]	; (80026f0 <HAL_RCC_OscConfig+0x780>)
 80024f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1ed      	bne.n	80024da <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024fe:	7ffb      	ldrb	r3, [r7, #31]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d105      	bne.n	8002510 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002504:	4b7a      	ldr	r3, [pc, #488]	; (80026f0 <HAL_RCC_OscConfig+0x780>)
 8002506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002508:	4a79      	ldr	r2, [pc, #484]	; (80026f0 <HAL_RCC_OscConfig+0x780>)
 800250a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800250e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002514:	2b00      	cmp	r3, #0
 8002516:	f000 80fe 	beq.w	8002716 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800251e:	2b02      	cmp	r3, #2
 8002520:	f040 80d0 	bne.w	80026c4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002524:	4b72      	ldr	r3, [pc, #456]	; (80026f0 <HAL_RCC_OscConfig+0x780>)
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	f003 0203 	and.w	r2, r3, #3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002534:	429a      	cmp	r2, r3
 8002536:	d130      	bne.n	800259a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	3b01      	subs	r3, #1
 8002544:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002546:	429a      	cmp	r2, r3
 8002548:	d127      	bne.n	800259a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002554:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002556:	429a      	cmp	r2, r3
 8002558:	d11f      	bne.n	800259a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002564:	2a07      	cmp	r2, #7
 8002566:	bf14      	ite	ne
 8002568:	2201      	movne	r2, #1
 800256a:	2200      	moveq	r2, #0
 800256c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800256e:	4293      	cmp	r3, r2
 8002570:	d113      	bne.n	800259a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800257c:	085b      	lsrs	r3, r3, #1
 800257e:	3b01      	subs	r3, #1
 8002580:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002582:	429a      	cmp	r2, r3
 8002584:	d109      	bne.n	800259a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002590:	085b      	lsrs	r3, r3, #1
 8002592:	3b01      	subs	r3, #1
 8002594:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002596:	429a      	cmp	r2, r3
 8002598:	d06e      	beq.n	8002678 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	2b0c      	cmp	r3, #12
 800259e:	d069      	beq.n	8002674 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80025a0:	4b53      	ldr	r3, [pc, #332]	; (80026f0 <HAL_RCC_OscConfig+0x780>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d105      	bne.n	80025b8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80025ac:	4b50      	ldr	r3, [pc, #320]	; (80026f0 <HAL_RCC_OscConfig+0x780>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e0ad      	b.n	8002718 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80025bc:	4b4c      	ldr	r3, [pc, #304]	; (80026f0 <HAL_RCC_OscConfig+0x780>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a4b      	ldr	r2, [pc, #300]	; (80026f0 <HAL_RCC_OscConfig+0x780>)
 80025c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025c6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025c8:	f7fd ff86 	bl	80004d8 <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025d0:	f7fd ff82 	bl	80004d8 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e09a      	b.n	8002718 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025e2:	4b43      	ldr	r3, [pc, #268]	; (80026f0 <HAL_RCC_OscConfig+0x780>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1f0      	bne.n	80025d0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025ee:	4b40      	ldr	r3, [pc, #256]	; (80026f0 <HAL_RCC_OscConfig+0x780>)
 80025f0:	68da      	ldr	r2, [r3, #12]
 80025f2:	4b40      	ldr	r3, [pc, #256]	; (80026f4 <HAL_RCC_OscConfig+0x784>)
 80025f4:	4013      	ands	r3, r2
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80025fe:	3a01      	subs	r2, #1
 8002600:	0112      	lsls	r2, r2, #4
 8002602:	4311      	orrs	r1, r2
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002608:	0212      	lsls	r2, r2, #8
 800260a:	4311      	orrs	r1, r2
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002610:	0852      	lsrs	r2, r2, #1
 8002612:	3a01      	subs	r2, #1
 8002614:	0552      	lsls	r2, r2, #21
 8002616:	4311      	orrs	r1, r2
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800261c:	0852      	lsrs	r2, r2, #1
 800261e:	3a01      	subs	r2, #1
 8002620:	0652      	lsls	r2, r2, #25
 8002622:	4311      	orrs	r1, r2
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002628:	0912      	lsrs	r2, r2, #4
 800262a:	0452      	lsls	r2, r2, #17
 800262c:	430a      	orrs	r2, r1
 800262e:	4930      	ldr	r1, [pc, #192]	; (80026f0 <HAL_RCC_OscConfig+0x780>)
 8002630:	4313      	orrs	r3, r2
 8002632:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002634:	4b2e      	ldr	r3, [pc, #184]	; (80026f0 <HAL_RCC_OscConfig+0x780>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a2d      	ldr	r2, [pc, #180]	; (80026f0 <HAL_RCC_OscConfig+0x780>)
 800263a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800263e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002640:	4b2b      	ldr	r3, [pc, #172]	; (80026f0 <HAL_RCC_OscConfig+0x780>)
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	4a2a      	ldr	r2, [pc, #168]	; (80026f0 <HAL_RCC_OscConfig+0x780>)
 8002646:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800264a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800264c:	f7fd ff44 	bl	80004d8 <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002654:	f7fd ff40 	bl	80004d8 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e058      	b.n	8002718 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002666:	4b22      	ldr	r3, [pc, #136]	; (80026f0 <HAL_RCC_OscConfig+0x780>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d0f0      	beq.n	8002654 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002672:	e050      	b.n	8002716 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e04f      	b.n	8002718 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002678:	4b1d      	ldr	r3, [pc, #116]	; (80026f0 <HAL_RCC_OscConfig+0x780>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d148      	bne.n	8002716 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002684:	4b1a      	ldr	r3, [pc, #104]	; (80026f0 <HAL_RCC_OscConfig+0x780>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a19      	ldr	r2, [pc, #100]	; (80026f0 <HAL_RCC_OscConfig+0x780>)
 800268a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800268e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002690:	4b17      	ldr	r3, [pc, #92]	; (80026f0 <HAL_RCC_OscConfig+0x780>)
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	4a16      	ldr	r2, [pc, #88]	; (80026f0 <HAL_RCC_OscConfig+0x780>)
 8002696:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800269a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800269c:	f7fd ff1c 	bl	80004d8 <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026a4:	f7fd ff18 	bl	80004d8 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e030      	b.n	8002718 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026b6:	4b0e      	ldr	r3, [pc, #56]	; (80026f0 <HAL_RCC_OscConfig+0x780>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d0f0      	beq.n	80026a4 <HAL_RCC_OscConfig+0x734>
 80026c2:	e028      	b.n	8002716 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	2b0c      	cmp	r3, #12
 80026c8:	d023      	beq.n	8002712 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ca:	4b09      	ldr	r3, [pc, #36]	; (80026f0 <HAL_RCC_OscConfig+0x780>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a08      	ldr	r2, [pc, #32]	; (80026f0 <HAL_RCC_OscConfig+0x780>)
 80026d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d6:	f7fd feff 	bl	80004d8 <HAL_GetTick>
 80026da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026dc:	e00c      	b.n	80026f8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026de:	f7fd fefb 	bl	80004d8 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d905      	bls.n	80026f8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e013      	b.n	8002718 <HAL_RCC_OscConfig+0x7a8>
 80026f0:	40021000 	.word	0x40021000
 80026f4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026f8:	4b09      	ldr	r3, [pc, #36]	; (8002720 <HAL_RCC_OscConfig+0x7b0>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d1ec      	bne.n	80026de <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002704:	4b06      	ldr	r3, [pc, #24]	; (8002720 <HAL_RCC_OscConfig+0x7b0>)
 8002706:	68da      	ldr	r2, [r3, #12]
 8002708:	4905      	ldr	r1, [pc, #20]	; (8002720 <HAL_RCC_OscConfig+0x7b0>)
 800270a:	4b06      	ldr	r3, [pc, #24]	; (8002724 <HAL_RCC_OscConfig+0x7b4>)
 800270c:	4013      	ands	r3, r2
 800270e:	60cb      	str	r3, [r1, #12]
 8002710:	e001      	b.n	8002716 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e000      	b.n	8002718 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	3720      	adds	r7, #32
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	40021000 	.word	0x40021000
 8002724:	feeefffc 	.word	0xfeeefffc

08002728 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e0e7      	b.n	800290c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800273c:	4b75      	ldr	r3, [pc, #468]	; (8002914 <HAL_RCC_ClockConfig+0x1ec>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	429a      	cmp	r2, r3
 8002748:	d910      	bls.n	800276c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800274a:	4b72      	ldr	r3, [pc, #456]	; (8002914 <HAL_RCC_ClockConfig+0x1ec>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f023 0207 	bic.w	r2, r3, #7
 8002752:	4970      	ldr	r1, [pc, #448]	; (8002914 <HAL_RCC_ClockConfig+0x1ec>)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	4313      	orrs	r3, r2
 8002758:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800275a:	4b6e      	ldr	r3, [pc, #440]	; (8002914 <HAL_RCC_ClockConfig+0x1ec>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0307 	and.w	r3, r3, #7
 8002762:	683a      	ldr	r2, [r7, #0]
 8002764:	429a      	cmp	r2, r3
 8002766:	d001      	beq.n	800276c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e0cf      	b.n	800290c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d010      	beq.n	800279a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689a      	ldr	r2, [r3, #8]
 800277c:	4b66      	ldr	r3, [pc, #408]	; (8002918 <HAL_RCC_ClockConfig+0x1f0>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002784:	429a      	cmp	r2, r3
 8002786:	d908      	bls.n	800279a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002788:	4b63      	ldr	r3, [pc, #396]	; (8002918 <HAL_RCC_ClockConfig+0x1f0>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	4960      	ldr	r1, [pc, #384]	; (8002918 <HAL_RCC_ClockConfig+0x1f0>)
 8002796:	4313      	orrs	r3, r2
 8002798:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d04c      	beq.n	8002840 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2b03      	cmp	r3, #3
 80027ac:	d107      	bne.n	80027be <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027ae:	4b5a      	ldr	r3, [pc, #360]	; (8002918 <HAL_RCC_ClockConfig+0x1f0>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d121      	bne.n	80027fe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e0a6      	b.n	800290c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d107      	bne.n	80027d6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027c6:	4b54      	ldr	r3, [pc, #336]	; (8002918 <HAL_RCC_ClockConfig+0x1f0>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d115      	bne.n	80027fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e09a      	b.n	800290c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d107      	bne.n	80027ee <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027de:	4b4e      	ldr	r3, [pc, #312]	; (8002918 <HAL_RCC_ClockConfig+0x1f0>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d109      	bne.n	80027fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e08e      	b.n	800290c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027ee:	4b4a      	ldr	r3, [pc, #296]	; (8002918 <HAL_RCC_ClockConfig+0x1f0>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e086      	b.n	800290c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027fe:	4b46      	ldr	r3, [pc, #280]	; (8002918 <HAL_RCC_ClockConfig+0x1f0>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f023 0203 	bic.w	r2, r3, #3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	4943      	ldr	r1, [pc, #268]	; (8002918 <HAL_RCC_ClockConfig+0x1f0>)
 800280c:	4313      	orrs	r3, r2
 800280e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002810:	f7fd fe62 	bl	80004d8 <HAL_GetTick>
 8002814:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002816:	e00a      	b.n	800282e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002818:	f7fd fe5e 	bl	80004d8 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	f241 3288 	movw	r2, #5000	; 0x1388
 8002826:	4293      	cmp	r3, r2
 8002828:	d901      	bls.n	800282e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e06e      	b.n	800290c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800282e:	4b3a      	ldr	r3, [pc, #232]	; (8002918 <HAL_RCC_ClockConfig+0x1f0>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f003 020c 	and.w	r2, r3, #12
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	429a      	cmp	r2, r3
 800283e:	d1eb      	bne.n	8002818 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0302 	and.w	r3, r3, #2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d010      	beq.n	800286e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689a      	ldr	r2, [r3, #8]
 8002850:	4b31      	ldr	r3, [pc, #196]	; (8002918 <HAL_RCC_ClockConfig+0x1f0>)
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002858:	429a      	cmp	r2, r3
 800285a:	d208      	bcs.n	800286e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800285c:	4b2e      	ldr	r3, [pc, #184]	; (8002918 <HAL_RCC_ClockConfig+0x1f0>)
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	492b      	ldr	r1, [pc, #172]	; (8002918 <HAL_RCC_ClockConfig+0x1f0>)
 800286a:	4313      	orrs	r3, r2
 800286c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800286e:	4b29      	ldr	r3, [pc, #164]	; (8002914 <HAL_RCC_ClockConfig+0x1ec>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0307 	and.w	r3, r3, #7
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	429a      	cmp	r2, r3
 800287a:	d210      	bcs.n	800289e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800287c:	4b25      	ldr	r3, [pc, #148]	; (8002914 <HAL_RCC_ClockConfig+0x1ec>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f023 0207 	bic.w	r2, r3, #7
 8002884:	4923      	ldr	r1, [pc, #140]	; (8002914 <HAL_RCC_ClockConfig+0x1ec>)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	4313      	orrs	r3, r2
 800288a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800288c:	4b21      	ldr	r3, [pc, #132]	; (8002914 <HAL_RCC_ClockConfig+0x1ec>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0307 	and.w	r3, r3, #7
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	429a      	cmp	r2, r3
 8002898:	d001      	beq.n	800289e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e036      	b.n	800290c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0304 	and.w	r3, r3, #4
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d008      	beq.n	80028bc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028aa:	4b1b      	ldr	r3, [pc, #108]	; (8002918 <HAL_RCC_ClockConfig+0x1f0>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	4918      	ldr	r1, [pc, #96]	; (8002918 <HAL_RCC_ClockConfig+0x1f0>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0308 	and.w	r3, r3, #8
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d009      	beq.n	80028dc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028c8:	4b13      	ldr	r3, [pc, #76]	; (8002918 <HAL_RCC_ClockConfig+0x1f0>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	00db      	lsls	r3, r3, #3
 80028d6:	4910      	ldr	r1, [pc, #64]	; (8002918 <HAL_RCC_ClockConfig+0x1f0>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028dc:	f000 f824 	bl	8002928 <HAL_RCC_GetSysClockFreq>
 80028e0:	4602      	mov	r2, r0
 80028e2:	4b0d      	ldr	r3, [pc, #52]	; (8002918 <HAL_RCC_ClockConfig+0x1f0>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	091b      	lsrs	r3, r3, #4
 80028e8:	f003 030f 	and.w	r3, r3, #15
 80028ec:	490b      	ldr	r1, [pc, #44]	; (800291c <HAL_RCC_ClockConfig+0x1f4>)
 80028ee:	5ccb      	ldrb	r3, [r1, r3]
 80028f0:	f003 031f 	and.w	r3, r3, #31
 80028f4:	fa22 f303 	lsr.w	r3, r2, r3
 80028f8:	4a09      	ldr	r2, [pc, #36]	; (8002920 <HAL_RCC_ClockConfig+0x1f8>)
 80028fa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80028fc:	4b09      	ldr	r3, [pc, #36]	; (8002924 <HAL_RCC_ClockConfig+0x1fc>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4618      	mov	r0, r3
 8002902:	f7fd fd99 	bl	8000438 <HAL_InitTick>
 8002906:	4603      	mov	r3, r0
 8002908:	72fb      	strb	r3, [r7, #11]

  return status;
 800290a:	7afb      	ldrb	r3, [r7, #11]
}
 800290c:	4618      	mov	r0, r3
 800290e:	3710      	adds	r7, #16
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	40022000 	.word	0x40022000
 8002918:	40021000 	.word	0x40021000
 800291c:	08008710 	.word	0x08008710
 8002920:	20000000 	.word	0x20000000
 8002924:	20000004 	.word	0x20000004

08002928 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002928:	b480      	push	{r7}
 800292a:	b089      	sub	sp, #36	; 0x24
 800292c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800292e:	2300      	movs	r3, #0
 8002930:	61fb      	str	r3, [r7, #28]
 8002932:	2300      	movs	r3, #0
 8002934:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002936:	4b3e      	ldr	r3, [pc, #248]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x108>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f003 030c 	and.w	r3, r3, #12
 800293e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002940:	4b3b      	ldr	r3, [pc, #236]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x108>)
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	f003 0303 	and.w	r3, r3, #3
 8002948:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d005      	beq.n	800295c <HAL_RCC_GetSysClockFreq+0x34>
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	2b0c      	cmp	r3, #12
 8002954:	d121      	bne.n	800299a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d11e      	bne.n	800299a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800295c:	4b34      	ldr	r3, [pc, #208]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x108>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0308 	and.w	r3, r3, #8
 8002964:	2b00      	cmp	r3, #0
 8002966:	d107      	bne.n	8002978 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002968:	4b31      	ldr	r3, [pc, #196]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x108>)
 800296a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800296e:	0a1b      	lsrs	r3, r3, #8
 8002970:	f003 030f 	and.w	r3, r3, #15
 8002974:	61fb      	str	r3, [r7, #28]
 8002976:	e005      	b.n	8002984 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002978:	4b2d      	ldr	r3, [pc, #180]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x108>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	091b      	lsrs	r3, r3, #4
 800297e:	f003 030f 	and.w	r3, r3, #15
 8002982:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002984:	4a2b      	ldr	r2, [pc, #172]	; (8002a34 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800298c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d10d      	bne.n	80029b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002998:	e00a      	b.n	80029b0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	2b04      	cmp	r3, #4
 800299e:	d102      	bne.n	80029a6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80029a0:	4b25      	ldr	r3, [pc, #148]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x110>)
 80029a2:	61bb      	str	r3, [r7, #24]
 80029a4:	e004      	b.n	80029b0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	2b08      	cmp	r3, #8
 80029aa:	d101      	bne.n	80029b0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80029ac:	4b23      	ldr	r3, [pc, #140]	; (8002a3c <HAL_RCC_GetSysClockFreq+0x114>)
 80029ae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	2b0c      	cmp	r3, #12
 80029b4:	d134      	bne.n	8002a20 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029b6:	4b1e      	ldr	r3, [pc, #120]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x108>)
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	f003 0303 	and.w	r3, r3, #3
 80029be:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d003      	beq.n	80029ce <HAL_RCC_GetSysClockFreq+0xa6>
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	2b03      	cmp	r3, #3
 80029ca:	d003      	beq.n	80029d4 <HAL_RCC_GetSysClockFreq+0xac>
 80029cc:	e005      	b.n	80029da <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80029ce:	4b1a      	ldr	r3, [pc, #104]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x110>)
 80029d0:	617b      	str	r3, [r7, #20]
      break;
 80029d2:	e005      	b.n	80029e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80029d4:	4b19      	ldr	r3, [pc, #100]	; (8002a3c <HAL_RCC_GetSysClockFreq+0x114>)
 80029d6:	617b      	str	r3, [r7, #20]
      break;
 80029d8:	e002      	b.n	80029e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	617b      	str	r3, [r7, #20]
      break;
 80029de:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029e0:	4b13      	ldr	r3, [pc, #76]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x108>)
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	091b      	lsrs	r3, r3, #4
 80029e6:	f003 0307 	and.w	r3, r3, #7
 80029ea:	3301      	adds	r3, #1
 80029ec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80029ee:	4b10      	ldr	r3, [pc, #64]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x108>)
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	0a1b      	lsrs	r3, r3, #8
 80029f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029f8:	697a      	ldr	r2, [r7, #20]
 80029fa:	fb03 f202 	mul.w	r2, r3, r2
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a04:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a06:	4b0a      	ldr	r3, [pc, #40]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	0e5b      	lsrs	r3, r3, #25
 8002a0c:	f003 0303 	and.w	r3, r3, #3
 8002a10:	3301      	adds	r3, #1
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002a16:	697a      	ldr	r2, [r7, #20]
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a1e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002a20:	69bb      	ldr	r3, [r7, #24]
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3724      	adds	r7, #36	; 0x24
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	40021000 	.word	0x40021000
 8002a34:	08008720 	.word	0x08008720
 8002a38:	00f42400 	.word	0x00f42400
 8002a3c:	007a1200 	.word	0x007a1200

08002a40 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a44:	4b03      	ldr	r3, [pc, #12]	; (8002a54 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a46:	681b      	ldr	r3, [r3, #0]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	20000000 	.word	0x20000000

08002a58 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002a60:	2300      	movs	r3, #0
 8002a62:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a64:	4b2a      	ldr	r3, [pc, #168]	; (8002b10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d003      	beq.n	8002a78 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002a70:	f7ff fa0a 	bl	8001e88 <HAL_PWREx_GetVoltageRange>
 8002a74:	6178      	str	r0, [r7, #20]
 8002a76:	e014      	b.n	8002aa2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a78:	4b25      	ldr	r3, [pc, #148]	; (8002b10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a7c:	4a24      	ldr	r2, [pc, #144]	; (8002b10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a82:	6593      	str	r3, [r2, #88]	; 0x58
 8002a84:	4b22      	ldr	r3, [pc, #136]	; (8002b10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a8c:	60fb      	str	r3, [r7, #12]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002a90:	f7ff f9fa 	bl	8001e88 <HAL_PWREx_GetVoltageRange>
 8002a94:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a96:	4b1e      	ldr	r3, [pc, #120]	; (8002b10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a9a:	4a1d      	ldr	r2, [pc, #116]	; (8002b10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aa0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002aa8:	d10b      	bne.n	8002ac2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2b80      	cmp	r3, #128	; 0x80
 8002aae:	d919      	bls.n	8002ae4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2ba0      	cmp	r3, #160	; 0xa0
 8002ab4:	d902      	bls.n	8002abc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	613b      	str	r3, [r7, #16]
 8002aba:	e013      	b.n	8002ae4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002abc:	2301      	movs	r3, #1
 8002abe:	613b      	str	r3, [r7, #16]
 8002ac0:	e010      	b.n	8002ae4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2b80      	cmp	r3, #128	; 0x80
 8002ac6:	d902      	bls.n	8002ace <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002ac8:	2303      	movs	r3, #3
 8002aca:	613b      	str	r3, [r7, #16]
 8002acc:	e00a      	b.n	8002ae4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2b80      	cmp	r3, #128	; 0x80
 8002ad2:	d102      	bne.n	8002ada <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	613b      	str	r3, [r7, #16]
 8002ad8:	e004      	b.n	8002ae4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2b70      	cmp	r3, #112	; 0x70
 8002ade:	d101      	bne.n	8002ae4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ae4:	4b0b      	ldr	r3, [pc, #44]	; (8002b14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f023 0207 	bic.w	r2, r3, #7
 8002aec:	4909      	ldr	r1, [pc, #36]	; (8002b14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002af4:	4b07      	ldr	r3, [pc, #28]	; (8002b14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0307 	and.w	r3, r3, #7
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d001      	beq.n	8002b06 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e000      	b.n	8002b08 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002b06:	2300      	movs	r3, #0
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3718      	adds	r7, #24
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	40021000 	.word	0x40021000
 8002b14:	40022000 	.word	0x40022000

08002b18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b20:	2300      	movs	r3, #0
 8002b22:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b24:	2300      	movs	r3, #0
 8002b26:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d041      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b38:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b3c:	d02a      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002b3e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b42:	d824      	bhi.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002b44:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b48:	d008      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002b4a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b4e:	d81e      	bhi.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d00a      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002b54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b58:	d010      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002b5a:	e018      	b.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b5c:	4b86      	ldr	r3, [pc, #536]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	4a85      	ldr	r2, [pc, #532]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b66:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b68:	e015      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	3304      	adds	r3, #4
 8002b6e:	2100      	movs	r1, #0
 8002b70:	4618      	mov	r0, r3
 8002b72:	f000 fabb 	bl	80030ec <RCCEx_PLLSAI1_Config>
 8002b76:	4603      	mov	r3, r0
 8002b78:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b7a:	e00c      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	3320      	adds	r3, #32
 8002b80:	2100      	movs	r1, #0
 8002b82:	4618      	mov	r0, r3
 8002b84:	f000 fba6 	bl	80032d4 <RCCEx_PLLSAI2_Config>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b8c:	e003      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	74fb      	strb	r3, [r7, #19]
      break;
 8002b92:	e000      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002b94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b96:	7cfb      	ldrb	r3, [r7, #19]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d10b      	bne.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b9c:	4b76      	ldr	r3, [pc, #472]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002baa:	4973      	ldr	r1, [pc, #460]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002bb2:	e001      	b.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bb4:	7cfb      	ldrb	r3, [r7, #19]
 8002bb6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d041      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bc8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002bcc:	d02a      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002bce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002bd2:	d824      	bhi.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002bd4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002bd8:	d008      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002bda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002bde:	d81e      	bhi.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d00a      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002be4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002be8:	d010      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002bea:	e018      	b.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002bec:	4b62      	ldr	r3, [pc, #392]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	4a61      	ldr	r2, [pc, #388]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002bf8:	e015      	b.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	3304      	adds	r3, #4
 8002bfe:	2100      	movs	r1, #0
 8002c00:	4618      	mov	r0, r3
 8002c02:	f000 fa73 	bl	80030ec <RCCEx_PLLSAI1_Config>
 8002c06:	4603      	mov	r3, r0
 8002c08:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c0a:	e00c      	b.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	3320      	adds	r3, #32
 8002c10:	2100      	movs	r1, #0
 8002c12:	4618      	mov	r0, r3
 8002c14:	f000 fb5e 	bl	80032d4 <RCCEx_PLLSAI2_Config>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c1c:	e003      	b.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	74fb      	strb	r3, [r7, #19]
      break;
 8002c22:	e000      	b.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002c24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c26:	7cfb      	ldrb	r3, [r7, #19]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d10b      	bne.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002c2c:	4b52      	ldr	r3, [pc, #328]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c32:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c3a:	494f      	ldr	r1, [pc, #316]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002c42:	e001      	b.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c44:	7cfb      	ldrb	r3, [r7, #19]
 8002c46:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 80a0 	beq.w	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c56:	2300      	movs	r3, #0
 8002c58:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c5a:	4b47      	ldr	r3, [pc, #284]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d101      	bne.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002c66:	2301      	movs	r3, #1
 8002c68:	e000      	b.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00d      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c70:	4b41      	ldr	r3, [pc, #260]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c74:	4a40      	ldr	r2, [pc, #256]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c7a:	6593      	str	r3, [r2, #88]	; 0x58
 8002c7c:	4b3e      	ldr	r3, [pc, #248]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c84:	60bb      	str	r3, [r7, #8]
 8002c86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c8c:	4b3b      	ldr	r3, [pc, #236]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a3a      	ldr	r2, [pc, #232]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c96:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c98:	f7fd fc1e 	bl	80004d8 <HAL_GetTick>
 8002c9c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c9e:	e009      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ca0:	f7fd fc1a 	bl	80004d8 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d902      	bls.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	74fb      	strb	r3, [r7, #19]
        break;
 8002cb2:	e005      	b.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002cb4:	4b31      	ldr	r3, [pc, #196]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d0ef      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002cc0:	7cfb      	ldrb	r3, [r7, #19]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d15c      	bne.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002cc6:	4b2c      	ldr	r3, [pc, #176]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ccc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cd0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d01f      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d019      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ce4:	4b24      	ldr	r3, [pc, #144]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cf0:	4b21      	ldr	r3, [pc, #132]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf6:	4a20      	ldr	r2, [pc, #128]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d00:	4b1d      	ldr	r3, [pc, #116]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d06:	4a1c      	ldr	r2, [pc, #112]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d10:	4a19      	ldr	r2, [pc, #100]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d016      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d22:	f7fd fbd9 	bl	80004d8 <HAL_GetTick>
 8002d26:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d28:	e00b      	b.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d2a:	f7fd fbd5 	bl	80004d8 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d902      	bls.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	74fb      	strb	r3, [r7, #19]
            break;
 8002d40:	e006      	b.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d42:	4b0d      	ldr	r3, [pc, #52]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d0ec      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002d50:	7cfb      	ldrb	r3, [r7, #19]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d10c      	bne.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d56:	4b08      	ldr	r3, [pc, #32]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d66:	4904      	ldr	r1, [pc, #16]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002d6e:	e009      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d70:	7cfb      	ldrb	r3, [r7, #19]
 8002d72:	74bb      	strb	r3, [r7, #18]
 8002d74:	e006      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002d76:	bf00      	nop
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d80:	7cfb      	ldrb	r3, [r7, #19]
 8002d82:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d84:	7c7b      	ldrb	r3, [r7, #17]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d105      	bne.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d8a:	4b9e      	ldr	r3, [pc, #632]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d8e:	4a9d      	ldr	r2, [pc, #628]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d94:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00a      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002da2:	4b98      	ldr	r3, [pc, #608]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da8:	f023 0203 	bic.w	r2, r3, #3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db0:	4994      	ldr	r1, [pc, #592]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d00a      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002dc4:	4b8f      	ldr	r3, [pc, #572]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dca:	f023 020c 	bic.w	r2, r3, #12
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd2:	498c      	ldr	r1, [pc, #560]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0304 	and.w	r3, r3, #4
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00a      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002de6:	4b87      	ldr	r3, [pc, #540]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df4:	4983      	ldr	r1, [pc, #524]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0308 	and.w	r3, r3, #8
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d00a      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e08:	4b7e      	ldr	r3, [pc, #504]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e0e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e16:	497b      	ldr	r1, [pc, #492]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0310 	and.w	r3, r3, #16
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00a      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e2a:	4b76      	ldr	r3, [pc, #472]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e38:	4972      	ldr	r1, [pc, #456]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0320 	and.w	r3, r3, #32
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d00a      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e4c:	4b6d      	ldr	r3, [pc, #436]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e52:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e5a:	496a      	ldr	r1, [pc, #424]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00a      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e6e:	4b65      	ldr	r3, [pc, #404]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e74:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e7c:	4961      	ldr	r1, [pc, #388]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00a      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e90:	4b5c      	ldr	r3, [pc, #368]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e96:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e9e:	4959      	ldr	r1, [pc, #356]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00a      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002eb2:	4b54      	ldr	r3, [pc, #336]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ec0:	4950      	ldr	r1, [pc, #320]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d00a      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ed4:	4b4b      	ldr	r3, [pc, #300]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eda:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee2:	4948      	ldr	r1, [pc, #288]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d00a      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ef6:	4b43      	ldr	r3, [pc, #268]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002efc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f04:	493f      	ldr	r1, [pc, #252]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d028      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f18:	4b3a      	ldr	r3, [pc, #232]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f1e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f26:	4937      	ldr	r1, [pc, #220]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f36:	d106      	bne.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f38:	4b32      	ldr	r3, [pc, #200]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	4a31      	ldr	r2, [pc, #196]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f42:	60d3      	str	r3, [r2, #12]
 8002f44:	e011      	b.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f4a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f4e:	d10c      	bne.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	3304      	adds	r3, #4
 8002f54:	2101      	movs	r1, #1
 8002f56:	4618      	mov	r0, r3
 8002f58:	f000 f8c8 	bl	80030ec <RCCEx_PLLSAI1_Config>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002f60:	7cfb      	ldrb	r3, [r7, #19]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002f66:	7cfb      	ldrb	r3, [r7, #19]
 8002f68:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d028      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f76:	4b23      	ldr	r3, [pc, #140]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f7c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f84:	491f      	ldr	r1, [pc, #124]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f94:	d106      	bne.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f96:	4b1b      	ldr	r3, [pc, #108]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	4a1a      	ldr	r2, [pc, #104]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fa0:	60d3      	str	r3, [r2, #12]
 8002fa2:	e011      	b.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fac:	d10c      	bne.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	3304      	adds	r3, #4
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f000 f899 	bl	80030ec <RCCEx_PLLSAI1_Config>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fbe:	7cfb      	ldrb	r3, [r7, #19]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d001      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002fc4:	7cfb      	ldrb	r3, [r7, #19]
 8002fc6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d02b      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002fd4:	4b0b      	ldr	r3, [pc, #44]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fda:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fe2:	4908      	ldr	r1, [pc, #32]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ff2:	d109      	bne.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ff4:	4b03      	ldr	r3, [pc, #12]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	4a02      	ldr	r2, [pc, #8]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ffa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ffe:	60d3      	str	r3, [r2, #12]
 8003000:	e014      	b.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003002:	bf00      	nop
 8003004:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800300c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003010:	d10c      	bne.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	3304      	adds	r3, #4
 8003016:	2101      	movs	r1, #1
 8003018:	4618      	mov	r0, r3
 800301a:	f000 f867 	bl	80030ec <RCCEx_PLLSAI1_Config>
 800301e:	4603      	mov	r3, r0
 8003020:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003022:	7cfb      	ldrb	r3, [r7, #19]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d001      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003028:	7cfb      	ldrb	r3, [r7, #19]
 800302a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d02f      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003038:	4b2b      	ldr	r3, [pc, #172]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800303a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800303e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003046:	4928      	ldr	r1, [pc, #160]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003048:	4313      	orrs	r3, r2
 800304a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003052:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003056:	d10d      	bne.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	3304      	adds	r3, #4
 800305c:	2102      	movs	r1, #2
 800305e:	4618      	mov	r0, r3
 8003060:	f000 f844 	bl	80030ec <RCCEx_PLLSAI1_Config>
 8003064:	4603      	mov	r3, r0
 8003066:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003068:	7cfb      	ldrb	r3, [r7, #19]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d014      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800306e:	7cfb      	ldrb	r3, [r7, #19]
 8003070:	74bb      	strb	r3, [r7, #18]
 8003072:	e011      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003078:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800307c:	d10c      	bne.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	3320      	adds	r3, #32
 8003082:	2102      	movs	r1, #2
 8003084:	4618      	mov	r0, r3
 8003086:	f000 f925 	bl	80032d4 <RCCEx_PLLSAI2_Config>
 800308a:	4603      	mov	r3, r0
 800308c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800308e:	7cfb      	ldrb	r3, [r7, #19]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d001      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003094:	7cfb      	ldrb	r3, [r7, #19]
 8003096:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d00a      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80030a4:	4b10      	ldr	r3, [pc, #64]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030aa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030b2:	490d      	ldr	r1, [pc, #52]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00b      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80030c6:	4b08      	ldr	r3, [pc, #32]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030d6:	4904      	ldr	r1, [pc, #16]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80030de:	7cbb      	ldrb	r3, [r7, #18]
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3718      	adds	r7, #24
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	40021000 	.word	0x40021000

080030ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030f6:	2300      	movs	r3, #0
 80030f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80030fa:	4b75      	ldr	r3, [pc, #468]	; (80032d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	f003 0303 	and.w	r3, r3, #3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d018      	beq.n	8003138 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003106:	4b72      	ldr	r3, [pc, #456]	; (80032d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	f003 0203 	and.w	r2, r3, #3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	429a      	cmp	r2, r3
 8003114:	d10d      	bne.n	8003132 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
       ||
 800311a:	2b00      	cmp	r3, #0
 800311c:	d009      	beq.n	8003132 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800311e:	4b6c      	ldr	r3, [pc, #432]	; (80032d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	091b      	lsrs	r3, r3, #4
 8003124:	f003 0307 	and.w	r3, r3, #7
 8003128:	1c5a      	adds	r2, r3, #1
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
       ||
 800312e:	429a      	cmp	r2, r3
 8003130:	d047      	beq.n	80031c2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	73fb      	strb	r3, [r7, #15]
 8003136:	e044      	b.n	80031c2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2b03      	cmp	r3, #3
 800313e:	d018      	beq.n	8003172 <RCCEx_PLLSAI1_Config+0x86>
 8003140:	2b03      	cmp	r3, #3
 8003142:	d825      	bhi.n	8003190 <RCCEx_PLLSAI1_Config+0xa4>
 8003144:	2b01      	cmp	r3, #1
 8003146:	d002      	beq.n	800314e <RCCEx_PLLSAI1_Config+0x62>
 8003148:	2b02      	cmp	r3, #2
 800314a:	d009      	beq.n	8003160 <RCCEx_PLLSAI1_Config+0x74>
 800314c:	e020      	b.n	8003190 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800314e:	4b60      	ldr	r3, [pc, #384]	; (80032d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d11d      	bne.n	8003196 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800315e:	e01a      	b.n	8003196 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003160:	4b5b      	ldr	r3, [pc, #364]	; (80032d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003168:	2b00      	cmp	r3, #0
 800316a:	d116      	bne.n	800319a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003170:	e013      	b.n	800319a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003172:	4b57      	ldr	r3, [pc, #348]	; (80032d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d10f      	bne.n	800319e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800317e:	4b54      	ldr	r3, [pc, #336]	; (80032d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d109      	bne.n	800319e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800318e:	e006      	b.n	800319e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	73fb      	strb	r3, [r7, #15]
      break;
 8003194:	e004      	b.n	80031a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003196:	bf00      	nop
 8003198:	e002      	b.n	80031a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800319a:	bf00      	nop
 800319c:	e000      	b.n	80031a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800319e:	bf00      	nop
    }

    if(status == HAL_OK)
 80031a0:	7bfb      	ldrb	r3, [r7, #15]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10d      	bne.n	80031c2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80031a6:	4b4a      	ldr	r3, [pc, #296]	; (80032d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6819      	ldr	r1, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	3b01      	subs	r3, #1
 80031b8:	011b      	lsls	r3, r3, #4
 80031ba:	430b      	orrs	r3, r1
 80031bc:	4944      	ldr	r1, [pc, #272]	; (80032d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80031c2:	7bfb      	ldrb	r3, [r7, #15]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d17d      	bne.n	80032c4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80031c8:	4b41      	ldr	r3, [pc, #260]	; (80032d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a40      	ldr	r2, [pc, #256]	; (80032d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80031d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031d4:	f7fd f980 	bl	80004d8 <HAL_GetTick>
 80031d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031da:	e009      	b.n	80031f0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031dc:	f7fd f97c 	bl	80004d8 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d902      	bls.n	80031f0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	73fb      	strb	r3, [r7, #15]
        break;
 80031ee:	e005      	b.n	80031fc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031f0:	4b37      	ldr	r3, [pc, #220]	; (80032d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1ef      	bne.n	80031dc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80031fc:	7bfb      	ldrb	r3, [r7, #15]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d160      	bne.n	80032c4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d111      	bne.n	800322c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003208:	4b31      	ldr	r3, [pc, #196]	; (80032d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003210:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	6892      	ldr	r2, [r2, #8]
 8003218:	0211      	lsls	r1, r2, #8
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	68d2      	ldr	r2, [r2, #12]
 800321e:	0912      	lsrs	r2, r2, #4
 8003220:	0452      	lsls	r2, r2, #17
 8003222:	430a      	orrs	r2, r1
 8003224:	492a      	ldr	r1, [pc, #168]	; (80032d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003226:	4313      	orrs	r3, r2
 8003228:	610b      	str	r3, [r1, #16]
 800322a:	e027      	b.n	800327c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d112      	bne.n	8003258 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003232:	4b27      	ldr	r3, [pc, #156]	; (80032d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800323a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	6892      	ldr	r2, [r2, #8]
 8003242:	0211      	lsls	r1, r2, #8
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	6912      	ldr	r2, [r2, #16]
 8003248:	0852      	lsrs	r2, r2, #1
 800324a:	3a01      	subs	r2, #1
 800324c:	0552      	lsls	r2, r2, #21
 800324e:	430a      	orrs	r2, r1
 8003250:	491f      	ldr	r1, [pc, #124]	; (80032d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003252:	4313      	orrs	r3, r2
 8003254:	610b      	str	r3, [r1, #16]
 8003256:	e011      	b.n	800327c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003258:	4b1d      	ldr	r3, [pc, #116]	; (80032d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003260:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	6892      	ldr	r2, [r2, #8]
 8003268:	0211      	lsls	r1, r2, #8
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	6952      	ldr	r2, [r2, #20]
 800326e:	0852      	lsrs	r2, r2, #1
 8003270:	3a01      	subs	r2, #1
 8003272:	0652      	lsls	r2, r2, #25
 8003274:	430a      	orrs	r2, r1
 8003276:	4916      	ldr	r1, [pc, #88]	; (80032d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003278:	4313      	orrs	r3, r2
 800327a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800327c:	4b14      	ldr	r3, [pc, #80]	; (80032d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a13      	ldr	r2, [pc, #76]	; (80032d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003282:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003286:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003288:	f7fd f926 	bl	80004d8 <HAL_GetTick>
 800328c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800328e:	e009      	b.n	80032a4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003290:	f7fd f922 	bl	80004d8 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b02      	cmp	r3, #2
 800329c:	d902      	bls.n	80032a4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	73fb      	strb	r3, [r7, #15]
          break;
 80032a2:	e005      	b.n	80032b0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80032a4:	4b0a      	ldr	r3, [pc, #40]	; (80032d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d0ef      	beq.n	8003290 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80032b0:	7bfb      	ldrb	r3, [r7, #15]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d106      	bne.n	80032c4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80032b6:	4b06      	ldr	r3, [pc, #24]	; (80032d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032b8:	691a      	ldr	r2, [r3, #16]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	4904      	ldr	r1, [pc, #16]	; (80032d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80032c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	40021000 	.word	0x40021000

080032d4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80032de:	2300      	movs	r3, #0
 80032e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80032e2:	4b6a      	ldr	r3, [pc, #424]	; (800348c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	f003 0303 	and.w	r3, r3, #3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d018      	beq.n	8003320 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80032ee:	4b67      	ldr	r3, [pc, #412]	; (800348c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	f003 0203 	and.w	r2, r3, #3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d10d      	bne.n	800331a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
       ||
 8003302:	2b00      	cmp	r3, #0
 8003304:	d009      	beq.n	800331a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003306:	4b61      	ldr	r3, [pc, #388]	; (800348c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	091b      	lsrs	r3, r3, #4
 800330c:	f003 0307 	and.w	r3, r3, #7
 8003310:	1c5a      	adds	r2, r3, #1
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
       ||
 8003316:	429a      	cmp	r2, r3
 8003318:	d047      	beq.n	80033aa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	73fb      	strb	r3, [r7, #15]
 800331e:	e044      	b.n	80033aa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2b03      	cmp	r3, #3
 8003326:	d018      	beq.n	800335a <RCCEx_PLLSAI2_Config+0x86>
 8003328:	2b03      	cmp	r3, #3
 800332a:	d825      	bhi.n	8003378 <RCCEx_PLLSAI2_Config+0xa4>
 800332c:	2b01      	cmp	r3, #1
 800332e:	d002      	beq.n	8003336 <RCCEx_PLLSAI2_Config+0x62>
 8003330:	2b02      	cmp	r3, #2
 8003332:	d009      	beq.n	8003348 <RCCEx_PLLSAI2_Config+0x74>
 8003334:	e020      	b.n	8003378 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003336:	4b55      	ldr	r3, [pc, #340]	; (800348c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d11d      	bne.n	800337e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003346:	e01a      	b.n	800337e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003348:	4b50      	ldr	r3, [pc, #320]	; (800348c <RCCEx_PLLSAI2_Config+0x1b8>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003350:	2b00      	cmp	r3, #0
 8003352:	d116      	bne.n	8003382 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003358:	e013      	b.n	8003382 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800335a:	4b4c      	ldr	r3, [pc, #304]	; (800348c <RCCEx_PLLSAI2_Config+0x1b8>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d10f      	bne.n	8003386 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003366:	4b49      	ldr	r3, [pc, #292]	; (800348c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d109      	bne.n	8003386 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003376:	e006      	b.n	8003386 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	73fb      	strb	r3, [r7, #15]
      break;
 800337c:	e004      	b.n	8003388 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800337e:	bf00      	nop
 8003380:	e002      	b.n	8003388 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003382:	bf00      	nop
 8003384:	e000      	b.n	8003388 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003386:	bf00      	nop
    }

    if(status == HAL_OK)
 8003388:	7bfb      	ldrb	r3, [r7, #15]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10d      	bne.n	80033aa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800338e:	4b3f      	ldr	r3, [pc, #252]	; (800348c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6819      	ldr	r1, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	3b01      	subs	r3, #1
 80033a0:	011b      	lsls	r3, r3, #4
 80033a2:	430b      	orrs	r3, r1
 80033a4:	4939      	ldr	r1, [pc, #228]	; (800348c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80033aa:	7bfb      	ldrb	r3, [r7, #15]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d167      	bne.n	8003480 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80033b0:	4b36      	ldr	r3, [pc, #216]	; (800348c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a35      	ldr	r2, [pc, #212]	; (800348c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033bc:	f7fd f88c 	bl	80004d8 <HAL_GetTick>
 80033c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80033c2:	e009      	b.n	80033d8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80033c4:	f7fd f888 	bl	80004d8 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d902      	bls.n	80033d8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	73fb      	strb	r3, [r7, #15]
        break;
 80033d6:	e005      	b.n	80033e4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80033d8:	4b2c      	ldr	r3, [pc, #176]	; (800348c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1ef      	bne.n	80033c4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80033e4:	7bfb      	ldrb	r3, [r7, #15]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d14a      	bne.n	8003480 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d111      	bne.n	8003414 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80033f0:	4b26      	ldr	r3, [pc, #152]	; (800348c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033f2:	695b      	ldr	r3, [r3, #20]
 80033f4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80033f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	6892      	ldr	r2, [r2, #8]
 8003400:	0211      	lsls	r1, r2, #8
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	68d2      	ldr	r2, [r2, #12]
 8003406:	0912      	lsrs	r2, r2, #4
 8003408:	0452      	lsls	r2, r2, #17
 800340a:	430a      	orrs	r2, r1
 800340c:	491f      	ldr	r1, [pc, #124]	; (800348c <RCCEx_PLLSAI2_Config+0x1b8>)
 800340e:	4313      	orrs	r3, r2
 8003410:	614b      	str	r3, [r1, #20]
 8003412:	e011      	b.n	8003438 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003414:	4b1d      	ldr	r3, [pc, #116]	; (800348c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800341c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	6892      	ldr	r2, [r2, #8]
 8003424:	0211      	lsls	r1, r2, #8
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	6912      	ldr	r2, [r2, #16]
 800342a:	0852      	lsrs	r2, r2, #1
 800342c:	3a01      	subs	r2, #1
 800342e:	0652      	lsls	r2, r2, #25
 8003430:	430a      	orrs	r2, r1
 8003432:	4916      	ldr	r1, [pc, #88]	; (800348c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003434:	4313      	orrs	r3, r2
 8003436:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003438:	4b14      	ldr	r3, [pc, #80]	; (800348c <RCCEx_PLLSAI2_Config+0x1b8>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a13      	ldr	r2, [pc, #76]	; (800348c <RCCEx_PLLSAI2_Config+0x1b8>)
 800343e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003442:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003444:	f7fd f848 	bl	80004d8 <HAL_GetTick>
 8003448:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800344a:	e009      	b.n	8003460 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800344c:	f7fd f844 	bl	80004d8 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d902      	bls.n	8003460 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	73fb      	strb	r3, [r7, #15]
          break;
 800345e:	e005      	b.n	800346c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003460:	4b0a      	ldr	r3, [pc, #40]	; (800348c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d0ef      	beq.n	800344c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800346c:	7bfb      	ldrb	r3, [r7, #15]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d106      	bne.n	8003480 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003472:	4b06      	ldr	r3, [pc, #24]	; (800348c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003474:	695a      	ldr	r2, [r3, #20]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	4904      	ldr	r1, [pc, #16]	; (800348c <RCCEx_PLLSAI2_Config+0x1b8>)
 800347c:	4313      	orrs	r3, r2
 800347e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003480:	7bfb      	ldrb	r3, [r7, #15]
}
 8003482:	4618      	mov	r0, r3
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	40021000 	.word	0x40021000

08003490 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003490:	b084      	sub	sp, #16
 8003492:	b580      	push	{r7, lr}
 8003494:	b084      	sub	sp, #16
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
 800349a:	f107 001c 	add.w	r0, r7, #28
 800349e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f001 faf6 	bl	8004aa0 <USB_CoreReset>
 80034b4:	4603      	mov	r3, r0
 80034b6:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80034b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d106      	bne.n	80034cc <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	639a      	str	r2, [r3, #56]	; 0x38
 80034ca:	e005      	b.n	80034d8 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80034d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3710      	adds	r7, #16
 80034de:	46bd      	mov	sp, r7
 80034e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80034e4:	b004      	add	sp, #16
 80034e6:	4770      	bx	lr

080034e8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b087      	sub	sp, #28
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	4613      	mov	r3, r2
 80034f4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80034f6:	79fb      	ldrb	r3, [r7, #7]
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d165      	bne.n	80035c8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	4a3e      	ldr	r2, [pc, #248]	; (80035f8 <USB_SetTurnaroundTime+0x110>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d906      	bls.n	8003512 <USB_SetTurnaroundTime+0x2a>
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	4a3d      	ldr	r2, [pc, #244]	; (80035fc <USB_SetTurnaroundTime+0x114>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d202      	bcs.n	8003512 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800350c:	230f      	movs	r3, #15
 800350e:	617b      	str	r3, [r7, #20]
 8003510:	e05c      	b.n	80035cc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	4a39      	ldr	r2, [pc, #228]	; (80035fc <USB_SetTurnaroundTime+0x114>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d306      	bcc.n	8003528 <USB_SetTurnaroundTime+0x40>
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	4a38      	ldr	r2, [pc, #224]	; (8003600 <USB_SetTurnaroundTime+0x118>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d202      	bcs.n	8003528 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003522:	230e      	movs	r3, #14
 8003524:	617b      	str	r3, [r7, #20]
 8003526:	e051      	b.n	80035cc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	4a35      	ldr	r2, [pc, #212]	; (8003600 <USB_SetTurnaroundTime+0x118>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d306      	bcc.n	800353e <USB_SetTurnaroundTime+0x56>
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	4a34      	ldr	r2, [pc, #208]	; (8003604 <USB_SetTurnaroundTime+0x11c>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d202      	bcs.n	800353e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003538:	230d      	movs	r3, #13
 800353a:	617b      	str	r3, [r7, #20]
 800353c:	e046      	b.n	80035cc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	4a30      	ldr	r2, [pc, #192]	; (8003604 <USB_SetTurnaroundTime+0x11c>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d306      	bcc.n	8003554 <USB_SetTurnaroundTime+0x6c>
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	4a2f      	ldr	r2, [pc, #188]	; (8003608 <USB_SetTurnaroundTime+0x120>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d802      	bhi.n	8003554 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800354e:	230c      	movs	r3, #12
 8003550:	617b      	str	r3, [r7, #20]
 8003552:	e03b      	b.n	80035cc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	4a2c      	ldr	r2, [pc, #176]	; (8003608 <USB_SetTurnaroundTime+0x120>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d906      	bls.n	800356a <USB_SetTurnaroundTime+0x82>
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	4a2b      	ldr	r2, [pc, #172]	; (800360c <USB_SetTurnaroundTime+0x124>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d802      	bhi.n	800356a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003564:	230b      	movs	r3, #11
 8003566:	617b      	str	r3, [r7, #20]
 8003568:	e030      	b.n	80035cc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	4a27      	ldr	r2, [pc, #156]	; (800360c <USB_SetTurnaroundTime+0x124>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d906      	bls.n	8003580 <USB_SetTurnaroundTime+0x98>
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	4a26      	ldr	r2, [pc, #152]	; (8003610 <USB_SetTurnaroundTime+0x128>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d802      	bhi.n	8003580 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800357a:	230a      	movs	r3, #10
 800357c:	617b      	str	r3, [r7, #20]
 800357e:	e025      	b.n	80035cc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	4a23      	ldr	r2, [pc, #140]	; (8003610 <USB_SetTurnaroundTime+0x128>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d906      	bls.n	8003596 <USB_SetTurnaroundTime+0xae>
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	4a22      	ldr	r2, [pc, #136]	; (8003614 <USB_SetTurnaroundTime+0x12c>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d202      	bcs.n	8003596 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003590:	2309      	movs	r3, #9
 8003592:	617b      	str	r3, [r7, #20]
 8003594:	e01a      	b.n	80035cc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	4a1e      	ldr	r2, [pc, #120]	; (8003614 <USB_SetTurnaroundTime+0x12c>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d306      	bcc.n	80035ac <USB_SetTurnaroundTime+0xc4>
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	4a1d      	ldr	r2, [pc, #116]	; (8003618 <USB_SetTurnaroundTime+0x130>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d802      	bhi.n	80035ac <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80035a6:	2308      	movs	r3, #8
 80035a8:	617b      	str	r3, [r7, #20]
 80035aa:	e00f      	b.n	80035cc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	4a1a      	ldr	r2, [pc, #104]	; (8003618 <USB_SetTurnaroundTime+0x130>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d906      	bls.n	80035c2 <USB_SetTurnaroundTime+0xda>
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	4a19      	ldr	r2, [pc, #100]	; (800361c <USB_SetTurnaroundTime+0x134>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d202      	bcs.n	80035c2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80035bc:	2307      	movs	r3, #7
 80035be:	617b      	str	r3, [r7, #20]
 80035c0:	e004      	b.n	80035cc <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80035c2:	2306      	movs	r3, #6
 80035c4:	617b      	str	r3, [r7, #20]
 80035c6:	e001      	b.n	80035cc <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80035c8:	2309      	movs	r3, #9
 80035ca:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	68da      	ldr	r2, [r3, #12]
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	029b      	lsls	r3, r3, #10
 80035e0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80035e4:	431a      	orrs	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	371c      	adds	r7, #28
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr
 80035f8:	00d8acbf 	.word	0x00d8acbf
 80035fc:	00e4e1c0 	.word	0x00e4e1c0
 8003600:	00f42400 	.word	0x00f42400
 8003604:	01067380 	.word	0x01067380
 8003608:	011a499f 	.word	0x011a499f
 800360c:	01312cff 	.word	0x01312cff
 8003610:	014ca43f 	.word	0x014ca43f
 8003614:	016e3600 	.word	0x016e3600
 8003618:	01a6ab1f 	.word	0x01a6ab1f
 800361c:	01e84800 	.word	0x01e84800

08003620 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f043 0201 	orr.w	r2, r3, #1
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr

08003642 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003642:	b480      	push	{r7}
 8003644:	b083      	sub	sp, #12
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f023 0201 	bic.w	r2, r3, #1
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	460b      	mov	r3, r1
 800366e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003670:	2300      	movs	r3, #0
 8003672:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003680:	78fb      	ldrb	r3, [r7, #3]
 8003682:	2b01      	cmp	r3, #1
 8003684:	d115      	bne.n	80036b2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003692:	2001      	movs	r0, #1
 8003694:	f7fc ff2c 	bl	80004f0 <HAL_Delay>
      ms++;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	3301      	adds	r3, #1
 800369c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f001 f985 	bl	80049ae <USB_GetMode>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d01e      	beq.n	80036e8 <USB_SetCurrentMode+0x84>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2b31      	cmp	r3, #49	; 0x31
 80036ae:	d9f0      	bls.n	8003692 <USB_SetCurrentMode+0x2e>
 80036b0:	e01a      	b.n	80036e8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80036b2:	78fb      	ldrb	r3, [r7, #3]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d115      	bne.n	80036e4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80036c4:	2001      	movs	r0, #1
 80036c6:	f7fc ff13 	bl	80004f0 <HAL_Delay>
      ms++;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	3301      	adds	r3, #1
 80036ce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f001 f96c 	bl	80049ae <USB_GetMode>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d005      	beq.n	80036e8 <USB_SetCurrentMode+0x84>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2b31      	cmp	r3, #49	; 0x31
 80036e0:	d9f0      	bls.n	80036c4 <USB_SetCurrentMode+0x60>
 80036e2:	e001      	b.n	80036e8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e005      	b.n	80036f4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2b32      	cmp	r3, #50	; 0x32
 80036ec:	d101      	bne.n	80036f2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e000      	b.n	80036f4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3710      	adds	r7, #16
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80036fc:	b084      	sub	sp, #16
 80036fe:	b580      	push	{r7, lr}
 8003700:	b086      	sub	sp, #24
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
 8003706:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800370a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800370e:	2300      	movs	r3, #0
 8003710:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003716:	2300      	movs	r3, #0
 8003718:	613b      	str	r3, [r7, #16]
 800371a:	e009      	b.n	8003730 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	3340      	adds	r3, #64	; 0x40
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	4413      	add	r3, r2
 8003726:	2200      	movs	r2, #0
 8003728:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	3301      	adds	r3, #1
 800372e:	613b      	str	r3, [r7, #16]
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	2b0e      	cmp	r3, #14
 8003734:	d9f2      	bls.n	800371c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003738:	2b00      	cmp	r3, #0
 800373a:	d11c      	bne.n	8003776 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800374a:	f043 0302 	orr.w	r3, r3, #2
 800374e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003754:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	601a      	str	r2, [r3, #0]
 8003774:	e005      	b.n	8003782 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800377a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003788:	461a      	mov	r2, r3
 800378a:	2300      	movs	r3, #0
 800378c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003794:	4619      	mov	r1, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800379c:	461a      	mov	r2, r3
 800379e:	680b      	ldr	r3, [r1, #0]
 80037a0:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80037a2:	2103      	movs	r1, #3
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 f959 	bl	8003a5c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80037aa:	2110      	movs	r1, #16
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 f8f1 	bl	8003994 <USB_FlushTxFifo>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 f91d 	bl	80039fc <USB_FlushRxFifo>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d001      	beq.n	80037cc <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037d2:	461a      	mov	r2, r3
 80037d4:	2300      	movs	r3, #0
 80037d6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037de:	461a      	mov	r2, r3
 80037e0:	2300      	movs	r3, #0
 80037e2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037ea:	461a      	mov	r2, r3
 80037ec:	2300      	movs	r3, #0
 80037ee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037f0:	2300      	movs	r3, #0
 80037f2:	613b      	str	r3, [r7, #16]
 80037f4:	e043      	b.n	800387e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	015a      	lsls	r2, r3, #5
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	4413      	add	r3, r2
 80037fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003808:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800380c:	d118      	bne.n	8003840 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d10a      	bne.n	800382a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	015a      	lsls	r2, r3, #5
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	4413      	add	r3, r2
 800381c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003820:	461a      	mov	r2, r3
 8003822:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003826:	6013      	str	r3, [r2, #0]
 8003828:	e013      	b.n	8003852 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	015a      	lsls	r2, r3, #5
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	4413      	add	r3, r2
 8003832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003836:	461a      	mov	r2, r3
 8003838:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800383c:	6013      	str	r3, [r2, #0]
 800383e:	e008      	b.n	8003852 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	015a      	lsls	r2, r3, #5
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	4413      	add	r3, r2
 8003848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800384c:	461a      	mov	r2, r3
 800384e:	2300      	movs	r3, #0
 8003850:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	015a      	lsls	r2, r3, #5
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	4413      	add	r3, r2
 800385a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800385e:	461a      	mov	r2, r3
 8003860:	2300      	movs	r3, #0
 8003862:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	015a      	lsls	r2, r3, #5
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	4413      	add	r3, r2
 800386c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003870:	461a      	mov	r2, r3
 8003872:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003876:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	3301      	adds	r3, #1
 800387c:	613b      	str	r3, [r7, #16]
 800387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	429a      	cmp	r2, r3
 8003884:	d3b7      	bcc.n	80037f6 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003886:	2300      	movs	r3, #0
 8003888:	613b      	str	r3, [r7, #16]
 800388a:	e043      	b.n	8003914 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	015a      	lsls	r2, r3, #5
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	4413      	add	r3, r2
 8003894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800389e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038a2:	d118      	bne.n	80038d6 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d10a      	bne.n	80038c0 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	015a      	lsls	r2, r3, #5
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	4413      	add	r3, r2
 80038b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038b6:	461a      	mov	r2, r3
 80038b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80038bc:	6013      	str	r3, [r2, #0]
 80038be:	e013      	b.n	80038e8 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	015a      	lsls	r2, r3, #5
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	4413      	add	r3, r2
 80038c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038cc:	461a      	mov	r2, r3
 80038ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80038d2:	6013      	str	r3, [r2, #0]
 80038d4:	e008      	b.n	80038e8 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	015a      	lsls	r2, r3, #5
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	4413      	add	r3, r2
 80038de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038e2:	461a      	mov	r2, r3
 80038e4:	2300      	movs	r3, #0
 80038e6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	015a      	lsls	r2, r3, #5
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	4413      	add	r3, r2
 80038f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038f4:	461a      	mov	r2, r3
 80038f6:	2300      	movs	r3, #0
 80038f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	015a      	lsls	r2, r3, #5
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	4413      	add	r3, r2
 8003902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003906:	461a      	mov	r2, r3
 8003908:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800390c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	3301      	adds	r3, #1
 8003912:	613b      	str	r3, [r7, #16]
 8003914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	429a      	cmp	r2, r3
 800391a:	d3b7      	bcc.n	800388c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800392a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800392e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800393c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	f043 0210 	orr.w	r2, r3, #16
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	699a      	ldr	r2, [r3, #24]
 800394e:	4b10      	ldr	r3, [pc, #64]	; (8003990 <USB_DevInit+0x294>)
 8003950:	4313      	orrs	r3, r2
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003958:	2b00      	cmp	r3, #0
 800395a:	d005      	beq.n	8003968 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	f043 0208 	orr.w	r2, r3, #8
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003968:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800396a:	2b01      	cmp	r3, #1
 800396c:	d107      	bne.n	800397e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003976:	f043 0304 	orr.w	r3, r3, #4
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800397e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003980:	4618      	mov	r0, r3
 8003982:	3718      	adds	r7, #24
 8003984:	46bd      	mov	sp, r7
 8003986:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800398a:	b004      	add	sp, #16
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	803c3800 	.word	0x803c3800

08003994 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800399e:	2300      	movs	r3, #0
 80039a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	3301      	adds	r3, #1
 80039a6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	4a13      	ldr	r2, [pc, #76]	; (80039f8 <USB_FlushTxFifo+0x64>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d901      	bls.n	80039b4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e01b      	b.n	80039ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	daf2      	bge.n	80039a2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80039bc:	2300      	movs	r3, #0
 80039be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	019b      	lsls	r3, r3, #6
 80039c4:	f043 0220 	orr.w	r2, r3, #32
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	3301      	adds	r3, #1
 80039d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	4a08      	ldr	r2, [pc, #32]	; (80039f8 <USB_FlushTxFifo+0x64>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d901      	bls.n	80039de <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e006      	b.n	80039ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	f003 0320 	and.w	r3, r3, #32
 80039e6:	2b20      	cmp	r3, #32
 80039e8:	d0f0      	beq.n	80039cc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3714      	adds	r7, #20
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr
 80039f8:	00030d40 	.word	0x00030d40

080039fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b085      	sub	sp, #20
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003a04:	2300      	movs	r3, #0
 8003a06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	4a11      	ldr	r2, [pc, #68]	; (8003a58 <USB_FlushRxFifo+0x5c>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d901      	bls.n	8003a1a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e018      	b.n	8003a4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	daf2      	bge.n	8003a08 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003a22:	2300      	movs	r3, #0
 8003a24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2210      	movs	r2, #16
 8003a2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	3301      	adds	r3, #1
 8003a30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	4a08      	ldr	r2, [pc, #32]	; (8003a58 <USB_FlushRxFifo+0x5c>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d901      	bls.n	8003a3e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e006      	b.n	8003a4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	f003 0310 	and.w	r3, r3, #16
 8003a46:	2b10      	cmp	r3, #16
 8003a48:	d0f0      	beq.n	8003a2c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3714      	adds	r7, #20
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr
 8003a58:	00030d40 	.word	0x00030d40

08003a5c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	460b      	mov	r3, r1
 8003a66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	78fb      	ldrb	r3, [r7, #3]
 8003a76:	68f9      	ldr	r1, [r7, #12]
 8003a78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3714      	adds	r7, #20
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr

08003a8e <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003a8e:	b480      	push	{r7}
 8003a90:	b087      	sub	sp, #28
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f003 0306 	and.w	r3, r3, #6
 8003aa6:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d002      	beq.n	8003ab4 <USB_GetDevSpeed+0x26>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2b06      	cmp	r3, #6
 8003ab2:	d102      	bne.n	8003aba <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	75fb      	strb	r3, [r7, #23]
 8003ab8:	e001      	b.n	8003abe <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8003aba:	230f      	movs	r3, #15
 8003abc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003abe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	371c      	adds	r7, #28
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	785b      	ldrb	r3, [r3, #1]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d13a      	bne.n	8003b5e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aee:	69da      	ldr	r2, [r3, #28]
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	f003 030f 	and.w	r3, r3, #15
 8003af8:	2101      	movs	r1, #1
 8003afa:	fa01 f303 	lsl.w	r3, r1, r3
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	68f9      	ldr	r1, [r7, #12]
 8003b02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b06:	4313      	orrs	r3, r2
 8003b08:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	015a      	lsls	r2, r3, #5
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	4413      	add	r3, r2
 8003b12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d155      	bne.n	8003bcc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	015a      	lsls	r2, r3, #5
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	4413      	add	r3, r2
 8003b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	791b      	ldrb	r3, [r3, #4]
 8003b3a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003b3c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	059b      	lsls	r3, r3, #22
 8003b42:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003b44:	4313      	orrs	r3, r2
 8003b46:	68ba      	ldr	r2, [r7, #8]
 8003b48:	0151      	lsls	r1, r2, #5
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	440a      	add	r2, r1
 8003b4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b5a:	6013      	str	r3, [r2, #0]
 8003b5c:	e036      	b.n	8003bcc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b64:	69da      	ldr	r2, [r3, #28]
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	f003 030f 	and.w	r3, r3, #15
 8003b6e:	2101      	movs	r1, #1
 8003b70:	fa01 f303 	lsl.w	r3, r1, r3
 8003b74:	041b      	lsls	r3, r3, #16
 8003b76:	68f9      	ldr	r1, [r7, #12]
 8003b78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	015a      	lsls	r2, r3, #5
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	4413      	add	r3, r2
 8003b88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d11a      	bne.n	8003bcc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	015a      	lsls	r2, r3, #5
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	791b      	ldrb	r3, [r3, #4]
 8003bb0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003bb2:	430b      	orrs	r3, r1
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	68ba      	ldr	r2, [r7, #8]
 8003bb8:	0151      	lsls	r1, r2, #5
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	440a      	add	r2, r1
 8003bbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bca:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3714      	adds	r7, #20
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
	...

08003bdc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	785b      	ldrb	r3, [r3, #1]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d161      	bne.n	8003cbc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	015a      	lsls	r2, r3, #5
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	4413      	add	r3, r2
 8003c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c0e:	d11f      	bne.n	8003c50 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	015a      	lsls	r2, r3, #5
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	4413      	add	r3, r2
 8003c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68ba      	ldr	r2, [r7, #8]
 8003c20:	0151      	lsls	r1, r2, #5
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	440a      	add	r2, r1
 8003c26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c2e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	015a      	lsls	r2, r3, #5
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	4413      	add	r3, r2
 8003c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68ba      	ldr	r2, [r7, #8]
 8003c40:	0151      	lsls	r1, r2, #5
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	440a      	add	r2, r1
 8003c46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c4e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	f003 030f 	and.w	r3, r3, #15
 8003c60:	2101      	movs	r1, #1
 8003c62:	fa01 f303 	lsl.w	r3, r1, r3
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	43db      	mvns	r3, r3
 8003c6a:	68f9      	ldr	r1, [r7, #12]
 8003c6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c70:	4013      	ands	r3, r2
 8003c72:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c7a:	69da      	ldr	r2, [r3, #28]
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	f003 030f 	and.w	r3, r3, #15
 8003c84:	2101      	movs	r1, #1
 8003c86:	fa01 f303 	lsl.w	r3, r1, r3
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	43db      	mvns	r3, r3
 8003c8e:	68f9      	ldr	r1, [r7, #12]
 8003c90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c94:	4013      	ands	r3, r2
 8003c96:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	015a      	lsls	r2, r3, #5
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	0159      	lsls	r1, r3, #5
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	440b      	add	r3, r1
 8003cae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	4b35      	ldr	r3, [pc, #212]	; (8003d8c <USB_DeactivateEndpoint+0x1b0>)
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	600b      	str	r3, [r1, #0]
 8003cba:	e060      	b.n	8003d7e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	015a      	lsls	r2, r3, #5
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003cce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003cd2:	d11f      	bne.n	8003d14 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	015a      	lsls	r2, r3, #5
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	4413      	add	r3, r2
 8003cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68ba      	ldr	r2, [r7, #8]
 8003ce4:	0151      	lsls	r1, r2, #5
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	440a      	add	r2, r1
 8003cea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003cf2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	015a      	lsls	r2, r3, #5
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68ba      	ldr	r2, [r7, #8]
 8003d04:	0151      	lsls	r1, r2, #5
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	440a      	add	r2, r1
 8003d0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d12:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	f003 030f 	and.w	r3, r3, #15
 8003d24:	2101      	movs	r1, #1
 8003d26:	fa01 f303 	lsl.w	r3, r1, r3
 8003d2a:	041b      	lsls	r3, r3, #16
 8003d2c:	43db      	mvns	r3, r3
 8003d2e:	68f9      	ldr	r1, [r7, #12]
 8003d30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d34:	4013      	ands	r3, r2
 8003d36:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d3e:	69da      	ldr	r2, [r3, #28]
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	f003 030f 	and.w	r3, r3, #15
 8003d48:	2101      	movs	r1, #1
 8003d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d4e:	041b      	lsls	r3, r3, #16
 8003d50:	43db      	mvns	r3, r3
 8003d52:	68f9      	ldr	r1, [r7, #12]
 8003d54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d58:	4013      	ands	r3, r2
 8003d5a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	015a      	lsls	r2, r3, #5
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	4413      	add	r3, r2
 8003d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	0159      	lsls	r1, r3, #5
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	440b      	add	r3, r1
 8003d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d76:	4619      	mov	r1, r3
 8003d78:	4b05      	ldr	r3, [pc, #20]	; (8003d90 <USB_DeactivateEndpoint+0x1b4>)
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3714      	adds	r7, #20
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr
 8003d8c:	ec337800 	.word	0xec337800
 8003d90:	eff37800 	.word	0xeff37800

08003d94 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b086      	sub	sp, #24
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	785b      	ldrb	r3, [r3, #1]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	f040 810a 	bne.w	8003fc6 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d132      	bne.n	8003e20 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	015a      	lsls	r2, r3, #5
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	0151      	lsls	r1, r2, #5
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	440a      	add	r2, r1
 8003dd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dd4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003dd8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003ddc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	015a      	lsls	r2, r3, #5
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	4413      	add	r3, r2
 8003de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	0151      	lsls	r1, r2, #5
 8003df0:	697a      	ldr	r2, [r7, #20]
 8003df2:	440a      	add	r2, r1
 8003df4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003df8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003dfc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	015a      	lsls	r2, r3, #5
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	4413      	add	r3, r2
 8003e06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	693a      	ldr	r2, [r7, #16]
 8003e0e:	0151      	lsls	r1, r2, #5
 8003e10:	697a      	ldr	r2, [r7, #20]
 8003e12:	440a      	add	r2, r1
 8003e14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e18:	0cdb      	lsrs	r3, r3, #19
 8003e1a:	04db      	lsls	r3, r3, #19
 8003e1c:	6113      	str	r3, [r2, #16]
 8003e1e:	e074      	b.n	8003f0a <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	015a      	lsls	r2, r3, #5
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	4413      	add	r3, r2
 8003e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	693a      	ldr	r2, [r7, #16]
 8003e30:	0151      	lsls	r1, r2, #5
 8003e32:	697a      	ldr	r2, [r7, #20]
 8003e34:	440a      	add	r2, r1
 8003e36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e3a:	0cdb      	lsrs	r3, r3, #19
 8003e3c:	04db      	lsls	r3, r3, #19
 8003e3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	015a      	lsls	r2, r3, #5
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	4413      	add	r3, r2
 8003e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	0151      	lsls	r1, r2, #5
 8003e52:	697a      	ldr	r2, [r7, #20]
 8003e54:	440a      	add	r2, r1
 8003e56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e5a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003e5e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003e62:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	015a      	lsls	r2, r3, #5
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e70:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	6999      	ldr	r1, [r3, #24]
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	440b      	add	r3, r1
 8003e7c:	1e59      	subs	r1, r3, #1
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e86:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003e88:	4b9e      	ldr	r3, [pc, #632]	; (8004104 <USB_EPStartXfer+0x370>)
 8003e8a:	400b      	ands	r3, r1
 8003e8c:	6939      	ldr	r1, [r7, #16]
 8003e8e:	0148      	lsls	r0, r1, #5
 8003e90:	6979      	ldr	r1, [r7, #20]
 8003e92:	4401      	add	r1, r0
 8003e94:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	015a      	lsls	r2, r3, #5
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ea8:	691a      	ldr	r2, [r3, #16]
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003eb2:	6939      	ldr	r1, [r7, #16]
 8003eb4:	0148      	lsls	r0, r1, #5
 8003eb6:	6979      	ldr	r1, [r7, #20]
 8003eb8:	4401      	add	r1, r0
 8003eba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	791b      	ldrb	r3, [r3, #4]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d11f      	bne.n	8003f0a <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	015a      	lsls	r2, r3, #5
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	0151      	lsls	r1, r2, #5
 8003edc:	697a      	ldr	r2, [r7, #20]
 8003ede:	440a      	add	r2, r1
 8003ee0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ee4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003ee8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	015a      	lsls	r2, r3, #5
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	0151      	lsls	r1, r2, #5
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	440a      	add	r2, r1
 8003f00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f08:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	015a      	lsls	r2, r3, #5
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	4413      	add	r3, r2
 8003f12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	693a      	ldr	r2, [r7, #16]
 8003f1a:	0151      	lsls	r1, r2, #5
 8003f1c:	697a      	ldr	r2, [r7, #20]
 8003f1e:	440a      	add	r2, r1
 8003f20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f24:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003f28:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	791b      	ldrb	r3, [r3, #4]
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d015      	beq.n	8003f5e <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	f000 8106 	beq.w	8004148 <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	f003 030f 	and.w	r3, r3, #15
 8003f4c:	2101      	movs	r1, #1
 8003f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f52:	6979      	ldr	r1, [r7, #20]
 8003f54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	634b      	str	r3, [r1, #52]	; 0x34
 8003f5c:	e0f4      	b.n	8004148 <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d110      	bne.n	8003f90 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	015a      	lsls	r2, r3, #5
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	4413      	add	r3, r2
 8003f76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	693a      	ldr	r2, [r7, #16]
 8003f7e:	0151      	lsls	r1, r2, #5
 8003f80:	697a      	ldr	r2, [r7, #20]
 8003f82:	440a      	add	r2, r1
 8003f84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f88:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f8c:	6013      	str	r3, [r2, #0]
 8003f8e:	e00f      	b.n	8003fb0 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	015a      	lsls	r2, r3, #5
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	4413      	add	r3, r2
 8003f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	693a      	ldr	r2, [r7, #16]
 8003fa0:	0151      	lsls	r1, r2, #5
 8003fa2:	697a      	ldr	r2, [r7, #20]
 8003fa4:	440a      	add	r2, r1
 8003fa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003faa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fae:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	6919      	ldr	r1, [r3, #16]
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	781a      	ldrb	r2, [r3, #0]
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 fa94 	bl	80044ec <USB_WritePacket>
 8003fc4:	e0c0      	b.n	8004148 <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	015a      	lsls	r2, r3, #5
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	4413      	add	r3, r2
 8003fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	0151      	lsls	r1, r2, #5
 8003fd8:	697a      	ldr	r2, [r7, #20]
 8003fda:	440a      	add	r2, r1
 8003fdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fe0:	0cdb      	lsrs	r3, r3, #19
 8003fe2:	04db      	lsls	r3, r3, #19
 8003fe4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	015a      	lsls	r2, r3, #5
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	4413      	add	r3, r2
 8003fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	0151      	lsls	r1, r2, #5
 8003ff8:	697a      	ldr	r2, [r7, #20]
 8003ffa:	440a      	add	r2, r1
 8003ffc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004000:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004004:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004008:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d123      	bne.n	800405a <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	015a      	lsls	r2, r3, #5
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	4413      	add	r3, r2
 800401a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800401e:	691a      	ldr	r2, [r3, #16]
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004028:	6939      	ldr	r1, [r7, #16]
 800402a:	0148      	lsls	r0, r1, #5
 800402c:	6979      	ldr	r1, [r7, #20]
 800402e:	4401      	add	r1, r0
 8004030:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004034:	4313      	orrs	r3, r2
 8004036:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	015a      	lsls	r2, r3, #5
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	4413      	add	r3, r2
 8004040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	693a      	ldr	r2, [r7, #16]
 8004048:	0151      	lsls	r1, r2, #5
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	440a      	add	r2, r1
 800404e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004052:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004056:	6113      	str	r3, [r2, #16]
 8004058:	e037      	b.n	80040ca <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	699a      	ldr	r2, [r3, #24]
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	4413      	add	r3, r2
 8004064:	1e5a      	subs	r2, r3, #1
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	fbb2 f3f3 	udiv	r3, r2, r3
 800406e:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	89fa      	ldrh	r2, [r7, #14]
 8004076:	fb03 f202 	mul.w	r2, r3, r2
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	015a      	lsls	r2, r3, #5
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	4413      	add	r3, r2
 8004086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800408a:	691a      	ldr	r2, [r3, #16]
 800408c:	89fb      	ldrh	r3, [r7, #14]
 800408e:	04d9      	lsls	r1, r3, #19
 8004090:	4b1c      	ldr	r3, [pc, #112]	; (8004104 <USB_EPStartXfer+0x370>)
 8004092:	400b      	ands	r3, r1
 8004094:	6939      	ldr	r1, [r7, #16]
 8004096:	0148      	lsls	r0, r1, #5
 8004098:	6979      	ldr	r1, [r7, #20]
 800409a:	4401      	add	r1, r0
 800409c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80040a0:	4313      	orrs	r3, r2
 80040a2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	015a      	lsls	r2, r3, #5
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	4413      	add	r3, r2
 80040ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040b0:	691a      	ldr	r2, [r3, #16]
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	69db      	ldr	r3, [r3, #28]
 80040b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040ba:	6939      	ldr	r1, [r7, #16]
 80040bc:	0148      	lsls	r0, r1, #5
 80040be:	6979      	ldr	r1, [r7, #20]
 80040c0:	4401      	add	r1, r0
 80040c2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80040c6:	4313      	orrs	r3, r2
 80040c8:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	791b      	ldrb	r3, [r3, #4]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d12a      	bne.n	8004128 <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d112      	bne.n	8004108 <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	015a      	lsls	r2, r3, #5
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	4413      	add	r3, r2
 80040ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	0151      	lsls	r1, r2, #5
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	440a      	add	r2, r1
 80040f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004100:	6013      	str	r3, [r2, #0]
 8004102:	e011      	b.n	8004128 <USB_EPStartXfer+0x394>
 8004104:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	015a      	lsls	r2, r3, #5
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	4413      	add	r3, r2
 8004110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	0151      	lsls	r1, r2, #5
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	440a      	add	r2, r1
 800411e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004122:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004126:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	015a      	lsls	r2, r3, #5
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	4413      	add	r3, r2
 8004130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	0151      	lsls	r1, r2, #5
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	440a      	add	r2, r1
 800413e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004142:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004146:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3718      	adds	r7, #24
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop

08004154 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004154:	b480      	push	{r7}
 8004156:	b085      	sub	sp, #20
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	785b      	ldrb	r3, [r3, #1]
 800416c:	2b01      	cmp	r3, #1
 800416e:	f040 80ab 	bne.w	80042c8 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d132      	bne.n	80041e0 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	015a      	lsls	r2, r3, #5
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	4413      	add	r3, r2
 8004182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	68ba      	ldr	r2, [r7, #8]
 800418a:	0151      	lsls	r1, r2, #5
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	440a      	add	r2, r1
 8004190:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004194:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004198:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800419c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	015a      	lsls	r2, r3, #5
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	4413      	add	r3, r2
 80041a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	68ba      	ldr	r2, [r7, #8]
 80041ae:	0151      	lsls	r1, r2, #5
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	440a      	add	r2, r1
 80041b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80041bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	015a      	lsls	r2, r3, #5
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	4413      	add	r3, r2
 80041c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	68ba      	ldr	r2, [r7, #8]
 80041ce:	0151      	lsls	r1, r2, #5
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	440a      	add	r2, r1
 80041d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041d8:	0cdb      	lsrs	r3, r3, #19
 80041da:	04db      	lsls	r3, r3, #19
 80041dc:	6113      	str	r3, [r2, #16]
 80041de:	e04e      	b.n	800427e <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	015a      	lsls	r2, r3, #5
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	4413      	add	r3, r2
 80041e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	68ba      	ldr	r2, [r7, #8]
 80041f0:	0151      	lsls	r1, r2, #5
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	440a      	add	r2, r1
 80041f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041fa:	0cdb      	lsrs	r3, r3, #19
 80041fc:	04db      	lsls	r3, r3, #19
 80041fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	015a      	lsls	r2, r3, #5
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	4413      	add	r3, r2
 8004208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	68ba      	ldr	r2, [r7, #8]
 8004210:	0151      	lsls	r1, r2, #5
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	440a      	add	r2, r1
 8004216:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800421a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800421e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004222:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	699a      	ldr	r2, [r3, #24]
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	429a      	cmp	r2, r3
 800422e:	d903      	bls.n	8004238 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	68da      	ldr	r2, [r3, #12]
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	015a      	lsls	r2, r3, #5
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	4413      	add	r3, r2
 8004240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	68ba      	ldr	r2, [r7, #8]
 8004248:	0151      	lsls	r1, r2, #5
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	440a      	add	r2, r1
 800424e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004252:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004256:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	015a      	lsls	r2, r3, #5
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	4413      	add	r3, r2
 8004260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004264:	691a      	ldr	r2, [r3, #16]
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800426e:	68b9      	ldr	r1, [r7, #8]
 8004270:	0148      	lsls	r0, r1, #5
 8004272:	68f9      	ldr	r1, [r7, #12]
 8004274:	4401      	add	r1, r0
 8004276:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800427a:	4313      	orrs	r3, r2
 800427c:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	015a      	lsls	r2, r3, #5
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	4413      	add	r3, r2
 8004286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68ba      	ldr	r2, [r7, #8]
 800428e:	0151      	lsls	r1, r2, #5
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	440a      	add	r2, r1
 8004294:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004298:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800429c:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d071      	beq.n	800438a <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	f003 030f 	and.w	r3, r3, #15
 80042b6:	2101      	movs	r1, #1
 80042b8:	fa01 f303 	lsl.w	r3, r1, r3
 80042bc:	68f9      	ldr	r1, [r7, #12]
 80042be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042c2:	4313      	orrs	r3, r2
 80042c4:	634b      	str	r3, [r1, #52]	; 0x34
 80042c6:	e060      	b.n	800438a <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	015a      	lsls	r2, r3, #5
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	4413      	add	r3, r2
 80042d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	68ba      	ldr	r2, [r7, #8]
 80042d8:	0151      	lsls	r1, r2, #5
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	440a      	add	r2, r1
 80042de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042e2:	0cdb      	lsrs	r3, r3, #19
 80042e4:	04db      	lsls	r3, r3, #19
 80042e6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	015a      	lsls	r2, r3, #5
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	4413      	add	r3, r2
 80042f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	68ba      	ldr	r2, [r7, #8]
 80042f8:	0151      	lsls	r1, r2, #5
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	440a      	add	r2, r1
 80042fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004302:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004306:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800430a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	699b      	ldr	r3, [r3, #24]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d003      	beq.n	800431c <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	68da      	ldr	r2, [r3, #12]
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	68da      	ldr	r2, [r3, #12]
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	015a      	lsls	r2, r3, #5
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	4413      	add	r3, r2
 800432c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	68ba      	ldr	r2, [r7, #8]
 8004334:	0151      	lsls	r1, r2, #5
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	440a      	add	r2, r1
 800433a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800433e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004342:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	015a      	lsls	r2, r3, #5
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	4413      	add	r3, r2
 800434c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004350:	691a      	ldr	r2, [r3, #16]
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	69db      	ldr	r3, [r3, #28]
 8004356:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800435a:	68b9      	ldr	r1, [r7, #8]
 800435c:	0148      	lsls	r0, r1, #5
 800435e:	68f9      	ldr	r1, [r7, #12]
 8004360:	4401      	add	r1, r0
 8004362:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004366:	4313      	orrs	r3, r2
 8004368:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	015a      	lsls	r2, r3, #5
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	4413      	add	r3, r2
 8004372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68ba      	ldr	r2, [r7, #8]
 800437a:	0151      	lsls	r1, r2, #5
 800437c:	68fa      	ldr	r2, [r7, #12]
 800437e:	440a      	add	r2, r1
 8004380:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004384:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004388:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3714      	adds	r7, #20
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004398:	b480      	push	{r7}
 800439a:	b087      	sub	sp, #28
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80043a2:	2300      	movs	r3, #0
 80043a4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80043a6:	2300      	movs	r3, #0
 80043a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	785b      	ldrb	r3, [r3, #1]
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d14a      	bne.n	800444c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	015a      	lsls	r2, r3, #5
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	4413      	add	r3, r2
 80043c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043ce:	f040 8086 	bne.w	80044de <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	015a      	lsls	r2, r3, #5
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	4413      	add	r3, r2
 80043dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	683a      	ldr	r2, [r7, #0]
 80043e4:	7812      	ldrb	r2, [r2, #0]
 80043e6:	0151      	lsls	r1, r2, #5
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	440a      	add	r2, r1
 80043ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043f0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80043f4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	015a      	lsls	r2, r3, #5
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	4413      	add	r3, r2
 8004400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	683a      	ldr	r2, [r7, #0]
 8004408:	7812      	ldrb	r2, [r2, #0]
 800440a:	0151      	lsls	r1, r2, #5
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	440a      	add	r2, r1
 8004410:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004414:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004418:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	3301      	adds	r3, #1
 800441e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f242 7210 	movw	r2, #10000	; 0x2710
 8004426:	4293      	cmp	r3, r2
 8004428:	d902      	bls.n	8004430 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	75fb      	strb	r3, [r7, #23]
          break;
 800442e:	e056      	b.n	80044de <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	015a      	lsls	r2, r3, #5
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	4413      	add	r3, r2
 800443a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004444:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004448:	d0e7      	beq.n	800441a <USB_EPStopXfer+0x82>
 800444a:	e048      	b.n	80044de <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	015a      	lsls	r2, r3, #5
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	4413      	add	r3, r2
 8004456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004460:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004464:	d13b      	bne.n	80044de <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	015a      	lsls	r2, r3, #5
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	4413      	add	r3, r2
 8004470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	683a      	ldr	r2, [r7, #0]
 8004478:	7812      	ldrb	r2, [r2, #0]
 800447a:	0151      	lsls	r1, r2, #5
 800447c:	693a      	ldr	r2, [r7, #16]
 800447e:	440a      	add	r2, r1
 8004480:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004484:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004488:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	015a      	lsls	r2, r3, #5
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	4413      	add	r3, r2
 8004494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	683a      	ldr	r2, [r7, #0]
 800449c:	7812      	ldrb	r2, [r2, #0]
 800449e:	0151      	lsls	r1, r2, #5
 80044a0:	693a      	ldr	r2, [r7, #16]
 80044a2:	440a      	add	r2, r1
 80044a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80044ac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	3301      	adds	r3, #1
 80044b2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f242 7210 	movw	r2, #10000	; 0x2710
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d902      	bls.n	80044c4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	75fb      	strb	r3, [r7, #23]
          break;
 80044c2:	e00c      	b.n	80044de <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	015a      	lsls	r2, r3, #5
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	4413      	add	r3, r2
 80044ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044dc:	d0e7      	beq.n	80044ae <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80044de:	7dfb      	ldrb	r3, [r7, #23]
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	371c      	adds	r7, #28
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b089      	sub	sp, #36	; 0x24
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	4611      	mov	r1, r2
 80044f8:	461a      	mov	r2, r3
 80044fa:	460b      	mov	r3, r1
 80044fc:	71fb      	strb	r3, [r7, #7]
 80044fe:	4613      	mov	r3, r2
 8004500:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800450a:	88bb      	ldrh	r3, [r7, #4]
 800450c:	3303      	adds	r3, #3
 800450e:	089b      	lsrs	r3, r3, #2
 8004510:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8004512:	2300      	movs	r3, #0
 8004514:	61bb      	str	r3, [r7, #24]
 8004516:	e018      	b.n	800454a <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004518:	79fb      	ldrb	r3, [r7, #7]
 800451a:	031a      	lsls	r2, r3, #12
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	4413      	add	r3, r2
 8004520:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004524:	461a      	mov	r2, r3
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	6013      	str	r3, [r2, #0]
    pSrc++;
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	3301      	adds	r3, #1
 8004530:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	3301      	adds	r3, #1
 8004536:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	3301      	adds	r3, #1
 800453c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	3301      	adds	r3, #1
 8004542:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	3301      	adds	r3, #1
 8004548:	61bb      	str	r3, [r7, #24]
 800454a:	69ba      	ldr	r2, [r7, #24]
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	429a      	cmp	r2, r3
 8004550:	d3e2      	bcc.n	8004518 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3724      	adds	r7, #36	; 0x24
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004560:	b480      	push	{r7}
 8004562:	b08b      	sub	sp, #44	; 0x2c
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	4613      	mov	r3, r2
 800456c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004576:	88fb      	ldrh	r3, [r7, #6]
 8004578:	089b      	lsrs	r3, r3, #2
 800457a:	b29b      	uxth	r3, r3
 800457c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800457e:	88fb      	ldrh	r3, [r7, #6]
 8004580:	f003 0303 	and.w	r3, r3, #3
 8004584:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004586:	2300      	movs	r3, #0
 8004588:	623b      	str	r3, [r7, #32]
 800458a:	e014      	b.n	80045b6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004596:	601a      	str	r2, [r3, #0]
    pDest++;
 8004598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459a:	3301      	adds	r3, #1
 800459c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800459e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a0:	3301      	adds	r3, #1
 80045a2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80045a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a6:	3301      	adds	r3, #1
 80045a8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80045aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ac:	3301      	adds	r3, #1
 80045ae:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80045b0:	6a3b      	ldr	r3, [r7, #32]
 80045b2:	3301      	adds	r3, #1
 80045b4:	623b      	str	r3, [r7, #32]
 80045b6:	6a3a      	ldr	r2, [r7, #32]
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d3e6      	bcc.n	800458c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80045be:	8bfb      	ldrh	r3, [r7, #30]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d01e      	beq.n	8004602 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80045c4:	2300      	movs	r3, #0
 80045c6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045ce:	461a      	mov	r2, r3
 80045d0:	f107 0310 	add.w	r3, r7, #16
 80045d4:	6812      	ldr	r2, [r2, #0]
 80045d6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	6a3b      	ldr	r3, [r7, #32]
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	00db      	lsls	r3, r3, #3
 80045e0:	fa22 f303 	lsr.w	r3, r2, r3
 80045e4:	b2da      	uxtb	r2, r3
 80045e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e8:	701a      	strb	r2, [r3, #0]
      i++;
 80045ea:	6a3b      	ldr	r3, [r7, #32]
 80045ec:	3301      	adds	r3, #1
 80045ee:	623b      	str	r3, [r7, #32]
      pDest++;
 80045f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f2:	3301      	adds	r3, #1
 80045f4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80045f6:	8bfb      	ldrh	r3, [r7, #30]
 80045f8:	3b01      	subs	r3, #1
 80045fa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80045fc:	8bfb      	ldrh	r3, [r7, #30]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1ea      	bne.n	80045d8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004604:	4618      	mov	r0, r3
 8004606:	372c      	adds	r7, #44	; 0x2c
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004610:	b480      	push	{r7}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	785b      	ldrb	r3, [r3, #1]
 8004628:	2b01      	cmp	r3, #1
 800462a:	d12c      	bne.n	8004686 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	015a      	lsls	r2, r3, #5
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	4413      	add	r3, r2
 8004634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2b00      	cmp	r3, #0
 800463c:	db12      	blt.n	8004664 <USB_EPSetStall+0x54>
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d00f      	beq.n	8004664 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	015a      	lsls	r2, r3, #5
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	4413      	add	r3, r2
 800464c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68ba      	ldr	r2, [r7, #8]
 8004654:	0151      	lsls	r1, r2, #5
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	440a      	add	r2, r1
 800465a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800465e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004662:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	015a      	lsls	r2, r3, #5
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	4413      	add	r3, r2
 800466c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68ba      	ldr	r2, [r7, #8]
 8004674:	0151      	lsls	r1, r2, #5
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	440a      	add	r2, r1
 800467a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800467e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004682:	6013      	str	r3, [r2, #0]
 8004684:	e02b      	b.n	80046de <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	015a      	lsls	r2, r3, #5
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	4413      	add	r3, r2
 800468e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	db12      	blt.n	80046be <USB_EPSetStall+0xae>
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00f      	beq.n	80046be <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	015a      	lsls	r2, r3, #5
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	4413      	add	r3, r2
 80046a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68ba      	ldr	r2, [r7, #8]
 80046ae:	0151      	lsls	r1, r2, #5
 80046b0:	68fa      	ldr	r2, [r7, #12]
 80046b2:	440a      	add	r2, r1
 80046b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046b8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80046bc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	015a      	lsls	r2, r3, #5
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	4413      	add	r3, r2
 80046c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68ba      	ldr	r2, [r7, #8]
 80046ce:	0151      	lsls	r1, r2, #5
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	440a      	add	r2, r1
 80046d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80046dc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3714      	adds	r7, #20
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b085      	sub	sp, #20
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	785b      	ldrb	r3, [r3, #1]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d128      	bne.n	800475a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	015a      	lsls	r2, r3, #5
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	4413      	add	r3, r2
 8004710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68ba      	ldr	r2, [r7, #8]
 8004718:	0151      	lsls	r1, r2, #5
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	440a      	add	r2, r1
 800471e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004722:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004726:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	791b      	ldrb	r3, [r3, #4]
 800472c:	2b03      	cmp	r3, #3
 800472e:	d003      	beq.n	8004738 <USB_EPClearStall+0x4c>
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	791b      	ldrb	r3, [r3, #4]
 8004734:	2b02      	cmp	r3, #2
 8004736:	d138      	bne.n	80047aa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	015a      	lsls	r2, r3, #5
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	4413      	add	r3, r2
 8004740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68ba      	ldr	r2, [r7, #8]
 8004748:	0151      	lsls	r1, r2, #5
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	440a      	add	r2, r1
 800474e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004756:	6013      	str	r3, [r2, #0]
 8004758:	e027      	b.n	80047aa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	015a      	lsls	r2, r3, #5
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	4413      	add	r3, r2
 8004762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68ba      	ldr	r2, [r7, #8]
 800476a:	0151      	lsls	r1, r2, #5
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	440a      	add	r2, r1
 8004770:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004774:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004778:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	791b      	ldrb	r3, [r3, #4]
 800477e:	2b03      	cmp	r3, #3
 8004780:	d003      	beq.n	800478a <USB_EPClearStall+0x9e>
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	791b      	ldrb	r3, [r3, #4]
 8004786:	2b02      	cmp	r3, #2
 8004788:	d10f      	bne.n	80047aa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	015a      	lsls	r2, r3, #5
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	4413      	add	r3, r2
 8004792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68ba      	ldr	r2, [r7, #8]
 800479a:	0151      	lsls	r1, r2, #5
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	440a      	add	r2, r1
 80047a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047a8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3714      	adds	r7, #20
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	460b      	mov	r3, r1
 80047c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047d6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80047da:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	78fb      	ldrb	r3, [r7, #3]
 80047e6:	011b      	lsls	r3, r3, #4
 80047e8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80047ec:	68f9      	ldr	r1, [r7, #12]
 80047ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047f2:	4313      	orrs	r3, r2
 80047f4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3714      	adds	r7, #20
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800481e:	f023 0303 	bic.w	r3, r3, #3
 8004822:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004832:	f023 0302 	bic.w	r3, r3, #2
 8004836:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3714      	adds	r7, #20
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr

08004846 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004846:	b480      	push	{r7}
 8004848:	b085      	sub	sp, #20
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004860:	f023 0303 	bic.w	r3, r3, #3
 8004864:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004874:	f043 0302 	orr.w	r3, r3, #2
 8004878:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3714      	adds	r7, #20
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004888:	b480      	push	{r7}
 800488a:	b085      	sub	sp, #20
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	695b      	ldr	r3, [r3, #20]
 8004894:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	4013      	ands	r3, r2
 800489e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80048a0:	68fb      	ldr	r3, [r7, #12]
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3714      	adds	r7, #20
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr

080048ae <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80048ae:	b480      	push	{r7}
 80048b0:	b085      	sub	sp, #20
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ca:	69db      	ldr	r3, [r3, #28]
 80048cc:	68ba      	ldr	r2, [r7, #8]
 80048ce:	4013      	ands	r3, r2
 80048d0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	0c1b      	lsrs	r3, r3, #16
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3714      	adds	r7, #20
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr

080048e2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80048e2:	b480      	push	{r7}
 80048e4:	b085      	sub	sp, #20
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048f4:	699b      	ldr	r3, [r3, #24]
 80048f6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048fe:	69db      	ldr	r3, [r3, #28]
 8004900:	68ba      	ldr	r2, [r7, #8]
 8004902:	4013      	ands	r3, r2
 8004904:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	b29b      	uxth	r3, r3
}
 800490a:	4618      	mov	r0, r3
 800490c:	3714      	adds	r7, #20
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr

08004916 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004916:	b480      	push	{r7}
 8004918:	b085      	sub	sp, #20
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
 800491e:	460b      	mov	r3, r1
 8004920:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004926:	78fb      	ldrb	r3, [r7, #3]
 8004928:	015a      	lsls	r2, r3, #5
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	4413      	add	r3, r2
 800492e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	68ba      	ldr	r2, [r7, #8]
 8004940:	4013      	ands	r3, r2
 8004942:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004944:	68bb      	ldr	r3, [r7, #8]
}
 8004946:	4618      	mov	r0, r3
 8004948:	3714      	adds	r7, #20
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr

08004952 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004952:	b480      	push	{r7}
 8004954:	b087      	sub	sp, #28
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
 800495a:	460b      	mov	r3, r1
 800495c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004974:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004976:	78fb      	ldrb	r3, [r7, #3]
 8004978:	f003 030f 	and.w	r3, r3, #15
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	fa22 f303 	lsr.w	r3, r2, r3
 8004982:	01db      	lsls	r3, r3, #7
 8004984:	b2db      	uxtb	r3, r3
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	4313      	orrs	r3, r2
 800498a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800498c:	78fb      	ldrb	r3, [r7, #3]
 800498e:	015a      	lsls	r2, r3, #5
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	4413      	add	r3, r2
 8004994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	693a      	ldr	r2, [r7, #16]
 800499c:	4013      	ands	r3, r2
 800499e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80049a0:	68bb      	ldr	r3, [r7, #8]
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	371c      	adds	r7, #28
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr

080049ae <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80049ae:	b480      	push	{r7}
 80049b0:	b083      	sub	sp, #12
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	695b      	ldr	r3, [r3, #20]
 80049ba:	f003 0301 	and.w	r3, r3, #1
}
 80049be:	4618      	mov	r0, r3
 80049c0:	370c      	adds	r7, #12
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr

080049ca <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80049ca:	b480      	push	{r7}
 80049cc:	b085      	sub	sp, #20
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049e4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80049e8:	f023 0307 	bic.w	r3, r3, #7
 80049ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a00:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3714      	adds	r7, #20
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	333c      	adds	r3, #60	; 0x3c
 8004a22:	3304      	adds	r3, #4
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	4a1c      	ldr	r2, [pc, #112]	; (8004a9c <USB_EP0_OutStart+0x8c>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d90a      	bls.n	8004a46 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a40:	d101      	bne.n	8004a46 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8004a42:	2300      	movs	r3, #0
 8004a44:	e024      	b.n	8004a90 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	2300      	movs	r3, #0
 8004a50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a64:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	68fa      	ldr	r2, [r7, #12]
 8004a70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a74:	f043 0318 	orr.w	r3, r3, #24
 8004a78:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	68fa      	ldr	r2, [r7, #12]
 8004a84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a88:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004a8c:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3714      	adds	r7, #20
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr
 8004a9c:	4f54300a 	.word	0x4f54300a

08004aa0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b085      	sub	sp, #20
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	3301      	adds	r3, #1
 8004ab0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	4a13      	ldr	r2, [pc, #76]	; (8004b04 <USB_CoreReset+0x64>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d901      	bls.n	8004abe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e01b      	b.n	8004af6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	daf2      	bge.n	8004aac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	f043 0201 	orr.w	r2, r3, #1
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	3301      	adds	r3, #1
 8004ada:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	4a09      	ldr	r2, [pc, #36]	; (8004b04 <USB_CoreReset+0x64>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d901      	bls.n	8004ae8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e006      	b.n	8004af6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	691b      	ldr	r3, [r3, #16]
 8004aec:	f003 0301 	and.w	r3, r3, #1
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d0f0      	beq.n	8004ad6 <USB_CoreReset+0x36>

  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3714      	adds	r7, #20
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	00030d40 	.word	0x00030d40

08004b08 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	460b      	mov	r3, r1
 8004b12:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8004b14:	f44f 701d 	mov.w	r0, #628	; 0x274
 8004b18:	f003 fd74 	bl	8008604 <USBD_static_malloc>
 8004b1c:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d105      	bne.n	8004b30 <USBD_MSC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004b2c:	2302      	movs	r3, #2
 8004b2e:	e034      	b.n	8004b9a <USBD_MSC_Init+0x92>
  }

  pdev->pClassData = (void *)hmsc;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	7c1b      	ldrb	r3, [r3, #16]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d115      	bne.n	8004b6c <USBD_MSC_Init+0x64>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8004b40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b44:	2202      	movs	r2, #2
 8004b46:	2101      	movs	r1, #1
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f003 fb11 	bl	8008170 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2201      	movs	r2, #1
 8004b52:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8004b56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	2181      	movs	r1, #129	; 0x81
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f003 fb06 	bl	8008170 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	871a      	strh	r2, [r3, #56]	; 0x38
 8004b6a:	e012      	b.n	8004b92 <USBD_MSC_Init+0x8a>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8004b6c:	2340      	movs	r3, #64	; 0x40
 8004b6e:	2202      	movs	r2, #2
 8004b70:	2101      	movs	r1, #1
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f003 fafc 	bl	8008170 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8004b80:	2340      	movs	r3, #64	; 0x40
 8004b82:	2202      	movs	r2, #2
 8004b84:	2181      	movs	r1, #129	; 0x81
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f003 faf2 	bl	8008170 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 f999 	bl	8004eca <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3710      	adds	r7, #16
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}

08004ba2 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b082      	sub	sp, #8
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
 8004baa:	460b      	mov	r3, r1
 8004bac:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 8004bae:	2101      	movs	r1, #1
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f003 fb1b 	bl	80081ec <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 8004bbe:	2181      	movs	r1, #129	; 0x81
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f003 fb13 	bl	80081ec <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00c      	beq.n	8004bf0 <USBD_MSC_DeInit+0x4e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 f9d5 	bl	8004f86 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassData);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004be2:	4618      	mov	r0, r3
 8004be4:	f003 fd1c 	bl	8008620 <USBD_static_free>
    pdev->pClassData = NULL;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3708      	adds	r7, #8
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
	...

08004bfc <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b086      	sub	sp, #24
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004c0c:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8004c12:	2300      	movs	r3, #0
 8004c14:	81fb      	strh	r3, [r7, #14]

  if (hmsc == NULL)
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d101      	bne.n	8004c20 <USBD_MSC_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e0db      	b.n	8004dd8 <USBD_MSC_Setup+0x1dc>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d04e      	beq.n	8004cca <USBD_MSC_Setup+0xce>
 8004c2c:	2b20      	cmp	r3, #32
 8004c2e:	f040 80cb 	bne.w	8004dc8 <USBD_MSC_Setup+0x1cc>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	785b      	ldrb	r3, [r3, #1]
 8004c36:	2bfe      	cmp	r3, #254	; 0xfe
 8004c38:	d002      	beq.n	8004c40 <USBD_MSC_Setup+0x44>
 8004c3a:	2bff      	cmp	r3, #255	; 0xff
 8004c3c:	d025      	beq.n	8004c8a <USBD_MSC_Setup+0x8e>
 8004c3e:	e03c      	b.n	8004cba <USBD_MSC_Setup+0xbe>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	885b      	ldrh	r3, [r3, #2]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d119      	bne.n	8004c7c <USBD_MSC_Setup+0x80>
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	88db      	ldrh	r3, [r3, #6]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d115      	bne.n	8004c7c <USBD_MSC_Setup+0x80>
              ((req->bmRequest & 0x80U) == 0x80U))
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	da10      	bge.n	8004c7c <USBD_MSC_Setup+0x80>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	4798      	blx	r3
 8004c64:	4603      	mov	r3, r0
 8004c66:	461a      	mov	r2, r3
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	4619      	mov	r1, r3
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f002 fe3d 	bl	80078f2 <USBD_CtlSendData>
 8004c78:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004c7a:	e025      	b.n	8004cc8 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 8004c7c:	6839      	ldr	r1, [r7, #0]
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f002 fdc6 	bl	8007810 <USBD_CtlError>
            ret = USBD_FAIL;
 8004c84:	2303      	movs	r3, #3
 8004c86:	75fb      	strb	r3, [r7, #23]
          break;
 8004c88:	e01e      	b.n	8004cc8 <USBD_MSC_Setup+0xcc>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	885b      	ldrh	r3, [r3, #2]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d10c      	bne.n	8004cac <USBD_MSC_Setup+0xb0>
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	88db      	ldrh	r3, [r3, #6]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d108      	bne.n	8004cac <USBD_MSC_Setup+0xb0>
              ((req->bmRequest & 0x80U) != 0x80U))
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	db03      	blt.n	8004cac <USBD_MSC_Setup+0xb0>
          {
            MSC_BOT_Reset(pdev);
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f000 f948 	bl	8004f3a <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004caa:	e00d      	b.n	8004cc8 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 8004cac:	6839      	ldr	r1, [r7, #0]
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f002 fdae 	bl	8007810 <USBD_CtlError>
            ret = USBD_FAIL;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	75fb      	strb	r3, [r7, #23]
          break;
 8004cb8:	e006      	b.n	8004cc8 <USBD_MSC_Setup+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8004cba:	6839      	ldr	r1, [r7, #0]
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f002 fda7 	bl	8007810 <USBD_CtlError>
          ret = USBD_FAIL;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	75fb      	strb	r3, [r7, #23]
          break;
 8004cc6:	bf00      	nop
      }
      break;
 8004cc8:	e085      	b.n	8004dd6 <USBD_MSC_Setup+0x1da>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	785b      	ldrb	r3, [r3, #1]
 8004cce:	2b0b      	cmp	r3, #11
 8004cd0:	d871      	bhi.n	8004db6 <USBD_MSC_Setup+0x1ba>
 8004cd2:	a201      	add	r2, pc, #4	; (adr r2, 8004cd8 <USBD_MSC_Setup+0xdc>)
 8004cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cd8:	08004d09 	.word	0x08004d09
 8004cdc:	08004d85 	.word	0x08004d85
 8004ce0:	08004db7 	.word	0x08004db7
 8004ce4:	08004db7 	.word	0x08004db7
 8004ce8:	08004db7 	.word	0x08004db7
 8004cec:	08004db7 	.word	0x08004db7
 8004cf0:	08004db7 	.word	0x08004db7
 8004cf4:	08004db7 	.word	0x08004db7
 8004cf8:	08004db7 	.word	0x08004db7
 8004cfc:	08004db7 	.word	0x08004db7
 8004d00:	08004d33 	.word	0x08004d33
 8004d04:	08004d5d 	.word	0x08004d5d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	2b03      	cmp	r3, #3
 8004d12:	d107      	bne.n	8004d24 <USBD_MSC_Setup+0x128>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004d14:	f107 030e 	add.w	r3, r7, #14
 8004d18:	2202      	movs	r2, #2
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f002 fde8 	bl	80078f2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004d22:	e050      	b.n	8004dc6 <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 8004d24:	6839      	ldr	r1, [r7, #0]
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f002 fd72 	bl	8007810 <USBD_CtlError>
            ret = USBD_FAIL;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	75fb      	strb	r3, [r7, #23]
          break;
 8004d30:	e049      	b.n	8004dc6 <USBD_MSC_Setup+0x1ca>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	2b03      	cmp	r3, #3
 8004d3c:	d107      	bne.n	8004d4e <USBD_MSC_Setup+0x152>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	3304      	adds	r3, #4
 8004d42:	2201      	movs	r2, #1
 8004d44:	4619      	mov	r1, r3
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f002 fdd3 	bl	80078f2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004d4c:	e03b      	b.n	8004dc6 <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 8004d4e:	6839      	ldr	r1, [r7, #0]
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f002 fd5d 	bl	8007810 <USBD_CtlError>
            ret = USBD_FAIL;
 8004d56:	2303      	movs	r3, #3
 8004d58:	75fb      	strb	r3, [r7, #23]
          break;
 8004d5a:	e034      	b.n	8004dc6 <USBD_MSC_Setup+0x1ca>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	2b03      	cmp	r3, #3
 8004d66:	d106      	bne.n	8004d76 <USBD_MSC_Setup+0x17a>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	885b      	ldrh	r3, [r3, #2]
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	461a      	mov	r2, r3
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004d74:	e027      	b.n	8004dc6 <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 8004d76:	6839      	ldr	r1, [r7, #0]
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f002 fd49 	bl	8007810 <USBD_CtlError>
            ret = USBD_FAIL;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	75fb      	strb	r3, [r7, #23]
          break;
 8004d82:	e020      	b.n	8004dc6 <USBD_MSC_Setup+0x1ca>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	2b03      	cmp	r3, #3
 8004d8e:	d119      	bne.n	8004dc4 <USBD_MSC_Setup+0x1c8>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	885b      	ldrh	r3, [r3, #2]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d115      	bne.n	8004dc4 <USBD_MSC_Setup+0x1c8>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	889b      	ldrh	r3, [r3, #4]
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	4619      	mov	r1, r3
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f003 fa59 	bl	8008258 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	889b      	ldrh	r3, [r3, #4]
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	4619      	mov	r1, r3
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 fa82 	bl	80052b8 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8004db4:	e006      	b.n	8004dc4 <USBD_MSC_Setup+0x1c8>

        default:
          USBD_CtlError(pdev, req);
 8004db6:	6839      	ldr	r1, [r7, #0]
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f002 fd29 	bl	8007810 <USBD_CtlError>
          ret = USBD_FAIL;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	75fb      	strb	r3, [r7, #23]
          break;
 8004dc2:	e000      	b.n	8004dc6 <USBD_MSC_Setup+0x1ca>
          break;
 8004dc4:	bf00      	nop
      }
      break;
 8004dc6:	e006      	b.n	8004dd6 <USBD_MSC_Setup+0x1da>

    default:
      USBD_CtlError(pdev, req);
 8004dc8:	6839      	ldr	r1, [r7, #0]
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f002 fd20 	bl	8007810 <USBD_CtlError>
      ret = USBD_FAIL;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	75fb      	strb	r3, [r7, #23]
      break;
 8004dd4:	bf00      	nop
  }

  return (uint8_t)ret;
 8004dd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3718      	adds	r7, #24
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	460b      	mov	r3, r1
 8004dea:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8004dec:	78fb      	ldrb	r3, [r7, #3]
 8004dee:	4619      	mov	r1, r3
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 f8dc 	bl	8004fae <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3708      	adds	r7, #8
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b082      	sub	sp, #8
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	460b      	mov	r3, r1
 8004e0a:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8004e0c:	78fb      	ldrb	r3, [r7, #3]
 8004e0e:	4619      	mov	r1, r3
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 f902 	bl	800501a <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3708      	adds	r7, #8
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2220      	movs	r2, #32
 8004e2c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 8004e2e:	4b03      	ldr	r3, [pc, #12]	; (8004e3c <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr
 8004e3c:	20000044 	.word	0x20000044

08004e40 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2220      	movs	r2, #32
 8004e4c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 8004e4e:	4b03      	ldr	r3, [pc, #12]	; (8004e5c <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr
 8004e5c:	20000064 	.word	0x20000064

08004e60 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2220      	movs	r2, #32
 8004e6c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 8004e6e:	4b03      	ldr	r3, [pc, #12]	; (8004e7c <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr
 8004e7c:	20000084 	.word	0x20000084

08004e80 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	220a      	movs	r2, #10
 8004e8c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8004e8e:	4b03      	ldr	r3, [pc, #12]	; (8004e9c <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	370c      	adds	r7, #12
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr
 8004e9c:	200000a4 	.word	0x200000a4

08004ea0 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d101      	bne.n	8004eb4 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e004      	b.n	8004ebe <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	683a      	ldr	r2, [r7, #0]
 8004eb8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	370c      	adds	r7, #12
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr

08004eca <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b084      	sub	sp, #16
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ed8:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d028      	beq.n	8004f32 <MSC_BOT_Init+0x68>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2000      	movs	r0, #0
 8004f0e:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8004f10:	2101      	movs	r1, #1
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f003 f9a0 	bl	8008258 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8004f18:	2181      	movs	r1, #129	; 0x81
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f003 f99c 	bl	8008258 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8004f26:	231f      	movs	r3, #31
 8004f28:	2101      	movs	r1, #1
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f003 fad0 	bl	80084d0 <USBD_LL_PrepareReceive>
 8004f30:	e000      	b.n	8004f34 <MSC_BOT_Init+0x6a>
    return;
 8004f32:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8004f34:	3710      	adds	r7, #16
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}

08004f3a <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8004f3a:	b580      	push	{r7, lr}
 8004f3c:	b084      	sub	sp, #16
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f48:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d016      	beq.n	8004f7e <MSC_BOT_Reset+0x44>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 8004f5c:	2181      	movs	r1, #129	; 0x81
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f003 f9e6 	bl	8008330 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 8004f64:	2101      	movs	r1, #1
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f003 f9e2 	bl	8008330 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8004f72:	231f      	movs	r3, #31
 8004f74:	2101      	movs	r1, #1
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f003 faaa 	bl	80084d0 <USBD_LL_PrepareReceive>
 8004f7c:	e000      	b.n	8004f80 <MSC_BOT_Reset+0x46>
    return;
 8004f7e:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8004f80:	3710      	adds	r7, #16
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8004f86:	b480      	push	{r7}
 8004f88:	b085      	sub	sp, #20
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f94:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d002      	beq.n	8004fa2 <MSC_BOT_DeInit+0x1c>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	721a      	strb	r2, [r3, #8]
  }
}
 8004fa2:	bf00      	nop
 8004fa4:	3714      	adds	r7, #20
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr

08004fae <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b084      	sub	sp, #16
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004fc0:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d020      	beq.n	800500a <MSC_BOT_DataIn+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	7a1b      	ldrb	r3, [r3, #8]
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	d005      	beq.n	8004fdc <MSC_BOT_DataIn+0x2e>
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	db1c      	blt.n	800500e <MSC_BOT_DataIn+0x60>
 8004fd4:	3b03      	subs	r3, #3
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d819      	bhi.n	800500e <MSC_BOT_DataIn+0x60>
 8004fda:	e011      	b.n	8005000 <MSC_BOT_DataIn+0x52>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8004fe8:	461a      	mov	r2, r3
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 f992 	bl	8005314 <SCSI_ProcessCmd>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	da0d      	bge.n	8005012 <MSC_BOT_DataIn+0x64>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8004ff6:	2101      	movs	r1, #1
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 f8fb 	bl	80051f4 <MSC_BOT_SendCSW>
      }
      break;
 8004ffe:	e008      	b.n	8005012 <MSC_BOT_DataIn+0x64>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8005000:	2100      	movs	r1, #0
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 f8f6 	bl	80051f4 <MSC_BOT_SendCSW>
      break;
 8005008:	e004      	b.n	8005014 <MSC_BOT_DataIn+0x66>
    return;
 800500a:	bf00      	nop
 800500c:	e002      	b.n	8005014 <MSC_BOT_DataIn+0x66>

    default:
      break;
 800500e:	bf00      	nop
 8005010:	e000      	b.n	8005014 <MSC_BOT_DataIn+0x66>
      break;
 8005012:	bf00      	nop
  }
}
 8005014:	3710      	adds	r7, #16
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}

0800501a <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800501a:	b580      	push	{r7, lr}
 800501c:	b084      	sub	sp, #16
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
 8005022:	460b      	mov	r3, r1
 8005024:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800502c:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d01c      	beq.n	800506e <MSC_BOT_DataOut+0x54>
  {
    return;
  }

  switch (hmsc->bot_state)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	7a1b      	ldrb	r3, [r3, #8]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d002      	beq.n	8005042 <MSC_BOT_DataOut+0x28>
 800503c:	2b01      	cmp	r3, #1
 800503e:	d004      	beq.n	800504a <MSC_BOT_DataOut+0x30>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8005040:	e018      	b.n	8005074 <MSC_BOT_DataOut+0x5a>
      MSC_BOT_CBW_Decode(pdev);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 f81a 	bl	800507c <MSC_BOT_CBW_Decode>
      break;
 8005048:	e014      	b.n	8005074 <MSC_BOT_DataOut+0x5a>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8005056:	461a      	mov	r2, r3
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 f95b 	bl	8005314 <SCSI_ProcessCmd>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	da06      	bge.n	8005072 <MSC_BOT_DataOut+0x58>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8005064:	2101      	movs	r1, #1
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 f8c4 	bl	80051f4 <MSC_BOT_SendCSW>
      break;
 800506c:	e001      	b.n	8005072 <MSC_BOT_DataOut+0x58>
    return;
 800506e:	bf00      	nop
 8005070:	e000      	b.n	8005074 <MSC_BOT_DataOut+0x5a>
      break;
 8005072:	bf00      	nop
  }
}
 8005074:	3710      	adds	r7, #16
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
	...

0800507c <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800508a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d077      	beq.n	8005182 <MSC_BOT_CBW_Decode+0x106>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 80050aa:	2101      	movs	r1, #1
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f003 fa47 	bl	8008540 <USBD_LL_GetRxDataSize>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b1f      	cmp	r3, #31
 80050b6:	d114      	bne.n	80050e2 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 80050be:	4a34      	ldr	r2, [pc, #208]	; (8005190 <MSC_BOT_CBW_Decode+0x114>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d10e      	bne.n	80050e2 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d809      	bhi.n	80050e2 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d004      	beq.n	80050e2 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bCBLength > 16U))
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80050de:	2b10      	cmp	r3, #16
 80050e0:	d90e      	bls.n	8005100 <MSC_BOT_CBW_Decode+0x84>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80050e8:	2320      	movs	r3, #32
 80050ea:	2205      	movs	r2, #5
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 fdbc 	bl	8005c6a <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2202      	movs	r2, #2
 80050f6:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f000 f8ab 	bl	8005254 <MSC_BOT_Abort>
 80050fe:	e043      	b.n	8005188 <MSC_BOT_CBW_Decode+0x10c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800510c:	461a      	mov	r2, r3
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 f900 	bl	8005314 <SCSI_ProcessCmd>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	da0c      	bge.n	8005134 <MSC_BOT_CBW_Decode+0xb8>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	7a1b      	ldrb	r3, [r3, #8]
 800511e:	2b05      	cmp	r3, #5
 8005120:	d104      	bne.n	800512c <MSC_BOT_CBW_Decode+0xb0>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8005122:	2101      	movs	r1, #1
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f000 f865 	bl	80051f4 <MSC_BOT_SendCSW>
 800512a:	e02d      	b.n	8005188 <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f000 f891 	bl	8005254 <MSC_BOT_Abort>
 8005132:	e029      	b.n	8005188 <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	7a1b      	ldrb	r3, [r3, #8]
 8005138:	2b02      	cmp	r3, #2
 800513a:	d024      	beq.n	8005186 <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8005140:	2b01      	cmp	r3, #1
 8005142:	d020      	beq.n	8005186 <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8005148:	2b03      	cmp	r3, #3
 800514a:	d01c      	beq.n	8005186 <MSC_BOT_CBW_Decode+0x10a>
    {
      if (hmsc->bot_data_length > 0U)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d009      	beq.n	8005168 <MSC_BOT_CBW_Decode+0xec>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f103 0110 	add.w	r1, r3, #16
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	461a      	mov	r2, r3
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 f817 	bl	8005194 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8005166:	e00f      	b.n	8005188 <MSC_BOT_CBW_Decode+0x10c>
      }
      else if (hmsc->bot_data_length == 0U)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d104      	bne.n	800517a <MSC_BOT_CBW_Decode+0xfe>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8005170:	2100      	movs	r1, #0
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 f83e 	bl	80051f4 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8005178:	e006      	b.n	8005188 <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 f86a 	bl	8005254 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8005180:	e002      	b.n	8005188 <MSC_BOT_CBW_Decode+0x10c>
    return;
 8005182:	bf00      	nop
 8005184:	e000      	b.n	8005188 <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    else
    {
      return;
 8005186:	bf00      	nop
    }
  }
}
 8005188:	3710      	adds	r7, #16
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	43425355 	.word	0x43425355

08005194 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b086      	sub	sp, #24
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051a6:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	4293      	cmp	r3, r2
 80051b2:	bf28      	it	cs
 80051b4:	4613      	movcs	r3, r2
 80051b6:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d015      	beq.n	80051ea <MSC_BOT_SendData+0x56>
  {
    return;
  }

  hmsc->csw.dDataResidue -= len;
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	1ad2      	subs	r2, r2, r3
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	2204      	movs	r2, #4
 80051da:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	68ba      	ldr	r2, [r7, #8]
 80051e0:	2181      	movs	r1, #129	; 0x81
 80051e2:	68f8      	ldr	r0, [r7, #12]
 80051e4:	f003 f93c 	bl	8008460 <USBD_LL_Transmit>
 80051e8:	e000      	b.n	80051ec <MSC_BOT_SendData+0x58>
    return;
 80051ea:	bf00      	nop
}
 80051ec:	3718      	adds	r7, #24
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
	...

080051f4 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	460b      	mov	r3, r1
 80051fe:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005206:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d01b      	beq.n	8005246 <MSC_BOT_SendCSW+0x52>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	4a0f      	ldr	r2, [pc, #60]	; (8005250 <MSC_BOT_SendCSW+0x5c>)
 8005212:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	78fa      	ldrb	r2, [r7, #3]
 800521a:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2200      	movs	r2, #0
 8005222:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f503 720c 	add.w	r2, r3, #560	; 0x230
 800522a:	230d      	movs	r3, #13
 800522c:	2181      	movs	r1, #129	; 0x81
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f003 f916 	bl	8008460 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800523a:	231f      	movs	r3, #31
 800523c:	2101      	movs	r1, #1
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f003 f946 	bl	80084d0 <USBD_LL_PrepareReceive>
 8005244:	e000      	b.n	8005248 <MSC_BOT_SendCSW+0x54>
    return;
 8005246:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8005248:	3710      	adds	r7, #16
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	53425355 	.word	0x53425355

08005254 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005262:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d022      	beq.n	80052b0 <MSC_BOT_Abort+0x5c>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8005270:	2b00      	cmp	r3, #0
 8005272:	d10c      	bne.n	800528e <MSC_BOT_Abort+0x3a>
      (hmsc->cbw.dDataLength != 0U) &&
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 800527a:	2b00      	cmp	r3, #0
 800527c:	d007      	beq.n	800528e <MSC_BOT_Abort+0x3a>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8005282:	2b00      	cmp	r3, #0
 8005284:	d103      	bne.n	800528e <MSC_BOT_Abort+0x3a>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8005286:	2101      	movs	r1, #1
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f003 f81b 	bl	80082c4 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800528e:	2181      	movs	r1, #129	; 0x81
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f003 f817 	bl	80082c4 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	7a5b      	ldrb	r3, [r3, #9]
 800529a:	2b02      	cmp	r3, #2
 800529c:	d109      	bne.n	80052b2 <MSC_BOT_Abort+0x5e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800529e:	2181      	movs	r1, #129	; 0x81
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f003 f80f 	bl	80082c4 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 80052a6:	2101      	movs	r1, #1
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f003 f80b 	bl	80082c4 <USBD_LL_StallEP>
 80052ae:	e000      	b.n	80052b2 <MSC_BOT_Abort+0x5e>
    return;
 80052b0:	bf00      	nop
  }
}
 80052b2:	3710      	adds	r7, #16
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	460b      	mov	r3, r1
 80052c2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80052ca:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d019      	beq.n	8005306 <MSC_BOT_CplClrFeature+0x4e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	7a5b      	ldrb	r3, [r3, #9]
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d108      	bne.n	80052ec <MSC_BOT_CplClrFeature+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80052da:	2181      	movs	r1, #129	; 0x81
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f002 fff1 	bl	80082c4 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 80052e2:	2101      	movs	r1, #1
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f002 ffed 	bl	80082c4 <USBD_LL_StallEP>
 80052ea:	e00f      	b.n	800530c <MSC_BOT_CplClrFeature+0x54>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 80052ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	da0a      	bge.n	800530a <MSC_BOT_CplClrFeature+0x52>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	7a5b      	ldrb	r3, [r3, #9]
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d006      	beq.n	800530a <MSC_BOT_CplClrFeature+0x52>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80052fc:	2101      	movs	r1, #1
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f7ff ff78 	bl	80051f4 <MSC_BOT_SendCSW>
 8005304:	e002      	b.n	800530c <MSC_BOT_CplClrFeature+0x54>
    return;
 8005306:	bf00      	nop
 8005308:	e000      	b.n	800530c <MSC_BOT_CplClrFeature+0x54>
  }
  else
  {
    return;
 800530a:	bf00      	nop
  }
}
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
	...

08005314 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b086      	sub	sp, #24
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	460b      	mov	r3, r1
 800531e:	607a      	str	r2, [r7, #4]
 8005320:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005328:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d102      	bne.n	8005336 <SCSI_ProcessCmd+0x22>
  {
    return -1;
 8005330:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005334:	e168      	b.n	8005608 <SCSI_ProcessCmd+0x2f4>
  }

  switch (cmd[0])
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	2baa      	cmp	r3, #170	; 0xaa
 800533c:	f000 8144 	beq.w	80055c8 <SCSI_ProcessCmd+0x2b4>
 8005340:	2baa      	cmp	r3, #170	; 0xaa
 8005342:	f300 8153 	bgt.w	80055ec <SCSI_ProcessCmd+0x2d8>
 8005346:	2ba8      	cmp	r3, #168	; 0xa8
 8005348:	f000 812c 	beq.w	80055a4 <SCSI_ProcessCmd+0x290>
 800534c:	2ba8      	cmp	r3, #168	; 0xa8
 800534e:	f300 814d 	bgt.w	80055ec <SCSI_ProcessCmd+0x2d8>
 8005352:	2b5a      	cmp	r3, #90	; 0x5a
 8005354:	f300 80c0 	bgt.w	80054d8 <SCSI_ProcessCmd+0x1c4>
 8005358:	2b00      	cmp	r3, #0
 800535a:	f2c0 8147 	blt.w	80055ec <SCSI_ProcessCmd+0x2d8>
 800535e:	2b5a      	cmp	r3, #90	; 0x5a
 8005360:	f200 8144 	bhi.w	80055ec <SCSI_ProcessCmd+0x2d8>
 8005364:	a201      	add	r2, pc, #4	; (adr r2, 800536c <SCSI_ProcessCmd+0x58>)
 8005366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800536a:	bf00      	nop
 800536c:	080054df 	.word	0x080054df
 8005370:	080055ed 	.word	0x080055ed
 8005374:	080055ed 	.word	0x080055ed
 8005378:	080054f1 	.word	0x080054f1
 800537c:	080055ed 	.word	0x080055ed
 8005380:	080055ed 	.word	0x080055ed
 8005384:	080055ed 	.word	0x080055ed
 8005388:	080055ed 	.word	0x080055ed
 800538c:	080055ed 	.word	0x080055ed
 8005390:	080055ed 	.word	0x080055ed
 8005394:	080055ed 	.word	0x080055ed
 8005398:	080055ed 	.word	0x080055ed
 800539c:	080055ed 	.word	0x080055ed
 80053a0:	080055ed 	.word	0x080055ed
 80053a4:	080055ed 	.word	0x080055ed
 80053a8:	080055ed 	.word	0x080055ed
 80053ac:	080055ed 	.word	0x080055ed
 80053b0:	080055ed 	.word	0x080055ed
 80053b4:	08005503 	.word	0x08005503
 80053b8:	080055ed 	.word	0x080055ed
 80053bc:	080055ed 	.word	0x080055ed
 80053c0:	080055ed 	.word	0x080055ed
 80053c4:	080055ed 	.word	0x080055ed
 80053c8:	080055ed 	.word	0x080055ed
 80053cc:	080055ed 	.word	0x080055ed
 80053d0:	080055ed 	.word	0x080055ed
 80053d4:	08005539 	.word	0x08005539
 80053d8:	08005515 	.word	0x08005515
 80053dc:	080055ed 	.word	0x080055ed
 80053e0:	080055ed 	.word	0x080055ed
 80053e4:	08005527 	.word	0x08005527
 80053e8:	080055ed 	.word	0x080055ed
 80053ec:	080055ed 	.word	0x080055ed
 80053f0:	080055ed 	.word	0x080055ed
 80053f4:	080055ed 	.word	0x080055ed
 80053f8:	0800555d 	.word	0x0800555d
 80053fc:	080055ed 	.word	0x080055ed
 8005400:	0800556f 	.word	0x0800556f
 8005404:	080055ed 	.word	0x080055ed
 8005408:	080055ed 	.word	0x080055ed
 800540c:	08005593 	.word	0x08005593
 8005410:	080055ed 	.word	0x080055ed
 8005414:	080055b7 	.word	0x080055b7
 8005418:	080055ed 	.word	0x080055ed
 800541c:	080055ed 	.word	0x080055ed
 8005420:	080055ed 	.word	0x080055ed
 8005424:	080055ed 	.word	0x080055ed
 8005428:	080055db 	.word	0x080055db
 800542c:	080055ed 	.word	0x080055ed
 8005430:	080055ed 	.word	0x080055ed
 8005434:	080055ed 	.word	0x080055ed
 8005438:	080055ed 	.word	0x080055ed
 800543c:	080055ed 	.word	0x080055ed
 8005440:	080055ed 	.word	0x080055ed
 8005444:	080055ed 	.word	0x080055ed
 8005448:	080055ed 	.word	0x080055ed
 800544c:	080055ed 	.word	0x080055ed
 8005450:	080055ed 	.word	0x080055ed
 8005454:	080055ed 	.word	0x080055ed
 8005458:	080055ed 	.word	0x080055ed
 800545c:	080055ed 	.word	0x080055ed
 8005460:	080055ed 	.word	0x080055ed
 8005464:	080055ed 	.word	0x080055ed
 8005468:	080055ed 	.word	0x080055ed
 800546c:	080055ed 	.word	0x080055ed
 8005470:	080055ed 	.word	0x080055ed
 8005474:	080055ed 	.word	0x080055ed
 8005478:	080055ed 	.word	0x080055ed
 800547c:	080055ed 	.word	0x080055ed
 8005480:	080055ed 	.word	0x080055ed
 8005484:	080055ed 	.word	0x080055ed
 8005488:	080055ed 	.word	0x080055ed
 800548c:	080055ed 	.word	0x080055ed
 8005490:	080055ed 	.word	0x080055ed
 8005494:	080055ed 	.word	0x080055ed
 8005498:	080055ed 	.word	0x080055ed
 800549c:	080055ed 	.word	0x080055ed
 80054a0:	080055ed 	.word	0x080055ed
 80054a4:	080055ed 	.word	0x080055ed
 80054a8:	080055ed 	.word	0x080055ed
 80054ac:	080055ed 	.word	0x080055ed
 80054b0:	080055ed 	.word	0x080055ed
 80054b4:	080055ed 	.word	0x080055ed
 80054b8:	080055ed 	.word	0x080055ed
 80054bc:	080055ed 	.word	0x080055ed
 80054c0:	080055ed 	.word	0x080055ed
 80054c4:	080055ed 	.word	0x080055ed
 80054c8:	080055ed 	.word	0x080055ed
 80054cc:	080055ed 	.word	0x080055ed
 80054d0:	080055ed 	.word	0x080055ed
 80054d4:	0800554b 	.word	0x0800554b
 80054d8:	2b9e      	cmp	r3, #158	; 0x9e
 80054da:	d051      	beq.n	8005580 <SCSI_ProcessCmd+0x26c>
 80054dc:	e086      	b.n	80055ec <SCSI_ProcessCmd+0x2d8>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 80054de:	7afb      	ldrb	r3, [r7, #11]
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	4619      	mov	r1, r3
 80054e4:	68f8      	ldr	r0, [r7, #12]
 80054e6:	f000 f893 	bl	8005610 <SCSI_TestUnitReady>
 80054ea:	4603      	mov	r3, r0
 80054ec:	75fb      	strb	r3, [r7, #23]
      break;
 80054ee:	e089      	b.n	8005604 <SCSI_ProcessCmd+0x2f0>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 80054f0:	7afb      	ldrb	r3, [r7, #11]
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	4619      	mov	r1, r3
 80054f6:	68f8      	ldr	r0, [r7, #12]
 80054f8:	f000 fb38 	bl	8005b6c <SCSI_RequestSense>
 80054fc:	4603      	mov	r3, r0
 80054fe:	75fb      	strb	r3, [r7, #23]
      break;
 8005500:	e080      	b.n	8005604 <SCSI_ProcessCmd+0x2f0>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8005502:	7afb      	ldrb	r3, [r7, #11]
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	4619      	mov	r1, r3
 8005508:	68f8      	ldr	r0, [r7, #12]
 800550a:	f000 f8d1 	bl	80056b0 <SCSI_Inquiry>
 800550e:	4603      	mov	r3, r0
 8005510:	75fb      	strb	r3, [r7, #23]
      break;
 8005512:	e077      	b.n	8005604 <SCSI_ProcessCmd+0x2f0>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8005514:	7afb      	ldrb	r3, [r7, #11]
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	4619      	mov	r1, r3
 800551a:	68f8      	ldr	r0, [r7, #12]
 800551c:	f000 fbec 	bl	8005cf8 <SCSI_StartStopUnit>
 8005520:	4603      	mov	r3, r0
 8005522:	75fb      	strb	r3, [r7, #23]
      break;
 8005524:	e06e      	b.n	8005604 <SCSI_ProcessCmd+0x2f0>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8005526:	7afb      	ldrb	r3, [r7, #11]
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	4619      	mov	r1, r3
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	f000 fc34 	bl	8005d9a <SCSI_AllowPreventRemovable>
 8005532:	4603      	mov	r3, r0
 8005534:	75fb      	strb	r3, [r7, #23]
      break;
 8005536:	e065      	b.n	8005604 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8005538:	7afb      	ldrb	r3, [r7, #11]
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	4619      	mov	r1, r3
 800553e:	68f8      	ldr	r0, [r7, #12]
 8005540:	f000 fabc 	bl	8005abc <SCSI_ModeSense6>
 8005544:	4603      	mov	r3, r0
 8005546:	75fb      	strb	r3, [r7, #23]
      break;
 8005548:	e05c      	b.n	8005604 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 800554a:	7afb      	ldrb	r3, [r7, #11]
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	4619      	mov	r1, r3
 8005550:	68f8      	ldr	r0, [r7, #12]
 8005552:	f000 fadf 	bl	8005b14 <SCSI_ModeSense10>
 8005556:	4603      	mov	r3, r0
 8005558:	75fb      	strb	r3, [r7, #23]
      break;
 800555a:	e053      	b.n	8005604 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800555c:	7afb      	ldrb	r3, [r7, #11]
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	4619      	mov	r1, r3
 8005562:	68f8      	ldr	r0, [r7, #12]
 8005564:	f000 fa37 	bl	80059d6 <SCSI_ReadFormatCapacity>
 8005568:	4603      	mov	r3, r0
 800556a:	75fb      	strb	r3, [r7, #23]
      break;
 800556c:	e04a      	b.n	8005604 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800556e:	7afb      	ldrb	r3, [r7, #11]
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	4619      	mov	r1, r3
 8005574:	68f8      	ldr	r0, [r7, #12]
 8005576:	f000 f90f 	bl	8005798 <SCSI_ReadCapacity10>
 800557a:	4603      	mov	r3, r0
 800557c:	75fb      	strb	r3, [r7, #23]
      break;
 800557e:	e041      	b.n	8005604 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8005580:	7afb      	ldrb	r3, [r7, #11]
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	4619      	mov	r1, r3
 8005586:	68f8      	ldr	r0, [r7, #12]
 8005588:	f000 f97b 	bl	8005882 <SCSI_ReadCapacity16>
 800558c:	4603      	mov	r3, r0
 800558e:	75fb      	strb	r3, [r7, #23]
      break;
 8005590:	e038      	b.n	8005604 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8005592:	7afb      	ldrb	r3, [r7, #11]
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	4619      	mov	r1, r3
 8005598:	68f8      	ldr	r0, [r7, #12]
 800559a:	f000 fc27 	bl	8005dec <SCSI_Read10>
 800559e:	4603      	mov	r3, r0
 80055a0:	75fb      	strb	r3, [r7, #23]
      break;
 80055a2:	e02f      	b.n	8005604 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 80055a4:	7afb      	ldrb	r3, [r7, #11]
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	4619      	mov	r1, r3
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f000 fcbe 	bl	8005f2c <SCSI_Read12>
 80055b0:	4603      	mov	r3, r0
 80055b2:	75fb      	strb	r3, [r7, #23]
      break;
 80055b4:	e026      	b.n	8005604 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 80055b6:	7afb      	ldrb	r3, [r7, #11]
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	4619      	mov	r1, r3
 80055bc:	68f8      	ldr	r0, [r7, #12]
 80055be:	f000 fd60 	bl	8006082 <SCSI_Write10>
 80055c2:	4603      	mov	r3, r0
 80055c4:	75fb      	strb	r3, [r7, #23]
      break;
 80055c6:	e01d      	b.n	8005604 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 80055c8:	7afb      	ldrb	r3, [r7, #11]
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	4619      	mov	r1, r3
 80055ce:	68f8      	ldr	r0, [r7, #12]
 80055d0:	f000 fe1c 	bl	800620c <SCSI_Write12>
 80055d4:	4603      	mov	r3, r0
 80055d6:	75fb      	strb	r3, [r7, #23]
      break;
 80055d8:	e014      	b.n	8005604 <SCSI_ProcessCmd+0x2f0>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 80055da:	7afb      	ldrb	r3, [r7, #11]
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	4619      	mov	r1, r3
 80055e0:	68f8      	ldr	r0, [r7, #12]
 80055e2:	f000 fee8 	bl	80063b6 <SCSI_Verify10>
 80055e6:	4603      	mov	r3, r0
 80055e8:	75fb      	strb	r3, [r7, #23]
      break;
 80055ea:	e00b      	b.n	8005604 <SCSI_ProcessCmd+0x2f0>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 80055ec:	7af9      	ldrb	r1, [r7, #11]
 80055ee:	2320      	movs	r3, #32
 80055f0:	2205      	movs	r2, #5
 80055f2:	68f8      	ldr	r0, [r7, #12]
 80055f4:	f000 fb39 	bl	8005c6a <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	2202      	movs	r2, #2
 80055fc:	725a      	strb	r2, [r3, #9]
      ret = -1;
 80055fe:	23ff      	movs	r3, #255	; 0xff
 8005600:	75fb      	strb	r3, [r7, #23]
      break;
 8005602:	bf00      	nop
  }

  return ret;
 8005604:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005608:	4618      	mov	r0, r3
 800560a:	3718      	adds	r7, #24
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b086      	sub	sp, #24
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	460b      	mov	r3, r1
 800561a:	607a      	str	r2, [r7, #4]
 800561c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005624:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d102      	bne.n	8005632 <SCSI_TestUnitReady+0x22>
  {
    return -1;
 800562c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005630:	e03a      	b.n	80056a8 <SCSI_TestUnitReady+0x98>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005638:	2b00      	cmp	r3, #0
 800563a:	d00a      	beq.n	8005652 <SCSI_TestUnitReady+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005642:	2320      	movs	r3, #32
 8005644:	2205      	movs	r2, #5
 8005646:	68f8      	ldr	r0, [r7, #12]
 8005648:	f000 fb0f 	bl	8005c6a <SCSI_SenseCode>

    return -1;
 800564c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005650:	e02a      	b.n	80056a8 <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8005658:	2b02      	cmp	r3, #2
 800565a:	d10b      	bne.n	8005674 <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800565c:	7af9      	ldrb	r1, [r7, #11]
 800565e:	233a      	movs	r3, #58	; 0x3a
 8005660:	2202      	movs	r2, #2
 8005662:	68f8      	ldr	r0, [r7, #12]
 8005664:	f000 fb01 	bl	8005c6a <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	2205      	movs	r2, #5
 800566c:	721a      	strb	r2, [r3, #8]
    return -1;
 800566e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005672:	e019      	b.n	80056a8 <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	7afa      	ldrb	r2, [r7, #11]
 800567e:	4610      	mov	r0, r2
 8005680:	4798      	blx	r3
 8005682:	4603      	mov	r3, r0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00b      	beq.n	80056a0 <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005688:	7af9      	ldrb	r1, [r7, #11]
 800568a:	233a      	movs	r3, #58	; 0x3a
 800568c:	2202      	movs	r2, #2
 800568e:	68f8      	ldr	r0, [r7, #12]
 8005690:	f000 faeb 	bl	8005c6a <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	2205      	movs	r2, #5
 8005698:	721a      	strb	r2, [r3, #8]

    return -1;
 800569a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800569e:	e003      	b.n	80056a8 <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	2200      	movs	r2, #0
 80056a4:	60da      	str	r2, [r3, #12]

  return 0;
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3718      	adds	r7, #24
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b088      	sub	sp, #32
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	460b      	mov	r3, r1
 80056ba:	607a      	str	r2, [r7, #4]
 80056bc:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80056c4:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d102      	bne.n	80056d2 <SCSI_Inquiry+0x22>
  {
    return -1;
 80056cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056d0:	e05a      	b.n	8005788 <SCSI_Inquiry+0xd8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 80056d2:	69bb      	ldr	r3, [r7, #24]
 80056d4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d10a      	bne.n	80056f2 <SCSI_Inquiry+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80056e2:	2320      	movs	r3, #32
 80056e4:	2205      	movs	r2, #5
 80056e6:	68f8      	ldr	r0, [r7, #12]
 80056e8:	f000 fabf 	bl	8005c6a <SCSI_SenseCode>
    return -1;
 80056ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056f0:	e04a      	b.n	8005788 <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	3301      	adds	r3, #1
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	f003 0301 	and.w	r3, r3, #1
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d020      	beq.n	8005742 <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	3302      	adds	r3, #2
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d105      	bne.n	8005716 <SCSI_Inquiry+0x66>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 800570a:	2206      	movs	r2, #6
 800570c:	4920      	ldr	r1, [pc, #128]	; (8005790 <SCSI_Inquiry+0xe0>)
 800570e:	69b8      	ldr	r0, [r7, #24]
 8005710:	f000 ffb4 	bl	800667c <SCSI_UpdateBotData>
 8005714:	e037      	b.n	8005786 <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	3302      	adds	r3, #2
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	2b80      	cmp	r3, #128	; 0x80
 800571e:	d105      	bne.n	800572c <SCSI_Inquiry+0x7c>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8005720:	2208      	movs	r2, #8
 8005722:	491c      	ldr	r1, [pc, #112]	; (8005794 <SCSI_Inquiry+0xe4>)
 8005724:	69b8      	ldr	r0, [r7, #24]
 8005726:	f000 ffa9 	bl	800667c <SCSI_UpdateBotData>
 800572a:	e02c      	b.n	8005786 <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005732:	2324      	movs	r3, #36	; 0x24
 8005734:	2205      	movs	r2, #5
 8005736:	68f8      	ldr	r0, [r7, #12]
 8005738:	f000 fa97 	bl	8005c6a <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 800573c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005740:	e022      	b.n	8005788 <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *) &((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005748:	69d9      	ldr	r1, [r3, #28]
 800574a:	7afa      	ldrb	r2, [r7, #11]
 800574c:	4613      	mov	r3, r2
 800574e:	00db      	lsls	r3, r3, #3
 8005750:	4413      	add	r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	440b      	add	r3, r1
 8005756:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	3304      	adds	r3, #4
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	b29b      	uxth	r3, r3
 8005760:	3305      	adds	r3, #5
 8005762:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	3304      	adds	r3, #4
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	b29b      	uxth	r3, r3
 800576c:	8bfa      	ldrh	r2, [r7, #30]
 800576e:	429a      	cmp	r2, r3
 8005770:	d303      	bcc.n	800577a <SCSI_Inquiry+0xca>
    {
      len = params[4];
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	3304      	adds	r3, #4
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 800577a:	8bfb      	ldrh	r3, [r7, #30]
 800577c:	461a      	mov	r2, r3
 800577e:	6979      	ldr	r1, [r7, #20]
 8005780:	69b8      	ldr	r0, [r7, #24]
 8005782:	f000 ff7b 	bl	800667c <SCSI_UpdateBotData>
  }

  return 0;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	3720      	adds	r7, #32
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}
 8005790:	200000b0 	.word	0x200000b0
 8005794:	200000b8 	.word	0x200000b8

08005798 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b086      	sub	sp, #24
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	460b      	mov	r3, r1
 80057a2:	607a      	str	r2, [r7, #4]
 80057a4:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057ac:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d102      	bne.n	80057ba <SCSI_ReadCapacity10+0x22>
  {
    return -1;
 80057b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057b8:	e05f      	b.n	800587a <SCSI_ReadCapacity10+0xe2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	697a      	ldr	r2, [r7, #20]
 80057c4:	f502 711a 	add.w	r1, r2, #616	; 0x268
 80057c8:	697a      	ldr	r2, [r7, #20]
 80057ca:	f502 7219 	add.w	r2, r2, #612	; 0x264
 80057ce:	7af8      	ldrb	r0, [r7, #11]
 80057d0:	4798      	blx	r3
 80057d2:	4603      	mov	r3, r0
 80057d4:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80057d6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d104      	bne.n	80057e8 <SCSI_ReadCapacity10+0x50>
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	d108      	bne.n	80057fa <SCSI_ReadCapacity10+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80057e8:	7af9      	ldrb	r1, [r7, #11]
 80057ea:	233a      	movs	r3, #58	; 0x3a
 80057ec:	2202      	movs	r2, #2
 80057ee:	68f8      	ldr	r0, [r7, #12]
 80057f0:	f000 fa3b 	bl	8005c6a <SCSI_SenseCode>
    return -1;
 80057f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057f8:	e03f      	b.n	800587a <SCSI_ReadCapacity10+0xe2>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005800:	3b01      	subs	r3, #1
 8005802:	0e1b      	lsrs	r3, r3, #24
 8005804:	b2da      	uxtb	r2, r3
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005810:	3b01      	subs	r3, #1
 8005812:	0c1b      	lsrs	r3, r3, #16
 8005814:	b2da      	uxtb	r2, r3
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005820:	3b01      	subs	r3, #1
 8005822:	0a1b      	lsrs	r3, r3, #8
 8005824:	b2da      	uxtb	r2, r3
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005830:	b2db      	uxtb	r3, r3
 8005832:	3b01      	subs	r3, #1
 8005834:	b2da      	uxtb	r2, r3
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005840:	161b      	asrs	r3, r3, #24
 8005842:	b2da      	uxtb	r2, r3
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800584e:	141b      	asrs	r3, r3, #16
 8005850:	b2da      	uxtb	r2, r3
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800585c:	0a1b      	lsrs	r3, r3, #8
 800585e:	b29b      	uxth	r3, r3
 8005860:	b2da      	uxtb	r2, r3
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800586c:	b2da      	uxtb	r2, r3
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	2208      	movs	r2, #8
 8005876:	60da      	str	r2, [r3, #12]

  return 0;
 8005878:	2300      	movs	r3, #0

}
 800587a:	4618      	mov	r0, r3
 800587c:	3718      	adds	r7, #24
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}

08005882 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005882:	b580      	push	{r7, lr}
 8005884:	b088      	sub	sp, #32
 8005886:	af00      	add	r7, sp, #0
 8005888:	60f8      	str	r0, [r7, #12]
 800588a:	460b      	mov	r3, r1
 800588c:	607a      	str	r2, [r7, #4]
 800588e:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005896:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d102      	bne.n	80058a4 <SCSI_ReadCapacity16+0x22>
  {
    return -1;
 800589e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80058a2:	e094      	b.n	80059ce <SCSI_ReadCapacity16+0x14c>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	69ba      	ldr	r2, [r7, #24]
 80058ae:	f502 711a 	add.w	r1, r2, #616	; 0x268
 80058b2:	69ba      	ldr	r2, [r7, #24]
 80058b4:	f502 7219 	add.w	r2, r2, #612	; 0x264
 80058b8:	7af8      	ldrb	r0, [r7, #11]
 80058ba:	4798      	blx	r3
 80058bc:	4603      	mov	r3, r0
 80058be:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80058c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d104      	bne.n	80058d2 <SCSI_ReadCapacity16+0x50>
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80058ce:	2b02      	cmp	r3, #2
 80058d0:	d108      	bne.n	80058e4 <SCSI_ReadCapacity16+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80058d2:	7af9      	ldrb	r1, [r7, #11]
 80058d4:	233a      	movs	r3, #58	; 0x3a
 80058d6:	2202      	movs	r2, #2
 80058d8:	68f8      	ldr	r0, [r7, #12]
 80058da:	f000 f9c6 	bl	8005c6a <SCSI_SenseCode>
    return -1;
 80058de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80058e2:	e074      	b.n	80059ce <SCSI_ReadCapacity16+0x14c>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	330a      	adds	r3, #10
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	330b      	adds	r3, #11
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80058f4:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	330c      	adds	r3, #12
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 80058fe:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	320d      	adds	r2, #13
 8005904:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8005906:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800590c:	2300      	movs	r3, #0
 800590e:	77fb      	strb	r3, [r7, #31]
 8005910:	e007      	b.n	8005922 <SCSI_ReadCapacity16+0xa0>
  {
    hmsc->bot_data[idx] = 0U;
 8005912:	7ffb      	ldrb	r3, [r7, #31]
 8005914:	69ba      	ldr	r2, [r7, #24]
 8005916:	4413      	add	r3, r2
 8005918:	2200      	movs	r2, #0
 800591a:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800591c:	7ffb      	ldrb	r3, [r7, #31]
 800591e:	3301      	adds	r3, #1
 8005920:	77fb      	strb	r3, [r7, #31]
 8005922:	7ffa      	ldrb	r2, [r7, #31]
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	429a      	cmp	r2, r3
 800592a:	d3f2      	bcc.n	8005912 <SCSI_ReadCapacity16+0x90>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005932:	3b01      	subs	r3, #1
 8005934:	0e1b      	lsrs	r3, r3, #24
 8005936:	b2da      	uxtb	r2, r3
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005942:	3b01      	subs	r3, #1
 8005944:	0c1b      	lsrs	r3, r3, #16
 8005946:	b2da      	uxtb	r2, r3
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005952:	3b01      	subs	r3, #1
 8005954:	0a1b      	lsrs	r3, r3, #8
 8005956:	b2da      	uxtb	r2, r3
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005962:	b2db      	uxtb	r3, r3
 8005964:	3b01      	subs	r3, #1
 8005966:	b2da      	uxtb	r2, r3
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800596c:	69bb      	ldr	r3, [r7, #24]
 800596e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005972:	161b      	asrs	r3, r3, #24
 8005974:	b2da      	uxtb	r2, r3
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005980:	141b      	asrs	r3, r3, #16
 8005982:	b2da      	uxtb	r2, r3
 8005984:	69bb      	ldr	r3, [r7, #24]
 8005986:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800598e:	0a1b      	lsrs	r3, r3, #8
 8005990:	b29b      	uxth	r3, r3
 8005992:	b2da      	uxtb	r2, r3
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800599e:	b2da      	uxtb	r2, r3
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	330a      	adds	r3, #10
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	330b      	adds	r3, #11
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80059b4:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	330c      	adds	r3, #12
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 80059be:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	320d      	adds	r2, #13
 80059c4:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 80059c6:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	60da      	str	r2, [r3, #12]

  return 0;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3720      	adds	r7, #32
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}

080059d6 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80059d6:	b580      	push	{r7, lr}
 80059d8:	b088      	sub	sp, #32
 80059da:	af00      	add	r7, sp, #0
 80059dc:	60f8      	str	r0, [r7, #12]
 80059de:	460b      	mov	r3, r1
 80059e0:	607a      	str	r2, [r7, #4]
 80059e2:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059ea:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d102      	bne.n	80059f8 <SCSI_ReadFormatCapacity+0x22>
  {
    return -1;
 80059f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80059f6:	e05c      	b.n	8005ab2 <SCSI_ReadFormatCapacity+0xdc>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	f107 0214 	add.w	r2, r7, #20
 8005a04:	f107 0110 	add.w	r1, r7, #16
 8005a08:	7af8      	ldrb	r0, [r7, #11]
 8005a0a:	4798      	blx	r3
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8005a10:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d104      	bne.n	8005a22 <SCSI_ReadFormatCapacity+0x4c>
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8005a1e:	2b02      	cmp	r3, #2
 8005a20:	d108      	bne.n	8005a34 <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005a22:	7af9      	ldrb	r1, [r7, #11]
 8005a24:	233a      	movs	r3, #58	; 0x3a
 8005a26:	2202      	movs	r2, #2
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	f000 f91e 	bl	8005c6a <SCSI_SenseCode>
    return -1;
 8005a2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a32:	e03e      	b.n	8005ab2 <SCSI_ReadFormatCapacity+0xdc>
  }

  for (i = 0U; i < 12U ; i++)
 8005a34:	2300      	movs	r3, #0
 8005a36:	83fb      	strh	r3, [r7, #30]
 8005a38:	e007      	b.n	8005a4a <SCSI_ReadFormatCapacity+0x74>
  {
    hmsc->bot_data[i] = 0U;
 8005a3a:	8bfb      	ldrh	r3, [r7, #30]
 8005a3c:	69ba      	ldr	r2, [r7, #24]
 8005a3e:	4413      	add	r3, r2
 8005a40:	2200      	movs	r2, #0
 8005a42:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8005a44:	8bfb      	ldrh	r3, [r7, #30]
 8005a46:	3301      	adds	r3, #1
 8005a48:	83fb      	strh	r3, [r7, #30]
 8005a4a:	8bfb      	ldrh	r3, [r7, #30]
 8005a4c:	2b0b      	cmp	r3, #11
 8005a4e:	d9f4      	bls.n	8005a3a <SCSI_ReadFormatCapacity+0x64>
  }

  hmsc->bot_data[3] = 0x08U;
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	2208      	movs	r2, #8
 8005a54:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	0e1b      	lsrs	r3, r3, #24
 8005a5c:	b2da      	uxtb	r2, r3
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	3b01      	subs	r3, #1
 8005a66:	0c1b      	lsrs	r3, r3, #16
 8005a68:	b2da      	uxtb	r2, r3
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	3b01      	subs	r3, #1
 8005a72:	0a1b      	lsrs	r3, r3, #8
 8005a74:	b2da      	uxtb	r2, r3
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	3b01      	subs	r3, #1
 8005a80:	b2da      	uxtb	r2, r3
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	2202      	movs	r2, #2
 8005a8a:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8005a8c:	8abb      	ldrh	r3, [r7, #20]
 8005a8e:	141b      	asrs	r3, r3, #16
 8005a90:	b2da      	uxtb	r2, r3
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8005a96:	8abb      	ldrh	r3, [r7, #20]
 8005a98:	0a1b      	lsrs	r3, r3, #8
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	b2da      	uxtb	r2, r3
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8005aa2:	8abb      	ldrh	r3, [r7, #20]
 8005aa4:	b2da      	uxtb	r2, r3
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	220c      	movs	r2, #12
 8005aae:	60da      	str	r2, [r3, #12]

  return 0;
 8005ab0:	2300      	movs	r3, #0
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3720      	adds	r7, #32
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
	...

08005abc <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b086      	sub	sp, #24
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	460b      	mov	r3, r1
 8005ac6:	607a      	str	r2, [r7, #4]
 8005ac8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ad0:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8005ad2:	2317      	movs	r3, #23
 8005ad4:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d102      	bne.n	8005ae2 <SCSI_ModeSense6+0x26>
  {
    return -1;
 8005adc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ae0:	e011      	b.n	8005b06 <SCSI_ModeSense6+0x4a>
  }

  if (params[4] <= len)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	3304      	adds	r3, #4
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	8afa      	ldrh	r2, [r7, #22]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d303      	bcc.n	8005af8 <SCSI_ModeSense6+0x3c>
  {
    len = params[4];
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	3304      	adds	r3, #4
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8005af8:	8afb      	ldrh	r3, [r7, #22]
 8005afa:	461a      	mov	r2, r3
 8005afc:	4904      	ldr	r1, [pc, #16]	; (8005b10 <SCSI_ModeSense6+0x54>)
 8005afe:	6938      	ldr	r0, [r7, #16]
 8005b00:	f000 fdbc 	bl	800667c <SCSI_UpdateBotData>

  return 0;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3718      	adds	r7, #24
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	200000c0 	.word	0x200000c0

08005b14 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b086      	sub	sp, #24
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	607a      	str	r2, [r7, #4]
 8005b20:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b28:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8005b2a:	231b      	movs	r3, #27
 8005b2c:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d102      	bne.n	8005b3a <SCSI_ModeSense10+0x26>
  {
    return -1;
 8005b34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b38:	e011      	b.n	8005b5e <SCSI_ModeSense10+0x4a>
  }

  if (params[8] <= len)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	3308      	adds	r3, #8
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	8afa      	ldrh	r2, [r7, #22]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d303      	bcc.n	8005b50 <SCSI_ModeSense10+0x3c>
  {
    len = params[8];
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	3308      	adds	r3, #8
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8005b50:	8afb      	ldrh	r3, [r7, #22]
 8005b52:	461a      	mov	r2, r3
 8005b54:	4904      	ldr	r1, [pc, #16]	; (8005b68 <SCSI_ModeSense10+0x54>)
 8005b56:	6938      	ldr	r0, [r7, #16]
 8005b58:	f000 fd90 	bl	800667c <SCSI_UpdateBotData>

  return 0;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3718      	adds	r7, #24
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	200000d8 	.word	0x200000d8

08005b6c <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b086      	sub	sp, #24
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	460b      	mov	r3, r1
 8005b76:	607a      	str	r2, [r7, #4]
 8005b78:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b80:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d102      	bne.n	8005b8e <SCSI_RequestSense+0x22>
  {
    return -1;
 8005b88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b8c:	e069      	b.n	8005c62 <SCSI_RequestSense+0xf6>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d10a      	bne.n	8005bae <SCSI_RequestSense+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005b9e:	2320      	movs	r3, #32
 8005ba0:	2205      	movs	r2, #5
 8005ba2:	68f8      	ldr	r0, [r7, #12]
 8005ba4:	f000 f861 	bl	8005c6a <SCSI_SenseCode>
    return -1;
 8005ba8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005bac:	e059      	b.n	8005c62 <SCSI_RequestSense+0xf6>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8005bae:	2300      	movs	r3, #0
 8005bb0:	75fb      	strb	r3, [r7, #23]
 8005bb2:	e007      	b.n	8005bc4 <SCSI_RequestSense+0x58>
  {
    hmsc->bot_data[i] = 0U;
 8005bb4:	7dfb      	ldrb	r3, [r7, #23]
 8005bb6:	693a      	ldr	r2, [r7, #16]
 8005bb8:	4413      	add	r3, r2
 8005bba:	2200      	movs	r2, #0
 8005bbc:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8005bbe:	7dfb      	ldrb	r3, [r7, #23]
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	75fb      	strb	r3, [r7, #23]
 8005bc4:	7dfb      	ldrb	r3, [r7, #23]
 8005bc6:	2b11      	cmp	r3, #17
 8005bc8:	d9f4      	bls.n	8005bb4 <SCSI_RequestSense+0x48>
  }

  hmsc->bot_data[0] = 0x70U;
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	2270      	movs	r2, #112	; 0x70
 8005bce:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	220c      	movs	r2, #12
 8005bd4:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d02e      	beq.n	8005c44 <SCSI_RequestSense+0xd8>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8005bec:	461a      	mov	r2, r3
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	3248      	adds	r2, #72	; 0x48
 8005bf2:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8005c00:	693a      	ldr	r2, [r7, #16]
 8005c02:	3348      	adds	r3, #72	; 0x48
 8005c04:	00db      	lsls	r3, r3, #3
 8005c06:	4413      	add	r3, r2
 8005c08:	791a      	ldrb	r2, [r3, #4]
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8005c14:	693a      	ldr	r2, [r7, #16]
 8005c16:	3348      	adds	r3, #72	; 0x48
 8005c18:	00db      	lsls	r3, r3, #3
 8005c1a:	4413      	add	r3, r2
 8005c1c:	795a      	ldrb	r2, [r3, #5]
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8005c28:	3301      	adds	r3, #1
 8005c2a:	b2da      	uxtb	r2, r3
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8005c38:	2b04      	cmp	r3, #4
 8005c3a:	d103      	bne.n	8005c44 <SCSI_RequestSense+0xd8>
    {
      hmsc->scsi_sense_head = 0U;
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	2212      	movs	r2, #18
 8005c48:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	3304      	adds	r3, #4
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	2b12      	cmp	r3, #18
 8005c52:	d805      	bhi.n	8005c60 <SCSI_RequestSense+0xf4>
  {
    hmsc->bot_data_length = params[4];
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	3304      	adds	r3, #4
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3718      	adds	r7, #24
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}

08005c6a <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8005c6a:	b480      	push	{r7}
 8005c6c:	b085      	sub	sp, #20
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
 8005c72:	4608      	mov	r0, r1
 8005c74:	4611      	mov	r1, r2
 8005c76:	461a      	mov	r2, r3
 8005c78:	4603      	mov	r3, r0
 8005c7a:	70fb      	strb	r3, [r7, #3]
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	70bb      	strb	r3, [r7, #2]
 8005c80:	4613      	mov	r3, r2
 8005c82:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c8a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d02c      	beq.n	8005cec <SCSI_SenseCode+0x82>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8005c98:	461a      	mov	r2, r3
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	3248      	adds	r2, #72	; 0x48
 8005c9e:	78b9      	ldrb	r1, [r7, #2]
 8005ca0:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	3348      	adds	r3, #72	; 0x48
 8005cae:	00db      	lsls	r3, r3, #3
 8005cb0:	4413      	add	r3, r2
 8005cb2:	787a      	ldrb	r2, [r7, #1]
 8005cb4:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	3348      	adds	r3, #72	; 0x48
 8005cc0:	00db      	lsls	r3, r3, #3
 8005cc2:	4413      	add	r3, r2
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8005cce:	3301      	adds	r3, #1
 8005cd0:	b2da      	uxtb	r2, r3
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8005cde:	2b04      	cmp	r3, #4
 8005ce0:	d105      	bne.n	8005cee <SCSI_SenseCode+0x84>
  {
    hmsc->scsi_sense_tail = 0U;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 8005cea:	e000      	b.n	8005cee <SCSI_SenseCode+0x84>
    return;
 8005cec:	bf00      	nop
  }
}
 8005cee:	3714      	adds	r7, #20
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b086      	sub	sp, #24
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	460b      	mov	r3, r1
 8005d02:	607a      	str	r2, [r7, #4]
 8005d04:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d0c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d102      	bne.n	8005d1a <SCSI_StartStopUnit+0x22>
  {
    return -1;
 8005d14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d18:	e03b      	b.n	8005d92 <SCSI_StartStopUnit+0x9a>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d10f      	bne.n	8005d44 <SCSI_StartStopUnit+0x4c>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	3304      	adds	r3, #4
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	f003 0303 	and.w	r3, r3, #3
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d108      	bne.n	8005d44 <SCSI_StartStopUnit+0x4c>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8005d32:	7af9      	ldrb	r1, [r7, #11]
 8005d34:	2324      	movs	r3, #36	; 0x24
 8005d36:	2205      	movs	r2, #5
 8005d38:	68f8      	ldr	r0, [r7, #12]
 8005d3a:	f7ff ff96 	bl	8005c6a <SCSI_SenseCode>

    return -1;
 8005d3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d42:	e026      	b.n	8005d92 <SCSI_StartStopUnit+0x9a>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	3304      	adds	r3, #4
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	f003 0303 	and.w	r3, r3, #3
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d104      	bne.n	8005d5c <SCSI_StartStopUnit+0x64>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8005d5a:	e016      	b.n	8005d8a <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	3304      	adds	r3, #4
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	f003 0303 	and.w	r3, r3, #3
 8005d66:	2b02      	cmp	r3, #2
 8005d68:	d104      	bne.n	8005d74 <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	2202      	movs	r2, #2
 8005d6e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8005d72:	e00a      	b.n	8005d8a <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	3304      	adds	r3, #4
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	f003 0303 	and.w	r3, r3, #3
 8005d7e:	2b03      	cmp	r3, #3
 8005d80:	d103      	bne.n	8005d8a <SCSI_StartStopUnit+0x92>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	60da      	str	r2, [r3, #12]

  return 0;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3718      	adds	r7, #24
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}

08005d9a <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005d9a:	b480      	push	{r7}
 8005d9c:	b087      	sub	sp, #28
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	60f8      	str	r0, [r7, #12]
 8005da2:	460b      	mov	r3, r1
 8005da4:	607a      	str	r2, [r7, #4]
 8005da6:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005dae:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d102      	bne.n	8005dbc <SCSI_AllowPreventRemovable+0x22>
  {
    return -1;
 8005db6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005dba:	e011      	b.n	8005de0 <SCSI_AllowPreventRemovable+0x46>
  }

  if (params[4] == 0U)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	3304      	adds	r3, #4
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d104      	bne.n	8005dd0 <SCSI_AllowPreventRemovable+0x36>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8005dce:	e003      	b.n	8005dd8 <SCSI_AllowPreventRemovable+0x3e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	60da      	str	r2, [r3, #12]

  return 0;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	371c      	adds	r7, #28
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b086      	sub	sp, #24
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	460b      	mov	r3, r1
 8005df6:	607a      	str	r2, [r7, #4]
 8005df8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e00:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d102      	bne.n	8005e0e <SCSI_Read10+0x22>
  {
    return -1;
 8005e08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e0c:	e08a      	b.n	8005f24 <SCSI_Read10+0x138>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	7a1b      	ldrb	r3, [r3, #8]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d17c      	bne.n	8005f10 <SCSI_Read10+0x124>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8005e1c:	b25b      	sxtb	r3, r3
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	db0a      	blt.n	8005e38 <SCSI_Read10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005e28:	2320      	movs	r3, #32
 8005e2a:	2205      	movs	r2, #5
 8005e2c:	68f8      	ldr	r0, [r7, #12]
 8005e2e:	f7ff ff1c 	bl	8005c6a <SCSI_SenseCode>
      return -1;
 8005e32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e36:	e075      	b.n	8005f24 <SCSI_Read10+0x138>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8005e3e:	2b02      	cmp	r3, #2
 8005e40:	d108      	bne.n	8005e54 <SCSI_Read10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005e42:	7af9      	ldrb	r1, [r7, #11]
 8005e44:	233a      	movs	r3, #58	; 0x3a
 8005e46:	2202      	movs	r2, #2
 8005e48:	68f8      	ldr	r0, [r7, #12]
 8005e4a:	f7ff ff0e 	bl	8005c6a <SCSI_SenseCode>

      return -1;
 8005e4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e52:	e067      	b.n	8005f24 <SCSI_Read10+0x138>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	7afa      	ldrb	r2, [r7, #11]
 8005e5e:	4610      	mov	r0, r2
 8005e60:	4798      	blx	r3
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d008      	beq.n	8005e7a <SCSI_Read10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005e68:	7af9      	ldrb	r1, [r7, #11]
 8005e6a:	233a      	movs	r3, #58	; 0x3a
 8005e6c:	2202      	movs	r2, #2
 8005e6e:	68f8      	ldr	r0, [r7, #12]
 8005e70:	f7ff fefb 	bl	8005c6a <SCSI_SenseCode>
      return -1;
 8005e74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e78:	e054      	b.n	8005f24 <SCSI_Read10+0x138>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	3302      	adds	r3, #2
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	3303      	adds	r3, #3
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005e8a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	3304      	adds	r3, #4
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8005e94:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	3205      	adds	r2, #5
 8005e9a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8005e9c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	3307      	adds	r3, #7
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	021b      	lsls	r3, r3, #8
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	3208      	adds	r2, #8
 8005eb0:	7812      	ldrb	r2, [r2, #0]
 8005eb2:	431a      	orrs	r2, r3
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005ec6:	7af9      	ldrb	r1, [r7, #11]
 8005ec8:	68f8      	ldr	r0, [r7, #12]
 8005eca:	f000 faad 	bl	8006428 <SCSI_CheckAddressRange>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	da02      	bge.n	8005eda <SCSI_Read10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8005ed4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ed8:	e024      	b.n	8005f24 <SCSI_Read10+0x138>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005ee6:	6979      	ldr	r1, [r7, #20]
 8005ee8:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8005eec:	fb01 f303 	mul.w	r3, r1, r3
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d00a      	beq.n	8005f0a <SCSI_Read10+0x11e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005efa:	2320      	movs	r3, #32
 8005efc:	2205      	movs	r2, #5
 8005efe:	68f8      	ldr	r0, [r7, #12]
 8005f00:	f7ff feb3 	bl	8005c6a <SCSI_SenseCode>
      return -1;
 8005f04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f08:	e00c      	b.n	8005f24 <SCSI_Read10+0x138>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	2202      	movs	r2, #2
 8005f0e:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f16:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8005f18:	7afb      	ldrb	r3, [r7, #11]
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	68f8      	ldr	r0, [r7, #12]
 8005f1e:	f000 faab 	bl	8006478 <SCSI_ProcessRead>
 8005f22:	4603      	mov	r3, r0
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3718      	adds	r7, #24
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}

08005f2c <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b086      	sub	sp, #24
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	460b      	mov	r3, r1
 8005f36:	607a      	str	r2, [r7, #4]
 8005f38:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f40:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d102      	bne.n	8005f4e <SCSI_Read12+0x22>
  {
    return -1;
 8005f48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f4c:	e095      	b.n	800607a <SCSI_Read12+0x14e>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	7a1b      	ldrb	r3, [r3, #8]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	f040 8087 	bne.w	8006066 <SCSI_Read12+0x13a>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8005f5e:	b25b      	sxtb	r3, r3
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	db0a      	blt.n	8005f7a <SCSI_Read12+0x4e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005f6a:	2320      	movs	r3, #32
 8005f6c:	2205      	movs	r2, #5
 8005f6e:	68f8      	ldr	r0, [r7, #12]
 8005f70:	f7ff fe7b 	bl	8005c6a <SCSI_SenseCode>
      return -1;
 8005f74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f78:	e07f      	b.n	800607a <SCSI_Read12+0x14e>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8005f80:	2b02      	cmp	r3, #2
 8005f82:	d108      	bne.n	8005f96 <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005f84:	7af9      	ldrb	r1, [r7, #11]
 8005f86:	233a      	movs	r3, #58	; 0x3a
 8005f88:	2202      	movs	r2, #2
 8005f8a:	68f8      	ldr	r0, [r7, #12]
 8005f8c:	f7ff fe6d 	bl	8005c6a <SCSI_SenseCode>
      return -1;
 8005f90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f94:	e071      	b.n	800607a <SCSI_Read12+0x14e>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	7afa      	ldrb	r2, [r7, #11]
 8005fa0:	4610      	mov	r0, r2
 8005fa2:	4798      	blx	r3
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d008      	beq.n	8005fbc <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005faa:	7af9      	ldrb	r1, [r7, #11]
 8005fac:	233a      	movs	r3, #58	; 0x3a
 8005fae:	2202      	movs	r2, #2
 8005fb0:	68f8      	ldr	r0, [r7, #12]
 8005fb2:	f7ff fe5a 	bl	8005c6a <SCSI_SenseCode>
      return -1;
 8005fb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005fba:	e05e      	b.n	800607a <SCSI_Read12+0x14e>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	3302      	adds	r3, #2
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	3303      	adds	r3, #3
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005fcc:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	3304      	adds	r3, #4
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8005fd6:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	3205      	adds	r2, #5
 8005fdc:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8005fde:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	3306      	adds	r3, #6
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	3307      	adds	r3, #7
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8005ff6:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	3308      	adds	r3, #8
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8006000:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	3209      	adds	r2, #9
 8006006:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8006008:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800601c:	7af9      	ldrb	r1, [r7, #11]
 800601e:	68f8      	ldr	r0, [r7, #12]
 8006020:	f000 fa02 	bl	8006428 <SCSI_CheckAddressRange>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	da02      	bge.n	8006030 <SCSI_Read12+0x104>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800602a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800602e:	e024      	b.n	800607a <SCSI_Read12+0x14e>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800603c:	6979      	ldr	r1, [r7, #20]
 800603e:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8006042:	fb01 f303 	mul.w	r3, r1, r3
 8006046:	429a      	cmp	r2, r3
 8006048:	d00a      	beq.n	8006060 <SCSI_Read12+0x134>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006050:	2320      	movs	r3, #32
 8006052:	2205      	movs	r2, #5
 8006054:	68f8      	ldr	r0, [r7, #12]
 8006056:	f7ff fe08 	bl	8005c6a <SCSI_SenseCode>
      return -1;
 800605a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800605e:	e00c      	b.n	800607a <SCSI_Read12+0x14e>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	2202      	movs	r2, #2
 8006064:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	f44f 7200 	mov.w	r2, #512	; 0x200
 800606c:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800606e:	7afb      	ldrb	r3, [r7, #11]
 8006070:	4619      	mov	r1, r3
 8006072:	68f8      	ldr	r0, [r7, #12]
 8006074:	f000 fa00 	bl	8006478 <SCSI_ProcessRead>
 8006078:	4603      	mov	r3, r0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3718      	adds	r7, #24
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}

08006082 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006082:	b580      	push	{r7, lr}
 8006084:	b086      	sub	sp, #24
 8006086:	af00      	add	r7, sp, #0
 8006088:	60f8      	str	r0, [r7, #12]
 800608a:	460b      	mov	r3, r1
 800608c:	607a      	str	r2, [r7, #4]
 800608e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006096:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d102      	bne.n	80060a4 <SCSI_Write10+0x22>
  {
    return -1;
 800609e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80060a2:	e0af      	b.n	8006204 <SCSI_Write10+0x182>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	7a1b      	ldrb	r3, [r3, #8]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	f040 80a5 	bne.w	80061f8 <SCSI_Write10+0x176>
  {
    if (hmsc->cbw.dDataLength == 0U)
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d10a      	bne.n	80060ce <SCSI_Write10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80060be:	2320      	movs	r3, #32
 80060c0:	2205      	movs	r2, #5
 80060c2:	68f8      	ldr	r0, [r7, #12]
 80060c4:	f7ff fdd1 	bl	8005c6a <SCSI_SenseCode>
      return -1;
 80060c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80060cc:	e09a      	b.n	8006204 <SCSI_Write10+0x182>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80060d4:	b25b      	sxtb	r3, r3
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	da0a      	bge.n	80060f0 <SCSI_Write10+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80060e0:	2320      	movs	r3, #32
 80060e2:	2205      	movs	r2, #5
 80060e4:	68f8      	ldr	r0, [r7, #12]
 80060e6:	f7ff fdc0 	bl	8005c6a <SCSI_SenseCode>
      return -1;
 80060ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80060ee:	e089      	b.n	8006204 <SCSI_Write10+0x182>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	7afa      	ldrb	r2, [r7, #11]
 80060fa:	4610      	mov	r0, r2
 80060fc:	4798      	blx	r3
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d008      	beq.n	8006116 <SCSI_Write10+0x94>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006104:	7af9      	ldrb	r1, [r7, #11]
 8006106:	233a      	movs	r3, #58	; 0x3a
 8006108:	2202      	movs	r2, #2
 800610a:	68f8      	ldr	r0, [r7, #12]
 800610c:	f7ff fdad 	bl	8005c6a <SCSI_SenseCode>
      return -1;
 8006110:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006114:	e076      	b.n	8006204 <SCSI_Write10+0x182>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800611c:	68db      	ldr	r3, [r3, #12]
 800611e:	7afa      	ldrb	r2, [r7, #11]
 8006120:	4610      	mov	r0, r2
 8006122:	4798      	blx	r3
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d008      	beq.n	800613c <SCSI_Write10+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800612a:	7af9      	ldrb	r1, [r7, #11]
 800612c:	2327      	movs	r3, #39	; 0x27
 800612e:	2202      	movs	r2, #2
 8006130:	68f8      	ldr	r0, [r7, #12]
 8006132:	f7ff fd9a 	bl	8005c6a <SCSI_SenseCode>
      return -1;
 8006136:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800613a:	e063      	b.n	8006204 <SCSI_Write10+0x182>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	3302      	adds	r3, #2
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	3303      	adds	r3, #3
 8006148:	781b      	ldrb	r3, [r3, #0]
 800614a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800614c:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	3304      	adds	r3, #4
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8006156:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	3205      	adds	r2, #5
 800615c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800615e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	3307      	adds	r3, #7
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	3208      	adds	r2, #8
 8006172:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8006174:	431a      	orrs	r2, r3
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006188:	7af9      	ldrb	r1, [r7, #11]
 800618a:	68f8      	ldr	r0, [r7, #12]
 800618c:	f000 f94c 	bl	8006428 <SCSI_CheckAddressRange>
 8006190:	4603      	mov	r3, r0
 8006192:	2b00      	cmp	r3, #0
 8006194:	da02      	bge.n	800619c <SCSI_Write10+0x11a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8006196:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800619a:	e033      	b.n	8006204 <SCSI_Write10+0x182>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80061a2:	697a      	ldr	r2, [r7, #20]
 80061a4:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80061a8:	fb02 f303 	mul.w	r3, r2, r3
 80061ac:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80061b4:	693a      	ldr	r2, [r7, #16]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d00a      	beq.n	80061d0 <SCSI_Write10+0x14e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80061c0:	2320      	movs	r3, #32
 80061c2:	2205      	movs	r2, #5
 80061c4:	68f8      	ldr	r0, [r7, #12]
 80061c6:	f7ff fd50 	bl	8005c6a <SCSI_SenseCode>
      return -1;
 80061ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061ce:	e019      	b.n	8006204 <SCSI_Write10+0x182>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061d6:	bf28      	it	cs
 80061d8:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80061dc:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	2201      	movs	r2, #1
 80061e2:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	f103 0210 	add.w	r2, r3, #16
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	2101      	movs	r1, #1
 80061ee:	68f8      	ldr	r0, [r7, #12]
 80061f0:	f002 f96e 	bl	80084d0 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 80061f4:	2300      	movs	r3, #0
 80061f6:	e005      	b.n	8006204 <SCSI_Write10+0x182>
    return SCSI_ProcessWrite(pdev, lun);
 80061f8:	7afb      	ldrb	r3, [r7, #11]
 80061fa:	4619      	mov	r1, r3
 80061fc:	68f8      	ldr	r0, [r7, #12]
 80061fe:	f000 f9b4 	bl	800656a <SCSI_ProcessWrite>
 8006202:	4603      	mov	r3, r0
}
 8006204:	4618      	mov	r0, r3
 8006206:	3718      	adds	r7, #24
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b086      	sub	sp, #24
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	460b      	mov	r3, r1
 8006216:	607a      	str	r2, [r7, #4]
 8006218:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006220:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d102      	bne.n	800622e <SCSI_Write12+0x22>
  {
    return -1;
 8006228:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800622c:	e0bf      	b.n	80063ae <SCSI_Write12+0x1a2>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	7a1b      	ldrb	r3, [r3, #8]
 8006232:	2b00      	cmp	r3, #0
 8006234:	f040 80b5 	bne.w	80063a2 <SCSI_Write12+0x196>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800623e:	2b00      	cmp	r3, #0
 8006240:	d10a      	bne.n	8006258 <SCSI_Write12+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006248:	2320      	movs	r3, #32
 800624a:	2205      	movs	r2, #5
 800624c:	68f8      	ldr	r0, [r7, #12]
 800624e:	f7ff fd0c 	bl	8005c6a <SCSI_SenseCode>
      return -1;
 8006252:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006256:	e0aa      	b.n	80063ae <SCSI_Write12+0x1a2>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800625e:	b25b      	sxtb	r3, r3
 8006260:	2b00      	cmp	r3, #0
 8006262:	da0a      	bge.n	800627a <SCSI_Write12+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800626a:	2320      	movs	r3, #32
 800626c:	2205      	movs	r2, #5
 800626e:	68f8      	ldr	r0, [r7, #12]
 8006270:	f7ff fcfb 	bl	8005c6a <SCSI_SenseCode>
      return -1;
 8006274:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006278:	e099      	b.n	80063ae <SCSI_Write12+0x1a2>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	7afa      	ldrb	r2, [r7, #11]
 8006284:	4610      	mov	r0, r2
 8006286:	4798      	blx	r3
 8006288:	4603      	mov	r3, r0
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00b      	beq.n	80062a6 <SCSI_Write12+0x9a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800628e:	7af9      	ldrb	r1, [r7, #11]
 8006290:	233a      	movs	r3, #58	; 0x3a
 8006292:	2202      	movs	r2, #2
 8006294:	68f8      	ldr	r0, [r7, #12]
 8006296:	f7ff fce8 	bl	8005c6a <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	2205      	movs	r2, #5
 800629e:	721a      	strb	r2, [r3, #8]
      return -1;
 80062a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062a4:	e083      	b.n	80063ae <SCSI_Write12+0x1a2>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	7afa      	ldrb	r2, [r7, #11]
 80062b0:	4610      	mov	r0, r2
 80062b2:	4798      	blx	r3
 80062b4:	4603      	mov	r3, r0
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d00b      	beq.n	80062d2 <SCSI_Write12+0xc6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80062ba:	7af9      	ldrb	r1, [r7, #11]
 80062bc:	2327      	movs	r3, #39	; 0x27
 80062be:	2202      	movs	r2, #2
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	f7ff fcd2 	bl	8005c6a <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	2205      	movs	r2, #5
 80062ca:	721a      	strb	r2, [r3, #8]
      return -1;
 80062cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062d0:	e06d      	b.n	80063ae <SCSI_Write12+0x1a2>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	3302      	adds	r3, #2
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	3303      	adds	r3, #3
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80062e2:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	3304      	adds	r3, #4
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80062ec:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	3205      	adds	r2, #5
 80062f2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80062f4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	3306      	adds	r3, #6
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	3307      	adds	r3, #7
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800630c:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	3308      	adds	r3, #8
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8006316:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	3209      	adds	r2, #9
 800631c:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800631e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006332:	7af9      	ldrb	r1, [r7, #11]
 8006334:	68f8      	ldr	r0, [r7, #12]
 8006336:	f000 f877 	bl	8006428 <SCSI_CheckAddressRange>
 800633a:	4603      	mov	r3, r0
 800633c:	2b00      	cmp	r3, #0
 800633e:	da02      	bge.n	8006346 <SCSI_Write12+0x13a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8006340:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006344:	e033      	b.n	80063ae <SCSI_Write12+0x1a2>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800634c:	697a      	ldr	r2, [r7, #20]
 800634e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8006352:	fb02 f303 	mul.w	r3, r2, r3
 8006356:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800635e:	693a      	ldr	r2, [r7, #16]
 8006360:	429a      	cmp	r2, r3
 8006362:	d00a      	beq.n	800637a <SCSI_Write12+0x16e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800636a:	2320      	movs	r3, #32
 800636c:	2205      	movs	r2, #5
 800636e:	68f8      	ldr	r0, [r7, #12]
 8006370:	f7ff fc7b 	bl	8005c6a <SCSI_SenseCode>
      return -1;
 8006374:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006378:	e019      	b.n	80063ae <SCSI_Write12+0x1a2>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006380:	bf28      	it	cs
 8006382:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8006386:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	2201      	movs	r2, #1
 800638c:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	f103 0210 	add.w	r2, r3, #16
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	2101      	movs	r1, #1
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	f002 f899 	bl	80084d0 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800639e:	2300      	movs	r3, #0
 80063a0:	e005      	b.n	80063ae <SCSI_Write12+0x1a2>
    return SCSI_ProcessWrite(pdev, lun);
 80063a2:	7afb      	ldrb	r3, [r7, #11]
 80063a4:	4619      	mov	r1, r3
 80063a6:	68f8      	ldr	r0, [r7, #12]
 80063a8:	f000 f8df 	bl	800656a <SCSI_ProcessWrite>
 80063ac:	4603      	mov	r3, r0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3718      	adds	r7, #24
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}

080063b6 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80063b6:	b580      	push	{r7, lr}
 80063b8:	b086      	sub	sp, #24
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	60f8      	str	r0, [r7, #12]
 80063be:	460b      	mov	r3, r1
 80063c0:	607a      	str	r2, [r7, #4]
 80063c2:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063ca:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d102      	bne.n	80063d8 <SCSI_Verify10+0x22>
  {
    return -1;
 80063d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063d6:	e023      	b.n	8006420 <SCSI_Verify10+0x6a>
  }

  if ((params[1] & 0x02U) == 0x02U)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	3301      	adds	r3, #1
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	f003 0302 	and.w	r3, r3, #2
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d008      	beq.n	80063f8 <SCSI_Verify10+0x42>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80063e6:	7af9      	ldrb	r1, [r7, #11]
 80063e8:	2324      	movs	r3, #36	; 0x24
 80063ea:	2205      	movs	r2, #5
 80063ec:	68f8      	ldr	r0, [r7, #12]
 80063ee:	f7ff fc3c 	bl	8005c6a <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 80063f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063f6:	e013      	b.n	8006420 <SCSI_Verify10+0x6a>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006404:	7af9      	ldrb	r1, [r7, #11]
 8006406:	68f8      	ldr	r0, [r7, #12]
 8006408:	f000 f80e 	bl	8006428 <SCSI_CheckAddressRange>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	da02      	bge.n	8006418 <SCSI_Verify10+0x62>
  {
    return -1; /* error */
 8006412:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006416:	e003      	b.n	8006420 <SCSI_Verify10+0x6a>
  }

  hmsc->bot_data_length = 0U;
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	2200      	movs	r2, #0
 800641c:	60da      	str	r2, [r3, #12]

  return 0;
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	3718      	adds	r7, #24
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b086      	sub	sp, #24
 800642c:	af00      	add	r7, sp, #0
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	607a      	str	r2, [r7, #4]
 8006432:	603b      	str	r3, [r7, #0]
 8006434:	460b      	mov	r3, r1
 8006436:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800643e:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d102      	bne.n	800644c <SCSI_CheckAddressRange+0x24>
  {
    return -1;
 8006446:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800644a:	e011      	b.n	8006470 <SCSI_CheckAddressRange+0x48>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	441a      	add	r2, r3
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006458:	429a      	cmp	r2, r3
 800645a:	d908      	bls.n	800646e <SCSI_CheckAddressRange+0x46>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800645c:	7af9      	ldrb	r1, [r7, #11]
 800645e:	2321      	movs	r3, #33	; 0x21
 8006460:	2205      	movs	r2, #5
 8006462:	68f8      	ldr	r0, [r7, #12]
 8006464:	f7ff fc01 	bl	8005c6a <SCSI_SenseCode>
    return -1;
 8006468:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800646c:	e000      	b.n	8006470 <SCSI_CheckAddressRange+0x48>
  }

  return 0;
 800646e:	2300      	movs	r3, #0
}
 8006470:	4618      	mov	r0, r3
 8006472:	3718      	adds	r7, #24
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8006478:	b590      	push	{r4, r7, lr}
 800647a:	b085      	sub	sp, #20
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	460b      	mov	r3, r1
 8006482:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800648a:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006492:	68fa      	ldr	r2, [r7, #12]
 8006494:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8006498:	fb02 f303 	mul.w	r3, r2, r3
 800649c:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d102      	bne.n	80064aa <SCSI_ProcessRead+0x32>
  {
    return -1;
 80064a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064a8:	e05b      	b.n	8006562 <SCSI_ProcessRead+0xea>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064b0:	bf28      	it	cs
 80064b2:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80064b6:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80064be:	691c      	ldr	r4, [r3, #16]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f103 0110 	add.w	r1, r3, #16
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80064d2:	4618      	mov	r0, r3
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 80064da:	b29b      	uxth	r3, r3
 80064dc:	78f8      	ldrb	r0, [r7, #3]
 80064de:	47a0      	blx	r4
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	da08      	bge.n	80064f8 <SCSI_ProcessRead+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 80064e6:	78f9      	ldrb	r1, [r7, #3]
 80064e8:	2311      	movs	r3, #17
 80064ea:	2204      	movs	r2, #4
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f7ff fbbc 	bl	8005c6a <SCSI_SenseCode>
    return -1;
 80064f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064f6:	e034      	b.n	8006562 <SCSI_ProcessRead+0xea>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f103 0210 	add.w	r2, r3, #16
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	2181      	movs	r1, #129	; 0x81
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f001 ffac 	bl	8008460 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006514:	4619      	mov	r1, r3
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	fbb3 f3f1 	udiv	r3, r3, r1
 800651c:	441a      	add	r2, r3
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006530:	4619      	mov	r1, r3
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	fbb3 f3f1 	udiv	r3, r3, r1
 8006538:	1ad2      	subs	r2, r2, r3
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	1ad2      	subs	r2, r2, r3
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006556:	2b00      	cmp	r3, #0
 8006558:	d102      	bne.n	8006560 <SCSI_ProcessRead+0xe8>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2203      	movs	r2, #3
 800655e:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8006560:	2300      	movs	r3, #0
}
 8006562:	4618      	mov	r0, r3
 8006564:	3714      	adds	r7, #20
 8006566:	46bd      	mov	sp, r7
 8006568:	bd90      	pop	{r4, r7, pc}

0800656a <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800656a:	b590      	push	{r4, r7, lr}
 800656c:	b085      	sub	sp, #20
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
 8006572:	460b      	mov	r3, r1
 8006574:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800657c:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006584:	68fa      	ldr	r2, [r7, #12]
 8006586:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800658a:	fb02 f303 	mul.w	r3, r2, r3
 800658e:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d102      	bne.n	800659c <SCSI_ProcessWrite+0x32>
  {
    return -1;
 8006596:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800659a:	e06b      	b.n	8006674 <SCSI_ProcessWrite+0x10a>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065a2:	bf28      	it	cs
 80065a4:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80065a8:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80065b0:	695c      	ldr	r4, [r3, #20]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f103 0110 	add.w	r1, r3, #16
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80065c4:	4618      	mov	r0, r3
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	78f8      	ldrb	r0, [r7, #3]
 80065d0:	47a0      	blx	r4
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	da08      	bge.n	80065ea <SCSI_ProcessWrite+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 80065d8:	78f9      	ldrb	r1, [r7, #3]
 80065da:	2303      	movs	r3, #3
 80065dc:	2204      	movs	r2, #4
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f7ff fb43 	bl	8005c6a <SCSI_SenseCode>
    return -1;
 80065e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80065e8:	e044      	b.n	8006674 <SCSI_ProcessWrite+0x10a>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80065f6:	4619      	mov	r1, r3
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80065fe:	441a      	add	r2, r3
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006612:	4619      	mov	r1, r3
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	fbb3 f3f1 	udiv	r3, r3, r1
 800661a:	1ad2      	subs	r2, r2, r3
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	1ad2      	subs	r2, r2, r3
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006638:	2b00      	cmp	r3, #0
 800663a:	d104      	bne.n	8006646 <SCSI_ProcessWrite+0xdc>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800663c:	2100      	movs	r1, #0
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f7fe fdd8 	bl	80051f4 <MSC_BOT_SendCSW>
 8006644:	e015      	b.n	8006672 <SCSI_ProcessWrite+0x108>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800664c:	68fa      	ldr	r2, [r7, #12]
 800664e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8006652:	fb02 f303 	mul.w	r3, r2, r3
 8006656:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800665a:	bf28      	it	cs
 800665c:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8006660:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f103 0210 	add.w	r2, r3, #16
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	2101      	movs	r1, #1
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f001 ff2f 	bl	80084d0 <USBD_LL_PrepareReceive>
  }

  return 0;
 8006672:	2300      	movs	r3, #0
}
 8006674:	4618      	mov	r0, r3
 8006676:	3714      	adds	r7, #20
 8006678:	46bd      	mov	sp, r7
 800667a:	bd90      	pop	{r4, r7, pc}

0800667c <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800667c:	b480      	push	{r7}
 800667e:	b087      	sub	sp, #28
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	4613      	mov	r3, r2
 8006688:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800668a:	88fb      	ldrh	r3, [r7, #6]
 800668c:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d102      	bne.n	800669a <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8006694:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006698:	e013      	b.n	80066c2 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 800669a:	8afa      	ldrh	r2, [r7, #22]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 80066a0:	e00b      	b.n	80066ba <SCSI_UpdateBotData+0x3e>
  {
    len--;
 80066a2:	8afb      	ldrh	r3, [r7, #22]
 80066a4:	3b01      	subs	r3, #1
 80066a6:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 80066a8:	8afb      	ldrh	r3, [r7, #22]
 80066aa:	68ba      	ldr	r2, [r7, #8]
 80066ac:	441a      	add	r2, r3
 80066ae:	8afb      	ldrh	r3, [r7, #22]
 80066b0:	7811      	ldrb	r1, [r2, #0]
 80066b2:	68fa      	ldr	r2, [r7, #12]
 80066b4:	4413      	add	r3, r2
 80066b6:	460a      	mov	r2, r1
 80066b8:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 80066ba:	8afb      	ldrh	r3, [r7, #22]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d1f0      	bne.n	80066a2 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 80066c0:	2300      	movs	r3, #0
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	371c      	adds	r7, #28
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr

080066ce <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80066ce:	b580      	push	{r7, lr}
 80066d0:	b086      	sub	sp, #24
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	60f8      	str	r0, [r7, #12]
 80066d6:	60b9      	str	r1, [r7, #8]
 80066d8:	4613      	mov	r3, r2
 80066da:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d101      	bne.n	80066e6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80066e2:	2303      	movs	r3, #3
 80066e4:	e01f      	b.n	8006726 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2200      	movs	r2, #0
 80066ea:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2200      	movs	r2, #0
 80066f2:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2200      	movs	r2, #0
 80066fa:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d003      	beq.n	800670c <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	68ba      	ldr	r2, [r7, #8]
 8006708:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2201      	movs	r2, #1
 8006710:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	79fa      	ldrb	r2, [r7, #7]
 8006718:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800671a:	68f8      	ldr	r0, [r7, #12]
 800671c:	f001 fcaa 	bl	8008074 <USBD_LL_Init>
 8006720:	4603      	mov	r3, r0
 8006722:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006724:	7dfb      	ldrb	r3, [r7, #23]
}
 8006726:	4618      	mov	r0, r3
 8006728:	3718      	adds	r7, #24
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}

0800672e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800672e:	b580      	push	{r7, lr}
 8006730:	b084      	sub	sp, #16
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
 8006736:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006738:	2300      	movs	r3, #0
 800673a:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d101      	bne.n	8006746 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006742:	2303      	movs	r3, #3
 8006744:	e016      	b.n	8006774 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	683a      	ldr	r2, [r7, #0]
 800674a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006756:	2b00      	cmp	r3, #0
 8006758:	d00b      	beq.n	8006772 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006762:	f107 020e 	add.w	r2, r7, #14
 8006766:	4610      	mov	r0, r2
 8006768:	4798      	blx	r3
 800676a:	4602      	mov	r2, r0
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006772:	2300      	movs	r3, #0
}
 8006774:	4618      	mov	r0, r3
 8006776:	3710      	adds	r7, #16
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f001 fcc1 	bl	800810c <USBD_LL_Start>
 800678a:	4603      	mov	r3, r0
}
 800678c:	4618      	mov	r0, r3
 800678e:	3708      	adds	r7, #8
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800679c:	2300      	movs	r3, #0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	370c      	adds	r7, #12
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr

080067aa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067aa:	b580      	push	{r7, lr}
 80067ac:	b084      	sub	sp, #16
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
 80067b2:	460b      	mov	r3, r1
 80067b4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80067b6:	2303      	movs	r3, #3
 80067b8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d009      	beq.n	80067d8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	78fa      	ldrb	r2, [r7, #3]
 80067ce:	4611      	mov	r1, r2
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	4798      	blx	r3
 80067d4:	4603      	mov	r3, r0
 80067d6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80067d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3710      	adds	r7, #16
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}

080067e2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067e2:	b580      	push	{r7, lr}
 80067e4:	b082      	sub	sp, #8
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
 80067ea:	460b      	mov	r3, r1
 80067ec:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d007      	beq.n	8006808 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	78fa      	ldrb	r2, [r7, #3]
 8006802:	4611      	mov	r1, r2
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	4798      	blx	r3
  }

  return USBD_OK;
 8006808:	2300      	movs	r3, #0
}
 800680a:	4618      	mov	r0, r3
 800680c:	3708      	adds	r7, #8
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}

08006812 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006812:	b580      	push	{r7, lr}
 8006814:	b084      	sub	sp, #16
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
 800681a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006822:	6839      	ldr	r1, [r7, #0]
 8006824:	4618      	mov	r0, r3
 8006826:	f000 ffb9 	bl	800779c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2201      	movs	r2, #1
 800682e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006838:	461a      	mov	r2, r3
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006846:	f003 031f 	and.w	r3, r3, #31
 800684a:	2b02      	cmp	r3, #2
 800684c:	d01a      	beq.n	8006884 <USBD_LL_SetupStage+0x72>
 800684e:	2b02      	cmp	r3, #2
 8006850:	d822      	bhi.n	8006898 <USBD_LL_SetupStage+0x86>
 8006852:	2b00      	cmp	r3, #0
 8006854:	d002      	beq.n	800685c <USBD_LL_SetupStage+0x4a>
 8006856:	2b01      	cmp	r3, #1
 8006858:	d00a      	beq.n	8006870 <USBD_LL_SetupStage+0x5e>
 800685a:	e01d      	b.n	8006898 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006862:	4619      	mov	r1, r3
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 fa61 	bl	8006d2c <USBD_StdDevReq>
 800686a:	4603      	mov	r3, r0
 800686c:	73fb      	strb	r3, [r7, #15]
      break;
 800686e:	e020      	b.n	80068b2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006876:	4619      	mov	r1, r3
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f000 fac5 	bl	8006e08 <USBD_StdItfReq>
 800687e:	4603      	mov	r3, r0
 8006880:	73fb      	strb	r3, [r7, #15]
      break;
 8006882:	e016      	b.n	80068b2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800688a:	4619      	mov	r1, r3
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f000 fb04 	bl	8006e9a <USBD_StdEPReq>
 8006892:	4603      	mov	r3, r0
 8006894:	73fb      	strb	r3, [r7, #15]
      break;
 8006896:	e00c      	b.n	80068b2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800689e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	4619      	mov	r1, r3
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f001 fd0c 	bl	80082c4 <USBD_LL_StallEP>
 80068ac:	4603      	mov	r3, r0
 80068ae:	73fb      	strb	r3, [r7, #15]
      break;
 80068b0:	bf00      	nop
  }

  return ret;
 80068b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3710      	adds	r7, #16
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b086      	sub	sp, #24
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	460b      	mov	r3, r1
 80068c6:	607a      	str	r2, [r7, #4]
 80068c8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80068ca:	7afb      	ldrb	r3, [r7, #11]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d138      	bne.n	8006942 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80068d6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80068de:	2b03      	cmp	r3, #3
 80068e0:	d14a      	bne.n	8006978 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	689a      	ldr	r2, [r3, #8]
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	68db      	ldr	r3, [r3, #12]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d913      	bls.n	8006916 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	689a      	ldr	r2, [r3, #8]
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	1ad2      	subs	r2, r2, r3
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	68da      	ldr	r2, [r3, #12]
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	4293      	cmp	r3, r2
 8006906:	bf28      	it	cs
 8006908:	4613      	movcs	r3, r2
 800690a:	461a      	mov	r2, r3
 800690c:	6879      	ldr	r1, [r7, #4]
 800690e:	68f8      	ldr	r0, [r7, #12]
 8006910:	f001 f81b 	bl	800794a <USBD_CtlContinueRx>
 8006914:	e030      	b.n	8006978 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800691c:	b2db      	uxtb	r3, r3
 800691e:	2b03      	cmp	r3, #3
 8006920:	d10b      	bne.n	800693a <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d005      	beq.n	800693a <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	68f8      	ldr	r0, [r7, #12]
 8006938:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800693a:	68f8      	ldr	r0, [r7, #12]
 800693c:	f001 f816 	bl	800796c <USBD_CtlSendStatus>
 8006940:	e01a      	b.n	8006978 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006948:	b2db      	uxtb	r3, r3
 800694a:	2b03      	cmp	r3, #3
 800694c:	d114      	bne.n	8006978 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006954:	699b      	ldr	r3, [r3, #24]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d00e      	beq.n	8006978 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006960:	699b      	ldr	r3, [r3, #24]
 8006962:	7afa      	ldrb	r2, [r7, #11]
 8006964:	4611      	mov	r1, r2
 8006966:	68f8      	ldr	r0, [r7, #12]
 8006968:	4798      	blx	r3
 800696a:	4603      	mov	r3, r0
 800696c:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800696e:	7dfb      	ldrb	r3, [r7, #23]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d001      	beq.n	8006978 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006974:	7dfb      	ldrb	r3, [r7, #23]
 8006976:	e000      	b.n	800697a <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	3718      	adds	r7, #24
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}

08006982 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006982:	b580      	push	{r7, lr}
 8006984:	b086      	sub	sp, #24
 8006986:	af00      	add	r7, sp, #0
 8006988:	60f8      	str	r0, [r7, #12]
 800698a:	460b      	mov	r3, r1
 800698c:	607a      	str	r2, [r7, #4]
 800698e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006990:	7afb      	ldrb	r3, [r7, #11]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d16b      	bne.n	8006a6e <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	3314      	adds	r3, #20
 800699a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	d156      	bne.n	8006a54 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	689a      	ldr	r2, [r3, #8]
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d914      	bls.n	80069dc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	689a      	ldr	r2, [r3, #8]
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	1ad2      	subs	r2, r2, r3
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	461a      	mov	r2, r3
 80069c6:	6879      	ldr	r1, [r7, #4]
 80069c8:	68f8      	ldr	r0, [r7, #12]
 80069ca:	f000 ffad 	bl	8007928 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80069ce:	2300      	movs	r3, #0
 80069d0:	2200      	movs	r2, #0
 80069d2:	2100      	movs	r1, #0
 80069d4:	68f8      	ldr	r0, [r7, #12]
 80069d6:	f001 fd7b 	bl	80084d0 <USBD_LL_PrepareReceive>
 80069da:	e03b      	b.n	8006a54 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	68da      	ldr	r2, [r3, #12]
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	689b      	ldr	r3, [r3, #8]
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d11c      	bne.n	8006a22 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	685a      	ldr	r2, [r3, #4]
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d316      	bcc.n	8006a22 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	685a      	ldr	r2, [r3, #4]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d20f      	bcs.n	8006a22 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006a02:	2200      	movs	r2, #0
 8006a04:	2100      	movs	r1, #0
 8006a06:	68f8      	ldr	r0, [r7, #12]
 8006a08:	f000 ff8e 	bl	8007928 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a14:	2300      	movs	r3, #0
 8006a16:	2200      	movs	r2, #0
 8006a18:	2100      	movs	r1, #0
 8006a1a:	68f8      	ldr	r0, [r7, #12]
 8006a1c:	f001 fd58 	bl	80084d0 <USBD_LL_PrepareReceive>
 8006a20:	e018      	b.n	8006a54 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	2b03      	cmp	r3, #3
 8006a2c:	d10b      	bne.n	8006a46 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a34:	68db      	ldr	r3, [r3, #12]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d005      	beq.n	8006a46 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a40:	68db      	ldr	r3, [r3, #12]
 8006a42:	68f8      	ldr	r0, [r7, #12]
 8006a44:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a46:	2180      	movs	r1, #128	; 0x80
 8006a48:	68f8      	ldr	r0, [r7, #12]
 8006a4a:	f001 fc3b 	bl	80082c4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006a4e:	68f8      	ldr	r0, [r7, #12]
 8006a50:	f000 ff9f 	bl	8007992 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d122      	bne.n	8006aa4 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006a5e:	68f8      	ldr	r0, [r7, #12]
 8006a60:	f7ff fe98 	bl	8006794 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006a6c:	e01a      	b.n	8006aa4 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	2b03      	cmp	r3, #3
 8006a78:	d114      	bne.n	8006aa4 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a80:	695b      	ldr	r3, [r3, #20]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d00e      	beq.n	8006aa4 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a8c:	695b      	ldr	r3, [r3, #20]
 8006a8e:	7afa      	ldrb	r2, [r7, #11]
 8006a90:	4611      	mov	r1, r2
 8006a92:	68f8      	ldr	r0, [r7, #12]
 8006a94:	4798      	blx	r3
 8006a96:	4603      	mov	r3, r0
 8006a98:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006a9a:	7dfb      	ldrb	r3, [r7, #23]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d001      	beq.n	8006aa4 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006aa0:	7dfb      	ldrb	r3, [r7, #23]
 8006aa2:	e000      	b.n	8006aa6 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006aa4:	2300      	movs	r3, #0
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3718      	adds	r7, #24
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}

08006aae <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006aae:	b580      	push	{r7, lr}
 8006ab0:	b082      	sub	sp, #8
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2201      	movs	r2, #1
 8006aba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d101      	bne.n	8006ae2 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006ade:	2303      	movs	r3, #3
 8006ae0:	e02f      	b.n	8006b42 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d00f      	beq.n	8006b0c <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d009      	beq.n	8006b0c <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	6852      	ldr	r2, [r2, #4]
 8006b04:	b2d2      	uxtb	r2, r2
 8006b06:	4611      	mov	r1, r2
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b0c:	2340      	movs	r3, #64	; 0x40
 8006b0e:	2200      	movs	r2, #0
 8006b10:	2100      	movs	r1, #0
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f001 fb2c 	bl	8008170 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2240      	movs	r2, #64	; 0x40
 8006b24:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b28:	2340      	movs	r3, #64	; 0x40
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	2180      	movs	r1, #128	; 0x80
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f001 fb1e 	bl	8008170 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2240      	movs	r2, #64	; 0x40
 8006b3e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006b40:	2300      	movs	r3, #0
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3708      	adds	r7, #8
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}

08006b4a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006b4a:	b480      	push	{r7}
 8006b4c:	b083      	sub	sp, #12
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
 8006b52:	460b      	mov	r3, r1
 8006b54:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	78fa      	ldrb	r2, [r7, #3]
 8006b5a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006b5c:	2300      	movs	r3, #0
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	370c      	adds	r7, #12
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr

08006b6a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006b6a:	b480      	push	{r7}
 8006b6c:	b083      	sub	sp, #12
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b78:	b2da      	uxtb	r2, r3
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2204      	movs	r2, #4
 8006b84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006b88:	2300      	movs	r3, #0
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	370c      	adds	r7, #12
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr

08006b96 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006b96:	b480      	push	{r7}
 8006b98:	b083      	sub	sp, #12
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	2b04      	cmp	r3, #4
 8006ba8:	d106      	bne.n	8006bb8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006bb0:	b2da      	uxtb	r2, r3
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006bb8:	2300      	movs	r3, #0
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	370c      	adds	r7, #12
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr

08006bc6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b082      	sub	sp, #8
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d101      	bne.n	8006bdc <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006bd8:	2303      	movs	r3, #3
 8006bda:	e012      	b.n	8006c02 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	2b03      	cmp	r3, #3
 8006be6:	d10b      	bne.n	8006c00 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bee:	69db      	ldr	r3, [r3, #28]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d005      	beq.n	8006c00 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bfa:	69db      	ldr	r3, [r3, #28]
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006c00:	2300      	movs	r3, #0
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3708      	adds	r7, #8
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}

08006c0a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006c0a:	b580      	push	{r7, lr}
 8006c0c:	b082      	sub	sp, #8
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
 8006c12:	460b      	mov	r3, r1
 8006c14:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d101      	bne.n	8006c24 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006c20:	2303      	movs	r3, #3
 8006c22:	e014      	b.n	8006c4e <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	2b03      	cmp	r3, #3
 8006c2e:	d10d      	bne.n	8006c4c <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c36:	6a1b      	ldr	r3, [r3, #32]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d007      	beq.n	8006c4c <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c42:	6a1b      	ldr	r3, [r3, #32]
 8006c44:	78fa      	ldrb	r2, [r7, #3]
 8006c46:	4611      	mov	r1, r2
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006c4c:	2300      	movs	r3, #0
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3708      	adds	r7, #8
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}

08006c56 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006c56:	b580      	push	{r7, lr}
 8006c58:	b082      	sub	sp, #8
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
 8006c5e:	460b      	mov	r3, r1
 8006c60:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d101      	bne.n	8006c70 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006c6c:	2303      	movs	r3, #3
 8006c6e:	e014      	b.n	8006c9a <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	2b03      	cmp	r3, #3
 8006c7a:	d10d      	bne.n	8006c98 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d007      	beq.n	8006c98 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c90:	78fa      	ldrb	r2, [r7, #3]
 8006c92:	4611      	mov	r1, r2
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006c98:	2300      	movs	r3, #0
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3708      	adds	r7, #8
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}

08006ca2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006ca2:	b480      	push	{r7}
 8006ca4:	b083      	sub	sp, #12
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006caa:	2300      	movs	r3, #0
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	370c      	adds	r7, #12
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr

08006cb8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b082      	sub	sp, #8
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d009      	beq.n	8006ce6 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	6852      	ldr	r2, [r2, #4]
 8006cde:	b2d2      	uxtb	r2, r2
 8006ce0:	4611      	mov	r1, r2
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	4798      	blx	r3
  }

  return USBD_OK;
 8006ce6:	2300      	movs	r3, #0
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3708      	adds	r7, #8
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b087      	sub	sp, #28
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	3301      	adds	r3, #1
 8006d06:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006d0e:	8a3b      	ldrh	r3, [r7, #16]
 8006d10:	021b      	lsls	r3, r3, #8
 8006d12:	b21a      	sxth	r2, r3
 8006d14:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	b21b      	sxth	r3, r3
 8006d1c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006d1e:	89fb      	ldrh	r3, [r7, #14]
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	371c      	adds	r7, #28
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr

08006d2c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d36:	2300      	movs	r3, #0
 8006d38:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d42:	2b40      	cmp	r3, #64	; 0x40
 8006d44:	d005      	beq.n	8006d52 <USBD_StdDevReq+0x26>
 8006d46:	2b40      	cmp	r3, #64	; 0x40
 8006d48:	d853      	bhi.n	8006df2 <USBD_StdDevReq+0xc6>
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d00b      	beq.n	8006d66 <USBD_StdDevReq+0x3a>
 8006d4e:	2b20      	cmp	r3, #32
 8006d50:	d14f      	bne.n	8006df2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	6839      	ldr	r1, [r7, #0]
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	4798      	blx	r3
 8006d60:	4603      	mov	r3, r0
 8006d62:	73fb      	strb	r3, [r7, #15]
      break;
 8006d64:	e04a      	b.n	8006dfc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	785b      	ldrb	r3, [r3, #1]
 8006d6a:	2b09      	cmp	r3, #9
 8006d6c:	d83b      	bhi.n	8006de6 <USBD_StdDevReq+0xba>
 8006d6e:	a201      	add	r2, pc, #4	; (adr r2, 8006d74 <USBD_StdDevReq+0x48>)
 8006d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d74:	08006dc9 	.word	0x08006dc9
 8006d78:	08006ddd 	.word	0x08006ddd
 8006d7c:	08006de7 	.word	0x08006de7
 8006d80:	08006dd3 	.word	0x08006dd3
 8006d84:	08006de7 	.word	0x08006de7
 8006d88:	08006da7 	.word	0x08006da7
 8006d8c:	08006d9d 	.word	0x08006d9d
 8006d90:	08006de7 	.word	0x08006de7
 8006d94:	08006dbf 	.word	0x08006dbf
 8006d98:	08006db1 	.word	0x08006db1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006d9c:	6839      	ldr	r1, [r7, #0]
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 f9de 	bl	8007160 <USBD_GetDescriptor>
          break;
 8006da4:	e024      	b.n	8006df0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006da6:	6839      	ldr	r1, [r7, #0]
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f000 fb6d 	bl	8007488 <USBD_SetAddress>
          break;
 8006dae:	e01f      	b.n	8006df0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006db0:	6839      	ldr	r1, [r7, #0]
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 fbac 	bl	8007510 <USBD_SetConfig>
 8006db8:	4603      	mov	r3, r0
 8006dba:	73fb      	strb	r3, [r7, #15]
          break;
 8006dbc:	e018      	b.n	8006df0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006dbe:	6839      	ldr	r1, [r7, #0]
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f000 fc4b 	bl	800765c <USBD_GetConfig>
          break;
 8006dc6:	e013      	b.n	8006df0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006dc8:	6839      	ldr	r1, [r7, #0]
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 fc7c 	bl	80076c8 <USBD_GetStatus>
          break;
 8006dd0:	e00e      	b.n	8006df0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006dd2:	6839      	ldr	r1, [r7, #0]
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 fcab 	bl	8007730 <USBD_SetFeature>
          break;
 8006dda:	e009      	b.n	8006df0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006ddc:	6839      	ldr	r1, [r7, #0]
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 fcba 	bl	8007758 <USBD_ClrFeature>
          break;
 8006de4:	e004      	b.n	8006df0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006de6:	6839      	ldr	r1, [r7, #0]
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 fd11 	bl	8007810 <USBD_CtlError>
          break;
 8006dee:	bf00      	nop
      }
      break;
 8006df0:	e004      	b.n	8006dfc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006df2:	6839      	ldr	r1, [r7, #0]
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f000 fd0b 	bl	8007810 <USBD_CtlError>
      break;
 8006dfa:	bf00      	nop
  }

  return ret;
 8006dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3710      	adds	r7, #16
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	bf00      	nop

08006e08 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b084      	sub	sp, #16
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e12:	2300      	movs	r3, #0
 8006e14:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e1e:	2b40      	cmp	r3, #64	; 0x40
 8006e20:	d005      	beq.n	8006e2e <USBD_StdItfReq+0x26>
 8006e22:	2b40      	cmp	r3, #64	; 0x40
 8006e24:	d82f      	bhi.n	8006e86 <USBD_StdItfReq+0x7e>
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d001      	beq.n	8006e2e <USBD_StdItfReq+0x26>
 8006e2a:	2b20      	cmp	r3, #32
 8006e2c:	d12b      	bne.n	8006e86 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	3b01      	subs	r3, #1
 8006e38:	2b02      	cmp	r3, #2
 8006e3a:	d81d      	bhi.n	8006e78 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	889b      	ldrh	r3, [r3, #4]
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d813      	bhi.n	8006e6e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	6839      	ldr	r1, [r7, #0]
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	4798      	blx	r3
 8006e54:	4603      	mov	r3, r0
 8006e56:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	88db      	ldrh	r3, [r3, #6]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d110      	bne.n	8006e82 <USBD_StdItfReq+0x7a>
 8006e60:	7bfb      	ldrb	r3, [r7, #15]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d10d      	bne.n	8006e82 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 fd80 	bl	800796c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006e6c:	e009      	b.n	8006e82 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006e6e:	6839      	ldr	r1, [r7, #0]
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 fccd 	bl	8007810 <USBD_CtlError>
          break;
 8006e76:	e004      	b.n	8006e82 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006e78:	6839      	ldr	r1, [r7, #0]
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 fcc8 	bl	8007810 <USBD_CtlError>
          break;
 8006e80:	e000      	b.n	8006e84 <USBD_StdItfReq+0x7c>
          break;
 8006e82:	bf00      	nop
      }
      break;
 8006e84:	e004      	b.n	8006e90 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006e86:	6839      	ldr	r1, [r7, #0]
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 fcc1 	bl	8007810 <USBD_CtlError>
      break;
 8006e8e:	bf00      	nop
  }

  return ret;
 8006e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3710      	adds	r7, #16
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}

08006e9a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e9a:	b580      	push	{r7, lr}
 8006e9c:	b084      	sub	sp, #16
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
 8006ea2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	889b      	ldrh	r3, [r3, #4]
 8006eac:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006eb6:	2b40      	cmp	r3, #64	; 0x40
 8006eb8:	d007      	beq.n	8006eca <USBD_StdEPReq+0x30>
 8006eba:	2b40      	cmp	r3, #64	; 0x40
 8006ebc:	f200 8145 	bhi.w	800714a <USBD_StdEPReq+0x2b0>
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d00c      	beq.n	8006ede <USBD_StdEPReq+0x44>
 8006ec4:	2b20      	cmp	r3, #32
 8006ec6:	f040 8140 	bne.w	800714a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	6839      	ldr	r1, [r7, #0]
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	4798      	blx	r3
 8006ed8:	4603      	mov	r3, r0
 8006eda:	73fb      	strb	r3, [r7, #15]
      break;
 8006edc:	e13a      	b.n	8007154 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	785b      	ldrb	r3, [r3, #1]
 8006ee2:	2b03      	cmp	r3, #3
 8006ee4:	d007      	beq.n	8006ef6 <USBD_StdEPReq+0x5c>
 8006ee6:	2b03      	cmp	r3, #3
 8006ee8:	f300 8129 	bgt.w	800713e <USBD_StdEPReq+0x2a4>
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d07f      	beq.n	8006ff0 <USBD_StdEPReq+0x156>
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d03c      	beq.n	8006f6e <USBD_StdEPReq+0xd4>
 8006ef4:	e123      	b.n	800713e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	2b02      	cmp	r3, #2
 8006f00:	d002      	beq.n	8006f08 <USBD_StdEPReq+0x6e>
 8006f02:	2b03      	cmp	r3, #3
 8006f04:	d016      	beq.n	8006f34 <USBD_StdEPReq+0x9a>
 8006f06:	e02c      	b.n	8006f62 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f08:	7bbb      	ldrb	r3, [r7, #14]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d00d      	beq.n	8006f2a <USBD_StdEPReq+0x90>
 8006f0e:	7bbb      	ldrb	r3, [r7, #14]
 8006f10:	2b80      	cmp	r3, #128	; 0x80
 8006f12:	d00a      	beq.n	8006f2a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006f14:	7bbb      	ldrb	r3, [r7, #14]
 8006f16:	4619      	mov	r1, r3
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f001 f9d3 	bl	80082c4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006f1e:	2180      	movs	r1, #128	; 0x80
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f001 f9cf 	bl	80082c4 <USBD_LL_StallEP>
 8006f26:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006f28:	e020      	b.n	8006f6c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006f2a:	6839      	ldr	r1, [r7, #0]
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 fc6f 	bl	8007810 <USBD_CtlError>
              break;
 8006f32:	e01b      	b.n	8006f6c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	885b      	ldrh	r3, [r3, #2]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d10e      	bne.n	8006f5a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006f3c:	7bbb      	ldrb	r3, [r7, #14]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d00b      	beq.n	8006f5a <USBD_StdEPReq+0xc0>
 8006f42:	7bbb      	ldrb	r3, [r7, #14]
 8006f44:	2b80      	cmp	r3, #128	; 0x80
 8006f46:	d008      	beq.n	8006f5a <USBD_StdEPReq+0xc0>
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	88db      	ldrh	r3, [r3, #6]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d104      	bne.n	8006f5a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006f50:	7bbb      	ldrb	r3, [r7, #14]
 8006f52:	4619      	mov	r1, r3
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f001 f9b5 	bl	80082c4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 fd06 	bl	800796c <USBD_CtlSendStatus>

              break;
 8006f60:	e004      	b.n	8006f6c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006f62:	6839      	ldr	r1, [r7, #0]
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 fc53 	bl	8007810 <USBD_CtlError>
              break;
 8006f6a:	bf00      	nop
          }
          break;
 8006f6c:	e0ec      	b.n	8007148 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	2b02      	cmp	r3, #2
 8006f78:	d002      	beq.n	8006f80 <USBD_StdEPReq+0xe6>
 8006f7a:	2b03      	cmp	r3, #3
 8006f7c:	d016      	beq.n	8006fac <USBD_StdEPReq+0x112>
 8006f7e:	e030      	b.n	8006fe2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f80:	7bbb      	ldrb	r3, [r7, #14]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d00d      	beq.n	8006fa2 <USBD_StdEPReq+0x108>
 8006f86:	7bbb      	ldrb	r3, [r7, #14]
 8006f88:	2b80      	cmp	r3, #128	; 0x80
 8006f8a:	d00a      	beq.n	8006fa2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006f8c:	7bbb      	ldrb	r3, [r7, #14]
 8006f8e:	4619      	mov	r1, r3
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f001 f997 	bl	80082c4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006f96:	2180      	movs	r1, #128	; 0x80
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f001 f993 	bl	80082c4 <USBD_LL_StallEP>
 8006f9e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006fa0:	e025      	b.n	8006fee <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006fa2:	6839      	ldr	r1, [r7, #0]
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 fc33 	bl	8007810 <USBD_CtlError>
              break;
 8006faa:	e020      	b.n	8006fee <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	885b      	ldrh	r3, [r3, #2]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d11b      	bne.n	8006fec <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006fb4:	7bbb      	ldrb	r3, [r7, #14]
 8006fb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d004      	beq.n	8006fc8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006fbe:	7bbb      	ldrb	r3, [r7, #14]
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f001 f9b4 	bl	8008330 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f000 fccf 	bl	800796c <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	6839      	ldr	r1, [r7, #0]
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	4798      	blx	r3
 8006fdc:	4603      	mov	r3, r0
 8006fde:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006fe0:	e004      	b.n	8006fec <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006fe2:	6839      	ldr	r1, [r7, #0]
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 fc13 	bl	8007810 <USBD_CtlError>
              break;
 8006fea:	e000      	b.n	8006fee <USBD_StdEPReq+0x154>
              break;
 8006fec:	bf00      	nop
          }
          break;
 8006fee:	e0ab      	b.n	8007148 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	2b02      	cmp	r3, #2
 8006ffa:	d002      	beq.n	8007002 <USBD_StdEPReq+0x168>
 8006ffc:	2b03      	cmp	r3, #3
 8006ffe:	d032      	beq.n	8007066 <USBD_StdEPReq+0x1cc>
 8007000:	e097      	b.n	8007132 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007002:	7bbb      	ldrb	r3, [r7, #14]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d007      	beq.n	8007018 <USBD_StdEPReq+0x17e>
 8007008:	7bbb      	ldrb	r3, [r7, #14]
 800700a:	2b80      	cmp	r3, #128	; 0x80
 800700c:	d004      	beq.n	8007018 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800700e:	6839      	ldr	r1, [r7, #0]
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 fbfd 	bl	8007810 <USBD_CtlError>
                break;
 8007016:	e091      	b.n	800713c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007018:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800701c:	2b00      	cmp	r3, #0
 800701e:	da0b      	bge.n	8007038 <USBD_StdEPReq+0x19e>
 8007020:	7bbb      	ldrb	r3, [r7, #14]
 8007022:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007026:	4613      	mov	r3, r2
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	4413      	add	r3, r2
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	3310      	adds	r3, #16
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	4413      	add	r3, r2
 8007034:	3304      	adds	r3, #4
 8007036:	e00b      	b.n	8007050 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007038:	7bbb      	ldrb	r3, [r7, #14]
 800703a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800703e:	4613      	mov	r3, r2
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	4413      	add	r3, r2
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	4413      	add	r3, r2
 800704e:	3304      	adds	r3, #4
 8007050:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	2200      	movs	r2, #0
 8007056:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	2202      	movs	r2, #2
 800705c:	4619      	mov	r1, r3
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 fc47 	bl	80078f2 <USBD_CtlSendData>
              break;
 8007064:	e06a      	b.n	800713c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007066:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800706a:	2b00      	cmp	r3, #0
 800706c:	da11      	bge.n	8007092 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800706e:	7bbb      	ldrb	r3, [r7, #14]
 8007070:	f003 020f 	and.w	r2, r3, #15
 8007074:	6879      	ldr	r1, [r7, #4]
 8007076:	4613      	mov	r3, r2
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	4413      	add	r3, r2
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	440b      	add	r3, r1
 8007080:	3324      	adds	r3, #36	; 0x24
 8007082:	881b      	ldrh	r3, [r3, #0]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d117      	bne.n	80070b8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007088:	6839      	ldr	r1, [r7, #0]
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 fbc0 	bl	8007810 <USBD_CtlError>
                  break;
 8007090:	e054      	b.n	800713c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007092:	7bbb      	ldrb	r3, [r7, #14]
 8007094:	f003 020f 	and.w	r2, r3, #15
 8007098:	6879      	ldr	r1, [r7, #4]
 800709a:	4613      	mov	r3, r2
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	4413      	add	r3, r2
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	440b      	add	r3, r1
 80070a4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80070a8:	881b      	ldrh	r3, [r3, #0]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d104      	bne.n	80070b8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80070ae:	6839      	ldr	r1, [r7, #0]
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f000 fbad 	bl	8007810 <USBD_CtlError>
                  break;
 80070b6:	e041      	b.n	800713c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80070b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	da0b      	bge.n	80070d8 <USBD_StdEPReq+0x23e>
 80070c0:	7bbb      	ldrb	r3, [r7, #14]
 80070c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80070c6:	4613      	mov	r3, r2
 80070c8:	009b      	lsls	r3, r3, #2
 80070ca:	4413      	add	r3, r2
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	3310      	adds	r3, #16
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	4413      	add	r3, r2
 80070d4:	3304      	adds	r3, #4
 80070d6:	e00b      	b.n	80070f0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80070d8:	7bbb      	ldrb	r3, [r7, #14]
 80070da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80070de:	4613      	mov	r3, r2
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	4413      	add	r3, r2
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	4413      	add	r3, r2
 80070ee:	3304      	adds	r3, #4
 80070f0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80070f2:	7bbb      	ldrb	r3, [r7, #14]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d002      	beq.n	80070fe <USBD_StdEPReq+0x264>
 80070f8:	7bbb      	ldrb	r3, [r7, #14]
 80070fa:	2b80      	cmp	r3, #128	; 0x80
 80070fc:	d103      	bne.n	8007106 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	2200      	movs	r2, #0
 8007102:	601a      	str	r2, [r3, #0]
 8007104:	e00e      	b.n	8007124 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007106:	7bbb      	ldrb	r3, [r7, #14]
 8007108:	4619      	mov	r1, r3
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f001 f946 	bl	800839c <USBD_LL_IsStallEP>
 8007110:	4603      	mov	r3, r0
 8007112:	2b00      	cmp	r3, #0
 8007114:	d003      	beq.n	800711e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	2201      	movs	r2, #1
 800711a:	601a      	str	r2, [r3, #0]
 800711c:	e002      	b.n	8007124 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	2200      	movs	r2, #0
 8007122:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	2202      	movs	r2, #2
 8007128:	4619      	mov	r1, r3
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 fbe1 	bl	80078f2 <USBD_CtlSendData>
              break;
 8007130:	e004      	b.n	800713c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8007132:	6839      	ldr	r1, [r7, #0]
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 fb6b 	bl	8007810 <USBD_CtlError>
              break;
 800713a:	bf00      	nop
          }
          break;
 800713c:	e004      	b.n	8007148 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800713e:	6839      	ldr	r1, [r7, #0]
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f000 fb65 	bl	8007810 <USBD_CtlError>
          break;
 8007146:	bf00      	nop
      }
      break;
 8007148:	e004      	b.n	8007154 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800714a:	6839      	ldr	r1, [r7, #0]
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 fb5f 	bl	8007810 <USBD_CtlError>
      break;
 8007152:	bf00      	nop
  }

  return ret;
 8007154:	7bfb      	ldrb	r3, [r7, #15]
}
 8007156:	4618      	mov	r0, r3
 8007158:	3710      	adds	r7, #16
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
	...

08007160 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b084      	sub	sp, #16
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800716a:	2300      	movs	r3, #0
 800716c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800716e:	2300      	movs	r3, #0
 8007170:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007172:	2300      	movs	r3, #0
 8007174:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	885b      	ldrh	r3, [r3, #2]
 800717a:	0a1b      	lsrs	r3, r3, #8
 800717c:	b29b      	uxth	r3, r3
 800717e:	3b01      	subs	r3, #1
 8007180:	2b0e      	cmp	r3, #14
 8007182:	f200 8152 	bhi.w	800742a <USBD_GetDescriptor+0x2ca>
 8007186:	a201      	add	r2, pc, #4	; (adr r2, 800718c <USBD_GetDescriptor+0x2c>)
 8007188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800718c:	080071fd 	.word	0x080071fd
 8007190:	08007215 	.word	0x08007215
 8007194:	08007255 	.word	0x08007255
 8007198:	0800742b 	.word	0x0800742b
 800719c:	0800742b 	.word	0x0800742b
 80071a0:	080073cb 	.word	0x080073cb
 80071a4:	080073f7 	.word	0x080073f7
 80071a8:	0800742b 	.word	0x0800742b
 80071ac:	0800742b 	.word	0x0800742b
 80071b0:	0800742b 	.word	0x0800742b
 80071b4:	0800742b 	.word	0x0800742b
 80071b8:	0800742b 	.word	0x0800742b
 80071bc:	0800742b 	.word	0x0800742b
 80071c0:	0800742b 	.word	0x0800742b
 80071c4:	080071c9 	.word	0x080071c9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071ce:	69db      	ldr	r3, [r3, #28]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d00b      	beq.n	80071ec <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071da:	69db      	ldr	r3, [r3, #28]
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	7c12      	ldrb	r2, [r2, #16]
 80071e0:	f107 0108 	add.w	r1, r7, #8
 80071e4:	4610      	mov	r0, r2
 80071e6:	4798      	blx	r3
 80071e8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80071ea:	e126      	b.n	800743a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80071ec:	6839      	ldr	r1, [r7, #0]
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 fb0e 	bl	8007810 <USBD_CtlError>
        err++;
 80071f4:	7afb      	ldrb	r3, [r7, #11]
 80071f6:	3301      	adds	r3, #1
 80071f8:	72fb      	strb	r3, [r7, #11]
      break;
 80071fa:	e11e      	b.n	800743a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	7c12      	ldrb	r2, [r2, #16]
 8007208:	f107 0108 	add.w	r1, r7, #8
 800720c:	4610      	mov	r0, r2
 800720e:	4798      	blx	r3
 8007210:	60f8      	str	r0, [r7, #12]
      break;
 8007212:	e112      	b.n	800743a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	7c1b      	ldrb	r3, [r3, #16]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d10d      	bne.n	8007238 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007224:	f107 0208 	add.w	r2, r7, #8
 8007228:	4610      	mov	r0, r2
 800722a:	4798      	blx	r3
 800722c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	3301      	adds	r3, #1
 8007232:	2202      	movs	r2, #2
 8007234:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007236:	e100      	b.n	800743a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800723e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007240:	f107 0208 	add.w	r2, r7, #8
 8007244:	4610      	mov	r0, r2
 8007246:	4798      	blx	r3
 8007248:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	3301      	adds	r3, #1
 800724e:	2202      	movs	r2, #2
 8007250:	701a      	strb	r2, [r3, #0]
      break;
 8007252:	e0f2      	b.n	800743a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	885b      	ldrh	r3, [r3, #2]
 8007258:	b2db      	uxtb	r3, r3
 800725a:	2b05      	cmp	r3, #5
 800725c:	f200 80ac 	bhi.w	80073b8 <USBD_GetDescriptor+0x258>
 8007260:	a201      	add	r2, pc, #4	; (adr r2, 8007268 <USBD_GetDescriptor+0x108>)
 8007262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007266:	bf00      	nop
 8007268:	08007281 	.word	0x08007281
 800726c:	080072b5 	.word	0x080072b5
 8007270:	080072e9 	.word	0x080072e9
 8007274:	0800731d 	.word	0x0800731d
 8007278:	08007351 	.word	0x08007351
 800727c:	08007385 	.word	0x08007385
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d00b      	beq.n	80072a4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	7c12      	ldrb	r2, [r2, #16]
 8007298:	f107 0108 	add.w	r1, r7, #8
 800729c:	4610      	mov	r0, r2
 800729e:	4798      	blx	r3
 80072a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072a2:	e091      	b.n	80073c8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80072a4:	6839      	ldr	r1, [r7, #0]
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 fab2 	bl	8007810 <USBD_CtlError>
            err++;
 80072ac:	7afb      	ldrb	r3, [r7, #11]
 80072ae:	3301      	adds	r3, #1
 80072b0:	72fb      	strb	r3, [r7, #11]
          break;
 80072b2:	e089      	b.n	80073c8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d00b      	beq.n	80072d8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	7c12      	ldrb	r2, [r2, #16]
 80072cc:	f107 0108 	add.w	r1, r7, #8
 80072d0:	4610      	mov	r0, r2
 80072d2:	4798      	blx	r3
 80072d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072d6:	e077      	b.n	80073c8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80072d8:	6839      	ldr	r1, [r7, #0]
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 fa98 	bl	8007810 <USBD_CtlError>
            err++;
 80072e0:	7afb      	ldrb	r3, [r7, #11]
 80072e2:	3301      	adds	r3, #1
 80072e4:	72fb      	strb	r3, [r7, #11]
          break;
 80072e6:	e06f      	b.n	80073c8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072ee:	68db      	ldr	r3, [r3, #12]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d00b      	beq.n	800730c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	7c12      	ldrb	r2, [r2, #16]
 8007300:	f107 0108 	add.w	r1, r7, #8
 8007304:	4610      	mov	r0, r2
 8007306:	4798      	blx	r3
 8007308:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800730a:	e05d      	b.n	80073c8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800730c:	6839      	ldr	r1, [r7, #0]
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 fa7e 	bl	8007810 <USBD_CtlError>
            err++;
 8007314:	7afb      	ldrb	r3, [r7, #11]
 8007316:	3301      	adds	r3, #1
 8007318:	72fb      	strb	r3, [r7, #11]
          break;
 800731a:	e055      	b.n	80073c8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007322:	691b      	ldr	r3, [r3, #16]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d00b      	beq.n	8007340 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800732e:	691b      	ldr	r3, [r3, #16]
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	7c12      	ldrb	r2, [r2, #16]
 8007334:	f107 0108 	add.w	r1, r7, #8
 8007338:	4610      	mov	r0, r2
 800733a:	4798      	blx	r3
 800733c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800733e:	e043      	b.n	80073c8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007340:	6839      	ldr	r1, [r7, #0]
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 fa64 	bl	8007810 <USBD_CtlError>
            err++;
 8007348:	7afb      	ldrb	r3, [r7, #11]
 800734a:	3301      	adds	r3, #1
 800734c:	72fb      	strb	r3, [r7, #11]
          break;
 800734e:	e03b      	b.n	80073c8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007356:	695b      	ldr	r3, [r3, #20]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d00b      	beq.n	8007374 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007362:	695b      	ldr	r3, [r3, #20]
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	7c12      	ldrb	r2, [r2, #16]
 8007368:	f107 0108 	add.w	r1, r7, #8
 800736c:	4610      	mov	r0, r2
 800736e:	4798      	blx	r3
 8007370:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007372:	e029      	b.n	80073c8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007374:	6839      	ldr	r1, [r7, #0]
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 fa4a 	bl	8007810 <USBD_CtlError>
            err++;
 800737c:	7afb      	ldrb	r3, [r7, #11]
 800737e:	3301      	adds	r3, #1
 8007380:	72fb      	strb	r3, [r7, #11]
          break;
 8007382:	e021      	b.n	80073c8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800738a:	699b      	ldr	r3, [r3, #24]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d00b      	beq.n	80073a8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007396:	699b      	ldr	r3, [r3, #24]
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	7c12      	ldrb	r2, [r2, #16]
 800739c:	f107 0108 	add.w	r1, r7, #8
 80073a0:	4610      	mov	r0, r2
 80073a2:	4798      	blx	r3
 80073a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073a6:	e00f      	b.n	80073c8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80073a8:	6839      	ldr	r1, [r7, #0]
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 fa30 	bl	8007810 <USBD_CtlError>
            err++;
 80073b0:	7afb      	ldrb	r3, [r7, #11]
 80073b2:	3301      	adds	r3, #1
 80073b4:	72fb      	strb	r3, [r7, #11]
          break;
 80073b6:	e007      	b.n	80073c8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80073b8:	6839      	ldr	r1, [r7, #0]
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 fa28 	bl	8007810 <USBD_CtlError>
          err++;
 80073c0:	7afb      	ldrb	r3, [r7, #11]
 80073c2:	3301      	adds	r3, #1
 80073c4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80073c6:	bf00      	nop
      }
      break;
 80073c8:	e037      	b.n	800743a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	7c1b      	ldrb	r3, [r3, #16]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d109      	bne.n	80073e6 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073da:	f107 0208 	add.w	r2, r7, #8
 80073de:	4610      	mov	r0, r2
 80073e0:	4798      	blx	r3
 80073e2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80073e4:	e029      	b.n	800743a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80073e6:	6839      	ldr	r1, [r7, #0]
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 fa11 	bl	8007810 <USBD_CtlError>
        err++;
 80073ee:	7afb      	ldrb	r3, [r7, #11]
 80073f0:	3301      	adds	r3, #1
 80073f2:	72fb      	strb	r3, [r7, #11]
      break;
 80073f4:	e021      	b.n	800743a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	7c1b      	ldrb	r3, [r3, #16]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d10d      	bne.n	800741a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007406:	f107 0208 	add.w	r2, r7, #8
 800740a:	4610      	mov	r0, r2
 800740c:	4798      	blx	r3
 800740e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	3301      	adds	r3, #1
 8007414:	2207      	movs	r2, #7
 8007416:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007418:	e00f      	b.n	800743a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800741a:	6839      	ldr	r1, [r7, #0]
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 f9f7 	bl	8007810 <USBD_CtlError>
        err++;
 8007422:	7afb      	ldrb	r3, [r7, #11]
 8007424:	3301      	adds	r3, #1
 8007426:	72fb      	strb	r3, [r7, #11]
      break;
 8007428:	e007      	b.n	800743a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800742a:	6839      	ldr	r1, [r7, #0]
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 f9ef 	bl	8007810 <USBD_CtlError>
      err++;
 8007432:	7afb      	ldrb	r3, [r7, #11]
 8007434:	3301      	adds	r3, #1
 8007436:	72fb      	strb	r3, [r7, #11]
      break;
 8007438:	bf00      	nop
  }

  if (err != 0U)
 800743a:	7afb      	ldrb	r3, [r7, #11]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d11e      	bne.n	800747e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	88db      	ldrh	r3, [r3, #6]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d016      	beq.n	8007476 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007448:	893b      	ldrh	r3, [r7, #8]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d00e      	beq.n	800746c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	88da      	ldrh	r2, [r3, #6]
 8007452:	893b      	ldrh	r3, [r7, #8]
 8007454:	4293      	cmp	r3, r2
 8007456:	bf28      	it	cs
 8007458:	4613      	movcs	r3, r2
 800745a:	b29b      	uxth	r3, r3
 800745c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800745e:	893b      	ldrh	r3, [r7, #8]
 8007460:	461a      	mov	r2, r3
 8007462:	68f9      	ldr	r1, [r7, #12]
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 fa44 	bl	80078f2 <USBD_CtlSendData>
 800746a:	e009      	b.n	8007480 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800746c:	6839      	ldr	r1, [r7, #0]
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 f9ce 	bl	8007810 <USBD_CtlError>
 8007474:	e004      	b.n	8007480 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 fa78 	bl	800796c <USBD_CtlSendStatus>
 800747c:	e000      	b.n	8007480 <USBD_GetDescriptor+0x320>
    return;
 800747e:	bf00      	nop
  }
}
 8007480:	3710      	adds	r7, #16
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}
 8007486:	bf00      	nop

08007488 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b084      	sub	sp, #16
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	889b      	ldrh	r3, [r3, #4]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d131      	bne.n	80074fe <USBD_SetAddress+0x76>
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	88db      	ldrh	r3, [r3, #6]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d12d      	bne.n	80074fe <USBD_SetAddress+0x76>
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	885b      	ldrh	r3, [r3, #2]
 80074a6:	2b7f      	cmp	r3, #127	; 0x7f
 80074a8:	d829      	bhi.n	80074fe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	885b      	ldrh	r3, [r3, #2]
 80074ae:	b2db      	uxtb	r3, r3
 80074b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074b4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	2b03      	cmp	r3, #3
 80074c0:	d104      	bne.n	80074cc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80074c2:	6839      	ldr	r1, [r7, #0]
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 f9a3 	bl	8007810 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074ca:	e01d      	b.n	8007508 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	7bfa      	ldrb	r2, [r7, #15]
 80074d0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80074d4:	7bfb      	ldrb	r3, [r7, #15]
 80074d6:	4619      	mov	r1, r3
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 ff8b 	bl	80083f4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 fa44 	bl	800796c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80074e4:	7bfb      	ldrb	r3, [r7, #15]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d004      	beq.n	80074f4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2202      	movs	r2, #2
 80074ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074f2:	e009      	b.n	8007508 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2201      	movs	r2, #1
 80074f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074fc:	e004      	b.n	8007508 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80074fe:	6839      	ldr	r1, [r7, #0]
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 f985 	bl	8007810 <USBD_CtlError>
  }
}
 8007506:	bf00      	nop
 8007508:	bf00      	nop
 800750a:	3710      	adds	r7, #16
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b084      	sub	sp, #16
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800751a:	2300      	movs	r3, #0
 800751c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	885b      	ldrh	r3, [r3, #2]
 8007522:	b2da      	uxtb	r2, r3
 8007524:	4b4c      	ldr	r3, [pc, #304]	; (8007658 <USBD_SetConfig+0x148>)
 8007526:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007528:	4b4b      	ldr	r3, [pc, #300]	; (8007658 <USBD_SetConfig+0x148>)
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	2b01      	cmp	r3, #1
 800752e:	d905      	bls.n	800753c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007530:	6839      	ldr	r1, [r7, #0]
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 f96c 	bl	8007810 <USBD_CtlError>
    return USBD_FAIL;
 8007538:	2303      	movs	r3, #3
 800753a:	e088      	b.n	800764e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007542:	b2db      	uxtb	r3, r3
 8007544:	2b02      	cmp	r3, #2
 8007546:	d002      	beq.n	800754e <USBD_SetConfig+0x3e>
 8007548:	2b03      	cmp	r3, #3
 800754a:	d025      	beq.n	8007598 <USBD_SetConfig+0x88>
 800754c:	e071      	b.n	8007632 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800754e:	4b42      	ldr	r3, [pc, #264]	; (8007658 <USBD_SetConfig+0x148>)
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d01c      	beq.n	8007590 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007556:	4b40      	ldr	r3, [pc, #256]	; (8007658 <USBD_SetConfig+0x148>)
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	461a      	mov	r2, r3
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007560:	4b3d      	ldr	r3, [pc, #244]	; (8007658 <USBD_SetConfig+0x148>)
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	4619      	mov	r1, r3
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f7ff f91f 	bl	80067aa <USBD_SetClassConfig>
 800756c:	4603      	mov	r3, r0
 800756e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007570:	7bfb      	ldrb	r3, [r7, #15]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d004      	beq.n	8007580 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007576:	6839      	ldr	r1, [r7, #0]
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 f949 	bl	8007810 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800757e:	e065      	b.n	800764c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 f9f3 	bl	800796c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2203      	movs	r2, #3
 800758a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800758e:	e05d      	b.n	800764c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 f9eb 	bl	800796c <USBD_CtlSendStatus>
      break;
 8007596:	e059      	b.n	800764c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007598:	4b2f      	ldr	r3, [pc, #188]	; (8007658 <USBD_SetConfig+0x148>)
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d112      	bne.n	80075c6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2202      	movs	r2, #2
 80075a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80075a8:	4b2b      	ldr	r3, [pc, #172]	; (8007658 <USBD_SetConfig+0x148>)
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	461a      	mov	r2, r3
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80075b2:	4b29      	ldr	r3, [pc, #164]	; (8007658 <USBD_SetConfig+0x148>)
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	4619      	mov	r1, r3
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f7ff f912 	bl	80067e2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 f9d4 	bl	800796c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80075c4:	e042      	b.n	800764c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80075c6:	4b24      	ldr	r3, [pc, #144]	; (8007658 <USBD_SetConfig+0x148>)
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	461a      	mov	r2, r3
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d02a      	beq.n	800762a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	4619      	mov	r1, r3
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f7ff f900 	bl	80067e2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80075e2:	4b1d      	ldr	r3, [pc, #116]	; (8007658 <USBD_SetConfig+0x148>)
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	461a      	mov	r2, r3
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80075ec:	4b1a      	ldr	r3, [pc, #104]	; (8007658 <USBD_SetConfig+0x148>)
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	4619      	mov	r1, r3
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f7ff f8d9 	bl	80067aa <USBD_SetClassConfig>
 80075f8:	4603      	mov	r3, r0
 80075fa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80075fc:	7bfb      	ldrb	r3, [r7, #15]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d00f      	beq.n	8007622 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007602:	6839      	ldr	r1, [r7, #0]
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 f903 	bl	8007810 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	b2db      	uxtb	r3, r3
 8007610:	4619      	mov	r1, r3
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f7ff f8e5 	bl	80067e2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2202      	movs	r2, #2
 800761c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007620:	e014      	b.n	800764c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 f9a2 	bl	800796c <USBD_CtlSendStatus>
      break;
 8007628:	e010      	b.n	800764c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 f99e 	bl	800796c <USBD_CtlSendStatus>
      break;
 8007630:	e00c      	b.n	800764c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007632:	6839      	ldr	r1, [r7, #0]
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 f8eb 	bl	8007810 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800763a:	4b07      	ldr	r3, [pc, #28]	; (8007658 <USBD_SetConfig+0x148>)
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	4619      	mov	r1, r3
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f7ff f8ce 	bl	80067e2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007646:	2303      	movs	r3, #3
 8007648:	73fb      	strb	r3, [r7, #15]
      break;
 800764a:	bf00      	nop
  }

  return ret;
 800764c:	7bfb      	ldrb	r3, [r7, #15]
}
 800764e:	4618      	mov	r0, r3
 8007650:	3710      	adds	r7, #16
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop
 8007658:	20000194 	.word	0x20000194

0800765c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b082      	sub	sp, #8
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	88db      	ldrh	r3, [r3, #6]
 800766a:	2b01      	cmp	r3, #1
 800766c:	d004      	beq.n	8007678 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800766e:	6839      	ldr	r1, [r7, #0]
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 f8cd 	bl	8007810 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007676:	e023      	b.n	80076c0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800767e:	b2db      	uxtb	r3, r3
 8007680:	2b02      	cmp	r3, #2
 8007682:	dc02      	bgt.n	800768a <USBD_GetConfig+0x2e>
 8007684:	2b00      	cmp	r3, #0
 8007686:	dc03      	bgt.n	8007690 <USBD_GetConfig+0x34>
 8007688:	e015      	b.n	80076b6 <USBD_GetConfig+0x5a>
 800768a:	2b03      	cmp	r3, #3
 800768c:	d00b      	beq.n	80076a6 <USBD_GetConfig+0x4a>
 800768e:	e012      	b.n	80076b6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2200      	movs	r2, #0
 8007694:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	3308      	adds	r3, #8
 800769a:	2201      	movs	r2, #1
 800769c:	4619      	mov	r1, r3
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 f927 	bl	80078f2 <USBD_CtlSendData>
        break;
 80076a4:	e00c      	b.n	80076c0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	3304      	adds	r3, #4
 80076aa:	2201      	movs	r2, #1
 80076ac:	4619      	mov	r1, r3
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 f91f 	bl	80078f2 <USBD_CtlSendData>
        break;
 80076b4:	e004      	b.n	80076c0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80076b6:	6839      	ldr	r1, [r7, #0]
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 f8a9 	bl	8007810 <USBD_CtlError>
        break;
 80076be:	bf00      	nop
}
 80076c0:	bf00      	nop
 80076c2:	3708      	adds	r7, #8
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b082      	sub	sp, #8
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	3b01      	subs	r3, #1
 80076dc:	2b02      	cmp	r3, #2
 80076de:	d81e      	bhi.n	800771e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	88db      	ldrh	r3, [r3, #6]
 80076e4:	2b02      	cmp	r3, #2
 80076e6:	d004      	beq.n	80076f2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80076e8:	6839      	ldr	r1, [r7, #0]
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 f890 	bl	8007810 <USBD_CtlError>
        break;
 80076f0:	e01a      	b.n	8007728 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2201      	movs	r2, #1
 80076f6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d005      	beq.n	800770e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	68db      	ldr	r3, [r3, #12]
 8007706:	f043 0202 	orr.w	r2, r3, #2
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	330c      	adds	r3, #12
 8007712:	2202      	movs	r2, #2
 8007714:	4619      	mov	r1, r3
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 f8eb 	bl	80078f2 <USBD_CtlSendData>
      break;
 800771c:	e004      	b.n	8007728 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800771e:	6839      	ldr	r1, [r7, #0]
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 f875 	bl	8007810 <USBD_CtlError>
      break;
 8007726:	bf00      	nop
  }
}
 8007728:	bf00      	nop
 800772a:	3708      	adds	r7, #8
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	885b      	ldrh	r3, [r3, #2]
 800773e:	2b01      	cmp	r3, #1
 8007740:	d106      	bne.n	8007750 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2201      	movs	r2, #1
 8007746:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 f90e 	bl	800796c <USBD_CtlSendStatus>
  }
}
 8007750:	bf00      	nop
 8007752:	3708      	adds	r7, #8
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007768:	b2db      	uxtb	r3, r3
 800776a:	3b01      	subs	r3, #1
 800776c:	2b02      	cmp	r3, #2
 800776e:	d80b      	bhi.n	8007788 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	885b      	ldrh	r3, [r3, #2]
 8007774:	2b01      	cmp	r3, #1
 8007776:	d10c      	bne.n	8007792 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 f8f3 	bl	800796c <USBD_CtlSendStatus>
      }
      break;
 8007786:	e004      	b.n	8007792 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007788:	6839      	ldr	r1, [r7, #0]
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 f840 	bl	8007810 <USBD_CtlError>
      break;
 8007790:	e000      	b.n	8007794 <USBD_ClrFeature+0x3c>
      break;
 8007792:	bf00      	nop
  }
}
 8007794:	bf00      	nop
 8007796:	3708      	adds	r7, #8
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	781a      	ldrb	r2, [r3, #0]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	3301      	adds	r3, #1
 80077b6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	781a      	ldrb	r2, [r3, #0]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	3301      	adds	r3, #1
 80077c4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80077c6:	68f8      	ldr	r0, [r7, #12]
 80077c8:	f7ff fa92 	bl	8006cf0 <SWAPBYTE>
 80077cc:	4603      	mov	r3, r0
 80077ce:	461a      	mov	r2, r3
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	3301      	adds	r3, #1
 80077d8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	3301      	adds	r3, #1
 80077de:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80077e0:	68f8      	ldr	r0, [r7, #12]
 80077e2:	f7ff fa85 	bl	8006cf0 <SWAPBYTE>
 80077e6:	4603      	mov	r3, r0
 80077e8:	461a      	mov	r2, r3
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	3301      	adds	r3, #1
 80077f2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	3301      	adds	r3, #1
 80077f8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80077fa:	68f8      	ldr	r0, [r7, #12]
 80077fc:	f7ff fa78 	bl	8006cf0 <SWAPBYTE>
 8007800:	4603      	mov	r3, r0
 8007802:	461a      	mov	r2, r3
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	80da      	strh	r2, [r3, #6]
}
 8007808:	bf00      	nop
 800780a:	3710      	adds	r7, #16
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b082      	sub	sp, #8
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800781a:	2180      	movs	r1, #128	; 0x80
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 fd51 	bl	80082c4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007822:	2100      	movs	r1, #0
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 fd4d 	bl	80082c4 <USBD_LL_StallEP>
}
 800782a:	bf00      	nop
 800782c:	3708      	adds	r7, #8
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}

08007832 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007832:	b580      	push	{r7, lr}
 8007834:	b086      	sub	sp, #24
 8007836:	af00      	add	r7, sp, #0
 8007838:	60f8      	str	r0, [r7, #12]
 800783a:	60b9      	str	r1, [r7, #8]
 800783c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800783e:	2300      	movs	r3, #0
 8007840:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d036      	beq.n	80078b6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800784c:	6938      	ldr	r0, [r7, #16]
 800784e:	f000 f836 	bl	80078be <USBD_GetLen>
 8007852:	4603      	mov	r3, r0
 8007854:	3301      	adds	r3, #1
 8007856:	b29b      	uxth	r3, r3
 8007858:	005b      	lsls	r3, r3, #1
 800785a:	b29a      	uxth	r2, r3
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007860:	7dfb      	ldrb	r3, [r7, #23]
 8007862:	68ba      	ldr	r2, [r7, #8]
 8007864:	4413      	add	r3, r2
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	7812      	ldrb	r2, [r2, #0]
 800786a:	701a      	strb	r2, [r3, #0]
  idx++;
 800786c:	7dfb      	ldrb	r3, [r7, #23]
 800786e:	3301      	adds	r3, #1
 8007870:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007872:	7dfb      	ldrb	r3, [r7, #23]
 8007874:	68ba      	ldr	r2, [r7, #8]
 8007876:	4413      	add	r3, r2
 8007878:	2203      	movs	r2, #3
 800787a:	701a      	strb	r2, [r3, #0]
  idx++;
 800787c:	7dfb      	ldrb	r3, [r7, #23]
 800787e:	3301      	adds	r3, #1
 8007880:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007882:	e013      	b.n	80078ac <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007884:	7dfb      	ldrb	r3, [r7, #23]
 8007886:	68ba      	ldr	r2, [r7, #8]
 8007888:	4413      	add	r3, r2
 800788a:	693a      	ldr	r2, [r7, #16]
 800788c:	7812      	ldrb	r2, [r2, #0]
 800788e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	3301      	adds	r3, #1
 8007894:	613b      	str	r3, [r7, #16]
    idx++;
 8007896:	7dfb      	ldrb	r3, [r7, #23]
 8007898:	3301      	adds	r3, #1
 800789a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800789c:	7dfb      	ldrb	r3, [r7, #23]
 800789e:	68ba      	ldr	r2, [r7, #8]
 80078a0:	4413      	add	r3, r2
 80078a2:	2200      	movs	r2, #0
 80078a4:	701a      	strb	r2, [r3, #0]
    idx++;
 80078a6:	7dfb      	ldrb	r3, [r7, #23]
 80078a8:	3301      	adds	r3, #1
 80078aa:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	781b      	ldrb	r3, [r3, #0]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d1e7      	bne.n	8007884 <USBD_GetString+0x52>
 80078b4:	e000      	b.n	80078b8 <USBD_GetString+0x86>
    return;
 80078b6:	bf00      	nop
  }
}
 80078b8:	3718      	adds	r7, #24
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}

080078be <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80078be:	b480      	push	{r7}
 80078c0:	b085      	sub	sp, #20
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80078c6:	2300      	movs	r3, #0
 80078c8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80078ce:	e005      	b.n	80078dc <USBD_GetLen+0x1e>
  {
    len++;
 80078d0:	7bfb      	ldrb	r3, [r7, #15]
 80078d2:	3301      	adds	r3, #1
 80078d4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	3301      	adds	r3, #1
 80078da:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d1f5      	bne.n	80078d0 <USBD_GetLen+0x12>
  }

  return len;
 80078e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3714      	adds	r7, #20
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr

080078f2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80078f2:	b580      	push	{r7, lr}
 80078f4:	b084      	sub	sp, #16
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	60f8      	str	r0, [r7, #12]
 80078fa:	60b9      	str	r1, [r7, #8]
 80078fc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2202      	movs	r2, #2
 8007902:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	687a      	ldr	r2, [r7, #4]
 800790a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	68ba      	ldr	r2, [r7, #8]
 8007916:	2100      	movs	r1, #0
 8007918:	68f8      	ldr	r0, [r7, #12]
 800791a:	f000 fda1 	bl	8008460 <USBD_LL_Transmit>

  return USBD_OK;
 800791e:	2300      	movs	r3, #0
}
 8007920:	4618      	mov	r0, r3
 8007922:	3710      	adds	r7, #16
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}

08007928 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b084      	sub	sp, #16
 800792c:	af00      	add	r7, sp, #0
 800792e:	60f8      	str	r0, [r7, #12]
 8007930:	60b9      	str	r1, [r7, #8]
 8007932:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	68ba      	ldr	r2, [r7, #8]
 8007938:	2100      	movs	r1, #0
 800793a:	68f8      	ldr	r0, [r7, #12]
 800793c:	f000 fd90 	bl	8008460 <USBD_LL_Transmit>

  return USBD_OK;
 8007940:	2300      	movs	r3, #0
}
 8007942:	4618      	mov	r0, r3
 8007944:	3710      	adds	r7, #16
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}

0800794a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800794a:	b580      	push	{r7, lr}
 800794c:	b084      	sub	sp, #16
 800794e:	af00      	add	r7, sp, #0
 8007950:	60f8      	str	r0, [r7, #12]
 8007952:	60b9      	str	r1, [r7, #8]
 8007954:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	68ba      	ldr	r2, [r7, #8]
 800795a:	2100      	movs	r1, #0
 800795c:	68f8      	ldr	r0, [r7, #12]
 800795e:	f000 fdb7 	bl	80084d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007962:	2300      	movs	r3, #0
}
 8007964:	4618      	mov	r0, r3
 8007966:	3710      	adds	r7, #16
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b082      	sub	sp, #8
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2204      	movs	r2, #4
 8007978:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800797c:	2300      	movs	r3, #0
 800797e:	2200      	movs	r2, #0
 8007980:	2100      	movs	r1, #0
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 fd6c 	bl	8008460 <USBD_LL_Transmit>

  return USBD_OK;
 8007988:	2300      	movs	r3, #0
}
 800798a:	4618      	mov	r0, r3
 800798c:	3708      	adds	r7, #8
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}

08007992 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007992:	b580      	push	{r7, lr}
 8007994:	b082      	sub	sp, #8
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2205      	movs	r2, #5
 800799e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80079a2:	2300      	movs	r3, #0
 80079a4:	2200      	movs	r2, #0
 80079a6:	2100      	movs	r1, #0
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 fd91 	bl	80084d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80079ae:	2300      	movs	r3, #0
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3708      	adds	r7, #8
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80079bc:	2200      	movs	r2, #0
 80079be:	4912      	ldr	r1, [pc, #72]	; (8007a08 <MX_USB_DEVICE_Init+0x50>)
 80079c0:	4812      	ldr	r0, [pc, #72]	; (8007a0c <MX_USB_DEVICE_Init+0x54>)
 80079c2:	f7fe fe84 	bl	80066ce <USBD_Init>
 80079c6:	4603      	mov	r3, r0
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d001      	beq.n	80079d0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80079cc:	f7f8 fc7a 	bl	80002c4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 80079d0:	490f      	ldr	r1, [pc, #60]	; (8007a10 <MX_USB_DEVICE_Init+0x58>)
 80079d2:	480e      	ldr	r0, [pc, #56]	; (8007a0c <MX_USB_DEVICE_Init+0x54>)
 80079d4:	f7fe feab 	bl	800672e <USBD_RegisterClass>
 80079d8:	4603      	mov	r3, r0
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d001      	beq.n	80079e2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80079de:	f7f8 fc71 	bl	80002c4 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 80079e2:	490c      	ldr	r1, [pc, #48]	; (8007a14 <MX_USB_DEVICE_Init+0x5c>)
 80079e4:	4809      	ldr	r0, [pc, #36]	; (8007a0c <MX_USB_DEVICE_Init+0x54>)
 80079e6:	f7fd fa5b 	bl	8004ea0 <USBD_MSC_RegisterStorage>
 80079ea:	4603      	mov	r3, r0
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d001      	beq.n	80079f4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80079f0:	f7f8 fc68 	bl	80002c4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80079f4:	4805      	ldr	r0, [pc, #20]	; (8007a0c <MX_USB_DEVICE_Init+0x54>)
 80079f6:	f7fe fec1 	bl	800677c <USBD_Start>
 80079fa:	4603      	mov	r3, r0
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d001      	beq.n	8007a04 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007a00:	f7f8 fc60 	bl	80002c4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007a04:	bf00      	nop
 8007a06:	bd80      	pop	{r7, pc}
 8007a08:	200000f4 	.word	0x200000f4
 8007a0c:	20000198 	.word	0x20000198
 8007a10:	2000000c 	.word	0x2000000c
 8007a14:	20000154 	.word	0x20000154

08007a18 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	4603      	mov	r3, r0
 8007a20:	6039      	str	r1, [r7, #0]
 8007a22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	2212      	movs	r2, #18
 8007a28:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007a2a:	4b03      	ldr	r3, [pc, #12]	; (8007a38 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	370c      	adds	r7, #12
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr
 8007a38:	20000114 	.word	0x20000114

08007a3c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b083      	sub	sp, #12
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	4603      	mov	r3, r0
 8007a44:	6039      	str	r1, [r7, #0]
 8007a46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	2204      	movs	r2, #4
 8007a4c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007a4e:	4b03      	ldr	r3, [pc, #12]	; (8007a5c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	370c      	adds	r7, #12
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr
 8007a5c:	20000134 	.word	0x20000134

08007a60 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b082      	sub	sp, #8
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	4603      	mov	r3, r0
 8007a68:	6039      	str	r1, [r7, #0]
 8007a6a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007a6c:	79fb      	ldrb	r3, [r7, #7]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d105      	bne.n	8007a7e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007a72:	683a      	ldr	r2, [r7, #0]
 8007a74:	4907      	ldr	r1, [pc, #28]	; (8007a94 <USBD_FS_ProductStrDescriptor+0x34>)
 8007a76:	4808      	ldr	r0, [pc, #32]	; (8007a98 <USBD_FS_ProductStrDescriptor+0x38>)
 8007a78:	f7ff fedb 	bl	8007832 <USBD_GetString>
 8007a7c:	e004      	b.n	8007a88 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007a7e:	683a      	ldr	r2, [r7, #0]
 8007a80:	4904      	ldr	r1, [pc, #16]	; (8007a94 <USBD_FS_ProductStrDescriptor+0x34>)
 8007a82:	4805      	ldr	r0, [pc, #20]	; (8007a98 <USBD_FS_ProductStrDescriptor+0x38>)
 8007a84:	f7ff fed5 	bl	8007832 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a88:	4b02      	ldr	r3, [pc, #8]	; (8007a94 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3708      	adds	r7, #8
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}
 8007a92:	bf00      	nop
 8007a94:	20000468 	.word	0x20000468
 8007a98:	080086cc 	.word	0x080086cc

08007a9c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b082      	sub	sp, #8
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	6039      	str	r1, [r7, #0]
 8007aa6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007aa8:	683a      	ldr	r2, [r7, #0]
 8007aaa:	4904      	ldr	r1, [pc, #16]	; (8007abc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007aac:	4804      	ldr	r0, [pc, #16]	; (8007ac0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007aae:	f7ff fec0 	bl	8007832 <USBD_GetString>
  return USBD_StrDesc;
 8007ab2:	4b02      	ldr	r3, [pc, #8]	; (8007abc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3708      	adds	r7, #8
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}
 8007abc:	20000468 	.word	0x20000468
 8007ac0:	080086e0 	.word	0x080086e0

08007ac4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	4603      	mov	r3, r0
 8007acc:	6039      	str	r1, [r7, #0]
 8007ace:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	221a      	movs	r2, #26
 8007ad4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007ad6:	f000 f855 	bl	8007b84 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007ada:	4b02      	ldr	r3, [pc, #8]	; (8007ae4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3708      	adds	r7, #8
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}
 8007ae4:	20000138 	.word	0x20000138

08007ae8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	4603      	mov	r3, r0
 8007af0:	6039      	str	r1, [r7, #0]
 8007af2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007af4:	79fb      	ldrb	r3, [r7, #7]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d105      	bne.n	8007b06 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007afa:	683a      	ldr	r2, [r7, #0]
 8007afc:	4907      	ldr	r1, [pc, #28]	; (8007b1c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007afe:	4808      	ldr	r0, [pc, #32]	; (8007b20 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b00:	f7ff fe97 	bl	8007832 <USBD_GetString>
 8007b04:	e004      	b.n	8007b10 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b06:	683a      	ldr	r2, [r7, #0]
 8007b08:	4904      	ldr	r1, [pc, #16]	; (8007b1c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b0a:	4805      	ldr	r0, [pc, #20]	; (8007b20 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b0c:	f7ff fe91 	bl	8007832 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b10:	4b02      	ldr	r3, [pc, #8]	; (8007b1c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3708      	adds	r7, #8
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop
 8007b1c:	20000468 	.word	0x20000468
 8007b20:	080086f4 	.word	0x080086f4

08007b24 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b082      	sub	sp, #8
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	6039      	str	r1, [r7, #0]
 8007b2e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007b30:	79fb      	ldrb	r3, [r7, #7]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d105      	bne.n	8007b42 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007b36:	683a      	ldr	r2, [r7, #0]
 8007b38:	4907      	ldr	r1, [pc, #28]	; (8007b58 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007b3a:	4808      	ldr	r0, [pc, #32]	; (8007b5c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007b3c:	f7ff fe79 	bl	8007832 <USBD_GetString>
 8007b40:	e004      	b.n	8007b4c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007b42:	683a      	ldr	r2, [r7, #0]
 8007b44:	4904      	ldr	r1, [pc, #16]	; (8007b58 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007b46:	4805      	ldr	r0, [pc, #20]	; (8007b5c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007b48:	f7ff fe73 	bl	8007832 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b4c:	4b02      	ldr	r3, [pc, #8]	; (8007b58 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3708      	adds	r7, #8
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
 8007b56:	bf00      	nop
 8007b58:	20000468 	.word	0x20000468
 8007b5c:	08008700 	.word	0x08008700

08007b60 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b083      	sub	sp, #12
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	4603      	mov	r3, r0
 8007b68:	6039      	str	r1, [r7, #0]
 8007b6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	220c      	movs	r2, #12
 8007b70:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8007b72:	4b03      	ldr	r3, [pc, #12]	; (8007b80 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	370c      	adds	r7, #12
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr
 8007b80:	20000128 	.word	0x20000128

08007b84 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b084      	sub	sp, #16
 8007b88:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007b8a:	4b0f      	ldr	r3, [pc, #60]	; (8007bc8 <Get_SerialNum+0x44>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007b90:	4b0e      	ldr	r3, [pc, #56]	; (8007bcc <Get_SerialNum+0x48>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007b96:	4b0e      	ldr	r3, [pc, #56]	; (8007bd0 <Get_SerialNum+0x4c>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007b9c:	68fa      	ldr	r2, [r7, #12]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	4413      	add	r3, r2
 8007ba2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d009      	beq.n	8007bbe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007baa:	2208      	movs	r2, #8
 8007bac:	4909      	ldr	r1, [pc, #36]	; (8007bd4 <Get_SerialNum+0x50>)
 8007bae:	68f8      	ldr	r0, [r7, #12]
 8007bb0:	f000 f814 	bl	8007bdc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007bb4:	2204      	movs	r2, #4
 8007bb6:	4908      	ldr	r1, [pc, #32]	; (8007bd8 <Get_SerialNum+0x54>)
 8007bb8:	68b8      	ldr	r0, [r7, #8]
 8007bba:	f000 f80f 	bl	8007bdc <IntToUnicode>
  }
}
 8007bbe:	bf00      	nop
 8007bc0:	3710      	adds	r7, #16
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}
 8007bc6:	bf00      	nop
 8007bc8:	1fff7590 	.word	0x1fff7590
 8007bcc:	1fff7594 	.word	0x1fff7594
 8007bd0:	1fff7598 	.word	0x1fff7598
 8007bd4:	2000013a 	.word	0x2000013a
 8007bd8:	2000014a 	.word	0x2000014a

08007bdc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b087      	sub	sp, #28
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	60f8      	str	r0, [r7, #12]
 8007be4:	60b9      	str	r1, [r7, #8]
 8007be6:	4613      	mov	r3, r2
 8007be8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007bea:	2300      	movs	r3, #0
 8007bec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007bee:	2300      	movs	r3, #0
 8007bf0:	75fb      	strb	r3, [r7, #23]
 8007bf2:	e027      	b.n	8007c44 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	0f1b      	lsrs	r3, r3, #28
 8007bf8:	2b09      	cmp	r3, #9
 8007bfa:	d80b      	bhi.n	8007c14 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	0f1b      	lsrs	r3, r3, #28
 8007c00:	b2da      	uxtb	r2, r3
 8007c02:	7dfb      	ldrb	r3, [r7, #23]
 8007c04:	005b      	lsls	r3, r3, #1
 8007c06:	4619      	mov	r1, r3
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	440b      	add	r3, r1
 8007c0c:	3230      	adds	r2, #48	; 0x30
 8007c0e:	b2d2      	uxtb	r2, r2
 8007c10:	701a      	strb	r2, [r3, #0]
 8007c12:	e00a      	b.n	8007c2a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	0f1b      	lsrs	r3, r3, #28
 8007c18:	b2da      	uxtb	r2, r3
 8007c1a:	7dfb      	ldrb	r3, [r7, #23]
 8007c1c:	005b      	lsls	r3, r3, #1
 8007c1e:	4619      	mov	r1, r3
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	440b      	add	r3, r1
 8007c24:	3237      	adds	r2, #55	; 0x37
 8007c26:	b2d2      	uxtb	r2, r2
 8007c28:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	011b      	lsls	r3, r3, #4
 8007c2e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007c30:	7dfb      	ldrb	r3, [r7, #23]
 8007c32:	005b      	lsls	r3, r3, #1
 8007c34:	3301      	adds	r3, #1
 8007c36:	68ba      	ldr	r2, [r7, #8]
 8007c38:	4413      	add	r3, r2
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007c3e:	7dfb      	ldrb	r3, [r7, #23]
 8007c40:	3301      	adds	r3, #1
 8007c42:	75fb      	strb	r3, [r7, #23]
 8007c44:	7dfa      	ldrb	r2, [r7, #23]
 8007c46:	79fb      	ldrb	r3, [r7, #7]
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d3d3      	bcc.n	8007bf4 <IntToUnicode+0x18>
  }
}
 8007c4c:	bf00      	nop
 8007c4e:	bf00      	nop
 8007c50:	371c      	adds	r7, #28
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr

08007c5a <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8007c5a:	b480      	push	{r7}
 8007c5c:	b083      	sub	sp, #12
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	4603      	mov	r3, r0
 8007c62:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8007c64:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	370c      	adds	r7, #12
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr

08007c72 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8007c72:	b480      	push	{r7}
 8007c74:	b085      	sub	sp, #20
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	4603      	mov	r3, r0
 8007c7a:	60b9      	str	r1, [r7, #8]
 8007c7c:	607a      	str	r2, [r7, #4]
 8007c7e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	2264      	movs	r2, #100	; 0x64
 8007c84:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c8c:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 8007c8e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3714      	adds	r7, #20
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr

08007c9c <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b083      	sub	sp, #12
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007ca6:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	370c      	adds	r7, #12
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr

08007cb4 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b083      	sub	sp, #12
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	4603      	mov	r3, r0
 8007cbc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8007cbe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	370c      	adds	r7, #12
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr

08007ccc <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	60b9      	str	r1, [r7, #8]
 8007cd4:	607a      	str	r2, [r7, #4]
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	4603      	mov	r3, r0
 8007cda:	73fb      	strb	r3, [r7, #15]
 8007cdc:	4613      	mov	r3, r2
 8007cde:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */

	memcpy(buf, &buffer[blk_addr*STORAGE_BLK_SIZ], blk_len*STORAGE_BLK_SIZ);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	025b      	lsls	r3, r3, #9
 8007ce4:	4a06      	ldr	r2, [pc, #24]	; (8007d00 <STORAGE_Read_FS+0x34>)
 8007ce6:	1899      	adds	r1, r3, r2
 8007ce8:	89bb      	ldrh	r3, [r7, #12]
 8007cea:	025b      	lsls	r3, r3, #9
 8007cec:	461a      	mov	r2, r3
 8007cee:	68b8      	ldr	r0, [r7, #8]
 8007cf0:	f000 fcca 	bl	8008688 <memcpy>

  return (USBD_OK);
 8007cf4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3710      	adds	r7, #16
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}
 8007cfe:	bf00      	nop
 8007d00:	20000668 	.word	0x20000668

08007d04 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b084      	sub	sp, #16
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	60b9      	str	r1, [r7, #8]
 8007d0c:	607a      	str	r2, [r7, #4]
 8007d0e:	461a      	mov	r2, r3
 8007d10:	4603      	mov	r3, r0
 8007d12:	73fb      	strb	r3, [r7, #15]
 8007d14:	4613      	mov	r3, r2
 8007d16:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */

    memcpy(&buffer[blk_addr*STORAGE_BLK_SIZ], buf, blk_len*STORAGE_BLK_SIZ);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	025b      	lsls	r3, r3, #9
 8007d1c:	4a06      	ldr	r2, [pc, #24]	; (8007d38 <STORAGE_Write_FS+0x34>)
 8007d1e:	1898      	adds	r0, r3, r2
 8007d20:	89bb      	ldrh	r3, [r7, #12]
 8007d22:	025b      	lsls	r3, r3, #9
 8007d24:	461a      	mov	r2, r3
 8007d26:	68b9      	ldr	r1, [r7, #8]
 8007d28:	f000 fcae 	bl	8008688 <memcpy>

  return (USBD_OK);
 8007d2c:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3710      	adds	r7, #16
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
 8007d36:	bf00      	nop
 8007d38:	20000668 	.word	0x20000668

08007d3c <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8007d40:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr

08007d4c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b0ac      	sub	sp, #176	; 0xb0
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d54:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8007d58:	2200      	movs	r2, #0
 8007d5a:	601a      	str	r2, [r3, #0]
 8007d5c:	605a      	str	r2, [r3, #4]
 8007d5e:	609a      	str	r2, [r3, #8]
 8007d60:	60da      	str	r2, [r3, #12]
 8007d62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007d64:	f107 0314 	add.w	r3, r7, #20
 8007d68:	2288      	movs	r2, #136	; 0x88
 8007d6a:	2100      	movs	r1, #0
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f000 fc99 	bl	80086a4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d7a:	d173      	bne.n	8007e64 <HAL_PCD_MspInit+0x118>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8007d7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007d80:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8007d82:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007d86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8007d8a:	2303      	movs	r3, #3
 8007d8c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 8007d92:	230c      	movs	r3, #12
 8007d94:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8007d96:	2307      	movs	r3, #7
 8007d98:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8007d9a:	2302      	movs	r3, #2
 8007d9c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8007d9e:	2302      	movs	r3, #2
 8007da0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8007da2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007da6:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007da8:	f107 0314 	add.w	r3, r7, #20
 8007dac:	4618      	mov	r0, r3
 8007dae:	f7fa feb3 	bl	8002b18 <HAL_RCCEx_PeriphCLKConfig>
 8007db2:	4603      	mov	r3, r0
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d001      	beq.n	8007dbc <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8007db8:	f7f8 fa84 	bl	80002c4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007dbc:	4b2b      	ldr	r3, [pc, #172]	; (8007e6c <HAL_PCD_MspInit+0x120>)
 8007dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dc0:	4a2a      	ldr	r2, [pc, #168]	; (8007e6c <HAL_PCD_MspInit+0x120>)
 8007dc2:	f043 0301 	orr.w	r3, r3, #1
 8007dc6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007dc8:	4b28      	ldr	r3, [pc, #160]	; (8007e6c <HAL_PCD_MspInit+0x120>)
 8007dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dcc:	f003 0301 	and.w	r3, r3, #1
 8007dd0:	613b      	str	r3, [r7, #16]
 8007dd2:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007dd4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007dd8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ddc:	2302      	movs	r3, #2
 8007dde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007de2:	2300      	movs	r3, #0
 8007de4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007de8:	2303      	movs	r3, #3
 8007dea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007dee:	230a      	movs	r3, #10
 8007df0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007df4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8007df8:	4619      	mov	r1, r3
 8007dfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007dfe:	f7f8 fcad 	bl	800075c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007e02:	4b1a      	ldr	r3, [pc, #104]	; (8007e6c <HAL_PCD_MspInit+0x120>)
 8007e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e06:	4a19      	ldr	r2, [pc, #100]	; (8007e6c <HAL_PCD_MspInit+0x120>)
 8007e08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007e0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007e0e:	4b17      	ldr	r3, [pc, #92]	; (8007e6c <HAL_PCD_MspInit+0x120>)
 8007e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e16:	60fb      	str	r3, [r7, #12]
 8007e18:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007e1a:	4b14      	ldr	r3, [pc, #80]	; (8007e6c <HAL_PCD_MspInit+0x120>)
 8007e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d114      	bne.n	8007e50 <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e26:	4b11      	ldr	r3, [pc, #68]	; (8007e6c <HAL_PCD_MspInit+0x120>)
 8007e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e2a:	4a10      	ldr	r2, [pc, #64]	; (8007e6c <HAL_PCD_MspInit+0x120>)
 8007e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e30:	6593      	str	r3, [r2, #88]	; 0x58
 8007e32:	4b0e      	ldr	r3, [pc, #56]	; (8007e6c <HAL_PCD_MspInit+0x120>)
 8007e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e3a:	60bb      	str	r3, [r7, #8]
 8007e3c:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8007e3e:	f7fa f887 	bl	8001f50 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e42:	4b0a      	ldr	r3, [pc, #40]	; (8007e6c <HAL_PCD_MspInit+0x120>)
 8007e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e46:	4a09      	ldr	r2, [pc, #36]	; (8007e6c <HAL_PCD_MspInit+0x120>)
 8007e48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e4c:	6593      	str	r3, [r2, #88]	; 0x58
 8007e4e:	e001      	b.n	8007e54 <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8007e50:	f7fa f87e 	bl	8001f50 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007e54:	2200      	movs	r2, #0
 8007e56:	2100      	movs	r1, #0
 8007e58:	2043      	movs	r0, #67	; 0x43
 8007e5a:	f7f8 fc48 	bl	80006ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007e5e:	2043      	movs	r0, #67	; 0x43
 8007e60:	f7f8 fc61 	bl	8000726 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007e64:	bf00      	nop
 8007e66:	37b0      	adds	r7, #176	; 0xb0
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}
 8007e6c:	40021000 	.word	0x40021000

08007e70 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b082      	sub	sp, #8
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007e84:	4619      	mov	r1, r3
 8007e86:	4610      	mov	r0, r2
 8007e88:	f7fe fcc3 	bl	8006812 <USBD_LL_SetupStage>
}
 8007e8c:	bf00      	nop
 8007e8e:	3708      	adds	r7, #8
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b082      	sub	sp, #8
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	460b      	mov	r3, r1
 8007e9e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007ea6:	78fa      	ldrb	r2, [r7, #3]
 8007ea8:	6879      	ldr	r1, [r7, #4]
 8007eaa:	4613      	mov	r3, r2
 8007eac:	00db      	lsls	r3, r3, #3
 8007eae:	4413      	add	r3, r2
 8007eb0:	009b      	lsls	r3, r3, #2
 8007eb2:	440b      	add	r3, r1
 8007eb4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	78fb      	ldrb	r3, [r7, #3]
 8007ebc:	4619      	mov	r1, r3
 8007ebe:	f7fe fcfd 	bl	80068bc <USBD_LL_DataOutStage>
}
 8007ec2:	bf00      	nop
 8007ec4:	3708      	adds	r7, #8
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}

08007eca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007eca:	b580      	push	{r7, lr}
 8007ecc:	b082      	sub	sp, #8
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	6078      	str	r0, [r7, #4]
 8007ed2:	460b      	mov	r3, r1
 8007ed4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007edc:	78fa      	ldrb	r2, [r7, #3]
 8007ede:	6879      	ldr	r1, [r7, #4]
 8007ee0:	4613      	mov	r3, r2
 8007ee2:	00db      	lsls	r3, r3, #3
 8007ee4:	4413      	add	r3, r2
 8007ee6:	009b      	lsls	r3, r3, #2
 8007ee8:	440b      	add	r3, r1
 8007eea:	334c      	adds	r3, #76	; 0x4c
 8007eec:	681a      	ldr	r2, [r3, #0]
 8007eee:	78fb      	ldrb	r3, [r7, #3]
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	f7fe fd46 	bl	8006982 <USBD_LL_DataInStage>
}
 8007ef6:	bf00      	nop
 8007ef8:	3708      	adds	r7, #8
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}

08007efe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007efe:	b580      	push	{r7, lr}
 8007f00:	b082      	sub	sp, #8
 8007f02:	af00      	add	r7, sp, #0
 8007f04:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f7fe fe5a 	bl	8006bc6 <USBD_LL_SOF>
}
 8007f12:	bf00      	nop
 8007f14:	3708      	adds	r7, #8
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}

08007f1a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f1a:	b580      	push	{r7, lr}
 8007f1c:	b084      	sub	sp, #16
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007f22:	2301      	movs	r3, #1
 8007f24:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	68db      	ldr	r3, [r3, #12]
 8007f2a:	2b02      	cmp	r3, #2
 8007f2c:	d001      	beq.n	8007f32 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007f2e:	f7f8 f9c9 	bl	80002c4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007f38:	7bfa      	ldrb	r2, [r7, #15]
 8007f3a:	4611      	mov	r1, r2
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f7fe fe04 	bl	8006b4a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f7fe fdb0 	bl	8006aae <USBD_LL_Reset>
}
 8007f4e:	bf00      	nop
 8007f50:	3710      	adds	r7, #16
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
	...

08007f58 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b082      	sub	sp, #8
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	6812      	ldr	r2, [r2, #0]
 8007f6e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007f72:	f043 0301 	orr.w	r3, r3, #1
 8007f76:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f7fe fdf3 	bl	8006b6a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6a1b      	ldr	r3, [r3, #32]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d005      	beq.n	8007f98 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007f8c:	4b04      	ldr	r3, [pc, #16]	; (8007fa0 <HAL_PCD_SuspendCallback+0x48>)
 8007f8e:	691b      	ldr	r3, [r3, #16]
 8007f90:	4a03      	ldr	r2, [pc, #12]	; (8007fa0 <HAL_PCD_SuspendCallback+0x48>)
 8007f92:	f043 0306 	orr.w	r3, r3, #6
 8007f96:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007f98:	bf00      	nop
 8007f9a:	3708      	adds	r7, #8
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}
 8007fa0:	e000ed00 	.word	0xe000ed00

08007fa4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b082      	sub	sp, #8
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	687a      	ldr	r2, [r7, #4]
 8007fb8:	6812      	ldr	r2, [r2, #0]
 8007fba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007fbe:	f023 0301 	bic.w	r3, r3, #1
 8007fc2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6a1b      	ldr	r3, [r3, #32]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d007      	beq.n	8007fdc <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007fcc:	4b08      	ldr	r3, [pc, #32]	; (8007ff0 <HAL_PCD_ResumeCallback+0x4c>)
 8007fce:	691b      	ldr	r3, [r3, #16]
 8007fd0:	4a07      	ldr	r2, [pc, #28]	; (8007ff0 <HAL_PCD_ResumeCallback+0x4c>)
 8007fd2:	f023 0306 	bic.w	r3, r3, #6
 8007fd6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8007fd8:	f000 fb2c 	bl	8008634 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f7fe fdd7 	bl	8006b96 <USBD_LL_Resume>
}
 8007fe8:	bf00      	nop
 8007fea:	3708      	adds	r7, #8
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}
 8007ff0:	e000ed00 	.word	0xe000ed00

08007ff4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b082      	sub	sp, #8
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008006:	78fa      	ldrb	r2, [r7, #3]
 8008008:	4611      	mov	r1, r2
 800800a:	4618      	mov	r0, r3
 800800c:	f7fe fe23 	bl	8006c56 <USBD_LL_IsoOUTIncomplete>
}
 8008010:	bf00      	nop
 8008012:	3708      	adds	r7, #8
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b082      	sub	sp, #8
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	460b      	mov	r3, r1
 8008022:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800802a:	78fa      	ldrb	r2, [r7, #3]
 800802c:	4611      	mov	r1, r2
 800802e:	4618      	mov	r0, r3
 8008030:	f7fe fdeb 	bl	8006c0a <USBD_LL_IsoINIncomplete>
}
 8008034:	bf00      	nop
 8008036:	3708      	adds	r7, #8
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b082      	sub	sp, #8
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800804a:	4618      	mov	r0, r3
 800804c:	f7fe fe29 	bl	8006ca2 <USBD_LL_DevConnected>
}
 8008050:	bf00      	nop
 8008052:	3708      	adds	r7, #8
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b082      	sub	sp, #8
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008066:	4618      	mov	r0, r3
 8008068:	f7fe fe26 	bl	8006cb8 <USBD_LL_DevDisconnected>
}
 800806c:	bf00      	nop
 800806e:	3708      	adds	r7, #8
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}

08008074 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b082      	sub	sp, #8
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d13c      	bne.n	80080fe <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008084:	4a20      	ldr	r2, [pc, #128]	; (8008108 <USBD_LL_Init+0x94>)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	4a1e      	ldr	r2, [pc, #120]	; (8008108 <USBD_LL_Init+0x94>)
 8008090:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008094:	4b1c      	ldr	r3, [pc, #112]	; (8008108 <USBD_LL_Init+0x94>)
 8008096:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800809a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800809c:	4b1a      	ldr	r3, [pc, #104]	; (8008108 <USBD_LL_Init+0x94>)
 800809e:	2206      	movs	r2, #6
 80080a0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80080a2:	4b19      	ldr	r3, [pc, #100]	; (8008108 <USBD_LL_Init+0x94>)
 80080a4:	2202      	movs	r2, #2
 80080a6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80080a8:	4b17      	ldr	r3, [pc, #92]	; (8008108 <USBD_LL_Init+0x94>)
 80080aa:	2202      	movs	r2, #2
 80080ac:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80080ae:	4b16      	ldr	r3, [pc, #88]	; (8008108 <USBD_LL_Init+0x94>)
 80080b0:	2200      	movs	r2, #0
 80080b2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80080b4:	4b14      	ldr	r3, [pc, #80]	; (8008108 <USBD_LL_Init+0x94>)
 80080b6:	2200      	movs	r2, #0
 80080b8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80080ba:	4b13      	ldr	r3, [pc, #76]	; (8008108 <USBD_LL_Init+0x94>)
 80080bc:	2200      	movs	r2, #0
 80080be:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80080c0:	4b11      	ldr	r3, [pc, #68]	; (8008108 <USBD_LL_Init+0x94>)
 80080c2:	2200      	movs	r2, #0
 80080c4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80080c6:	4b10      	ldr	r3, [pc, #64]	; (8008108 <USBD_LL_Init+0x94>)
 80080c8:	2200      	movs	r2, #0
 80080ca:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80080cc:	4b0e      	ldr	r3, [pc, #56]	; (8008108 <USBD_LL_Init+0x94>)
 80080ce:	2200      	movs	r2, #0
 80080d0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80080d2:	480d      	ldr	r0, [pc, #52]	; (8008108 <USBD_LL_Init+0x94>)
 80080d4:	f7f8 fcec 	bl	8000ab0 <HAL_PCD_Init>
 80080d8:	4603      	mov	r3, r0
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d001      	beq.n	80080e2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80080de:	f7f8 f8f1 	bl	80002c4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80080e2:	2180      	movs	r1, #128	; 0x80
 80080e4:	4808      	ldr	r0, [pc, #32]	; (8008108 <USBD_LL_Init+0x94>)
 80080e6:	f7f9 fe9a 	bl	8001e1e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80080ea:	2240      	movs	r2, #64	; 0x40
 80080ec:	2100      	movs	r1, #0
 80080ee:	4806      	ldr	r0, [pc, #24]	; (8008108 <USBD_LL_Init+0x94>)
 80080f0:	f7f9 fe4e 	bl	8001d90 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80080f4:	2280      	movs	r2, #128	; 0x80
 80080f6:	2101      	movs	r1, #1
 80080f8:	4803      	ldr	r0, [pc, #12]	; (8008108 <USBD_LL_Init+0x94>)
 80080fa:	f7f9 fe49 	bl	8001d90 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80080fe:	2300      	movs	r3, #0
}
 8008100:	4618      	mov	r0, r3
 8008102:	3708      	adds	r7, #8
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}
 8008108:	2000ce68 	.word	0x2000ce68

0800810c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008114:	2300      	movs	r3, #0
 8008116:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008118:	2300      	movs	r3, #0
 800811a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008122:	4618      	mov	r0, r3
 8008124:	f7f8 fde8 	bl	8000cf8 <HAL_PCD_Start>
 8008128:	4603      	mov	r3, r0
 800812a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800812c:	7bbb      	ldrb	r3, [r7, #14]
 800812e:	2b03      	cmp	r3, #3
 8008130:	d816      	bhi.n	8008160 <USBD_LL_Start+0x54>
 8008132:	a201      	add	r2, pc, #4	; (adr r2, 8008138 <USBD_LL_Start+0x2c>)
 8008134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008138:	08008149 	.word	0x08008149
 800813c:	0800814f 	.word	0x0800814f
 8008140:	08008155 	.word	0x08008155
 8008144:	0800815b 	.word	0x0800815b
    case HAL_OK :
      usb_status = USBD_OK;
 8008148:	2300      	movs	r3, #0
 800814a:	73fb      	strb	r3, [r7, #15]
    break;
 800814c:	e00b      	b.n	8008166 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800814e:	2303      	movs	r3, #3
 8008150:	73fb      	strb	r3, [r7, #15]
    break;
 8008152:	e008      	b.n	8008166 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008154:	2301      	movs	r3, #1
 8008156:	73fb      	strb	r3, [r7, #15]
    break;
 8008158:	e005      	b.n	8008166 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800815a:	2303      	movs	r3, #3
 800815c:	73fb      	strb	r3, [r7, #15]
    break;
 800815e:	e002      	b.n	8008166 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8008160:	2303      	movs	r3, #3
 8008162:	73fb      	strb	r3, [r7, #15]
    break;
 8008164:	bf00      	nop
  }
  return usb_status;
 8008166:	7bfb      	ldrb	r3, [r7, #15]
}
 8008168:	4618      	mov	r0, r3
 800816a:	3710      	adds	r7, #16
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b084      	sub	sp, #16
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	4608      	mov	r0, r1
 800817a:	4611      	mov	r1, r2
 800817c:	461a      	mov	r2, r3
 800817e:	4603      	mov	r3, r0
 8008180:	70fb      	strb	r3, [r7, #3]
 8008182:	460b      	mov	r3, r1
 8008184:	70bb      	strb	r3, [r7, #2]
 8008186:	4613      	mov	r3, r2
 8008188:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800818a:	2300      	movs	r3, #0
 800818c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800818e:	2300      	movs	r3, #0
 8008190:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008198:	78bb      	ldrb	r3, [r7, #2]
 800819a:	883a      	ldrh	r2, [r7, #0]
 800819c:	78f9      	ldrb	r1, [r7, #3]
 800819e:	f7f9 fa92 	bl	80016c6 <HAL_PCD_EP_Open>
 80081a2:	4603      	mov	r3, r0
 80081a4:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80081a6:	7bbb      	ldrb	r3, [r7, #14]
 80081a8:	2b03      	cmp	r3, #3
 80081aa:	d817      	bhi.n	80081dc <USBD_LL_OpenEP+0x6c>
 80081ac:	a201      	add	r2, pc, #4	; (adr r2, 80081b4 <USBD_LL_OpenEP+0x44>)
 80081ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081b2:	bf00      	nop
 80081b4:	080081c5 	.word	0x080081c5
 80081b8:	080081cb 	.word	0x080081cb
 80081bc:	080081d1 	.word	0x080081d1
 80081c0:	080081d7 	.word	0x080081d7
    case HAL_OK :
      usb_status = USBD_OK;
 80081c4:	2300      	movs	r3, #0
 80081c6:	73fb      	strb	r3, [r7, #15]
    break;
 80081c8:	e00b      	b.n	80081e2 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80081ca:	2303      	movs	r3, #3
 80081cc:	73fb      	strb	r3, [r7, #15]
    break;
 80081ce:	e008      	b.n	80081e2 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80081d0:	2301      	movs	r3, #1
 80081d2:	73fb      	strb	r3, [r7, #15]
    break;
 80081d4:	e005      	b.n	80081e2 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80081d6:	2303      	movs	r3, #3
 80081d8:	73fb      	strb	r3, [r7, #15]
    break;
 80081da:	e002      	b.n	80081e2 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 80081dc:	2303      	movs	r3, #3
 80081de:	73fb      	strb	r3, [r7, #15]
    break;
 80081e0:	bf00      	nop
  }
  return usb_status;
 80081e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3710      	adds	r7, #16
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}

080081ec <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b084      	sub	sp, #16
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	460b      	mov	r3, r1
 80081f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081f8:	2300      	movs	r3, #0
 80081fa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081fc:	2300      	movs	r3, #0
 80081fe:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008206:	78fa      	ldrb	r2, [r7, #3]
 8008208:	4611      	mov	r1, r2
 800820a:	4618      	mov	r0, r3
 800820c:	f7f9 fac3 	bl	8001796 <HAL_PCD_EP_Close>
 8008210:	4603      	mov	r3, r0
 8008212:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008214:	7bbb      	ldrb	r3, [r7, #14]
 8008216:	2b03      	cmp	r3, #3
 8008218:	d816      	bhi.n	8008248 <USBD_LL_CloseEP+0x5c>
 800821a:	a201      	add	r2, pc, #4	; (adr r2, 8008220 <USBD_LL_CloseEP+0x34>)
 800821c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008220:	08008231 	.word	0x08008231
 8008224:	08008237 	.word	0x08008237
 8008228:	0800823d 	.word	0x0800823d
 800822c:	08008243 	.word	0x08008243
    case HAL_OK :
      usb_status = USBD_OK;
 8008230:	2300      	movs	r3, #0
 8008232:	73fb      	strb	r3, [r7, #15]
    break;
 8008234:	e00b      	b.n	800824e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008236:	2303      	movs	r3, #3
 8008238:	73fb      	strb	r3, [r7, #15]
    break;
 800823a:	e008      	b.n	800824e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800823c:	2301      	movs	r3, #1
 800823e:	73fb      	strb	r3, [r7, #15]
    break;
 8008240:	e005      	b.n	800824e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008242:	2303      	movs	r3, #3
 8008244:	73fb      	strb	r3, [r7, #15]
    break;
 8008246:	e002      	b.n	800824e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008248:	2303      	movs	r3, #3
 800824a:	73fb      	strb	r3, [r7, #15]
    break;
 800824c:	bf00      	nop
  }
  return usb_status;
 800824e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008250:	4618      	mov	r0, r3
 8008252:	3710      	adds	r7, #16
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}

08008258 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b084      	sub	sp, #16
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	460b      	mov	r3, r1
 8008262:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008264:	2300      	movs	r3, #0
 8008266:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008268:	2300      	movs	r3, #0
 800826a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008272:	78fa      	ldrb	r2, [r7, #3]
 8008274:	4611      	mov	r1, r2
 8008276:	4618      	mov	r0, r3
 8008278:	f7f9 fc53 	bl	8001b22 <HAL_PCD_EP_Flush>
 800827c:	4603      	mov	r3, r0
 800827e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008280:	7bbb      	ldrb	r3, [r7, #14]
 8008282:	2b03      	cmp	r3, #3
 8008284:	d816      	bhi.n	80082b4 <USBD_LL_FlushEP+0x5c>
 8008286:	a201      	add	r2, pc, #4	; (adr r2, 800828c <USBD_LL_FlushEP+0x34>)
 8008288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800828c:	0800829d 	.word	0x0800829d
 8008290:	080082a3 	.word	0x080082a3
 8008294:	080082a9 	.word	0x080082a9
 8008298:	080082af 	.word	0x080082af
    case HAL_OK :
      usb_status = USBD_OK;
 800829c:	2300      	movs	r3, #0
 800829e:	73fb      	strb	r3, [r7, #15]
    break;
 80082a0:	e00b      	b.n	80082ba <USBD_LL_FlushEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80082a2:	2303      	movs	r3, #3
 80082a4:	73fb      	strb	r3, [r7, #15]
    break;
 80082a6:	e008      	b.n	80082ba <USBD_LL_FlushEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80082a8:	2301      	movs	r3, #1
 80082aa:	73fb      	strb	r3, [r7, #15]
    break;
 80082ac:	e005      	b.n	80082ba <USBD_LL_FlushEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80082ae:	2303      	movs	r3, #3
 80082b0:	73fb      	strb	r3, [r7, #15]
    break;
 80082b2:	e002      	b.n	80082ba <USBD_LL_FlushEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80082b4:	2303      	movs	r3, #3
 80082b6:	73fb      	strb	r3, [r7, #15]
    break;
 80082b8:	bf00      	nop
  }
  return usb_status;
 80082ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3710      	adds	r7, #16
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b084      	sub	sp, #16
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	460b      	mov	r3, r1
 80082ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082d0:	2300      	movs	r3, #0
 80082d2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082d4:	2300      	movs	r3, #0
 80082d6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80082de:	78fa      	ldrb	r2, [r7, #3]
 80082e0:	4611      	mov	r1, r2
 80082e2:	4618      	mov	r0, r3
 80082e4:	f7f9 fb34 	bl	8001950 <HAL_PCD_EP_SetStall>
 80082e8:	4603      	mov	r3, r0
 80082ea:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80082ec:	7bbb      	ldrb	r3, [r7, #14]
 80082ee:	2b03      	cmp	r3, #3
 80082f0:	d816      	bhi.n	8008320 <USBD_LL_StallEP+0x5c>
 80082f2:	a201      	add	r2, pc, #4	; (adr r2, 80082f8 <USBD_LL_StallEP+0x34>)
 80082f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f8:	08008309 	.word	0x08008309
 80082fc:	0800830f 	.word	0x0800830f
 8008300:	08008315 	.word	0x08008315
 8008304:	0800831b 	.word	0x0800831b
    case HAL_OK :
      usb_status = USBD_OK;
 8008308:	2300      	movs	r3, #0
 800830a:	73fb      	strb	r3, [r7, #15]
    break;
 800830c:	e00b      	b.n	8008326 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800830e:	2303      	movs	r3, #3
 8008310:	73fb      	strb	r3, [r7, #15]
    break;
 8008312:	e008      	b.n	8008326 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008314:	2301      	movs	r3, #1
 8008316:	73fb      	strb	r3, [r7, #15]
    break;
 8008318:	e005      	b.n	8008326 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800831a:	2303      	movs	r3, #3
 800831c:	73fb      	strb	r3, [r7, #15]
    break;
 800831e:	e002      	b.n	8008326 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008320:	2303      	movs	r3, #3
 8008322:	73fb      	strb	r3, [r7, #15]
    break;
 8008324:	bf00      	nop
  }
  return usb_status;
 8008326:	7bfb      	ldrb	r3, [r7, #15]
}
 8008328:	4618      	mov	r0, r3
 800832a:	3710      	adds	r7, #16
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}

08008330 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b084      	sub	sp, #16
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	460b      	mov	r3, r1
 800833a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800833c:	2300      	movs	r3, #0
 800833e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008340:	2300      	movs	r3, #0
 8008342:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800834a:	78fa      	ldrb	r2, [r7, #3]
 800834c:	4611      	mov	r1, r2
 800834e:	4618      	mov	r0, r3
 8008350:	f7f9 fb60 	bl	8001a14 <HAL_PCD_EP_ClrStall>
 8008354:	4603      	mov	r3, r0
 8008356:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008358:	7bbb      	ldrb	r3, [r7, #14]
 800835a:	2b03      	cmp	r3, #3
 800835c:	d816      	bhi.n	800838c <USBD_LL_ClearStallEP+0x5c>
 800835e:	a201      	add	r2, pc, #4	; (adr r2, 8008364 <USBD_LL_ClearStallEP+0x34>)
 8008360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008364:	08008375 	.word	0x08008375
 8008368:	0800837b 	.word	0x0800837b
 800836c:	08008381 	.word	0x08008381
 8008370:	08008387 	.word	0x08008387
    case HAL_OK :
      usb_status = USBD_OK;
 8008374:	2300      	movs	r3, #0
 8008376:	73fb      	strb	r3, [r7, #15]
    break;
 8008378:	e00b      	b.n	8008392 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800837a:	2303      	movs	r3, #3
 800837c:	73fb      	strb	r3, [r7, #15]
    break;
 800837e:	e008      	b.n	8008392 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008380:	2301      	movs	r3, #1
 8008382:	73fb      	strb	r3, [r7, #15]
    break;
 8008384:	e005      	b.n	8008392 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008386:	2303      	movs	r3, #3
 8008388:	73fb      	strb	r3, [r7, #15]
    break;
 800838a:	e002      	b.n	8008392 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800838c:	2303      	movs	r3, #3
 800838e:	73fb      	strb	r3, [r7, #15]
    break;
 8008390:	bf00      	nop
  }
  return usb_status;
 8008392:	7bfb      	ldrb	r3, [r7, #15]
}
 8008394:	4618      	mov	r0, r3
 8008396:	3710      	adds	r7, #16
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}

0800839c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800839c:	b480      	push	{r7}
 800839e:	b085      	sub	sp, #20
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
 80083a4:	460b      	mov	r3, r1
 80083a6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80083ae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80083b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	da0b      	bge.n	80083d0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80083b8:	78fb      	ldrb	r3, [r7, #3]
 80083ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083be:	68f9      	ldr	r1, [r7, #12]
 80083c0:	4613      	mov	r3, r2
 80083c2:	00db      	lsls	r3, r3, #3
 80083c4:	4413      	add	r3, r2
 80083c6:	009b      	lsls	r3, r3, #2
 80083c8:	440b      	add	r3, r1
 80083ca:	333e      	adds	r3, #62	; 0x3e
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	e00b      	b.n	80083e8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80083d0:	78fb      	ldrb	r3, [r7, #3]
 80083d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083d6:	68f9      	ldr	r1, [r7, #12]
 80083d8:	4613      	mov	r3, r2
 80083da:	00db      	lsls	r3, r3, #3
 80083dc:	4413      	add	r3, r2
 80083de:	009b      	lsls	r3, r3, #2
 80083e0:	440b      	add	r3, r1
 80083e2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80083e6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3714      	adds	r7, #20
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr

080083f4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	460b      	mov	r3, r1
 80083fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008400:	2300      	movs	r3, #0
 8008402:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008404:	2300      	movs	r3, #0
 8008406:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800840e:	78fa      	ldrb	r2, [r7, #3]
 8008410:	4611      	mov	r1, r2
 8008412:	4618      	mov	r0, r3
 8008414:	f7f9 f932 	bl	800167c <HAL_PCD_SetAddress>
 8008418:	4603      	mov	r3, r0
 800841a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800841c:	7bbb      	ldrb	r3, [r7, #14]
 800841e:	2b03      	cmp	r3, #3
 8008420:	d816      	bhi.n	8008450 <USBD_LL_SetUSBAddress+0x5c>
 8008422:	a201      	add	r2, pc, #4	; (adr r2, 8008428 <USBD_LL_SetUSBAddress+0x34>)
 8008424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008428:	08008439 	.word	0x08008439
 800842c:	0800843f 	.word	0x0800843f
 8008430:	08008445 	.word	0x08008445
 8008434:	0800844b 	.word	0x0800844b
    case HAL_OK :
      usb_status = USBD_OK;
 8008438:	2300      	movs	r3, #0
 800843a:	73fb      	strb	r3, [r7, #15]
    break;
 800843c:	e00b      	b.n	8008456 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800843e:	2303      	movs	r3, #3
 8008440:	73fb      	strb	r3, [r7, #15]
    break;
 8008442:	e008      	b.n	8008456 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008444:	2301      	movs	r3, #1
 8008446:	73fb      	strb	r3, [r7, #15]
    break;
 8008448:	e005      	b.n	8008456 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800844a:	2303      	movs	r3, #3
 800844c:	73fb      	strb	r3, [r7, #15]
    break;
 800844e:	e002      	b.n	8008456 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8008450:	2303      	movs	r3, #3
 8008452:	73fb      	strb	r3, [r7, #15]
    break;
 8008454:	bf00      	nop
  }
  return usb_status;
 8008456:	7bfb      	ldrb	r3, [r7, #15]
}
 8008458:	4618      	mov	r0, r3
 800845a:	3710      	adds	r7, #16
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}

08008460 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b086      	sub	sp, #24
 8008464:	af00      	add	r7, sp, #0
 8008466:	60f8      	str	r0, [r7, #12]
 8008468:	607a      	str	r2, [r7, #4]
 800846a:	603b      	str	r3, [r7, #0]
 800846c:	460b      	mov	r3, r1
 800846e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008470:	2300      	movs	r3, #0
 8008472:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008474:	2300      	movs	r3, #0
 8008476:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800847e:	7af9      	ldrb	r1, [r7, #11]
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	687a      	ldr	r2, [r7, #4]
 8008484:	f7f9 fa27 	bl	80018d6 <HAL_PCD_EP_Transmit>
 8008488:	4603      	mov	r3, r0
 800848a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800848c:	7dbb      	ldrb	r3, [r7, #22]
 800848e:	2b03      	cmp	r3, #3
 8008490:	d816      	bhi.n	80084c0 <USBD_LL_Transmit+0x60>
 8008492:	a201      	add	r2, pc, #4	; (adr r2, 8008498 <USBD_LL_Transmit+0x38>)
 8008494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008498:	080084a9 	.word	0x080084a9
 800849c:	080084af 	.word	0x080084af
 80084a0:	080084b5 	.word	0x080084b5
 80084a4:	080084bb 	.word	0x080084bb
    case HAL_OK :
      usb_status = USBD_OK;
 80084a8:	2300      	movs	r3, #0
 80084aa:	75fb      	strb	r3, [r7, #23]
    break;
 80084ac:	e00b      	b.n	80084c6 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80084ae:	2303      	movs	r3, #3
 80084b0:	75fb      	strb	r3, [r7, #23]
    break;
 80084b2:	e008      	b.n	80084c6 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80084b4:	2301      	movs	r3, #1
 80084b6:	75fb      	strb	r3, [r7, #23]
    break;
 80084b8:	e005      	b.n	80084c6 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80084ba:	2303      	movs	r3, #3
 80084bc:	75fb      	strb	r3, [r7, #23]
    break;
 80084be:	e002      	b.n	80084c6 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 80084c0:	2303      	movs	r3, #3
 80084c2:	75fb      	strb	r3, [r7, #23]
    break;
 80084c4:	bf00      	nop
  }
  return usb_status;
 80084c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3718      	adds	r7, #24
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}

080084d0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b086      	sub	sp, #24
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	60f8      	str	r0, [r7, #12]
 80084d8:	607a      	str	r2, [r7, #4]
 80084da:	603b      	str	r3, [r7, #0]
 80084dc:	460b      	mov	r3, r1
 80084de:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084e0:	2300      	movs	r3, #0
 80084e2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084e4:	2300      	movs	r3, #0
 80084e6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80084ee:	7af9      	ldrb	r1, [r7, #11]
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	687a      	ldr	r2, [r7, #4]
 80084f4:	f7f9 f999 	bl	800182a <HAL_PCD_EP_Receive>
 80084f8:	4603      	mov	r3, r0
 80084fa:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80084fc:	7dbb      	ldrb	r3, [r7, #22]
 80084fe:	2b03      	cmp	r3, #3
 8008500:	d816      	bhi.n	8008530 <USBD_LL_PrepareReceive+0x60>
 8008502:	a201      	add	r2, pc, #4	; (adr r2, 8008508 <USBD_LL_PrepareReceive+0x38>)
 8008504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008508:	08008519 	.word	0x08008519
 800850c:	0800851f 	.word	0x0800851f
 8008510:	08008525 	.word	0x08008525
 8008514:	0800852b 	.word	0x0800852b
    case HAL_OK :
      usb_status = USBD_OK;
 8008518:	2300      	movs	r3, #0
 800851a:	75fb      	strb	r3, [r7, #23]
    break;
 800851c:	e00b      	b.n	8008536 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800851e:	2303      	movs	r3, #3
 8008520:	75fb      	strb	r3, [r7, #23]
    break;
 8008522:	e008      	b.n	8008536 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008524:	2301      	movs	r3, #1
 8008526:	75fb      	strb	r3, [r7, #23]
    break;
 8008528:	e005      	b.n	8008536 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800852a:	2303      	movs	r3, #3
 800852c:	75fb      	strb	r3, [r7, #23]
    break;
 800852e:	e002      	b.n	8008536 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8008530:	2303      	movs	r3, #3
 8008532:	75fb      	strb	r3, [r7, #23]
    break;
 8008534:	bf00      	nop
  }
  return usb_status;
 8008536:	7dfb      	ldrb	r3, [r7, #23]
}
 8008538:	4618      	mov	r0, r3
 800853a:	3718      	adds	r7, #24
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}

08008540 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b082      	sub	sp, #8
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	460b      	mov	r3, r1
 800854a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008552:	78fa      	ldrb	r2, [r7, #3]
 8008554:	4611      	mov	r1, r2
 8008556:	4618      	mov	r0, r3
 8008558:	f7f9 f9a5 	bl	80018a6 <HAL_PCD_EP_GetRxCount>
 800855c:	4603      	mov	r3, r0
}
 800855e:	4618      	mov	r0, r3
 8008560:	3708      	adds	r7, #8
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}
	...

08008568 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b082      	sub	sp, #8
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	460b      	mov	r3, r1
 8008572:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008574:	78fb      	ldrb	r3, [r7, #3]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d002      	beq.n	8008580 <HAL_PCDEx_LPM_Callback+0x18>
 800857a:	2b01      	cmp	r3, #1
 800857c:	d01f      	beq.n	80085be <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800857e:	e03b      	b.n	80085f8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6a1b      	ldr	r3, [r3, #32]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d007      	beq.n	8008598 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8008588:	f000 f854 	bl	8008634 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800858c:	4b1c      	ldr	r3, [pc, #112]	; (8008600 <HAL_PCDEx_LPM_Callback+0x98>)
 800858e:	691b      	ldr	r3, [r3, #16]
 8008590:	4a1b      	ldr	r2, [pc, #108]	; (8008600 <HAL_PCDEx_LPM_Callback+0x98>)
 8008592:	f023 0306 	bic.w	r3, r3, #6
 8008596:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	687a      	ldr	r2, [r7, #4]
 80085a4:	6812      	ldr	r2, [r2, #0]
 80085a6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80085aa:	f023 0301 	bic.w	r3, r3, #1
 80085ae:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80085b6:	4618      	mov	r0, r3
 80085b8:	f7fe faed 	bl	8006b96 <USBD_LL_Resume>
    break;
 80085bc:	e01c      	b.n	80085f8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	687a      	ldr	r2, [r7, #4]
 80085ca:	6812      	ldr	r2, [r2, #0]
 80085cc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80085d0:	f043 0301 	orr.w	r3, r3, #1
 80085d4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80085dc:	4618      	mov	r0, r3
 80085de:	f7fe fac4 	bl	8006b6a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6a1b      	ldr	r3, [r3, #32]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d005      	beq.n	80085f6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80085ea:	4b05      	ldr	r3, [pc, #20]	; (8008600 <HAL_PCDEx_LPM_Callback+0x98>)
 80085ec:	691b      	ldr	r3, [r3, #16]
 80085ee:	4a04      	ldr	r2, [pc, #16]	; (8008600 <HAL_PCDEx_LPM_Callback+0x98>)
 80085f0:	f043 0306 	orr.w	r3, r3, #6
 80085f4:	6113      	str	r3, [r2, #16]
    break;
 80085f6:	bf00      	nop
}
 80085f8:	bf00      	nop
 80085fa:	3708      	adds	r7, #8
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}
 8008600:	e000ed00 	.word	0xe000ed00

08008604 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008604:	b480      	push	{r7}
 8008606:	b083      	sub	sp, #12
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800860c:	4b03      	ldr	r3, [pc, #12]	; (800861c <USBD_static_malloc+0x18>)
}
 800860e:	4618      	mov	r0, r3
 8008610:	370c      	adds	r7, #12
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr
 800861a:	bf00      	nop
 800861c:	2000d374 	.word	0x2000d374

08008620 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008620:	b480      	push	{r7}
 8008622:	b083      	sub	sp, #12
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]

}
 8008628:	bf00      	nop
 800862a:	370c      	adds	r7, #12
 800862c:	46bd      	mov	sp, r7
 800862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008632:	4770      	bx	lr

08008634 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8008638:	f7f7 fdd1 	bl	80001de <SystemClock_Config>
}
 800863c:	bf00      	nop
 800863e:	bd80      	pop	{r7, pc}

08008640 <__libc_init_array>:
 8008640:	b570      	push	{r4, r5, r6, lr}
 8008642:	4d0d      	ldr	r5, [pc, #52]	; (8008678 <__libc_init_array+0x38>)
 8008644:	4c0d      	ldr	r4, [pc, #52]	; (800867c <__libc_init_array+0x3c>)
 8008646:	1b64      	subs	r4, r4, r5
 8008648:	10a4      	asrs	r4, r4, #2
 800864a:	2600      	movs	r6, #0
 800864c:	42a6      	cmp	r6, r4
 800864e:	d109      	bne.n	8008664 <__libc_init_array+0x24>
 8008650:	4d0b      	ldr	r5, [pc, #44]	; (8008680 <__libc_init_array+0x40>)
 8008652:	4c0c      	ldr	r4, [pc, #48]	; (8008684 <__libc_init_array+0x44>)
 8008654:	f000 f82e 	bl	80086b4 <_init>
 8008658:	1b64      	subs	r4, r4, r5
 800865a:	10a4      	asrs	r4, r4, #2
 800865c:	2600      	movs	r6, #0
 800865e:	42a6      	cmp	r6, r4
 8008660:	d105      	bne.n	800866e <__libc_init_array+0x2e>
 8008662:	bd70      	pop	{r4, r5, r6, pc}
 8008664:	f855 3b04 	ldr.w	r3, [r5], #4
 8008668:	4798      	blx	r3
 800866a:	3601      	adds	r6, #1
 800866c:	e7ee      	b.n	800864c <__libc_init_array+0xc>
 800866e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008672:	4798      	blx	r3
 8008674:	3601      	adds	r6, #1
 8008676:	e7f2      	b.n	800865e <__libc_init_array+0x1e>
 8008678:	08008774 	.word	0x08008774
 800867c:	08008774 	.word	0x08008774
 8008680:	08008774 	.word	0x08008774
 8008684:	08008778 	.word	0x08008778

08008688 <memcpy>:
 8008688:	440a      	add	r2, r1
 800868a:	4291      	cmp	r1, r2
 800868c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008690:	d100      	bne.n	8008694 <memcpy+0xc>
 8008692:	4770      	bx	lr
 8008694:	b510      	push	{r4, lr}
 8008696:	f811 4b01 	ldrb.w	r4, [r1], #1
 800869a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800869e:	4291      	cmp	r1, r2
 80086a0:	d1f9      	bne.n	8008696 <memcpy+0xe>
 80086a2:	bd10      	pop	{r4, pc}

080086a4 <memset>:
 80086a4:	4402      	add	r2, r0
 80086a6:	4603      	mov	r3, r0
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d100      	bne.n	80086ae <memset+0xa>
 80086ac:	4770      	bx	lr
 80086ae:	f803 1b01 	strb.w	r1, [r3], #1
 80086b2:	e7f9      	b.n	80086a8 <memset+0x4>

080086b4 <_init>:
 80086b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086b6:	bf00      	nop
 80086b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086ba:	bc08      	pop	{r3}
 80086bc:	469e      	mov	lr, r3
 80086be:	4770      	bx	lr

080086c0 <_fini>:
 80086c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086c2:	bf00      	nop
 80086c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086c6:	bc08      	pop	{r3}
 80086c8:	469e      	mov	lr, r3
 80086ca:	4770      	bx	lr
