
07_USB_MSC_Device_L0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000904c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000027c  0800910c  0800910c  0001910c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009388  08009388  00020120  2**0
                  CONTENTS
  4 .ARM          00000008  08009388  08009388  00019388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009390  08009390  00020120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009390  08009390  00019390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009394  08009394  00019394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000120  20000000  08009398  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c64  20000120  080094b8  00020120  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d84  080094b8  00020d84  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ea5a  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003338  00000000  00000000  0002eba2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb0  00000000  00000000  00031ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b20  00000000  00000000  00032b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016fa5  00000000  00000000  000336b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011b2f  00000000  00000000  0004a655  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00078735  00000000  00000000  0005c184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d48b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b28  00000000  00000000  000d490c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000120 	.word	0x20000120
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080090f4 	.word	0x080090f4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000124 	.word	0x20000124
 8000104:	080090f4 	.word	0x080090f4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	; (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	; (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f834 	bl	80002cc <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__aeabi_lmul>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	46ce      	mov	lr, r9
 8000274:	4647      	mov	r7, r8
 8000276:	b580      	push	{r7, lr}
 8000278:	0007      	movs	r7, r0
 800027a:	4699      	mov	r9, r3
 800027c:	0c3b      	lsrs	r3, r7, #16
 800027e:	469c      	mov	ip, r3
 8000280:	0413      	lsls	r3, r2, #16
 8000282:	0c1b      	lsrs	r3, r3, #16
 8000284:	001d      	movs	r5, r3
 8000286:	000e      	movs	r6, r1
 8000288:	4661      	mov	r1, ip
 800028a:	0400      	lsls	r0, r0, #16
 800028c:	0c14      	lsrs	r4, r2, #16
 800028e:	0c00      	lsrs	r0, r0, #16
 8000290:	4345      	muls	r5, r0
 8000292:	434b      	muls	r3, r1
 8000294:	4360      	muls	r0, r4
 8000296:	4361      	muls	r1, r4
 8000298:	18c0      	adds	r0, r0, r3
 800029a:	0c2c      	lsrs	r4, r5, #16
 800029c:	1820      	adds	r0, r4, r0
 800029e:	468c      	mov	ip, r1
 80002a0:	4283      	cmp	r3, r0
 80002a2:	d903      	bls.n	80002ac <__aeabi_lmul+0x3c>
 80002a4:	2380      	movs	r3, #128	; 0x80
 80002a6:	025b      	lsls	r3, r3, #9
 80002a8:	4698      	mov	r8, r3
 80002aa:	44c4      	add	ip, r8
 80002ac:	4649      	mov	r1, r9
 80002ae:	4379      	muls	r1, r7
 80002b0:	4372      	muls	r2, r6
 80002b2:	0c03      	lsrs	r3, r0, #16
 80002b4:	4463      	add	r3, ip
 80002b6:	042d      	lsls	r5, r5, #16
 80002b8:	0c2d      	lsrs	r5, r5, #16
 80002ba:	18c9      	adds	r1, r1, r3
 80002bc:	0400      	lsls	r0, r0, #16
 80002be:	1940      	adds	r0, r0, r5
 80002c0:	1889      	adds	r1, r1, r2
 80002c2:	bcc0      	pop	{r6, r7}
 80002c4:	46b9      	mov	r9, r7
 80002c6:	46b0      	mov	r8, r6
 80002c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ca:	46c0      	nop			; (mov r8, r8)

080002cc <__udivmoddi4>:
 80002cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ce:	4657      	mov	r7, sl
 80002d0:	464e      	mov	r6, r9
 80002d2:	4645      	mov	r5, r8
 80002d4:	46de      	mov	lr, fp
 80002d6:	b5e0      	push	{r5, r6, r7, lr}
 80002d8:	0004      	movs	r4, r0
 80002da:	000d      	movs	r5, r1
 80002dc:	4692      	mov	sl, r2
 80002de:	4699      	mov	r9, r3
 80002e0:	b083      	sub	sp, #12
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d830      	bhi.n	8000348 <__udivmoddi4+0x7c>
 80002e6:	d02d      	beq.n	8000344 <__udivmoddi4+0x78>
 80002e8:	4649      	mov	r1, r9
 80002ea:	4650      	mov	r0, sl
 80002ec:	f000 f8ba 	bl	8000464 <__clzdi2>
 80002f0:	0029      	movs	r1, r5
 80002f2:	0006      	movs	r6, r0
 80002f4:	0020      	movs	r0, r4
 80002f6:	f000 f8b5 	bl	8000464 <__clzdi2>
 80002fa:	1a33      	subs	r3, r6, r0
 80002fc:	4698      	mov	r8, r3
 80002fe:	3b20      	subs	r3, #32
 8000300:	469b      	mov	fp, r3
 8000302:	d433      	bmi.n	800036c <__udivmoddi4+0xa0>
 8000304:	465a      	mov	r2, fp
 8000306:	4653      	mov	r3, sl
 8000308:	4093      	lsls	r3, r2
 800030a:	4642      	mov	r2, r8
 800030c:	001f      	movs	r7, r3
 800030e:	4653      	mov	r3, sl
 8000310:	4093      	lsls	r3, r2
 8000312:	001e      	movs	r6, r3
 8000314:	42af      	cmp	r7, r5
 8000316:	d83a      	bhi.n	800038e <__udivmoddi4+0xc2>
 8000318:	42af      	cmp	r7, r5
 800031a:	d100      	bne.n	800031e <__udivmoddi4+0x52>
 800031c:	e078      	b.n	8000410 <__udivmoddi4+0x144>
 800031e:	465b      	mov	r3, fp
 8000320:	1ba4      	subs	r4, r4, r6
 8000322:	41bd      	sbcs	r5, r7
 8000324:	2b00      	cmp	r3, #0
 8000326:	da00      	bge.n	800032a <__udivmoddi4+0x5e>
 8000328:	e075      	b.n	8000416 <__udivmoddi4+0x14a>
 800032a:	2200      	movs	r2, #0
 800032c:	2300      	movs	r3, #0
 800032e:	9200      	str	r2, [sp, #0]
 8000330:	9301      	str	r3, [sp, #4]
 8000332:	2301      	movs	r3, #1
 8000334:	465a      	mov	r2, fp
 8000336:	4093      	lsls	r3, r2
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	2301      	movs	r3, #1
 800033c:	4642      	mov	r2, r8
 800033e:	4093      	lsls	r3, r2
 8000340:	9300      	str	r3, [sp, #0]
 8000342:	e028      	b.n	8000396 <__udivmoddi4+0xca>
 8000344:	4282      	cmp	r2, r0
 8000346:	d9cf      	bls.n	80002e8 <__udivmoddi4+0x1c>
 8000348:	2200      	movs	r2, #0
 800034a:	2300      	movs	r3, #0
 800034c:	9200      	str	r2, [sp, #0]
 800034e:	9301      	str	r3, [sp, #4]
 8000350:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <__udivmoddi4+0x8e>
 8000356:	601c      	str	r4, [r3, #0]
 8000358:	605d      	str	r5, [r3, #4]
 800035a:	9800      	ldr	r0, [sp, #0]
 800035c:	9901      	ldr	r1, [sp, #4]
 800035e:	b003      	add	sp, #12
 8000360:	bcf0      	pop	{r4, r5, r6, r7}
 8000362:	46bb      	mov	fp, r7
 8000364:	46b2      	mov	sl, r6
 8000366:	46a9      	mov	r9, r5
 8000368:	46a0      	mov	r8, r4
 800036a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800036c:	4642      	mov	r2, r8
 800036e:	2320      	movs	r3, #32
 8000370:	1a9b      	subs	r3, r3, r2
 8000372:	4652      	mov	r2, sl
 8000374:	40da      	lsrs	r2, r3
 8000376:	4641      	mov	r1, r8
 8000378:	0013      	movs	r3, r2
 800037a:	464a      	mov	r2, r9
 800037c:	408a      	lsls	r2, r1
 800037e:	0017      	movs	r7, r2
 8000380:	4642      	mov	r2, r8
 8000382:	431f      	orrs	r7, r3
 8000384:	4653      	mov	r3, sl
 8000386:	4093      	lsls	r3, r2
 8000388:	001e      	movs	r6, r3
 800038a:	42af      	cmp	r7, r5
 800038c:	d9c4      	bls.n	8000318 <__udivmoddi4+0x4c>
 800038e:	2200      	movs	r2, #0
 8000390:	2300      	movs	r3, #0
 8000392:	9200      	str	r2, [sp, #0]
 8000394:	9301      	str	r3, [sp, #4]
 8000396:	4643      	mov	r3, r8
 8000398:	2b00      	cmp	r3, #0
 800039a:	d0d9      	beq.n	8000350 <__udivmoddi4+0x84>
 800039c:	07fb      	lsls	r3, r7, #31
 800039e:	0872      	lsrs	r2, r6, #1
 80003a0:	431a      	orrs	r2, r3
 80003a2:	4646      	mov	r6, r8
 80003a4:	087b      	lsrs	r3, r7, #1
 80003a6:	e00e      	b.n	80003c6 <__udivmoddi4+0xfa>
 80003a8:	42ab      	cmp	r3, r5
 80003aa:	d101      	bne.n	80003b0 <__udivmoddi4+0xe4>
 80003ac:	42a2      	cmp	r2, r4
 80003ae:	d80c      	bhi.n	80003ca <__udivmoddi4+0xfe>
 80003b0:	1aa4      	subs	r4, r4, r2
 80003b2:	419d      	sbcs	r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	1924      	adds	r4, r4, r4
 80003b8:	416d      	adcs	r5, r5
 80003ba:	2100      	movs	r1, #0
 80003bc:	3e01      	subs	r6, #1
 80003be:	1824      	adds	r4, r4, r0
 80003c0:	414d      	adcs	r5, r1
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d006      	beq.n	80003d4 <__udivmoddi4+0x108>
 80003c6:	42ab      	cmp	r3, r5
 80003c8:	d9ee      	bls.n	80003a8 <__udivmoddi4+0xdc>
 80003ca:	3e01      	subs	r6, #1
 80003cc:	1924      	adds	r4, r4, r4
 80003ce:	416d      	adcs	r5, r5
 80003d0:	2e00      	cmp	r6, #0
 80003d2:	d1f8      	bne.n	80003c6 <__udivmoddi4+0xfa>
 80003d4:	9800      	ldr	r0, [sp, #0]
 80003d6:	9901      	ldr	r1, [sp, #4]
 80003d8:	465b      	mov	r3, fp
 80003da:	1900      	adds	r0, r0, r4
 80003dc:	4169      	adcs	r1, r5
 80003de:	2b00      	cmp	r3, #0
 80003e0:	db24      	blt.n	800042c <__udivmoddi4+0x160>
 80003e2:	002b      	movs	r3, r5
 80003e4:	465a      	mov	r2, fp
 80003e6:	4644      	mov	r4, r8
 80003e8:	40d3      	lsrs	r3, r2
 80003ea:	002a      	movs	r2, r5
 80003ec:	40e2      	lsrs	r2, r4
 80003ee:	001c      	movs	r4, r3
 80003f0:	465b      	mov	r3, fp
 80003f2:	0015      	movs	r5, r2
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	db2a      	blt.n	800044e <__udivmoddi4+0x182>
 80003f8:	0026      	movs	r6, r4
 80003fa:	409e      	lsls	r6, r3
 80003fc:	0033      	movs	r3, r6
 80003fe:	0026      	movs	r6, r4
 8000400:	4647      	mov	r7, r8
 8000402:	40be      	lsls	r6, r7
 8000404:	0032      	movs	r2, r6
 8000406:	1a80      	subs	r0, r0, r2
 8000408:	4199      	sbcs	r1, r3
 800040a:	9000      	str	r0, [sp, #0]
 800040c:	9101      	str	r1, [sp, #4]
 800040e:	e79f      	b.n	8000350 <__udivmoddi4+0x84>
 8000410:	42a3      	cmp	r3, r4
 8000412:	d8bc      	bhi.n	800038e <__udivmoddi4+0xc2>
 8000414:	e783      	b.n	800031e <__udivmoddi4+0x52>
 8000416:	4642      	mov	r2, r8
 8000418:	2320      	movs	r3, #32
 800041a:	2100      	movs	r1, #0
 800041c:	1a9b      	subs	r3, r3, r2
 800041e:	2200      	movs	r2, #0
 8000420:	9100      	str	r1, [sp, #0]
 8000422:	9201      	str	r2, [sp, #4]
 8000424:	2201      	movs	r2, #1
 8000426:	40da      	lsrs	r2, r3
 8000428:	9201      	str	r2, [sp, #4]
 800042a:	e786      	b.n	800033a <__udivmoddi4+0x6e>
 800042c:	4642      	mov	r2, r8
 800042e:	2320      	movs	r3, #32
 8000430:	1a9b      	subs	r3, r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	4646      	mov	r6, r8
 8000436:	409a      	lsls	r2, r3
 8000438:	0023      	movs	r3, r4
 800043a:	40f3      	lsrs	r3, r6
 800043c:	4644      	mov	r4, r8
 800043e:	4313      	orrs	r3, r2
 8000440:	002a      	movs	r2, r5
 8000442:	40e2      	lsrs	r2, r4
 8000444:	001c      	movs	r4, r3
 8000446:	465b      	mov	r3, fp
 8000448:	0015      	movs	r5, r2
 800044a:	2b00      	cmp	r3, #0
 800044c:	dad4      	bge.n	80003f8 <__udivmoddi4+0x12c>
 800044e:	4642      	mov	r2, r8
 8000450:	002f      	movs	r7, r5
 8000452:	2320      	movs	r3, #32
 8000454:	0026      	movs	r6, r4
 8000456:	4097      	lsls	r7, r2
 8000458:	1a9b      	subs	r3, r3, r2
 800045a:	40de      	lsrs	r6, r3
 800045c:	003b      	movs	r3, r7
 800045e:	4333      	orrs	r3, r6
 8000460:	e7cd      	b.n	80003fe <__udivmoddi4+0x132>
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__clzdi2>:
 8000464:	b510      	push	{r4, lr}
 8000466:	2900      	cmp	r1, #0
 8000468:	d103      	bne.n	8000472 <__clzdi2+0xe>
 800046a:	f000 f807 	bl	800047c <__clzsi2>
 800046e:	3020      	adds	r0, #32
 8000470:	e002      	b.n	8000478 <__clzdi2+0x14>
 8000472:	0008      	movs	r0, r1
 8000474:	f000 f802 	bl	800047c <__clzsi2>
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__clzsi2>:
 800047c:	211c      	movs	r1, #28
 800047e:	2301      	movs	r3, #1
 8000480:	041b      	lsls	r3, r3, #16
 8000482:	4298      	cmp	r0, r3
 8000484:	d301      	bcc.n	800048a <__clzsi2+0xe>
 8000486:	0c00      	lsrs	r0, r0, #16
 8000488:	3910      	subs	r1, #16
 800048a:	0a1b      	lsrs	r3, r3, #8
 800048c:	4298      	cmp	r0, r3
 800048e:	d301      	bcc.n	8000494 <__clzsi2+0x18>
 8000490:	0a00      	lsrs	r0, r0, #8
 8000492:	3908      	subs	r1, #8
 8000494:	091b      	lsrs	r3, r3, #4
 8000496:	4298      	cmp	r0, r3
 8000498:	d301      	bcc.n	800049e <__clzsi2+0x22>
 800049a:	0900      	lsrs	r0, r0, #4
 800049c:	3904      	subs	r1, #4
 800049e:	a202      	add	r2, pc, #8	; (adr r2, 80004a8 <__clzsi2+0x2c>)
 80004a0:	5c10      	ldrb	r0, [r2, r0]
 80004a2:	1840      	adds	r0, r0, r1
 80004a4:	4770      	bx	lr
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	02020304 	.word	0x02020304
 80004ac:	01010101 	.word	0x01010101
	...

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f000 f902 	bl	80006c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 f806 	bl	80004d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c4:	f000 f87a 	bl	80005bc <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004c8:	f007 ffce 	bl	8008468 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004cc:	e7fe      	b.n	80004cc <main+0x14>
	...

080004d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d0:	b590      	push	{r4, r7, lr}
 80004d2:	b09d      	sub	sp, #116	; 0x74
 80004d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004d6:	2438      	movs	r4, #56	; 0x38
 80004d8:	193b      	adds	r3, r7, r4
 80004da:	0018      	movs	r0, r3
 80004dc:	2338      	movs	r3, #56	; 0x38
 80004de:	001a      	movs	r2, r3
 80004e0:	2100      	movs	r1, #0
 80004e2:	f008 fdfe 	bl	80090e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e6:	2324      	movs	r3, #36	; 0x24
 80004e8:	18fb      	adds	r3, r7, r3
 80004ea:	0018      	movs	r0, r3
 80004ec:	2314      	movs	r3, #20
 80004ee:	001a      	movs	r2, r3
 80004f0:	2100      	movs	r1, #0
 80004f2:	f008 fdf6 	bl	80090e2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004f6:	003b      	movs	r3, r7
 80004f8:	0018      	movs	r0, r3
 80004fa:	2324      	movs	r3, #36	; 0x24
 80004fc:	001a      	movs	r2, r3
 80004fe:	2100      	movs	r1, #0
 8000500:	f008 fdef 	bl	80090e2 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000504:	4b2b      	ldr	r3, [pc, #172]	; (80005b4 <SystemClock_Config+0xe4>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a2b      	ldr	r2, [pc, #172]	; (80005b8 <SystemClock_Config+0xe8>)
 800050a:	401a      	ands	r2, r3
 800050c:	4b29      	ldr	r3, [pc, #164]	; (80005b4 <SystemClock_Config+0xe4>)
 800050e:	2180      	movs	r1, #128	; 0x80
 8000510:	0109      	lsls	r1, r1, #4
 8000512:	430a      	orrs	r2, r1
 8000514:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000516:	0021      	movs	r1, r4
 8000518:	187b      	adds	r3, r7, r1
 800051a:	2222      	movs	r2, #34	; 0x22
 800051c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800051e:	187b      	adds	r3, r7, r1
 8000520:	2201      	movs	r2, #1
 8000522:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000524:	187b      	adds	r3, r7, r1
 8000526:	2210      	movs	r2, #16
 8000528:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800052a:	187b      	adds	r3, r7, r1
 800052c:	2201      	movs	r2, #1
 800052e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000530:	187b      	adds	r3, r7, r1
 8000532:	2202      	movs	r2, #2
 8000534:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000536:	187b      	adds	r3, r7, r1
 8000538:	2200      	movs	r2, #0
 800053a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 800053c:	187b      	adds	r3, r7, r1
 800053e:	2280      	movs	r2, #128	; 0x80
 8000540:	02d2      	lsls	r2, r2, #11
 8000542:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000544:	187b      	adds	r3, r7, r1
 8000546:	2280      	movs	r2, #128	; 0x80
 8000548:	03d2      	lsls	r2, r2, #15
 800054a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800054c:	187b      	adds	r3, r7, r1
 800054e:	0018      	movs	r0, r3
 8000550:	f002 fa9e 	bl	8002a90 <HAL_RCC_OscConfig>
 8000554:	1e03      	subs	r3, r0, #0
 8000556:	d001      	beq.n	800055c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000558:	f000 f846 	bl	80005e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800055c:	2124      	movs	r1, #36	; 0x24
 800055e:	187b      	adds	r3, r7, r1
 8000560:	220f      	movs	r2, #15
 8000562:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000564:	187b      	adds	r3, r7, r1
 8000566:	2203      	movs	r2, #3
 8000568:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800056a:	187b      	adds	r3, r7, r1
 800056c:	2200      	movs	r2, #0
 800056e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000570:	187b      	adds	r3, r7, r1
 8000572:	2200      	movs	r2, #0
 8000574:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000576:	187b      	adds	r3, r7, r1
 8000578:	2200      	movs	r2, #0
 800057a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800057c:	187b      	adds	r3, r7, r1
 800057e:	2101      	movs	r1, #1
 8000580:	0018      	movs	r0, r3
 8000582:	f002 fe49 	bl	8003218 <HAL_RCC_ClockConfig>
 8000586:	1e03      	subs	r3, r0, #0
 8000588:	d001      	beq.n	800058e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800058a:	f000 f82d 	bl	80005e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800058e:	003b      	movs	r3, r7
 8000590:	2240      	movs	r2, #64	; 0x40
 8000592:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000594:	003b      	movs	r3, r7
 8000596:	2280      	movs	r2, #128	; 0x80
 8000598:	04d2      	lsls	r2, r2, #19
 800059a:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800059c:	003b      	movs	r3, r7
 800059e:	0018      	movs	r0, r3
 80005a0:	f003 f828 	bl	80035f4 <HAL_RCCEx_PeriphCLKConfig>
 80005a4:	1e03      	subs	r3, r0, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80005a8:	f000 f81e 	bl	80005e8 <Error_Handler>
  }
}
 80005ac:	46c0      	nop			; (mov r8, r8)
 80005ae:	46bd      	mov	sp, r7
 80005b0:	b01d      	add	sp, #116	; 0x74
 80005b2:	bd90      	pop	{r4, r7, pc}
 80005b4:	40007000 	.word	0x40007000
 80005b8:	ffffe7ff 	.word	0xffffe7ff

080005bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c2:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <MX_GPIO_Init+0x28>)
 80005c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005c6:	4b07      	ldr	r3, [pc, #28]	; (80005e4 <MX_GPIO_Init+0x28>)
 80005c8:	2101      	movs	r1, #1
 80005ca:	430a      	orrs	r2, r1
 80005cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80005ce:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <MX_GPIO_Init+0x28>)
 80005d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005d2:	2201      	movs	r2, #1
 80005d4:	4013      	ands	r3, r2
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005da:	46c0      	nop			; (mov r8, r8)
 80005dc:	46bd      	mov	sp, r7
 80005de:	b002      	add	sp, #8
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	46c0      	nop			; (mov r8, r8)
 80005e4:	40021000 	.word	0x40021000

080005e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005ec:	b672      	cpsid	i
}
 80005ee:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005f0:	e7fe      	b.n	80005f0 <Error_Handler+0x8>
	...

080005f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005f8:	4b07      	ldr	r3, [pc, #28]	; (8000618 <HAL_MspInit+0x24>)
 80005fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <HAL_MspInit+0x24>)
 80005fe:	2101      	movs	r1, #1
 8000600:	430a      	orrs	r2, r1
 8000602:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000604:	4b04      	ldr	r3, [pc, #16]	; (8000618 <HAL_MspInit+0x24>)
 8000606:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000608:	4b03      	ldr	r3, [pc, #12]	; (8000618 <HAL_MspInit+0x24>)
 800060a:	2180      	movs	r1, #128	; 0x80
 800060c:	0549      	lsls	r1, r1, #21
 800060e:	430a      	orrs	r2, r1
 8000610:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000612:	46c0      	nop			; (mov r8, r8)
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	40021000 	.word	0x40021000

0800061c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000620:	e7fe      	b.n	8000620 <NMI_Handler+0x4>

08000622 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000622:	b580      	push	{r7, lr}
 8000624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000626:	e7fe      	b.n	8000626 <HardFault_Handler+0x4>

08000628 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800062c:	46c0      	nop			; (mov r8, r8)
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}

08000632 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000632:	b580      	push	{r7, lr}
 8000634:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000636:	46c0      	nop			; (mov r8, r8)
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000640:	f000 f894 	bl	800076c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000644:	46c0      	nop			; (mov r8, r8)
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
	...

0800064c <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000650:	4b03      	ldr	r3, [pc, #12]	; (8000660 <USB_IRQHandler+0x14>)
 8000652:	0018      	movs	r0, r3
 8000654:	f000 fce4 	bl	8001020 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000658:	46c0      	nop			; (mov r8, r8)
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	20000620 	.word	0x20000620

08000664 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000668:	46c0      	nop			; (mov r8, r8)
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
	...

08000670 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000670:	480d      	ldr	r0, [pc, #52]	; (80006a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000672:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000674:	f7ff fff6 	bl	8000664 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000678:	480c      	ldr	r0, [pc, #48]	; (80006ac <LoopForever+0x6>)
  ldr r1, =_edata
 800067a:	490d      	ldr	r1, [pc, #52]	; (80006b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800067c:	4a0d      	ldr	r2, [pc, #52]	; (80006b4 <LoopForever+0xe>)
  movs r3, #0
 800067e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000680:	e002      	b.n	8000688 <LoopCopyDataInit>

08000682 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000682:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000684:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000686:	3304      	adds	r3, #4

08000688 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000688:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800068a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800068c:	d3f9      	bcc.n	8000682 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800068e:	4a0a      	ldr	r2, [pc, #40]	; (80006b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000690:	4c0a      	ldr	r4, [pc, #40]	; (80006bc <LoopForever+0x16>)
  movs r3, #0
 8000692:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000694:	e001      	b.n	800069a <LoopFillZerobss>

08000696 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000696:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000698:	3204      	adds	r2, #4

0800069a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800069a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800069c:	d3fb      	bcc.n	8000696 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800069e:	f008 fcf3 	bl	8009088 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80006a2:	f7ff ff09 	bl	80004b8 <main>

080006a6 <LoopForever>:

LoopForever:
    b LoopForever
 80006a6:	e7fe      	b.n	80006a6 <LoopForever>
  ldr   r0, =_estack
 80006a8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80006ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006b0:	20000120 	.word	0x20000120
  ldr r2, =_sidata
 80006b4:	08009398 	.word	0x08009398
  ldr r2, =_sbss
 80006b8:	20000120 	.word	0x20000120
  ldr r4, =_ebss
 80006bc:	20000d84 	.word	0x20000d84

080006c0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80006c0:	e7fe      	b.n	80006c0 <ADC1_COMP_IRQHandler>
	...

080006c4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006ca:	1dfb      	adds	r3, r7, #7
 80006cc:	2200      	movs	r2, #0
 80006ce:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80006d0:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <HAL_Init+0x3c>)
 80006d2:	681a      	ldr	r2, [r3, #0]
 80006d4:	4b0a      	ldr	r3, [pc, #40]	; (8000700 <HAL_Init+0x3c>)
 80006d6:	2140      	movs	r1, #64	; 0x40
 80006d8:	430a      	orrs	r2, r1
 80006da:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006dc:	2000      	movs	r0, #0
 80006de:	f000 f811 	bl	8000704 <HAL_InitTick>
 80006e2:	1e03      	subs	r3, r0, #0
 80006e4:	d003      	beq.n	80006ee <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80006e6:	1dfb      	adds	r3, r7, #7
 80006e8:	2201      	movs	r2, #1
 80006ea:	701a      	strb	r2, [r3, #0]
 80006ec:	e001      	b.n	80006f2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006ee:	f7ff ff81 	bl	80005f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006f2:	1dfb      	adds	r3, r7, #7
 80006f4:	781b      	ldrb	r3, [r3, #0]
}
 80006f6:	0018      	movs	r0, r3
 80006f8:	46bd      	mov	sp, r7
 80006fa:	b002      	add	sp, #8
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	46c0      	nop			; (mov r8, r8)
 8000700:	40022000 	.word	0x40022000

08000704 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000704:	b590      	push	{r4, r7, lr}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800070c:	4b14      	ldr	r3, [pc, #80]	; (8000760 <HAL_InitTick+0x5c>)
 800070e:	681c      	ldr	r4, [r3, #0]
 8000710:	4b14      	ldr	r3, [pc, #80]	; (8000764 <HAL_InitTick+0x60>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	0019      	movs	r1, r3
 8000716:	23fa      	movs	r3, #250	; 0xfa
 8000718:	0098      	lsls	r0, r3, #2
 800071a:	f7ff fcfd 	bl	8000118 <__udivsi3>
 800071e:	0003      	movs	r3, r0
 8000720:	0019      	movs	r1, r3
 8000722:	0020      	movs	r0, r4
 8000724:	f7ff fcf8 	bl	8000118 <__udivsi3>
 8000728:	0003      	movs	r3, r0
 800072a:	0018      	movs	r0, r3
 800072c:	f000 f90b 	bl	8000946 <HAL_SYSTICK_Config>
 8000730:	1e03      	subs	r3, r0, #0
 8000732:	d001      	beq.n	8000738 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000734:	2301      	movs	r3, #1
 8000736:	e00f      	b.n	8000758 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	2b03      	cmp	r3, #3
 800073c:	d80b      	bhi.n	8000756 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800073e:	6879      	ldr	r1, [r7, #4]
 8000740:	2301      	movs	r3, #1
 8000742:	425b      	negs	r3, r3
 8000744:	2200      	movs	r2, #0
 8000746:	0018      	movs	r0, r3
 8000748:	f000 f8d8 	bl	80008fc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <HAL_InitTick+0x64>)
 800074e:	687a      	ldr	r2, [r7, #4]
 8000750:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000752:	2300      	movs	r3, #0
 8000754:	e000      	b.n	8000758 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000756:	2301      	movs	r3, #1
}
 8000758:	0018      	movs	r0, r3
 800075a:	46bd      	mov	sp, r7
 800075c:	b003      	add	sp, #12
 800075e:	bd90      	pop	{r4, r7, pc}
 8000760:	20000000 	.word	0x20000000
 8000764:	20000008 	.word	0x20000008
 8000768:	20000004 	.word	0x20000004

0800076c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000770:	4b05      	ldr	r3, [pc, #20]	; (8000788 <HAL_IncTick+0x1c>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	001a      	movs	r2, r3
 8000776:	4b05      	ldr	r3, [pc, #20]	; (800078c <HAL_IncTick+0x20>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	18d2      	adds	r2, r2, r3
 800077c:	4b03      	ldr	r3, [pc, #12]	; (800078c <HAL_IncTick+0x20>)
 800077e:	601a      	str	r2, [r3, #0]
}
 8000780:	46c0      	nop			; (mov r8, r8)
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	20000008 	.word	0x20000008
 800078c:	2000013c 	.word	0x2000013c

08000790 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  return uwTick;
 8000794:	4b02      	ldr	r3, [pc, #8]	; (80007a0 <HAL_GetTick+0x10>)
 8000796:	681b      	ldr	r3, [r3, #0]
}
 8000798:	0018      	movs	r0, r3
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	2000013c 	.word	0x2000013c

080007a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	0002      	movs	r2, r0
 80007ac:	1dfb      	adds	r3, r7, #7
 80007ae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007b0:	1dfb      	adds	r3, r7, #7
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2b7f      	cmp	r3, #127	; 0x7f
 80007b6:	d809      	bhi.n	80007cc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007b8:	1dfb      	adds	r3, r7, #7
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	001a      	movs	r2, r3
 80007be:	231f      	movs	r3, #31
 80007c0:	401a      	ands	r2, r3
 80007c2:	4b04      	ldr	r3, [pc, #16]	; (80007d4 <__NVIC_EnableIRQ+0x30>)
 80007c4:	2101      	movs	r1, #1
 80007c6:	4091      	lsls	r1, r2
 80007c8:	000a      	movs	r2, r1
 80007ca:	601a      	str	r2, [r3, #0]
  }
}
 80007cc:	46c0      	nop			; (mov r8, r8)
 80007ce:	46bd      	mov	sp, r7
 80007d0:	b002      	add	sp, #8
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	e000e100 	.word	0xe000e100

080007d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007d8:	b590      	push	{r4, r7, lr}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	0002      	movs	r2, r0
 80007e0:	6039      	str	r1, [r7, #0]
 80007e2:	1dfb      	adds	r3, r7, #7
 80007e4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007e6:	1dfb      	adds	r3, r7, #7
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2b7f      	cmp	r3, #127	; 0x7f
 80007ec:	d828      	bhi.n	8000840 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007ee:	4a2f      	ldr	r2, [pc, #188]	; (80008ac <__NVIC_SetPriority+0xd4>)
 80007f0:	1dfb      	adds	r3, r7, #7
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	b25b      	sxtb	r3, r3
 80007f6:	089b      	lsrs	r3, r3, #2
 80007f8:	33c0      	adds	r3, #192	; 0xc0
 80007fa:	009b      	lsls	r3, r3, #2
 80007fc:	589b      	ldr	r3, [r3, r2]
 80007fe:	1dfa      	adds	r2, r7, #7
 8000800:	7812      	ldrb	r2, [r2, #0]
 8000802:	0011      	movs	r1, r2
 8000804:	2203      	movs	r2, #3
 8000806:	400a      	ands	r2, r1
 8000808:	00d2      	lsls	r2, r2, #3
 800080a:	21ff      	movs	r1, #255	; 0xff
 800080c:	4091      	lsls	r1, r2
 800080e:	000a      	movs	r2, r1
 8000810:	43d2      	mvns	r2, r2
 8000812:	401a      	ands	r2, r3
 8000814:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	019b      	lsls	r3, r3, #6
 800081a:	22ff      	movs	r2, #255	; 0xff
 800081c:	401a      	ands	r2, r3
 800081e:	1dfb      	adds	r3, r7, #7
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	0018      	movs	r0, r3
 8000824:	2303      	movs	r3, #3
 8000826:	4003      	ands	r3, r0
 8000828:	00db      	lsls	r3, r3, #3
 800082a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800082c:	481f      	ldr	r0, [pc, #124]	; (80008ac <__NVIC_SetPriority+0xd4>)
 800082e:	1dfb      	adds	r3, r7, #7
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	b25b      	sxtb	r3, r3
 8000834:	089b      	lsrs	r3, r3, #2
 8000836:	430a      	orrs	r2, r1
 8000838:	33c0      	adds	r3, #192	; 0xc0
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800083e:	e031      	b.n	80008a4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000840:	4a1b      	ldr	r2, [pc, #108]	; (80008b0 <__NVIC_SetPriority+0xd8>)
 8000842:	1dfb      	adds	r3, r7, #7
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	0019      	movs	r1, r3
 8000848:	230f      	movs	r3, #15
 800084a:	400b      	ands	r3, r1
 800084c:	3b08      	subs	r3, #8
 800084e:	089b      	lsrs	r3, r3, #2
 8000850:	3306      	adds	r3, #6
 8000852:	009b      	lsls	r3, r3, #2
 8000854:	18d3      	adds	r3, r2, r3
 8000856:	3304      	adds	r3, #4
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	1dfa      	adds	r2, r7, #7
 800085c:	7812      	ldrb	r2, [r2, #0]
 800085e:	0011      	movs	r1, r2
 8000860:	2203      	movs	r2, #3
 8000862:	400a      	ands	r2, r1
 8000864:	00d2      	lsls	r2, r2, #3
 8000866:	21ff      	movs	r1, #255	; 0xff
 8000868:	4091      	lsls	r1, r2
 800086a:	000a      	movs	r2, r1
 800086c:	43d2      	mvns	r2, r2
 800086e:	401a      	ands	r2, r3
 8000870:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	019b      	lsls	r3, r3, #6
 8000876:	22ff      	movs	r2, #255	; 0xff
 8000878:	401a      	ands	r2, r3
 800087a:	1dfb      	adds	r3, r7, #7
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	0018      	movs	r0, r3
 8000880:	2303      	movs	r3, #3
 8000882:	4003      	ands	r3, r0
 8000884:	00db      	lsls	r3, r3, #3
 8000886:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000888:	4809      	ldr	r0, [pc, #36]	; (80008b0 <__NVIC_SetPriority+0xd8>)
 800088a:	1dfb      	adds	r3, r7, #7
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	001c      	movs	r4, r3
 8000890:	230f      	movs	r3, #15
 8000892:	4023      	ands	r3, r4
 8000894:	3b08      	subs	r3, #8
 8000896:	089b      	lsrs	r3, r3, #2
 8000898:	430a      	orrs	r2, r1
 800089a:	3306      	adds	r3, #6
 800089c:	009b      	lsls	r3, r3, #2
 800089e:	18c3      	adds	r3, r0, r3
 80008a0:	3304      	adds	r3, #4
 80008a2:	601a      	str	r2, [r3, #0]
}
 80008a4:	46c0      	nop			; (mov r8, r8)
 80008a6:	46bd      	mov	sp, r7
 80008a8:	b003      	add	sp, #12
 80008aa:	bd90      	pop	{r4, r7, pc}
 80008ac:	e000e100 	.word	0xe000e100
 80008b0:	e000ed00 	.word	0xe000ed00

080008b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	1e5a      	subs	r2, r3, #1
 80008c0:	2380      	movs	r3, #128	; 0x80
 80008c2:	045b      	lsls	r3, r3, #17
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d301      	bcc.n	80008cc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008c8:	2301      	movs	r3, #1
 80008ca:	e010      	b.n	80008ee <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008cc:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <SysTick_Config+0x44>)
 80008ce:	687a      	ldr	r2, [r7, #4]
 80008d0:	3a01      	subs	r2, #1
 80008d2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008d4:	2301      	movs	r3, #1
 80008d6:	425b      	negs	r3, r3
 80008d8:	2103      	movs	r1, #3
 80008da:	0018      	movs	r0, r3
 80008dc:	f7ff ff7c 	bl	80007d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008e0:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <SysTick_Config+0x44>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008e6:	4b04      	ldr	r3, [pc, #16]	; (80008f8 <SysTick_Config+0x44>)
 80008e8:	2207      	movs	r2, #7
 80008ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008ec:	2300      	movs	r3, #0
}
 80008ee:	0018      	movs	r0, r3
 80008f0:	46bd      	mov	sp, r7
 80008f2:	b002      	add	sp, #8
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	e000e010 	.word	0xe000e010

080008fc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	60b9      	str	r1, [r7, #8]
 8000904:	607a      	str	r2, [r7, #4]
 8000906:	210f      	movs	r1, #15
 8000908:	187b      	adds	r3, r7, r1
 800090a:	1c02      	adds	r2, r0, #0
 800090c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800090e:	68ba      	ldr	r2, [r7, #8]
 8000910:	187b      	adds	r3, r7, r1
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	b25b      	sxtb	r3, r3
 8000916:	0011      	movs	r1, r2
 8000918:	0018      	movs	r0, r3
 800091a:	f7ff ff5d 	bl	80007d8 <__NVIC_SetPriority>
}
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	46bd      	mov	sp, r7
 8000922:	b004      	add	sp, #16
 8000924:	bd80      	pop	{r7, pc}

08000926 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	b082      	sub	sp, #8
 800092a:	af00      	add	r7, sp, #0
 800092c:	0002      	movs	r2, r0
 800092e:	1dfb      	adds	r3, r7, #7
 8000930:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000932:	1dfb      	adds	r3, r7, #7
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	b25b      	sxtb	r3, r3
 8000938:	0018      	movs	r0, r3
 800093a:	f7ff ff33 	bl	80007a4 <__NVIC_EnableIRQ>
}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	46bd      	mov	sp, r7
 8000942:	b002      	add	sp, #8
 8000944:	bd80      	pop	{r7, pc}

08000946 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000946:	b580      	push	{r7, lr}
 8000948:	b082      	sub	sp, #8
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	0018      	movs	r0, r3
 8000952:	f7ff ffaf 	bl	80008b4 <SysTick_Config>
 8000956:	0003      	movs	r3, r0
}
 8000958:	0018      	movs	r0, r3
 800095a:	46bd      	mov	sp, r7
 800095c:	b002      	add	sp, #8
 800095e:	bd80      	pop	{r7, pc}

08000960 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8000960:	b5b0      	push	{r4, r5, r7, lr}
 8000962:	b086      	sub	sp, #24
 8000964:	af00      	add	r7, sp, #0
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	60b9      	str	r1, [r7, #8]
 800096a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800096c:	2317      	movs	r3, #23
 800096e:	18fb      	adds	r3, r7, r3
 8000970:	2201      	movs	r2, #1
 8000972:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000974:	4b16      	ldr	r3, [pc, #88]	; (80009d0 <HAL_FLASH_Program+0x70>)
 8000976:	7c1b      	ldrb	r3, [r3, #16]
 8000978:	2b01      	cmp	r3, #1
 800097a:	d101      	bne.n	8000980 <HAL_FLASH_Program+0x20>
 800097c:	2302      	movs	r3, #2
 800097e:	e022      	b.n	80009c6 <HAL_FLASH_Program+0x66>
 8000980:	4b13      	ldr	r3, [pc, #76]	; (80009d0 <HAL_FLASH_Program+0x70>)
 8000982:	2201      	movs	r2, #1
 8000984:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000986:	2517      	movs	r5, #23
 8000988:	197c      	adds	r4, r7, r5
 800098a:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <HAL_FLASH_Program+0x74>)
 800098c:	0018      	movs	r0, r3
 800098e:	f000 f88b 	bl	8000aa8 <FLASH_WaitForLastOperation>
 8000992:	0003      	movs	r3, r0
 8000994:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 8000996:	0029      	movs	r1, r5
 8000998:	187b      	adds	r3, r7, r1
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d10c      	bne.n	80009ba <HAL_FLASH_Program+0x5a>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80009a0:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <HAL_FLASH_Program+0x70>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	615a      	str	r2, [r3, #20]

    /*Program word (32-bit) at a specified address.*/
    *(__IO uint32_t *)Address = Data;
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	687a      	ldr	r2, [r7, #4]
 80009aa:	601a      	str	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80009ac:	187c      	adds	r4, r7, r1
 80009ae:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <HAL_FLASH_Program+0x74>)
 80009b0:	0018      	movs	r0, r3
 80009b2:	f000 f879 	bl	8000aa8 <FLASH_WaitForLastOperation>
 80009b6:	0003      	movs	r3, r0
 80009b8:	7023      	strb	r3, [r4, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80009ba:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <HAL_FLASH_Program+0x70>)
 80009bc:	2200      	movs	r2, #0
 80009be:	741a      	strb	r2, [r3, #16]

  return status;
 80009c0:	2317      	movs	r3, #23
 80009c2:	18fb      	adds	r3, r7, r3
 80009c4:	781b      	ldrb	r3, [r3, #0]
}
 80009c6:	0018      	movs	r0, r3
 80009c8:	46bd      	mov	sp, r7
 80009ca:	b006      	add	sp, #24
 80009cc:	bdb0      	pop	{r4, r5, r7, pc}
 80009ce:	46c0      	nop			; (mov r8, r8)
 80009d0:	20000140 	.word	0x20000140
 80009d4:	0000c350 	.word	0x0000c350

080009d8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  /* Unlocking FLASH_PECR register access*/
  if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 80009de:	4b23      	ldr	r3, [pc, #140]	; (8000a6c <HAL_FLASH_Unlock+0x94>)
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	2201      	movs	r2, #1
 80009e4:	4013      	ands	r3, r2
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d11a      	bne.n	8000a20 <HAL_FLASH_Unlock+0x48>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80009ea:	f3ef 8310 	mrs	r3, PRIMASK
 80009ee:	60fb      	str	r3, [r7, #12]
  return(result);
 80009f0:	68fb      	ldr	r3, [r7, #12]
  {
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 80009f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80009f4:	b672      	cpsid	i
}
 80009f6:	46c0      	nop			; (mov r8, r8)
    __disable_irq();

    WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY1);
 80009f8:	4b1c      	ldr	r3, [pc, #112]	; (8000a6c <HAL_FLASH_Unlock+0x94>)
 80009fa:	4a1d      	ldr	r2, [pc, #116]	; (8000a70 <HAL_FLASH_Unlock+0x98>)
 80009fc:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY2);
 80009fe:	4b1b      	ldr	r3, [pc, #108]	; (8000a6c <HAL_FLASH_Unlock+0x94>)
 8000a00:	4a1c      	ldr	r2, [pc, #112]	; (8000a74 <HAL_FLASH_Unlock+0x9c>)
 8000a02:	60da      	str	r2, [r3, #12]
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000a08:	693b      	ldr	r3, [r7, #16]
 8000a0a:	f383 8810 	msr	PRIMASK, r3
}
 8000a0e:	46c0      	nop			; (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 8000a10:	4b16      	ldr	r3, [pc, #88]	; (8000a6c <HAL_FLASH_Unlock+0x94>)
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	2201      	movs	r2, #1
 8000a16:	4013      	ands	r3, r2
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	d101      	bne.n	8000a20 <HAL_FLASH_Unlock+0x48>
    {
      return HAL_ERROR;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	e021      	b.n	8000a64 <HAL_FLASH_Unlock+0x8c>
    }
  }

  if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 8000a20:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <HAL_FLASH_Unlock+0x94>)
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	2202      	movs	r2, #2
 8000a26:	4013      	ands	r3, r2
 8000a28:	2b02      	cmp	r3, #2
 8000a2a:	d11a      	bne.n	8000a62 <HAL_FLASH_Unlock+0x8a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000a2c:	f3ef 8310 	mrs	r3, PRIMASK
 8000a30:	607b      	str	r3, [r7, #4]
  return(result);
 8000a32:	687b      	ldr	r3, [r7, #4]
  {
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 8000a34:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8000a36:	b672      	cpsid	i
}
 8000a38:	46c0      	nop			; (mov r8, r8)
    __disable_irq();

    /* Unlocking the program memory access */
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY1);
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <HAL_FLASH_Unlock+0x94>)
 8000a3c:	4a0e      	ldr	r2, [pc, #56]	; (8000a78 <HAL_FLASH_Unlock+0xa0>)
 8000a3e:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY2);  
 8000a40:	4b0a      	ldr	r3, [pc, #40]	; (8000a6c <HAL_FLASH_Unlock+0x94>)
 8000a42:	4a0e      	ldr	r2, [pc, #56]	; (8000a7c <HAL_FLASH_Unlock+0xa4>)
 8000a44:	611a      	str	r2, [r3, #16]
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000a4a:	68bb      	ldr	r3, [r7, #8]
 8000a4c:	f383 8810 	msr	PRIMASK, r3
}
 8000a50:	46c0      	nop			; (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 8000a52:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <HAL_FLASH_Unlock+0x94>)
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	2202      	movs	r2, #2
 8000a58:	4013      	ands	r3, r2
 8000a5a:	2b02      	cmp	r3, #2
 8000a5c:	d101      	bne.n	8000a62 <HAL_FLASH_Unlock+0x8a>
    {
      return HAL_ERROR;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	e000      	b.n	8000a64 <HAL_FLASH_Unlock+0x8c>
    }
  }

  return HAL_OK; 
 8000a62:	2300      	movs	r3, #0
}
 8000a64:	0018      	movs	r0, r3
 8000a66:	46bd      	mov	sp, r7
 8000a68:	b006      	add	sp, #24
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40022000 	.word	0x40022000
 8000a70:	89abcdef 	.word	0x89abcdef
 8000a74:	02030405 	.word	0x02030405
 8000a78:	8c9daebf 	.word	0x8c9daebf
 8000a7c:	13141516 	.word	0x13141516

08000a80 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* Set the PRGLOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PRGLOCK);
 8000a84:	4b07      	ldr	r3, [pc, #28]	; (8000aa4 <HAL_FLASH_Lock+0x24>)
 8000a86:	685a      	ldr	r2, [r3, #4]
 8000a88:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <HAL_FLASH_Lock+0x24>)
 8000a8a:	2102      	movs	r1, #2
 8000a8c:	430a      	orrs	r2, r1
 8000a8e:	605a      	str	r2, [r3, #4]
  
  /* Set the PELOCK Bit to lock the PECR Register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8000a90:	4b04      	ldr	r3, [pc, #16]	; (8000aa4 <HAL_FLASH_Lock+0x24>)
 8000a92:	685a      	ldr	r2, [r3, #4]
 8000a94:	4b03      	ldr	r3, [pc, #12]	; (8000aa4 <HAL_FLASH_Lock+0x24>)
 8000a96:	2101      	movs	r1, #1
 8000a98:	430a      	orrs	r2, r1
 8000a9a:	605a      	str	r2, [r3, #4]

  return HAL_OK;  
 8000a9c:	2300      	movs	r3, #0
}
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40022000 	.word	0x40022000

08000aa8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8000ab0:	f7ff fe6e 	bl	8000790 <HAL_GetTick>
 8000ab4:	0003      	movs	r3, r0
 8000ab6:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000ab8:	e00f      	b.n	8000ada <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	3301      	adds	r3, #1
 8000abe:	d00c      	beq.n	8000ada <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d007      	beq.n	8000ad6 <FLASH_WaitForLastOperation+0x2e>
 8000ac6:	f7ff fe63 	bl	8000790 <HAL_GetTick>
 8000aca:	0002      	movs	r2, r0
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	1ad3      	subs	r3, r2, r3
 8000ad0:	687a      	ldr	r2, [r7, #4]
 8000ad2:	429a      	cmp	r2, r3
 8000ad4:	d201      	bcs.n	8000ada <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	e052      	b.n	8000b80 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000ada:	4b2b      	ldr	r3, [pc, #172]	; (8000b88 <FLASH_WaitForLastOperation+0xe0>)
 8000adc:	699b      	ldr	r3, [r3, #24]
 8000ade:	2201      	movs	r2, #1
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d0e9      	beq.n	8000aba <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000ae6:	4b28      	ldr	r3, [pc, #160]	; (8000b88 <FLASH_WaitForLastOperation+0xe0>)
 8000ae8:	699b      	ldr	r3, [r3, #24]
 8000aea:	2202      	movs	r2, #2
 8000aec:	4013      	ands	r3, r2
 8000aee:	2b02      	cmp	r3, #2
 8000af0:	d102      	bne.n	8000af8 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000af2:	4b25      	ldr	r3, [pc, #148]	; (8000b88 <FLASH_WaitForLastOperation+0xe0>)
 8000af4:	2202      	movs	r2, #2
 8000af6:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8000af8:	4b23      	ldr	r3, [pc, #140]	; (8000b88 <FLASH_WaitForLastOperation+0xe0>)
 8000afa:	699a      	ldr	r2, [r3, #24]
 8000afc:	2380      	movs	r3, #128	; 0x80
 8000afe:	005b      	lsls	r3, r3, #1
 8000b00:	401a      	ands	r2, r3
 8000b02:	2380      	movs	r3, #128	; 0x80
 8000b04:	005b      	lsls	r3, r3, #1
 8000b06:	429a      	cmp	r2, r3
 8000b08:	d035      	beq.n	8000b76 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8000b0a:	4b1f      	ldr	r3, [pc, #124]	; (8000b88 <FLASH_WaitForLastOperation+0xe0>)
 8000b0c:	699a      	ldr	r2, [r3, #24]
 8000b0e:	2380      	movs	r3, #128	; 0x80
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8000b14:	2380      	movs	r3, #128	; 0x80
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d02c      	beq.n	8000b76 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8000b1c:	4b1a      	ldr	r3, [pc, #104]	; (8000b88 <FLASH_WaitForLastOperation+0xe0>)
 8000b1e:	699a      	ldr	r2, [r3, #24]
 8000b20:	2380      	movs	r3, #128	; 0x80
 8000b22:	00db      	lsls	r3, r3, #3
 8000b24:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8000b26:	2380      	movs	r3, #128	; 0x80
 8000b28:	00db      	lsls	r3, r3, #3
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	d023      	beq.n	8000b76 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8000b2e:	4b16      	ldr	r3, [pc, #88]	; (8000b88 <FLASH_WaitForLastOperation+0xe0>)
 8000b30:	699a      	ldr	r2, [r3, #24]
 8000b32:	2380      	movs	r3, #128	; 0x80
 8000b34:	011b      	lsls	r3, r3, #4
 8000b36:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8000b38:	2380      	movs	r3, #128	; 0x80
 8000b3a:	011b      	lsls	r3, r3, #4
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d01a      	beq.n	8000b76 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8000b40:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <FLASH_WaitForLastOperation+0xe0>)
 8000b42:	699a      	ldr	r2, [r3, #24]
 8000b44:	2380      	movs	r3, #128	; 0x80
 8000b46:	019b      	lsls	r3, r3, #6
 8000b48:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8000b4a:	2380      	movs	r3, #128	; 0x80
 8000b4c:	019b      	lsls	r3, r3, #6
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	d011      	beq.n	8000b76 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8000b52:	4b0d      	ldr	r3, [pc, #52]	; (8000b88 <FLASH_WaitForLastOperation+0xe0>)
 8000b54:	699a      	ldr	r2, [r3, #24]
 8000b56:	2380      	movs	r3, #128	; 0x80
 8000b58:	029b      	lsls	r3, r3, #10
 8000b5a:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8000b5c:	2380      	movs	r3, #128	; 0x80
 8000b5e:	029b      	lsls	r3, r3, #10
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d008      	beq.n	8000b76 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 8000b64:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <FLASH_WaitForLastOperation+0xe0>)
 8000b66:	699a      	ldr	r2, [r3, #24]
 8000b68:	2380      	movs	r3, #128	; 0x80
 8000b6a:	025b      	lsls	r3, r3, #9
 8000b6c:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8000b6e:	2380      	movs	r3, #128	; 0x80
 8000b70:	025b      	lsls	r3, r3, #9
 8000b72:	429a      	cmp	r2, r3
 8000b74:	d103      	bne.n	8000b7e <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 8000b76:	f000 f809 	bl	8000b8c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e000      	b.n	8000b80 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 8000b7e:	2300      	movs	r3, #0
}
 8000b80:	0018      	movs	r0, r3
 8000b82:	46bd      	mov	sp, r7
 8000b84:	b004      	add	sp, #16
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40022000 	.word	0x40022000

08000b8c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000b96:	4b49      	ldr	r3, [pc, #292]	; (8000cbc <FLASH_SetErrorCode+0x130>)
 8000b98:	699a      	ldr	r2, [r3, #24]
 8000b9a:	2380      	movs	r3, #128	; 0x80
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	401a      	ands	r2, r3
 8000ba0:	2380      	movs	r3, #128	; 0x80
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d10a      	bne.n	8000bbe <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000ba8:	4b45      	ldr	r3, [pc, #276]	; (8000cc0 <FLASH_SetErrorCode+0x134>)
 8000baa:	695b      	ldr	r3, [r3, #20]
 8000bac:	2202      	movs	r2, #2
 8000bae:	431a      	orrs	r2, r3
 8000bb0:	4b43      	ldr	r3, [pc, #268]	; (8000cc0 <FLASH_SetErrorCode+0x134>)
 8000bb2:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2280      	movs	r2, #128	; 0x80
 8000bb8:	0052      	lsls	r2, r2, #1
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8000bbe:	4b3f      	ldr	r3, [pc, #252]	; (8000cbc <FLASH_SetErrorCode+0x130>)
 8000bc0:	699a      	ldr	r2, [r3, #24]
 8000bc2:	2380      	movs	r3, #128	; 0x80
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	401a      	ands	r2, r3
 8000bc8:	2380      	movs	r3, #128	; 0x80
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d10a      	bne.n	8000be6 <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8000bd0:	4b3b      	ldr	r3, [pc, #236]	; (8000cc0 <FLASH_SetErrorCode+0x134>)
 8000bd2:	695b      	ldr	r3, [r3, #20]
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	431a      	orrs	r2, r3
 8000bd8:	4b39      	ldr	r3, [pc, #228]	; (8000cc0 <FLASH_SetErrorCode+0x134>)
 8000bda:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2280      	movs	r2, #128	; 0x80
 8000be0:	0092      	lsls	r2, r2, #2
 8000be2:	4313      	orrs	r3, r2
 8000be4:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8000be6:	4b35      	ldr	r3, [pc, #212]	; (8000cbc <FLASH_SetErrorCode+0x130>)
 8000be8:	699a      	ldr	r2, [r3, #24]
 8000bea:	2380      	movs	r3, #128	; 0x80
 8000bec:	00db      	lsls	r3, r3, #3
 8000bee:	401a      	ands	r2, r3
 8000bf0:	2380      	movs	r3, #128	; 0x80
 8000bf2:	00db      	lsls	r3, r3, #3
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d10a      	bne.n	8000c0e <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8000bf8:	4b31      	ldr	r3, [pc, #196]	; (8000cc0 <FLASH_SetErrorCode+0x134>)
 8000bfa:	695b      	ldr	r3, [r3, #20]
 8000bfc:	2208      	movs	r2, #8
 8000bfe:	431a      	orrs	r2, r3
 8000c00:	4b2f      	ldr	r3, [pc, #188]	; (8000cc0 <FLASH_SetErrorCode+0x134>)
 8000c02:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2280      	movs	r2, #128	; 0x80
 8000c08:	00d2      	lsls	r2, r2, #3
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8000c0e:	4b2b      	ldr	r3, [pc, #172]	; (8000cbc <FLASH_SetErrorCode+0x130>)
 8000c10:	699a      	ldr	r2, [r3, #24]
 8000c12:	2380      	movs	r3, #128	; 0x80
 8000c14:	011b      	lsls	r3, r3, #4
 8000c16:	401a      	ands	r2, r3
 8000c18:	2380      	movs	r3, #128	; 0x80
 8000c1a:	011b      	lsls	r3, r3, #4
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d10a      	bne.n	8000c36 <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8000c20:	4b27      	ldr	r3, [pc, #156]	; (8000cc0 <FLASH_SetErrorCode+0x134>)
 8000c22:	695b      	ldr	r3, [r3, #20]
 8000c24:	2204      	movs	r2, #4
 8000c26:	431a      	orrs	r2, r3
 8000c28:	4b25      	ldr	r3, [pc, #148]	; (8000cc0 <FLASH_SetErrorCode+0x134>)
 8000c2a:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2280      	movs	r2, #128	; 0x80
 8000c30:	0112      	lsls	r2, r2, #4
 8000c32:	4313      	orrs	r3, r2
 8000c34:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 8000c36:	4b21      	ldr	r3, [pc, #132]	; (8000cbc <FLASH_SetErrorCode+0x130>)
 8000c38:	699a      	ldr	r2, [r3, #24]
 8000c3a:	2380      	movs	r3, #128	; 0x80
 8000c3c:	019b      	lsls	r3, r3, #6
 8000c3e:	401a      	ands	r2, r3
 8000c40:	2380      	movs	r3, #128	; 0x80
 8000c42:	019b      	lsls	r3, r3, #6
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d10a      	bne.n	8000c5e <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8000c48:	4b1d      	ldr	r3, [pc, #116]	; (8000cc0 <FLASH_SetErrorCode+0x134>)
 8000c4a:	695b      	ldr	r3, [r3, #20]
 8000c4c:	2210      	movs	r2, #16
 8000c4e:	431a      	orrs	r2, r3
 8000c50:	4b1b      	ldr	r3, [pc, #108]	; (8000cc0 <FLASH_SetErrorCode+0x134>)
 8000c52:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2280      	movs	r2, #128	; 0x80
 8000c58:	0192      	lsls	r2, r2, #6
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 8000c5e:	4b17      	ldr	r3, [pc, #92]	; (8000cbc <FLASH_SetErrorCode+0x130>)
 8000c60:	699a      	ldr	r2, [r3, #24]
 8000c62:	2380      	movs	r3, #128	; 0x80
 8000c64:	029b      	lsls	r3, r3, #10
 8000c66:	401a      	ands	r2, r3
 8000c68:	2380      	movs	r3, #128	; 0x80
 8000c6a:	029b      	lsls	r3, r3, #10
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d109      	bne.n	8000c84 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8000c70:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <FLASH_SetErrorCode+0x134>)
 8000c72:	695b      	ldr	r3, [r3, #20]
 8000c74:	2220      	movs	r2, #32
 8000c76:	431a      	orrs	r2, r3
 8000c78:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <FLASH_SetErrorCode+0x134>)
 8000c7a:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2220      	movs	r2, #32
 8000c80:	4313      	orrs	r3, r2
 8000c82:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 8000c84:	4b0d      	ldr	r3, [pc, #52]	; (8000cbc <FLASH_SetErrorCode+0x130>)
 8000c86:	699a      	ldr	r2, [r3, #24]
 8000c88:	2380      	movs	r3, #128	; 0x80
 8000c8a:	025b      	lsls	r3, r3, #9
 8000c8c:	401a      	ands	r2, r3
 8000c8e:	2380      	movs	r3, #128	; 0x80
 8000c90:	025b      	lsls	r3, r3, #9
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d10a      	bne.n	8000cac <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 8000c96:	4b0a      	ldr	r3, [pc, #40]	; (8000cc0 <FLASH_SetErrorCode+0x134>)
 8000c98:	695b      	ldr	r3, [r3, #20]
 8000c9a:	2240      	movs	r2, #64	; 0x40
 8000c9c:	431a      	orrs	r2, r3
 8000c9e:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <FLASH_SetErrorCode+0x134>)
 8000ca0:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2280      	movs	r2, #128	; 0x80
 8000ca6:	0252      	lsls	r2, r2, #9
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000cac:	4b03      	ldr	r3, [pc, #12]	; (8000cbc <FLASH_SetErrorCode+0x130>)
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	619a      	str	r2, [r3, #24]
}  
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	b002      	add	sp, #8
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	46c0      	nop			; (mov r8, r8)
 8000cbc:	40022000 	.word	0x40022000
 8000cc0:	20000140 	.word	0x20000140

08000cc4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8000cc4:	b5b0      	push	{r4, r5, r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000cce:	230f      	movs	r3, #15
 8000cd0:	18fb      	adds	r3, r7, r3
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000cda:	4b29      	ldr	r3, [pc, #164]	; (8000d80 <HAL_FLASHEx_Erase+0xbc>)
 8000cdc:	7c1b      	ldrb	r3, [r3, #16]
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d101      	bne.n	8000ce6 <HAL_FLASHEx_Erase+0x22>
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	e048      	b.n	8000d78 <HAL_FLASHEx_Erase+0xb4>
 8000ce6:	4b26      	ldr	r3, [pc, #152]	; (8000d80 <HAL_FLASHEx_Erase+0xbc>)
 8000ce8:	2201      	movs	r2, #1
 8000cea:	741a      	strb	r2, [r3, #16]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000cec:	250f      	movs	r5, #15
 8000cee:	197c      	adds	r4, r7, r5
 8000cf0:	4b24      	ldr	r3, [pc, #144]	; (8000d84 <HAL_FLASHEx_Erase+0xc0>)
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f7ff fed8 	bl	8000aa8 <FLASH_WaitForLastOperation>
 8000cf8:	0003      	movs	r3, r0
 8000cfa:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8000cfc:	197b      	adds	r3, r7, r5
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d133      	bne.n	8000d6c <HAL_FLASHEx_Erase+0xa8>
  {
    /*Initialization of PageError variable*/
    *PageError = 0xFFFFFFFFU;
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	2201      	movs	r2, #1
 8000d08:	4252      	negs	r2, r2
 8000d0a:	601a      	str	r2, [r3, #0]
    assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_PROGRAM_ADDRESS((pEraseInit->PageAddress & ~(FLASH_PAGE_SIZE - 1U)) + pEraseInit->NbPages * FLASH_PAGE_SIZE - 1U));

    /* Erase page by page to be done*/
    for(address = pEraseInit->PageAddress; 
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	60bb      	str	r3, [r7, #8]
 8000d12:	e022      	b.n	8000d5a <HAL_FLASHEx_Erase+0x96>
        address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
        address += FLASH_PAGE_SIZE)
    {
      FLASH_PageErase(address);
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	0018      	movs	r0, r3
 8000d18:	f000 f83a 	bl	8000d90 <FLASH_PageErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000d1c:	250f      	movs	r5, #15
 8000d1e:	197c      	adds	r4, r7, r5
 8000d20:	4b18      	ldr	r3, [pc, #96]	; (8000d84 <HAL_FLASHEx_Erase+0xc0>)
 8000d22:	0018      	movs	r0, r3
 8000d24:	f7ff fec0 	bl	8000aa8 <FLASH_WaitForLastOperation>
 8000d28:	0003      	movs	r3, r0
 8000d2a:	7023      	strb	r3, [r4, #0]

      /* If the erase operation is completed, disable the ERASE Bit */
      CLEAR_BIT(FLASH->PECR, FLASH_PECR_PROG);
 8000d2c:	4b16      	ldr	r3, [pc, #88]	; (8000d88 <HAL_FLASHEx_Erase+0xc4>)
 8000d2e:	685a      	ldr	r2, [r3, #4]
 8000d30:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <HAL_FLASHEx_Erase+0xc4>)
 8000d32:	2108      	movs	r1, #8
 8000d34:	438a      	bics	r2, r1
 8000d36:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 8000d38:	4b13      	ldr	r3, [pc, #76]	; (8000d88 <HAL_FLASHEx_Erase+0xc4>)
 8000d3a:	685a      	ldr	r2, [r3, #4]
 8000d3c:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <HAL_FLASHEx_Erase+0xc4>)
 8000d3e:	4913      	ldr	r1, [pc, #76]	; (8000d8c <HAL_FLASHEx_Erase+0xc8>)
 8000d40:	400a      	ands	r2, r1
 8000d42:	605a      	str	r2, [r3, #4]

      if (status != HAL_OK) 
 8000d44:	197b      	adds	r3, r7, r5
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d003      	beq.n	8000d54 <HAL_FLASHEx_Erase+0x90>
      {
        /* In case of error, stop erase procedure and return the faulty address */
        *PageError = address;
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	68ba      	ldr	r2, [r7, #8]
 8000d50:	601a      	str	r2, [r3, #0]
        break;
 8000d52:	e00b      	b.n	8000d6c <HAL_FLASHEx_Erase+0xa8>
        address += FLASH_PAGE_SIZE)
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	3380      	adds	r3, #128	; 0x80
 8000d58:	60bb      	str	r3, [r7, #8]
        address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	689b      	ldr	r3, [r3, #8]
 8000d5e:	01da      	lsls	r2, r3, #7
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	18d3      	adds	r3, r2, r3
    for(address = pEraseInit->PageAddress; 
 8000d66:	68ba      	ldr	r2, [r7, #8]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d3d3      	bcc.n	8000d14 <HAL_FLASHEx_Erase+0x50>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000d6c:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <HAL_FLASHEx_Erase+0xbc>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	741a      	strb	r2, [r3, #16]

  return status;
 8000d72:	230f      	movs	r3, #15
 8000d74:	18fb      	adds	r3, r7, r3
 8000d76:	781b      	ldrb	r3, [r3, #0]
}
 8000d78:	0018      	movs	r0, r3
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	b004      	add	sp, #16
 8000d7e:	bdb0      	pop	{r4, r5, r7, pc}
 8000d80:	20000140 	.word	0x20000140
 8000d84:	0000c350 	.word	0x0000c350
 8000d88:	40022000 	.word	0x40022000
 8000d8c:	fffffdff 	.word	0xfffffdff

08000d90 <FLASH_PageErase>:
  * @note   A Page is erased in the Program memory only if the address to load 
  *         is the start address of a page (multiple of @ref FLASH_PAGE_SIZE bytes).
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000d98:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <FLASH_PageErase+0x3c>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	615a      	str	r2, [r3, #20]

  /* Set the ERASE bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <FLASH_PageErase+0x40>)
 8000da0:	685a      	ldr	r2, [r3, #4]
 8000da2:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <FLASH_PageErase+0x40>)
 8000da4:	2180      	movs	r1, #128	; 0x80
 8000da6:	0089      	lsls	r1, r1, #2
 8000da8:	430a      	orrs	r2, r1
 8000daa:	605a      	str	r2, [r3, #4]

  /* Set PROG bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_PROG);
 8000dac:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <FLASH_PageErase+0x40>)
 8000dae:	685a      	ldr	r2, [r3, #4]
 8000db0:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <FLASH_PageErase+0x40>)
 8000db2:	2108      	movs	r1, #8
 8000db4:	430a      	orrs	r2, r1
 8000db6:	605a      	str	r2, [r3, #4]

  /* Write 00000000h to the first word of the program page to erase */
  *(__IO uint32_t *)(uint32_t)(PageAddress & ~(FLASH_PAGE_SIZE - 1)) = 0x00000000;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	227f      	movs	r2, #127	; 0x7f
 8000dbc:	4393      	bics	r3, r2
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
}
 8000dc2:	46c0      	nop			; (mov r8, r8)
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	b002      	add	sp, #8
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	46c0      	nop			; (mov r8, r8)
 8000dcc:	20000140 	.word	0x20000140
 8000dd0:	40022000 	.word	0x40022000

08000dd4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dd6:	b08b      	sub	sp, #44	; 0x2c
 8000dd8:	af06      	add	r7, sp, #24
 8000dda:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d101      	bne.n	8000de6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	e0f0      	b.n	8000fc8 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a79      	ldr	r2, [pc, #484]	; (8000fd0 <HAL_PCD_Init+0x1fc>)
 8000dea:	5c9b      	ldrb	r3, [r3, r2]
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d108      	bne.n	8000e04 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	23aa      	movs	r3, #170	; 0xaa
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	2100      	movs	r1, #0
 8000dfa:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	0018      	movs	r0, r3
 8000e00:	f007 fdce 	bl	80089a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4a72      	ldr	r2, [pc, #456]	; (8000fd0 <HAL_PCD_Init+0x1fc>)
 8000e08:	2103      	movs	r1, #3
 8000e0a:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	0018      	movs	r0, r3
 8000e12:	f002 fd93 	bl	800393c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e16:	230f      	movs	r3, #15
 8000e18:	18fb      	adds	r3, r7, r3
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	701a      	strb	r2, [r3, #0]
 8000e1e:	e049      	b.n	8000eb4 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000e20:	200f      	movs	r0, #15
 8000e22:	183b      	adds	r3, r7, r0
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	6879      	ldr	r1, [r7, #4]
 8000e28:	1c5a      	adds	r2, r3, #1
 8000e2a:	0013      	movs	r3, r2
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	189b      	adds	r3, r3, r2
 8000e30:	00db      	lsls	r3, r3, #3
 8000e32:	18cb      	adds	r3, r1, r3
 8000e34:	3301      	adds	r3, #1
 8000e36:	2201      	movs	r2, #1
 8000e38:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000e3a:	183b      	adds	r3, r7, r0
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	6879      	ldr	r1, [r7, #4]
 8000e40:	1c5a      	adds	r2, r3, #1
 8000e42:	0013      	movs	r3, r2
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	189b      	adds	r3, r3, r2
 8000e48:	00db      	lsls	r3, r3, #3
 8000e4a:	183a      	adds	r2, r7, r0
 8000e4c:	7812      	ldrb	r2, [r2, #0]
 8000e4e:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000e50:	183b      	adds	r3, r7, r0
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	6879      	ldr	r1, [r7, #4]
 8000e56:	1c5a      	adds	r2, r3, #1
 8000e58:	0013      	movs	r3, r2
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	189b      	adds	r3, r3, r2
 8000e5e:	00db      	lsls	r3, r3, #3
 8000e60:	18cb      	adds	r3, r1, r3
 8000e62:	3303      	adds	r3, #3
 8000e64:	2200      	movs	r2, #0
 8000e66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000e68:	183b      	adds	r3, r7, r0
 8000e6a:	781a      	ldrb	r2, [r3, #0]
 8000e6c:	6879      	ldr	r1, [r7, #4]
 8000e6e:	0013      	movs	r3, r2
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	189b      	adds	r3, r3, r2
 8000e74:	00db      	lsls	r3, r3, #3
 8000e76:	18cb      	adds	r3, r1, r3
 8000e78:	3338      	adds	r3, #56	; 0x38
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000e7e:	183b      	adds	r3, r7, r0
 8000e80:	781a      	ldrb	r2, [r3, #0]
 8000e82:	6879      	ldr	r1, [r7, #4]
 8000e84:	0013      	movs	r3, r2
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	189b      	adds	r3, r3, r2
 8000e8a:	00db      	lsls	r3, r3, #3
 8000e8c:	18cb      	adds	r3, r1, r3
 8000e8e:	333c      	adds	r3, #60	; 0x3c
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000e94:	183b      	adds	r3, r7, r0
 8000e96:	781a      	ldrb	r2, [r3, #0]
 8000e98:	6879      	ldr	r1, [r7, #4]
 8000e9a:	0013      	movs	r3, r2
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	189b      	adds	r3, r3, r2
 8000ea0:	00db      	lsls	r3, r3, #3
 8000ea2:	18cb      	adds	r3, r1, r3
 8000ea4:	3340      	adds	r3, #64	; 0x40
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000eaa:	183b      	adds	r3, r7, r0
 8000eac:	781a      	ldrb	r2, [r3, #0]
 8000eae:	183b      	adds	r3, r7, r0
 8000eb0:	3201      	adds	r2, #1
 8000eb2:	701a      	strb	r2, [r3, #0]
 8000eb4:	210f      	movs	r1, #15
 8000eb6:	187b      	adds	r3, r7, r1
 8000eb8:	781a      	ldrb	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	d3ae      	bcc.n	8000e20 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ec2:	187b      	adds	r3, r7, r1
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	701a      	strb	r2, [r3, #0]
 8000ec8:	e056      	b.n	8000f78 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000eca:	240f      	movs	r4, #15
 8000ecc:	193b      	adds	r3, r7, r4
 8000ece:	781a      	ldrb	r2, [r3, #0]
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	236a      	movs	r3, #106	; 0x6a
 8000ed4:	33ff      	adds	r3, #255	; 0xff
 8000ed6:	0019      	movs	r1, r3
 8000ed8:	0013      	movs	r3, r2
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	189b      	adds	r3, r3, r2
 8000ede:	00db      	lsls	r3, r3, #3
 8000ee0:	18c3      	adds	r3, r0, r3
 8000ee2:	185b      	adds	r3, r3, r1
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000ee8:	193b      	adds	r3, r7, r4
 8000eea:	781a      	ldrb	r2, [r3, #0]
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	23b4      	movs	r3, #180	; 0xb4
 8000ef0:	0059      	lsls	r1, r3, #1
 8000ef2:	0013      	movs	r3, r2
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	189b      	adds	r3, r3, r2
 8000ef8:	00db      	lsls	r3, r3, #3
 8000efa:	18c3      	adds	r3, r0, r3
 8000efc:	185b      	adds	r3, r3, r1
 8000efe:	193a      	adds	r2, r7, r4
 8000f00:	7812      	ldrb	r2, [r2, #0]
 8000f02:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f04:	193b      	adds	r3, r7, r4
 8000f06:	781a      	ldrb	r2, [r3, #0]
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	236c      	movs	r3, #108	; 0x6c
 8000f0c:	33ff      	adds	r3, #255	; 0xff
 8000f0e:	0019      	movs	r1, r3
 8000f10:	0013      	movs	r3, r2
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	189b      	adds	r3, r3, r2
 8000f16:	00db      	lsls	r3, r3, #3
 8000f18:	18c3      	adds	r3, r0, r3
 8000f1a:	185b      	adds	r3, r3, r1
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000f20:	193b      	adds	r3, r7, r4
 8000f22:	781a      	ldrb	r2, [r3, #0]
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	23bc      	movs	r3, #188	; 0xbc
 8000f28:	0059      	lsls	r1, r3, #1
 8000f2a:	0013      	movs	r3, r2
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	189b      	adds	r3, r3, r2
 8000f30:	00db      	lsls	r3, r3, #3
 8000f32:	18c3      	adds	r3, r0, r3
 8000f34:	185b      	adds	r3, r3, r1
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000f3a:	193b      	adds	r3, r7, r4
 8000f3c:	781a      	ldrb	r2, [r3, #0]
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	23be      	movs	r3, #190	; 0xbe
 8000f42:	0059      	lsls	r1, r3, #1
 8000f44:	0013      	movs	r3, r2
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	189b      	adds	r3, r3, r2
 8000f4a:	00db      	lsls	r3, r3, #3
 8000f4c:	18c3      	adds	r3, r0, r3
 8000f4e:	185b      	adds	r3, r3, r1
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000f54:	193b      	adds	r3, r7, r4
 8000f56:	781a      	ldrb	r2, [r3, #0]
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	23c0      	movs	r3, #192	; 0xc0
 8000f5c:	0059      	lsls	r1, r3, #1
 8000f5e:	0013      	movs	r3, r2
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	189b      	adds	r3, r3, r2
 8000f64:	00db      	lsls	r3, r3, #3
 8000f66:	18c3      	adds	r3, r0, r3
 8000f68:	185b      	adds	r3, r3, r1
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f6e:	193b      	adds	r3, r7, r4
 8000f70:	781a      	ldrb	r2, [r3, #0]
 8000f72:	193b      	adds	r3, r7, r4
 8000f74:	3201      	adds	r2, #1
 8000f76:	701a      	strb	r2, [r3, #0]
 8000f78:	230f      	movs	r3, #15
 8000f7a:	18fb      	adds	r3, r7, r3
 8000f7c:	781a      	ldrb	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	429a      	cmp	r2, r3
 8000f84:	d3a1      	bcc.n	8000eca <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6818      	ldr	r0, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	466a      	mov	r2, sp
 8000f8e:	0011      	movs	r1, r2
 8000f90:	001a      	movs	r2, r3
 8000f92:	3210      	adds	r2, #16
 8000f94:	ca70      	ldmia	r2!, {r4, r5, r6}
 8000f96:	c170      	stmia	r1!, {r4, r5, r6}
 8000f98:	ca30      	ldmia	r2!, {r4, r5}
 8000f9a:	c130      	stmia	r1!, {r4, r5}
 8000f9c:	6859      	ldr	r1, [r3, #4]
 8000f9e:	689a      	ldr	r2, [r3, #8]
 8000fa0:	68db      	ldr	r3, [r3, #12]
 8000fa2:	f002 fce5 	bl	8003970 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2224      	movs	r2, #36	; 0x24
 8000faa:	2100      	movs	r1, #0
 8000fac:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a07      	ldr	r2, [pc, #28]	; (8000fd0 <HAL_PCD_Init+0x1fc>)
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	69db      	ldr	r3, [r3, #28]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d103      	bne.n	8000fc6 <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	f001 fd2f 	bl	8002a24 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8000fc6:	2300      	movs	r3, #0
}
 8000fc8:	0018      	movs	r0, r3
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	b005      	add	sp, #20
 8000fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fd0:	000002a9 	.word	0x000002a9

08000fd4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	23aa      	movs	r3, #170	; 0xaa
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	5cd3      	ldrb	r3, [r2, r3]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d101      	bne.n	8000fec <HAL_PCD_Start+0x18>
 8000fe8:	2302      	movs	r3, #2
 8000fea:	e014      	b.n	8001016 <HAL_PCD_Start+0x42>
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	23aa      	movs	r3, #170	; 0xaa
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	2101      	movs	r1, #1
 8000ff4:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	f002 fc88 	bl	8003910 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	0018      	movs	r0, r3
 8001006:	f004 fc8b 	bl	8005920 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	23aa      	movs	r3, #170	; 0xaa
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	2100      	movs	r1, #0
 8001012:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001014:	2300      	movs	r3, #0
}
 8001016:	0018      	movs	r0, r3
 8001018:	46bd      	mov	sp, r7
 800101a:	b002      	add	sp, #8
 800101c:	bd80      	pop	{r7, pc}
	...

08001020 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	0018      	movs	r0, r3
 800102e:	f004 fc8d 	bl	800594c <USB_ReadInterrupts>
 8001032:	0003      	movs	r3, r0
 8001034:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001036:	68fa      	ldr	r2, [r7, #12]
 8001038:	2380      	movs	r3, #128	; 0x80
 800103a:	021b      	lsls	r3, r3, #8
 800103c:	4013      	ands	r3, r2
 800103e:	d004      	beq.n	800104a <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	0018      	movs	r0, r3
 8001044:	f000 fb6e 	bl	8001724 <PCD_EP_ISR_Handler>

    return;
 8001048:	e11d      	b.n	8001286 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800104a:	68fa      	ldr	r2, [r7, #12]
 800104c:	2380      	movs	r3, #128	; 0x80
 800104e:	00db      	lsls	r3, r3, #3
 8001050:	4013      	ands	r3, r2
 8001052:	d015      	beq.n	8001080 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2244      	movs	r2, #68	; 0x44
 800105a:	5a9b      	ldrh	r3, [r3, r2]
 800105c:	b29a      	uxth	r2, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	498a      	ldr	r1, [pc, #552]	; (800128c <HAL_PCD_IRQHandler+0x26c>)
 8001064:	400a      	ands	r2, r1
 8001066:	b291      	uxth	r1, r2
 8001068:	2244      	movs	r2, #68	; 0x44
 800106a:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	0018      	movs	r0, r3
 8001070:	f007 fd19 	bl	8008aa6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2100      	movs	r1, #0
 8001078:	0018      	movs	r0, r3
 800107a:	f000 f915 	bl	80012a8 <HAL_PCD_SetAddress>

    return;
 800107e:	e102      	b.n	8001286 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001080:	68fa      	ldr	r2, [r7, #12]
 8001082:	2380      	movs	r3, #128	; 0x80
 8001084:	01db      	lsls	r3, r3, #7
 8001086:	4013      	ands	r3, r2
 8001088:	d00c      	beq.n	80010a4 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2244      	movs	r2, #68	; 0x44
 8001090:	5a9b      	ldrh	r3, [r3, r2]
 8001092:	b29a      	uxth	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	497d      	ldr	r1, [pc, #500]	; (8001290 <HAL_PCD_IRQHandler+0x270>)
 800109a:	400a      	ands	r2, r1
 800109c:	b291      	uxth	r1, r2
 800109e:	2244      	movs	r2, #68	; 0x44
 80010a0:	5299      	strh	r1, [r3, r2]

    return;
 80010a2:	e0f0      	b.n	8001286 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80010a4:	68fa      	ldr	r2, [r7, #12]
 80010a6:	2380      	movs	r3, #128	; 0x80
 80010a8:	019b      	lsls	r3, r3, #6
 80010aa:	4013      	ands	r3, r2
 80010ac:	d00c      	beq.n	80010c8 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2244      	movs	r2, #68	; 0x44
 80010b4:	5a9b      	ldrh	r3, [r3, r2]
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4975      	ldr	r1, [pc, #468]	; (8001294 <HAL_PCD_IRQHandler+0x274>)
 80010be:	400a      	ands	r2, r1
 80010c0:	b291      	uxth	r1, r2
 80010c2:	2244      	movs	r2, #68	; 0x44
 80010c4:	5299      	strh	r1, [r3, r2]

    return;
 80010c6:	e0de      	b.n	8001286 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80010c8:	68fa      	ldr	r2, [r7, #12]
 80010ca:	2380      	movs	r3, #128	; 0x80
 80010cc:	015b      	lsls	r3, r3, #5
 80010ce:	4013      	ands	r3, r2
 80010d0:	d038      	beq.n	8001144 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2240      	movs	r2, #64	; 0x40
 80010d8:	5a9b      	ldrh	r3, [r3, r2]
 80010da:	b29a      	uxth	r2, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2104      	movs	r1, #4
 80010e2:	438a      	bics	r2, r1
 80010e4:	b291      	uxth	r1, r2
 80010e6:	2240      	movs	r2, #64	; 0x40
 80010e8:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2240      	movs	r2, #64	; 0x40
 80010f0:	5a9b      	ldrh	r3, [r3, r2]
 80010f2:	b29a      	uxth	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2108      	movs	r1, #8
 80010fa:	438a      	bics	r2, r1
 80010fc:	b291      	uxth	r1, r2
 80010fe:	2240      	movs	r2, #64	; 0x40
 8001100:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	23b8      	movs	r3, #184	; 0xb8
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	5cd3      	ldrb	r3, [r2, r3]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d109      	bne.n	8001122 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	23b8      	movs	r3, #184	; 0xb8
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	2100      	movs	r1, #0
 8001116:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2100      	movs	r1, #0
 800111c:	0018      	movs	r0, r3
 800111e:	f001 fcab 	bl	8002a78 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	0018      	movs	r0, r3
 8001126:	f007 fcff 	bl	8008b28 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2244      	movs	r2, #68	; 0x44
 8001130:	5a9b      	ldrh	r3, [r3, r2]
 8001132:	b29a      	uxth	r2, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4957      	ldr	r1, [pc, #348]	; (8001298 <HAL_PCD_IRQHandler+0x278>)
 800113a:	400a      	ands	r2, r1
 800113c:	b291      	uxth	r1, r2
 800113e:	2244      	movs	r2, #68	; 0x44
 8001140:	5299      	strh	r1, [r3, r2]

    return;
 8001142:	e0a0      	b.n	8001286 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001144:	68fa      	ldr	r2, [r7, #12]
 8001146:	2380      	movs	r3, #128	; 0x80
 8001148:	011b      	lsls	r3, r3, #4
 800114a:	4013      	ands	r3, r2
 800114c:	d028      	beq.n	80011a0 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2240      	movs	r2, #64	; 0x40
 8001154:	5a9b      	ldrh	r3, [r3, r2]
 8001156:	b29a      	uxth	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2108      	movs	r1, #8
 800115e:	430a      	orrs	r2, r1
 8001160:	b291      	uxth	r1, r2
 8001162:	2240      	movs	r2, #64	; 0x40
 8001164:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2244      	movs	r2, #68	; 0x44
 800116c:	5a9b      	ldrh	r3, [r3, r2]
 800116e:	b29a      	uxth	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4949      	ldr	r1, [pc, #292]	; (800129c <HAL_PCD_IRQHandler+0x27c>)
 8001176:	400a      	ands	r2, r1
 8001178:	b291      	uxth	r1, r2
 800117a:	2244      	movs	r2, #68	; 0x44
 800117c:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2240      	movs	r2, #64	; 0x40
 8001184:	5a9b      	ldrh	r3, [r3, r2]
 8001186:	b29a      	uxth	r2, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2104      	movs	r1, #4
 800118e:	430a      	orrs	r2, r1
 8001190:	b291      	uxth	r1, r2
 8001192:	2240      	movs	r2, #64	; 0x40
 8001194:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	0018      	movs	r0, r3
 800119a:	f007 fca9 	bl	8008af0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800119e:	e072      	b.n	8001286 <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	2280      	movs	r2, #128	; 0x80
 80011a4:	4013      	ands	r3, r2
 80011a6:	d046      	beq.n	8001236 <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2244      	movs	r2, #68	; 0x44
 80011ae:	5a9b      	ldrh	r3, [r3, r2]
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2180      	movs	r1, #128	; 0x80
 80011b8:	438a      	bics	r2, r1
 80011ba:	b291      	uxth	r1, r2
 80011bc:	2244      	movs	r2, #68	; 0x44
 80011be:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	23b8      	movs	r3, #184	; 0xb8
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	5cd3      	ldrb	r3, [r2, r3]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d12f      	bne.n	800122c <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2240      	movs	r2, #64	; 0x40
 80011d2:	5a9b      	ldrh	r3, [r3, r2]
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2104      	movs	r1, #4
 80011dc:	430a      	orrs	r2, r1
 80011de:	b291      	uxth	r1, r2
 80011e0:	2240      	movs	r2, #64	; 0x40
 80011e2:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2240      	movs	r2, #64	; 0x40
 80011ea:	5a9b      	ldrh	r3, [r3, r2]
 80011ec:	b29a      	uxth	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2108      	movs	r1, #8
 80011f4:	430a      	orrs	r2, r1
 80011f6:	b291      	uxth	r1, r2
 80011f8:	2240      	movs	r2, #64	; 0x40
 80011fa:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	23b8      	movs	r3, #184	; 0xb8
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	2101      	movs	r1, #1
 8001204:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2254      	movs	r2, #84	; 0x54
 800120c:	5a9b      	ldrh	r3, [r3, r2]
 800120e:	b29b      	uxth	r3, r3
 8001210:	089b      	lsrs	r3, r3, #2
 8001212:	223c      	movs	r2, #60	; 0x3c
 8001214:	4013      	ands	r3, r2
 8001216:	0019      	movs	r1, r3
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	23b9      	movs	r3, #185	; 0xb9
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2101      	movs	r1, #1
 8001224:	0018      	movs	r0, r3
 8001226:	f001 fc27 	bl	8002a78 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800122a:	e02c      	b.n	8001286 <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	0018      	movs	r0, r3
 8001230:	f007 fc5e 	bl	8008af0 <HAL_PCD_SuspendCallback>
    return;
 8001234:	e027      	b.n	8001286 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001236:	68fa      	ldr	r2, [r7, #12]
 8001238:	2380      	movs	r3, #128	; 0x80
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	4013      	ands	r3, r2
 800123e:	d010      	beq.n	8001262 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2244      	movs	r2, #68	; 0x44
 8001246:	5a9b      	ldrh	r3, [r3, r2]
 8001248:	b29a      	uxth	r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4914      	ldr	r1, [pc, #80]	; (80012a0 <HAL_PCD_IRQHandler+0x280>)
 8001250:	400a      	ands	r2, r1
 8001252:	b291      	uxth	r1, r2
 8001254:	2244      	movs	r2, #68	; 0x44
 8001256:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	0018      	movs	r0, r3
 800125c:	f007 fc14 	bl	8008a88 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001260:	e011      	b.n	8001286 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001262:	68fa      	ldr	r2, [r7, #12]
 8001264:	2380      	movs	r3, #128	; 0x80
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	4013      	ands	r3, r2
 800126a:	d00c      	beq.n	8001286 <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2244      	movs	r2, #68	; 0x44
 8001272:	5a9b      	ldrh	r3, [r3, r2]
 8001274:	b29a      	uxth	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	490a      	ldr	r1, [pc, #40]	; (80012a4 <HAL_PCD_IRQHandler+0x284>)
 800127c:	400a      	ands	r2, r1
 800127e:	b291      	uxth	r1, r2
 8001280:	2244      	movs	r2, #68	; 0x44
 8001282:	5299      	strh	r1, [r3, r2]

    return;
 8001284:	46c0      	nop			; (mov r8, r8)
  }
}
 8001286:	46bd      	mov	sp, r7
 8001288:	b004      	add	sp, #16
 800128a:	bd80      	pop	{r7, pc}
 800128c:	fffffbff 	.word	0xfffffbff
 8001290:	ffffbfff 	.word	0xffffbfff
 8001294:	ffffdfff 	.word	0xffffdfff
 8001298:	ffffefff 	.word	0xffffefff
 800129c:	fffff7ff 	.word	0xfffff7ff
 80012a0:	fffffdff 	.word	0xfffffdff
 80012a4:	fffffeff 	.word	0xfffffeff

080012a8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	000a      	movs	r2, r1
 80012b2:	1cfb      	adds	r3, r7, #3
 80012b4:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	23aa      	movs	r3, #170	; 0xaa
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	5cd3      	ldrb	r3, [r2, r3]
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d101      	bne.n	80012c6 <HAL_PCD_SetAddress+0x1e>
 80012c2:	2302      	movs	r3, #2
 80012c4:	e017      	b.n	80012f6 <HAL_PCD_SetAddress+0x4e>
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	23aa      	movs	r3, #170	; 0xaa
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	2101      	movs	r1, #1
 80012ce:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	1cfa      	adds	r2, r7, #3
 80012d4:	2124      	movs	r1, #36	; 0x24
 80012d6:	7812      	ldrb	r2, [r2, #0]
 80012d8:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	1cfb      	adds	r3, r7, #3
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	0019      	movs	r1, r3
 80012e4:	0010      	movs	r0, r2
 80012e6:	f004 fb07 	bl	80058f8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	23aa      	movs	r3, #170	; 0xaa
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	2100      	movs	r1, #0
 80012f2:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	0018      	movs	r0, r3
 80012f8:	46bd      	mov	sp, r7
 80012fa:	b002      	add	sp, #8
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80012fe:	b590      	push	{r4, r7, lr}
 8001300:	b085      	sub	sp, #20
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
 8001306:	000c      	movs	r4, r1
 8001308:	0010      	movs	r0, r2
 800130a:	0019      	movs	r1, r3
 800130c:	1cfb      	adds	r3, r7, #3
 800130e:	1c22      	adds	r2, r4, #0
 8001310:	701a      	strb	r2, [r3, #0]
 8001312:	003b      	movs	r3, r7
 8001314:	1c02      	adds	r2, r0, #0
 8001316:	801a      	strh	r2, [r3, #0]
 8001318:	1cbb      	adds	r3, r7, #2
 800131a:	1c0a      	adds	r2, r1, #0
 800131c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 800131e:	230b      	movs	r3, #11
 8001320:	18fb      	adds	r3, r7, r3
 8001322:	2200      	movs	r2, #0
 8001324:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001326:	1cfb      	adds	r3, r7, #3
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	b25b      	sxtb	r3, r3
 800132c:	2b00      	cmp	r3, #0
 800132e:	da0f      	bge.n	8001350 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001330:	1cfb      	adds	r3, r7, #3
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2207      	movs	r2, #7
 8001336:	4013      	ands	r3, r2
 8001338:	1c5a      	adds	r2, r3, #1
 800133a:	0013      	movs	r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	189b      	adds	r3, r3, r2
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	18d3      	adds	r3, r2, r3
 8001346:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	2201      	movs	r2, #1
 800134c:	705a      	strb	r2, [r3, #1]
 800134e:	e00f      	b.n	8001370 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001350:	1cfb      	adds	r3, r7, #3
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	2207      	movs	r2, #7
 8001356:	401a      	ands	r2, r3
 8001358:	0013      	movs	r3, r2
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	189b      	adds	r3, r3, r2
 800135e:	00db      	lsls	r3, r3, #3
 8001360:	3369      	adds	r3, #105	; 0x69
 8001362:	33ff      	adds	r3, #255	; 0xff
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	18d3      	adds	r3, r2, r3
 8001368:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2200      	movs	r2, #0
 800136e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001370:	1cfb      	adds	r3, r7, #3
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2207      	movs	r2, #7
 8001376:	4013      	ands	r3, r2
 8001378:	b2da      	uxtb	r2, r3
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800137e:	003b      	movs	r3, r7
 8001380:	881a      	ldrh	r2, [r3, #0]
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	1cba      	adds	r2, r7, #2
 800138a:	7812      	ldrb	r2, [r2, #0]
 800138c:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800138e:	1cbb      	adds	r3, r7, #2
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	2b02      	cmp	r3, #2
 8001394:	d102      	bne.n	800139c <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	2200      	movs	r2, #0
 800139a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	23aa      	movs	r3, #170	; 0xaa
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	5cd3      	ldrb	r3, [r2, r3]
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d101      	bne.n	80013ac <HAL_PCD_EP_Open+0xae>
 80013a8:	2302      	movs	r3, #2
 80013aa:	e013      	b.n	80013d4 <HAL_PCD_EP_Open+0xd6>
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	23aa      	movs	r3, #170	; 0xaa
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	2101      	movs	r1, #1
 80013b4:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	68fa      	ldr	r2, [r7, #12]
 80013bc:	0011      	movs	r1, r2
 80013be:	0018      	movs	r0, r3
 80013c0:	f002 fafe 	bl	80039c0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	23aa      	movs	r3, #170	; 0xaa
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	2100      	movs	r1, #0
 80013cc:	54d1      	strb	r1, [r2, r3]

  return ret;
 80013ce:	230b      	movs	r3, #11
 80013d0:	18fb      	adds	r3, r7, r3
 80013d2:	781b      	ldrb	r3, [r3, #0]
}
 80013d4:	0018      	movs	r0, r3
 80013d6:	46bd      	mov	sp, r7
 80013d8:	b005      	add	sp, #20
 80013da:	bd90      	pop	{r4, r7, pc}

080013dc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	000a      	movs	r2, r1
 80013e6:	1cfb      	adds	r3, r7, #3
 80013e8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80013ea:	1cfb      	adds	r3, r7, #3
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	b25b      	sxtb	r3, r3
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	da0f      	bge.n	8001414 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013f4:	1cfb      	adds	r3, r7, #3
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	2207      	movs	r2, #7
 80013fa:	4013      	ands	r3, r2
 80013fc:	1c5a      	adds	r2, r3, #1
 80013fe:	0013      	movs	r3, r2
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	189b      	adds	r3, r3, r2
 8001404:	00db      	lsls	r3, r3, #3
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	18d3      	adds	r3, r2, r3
 800140a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	2201      	movs	r2, #1
 8001410:	705a      	strb	r2, [r3, #1]
 8001412:	e00f      	b.n	8001434 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001414:	1cfb      	adds	r3, r7, #3
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2207      	movs	r2, #7
 800141a:	401a      	ands	r2, r3
 800141c:	0013      	movs	r3, r2
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	189b      	adds	r3, r3, r2
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	3369      	adds	r3, #105	; 0x69
 8001426:	33ff      	adds	r3, #255	; 0xff
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	18d3      	adds	r3, r2, r3
 800142c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	2200      	movs	r2, #0
 8001432:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001434:	1cfb      	adds	r3, r7, #3
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2207      	movs	r2, #7
 800143a:	4013      	ands	r3, r2
 800143c:	b2da      	uxtb	r2, r3
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	23aa      	movs	r3, #170	; 0xaa
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	5cd3      	ldrb	r3, [r2, r3]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d101      	bne.n	8001452 <HAL_PCD_EP_Close+0x76>
 800144e:	2302      	movs	r3, #2
 8001450:	e011      	b.n	8001476 <HAL_PCD_EP_Close+0x9a>
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	23aa      	movs	r3, #170	; 0xaa
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	2101      	movs	r1, #1
 800145a:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	68fa      	ldr	r2, [r7, #12]
 8001462:	0011      	movs	r1, r2
 8001464:	0018      	movs	r0, r3
 8001466:	f002 fe4d 	bl	8004104 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	23aa      	movs	r3, #170	; 0xaa
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	2100      	movs	r1, #0
 8001472:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8001474:	2300      	movs	r3, #0
}
 8001476:	0018      	movs	r0, r3
 8001478:	46bd      	mov	sp, r7
 800147a:	b004      	add	sp, #16
 800147c:	bd80      	pop	{r7, pc}

0800147e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b086      	sub	sp, #24
 8001482:	af00      	add	r7, sp, #0
 8001484:	60f8      	str	r0, [r7, #12]
 8001486:	607a      	str	r2, [r7, #4]
 8001488:	603b      	str	r3, [r7, #0]
 800148a:	200b      	movs	r0, #11
 800148c:	183b      	adds	r3, r7, r0
 800148e:	1c0a      	adds	r2, r1, #0
 8001490:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001492:	0001      	movs	r1, r0
 8001494:	187b      	adds	r3, r7, r1
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2207      	movs	r2, #7
 800149a:	401a      	ands	r2, r3
 800149c:	0013      	movs	r3, r2
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	189b      	adds	r3, r3, r2
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	3369      	adds	r3, #105	; 0x69
 80014a6:	33ff      	adds	r3, #255	; 0xff
 80014a8:	68fa      	ldr	r2, [r7, #12]
 80014aa:	18d3      	adds	r3, r2, r3
 80014ac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	683a      	ldr	r2, [r7, #0]
 80014b8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	2200      	movs	r2, #0
 80014be:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	2200      	movs	r2, #0
 80014c4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80014c6:	187b      	adds	r3, r7, r1
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	2207      	movs	r2, #7
 80014cc:	4013      	ands	r3, r2
 80014ce:	b2da      	uxtb	r2, r3
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	697a      	ldr	r2, [r7, #20]
 80014da:	0011      	movs	r1, r2
 80014dc:	0018      	movs	r0, r3
 80014de:	f002 ffd1 	bl	8004484 <USB_EPStartXfer>

  return HAL_OK;
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	0018      	movs	r0, r3
 80014e6:	46bd      	mov	sp, r7
 80014e8:	b006      	add	sp, #24
 80014ea:	bd80      	pop	{r7, pc}

080014ec <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	000a      	movs	r2, r1
 80014f6:	1cfb      	adds	r3, r7, #3
 80014f8:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80014fa:	1cfb      	adds	r3, r7, #3
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	2207      	movs	r2, #7
 8001500:	401a      	ands	r2, r3
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	23c2      	movs	r3, #194	; 0xc2
 8001506:	0059      	lsls	r1, r3, #1
 8001508:	0013      	movs	r3, r2
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	189b      	adds	r3, r3, r2
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	18c3      	adds	r3, r0, r3
 8001512:	185b      	adds	r3, r3, r1
 8001514:	681b      	ldr	r3, [r3, #0]
}
 8001516:	0018      	movs	r0, r3
 8001518:	46bd      	mov	sp, r7
 800151a:	b002      	add	sp, #8
 800151c:	bd80      	pop	{r7, pc}

0800151e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b086      	sub	sp, #24
 8001522:	af00      	add	r7, sp, #0
 8001524:	60f8      	str	r0, [r7, #12]
 8001526:	607a      	str	r2, [r7, #4]
 8001528:	603b      	str	r3, [r7, #0]
 800152a:	200b      	movs	r0, #11
 800152c:	183b      	adds	r3, r7, r0
 800152e:	1c0a      	adds	r2, r1, #0
 8001530:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001532:	183b      	adds	r3, r7, r0
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2207      	movs	r2, #7
 8001538:	4013      	ands	r3, r2
 800153a:	1c5a      	adds	r2, r3, #1
 800153c:	0013      	movs	r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	189b      	adds	r3, r3, r2
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	68fa      	ldr	r2, [r7, #12]
 8001546:	18d3      	adds	r3, r2, r3
 8001548:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	683a      	ldr	r2, [r7, #0]
 8001554:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	2224      	movs	r2, #36	; 0x24
 800155a:	2101      	movs	r1, #1
 800155c:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	683a      	ldr	r2, [r7, #0]
 8001562:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	2200      	movs	r2, #0
 8001568:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	2201      	movs	r2, #1
 800156e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001570:	183b      	adds	r3, r7, r0
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2207      	movs	r2, #7
 8001576:	4013      	ands	r3, r2
 8001578:	b2da      	uxtb	r2, r3
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	697a      	ldr	r2, [r7, #20]
 8001584:	0011      	movs	r1, r2
 8001586:	0018      	movs	r0, r3
 8001588:	f002 ff7c 	bl	8004484 <USB_EPStartXfer>

  return HAL_OK;
 800158c:	2300      	movs	r3, #0
}
 800158e:	0018      	movs	r0, r3
 8001590:	46bd      	mov	sp, r7
 8001592:	b006      	add	sp, #24
 8001594:	bd80      	pop	{r7, pc}

08001596 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b084      	sub	sp, #16
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
 800159e:	000a      	movs	r2, r1
 80015a0:	1cfb      	adds	r3, r7, #3
 80015a2:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80015a4:	1cfb      	adds	r3, r7, #3
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2207      	movs	r2, #7
 80015aa:	401a      	ands	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d901      	bls.n	80015b8 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e046      	b.n	8001646 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80015b8:	1cfb      	adds	r3, r7, #3
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	b25b      	sxtb	r3, r3
 80015be:	2b00      	cmp	r3, #0
 80015c0:	da0f      	bge.n	80015e2 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015c2:	1cfb      	adds	r3, r7, #3
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	2207      	movs	r2, #7
 80015c8:	4013      	ands	r3, r2
 80015ca:	1c5a      	adds	r2, r3, #1
 80015cc:	0013      	movs	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	189b      	adds	r3, r3, r2
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	18d3      	adds	r3, r2, r3
 80015d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2201      	movs	r2, #1
 80015de:	705a      	strb	r2, [r3, #1]
 80015e0:	e00d      	b.n	80015fe <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80015e2:	1cfb      	adds	r3, r7, #3
 80015e4:	781a      	ldrb	r2, [r3, #0]
 80015e6:	0013      	movs	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	189b      	adds	r3, r3, r2
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	3369      	adds	r3, #105	; 0x69
 80015f0:	33ff      	adds	r3, #255	; 0xff
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	18d3      	adds	r3, r2, r3
 80015f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2200      	movs	r2, #0
 80015fc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2201      	movs	r2, #1
 8001602:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001604:	1cfb      	adds	r3, r7, #3
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2207      	movs	r2, #7
 800160a:	4013      	ands	r3, r2
 800160c:	b2da      	uxtb	r2, r3
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	23aa      	movs	r3, #170	; 0xaa
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	5cd3      	ldrb	r3, [r2, r3]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d101      	bne.n	8001622 <HAL_PCD_EP_SetStall+0x8c>
 800161e:	2302      	movs	r3, #2
 8001620:	e011      	b.n	8001646 <HAL_PCD_EP_SetStall+0xb0>
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	23aa      	movs	r3, #170	; 0xaa
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	2101      	movs	r1, #1
 800162a:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	68fa      	ldr	r2, [r7, #12]
 8001632:	0011      	movs	r1, r2
 8001634:	0018      	movs	r0, r3
 8001636:	f004 f85d 	bl	80056f4 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	23aa      	movs	r3, #170	; 0xaa
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	2100      	movs	r1, #0
 8001642:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001644:	2300      	movs	r3, #0
}
 8001646:	0018      	movs	r0, r3
 8001648:	46bd      	mov	sp, r7
 800164a:	b004      	add	sp, #16
 800164c:	bd80      	pop	{r7, pc}

0800164e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b084      	sub	sp, #16
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
 8001656:	000a      	movs	r2, r1
 8001658:	1cfb      	adds	r3, r7, #3
 800165a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800165c:	1cfb      	adds	r3, r7, #3
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	220f      	movs	r2, #15
 8001662:	401a      	ands	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	429a      	cmp	r2, r3
 800166a:	d901      	bls.n	8001670 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e048      	b.n	8001702 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001670:	1cfb      	adds	r3, r7, #3
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	b25b      	sxtb	r3, r3
 8001676:	2b00      	cmp	r3, #0
 8001678:	da0f      	bge.n	800169a <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800167a:	1cfb      	adds	r3, r7, #3
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	2207      	movs	r2, #7
 8001680:	4013      	ands	r3, r2
 8001682:	1c5a      	adds	r2, r3, #1
 8001684:	0013      	movs	r3, r2
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	189b      	adds	r3, r3, r2
 800168a:	00db      	lsls	r3, r3, #3
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	18d3      	adds	r3, r2, r3
 8001690:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2201      	movs	r2, #1
 8001696:	705a      	strb	r2, [r3, #1]
 8001698:	e00f      	b.n	80016ba <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800169a:	1cfb      	adds	r3, r7, #3
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	2207      	movs	r2, #7
 80016a0:	401a      	ands	r2, r3
 80016a2:	0013      	movs	r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	189b      	adds	r3, r3, r2
 80016a8:	00db      	lsls	r3, r3, #3
 80016aa:	3369      	adds	r3, #105	; 0x69
 80016ac:	33ff      	adds	r3, #255	; 0xff
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	18d3      	adds	r3, r2, r3
 80016b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2200      	movs	r2, #0
 80016b8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	2200      	movs	r2, #0
 80016be:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016c0:	1cfb      	adds	r3, r7, #3
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2207      	movs	r2, #7
 80016c6:	4013      	ands	r3, r2
 80016c8:	b2da      	uxtb	r2, r3
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	23aa      	movs	r3, #170	; 0xaa
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	5cd3      	ldrb	r3, [r2, r3]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d101      	bne.n	80016de <HAL_PCD_EP_ClrStall+0x90>
 80016da:	2302      	movs	r3, #2
 80016dc:	e011      	b.n	8001702 <HAL_PCD_EP_ClrStall+0xb4>
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	23aa      	movs	r3, #170	; 0xaa
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	2101      	movs	r1, #1
 80016e6:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	68fa      	ldr	r2, [r7, #12]
 80016ee:	0011      	movs	r1, r2
 80016f0:	0018      	movs	r0, r3
 80016f2:	f004 f84f 	bl	8005794 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	23aa      	movs	r3, #170	; 0xaa
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	2100      	movs	r1, #0
 80016fe:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001700:	2300      	movs	r3, #0
}
 8001702:	0018      	movs	r0, r3
 8001704:	46bd      	mov	sp, r7
 8001706:	b004      	add	sp, #16
 8001708:	bd80      	pop	{r7, pc}

0800170a <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b082      	sub	sp, #8
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
 8001712:	000a      	movs	r2, r1
 8001714:	1cfb      	adds	r3, r7, #3
 8001716:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hpcd);
  UNUSED(ep_addr);

  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	0018      	movs	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	b002      	add	sp, #8
 8001720:	bd80      	pop	{r7, pc}
	...

08001724 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001724:	b5b0      	push	{r4, r5, r7, lr}
 8001726:	b096      	sub	sp, #88	; 0x58
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800172c:	f000 fbec 	bl	8001f08 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	204e      	movs	r0, #78	; 0x4e
 8001736:	183b      	adds	r3, r7, r0
 8001738:	2144      	movs	r1, #68	; 0x44
 800173a:	5a52      	ldrh	r2, [r2, r1]
 800173c:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800173e:	183b      	adds	r3, r7, r0
 8001740:	881b      	ldrh	r3, [r3, #0]
 8001742:	b2da      	uxtb	r2, r3
 8001744:	244d      	movs	r4, #77	; 0x4d
 8001746:	193b      	adds	r3, r7, r4
 8001748:	210f      	movs	r1, #15
 800174a:	400a      	ands	r2, r1
 800174c:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 800174e:	193b      	adds	r3, r7, r4
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d000      	beq.n	8001758 <PCD_EP_ISR_Handler+0x34>
 8001756:	e18f      	b.n	8001a78 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001758:	183b      	adds	r3, r7, r0
 800175a:	881b      	ldrh	r3, [r3, #0]
 800175c:	2210      	movs	r2, #16
 800175e:	4013      	ands	r3, r2
 8001760:	d155      	bne.n	800180e <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	881b      	ldrh	r3, [r3, #0]
 8001768:	b29a      	uxth	r2, r3
 800176a:	200e      	movs	r0, #14
 800176c:	183b      	adds	r3, r7, r0
 800176e:	49bb      	ldr	r1, [pc, #748]	; (8001a5c <PCD_EP_ISR_Handler+0x338>)
 8001770:	400a      	ands	r2, r1
 8001772:	801a      	strh	r2, [r3, #0]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	183a      	adds	r2, r7, r0
 800177a:	8812      	ldrh	r2, [r2, #0]
 800177c:	49b8      	ldr	r1, [pc, #736]	; (8001a60 <PCD_EP_ISR_Handler+0x33c>)
 800177e:	430a      	orrs	r2, r1
 8001780:	b292      	uxth	r2, r2
 8001782:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3328      	adds	r3, #40	; 0x28
 8001788:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2250      	movs	r2, #80	; 0x50
 8001790:	5a9b      	ldrh	r3, [r3, r2]
 8001792:	b29b      	uxth	r3, r3
 8001794:	001a      	movs	r2, r3
 8001796:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	00db      	lsls	r3, r3, #3
 800179c:	18d2      	adds	r2, r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	18d3      	adds	r3, r2, r3
 80017a4:	4aaf      	ldr	r2, [pc, #700]	; (8001a64 <PCD_EP_ISR_Handler+0x340>)
 80017a6:	4694      	mov	ip, r2
 80017a8:	4463      	add	r3, ip
 80017aa:	881b      	ldrh	r3, [r3, #0]
 80017ac:	059b      	lsls	r3, r3, #22
 80017ae:	0d9a      	lsrs	r2, r3, #22
 80017b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017b2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80017b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017b6:	695a      	ldr	r2, [r3, #20]
 80017b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017ba:	69db      	ldr	r3, [r3, #28]
 80017bc:	18d2      	adds	r2, r2, r3
 80017be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017c0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2100      	movs	r1, #0
 80017c6:	0018      	movs	r0, r3
 80017c8:	f007 f940 	bl	8008a4c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2224      	movs	r2, #36	; 0x24
 80017d0:	5c9b      	ldrb	r3, [r3, r2]
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d101      	bne.n	80017dc <PCD_EP_ISR_Handler+0xb8>
 80017d8:	f000 fb96 	bl	8001f08 <PCD_EP_ISR_Handler+0x7e4>
 80017dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <PCD_EP_ISR_Handler+0xc4>
 80017e4:	f000 fb90 	bl	8001f08 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2224      	movs	r2, #36	; 0x24
 80017ec:	5c9b      	ldrb	r3, [r3, r2]
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	2280      	movs	r2, #128	; 0x80
 80017f2:	4252      	negs	r2, r2
 80017f4:	4313      	orrs	r3, r2
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	b291      	uxth	r1, r2
 80017fe:	224c      	movs	r2, #76	; 0x4c
 8001800:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2224      	movs	r2, #36	; 0x24
 8001806:	2100      	movs	r1, #0
 8001808:	5499      	strb	r1, [r3, r2]
 800180a:	f000 fb7d 	bl	8001f08 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	3369      	adds	r3, #105	; 0x69
 8001812:	33ff      	adds	r3, #255	; 0xff
 8001814:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	214a      	movs	r1, #74	; 0x4a
 800181c:	187b      	adds	r3, r7, r1
 800181e:	8812      	ldrh	r2, [r2, #0]
 8001820:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001822:	187b      	adds	r3, r7, r1
 8001824:	881a      	ldrh	r2, [r3, #0]
 8001826:	2380      	movs	r3, #128	; 0x80
 8001828:	011b      	lsls	r3, r3, #4
 800182a:	4013      	ands	r3, r2
 800182c:	d037      	beq.n	800189e <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2250      	movs	r2, #80	; 0x50
 8001834:	5a9b      	ldrh	r3, [r3, r2]
 8001836:	b29b      	uxth	r3, r3
 8001838:	001a      	movs	r2, r3
 800183a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	18d2      	adds	r2, r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	18d3      	adds	r3, r2, r3
 8001848:	4a87      	ldr	r2, [pc, #540]	; (8001a68 <PCD_EP_ISR_Handler+0x344>)
 800184a:	4694      	mov	ip, r2
 800184c:	4463      	add	r3, ip
 800184e:	881b      	ldrh	r3, [r3, #0]
 8001850:	059b      	lsls	r3, r3, #22
 8001852:	0d9a      	lsrs	r2, r3, #22
 8001854:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001856:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6818      	ldr	r0, [r3, #0]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	22ac      	movs	r2, #172	; 0xac
 8001860:	0092      	lsls	r2, r2, #2
 8001862:	1899      	adds	r1, r3, r2
 8001864:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001866:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001868:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800186a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800186c:	b29b      	uxth	r3, r3
 800186e:	f004 f8c4 	bl	80059fa <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	881b      	ldrh	r3, [r3, #0]
 8001878:	b29a      	uxth	r2, r3
 800187a:	2010      	movs	r0, #16
 800187c:	183b      	adds	r3, r7, r0
 800187e:	497b      	ldr	r1, [pc, #492]	; (8001a6c <PCD_EP_ISR_Handler+0x348>)
 8001880:	400a      	ands	r2, r1
 8001882:	801a      	strh	r2, [r3, #0]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	183a      	adds	r2, r7, r0
 800188a:	8812      	ldrh	r2, [r2, #0]
 800188c:	2180      	movs	r1, #128	; 0x80
 800188e:	430a      	orrs	r2, r1
 8001890:	b292      	uxth	r2, r2
 8001892:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	0018      	movs	r0, r3
 8001898:	f007 f8a2 	bl	80089e0 <HAL_PCD_SetupStageCallback>
 800189c:	e334      	b.n	8001f08 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800189e:	234a      	movs	r3, #74	; 0x4a
 80018a0:	18fb      	adds	r3, r7, r3
 80018a2:	2200      	movs	r2, #0
 80018a4:	5e9b      	ldrsh	r3, [r3, r2]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	db00      	blt.n	80018ac <PCD_EP_ISR_Handler+0x188>
 80018aa:	e32d      	b.n	8001f08 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	881b      	ldrh	r3, [r3, #0]
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	201e      	movs	r0, #30
 80018b6:	183b      	adds	r3, r7, r0
 80018b8:	496c      	ldr	r1, [pc, #432]	; (8001a6c <PCD_EP_ISR_Handler+0x348>)
 80018ba:	400a      	ands	r2, r1
 80018bc:	801a      	strh	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	183a      	adds	r2, r7, r0
 80018c4:	8812      	ldrh	r2, [r2, #0]
 80018c6:	2180      	movs	r1, #128	; 0x80
 80018c8:	430a      	orrs	r2, r1
 80018ca:	b292      	uxth	r2, r2
 80018cc:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2250      	movs	r2, #80	; 0x50
 80018d4:	5a9b      	ldrh	r3, [r3, r2]
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	001a      	movs	r2, r3
 80018da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	00db      	lsls	r3, r3, #3
 80018e0:	18d2      	adds	r2, r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	18d3      	adds	r3, r2, r3
 80018e8:	4a5f      	ldr	r2, [pc, #380]	; (8001a68 <PCD_EP_ISR_Handler+0x344>)
 80018ea:	4694      	mov	ip, r2
 80018ec:	4463      	add	r3, ip
 80018ee:	881b      	ldrh	r3, [r3, #0]
 80018f0:	059b      	lsls	r3, r3, #22
 80018f2:	0d9a      	lsrs	r2, r3, #22
 80018f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018f6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80018f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018fa:	69db      	ldr	r3, [r3, #28]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d01a      	beq.n	8001936 <PCD_EP_ISR_Handler+0x212>
 8001900:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001902:	695b      	ldr	r3, [r3, #20]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d016      	beq.n	8001936 <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6818      	ldr	r0, [r3, #0]
 800190c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800190e:	6959      	ldr	r1, [r3, #20]
 8001910:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001912:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001914:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001916:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001918:	b29b      	uxth	r3, r3
 800191a:	f004 f86e 	bl	80059fa <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800191e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001920:	695a      	ldr	r2, [r3, #20]
 8001922:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	18d2      	adds	r2, r2, r3
 8001928:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800192a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2100      	movs	r1, #0
 8001930:	0018      	movs	r0, r3
 8001932:	f007 f86a 	bl	8008a0a <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	214a      	movs	r1, #74	; 0x4a
 800193c:	187b      	adds	r3, r7, r1
 800193e:	8812      	ldrh	r2, [r2, #0]
 8001940:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001942:	187b      	adds	r3, r7, r1
 8001944:	881a      	ldrh	r2, [r3, #0]
 8001946:	2380      	movs	r3, #128	; 0x80
 8001948:	011b      	lsls	r3, r3, #4
 800194a:	4013      	ands	r3, r2
 800194c:	d000      	beq.n	8001950 <PCD_EP_ISR_Handler+0x22c>
 800194e:	e2db      	b.n	8001f08 <PCD_EP_ISR_Handler+0x7e4>
 8001950:	187b      	adds	r3, r7, r1
 8001952:	881a      	ldrh	r2, [r3, #0]
 8001954:	23c0      	movs	r3, #192	; 0xc0
 8001956:	019b      	lsls	r3, r3, #6
 8001958:	401a      	ands	r2, r3
 800195a:	23c0      	movs	r3, #192	; 0xc0
 800195c:	019b      	lsls	r3, r3, #6
 800195e:	429a      	cmp	r2, r3
 8001960:	d100      	bne.n	8001964 <PCD_EP_ISR_Handler+0x240>
 8001962:	e2d1      	b.n	8001f08 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	61bb      	str	r3, [r7, #24]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2250      	movs	r2, #80	; 0x50
 8001970:	5a9b      	ldrh	r3, [r3, r2]
 8001972:	b29b      	uxth	r3, r3
 8001974:	001a      	movs	r2, r3
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	189b      	adds	r3, r3, r2
 800197a:	61bb      	str	r3, [r7, #24]
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	4a3a      	ldr	r2, [pc, #232]	; (8001a68 <PCD_EP_ISR_Handler+0x344>)
 8001980:	4694      	mov	ip, r2
 8001982:	4463      	add	r3, ip
 8001984:	617b      	str	r3, [r7, #20]
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	881b      	ldrh	r3, [r3, #0]
 800198a:	b29b      	uxth	r3, r3
 800198c:	059b      	lsls	r3, r3, #22
 800198e:	0d9b      	lsrs	r3, r3, #22
 8001990:	b29a      	uxth	r2, r3
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	801a      	strh	r2, [r3, #0]
 8001996:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001998:	691b      	ldr	r3, [r3, #16]
 800199a:	2b3e      	cmp	r3, #62	; 0x3e
 800199c:	d91a      	bls.n	80019d4 <PCD_EP_ISR_Handler+0x2b0>
 800199e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	095b      	lsrs	r3, r3, #5
 80019a4:	647b      	str	r3, [r7, #68]	; 0x44
 80019a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019a8:	691b      	ldr	r3, [r3, #16]
 80019aa:	221f      	movs	r2, #31
 80019ac:	4013      	ands	r3, r2
 80019ae:	d102      	bne.n	80019b6 <PCD_EP_ISR_Handler+0x292>
 80019b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019b2:	3b01      	subs	r3, #1
 80019b4:	647b      	str	r3, [r7, #68]	; 0x44
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	881b      	ldrh	r3, [r3, #0]
 80019ba:	b29a      	uxth	r2, r3
 80019bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019be:	b29b      	uxth	r3, r3
 80019c0:	029b      	lsls	r3, r3, #10
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	4313      	orrs	r3, r2
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	4a25      	ldr	r2, [pc, #148]	; (8001a60 <PCD_EP_ISR_Handler+0x33c>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	801a      	strh	r2, [r3, #0]
 80019d2:	e023      	b.n	8001a1c <PCD_EP_ISR_Handler+0x2f8>
 80019d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019d6:	691b      	ldr	r3, [r3, #16]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d108      	bne.n	80019ee <PCD_EP_ISR_Handler+0x2ca>
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	881b      	ldrh	r3, [r3, #0]
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	4a1f      	ldr	r2, [pc, #124]	; (8001a60 <PCD_EP_ISR_Handler+0x33c>)
 80019e4:	4313      	orrs	r3, r2
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	801a      	strh	r2, [r3, #0]
 80019ec:	e016      	b.n	8001a1c <PCD_EP_ISR_Handler+0x2f8>
 80019ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019f0:	691b      	ldr	r3, [r3, #16]
 80019f2:	085b      	lsrs	r3, r3, #1
 80019f4:	647b      	str	r3, [r7, #68]	; 0x44
 80019f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	2201      	movs	r2, #1
 80019fc:	4013      	ands	r3, r2
 80019fe:	d002      	beq.n	8001a06 <PCD_EP_ISR_Handler+0x2e2>
 8001a00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a02:	3301      	adds	r3, #1
 8001a04:	647b      	str	r3, [r7, #68]	; 0x44
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	881b      	ldrh	r3, [r3, #0]
 8001a0a:	b29a      	uxth	r2, r3
 8001a0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	029b      	lsls	r3, r3, #10
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	4313      	orrs	r3, r2
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	881b      	ldrh	r3, [r3, #0]
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	2012      	movs	r0, #18
 8001a26:	183b      	adds	r3, r7, r0
 8001a28:	4911      	ldr	r1, [pc, #68]	; (8001a70 <PCD_EP_ISR_Handler+0x34c>)
 8001a2a:	400a      	ands	r2, r1
 8001a2c:	801a      	strh	r2, [r3, #0]
 8001a2e:	183b      	adds	r3, r7, r0
 8001a30:	183a      	adds	r2, r7, r0
 8001a32:	8812      	ldrh	r2, [r2, #0]
 8001a34:	2180      	movs	r1, #128	; 0x80
 8001a36:	0149      	lsls	r1, r1, #5
 8001a38:	404a      	eors	r2, r1
 8001a3a:	801a      	strh	r2, [r3, #0]
 8001a3c:	183b      	adds	r3, r7, r0
 8001a3e:	183a      	adds	r2, r7, r0
 8001a40:	8812      	ldrh	r2, [r2, #0]
 8001a42:	2180      	movs	r1, #128	; 0x80
 8001a44:	0189      	lsls	r1, r1, #6
 8001a46:	404a      	eors	r2, r1
 8001a48:	801a      	strh	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	183a      	adds	r2, r7, r0
 8001a50:	8812      	ldrh	r2, [r2, #0]
 8001a52:	4908      	ldr	r1, [pc, #32]	; (8001a74 <PCD_EP_ISR_Handler+0x350>)
 8001a54:	430a      	orrs	r2, r1
 8001a56:	b292      	uxth	r2, r2
 8001a58:	801a      	strh	r2, [r3, #0]
 8001a5a:	e255      	b.n	8001f08 <PCD_EP_ISR_Handler+0x7e4>
 8001a5c:	ffff8f0f 	.word	0xffff8f0f
 8001a60:	ffff8000 	.word	0xffff8000
 8001a64:	00000402 	.word	0x00000402
 8001a68:	00000406 	.word	0x00000406
 8001a6c:	00000f8f 	.word	0x00000f8f
 8001a70:	ffffbf8f 	.word	0xffffbf8f
 8001a74:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	001a      	movs	r2, r3
 8001a7e:	204d      	movs	r0, #77	; 0x4d
 8001a80:	183b      	adds	r3, r7, r0
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	18d2      	adds	r2, r2, r3
 8001a88:	214a      	movs	r1, #74	; 0x4a
 8001a8a:	187b      	adds	r3, r7, r1
 8001a8c:	8812      	ldrh	r2, [r2, #0]
 8001a8e:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001a90:	187b      	adds	r3, r7, r1
 8001a92:	2200      	movs	r2, #0
 8001a94:	5e9b      	ldrsh	r3, [r3, r2]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	db00      	blt.n	8001a9c <PCD_EP_ISR_Handler+0x378>
 8001a9a:	e0fa      	b.n	8001c92 <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	001a      	movs	r2, r3
 8001aa2:	183b      	adds	r3, r7, r0
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	18d3      	adds	r3, r2, r3
 8001aaa:	881b      	ldrh	r3, [r3, #0]
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	2448      	movs	r4, #72	; 0x48
 8001ab0:	193b      	adds	r3, r7, r4
 8001ab2:	49d1      	ldr	r1, [pc, #836]	; (8001df8 <PCD_EP_ISR_Handler+0x6d4>)
 8001ab4:	400a      	ands	r2, r1
 8001ab6:	801a      	strh	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	001a      	movs	r2, r3
 8001abe:	183b      	adds	r3, r7, r0
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	18d3      	adds	r3, r2, r3
 8001ac6:	193a      	adds	r2, r7, r4
 8001ac8:	8812      	ldrh	r2, [r2, #0]
 8001aca:	2180      	movs	r1, #128	; 0x80
 8001acc:	430a      	orrs	r2, r1
 8001ace:	b292      	uxth	r2, r2
 8001ad0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001ad2:	183b      	adds	r3, r7, r0
 8001ad4:	781a      	ldrb	r2, [r3, #0]
 8001ad6:	0013      	movs	r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	189b      	adds	r3, r3, r2
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	3369      	adds	r3, #105	; 0x69
 8001ae0:	33ff      	adds	r3, #255	; 0xff
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	18d3      	adds	r3, r2, r3
 8001ae6:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001ae8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aea:	7b1b      	ldrb	r3, [r3, #12]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d125      	bne.n	8001b3c <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2250      	movs	r2, #80	; 0x50
 8001af6:	5a9b      	ldrh	r3, [r3, r2]
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	001a      	movs	r2, r3
 8001afc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	00db      	lsls	r3, r3, #3
 8001b02:	18d2      	adds	r2, r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	18d3      	adds	r3, r2, r3
 8001b0a:	4abc      	ldr	r2, [pc, #752]	; (8001dfc <PCD_EP_ISR_Handler+0x6d8>)
 8001b0c:	4694      	mov	ip, r2
 8001b0e:	4463      	add	r3, ip
 8001b10:	881a      	ldrh	r2, [r3, #0]
 8001b12:	2450      	movs	r4, #80	; 0x50
 8001b14:	193b      	adds	r3, r7, r4
 8001b16:	0592      	lsls	r2, r2, #22
 8001b18:	0d92      	lsrs	r2, r2, #22
 8001b1a:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8001b1c:	193b      	adds	r3, r7, r4
 8001b1e:	881b      	ldrh	r3, [r3, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d100      	bne.n	8001b26 <PCD_EP_ISR_Handler+0x402>
 8001b24:	e08d      	b.n	8001c42 <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6818      	ldr	r0, [r3, #0]
 8001b2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b2c:	6959      	ldr	r1, [r3, #20]
 8001b2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b30:	88da      	ldrh	r2, [r3, #6]
 8001b32:	193b      	adds	r3, r7, r4
 8001b34:	881b      	ldrh	r3, [r3, #0]
 8001b36:	f003 ff60 	bl	80059fa <USB_ReadPMA>
 8001b3a:	e082      	b.n	8001c42 <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001b3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b3e:	78db      	ldrb	r3, [r3, #3]
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d10c      	bne.n	8001b5e <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001b44:	2350      	movs	r3, #80	; 0x50
 8001b46:	18fc      	adds	r4, r7, r3
 8001b48:	234a      	movs	r3, #74	; 0x4a
 8001b4a:	18fb      	adds	r3, r7, r3
 8001b4c:	881a      	ldrh	r2, [r3, #0]
 8001b4e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	0018      	movs	r0, r3
 8001b54:	f000 f9ec 	bl	8001f30 <HAL_PCD_EP_DB_Receive>
 8001b58:	0003      	movs	r3, r0
 8001b5a:	8023      	strh	r3, [r4, #0]
 8001b5c:	e071      	b.n	8001c42 <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	001a      	movs	r2, r3
 8001b64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	18d3      	adds	r3, r2, r3
 8001b6c:	881b      	ldrh	r3, [r3, #0]
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	2052      	movs	r0, #82	; 0x52
 8001b72:	183b      	adds	r3, r7, r0
 8001b74:	49a2      	ldr	r1, [pc, #648]	; (8001e00 <PCD_EP_ISR_Handler+0x6dc>)
 8001b76:	400a      	ands	r2, r1
 8001b78:	801a      	strh	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	001a      	movs	r2, r3
 8001b80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	18d3      	adds	r3, r2, r3
 8001b88:	183a      	adds	r2, r7, r0
 8001b8a:	8812      	ldrh	r2, [r2, #0]
 8001b8c:	499d      	ldr	r1, [pc, #628]	; (8001e04 <PCD_EP_ISR_Handler+0x6e0>)
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	b292      	uxth	r2, r2
 8001b92:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	001a      	movs	r2, r3
 8001b9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	18d3      	adds	r3, r2, r3
 8001ba2:	881b      	ldrh	r3, [r3, #0]
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	001a      	movs	r2, r3
 8001ba8:	2380      	movs	r3, #128	; 0x80
 8001baa:	01db      	lsls	r3, r3, #7
 8001bac:	4013      	ands	r3, r2
 8001bae:	d024      	beq.n	8001bfa <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2250      	movs	r2, #80	; 0x50
 8001bb6:	5a9b      	ldrh	r3, [r3, r2]
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	001a      	movs	r2, r3
 8001bbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	00db      	lsls	r3, r3, #3
 8001bc2:	18d2      	adds	r2, r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	18d3      	adds	r3, r2, r3
 8001bca:	4a8f      	ldr	r2, [pc, #572]	; (8001e08 <PCD_EP_ISR_Handler+0x6e4>)
 8001bcc:	4694      	mov	ip, r2
 8001bce:	4463      	add	r3, ip
 8001bd0:	881a      	ldrh	r2, [r3, #0]
 8001bd2:	2450      	movs	r4, #80	; 0x50
 8001bd4:	193b      	adds	r3, r7, r4
 8001bd6:	0592      	lsls	r2, r2, #22
 8001bd8:	0d92      	lsrs	r2, r2, #22
 8001bda:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8001bdc:	193b      	adds	r3, r7, r4
 8001bde:	881b      	ldrh	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d02e      	beq.n	8001c42 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6818      	ldr	r0, [r3, #0]
 8001be8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bea:	6959      	ldr	r1, [r3, #20]
 8001bec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bee:	891a      	ldrh	r2, [r3, #8]
 8001bf0:	193b      	adds	r3, r7, r4
 8001bf2:	881b      	ldrh	r3, [r3, #0]
 8001bf4:	f003 ff01 	bl	80059fa <USB_ReadPMA>
 8001bf8:	e023      	b.n	8001c42 <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2250      	movs	r2, #80	; 0x50
 8001c00:	5a9b      	ldrh	r3, [r3, r2]
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	001a      	movs	r2, r3
 8001c06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	18d2      	adds	r2, r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	18d3      	adds	r3, r2, r3
 8001c14:	4a79      	ldr	r2, [pc, #484]	; (8001dfc <PCD_EP_ISR_Handler+0x6d8>)
 8001c16:	4694      	mov	ip, r2
 8001c18:	4463      	add	r3, ip
 8001c1a:	881a      	ldrh	r2, [r3, #0]
 8001c1c:	2450      	movs	r4, #80	; 0x50
 8001c1e:	193b      	adds	r3, r7, r4
 8001c20:	0592      	lsls	r2, r2, #22
 8001c22:	0d92      	lsrs	r2, r2, #22
 8001c24:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8001c26:	193b      	adds	r3, r7, r4
 8001c28:	881b      	ldrh	r3, [r3, #0]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d009      	beq.n	8001c42 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6818      	ldr	r0, [r3, #0]
 8001c32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c34:	6959      	ldr	r1, [r3, #20]
 8001c36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c38:	895a      	ldrh	r2, [r3, #10]
 8001c3a:	193b      	adds	r3, r7, r4
 8001c3c:	881b      	ldrh	r3, [r3, #0]
 8001c3e:	f003 fedc 	bl	80059fa <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001c42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c44:	69da      	ldr	r2, [r3, #28]
 8001c46:	2150      	movs	r1, #80	; 0x50
 8001c48:	187b      	adds	r3, r7, r1
 8001c4a:	881b      	ldrh	r3, [r3, #0]
 8001c4c:	18d2      	adds	r2, r2, r3
 8001c4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c50:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001c52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c54:	695a      	ldr	r2, [r3, #20]
 8001c56:	187b      	adds	r3, r7, r1
 8001c58:	881b      	ldrh	r3, [r3, #0]
 8001c5a:	18d2      	adds	r2, r2, r3
 8001c5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c5e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001c60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d005      	beq.n	8001c74 <PCD_EP_ISR_Handler+0x550>
 8001c68:	187b      	adds	r3, r7, r1
 8001c6a:	881a      	ldrh	r2, [r3, #0]
 8001c6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c6e:	691b      	ldr	r3, [r3, #16]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d207      	bcs.n	8001c84 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001c74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c76:	781a      	ldrb	r2, [r3, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	0011      	movs	r1, r2
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	f006 fec4 	bl	8008a0a <HAL_PCD_DataOutStageCallback>
 8001c82:	e006      	b.n	8001c92 <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001c8a:	0011      	movs	r1, r2
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	f002 fbf9 	bl	8004484 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001c92:	244a      	movs	r4, #74	; 0x4a
 8001c94:	193b      	adds	r3, r7, r4
 8001c96:	881b      	ldrh	r3, [r3, #0]
 8001c98:	2280      	movs	r2, #128	; 0x80
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	d100      	bne.n	8001ca0 <PCD_EP_ISR_Handler+0x57c>
 8001c9e:	e133      	b.n	8001f08 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8001ca0:	204d      	movs	r0, #77	; 0x4d
 8001ca2:	183b      	adds	r3, r7, r0
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	1c5a      	adds	r2, r3, #1
 8001ca8:	0013      	movs	r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	189b      	adds	r3, r3, r2
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	18d3      	adds	r3, r2, r3
 8001cb4:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	001a      	movs	r2, r3
 8001cbc:	183b      	adds	r3, r7, r0
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	18d3      	adds	r3, r2, r3
 8001cc4:	881b      	ldrh	r3, [r3, #0]
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	2542      	movs	r5, #66	; 0x42
 8001cca:	197b      	adds	r3, r7, r5
 8001ccc:	494f      	ldr	r1, [pc, #316]	; (8001e0c <PCD_EP_ISR_Handler+0x6e8>)
 8001cce:	400a      	ands	r2, r1
 8001cd0:	801a      	strh	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	001a      	movs	r2, r3
 8001cd8:	183b      	adds	r3, r7, r0
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	18d3      	adds	r3, r2, r3
 8001ce0:	197a      	adds	r2, r7, r5
 8001ce2:	8812      	ldrh	r2, [r2, #0]
 8001ce4:	494a      	ldr	r1, [pc, #296]	; (8001e10 <PCD_EP_ISR_Handler+0x6ec>)
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	b292      	uxth	r2, r2
 8001cea:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001cec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cee:	78db      	ldrb	r3, [r3, #3]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d000      	beq.n	8001cf6 <PCD_EP_ISR_Handler+0x5d2>
 8001cf4:	e0af      	b.n	8001e56 <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 8001cf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001cfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cfe:	7b1b      	ldrb	r3, [r3, #12]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d100      	bne.n	8001d06 <PCD_EP_ISR_Handler+0x5e2>
 8001d04:	e09f      	b.n	8001e46 <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001d06:	193b      	adds	r3, r7, r4
 8001d08:	881b      	ldrh	r3, [r3, #0]
 8001d0a:	2240      	movs	r2, #64	; 0x40
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	d046      	beq.n	8001d9e <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d12:	785b      	ldrb	r3, [r3, #1]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d125      	bne.n	8001d64 <PCD_EP_ISR_Handler+0x640>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2250      	movs	r2, #80	; 0x50
 8001d24:	5a9b      	ldrh	r3, [r3, r2]
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	001a      	movs	r2, r3
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2c:	189b      	adds	r3, r3, r2
 8001d2e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	00da      	lsls	r2, r3, #3
 8001d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d38:	18d3      	adds	r3, r2, r3
 8001d3a:	4a33      	ldr	r2, [pc, #204]	; (8001e08 <PCD_EP_ISR_Handler+0x6e4>)
 8001d3c:	4694      	mov	ip, r2
 8001d3e:	4463      	add	r3, ip
 8001d40:	623b      	str	r3, [r7, #32]
 8001d42:	6a3b      	ldr	r3, [r7, #32]
 8001d44:	881b      	ldrh	r3, [r3, #0]
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	059b      	lsls	r3, r3, #22
 8001d4a:	0d9b      	lsrs	r3, r3, #22
 8001d4c:	b29a      	uxth	r2, r3
 8001d4e:	6a3b      	ldr	r3, [r7, #32]
 8001d50:	801a      	strh	r2, [r3, #0]
 8001d52:	6a3b      	ldr	r3, [r7, #32]
 8001d54:	881b      	ldrh	r3, [r3, #0]
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	4a2d      	ldr	r2, [pc, #180]	; (8001e10 <PCD_EP_ISR_Handler+0x6ec>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	6a3b      	ldr	r3, [r7, #32]
 8001d60:	801a      	strh	r2, [r3, #0]
 8001d62:	e070      	b.n	8001e46 <PCD_EP_ISR_Handler+0x722>
 8001d64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d66:	785b      	ldrb	r3, [r3, #1]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d16c      	bne.n	8001e46 <PCD_EP_ISR_Handler+0x722>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2250      	movs	r2, #80	; 0x50
 8001d78:	5a9b      	ldrh	r3, [r3, r2]
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	001a      	movs	r2, r3
 8001d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d80:	189b      	adds	r3, r3, r2
 8001d82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	00da      	lsls	r2, r3, #3
 8001d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d8c:	18d3      	adds	r3, r2, r3
 8001d8e:	4a1e      	ldr	r2, [pc, #120]	; (8001e08 <PCD_EP_ISR_Handler+0x6e4>)
 8001d90:	4694      	mov	ip, r2
 8001d92:	4463      	add	r3, ip
 8001d94:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d98:	2200      	movs	r2, #0
 8001d9a:	801a      	strh	r2, [r3, #0]
 8001d9c:	e053      	b.n	8001e46 <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001da4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001da6:	785b      	ldrb	r3, [r3, #1]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d133      	bne.n	8001e14 <PCD_EP_ISR_Handler+0x6f0>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	637b      	str	r3, [r7, #52]	; 0x34
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2250      	movs	r2, #80	; 0x50
 8001db8:	5a9b      	ldrh	r3, [r3, r2]
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	001a      	movs	r2, r3
 8001dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dc0:	189b      	adds	r3, r3, r2
 8001dc2:	637b      	str	r3, [r7, #52]	; 0x34
 8001dc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	00da      	lsls	r2, r3, #3
 8001dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dcc:	18d3      	adds	r3, r2, r3
 8001dce:	4a0b      	ldr	r2, [pc, #44]	; (8001dfc <PCD_EP_ISR_Handler+0x6d8>)
 8001dd0:	4694      	mov	ip, r2
 8001dd2:	4463      	add	r3, ip
 8001dd4:	633b      	str	r3, [r7, #48]	; 0x30
 8001dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dd8:	881b      	ldrh	r3, [r3, #0]
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	059b      	lsls	r3, r3, #22
 8001dde:	0d9b      	lsrs	r3, r3, #22
 8001de0:	b29a      	uxth	r2, r3
 8001de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001de4:	801a      	strh	r2, [r3, #0]
 8001de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001de8:	881b      	ldrh	r3, [r3, #0]
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	4a08      	ldr	r2, [pc, #32]	; (8001e10 <PCD_EP_ISR_Handler+0x6ec>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	b29a      	uxth	r2, r3
 8001df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001df4:	801a      	strh	r2, [r3, #0]
 8001df6:	e026      	b.n	8001e46 <PCD_EP_ISR_Handler+0x722>
 8001df8:	00000f8f 	.word	0x00000f8f
 8001dfc:	00000406 	.word	0x00000406
 8001e00:	ffff8f8f 	.word	0xffff8f8f
 8001e04:	ffff80c0 	.word	0xffff80c0
 8001e08:	00000402 	.word	0x00000402
 8001e0c:	ffff8f0f 	.word	0xffff8f0f
 8001e10:	ffff8000 	.word	0xffff8000
 8001e14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e16:	785b      	ldrb	r3, [r3, #1]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d114      	bne.n	8001e46 <PCD_EP_ISR_Handler+0x722>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2250      	movs	r2, #80	; 0x50
 8001e22:	5a9b      	ldrh	r3, [r3, r2]
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	001a      	movs	r2, r3
 8001e28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e2a:	189b      	adds	r3, r3, r2
 8001e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	00da      	lsls	r2, r3, #3
 8001e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e36:	18d3      	adds	r3, r2, r3
 8001e38:	4a3b      	ldr	r2, [pc, #236]	; (8001f28 <PCD_EP_ISR_Handler+0x804>)
 8001e3a:	4694      	mov	ip, r2
 8001e3c:	4463      	add	r3, ip
 8001e3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e42:	2200      	movs	r2, #0
 8001e44:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e48:	781a      	ldrb	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	0011      	movs	r1, r2
 8001e4e:	0018      	movs	r0, r3
 8001e50:	f006 fdfc 	bl	8008a4c <HAL_PCD_DataInStageCallback>
 8001e54:	e058      	b.n	8001f08 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001e56:	234a      	movs	r3, #74	; 0x4a
 8001e58:	18fb      	adds	r3, r7, r3
 8001e5a:	881a      	ldrh	r2, [r3, #0]
 8001e5c:	2380      	movs	r3, #128	; 0x80
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	4013      	ands	r3, r2
 8001e62:	d149      	bne.n	8001ef8 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2250      	movs	r2, #80	; 0x50
 8001e6a:	5a9b      	ldrh	r3, [r3, r2]
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	001a      	movs	r2, r3
 8001e70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	00db      	lsls	r3, r3, #3
 8001e76:	18d2      	adds	r2, r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	18d3      	adds	r3, r2, r3
 8001e7e:	4a2b      	ldr	r2, [pc, #172]	; (8001f2c <PCD_EP_ISR_Handler+0x808>)
 8001e80:	4694      	mov	ip, r2
 8001e82:	4463      	add	r3, ip
 8001e84:	881a      	ldrh	r2, [r3, #0]
 8001e86:	2140      	movs	r1, #64	; 0x40
 8001e88:	187b      	adds	r3, r7, r1
 8001e8a:	0592      	lsls	r2, r2, #22
 8001e8c:	0d92      	lsrs	r2, r2, #22
 8001e8e:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8001e90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e92:	699a      	ldr	r2, [r3, #24]
 8001e94:	187b      	adds	r3, r7, r1
 8001e96:	881b      	ldrh	r3, [r3, #0]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d907      	bls.n	8001eac <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 8001e9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e9e:	699a      	ldr	r2, [r3, #24]
 8001ea0:	187b      	adds	r3, r7, r1
 8001ea2:	881b      	ldrh	r3, [r3, #0]
 8001ea4:	1ad2      	subs	r2, r2, r3
 8001ea6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ea8:	619a      	str	r2, [r3, #24]
 8001eaa:	e002      	b.n	8001eb2 <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 8001eac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eae:	2200      	movs	r2, #0
 8001eb0:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001eb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d107      	bne.n	8001eca <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001eba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ebc:	781a      	ldrb	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	0011      	movs	r1, r2
 8001ec2:	0018      	movs	r0, r3
 8001ec4:	f006 fdc2 	bl	8008a4c <HAL_PCD_DataInStageCallback>
 8001ec8:	e01e      	b.n	8001f08 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001eca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ecc:	695a      	ldr	r2, [r3, #20]
 8001ece:	2140      	movs	r1, #64	; 0x40
 8001ed0:	187b      	adds	r3, r7, r1
 8001ed2:	881b      	ldrh	r3, [r3, #0]
 8001ed4:	18d2      	adds	r2, r2, r3
 8001ed6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ed8:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001eda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001edc:	69da      	ldr	r2, [r3, #28]
 8001ede:	187b      	adds	r3, r7, r1
 8001ee0:	881b      	ldrh	r3, [r3, #0]
 8001ee2:	18d2      	adds	r2, r2, r3
 8001ee4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ee6:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001eee:	0011      	movs	r1, r2
 8001ef0:	0018      	movs	r0, r3
 8001ef2:	f002 fac7 	bl	8004484 <USB_EPStartXfer>
 8001ef6:	e007      	b.n	8001f08 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001ef8:	234a      	movs	r3, #74	; 0x4a
 8001efa:	18fb      	adds	r3, r7, r3
 8001efc:	881a      	ldrh	r2, [r3, #0]
 8001efe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	0018      	movs	r0, r3
 8001f04:	f000 f930 	bl	8002168 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2244      	movs	r2, #68	; 0x44
 8001f0e:	5a9b      	ldrh	r3, [r3, r2]
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	b21b      	sxth	r3, r3
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	da01      	bge.n	8001f1c <PCD_EP_ISR_Handler+0x7f8>
 8001f18:	f7ff fc0a 	bl	8001730 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	0018      	movs	r0, r3
 8001f20:	46bd      	mov	sp, r7
 8001f22:	b016      	add	sp, #88	; 0x58
 8001f24:	bdb0      	pop	{r4, r5, r7, pc}
 8001f26:	46c0      	nop			; (mov r8, r8)
 8001f28:	00000406 	.word	0x00000406
 8001f2c:	00000402 	.word	0x00000402

08001f30 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001f30:	b590      	push	{r4, r7, lr}
 8001f32:	b089      	sub	sp, #36	; 0x24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	1dbb      	adds	r3, r7, #6
 8001f3c:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001f3e:	1dbb      	adds	r3, r7, #6
 8001f40:	881a      	ldrh	r2, [r3, #0]
 8001f42:	2380      	movs	r3, #128	; 0x80
 8001f44:	01db      	lsls	r3, r3, #7
 8001f46:	4013      	ands	r3, r2
 8001f48:	d100      	bne.n	8001f4c <HAL_PCD_EP_DB_Receive+0x1c>
 8001f4a:	e07d      	b.n	8002048 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2250      	movs	r2, #80	; 0x50
 8001f52:	5a9b      	ldrh	r3, [r3, r2]
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	001a      	movs	r2, r3
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	00db      	lsls	r3, r3, #3
 8001f5e:	18d2      	adds	r2, r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	18d3      	adds	r3, r2, r3
 8001f66:	4a7a      	ldr	r2, [pc, #488]	; (8002150 <HAL_PCD_EP_DB_Receive+0x220>)
 8001f68:	4694      	mov	ip, r2
 8001f6a:	4463      	add	r3, ip
 8001f6c:	881a      	ldrh	r2, [r3, #0]
 8001f6e:	211a      	movs	r1, #26
 8001f70:	187b      	adds	r3, r7, r1
 8001f72:	0592      	lsls	r2, r2, #22
 8001f74:	0d92      	lsrs	r2, r2, #22
 8001f76:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	699a      	ldr	r2, [r3, #24]
 8001f7c:	187b      	adds	r3, r7, r1
 8001f7e:	881b      	ldrh	r3, [r3, #0]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d307      	bcc.n	8001f94 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	699a      	ldr	r2, [r3, #24]
 8001f88:	187b      	adds	r3, r7, r1
 8001f8a:	881b      	ldrh	r3, [r3, #0]
 8001f8c:	1ad2      	subs	r2, r2, r3
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	619a      	str	r2, [r3, #24]
 8001f92:	e002      	b.n	8001f9a <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	2200      	movs	r2, #0
 8001f98:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d121      	bne.n	8001fe6 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	001a      	movs	r2, r3
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	18d3      	adds	r3, r2, r3
 8001fb0:	881b      	ldrh	r3, [r3, #0]
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	2018      	movs	r0, #24
 8001fb6:	183b      	adds	r3, r7, r0
 8001fb8:	4966      	ldr	r1, [pc, #408]	; (8002154 <HAL_PCD_EP_DB_Receive+0x224>)
 8001fba:	400a      	ands	r2, r1
 8001fbc:	801a      	strh	r2, [r3, #0]
 8001fbe:	183b      	adds	r3, r7, r0
 8001fc0:	183a      	adds	r2, r7, r0
 8001fc2:	8812      	ldrh	r2, [r2, #0]
 8001fc4:	2180      	movs	r1, #128	; 0x80
 8001fc6:	0189      	lsls	r1, r1, #6
 8001fc8:	404a      	eors	r2, r1
 8001fca:	801a      	strh	r2, [r3, #0]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	001a      	movs	r2, r3
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	18d3      	adds	r3, r2, r3
 8001fda:	183a      	adds	r2, r7, r0
 8001fdc:	8812      	ldrh	r2, [r2, #0]
 8001fde:	495e      	ldr	r1, [pc, #376]	; (8002158 <HAL_PCD_EP_DB_Receive+0x228>)
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	b292      	uxth	r2, r2
 8001fe4:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001fe6:	1dbb      	adds	r3, r7, #6
 8001fe8:	881b      	ldrh	r3, [r3, #0]
 8001fea:	2240      	movs	r2, #64	; 0x40
 8001fec:	4013      	ands	r3, r2
 8001fee:	d01a      	beq.n	8002026 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	001a      	movs	r2, r3
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	18d3      	adds	r3, r2, r3
 8001ffe:	881b      	ldrh	r3, [r3, #0]
 8002000:	b29a      	uxth	r2, r3
 8002002:	2016      	movs	r0, #22
 8002004:	183b      	adds	r3, r7, r0
 8002006:	4955      	ldr	r1, [pc, #340]	; (800215c <HAL_PCD_EP_DB_Receive+0x22c>)
 8002008:	400a      	ands	r2, r1
 800200a:	801a      	strh	r2, [r3, #0]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	001a      	movs	r2, r3
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	18d3      	adds	r3, r2, r3
 800201a:	183a      	adds	r2, r7, r0
 800201c:	8812      	ldrh	r2, [r2, #0]
 800201e:	4950      	ldr	r1, [pc, #320]	; (8002160 <HAL_PCD_EP_DB_Receive+0x230>)
 8002020:	430a      	orrs	r2, r1
 8002022:	b292      	uxth	r2, r2
 8002024:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8002026:	241a      	movs	r4, #26
 8002028:	193b      	adds	r3, r7, r4
 800202a:	881b      	ldrh	r3, [r3, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d100      	bne.n	8002032 <HAL_PCD_EP_DB_Receive+0x102>
 8002030:	e086      	b.n	8002140 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6818      	ldr	r0, [r3, #0]
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	6959      	ldr	r1, [r3, #20]
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	891a      	ldrh	r2, [r3, #8]
 800203e:	193b      	adds	r3, r7, r4
 8002040:	881b      	ldrh	r3, [r3, #0]
 8002042:	f003 fcda 	bl	80059fa <USB_ReadPMA>
 8002046:	e07b      	b.n	8002140 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2250      	movs	r2, #80	; 0x50
 800204e:	5a9b      	ldrh	r3, [r3, r2]
 8002050:	b29b      	uxth	r3, r3
 8002052:	001a      	movs	r2, r3
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	18d2      	adds	r2, r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	18d3      	adds	r3, r2, r3
 8002062:	4a40      	ldr	r2, [pc, #256]	; (8002164 <HAL_PCD_EP_DB_Receive+0x234>)
 8002064:	4694      	mov	ip, r2
 8002066:	4463      	add	r3, ip
 8002068:	881a      	ldrh	r2, [r3, #0]
 800206a:	211a      	movs	r1, #26
 800206c:	187b      	adds	r3, r7, r1
 800206e:	0592      	lsls	r2, r2, #22
 8002070:	0d92      	lsrs	r2, r2, #22
 8002072:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	699a      	ldr	r2, [r3, #24]
 8002078:	187b      	adds	r3, r7, r1
 800207a:	881b      	ldrh	r3, [r3, #0]
 800207c:	429a      	cmp	r2, r3
 800207e:	d307      	bcc.n	8002090 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	699a      	ldr	r2, [r3, #24]
 8002084:	187b      	adds	r3, r7, r1
 8002086:	881b      	ldrh	r3, [r3, #0]
 8002088:	1ad2      	subs	r2, r2, r3
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	619a      	str	r2, [r3, #24]
 800208e:	e002      	b.n	8002096 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	2200      	movs	r2, #0
 8002094:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d121      	bne.n	80020e2 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	001a      	movs	r2, r3
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	18d3      	adds	r3, r2, r3
 80020ac:	881b      	ldrh	r3, [r3, #0]
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	201e      	movs	r0, #30
 80020b2:	183b      	adds	r3, r7, r0
 80020b4:	4927      	ldr	r1, [pc, #156]	; (8002154 <HAL_PCD_EP_DB_Receive+0x224>)
 80020b6:	400a      	ands	r2, r1
 80020b8:	801a      	strh	r2, [r3, #0]
 80020ba:	183b      	adds	r3, r7, r0
 80020bc:	183a      	adds	r2, r7, r0
 80020be:	8812      	ldrh	r2, [r2, #0]
 80020c0:	2180      	movs	r1, #128	; 0x80
 80020c2:	0189      	lsls	r1, r1, #6
 80020c4:	404a      	eors	r2, r1
 80020c6:	801a      	strh	r2, [r3, #0]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	001a      	movs	r2, r3
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	18d3      	adds	r3, r2, r3
 80020d6:	183a      	adds	r2, r7, r0
 80020d8:	8812      	ldrh	r2, [r2, #0]
 80020da:	491f      	ldr	r1, [pc, #124]	; (8002158 <HAL_PCD_EP_DB_Receive+0x228>)
 80020dc:	430a      	orrs	r2, r1
 80020de:	b292      	uxth	r2, r2
 80020e0:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80020e2:	1dbb      	adds	r3, r7, #6
 80020e4:	881b      	ldrh	r3, [r3, #0]
 80020e6:	2240      	movs	r2, #64	; 0x40
 80020e8:	4013      	ands	r3, r2
 80020ea:	d11a      	bne.n	8002122 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	001a      	movs	r2, r3
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	18d3      	adds	r3, r2, r3
 80020fa:	881b      	ldrh	r3, [r3, #0]
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	201c      	movs	r0, #28
 8002100:	183b      	adds	r3, r7, r0
 8002102:	4916      	ldr	r1, [pc, #88]	; (800215c <HAL_PCD_EP_DB_Receive+0x22c>)
 8002104:	400a      	ands	r2, r1
 8002106:	801a      	strh	r2, [r3, #0]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	001a      	movs	r2, r3
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	18d3      	adds	r3, r2, r3
 8002116:	183a      	adds	r2, r7, r0
 8002118:	8812      	ldrh	r2, [r2, #0]
 800211a:	4911      	ldr	r1, [pc, #68]	; (8002160 <HAL_PCD_EP_DB_Receive+0x230>)
 800211c:	430a      	orrs	r2, r1
 800211e:	b292      	uxth	r2, r2
 8002120:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8002122:	241a      	movs	r4, #26
 8002124:	193b      	adds	r3, r7, r4
 8002126:	881b      	ldrh	r3, [r3, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d009      	beq.n	8002140 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6818      	ldr	r0, [r3, #0]
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	6959      	ldr	r1, [r3, #20]
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	895a      	ldrh	r2, [r3, #10]
 8002138:	193b      	adds	r3, r7, r4
 800213a:	881b      	ldrh	r3, [r3, #0]
 800213c:	f003 fc5d 	bl	80059fa <USB_ReadPMA>
    }
  }

  return count;
 8002140:	231a      	movs	r3, #26
 8002142:	18fb      	adds	r3, r7, r3
 8002144:	881b      	ldrh	r3, [r3, #0]
}
 8002146:	0018      	movs	r0, r3
 8002148:	46bd      	mov	sp, r7
 800214a:	b009      	add	sp, #36	; 0x24
 800214c:	bd90      	pop	{r4, r7, pc}
 800214e:	46c0      	nop			; (mov r8, r8)
 8002150:	00000402 	.word	0x00000402
 8002154:	ffffbf8f 	.word	0xffffbf8f
 8002158:	ffff8080 	.word	0xffff8080
 800215c:	ffff8f8f 	.word	0xffff8f8f
 8002160:	ffff80c0 	.word	0xffff80c0
 8002164:	00000406 	.word	0x00000406

08002168 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b0a4      	sub	sp, #144	; 0x90
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	1dbb      	adds	r3, r7, #6
 8002174:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002176:	1dbb      	adds	r3, r7, #6
 8002178:	881b      	ldrh	r3, [r3, #0]
 800217a:	2240      	movs	r2, #64	; 0x40
 800217c:	4013      	ands	r3, r2
 800217e:	d100      	bne.n	8002182 <HAL_PCD_EP_DB_Transmit+0x1a>
 8002180:	e1e4      	b.n	800254c <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2250      	movs	r2, #80	; 0x50
 8002188:	5a9b      	ldrh	r3, [r3, r2]
 800218a:	b29b      	uxth	r3, r3
 800218c:	001a      	movs	r2, r3
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	18d2      	adds	r2, r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	18d3      	adds	r3, r2, r3
 800219c:	4ad0      	ldr	r2, [pc, #832]	; (80024e0 <HAL_PCD_EP_DB_Transmit+0x378>)
 800219e:	4694      	mov	ip, r2
 80021a0:	4463      	add	r3, ip
 80021a2:	881a      	ldrh	r2, [r3, #0]
 80021a4:	2186      	movs	r1, #134	; 0x86
 80021a6:	187b      	adds	r3, r7, r1
 80021a8:	0592      	lsls	r2, r2, #22
 80021aa:	0d92      	lsrs	r2, r2, #22
 80021ac:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	699a      	ldr	r2, [r3, #24]
 80021b2:	187b      	adds	r3, r7, r1
 80021b4:	881b      	ldrh	r3, [r3, #0]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d907      	bls.n	80021ca <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	699a      	ldr	r2, [r3, #24]
 80021be:	187b      	adds	r3, r7, r1
 80021c0:	881b      	ldrh	r3, [r3, #0]
 80021c2:	1ad2      	subs	r2, r2, r3
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	619a      	str	r2, [r3, #24]
 80021c8:	e002      	b.n	80021d0 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	2200      	movs	r2, #0
 80021ce:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d000      	beq.n	80021da <HAL_PCD_EP_DB_Transmit+0x72>
 80021d8:	e0b5      	b.n	8002346 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	785b      	ldrb	r3, [r3, #1]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d125      	bne.n	800222e <HAL_PCD_EP_DB_Transmit+0xc6>
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2250      	movs	r2, #80	; 0x50
 80021ee:	5a9b      	ldrh	r3, [r3, r2]
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	001a      	movs	r2, r3
 80021f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021f6:	189b      	adds	r3, r3, r2
 80021f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	00da      	lsls	r2, r3, #3
 8002200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002202:	18d3      	adds	r3, r2, r3
 8002204:	4ab6      	ldr	r2, [pc, #728]	; (80024e0 <HAL_PCD_EP_DB_Transmit+0x378>)
 8002206:	4694      	mov	ip, r2
 8002208:	4463      	add	r3, ip
 800220a:	62bb      	str	r3, [r7, #40]	; 0x28
 800220c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800220e:	881b      	ldrh	r3, [r3, #0]
 8002210:	b29b      	uxth	r3, r3
 8002212:	059b      	lsls	r3, r3, #22
 8002214:	0d9b      	lsrs	r3, r3, #22
 8002216:	b29a      	uxth	r2, r3
 8002218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800221a:	801a      	strh	r2, [r3, #0]
 800221c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800221e:	881b      	ldrh	r3, [r3, #0]
 8002220:	b29b      	uxth	r3, r3
 8002222:	4ab0      	ldr	r2, [pc, #704]	; (80024e4 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8002224:	4313      	orrs	r3, r2
 8002226:	b29a      	uxth	r2, r3
 8002228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800222a:	801a      	strh	r2, [r3, #0]
 800222c:	e01b      	b.n	8002266 <HAL_PCD_EP_DB_Transmit+0xfe>
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	785b      	ldrb	r3, [r3, #1]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d117      	bne.n	8002266 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	637b      	str	r3, [r7, #52]	; 0x34
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2250      	movs	r2, #80	; 0x50
 8002242:	5a9b      	ldrh	r3, [r3, r2]
 8002244:	b29b      	uxth	r3, r3
 8002246:	001a      	movs	r2, r3
 8002248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800224a:	189b      	adds	r3, r3, r2
 800224c:	637b      	str	r3, [r7, #52]	; 0x34
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	00da      	lsls	r2, r3, #3
 8002254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002256:	18d3      	adds	r3, r2, r3
 8002258:	4aa1      	ldr	r2, [pc, #644]	; (80024e0 <HAL_PCD_EP_DB_Transmit+0x378>)
 800225a:	4694      	mov	ip, r2
 800225c:	4463      	add	r3, ip
 800225e:	633b      	str	r3, [r7, #48]	; 0x30
 8002260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002262:	2200      	movs	r2, #0
 8002264:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	627b      	str	r3, [r7, #36]	; 0x24
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	785b      	ldrb	r3, [r3, #1]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d125      	bne.n	80022c0 <HAL_PCD_EP_DB_Transmit+0x158>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	61fb      	str	r3, [r7, #28]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2250      	movs	r2, #80	; 0x50
 8002280:	5a9b      	ldrh	r3, [r3, r2]
 8002282:	b29b      	uxth	r3, r3
 8002284:	001a      	movs	r2, r3
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	189b      	adds	r3, r3, r2
 800228a:	61fb      	str	r3, [r7, #28]
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	00da      	lsls	r2, r3, #3
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	18d3      	adds	r3, r2, r3
 8002296:	4a94      	ldr	r2, [pc, #592]	; (80024e8 <HAL_PCD_EP_DB_Transmit+0x380>)
 8002298:	4694      	mov	ip, r2
 800229a:	4463      	add	r3, ip
 800229c:	61bb      	str	r3, [r7, #24]
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	881b      	ldrh	r3, [r3, #0]
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	059b      	lsls	r3, r3, #22
 80022a6:	0d9b      	lsrs	r3, r3, #22
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	801a      	strh	r2, [r3, #0]
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	881b      	ldrh	r3, [r3, #0]
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	4a8b      	ldr	r2, [pc, #556]	; (80024e4 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	801a      	strh	r2, [r3, #0]
 80022be:	e018      	b.n	80022f2 <HAL_PCD_EP_DB_Transmit+0x18a>
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	785b      	ldrb	r3, [r3, #1]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d114      	bne.n	80022f2 <HAL_PCD_EP_DB_Transmit+0x18a>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2250      	movs	r2, #80	; 0x50
 80022ce:	5a9b      	ldrh	r3, [r3, r2]
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	001a      	movs	r2, r3
 80022d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d6:	189b      	adds	r3, r3, r2
 80022d8:	627b      	str	r3, [r7, #36]	; 0x24
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	00da      	lsls	r2, r3, #3
 80022e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e2:	18d3      	adds	r3, r2, r3
 80022e4:	4a80      	ldr	r2, [pc, #512]	; (80024e8 <HAL_PCD_EP_DB_Transmit+0x380>)
 80022e6:	4694      	mov	ip, r2
 80022e8:	4463      	add	r3, ip
 80022ea:	623b      	str	r3, [r7, #32]
 80022ec:	6a3b      	ldr	r3, [r7, #32]
 80022ee:	2200      	movs	r2, #0
 80022f0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	781a      	ldrb	r2, [r3, #0]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	0011      	movs	r1, r2
 80022fa:	0018      	movs	r0, r3
 80022fc:	f006 fba6 	bl	8008a4c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002300:	1dbb      	adds	r3, r7, #6
 8002302:	881a      	ldrh	r2, [r3, #0]
 8002304:	2380      	movs	r3, #128	; 0x80
 8002306:	01db      	lsls	r3, r3, #7
 8002308:	4013      	ands	r3, r2
 800230a:	d100      	bne.n	800230e <HAL_PCD_EP_DB_Transmit+0x1a6>
 800230c:	e309      	b.n	8002922 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	001a      	movs	r2, r3
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	18d3      	adds	r3, r2, r3
 800231c:	881b      	ldrh	r3, [r3, #0]
 800231e:	b29a      	uxth	r2, r3
 8002320:	2016      	movs	r0, #22
 8002322:	183b      	adds	r3, r7, r0
 8002324:	4971      	ldr	r1, [pc, #452]	; (80024ec <HAL_PCD_EP_DB_Transmit+0x384>)
 8002326:	400a      	ands	r2, r1
 8002328:	801a      	strh	r2, [r3, #0]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	001a      	movs	r2, r3
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	18d3      	adds	r3, r2, r3
 8002338:	183a      	adds	r2, r7, r0
 800233a:	8812      	ldrh	r2, [r2, #0]
 800233c:	496c      	ldr	r1, [pc, #432]	; (80024f0 <HAL_PCD_EP_DB_Transmit+0x388>)
 800233e:	430a      	orrs	r2, r1
 8002340:	b292      	uxth	r2, r2
 8002342:	801a      	strh	r2, [r3, #0]
 8002344:	e2ed      	b.n	8002922 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002346:	1dbb      	adds	r3, r7, #6
 8002348:	881a      	ldrh	r2, [r3, #0]
 800234a:	2380      	movs	r3, #128	; 0x80
 800234c:	01db      	lsls	r3, r3, #7
 800234e:	4013      	ands	r3, r2
 8002350:	d01a      	beq.n	8002388 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	001a      	movs	r2, r3
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	18d3      	adds	r3, r2, r3
 8002360:	881b      	ldrh	r3, [r3, #0]
 8002362:	b29a      	uxth	r2, r3
 8002364:	208a      	movs	r0, #138	; 0x8a
 8002366:	183b      	adds	r3, r7, r0
 8002368:	4960      	ldr	r1, [pc, #384]	; (80024ec <HAL_PCD_EP_DB_Transmit+0x384>)
 800236a:	400a      	ands	r2, r1
 800236c:	801a      	strh	r2, [r3, #0]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	001a      	movs	r2, r3
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	18d3      	adds	r3, r2, r3
 800237c:	183a      	adds	r2, r7, r0
 800237e:	8812      	ldrh	r2, [r2, #0]
 8002380:	495b      	ldr	r1, [pc, #364]	; (80024f0 <HAL_PCD_EP_DB_Transmit+0x388>)
 8002382:	430a      	orrs	r2, r1
 8002384:	b292      	uxth	r2, r2
 8002386:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	2224      	movs	r2, #36	; 0x24
 800238c:	5c9b      	ldrb	r3, [r3, r2]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d000      	beq.n	8002394 <HAL_PCD_EP_DB_Transmit+0x22c>
 8002392:	e2c6      	b.n	8002922 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	695a      	ldr	r2, [r3, #20]
 8002398:	2186      	movs	r1, #134	; 0x86
 800239a:	187b      	adds	r3, r7, r1
 800239c:	881b      	ldrh	r3, [r3, #0]
 800239e:	18d2      	adds	r2, r2, r3
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	69da      	ldr	r2, [r3, #28]
 80023a8:	187b      	adds	r3, r7, r1
 80023aa:	881b      	ldrh	r3, [r3, #0]
 80023ac:	18d2      	adds	r2, r2, r3
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	6a1a      	ldr	r2, [r3, #32]
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d30c      	bcc.n	80023d8 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	218c      	movs	r1, #140	; 0x8c
 80023c4:	187a      	adds	r2, r7, r1
 80023c6:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	6a1a      	ldr	r2, [r3, #32]
 80023cc:	187b      	adds	r3, r7, r1
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	1ad2      	subs	r2, r2, r3
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	621a      	str	r2, [r3, #32]
 80023d6:	e01a      	b.n	800240e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d10a      	bne.n	80023f6 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 80023e0:	2386      	movs	r3, #134	; 0x86
 80023e2:	18fb      	adds	r3, r7, r3
 80023e4:	881b      	ldrh	r3, [r3, #0]
 80023e6:	228c      	movs	r2, #140	; 0x8c
 80023e8:	18ba      	adds	r2, r7, r2
 80023ea:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	2224      	movs	r2, #36	; 0x24
 80023f0:	2100      	movs	r1, #0
 80023f2:	5499      	strb	r1, [r3, r2]
 80023f4:	e00b      	b.n	800240e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	2224      	movs	r2, #36	; 0x24
 80023fa:	2100      	movs	r1, #0
 80023fc:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	228c      	movs	r2, #140	; 0x8c
 8002404:	18ba      	adds	r2, r7, r2
 8002406:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	2200      	movs	r2, #0
 800240c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	785b      	ldrb	r3, [r3, #1]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d000      	beq.n	8002418 <HAL_PCD_EP_DB_Transmit+0x2b0>
 8002416:	e06d      	b.n	80024f4 <HAL_PCD_EP_DB_Transmit+0x38c>
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2250      	movs	r2, #80	; 0x50
 8002424:	5a9b      	ldrh	r3, [r3, r2]
 8002426:	b29b      	uxth	r3, r3
 8002428:	001a      	movs	r2, r3
 800242a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800242c:	189b      	adds	r3, r3, r2
 800242e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	00da      	lsls	r2, r3, #3
 8002436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002438:	18d3      	adds	r3, r2, r3
 800243a:	4a29      	ldr	r2, [pc, #164]	; (80024e0 <HAL_PCD_EP_DB_Transmit+0x378>)
 800243c:	4694      	mov	ip, r2
 800243e:	4463      	add	r3, ip
 8002440:	63bb      	str	r3, [r7, #56]	; 0x38
 8002442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002444:	881b      	ldrh	r3, [r3, #0]
 8002446:	b29b      	uxth	r3, r3
 8002448:	059b      	lsls	r3, r3, #22
 800244a:	0d9b      	lsrs	r3, r3, #22
 800244c:	b29a      	uxth	r2, r3
 800244e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002450:	801a      	strh	r2, [r3, #0]
 8002452:	228c      	movs	r2, #140	; 0x8c
 8002454:	18bb      	adds	r3, r7, r2
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2b3e      	cmp	r3, #62	; 0x3e
 800245a:	d91a      	bls.n	8002492 <HAL_PCD_EP_DB_Transmit+0x32a>
 800245c:	18bb      	adds	r3, r7, r2
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	095b      	lsrs	r3, r3, #5
 8002462:	64bb      	str	r3, [r7, #72]	; 0x48
 8002464:	18bb      	adds	r3, r7, r2
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	221f      	movs	r2, #31
 800246a:	4013      	ands	r3, r2
 800246c:	d102      	bne.n	8002474 <HAL_PCD_EP_DB_Transmit+0x30c>
 800246e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002470:	3b01      	subs	r3, #1
 8002472:	64bb      	str	r3, [r7, #72]	; 0x48
 8002474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002476:	881b      	ldrh	r3, [r3, #0]
 8002478:	b29a      	uxth	r2, r3
 800247a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800247c:	b29b      	uxth	r3, r3
 800247e:	029b      	lsls	r3, r3, #10
 8002480:	b29b      	uxth	r3, r3
 8002482:	4313      	orrs	r3, r2
 8002484:	b29b      	uxth	r3, r3
 8002486:	4a17      	ldr	r2, [pc, #92]	; (80024e4 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8002488:	4313      	orrs	r3, r2
 800248a:	b29a      	uxth	r2, r3
 800248c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800248e:	801a      	strh	r2, [r3, #0]
 8002490:	e04f      	b.n	8002532 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8002492:	238c      	movs	r3, #140	; 0x8c
 8002494:	18fb      	adds	r3, r7, r3
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d108      	bne.n	80024ae <HAL_PCD_EP_DB_Transmit+0x346>
 800249c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800249e:	881b      	ldrh	r3, [r3, #0]
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	4a10      	ldr	r2, [pc, #64]	; (80024e4 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024aa:	801a      	strh	r2, [r3, #0]
 80024ac:	e041      	b.n	8002532 <HAL_PCD_EP_DB_Transmit+0x3ca>
 80024ae:	228c      	movs	r2, #140	; 0x8c
 80024b0:	18bb      	adds	r3, r7, r2
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	085b      	lsrs	r3, r3, #1
 80024b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80024b8:	18bb      	adds	r3, r7, r2
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2201      	movs	r2, #1
 80024be:	4013      	ands	r3, r2
 80024c0:	d002      	beq.n	80024c8 <HAL_PCD_EP_DB_Transmit+0x360>
 80024c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024c4:	3301      	adds	r3, #1
 80024c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80024c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ca:	881b      	ldrh	r3, [r3, #0]
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	029b      	lsls	r3, r3, #10
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	4313      	orrs	r3, r2
 80024d8:	b29a      	uxth	r2, r3
 80024da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024dc:	801a      	strh	r2, [r3, #0]
 80024de:	e028      	b.n	8002532 <HAL_PCD_EP_DB_Transmit+0x3ca>
 80024e0:	00000402 	.word	0x00000402
 80024e4:	ffff8000 	.word	0xffff8000
 80024e8:	00000406 	.word	0x00000406
 80024ec:	ffff8f8f 	.word	0xffff8f8f
 80024f0:	ffffc080 	.word	0xffffc080
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	785b      	ldrb	r3, [r3, #1]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d11a      	bne.n	8002532 <HAL_PCD_EP_DB_Transmit+0x3ca>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	647b      	str	r3, [r7, #68]	; 0x44
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2250      	movs	r2, #80	; 0x50
 8002508:	5a9b      	ldrh	r3, [r3, r2]
 800250a:	b29b      	uxth	r3, r3
 800250c:	001a      	movs	r2, r3
 800250e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002510:	189b      	adds	r3, r3, r2
 8002512:	647b      	str	r3, [r7, #68]	; 0x44
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	00da      	lsls	r2, r3, #3
 800251a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800251c:	18d3      	adds	r3, r2, r3
 800251e:	4adb      	ldr	r2, [pc, #876]	; (800288c <HAL_PCD_EP_DB_Transmit+0x724>)
 8002520:	4694      	mov	ip, r2
 8002522:	4463      	add	r3, ip
 8002524:	643b      	str	r3, [r7, #64]	; 0x40
 8002526:	238c      	movs	r3, #140	; 0x8c
 8002528:	18fb      	adds	r3, r7, r3
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	b29a      	uxth	r2, r3
 800252e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002530:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6818      	ldr	r0, [r3, #0]
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	6959      	ldr	r1, [r3, #20]
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	891a      	ldrh	r2, [r3, #8]
 800253e:	238c      	movs	r3, #140	; 0x8c
 8002540:	18fb      	adds	r3, r7, r3
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	b29b      	uxth	r3, r3
 8002546:	f003 fa0f 	bl	8005968 <USB_WritePMA>
 800254a:	e1ea      	b.n	8002922 <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2250      	movs	r2, #80	; 0x50
 8002552:	5a9b      	ldrh	r3, [r3, r2]
 8002554:	b29b      	uxth	r3, r3
 8002556:	001a      	movs	r2, r3
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	18d2      	adds	r2, r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	18d3      	adds	r3, r2, r3
 8002566:	4aca      	ldr	r2, [pc, #808]	; (8002890 <HAL_PCD_EP_DB_Transmit+0x728>)
 8002568:	4694      	mov	ip, r2
 800256a:	4463      	add	r3, ip
 800256c:	881a      	ldrh	r2, [r3, #0]
 800256e:	2186      	movs	r1, #134	; 0x86
 8002570:	187b      	adds	r3, r7, r1
 8002572:	0592      	lsls	r2, r2, #22
 8002574:	0d92      	lsrs	r2, r2, #22
 8002576:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	699a      	ldr	r2, [r3, #24]
 800257c:	187b      	adds	r3, r7, r1
 800257e:	881b      	ldrh	r3, [r3, #0]
 8002580:	429a      	cmp	r2, r3
 8002582:	d307      	bcc.n	8002594 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	699a      	ldr	r2, [r3, #24]
 8002588:	187b      	adds	r3, r7, r1
 800258a:	881b      	ldrh	r3, [r3, #0]
 800258c:	1ad2      	subs	r2, r2, r3
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	619a      	str	r2, [r3, #24]
 8002592:	e002      	b.n	800259a <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	2200      	movs	r2, #0
 8002598:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d000      	beq.n	80025a4 <HAL_PCD_EP_DB_Transmit+0x43c>
 80025a2:	e0bb      	b.n	800271c <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	785b      	ldrb	r3, [r3, #1]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d125      	bne.n	80025f8 <HAL_PCD_EP_DB_Transmit+0x490>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2250      	movs	r2, #80	; 0x50
 80025b8:	5a9b      	ldrh	r3, [r3, r2]
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	001a      	movs	r2, r3
 80025be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025c0:	189b      	adds	r3, r3, r2
 80025c2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	00da      	lsls	r2, r3, #3
 80025ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025cc:	18d3      	adds	r3, r2, r3
 80025ce:	4aaf      	ldr	r2, [pc, #700]	; (800288c <HAL_PCD_EP_DB_Transmit+0x724>)
 80025d0:	4694      	mov	ip, r2
 80025d2:	4463      	add	r3, ip
 80025d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80025d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025d8:	881b      	ldrh	r3, [r3, #0]
 80025da:	b29b      	uxth	r3, r3
 80025dc:	059b      	lsls	r3, r3, #22
 80025de:	0d9b      	lsrs	r3, r3, #22
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025e4:	801a      	strh	r2, [r3, #0]
 80025e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025e8:	881b      	ldrh	r3, [r3, #0]
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	4aa9      	ldr	r2, [pc, #676]	; (8002894 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025f4:	801a      	strh	r2, [r3, #0]
 80025f6:	e01b      	b.n	8002630 <HAL_PCD_EP_DB_Transmit+0x4c8>
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	785b      	ldrb	r3, [r3, #1]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d117      	bne.n	8002630 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	667b      	str	r3, [r7, #100]	; 0x64
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2250      	movs	r2, #80	; 0x50
 800260c:	5a9b      	ldrh	r3, [r3, r2]
 800260e:	b29b      	uxth	r3, r3
 8002610:	001a      	movs	r2, r3
 8002612:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002614:	189b      	adds	r3, r3, r2
 8002616:	667b      	str	r3, [r7, #100]	; 0x64
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	00da      	lsls	r2, r3, #3
 800261e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002620:	18d3      	adds	r3, r2, r3
 8002622:	4a9a      	ldr	r2, [pc, #616]	; (800288c <HAL_PCD_EP_DB_Transmit+0x724>)
 8002624:	4694      	mov	ip, r2
 8002626:	4463      	add	r3, ip
 8002628:	663b      	str	r3, [r7, #96]	; 0x60
 800262a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800262c:	2200      	movs	r2, #0
 800262e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	677b      	str	r3, [r7, #116]	; 0x74
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	785b      	ldrb	r3, [r3, #1]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d12b      	bne.n	8002696 <HAL_PCD_EP_DB_Transmit+0x52e>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2250      	movs	r2, #80	; 0x50
 800264a:	5a9b      	ldrh	r3, [r3, r2]
 800264c:	b29b      	uxth	r3, r3
 800264e:	001a      	movs	r2, r3
 8002650:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002652:	189b      	adds	r3, r3, r2
 8002654:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	00da      	lsls	r2, r3, #3
 800265c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800265e:	18d3      	adds	r3, r2, r3
 8002660:	4a8b      	ldr	r2, [pc, #556]	; (8002890 <HAL_PCD_EP_DB_Transmit+0x728>)
 8002662:	4694      	mov	ip, r2
 8002664:	4463      	add	r3, ip
 8002666:	2180      	movs	r1, #128	; 0x80
 8002668:	187a      	adds	r2, r7, r1
 800266a:	6013      	str	r3, [r2, #0]
 800266c:	187b      	adds	r3, r7, r1
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	881b      	ldrh	r3, [r3, #0]
 8002672:	b29b      	uxth	r3, r3
 8002674:	059b      	lsls	r3, r3, #22
 8002676:	0d9b      	lsrs	r3, r3, #22
 8002678:	b29a      	uxth	r2, r3
 800267a:	187b      	adds	r3, r7, r1
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	801a      	strh	r2, [r3, #0]
 8002680:	187b      	adds	r3, r7, r1
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	881b      	ldrh	r3, [r3, #0]
 8002686:	b29b      	uxth	r3, r3
 8002688:	4a82      	ldr	r2, [pc, #520]	; (8002894 <HAL_PCD_EP_DB_Transmit+0x72c>)
 800268a:	4313      	orrs	r3, r2
 800268c:	b29a      	uxth	r2, r3
 800268e:	187b      	adds	r3, r7, r1
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	801a      	strh	r2, [r3, #0]
 8002694:	e018      	b.n	80026c8 <HAL_PCD_EP_DB_Transmit+0x560>
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	785b      	ldrb	r3, [r3, #1]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d114      	bne.n	80026c8 <HAL_PCD_EP_DB_Transmit+0x560>
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2250      	movs	r2, #80	; 0x50
 80026a4:	5a9b      	ldrh	r3, [r3, r2]
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	001a      	movs	r2, r3
 80026aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026ac:	189b      	adds	r3, r3, r2
 80026ae:	677b      	str	r3, [r7, #116]	; 0x74
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	00da      	lsls	r2, r3, #3
 80026b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026b8:	18d3      	adds	r3, r2, r3
 80026ba:	4a75      	ldr	r2, [pc, #468]	; (8002890 <HAL_PCD_EP_DB_Transmit+0x728>)
 80026bc:	4694      	mov	ip, r2
 80026be:	4463      	add	r3, ip
 80026c0:	673b      	str	r3, [r7, #112]	; 0x70
 80026c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026c4:	2200      	movs	r2, #0
 80026c6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	781a      	ldrb	r2, [r3, #0]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	0011      	movs	r1, r2
 80026d0:	0018      	movs	r0, r3
 80026d2:	f006 f9bb 	bl	8008a4c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80026d6:	1dbb      	adds	r3, r7, #6
 80026d8:	881a      	ldrh	r2, [r3, #0]
 80026da:	2380      	movs	r3, #128	; 0x80
 80026dc:	01db      	lsls	r3, r3, #7
 80026de:	4013      	ands	r3, r2
 80026e0:	d000      	beq.n	80026e4 <HAL_PCD_EP_DB_Transmit+0x57c>
 80026e2:	e11e      	b.n	8002922 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	001a      	movs	r2, r3
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	18d3      	adds	r3, r2, r3
 80026f2:	881b      	ldrh	r3, [r3, #0]
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	2088      	movs	r0, #136	; 0x88
 80026f8:	183b      	adds	r3, r7, r0
 80026fa:	4967      	ldr	r1, [pc, #412]	; (8002898 <HAL_PCD_EP_DB_Transmit+0x730>)
 80026fc:	400a      	ands	r2, r1
 80026fe:	801a      	strh	r2, [r3, #0]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	001a      	movs	r2, r3
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	18d3      	adds	r3, r2, r3
 800270e:	183a      	adds	r2, r7, r0
 8002710:	8812      	ldrh	r2, [r2, #0]
 8002712:	4962      	ldr	r1, [pc, #392]	; (800289c <HAL_PCD_EP_DB_Transmit+0x734>)
 8002714:	430a      	orrs	r2, r1
 8002716:	b292      	uxth	r2, r2
 8002718:	801a      	strh	r2, [r3, #0]
 800271a:	e102      	b.n	8002922 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800271c:	1dbb      	adds	r3, r7, #6
 800271e:	881a      	ldrh	r2, [r3, #0]
 8002720:	2380      	movs	r3, #128	; 0x80
 8002722:	01db      	lsls	r3, r3, #7
 8002724:	4013      	ands	r3, r2
 8002726:	d11a      	bne.n	800275e <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	001a      	movs	r2, r3
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	18d3      	adds	r3, r2, r3
 8002736:	881b      	ldrh	r3, [r3, #0]
 8002738:	b29a      	uxth	r2, r3
 800273a:	204e      	movs	r0, #78	; 0x4e
 800273c:	183b      	adds	r3, r7, r0
 800273e:	4956      	ldr	r1, [pc, #344]	; (8002898 <HAL_PCD_EP_DB_Transmit+0x730>)
 8002740:	400a      	ands	r2, r1
 8002742:	801a      	strh	r2, [r3, #0]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	001a      	movs	r2, r3
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	18d3      	adds	r3, r2, r3
 8002752:	183a      	adds	r2, r7, r0
 8002754:	8812      	ldrh	r2, [r2, #0]
 8002756:	4951      	ldr	r1, [pc, #324]	; (800289c <HAL_PCD_EP_DB_Transmit+0x734>)
 8002758:	430a      	orrs	r2, r1
 800275a:	b292      	uxth	r2, r2
 800275c:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	2224      	movs	r2, #36	; 0x24
 8002762:	5c9b      	ldrb	r3, [r3, r2]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d000      	beq.n	800276a <HAL_PCD_EP_DB_Transmit+0x602>
 8002768:	e0db      	b.n	8002922 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	695a      	ldr	r2, [r3, #20]
 800276e:	2186      	movs	r1, #134	; 0x86
 8002770:	187b      	adds	r3, r7, r1
 8002772:	881b      	ldrh	r3, [r3, #0]
 8002774:	18d2      	adds	r2, r2, r3
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	69da      	ldr	r2, [r3, #28]
 800277e:	187b      	adds	r3, r7, r1
 8002780:	881b      	ldrh	r3, [r3, #0]
 8002782:	18d2      	adds	r2, r2, r3
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	6a1a      	ldr	r2, [r3, #32]
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	429a      	cmp	r2, r3
 8002792:	d30c      	bcc.n	80027ae <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	218c      	movs	r1, #140	; 0x8c
 800279a:	187a      	adds	r2, r7, r1
 800279c:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	6a1a      	ldr	r2, [r3, #32]
 80027a2:	187b      	adds	r3, r7, r1
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	1ad2      	subs	r2, r2, r3
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	621a      	str	r2, [r3, #32]
 80027ac:	e01a      	b.n	80027e4 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	6a1b      	ldr	r3, [r3, #32]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d10a      	bne.n	80027cc <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 80027b6:	2386      	movs	r3, #134	; 0x86
 80027b8:	18fb      	adds	r3, r7, r3
 80027ba:	881b      	ldrh	r3, [r3, #0]
 80027bc:	228c      	movs	r2, #140	; 0x8c
 80027be:	18ba      	adds	r2, r7, r2
 80027c0:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	2224      	movs	r2, #36	; 0x24
 80027c6:	2100      	movs	r1, #0
 80027c8:	5499      	strb	r1, [r3, r2]
 80027ca:	e00b      	b.n	80027e4 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	6a1b      	ldr	r3, [r3, #32]
 80027d0:	228c      	movs	r2, #140	; 0x8c
 80027d2:	18ba      	adds	r2, r7, r2
 80027d4:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	2200      	movs	r2, #0
 80027da:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	2224      	movs	r2, #36	; 0x24
 80027e0:	2100      	movs	r1, #0
 80027e2:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	657b      	str	r3, [r7, #84]	; 0x54
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	785b      	ldrb	r3, [r3, #1]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d000      	beq.n	80027f4 <HAL_PCD_EP_DB_Transmit+0x68c>
 80027f2:	e06e      	b.n	80028d2 <HAL_PCD_EP_DB_Transmit+0x76a>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2250      	movs	r2, #80	; 0x50
 8002800:	5a9b      	ldrh	r3, [r3, r2]
 8002802:	b29b      	uxth	r3, r3
 8002804:	001a      	movs	r2, r3
 8002806:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002808:	189b      	adds	r3, r3, r2
 800280a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	00da      	lsls	r2, r3, #3
 8002812:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002814:	18d3      	adds	r3, r2, r3
 8002816:	4a1e      	ldr	r2, [pc, #120]	; (8002890 <HAL_PCD_EP_DB_Transmit+0x728>)
 8002818:	4694      	mov	ip, r2
 800281a:	4463      	add	r3, ip
 800281c:	65bb      	str	r3, [r7, #88]	; 0x58
 800281e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002820:	881b      	ldrh	r3, [r3, #0]
 8002822:	b29b      	uxth	r3, r3
 8002824:	059b      	lsls	r3, r3, #22
 8002826:	0d9b      	lsrs	r3, r3, #22
 8002828:	b29a      	uxth	r2, r3
 800282a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800282c:	801a      	strh	r2, [r3, #0]
 800282e:	228c      	movs	r2, #140	; 0x8c
 8002830:	18bb      	adds	r3, r7, r2
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2b3e      	cmp	r3, #62	; 0x3e
 8002836:	d91a      	bls.n	800286e <HAL_PCD_EP_DB_Transmit+0x706>
 8002838:	18bb      	adds	r3, r7, r2
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	095b      	lsrs	r3, r3, #5
 800283e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002840:	18bb      	adds	r3, r7, r2
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	221f      	movs	r2, #31
 8002846:	4013      	ands	r3, r2
 8002848:	d102      	bne.n	8002850 <HAL_PCD_EP_DB_Transmit+0x6e8>
 800284a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800284c:	3b01      	subs	r3, #1
 800284e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002850:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002852:	881b      	ldrh	r3, [r3, #0]
 8002854:	b29a      	uxth	r2, r3
 8002856:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002858:	b29b      	uxth	r3, r3
 800285a:	029b      	lsls	r3, r3, #10
 800285c:	b29b      	uxth	r3, r3
 800285e:	4313      	orrs	r3, r2
 8002860:	b29b      	uxth	r3, r3
 8002862:	4a0c      	ldr	r2, [pc, #48]	; (8002894 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8002864:	4313      	orrs	r3, r2
 8002866:	b29a      	uxth	r2, r3
 8002868:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800286a:	801a      	strh	r2, [r3, #0]
 800286c:	e04d      	b.n	800290a <HAL_PCD_EP_DB_Transmit+0x7a2>
 800286e:	238c      	movs	r3, #140	; 0x8c
 8002870:	18fb      	adds	r3, r7, r3
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d113      	bne.n	80028a0 <HAL_PCD_EP_DB_Transmit+0x738>
 8002878:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800287a:	881b      	ldrh	r3, [r3, #0]
 800287c:	b29b      	uxth	r3, r3
 800287e:	4a05      	ldr	r2, [pc, #20]	; (8002894 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8002880:	4313      	orrs	r3, r2
 8002882:	b29a      	uxth	r2, r3
 8002884:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002886:	801a      	strh	r2, [r3, #0]
 8002888:	e03f      	b.n	800290a <HAL_PCD_EP_DB_Transmit+0x7a2>
 800288a:	46c0      	nop			; (mov r8, r8)
 800288c:	00000402 	.word	0x00000402
 8002890:	00000406 	.word	0x00000406
 8002894:	ffff8000 	.word	0xffff8000
 8002898:	ffff8f8f 	.word	0xffff8f8f
 800289c:	ffffc080 	.word	0xffffc080
 80028a0:	228c      	movs	r2, #140	; 0x8c
 80028a2:	18bb      	adds	r3, r7, r2
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	085b      	lsrs	r3, r3, #1
 80028a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80028aa:	18bb      	adds	r3, r7, r2
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2201      	movs	r2, #1
 80028b0:	4013      	ands	r3, r2
 80028b2:	d002      	beq.n	80028ba <HAL_PCD_EP_DB_Transmit+0x752>
 80028b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028b6:	3301      	adds	r3, #1
 80028b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80028ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028bc:	881b      	ldrh	r3, [r3, #0]
 80028be:	b29a      	uxth	r2, r3
 80028c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	029b      	lsls	r3, r3, #10
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	4313      	orrs	r3, r2
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028ce:	801a      	strh	r2, [r3, #0]
 80028d0:	e01b      	b.n	800290a <HAL_PCD_EP_DB_Transmit+0x7a2>
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	785b      	ldrb	r3, [r3, #1]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d117      	bne.n	800290a <HAL_PCD_EP_DB_Transmit+0x7a2>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2250      	movs	r2, #80	; 0x50
 80028e0:	5a9b      	ldrh	r3, [r3, r2]
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	001a      	movs	r2, r3
 80028e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028e8:	189b      	adds	r3, r3, r2
 80028ea:	657b      	str	r3, [r7, #84]	; 0x54
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	00da      	lsls	r2, r3, #3
 80028f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028f4:	18d3      	adds	r3, r2, r3
 80028f6:	4a21      	ldr	r2, [pc, #132]	; (800297c <HAL_PCD_EP_DB_Transmit+0x814>)
 80028f8:	4694      	mov	ip, r2
 80028fa:	4463      	add	r3, ip
 80028fc:	653b      	str	r3, [r7, #80]	; 0x50
 80028fe:	238c      	movs	r3, #140	; 0x8c
 8002900:	18fb      	adds	r3, r7, r3
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	b29a      	uxth	r2, r3
 8002906:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002908:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6818      	ldr	r0, [r3, #0]
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	6959      	ldr	r1, [r3, #20]
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	895a      	ldrh	r2, [r3, #10]
 8002916:	238c      	movs	r3, #140	; 0x8c
 8002918:	18fb      	adds	r3, r7, r3
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	b29b      	uxth	r3, r3
 800291e:	f003 f823 	bl	8005968 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	001a      	movs	r2, r3
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	18d3      	adds	r3, r2, r3
 8002930:	881b      	ldrh	r3, [r3, #0]
 8002932:	b29a      	uxth	r2, r3
 8002934:	2014      	movs	r0, #20
 8002936:	183b      	adds	r3, r7, r0
 8002938:	4911      	ldr	r1, [pc, #68]	; (8002980 <HAL_PCD_EP_DB_Transmit+0x818>)
 800293a:	400a      	ands	r2, r1
 800293c:	801a      	strh	r2, [r3, #0]
 800293e:	183b      	adds	r3, r7, r0
 8002940:	183a      	adds	r2, r7, r0
 8002942:	8812      	ldrh	r2, [r2, #0]
 8002944:	2110      	movs	r1, #16
 8002946:	404a      	eors	r2, r1
 8002948:	801a      	strh	r2, [r3, #0]
 800294a:	183b      	adds	r3, r7, r0
 800294c:	183a      	adds	r2, r7, r0
 800294e:	8812      	ldrh	r2, [r2, #0]
 8002950:	2120      	movs	r1, #32
 8002952:	404a      	eors	r2, r1
 8002954:	801a      	strh	r2, [r3, #0]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	001a      	movs	r2, r3
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	18d3      	adds	r3, r2, r3
 8002964:	183a      	adds	r2, r7, r0
 8002966:	8812      	ldrh	r2, [r2, #0]
 8002968:	4906      	ldr	r1, [pc, #24]	; (8002984 <HAL_PCD_EP_DB_Transmit+0x81c>)
 800296a:	430a      	orrs	r2, r1
 800296c:	b292      	uxth	r2, r2
 800296e:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	0018      	movs	r0, r3
 8002974:	46bd      	mov	sp, r7
 8002976:	b024      	add	sp, #144	; 0x90
 8002978:	bd80      	pop	{r7, pc}
 800297a:	46c0      	nop			; (mov r8, r8)
 800297c:	00000406 	.word	0x00000406
 8002980:	ffff8fbf 	.word	0xffff8fbf
 8002984:	ffff8080 	.word	0xffff8080

08002988 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002988:	b590      	push	{r4, r7, lr}
 800298a:	b087      	sub	sp, #28
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	0008      	movs	r0, r1
 8002992:	0011      	movs	r1, r2
 8002994:	607b      	str	r3, [r7, #4]
 8002996:	240a      	movs	r4, #10
 8002998:	193b      	adds	r3, r7, r4
 800299a:	1c02      	adds	r2, r0, #0
 800299c:	801a      	strh	r2, [r3, #0]
 800299e:	2308      	movs	r3, #8
 80029a0:	18fb      	adds	r3, r7, r3
 80029a2:	1c0a      	adds	r2, r1, #0
 80029a4:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80029a6:	0021      	movs	r1, r4
 80029a8:	187b      	adds	r3, r7, r1
 80029aa:	881b      	ldrh	r3, [r3, #0]
 80029ac:	2280      	movs	r2, #128	; 0x80
 80029ae:	4013      	ands	r3, r2
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00c      	beq.n	80029d0 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029b6:	187b      	adds	r3, r7, r1
 80029b8:	881b      	ldrh	r3, [r3, #0]
 80029ba:	2207      	movs	r2, #7
 80029bc:	4013      	ands	r3, r2
 80029be:	1c5a      	adds	r2, r3, #1
 80029c0:	0013      	movs	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	189b      	adds	r3, r3, r2
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	18d3      	adds	r3, r2, r3
 80029cc:	617b      	str	r3, [r7, #20]
 80029ce:	e00b      	b.n	80029e8 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80029d0:	230a      	movs	r3, #10
 80029d2:	18fb      	adds	r3, r7, r3
 80029d4:	881a      	ldrh	r2, [r3, #0]
 80029d6:	0013      	movs	r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	189b      	adds	r3, r3, r2
 80029dc:	00db      	lsls	r3, r3, #3
 80029de:	3369      	adds	r3, #105	; 0x69
 80029e0:	33ff      	adds	r3, #255	; 0xff
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	18d3      	adds	r3, r2, r3
 80029e6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80029e8:	2308      	movs	r3, #8
 80029ea:	18fb      	adds	r3, r7, r3
 80029ec:	881b      	ldrh	r3, [r3, #0]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d107      	bne.n	8002a02 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	2200      	movs	r2, #0
 80029f6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	80da      	strh	r2, [r3, #6]
 8002a00:	e00b      	b.n	8002a1a <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	2201      	movs	r2, #1
 8002a06:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	0c1b      	lsrs	r3, r3, #16
 8002a14:	b29a      	uxth	r2, r3
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	b007      	add	sp, #28
 8002a22:	bd90      	pop	{r4, r7, pc}

08002a24 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	23ba      	movs	r3, #186	; 0xba
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	2101      	movs	r1, #1
 8002a3a:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	23b8      	movs	r3, #184	; 0xb8
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	2100      	movs	r1, #0
 8002a44:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2254      	movs	r2, #84	; 0x54
 8002a4a:	5a9b      	ldrh	r3, [r3, r2]
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	2201      	movs	r2, #1
 8002a50:	4313      	orrs	r3, r2
 8002a52:	b299      	uxth	r1, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2254      	movs	r2, #84	; 0x54
 8002a58:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2254      	movs	r2, #84	; 0x54
 8002a5e:	5a9b      	ldrh	r3, [r3, r2]
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	2202      	movs	r2, #2
 8002a64:	4313      	orrs	r3, r2
 8002a66:	b299      	uxth	r1, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2254      	movs	r2, #84	; 0x54
 8002a6c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	0018      	movs	r0, r3
 8002a72:	46bd      	mov	sp, r7
 8002a74:	b004      	add	sp, #16
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	000a      	movs	r2, r1
 8002a82:	1cfb      	adds	r3, r7, #3
 8002a84:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002a86:	46c0      	nop			; (mov r8, r8)
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	b002      	add	sp, #8
 8002a8c:	bd80      	pop	{r7, pc}
	...

08002a90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a90:	b5b0      	push	{r4, r5, r7, lr}
 8002a92:	b08a      	sub	sp, #40	; 0x28
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d102      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	f000 fbaf 	bl	8003202 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002aa4:	4bcf      	ldr	r3, [pc, #828]	; (8002de4 <HAL_RCC_OscConfig+0x354>)
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	220c      	movs	r2, #12
 8002aaa:	4013      	ands	r3, r2
 8002aac:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002aae:	4bcd      	ldr	r3, [pc, #820]	; (8002de4 <HAL_RCC_OscConfig+0x354>)
 8002ab0:	68da      	ldr	r2, [r3, #12]
 8002ab2:	2380      	movs	r3, #128	; 0x80
 8002ab4:	025b      	lsls	r3, r3, #9
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	d100      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x36>
 8002ac4:	e07e      	b.n	8002bc4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ac6:	6a3b      	ldr	r3, [r7, #32]
 8002ac8:	2b08      	cmp	r3, #8
 8002aca:	d007      	beq.n	8002adc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002acc:	6a3b      	ldr	r3, [r7, #32]
 8002ace:	2b0c      	cmp	r3, #12
 8002ad0:	d112      	bne.n	8002af8 <HAL_RCC_OscConfig+0x68>
 8002ad2:	69fa      	ldr	r2, [r7, #28]
 8002ad4:	2380      	movs	r3, #128	; 0x80
 8002ad6:	025b      	lsls	r3, r3, #9
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d10d      	bne.n	8002af8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002adc:	4bc1      	ldr	r3, [pc, #772]	; (8002de4 <HAL_RCC_OscConfig+0x354>)
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	2380      	movs	r3, #128	; 0x80
 8002ae2:	029b      	lsls	r3, r3, #10
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	d100      	bne.n	8002aea <HAL_RCC_OscConfig+0x5a>
 8002ae8:	e06b      	b.n	8002bc2 <HAL_RCC_OscConfig+0x132>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d167      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	f000 fb85 	bl	8003202 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685a      	ldr	r2, [r3, #4]
 8002afc:	2380      	movs	r3, #128	; 0x80
 8002afe:	025b      	lsls	r3, r3, #9
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d107      	bne.n	8002b14 <HAL_RCC_OscConfig+0x84>
 8002b04:	4bb7      	ldr	r3, [pc, #732]	; (8002de4 <HAL_RCC_OscConfig+0x354>)
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	4bb6      	ldr	r3, [pc, #728]	; (8002de4 <HAL_RCC_OscConfig+0x354>)
 8002b0a:	2180      	movs	r1, #128	; 0x80
 8002b0c:	0249      	lsls	r1, r1, #9
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	601a      	str	r2, [r3, #0]
 8002b12:	e027      	b.n	8002b64 <HAL_RCC_OscConfig+0xd4>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685a      	ldr	r2, [r3, #4]
 8002b18:	23a0      	movs	r3, #160	; 0xa0
 8002b1a:	02db      	lsls	r3, r3, #11
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d10e      	bne.n	8002b3e <HAL_RCC_OscConfig+0xae>
 8002b20:	4bb0      	ldr	r3, [pc, #704]	; (8002de4 <HAL_RCC_OscConfig+0x354>)
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	4baf      	ldr	r3, [pc, #700]	; (8002de4 <HAL_RCC_OscConfig+0x354>)
 8002b26:	2180      	movs	r1, #128	; 0x80
 8002b28:	02c9      	lsls	r1, r1, #11
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	601a      	str	r2, [r3, #0]
 8002b2e:	4bad      	ldr	r3, [pc, #692]	; (8002de4 <HAL_RCC_OscConfig+0x354>)
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	4bac      	ldr	r3, [pc, #688]	; (8002de4 <HAL_RCC_OscConfig+0x354>)
 8002b34:	2180      	movs	r1, #128	; 0x80
 8002b36:	0249      	lsls	r1, r1, #9
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	601a      	str	r2, [r3, #0]
 8002b3c:	e012      	b.n	8002b64 <HAL_RCC_OscConfig+0xd4>
 8002b3e:	4ba9      	ldr	r3, [pc, #676]	; (8002de4 <HAL_RCC_OscConfig+0x354>)
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	4ba8      	ldr	r3, [pc, #672]	; (8002de4 <HAL_RCC_OscConfig+0x354>)
 8002b44:	49a8      	ldr	r1, [pc, #672]	; (8002de8 <HAL_RCC_OscConfig+0x358>)
 8002b46:	400a      	ands	r2, r1
 8002b48:	601a      	str	r2, [r3, #0]
 8002b4a:	4ba6      	ldr	r3, [pc, #664]	; (8002de4 <HAL_RCC_OscConfig+0x354>)
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	2380      	movs	r3, #128	; 0x80
 8002b50:	025b      	lsls	r3, r3, #9
 8002b52:	4013      	ands	r3, r2
 8002b54:	60fb      	str	r3, [r7, #12]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	4ba2      	ldr	r3, [pc, #648]	; (8002de4 <HAL_RCC_OscConfig+0x354>)
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	4ba1      	ldr	r3, [pc, #644]	; (8002de4 <HAL_RCC_OscConfig+0x354>)
 8002b5e:	49a3      	ldr	r1, [pc, #652]	; (8002dec <HAL_RCC_OscConfig+0x35c>)
 8002b60:	400a      	ands	r2, r1
 8002b62:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d015      	beq.n	8002b98 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6c:	f7fd fe10 	bl	8000790 <HAL_GetTick>
 8002b70:	0003      	movs	r3, r0
 8002b72:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b74:	e009      	b.n	8002b8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b76:	f7fd fe0b 	bl	8000790 <HAL_GetTick>
 8002b7a:	0002      	movs	r2, r0
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b64      	cmp	r3, #100	; 0x64
 8002b82:	d902      	bls.n	8002b8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	f000 fb3c 	bl	8003202 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b8a:	4b96      	ldr	r3, [pc, #600]	; (8002de4 <HAL_RCC_OscConfig+0x354>)
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	2380      	movs	r3, #128	; 0x80
 8002b90:	029b      	lsls	r3, r3, #10
 8002b92:	4013      	ands	r3, r2
 8002b94:	d0ef      	beq.n	8002b76 <HAL_RCC_OscConfig+0xe6>
 8002b96:	e015      	b.n	8002bc4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b98:	f7fd fdfa 	bl	8000790 <HAL_GetTick>
 8002b9c:	0003      	movs	r3, r0
 8002b9e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002ba0:	e008      	b.n	8002bb4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ba2:	f7fd fdf5 	bl	8000790 <HAL_GetTick>
 8002ba6:	0002      	movs	r2, r0
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b64      	cmp	r3, #100	; 0x64
 8002bae:	d901      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e326      	b.n	8003202 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002bb4:	4b8b      	ldr	r3, [pc, #556]	; (8002de4 <HAL_RCC_OscConfig+0x354>)
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	2380      	movs	r3, #128	; 0x80
 8002bba:	029b      	lsls	r3, r3, #10
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	d1f0      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x112>
 8002bc0:	e000      	b.n	8002bc4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bc2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2202      	movs	r2, #2
 8002bca:	4013      	ands	r3, r2
 8002bcc:	d100      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x140>
 8002bce:	e08b      	b.n	8002ce8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bd6:	6a3b      	ldr	r3, [r7, #32]
 8002bd8:	2b04      	cmp	r3, #4
 8002bda:	d005      	beq.n	8002be8 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002bdc:	6a3b      	ldr	r3, [r7, #32]
 8002bde:	2b0c      	cmp	r3, #12
 8002be0:	d13e      	bne.n	8002c60 <HAL_RCC_OscConfig+0x1d0>
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d13b      	bne.n	8002c60 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002be8:	4b7e      	ldr	r3, [pc, #504]	; (8002de4 <HAL_RCC_OscConfig+0x354>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2204      	movs	r2, #4
 8002bee:	4013      	ands	r3, r2
 8002bf0:	d004      	beq.n	8002bfc <HAL_RCC_OscConfig+0x16c>
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d101      	bne.n	8002bfc <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e302      	b.n	8003202 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bfc:	4b79      	ldr	r3, [pc, #484]	; (8002de4 <HAL_RCC_OscConfig+0x354>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	4a7b      	ldr	r2, [pc, #492]	; (8002df0 <HAL_RCC_OscConfig+0x360>)
 8002c02:	4013      	ands	r3, r2
 8002c04:	0019      	movs	r1, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	021a      	lsls	r2, r3, #8
 8002c0c:	4b75      	ldr	r3, [pc, #468]	; (8002de4 <HAL_RCC_OscConfig+0x354>)
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002c12:	4b74      	ldr	r3, [pc, #464]	; (8002de4 <HAL_RCC_OscConfig+0x354>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2209      	movs	r2, #9
 8002c18:	4393      	bics	r3, r2
 8002c1a:	0019      	movs	r1, r3
 8002c1c:	4b71      	ldr	r3, [pc, #452]	; (8002de4 <HAL_RCC_OscConfig+0x354>)
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	430a      	orrs	r2, r1
 8002c22:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c24:	f000 fc40 	bl	80034a8 <HAL_RCC_GetSysClockFreq>
 8002c28:	0001      	movs	r1, r0
 8002c2a:	4b6e      	ldr	r3, [pc, #440]	; (8002de4 <HAL_RCC_OscConfig+0x354>)
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	091b      	lsrs	r3, r3, #4
 8002c30:	220f      	movs	r2, #15
 8002c32:	4013      	ands	r3, r2
 8002c34:	4a6f      	ldr	r2, [pc, #444]	; (8002df4 <HAL_RCC_OscConfig+0x364>)
 8002c36:	5cd3      	ldrb	r3, [r2, r3]
 8002c38:	000a      	movs	r2, r1
 8002c3a:	40da      	lsrs	r2, r3
 8002c3c:	4b6e      	ldr	r3, [pc, #440]	; (8002df8 <HAL_RCC_OscConfig+0x368>)
 8002c3e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002c40:	4b6e      	ldr	r3, [pc, #440]	; (8002dfc <HAL_RCC_OscConfig+0x36c>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2513      	movs	r5, #19
 8002c46:	197c      	adds	r4, r7, r5
 8002c48:	0018      	movs	r0, r3
 8002c4a:	f7fd fd5b 	bl	8000704 <HAL_InitTick>
 8002c4e:	0003      	movs	r3, r0
 8002c50:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002c52:	197b      	adds	r3, r7, r5
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d046      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8002c5a:	197b      	adds	r3, r7, r5
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	e2d0      	b.n	8003202 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d027      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002c66:	4b5f      	ldr	r3, [pc, #380]	; (8002de4 <HAL_RCC_OscConfig+0x354>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2209      	movs	r2, #9
 8002c6c:	4393      	bics	r3, r2
 8002c6e:	0019      	movs	r1, r3
 8002c70:	4b5c      	ldr	r3, [pc, #368]	; (8002de4 <HAL_RCC_OscConfig+0x354>)
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	430a      	orrs	r2, r1
 8002c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c78:	f7fd fd8a 	bl	8000790 <HAL_GetTick>
 8002c7c:	0003      	movs	r3, r0
 8002c7e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c80:	e008      	b.n	8002c94 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c82:	f7fd fd85 	bl	8000790 <HAL_GetTick>
 8002c86:	0002      	movs	r2, r0
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d901      	bls.n	8002c94 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e2b6      	b.n	8003202 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c94:	4b53      	ldr	r3, [pc, #332]	; (8002de4 <HAL_RCC_OscConfig+0x354>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2204      	movs	r2, #4
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	d0f1      	beq.n	8002c82 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c9e:	4b51      	ldr	r3, [pc, #324]	; (8002de4 <HAL_RCC_OscConfig+0x354>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	4a53      	ldr	r2, [pc, #332]	; (8002df0 <HAL_RCC_OscConfig+0x360>)
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	0019      	movs	r1, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	021a      	lsls	r2, r3, #8
 8002cae:	4b4d      	ldr	r3, [pc, #308]	; (8002de4 <HAL_RCC_OscConfig+0x354>)
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	605a      	str	r2, [r3, #4]
 8002cb4:	e018      	b.n	8002ce8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cb6:	4b4b      	ldr	r3, [pc, #300]	; (8002de4 <HAL_RCC_OscConfig+0x354>)
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	4b4a      	ldr	r3, [pc, #296]	; (8002de4 <HAL_RCC_OscConfig+0x354>)
 8002cbc:	2101      	movs	r1, #1
 8002cbe:	438a      	bics	r2, r1
 8002cc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc2:	f7fd fd65 	bl	8000790 <HAL_GetTick>
 8002cc6:	0003      	movs	r3, r0
 8002cc8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002cca:	e008      	b.n	8002cde <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ccc:	f7fd fd60 	bl	8000790 <HAL_GetTick>
 8002cd0:	0002      	movs	r2, r0
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e291      	b.n	8003202 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002cde:	4b41      	ldr	r3, [pc, #260]	; (8002de4 <HAL_RCC_OscConfig+0x354>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2204      	movs	r2, #4
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	d1f1      	bne.n	8002ccc <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2210      	movs	r2, #16
 8002cee:	4013      	ands	r3, r2
 8002cf0:	d100      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x264>
 8002cf2:	e0a1      	b.n	8002e38 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cf4:	6a3b      	ldr	r3, [r7, #32]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d140      	bne.n	8002d7c <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cfa:	4b3a      	ldr	r3, [pc, #232]	; (8002de4 <HAL_RCC_OscConfig+0x354>)
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	2380      	movs	r3, #128	; 0x80
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	4013      	ands	r3, r2
 8002d04:	d005      	beq.n	8002d12 <HAL_RCC_OscConfig+0x282>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e277      	b.n	8003202 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d12:	4b34      	ldr	r3, [pc, #208]	; (8002de4 <HAL_RCC_OscConfig+0x354>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	4a3a      	ldr	r2, [pc, #232]	; (8002e00 <HAL_RCC_OscConfig+0x370>)
 8002d18:	4013      	ands	r3, r2
 8002d1a:	0019      	movs	r1, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d20:	4b30      	ldr	r3, [pc, #192]	; (8002de4 <HAL_RCC_OscConfig+0x354>)
 8002d22:	430a      	orrs	r2, r1
 8002d24:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d26:	4b2f      	ldr	r3, [pc, #188]	; (8002de4 <HAL_RCC_OscConfig+0x354>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	021b      	lsls	r3, r3, #8
 8002d2c:	0a19      	lsrs	r1, r3, #8
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	061a      	lsls	r2, r3, #24
 8002d34:	4b2b      	ldr	r3, [pc, #172]	; (8002de4 <HAL_RCC_OscConfig+0x354>)
 8002d36:	430a      	orrs	r2, r1
 8002d38:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3e:	0b5b      	lsrs	r3, r3, #13
 8002d40:	3301      	adds	r3, #1
 8002d42:	2280      	movs	r2, #128	; 0x80
 8002d44:	0212      	lsls	r2, r2, #8
 8002d46:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002d48:	4b26      	ldr	r3, [pc, #152]	; (8002de4 <HAL_RCC_OscConfig+0x354>)
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	091b      	lsrs	r3, r3, #4
 8002d4e:	210f      	movs	r1, #15
 8002d50:	400b      	ands	r3, r1
 8002d52:	4928      	ldr	r1, [pc, #160]	; (8002df4 <HAL_RCC_OscConfig+0x364>)
 8002d54:	5ccb      	ldrb	r3, [r1, r3]
 8002d56:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002d58:	4b27      	ldr	r3, [pc, #156]	; (8002df8 <HAL_RCC_OscConfig+0x368>)
 8002d5a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002d5c:	4b27      	ldr	r3, [pc, #156]	; (8002dfc <HAL_RCC_OscConfig+0x36c>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2513      	movs	r5, #19
 8002d62:	197c      	adds	r4, r7, r5
 8002d64:	0018      	movs	r0, r3
 8002d66:	f7fd fccd 	bl	8000704 <HAL_InitTick>
 8002d6a:	0003      	movs	r3, r0
 8002d6c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002d6e:	197b      	adds	r3, r7, r5
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d060      	beq.n	8002e38 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8002d76:	197b      	adds	r3, r7, r5
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	e242      	b.n	8003202 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	69db      	ldr	r3, [r3, #28]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d03f      	beq.n	8002e04 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d84:	4b17      	ldr	r3, [pc, #92]	; (8002de4 <HAL_RCC_OscConfig+0x354>)
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	4b16      	ldr	r3, [pc, #88]	; (8002de4 <HAL_RCC_OscConfig+0x354>)
 8002d8a:	2180      	movs	r1, #128	; 0x80
 8002d8c:	0049      	lsls	r1, r1, #1
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d92:	f7fd fcfd 	bl	8000790 <HAL_GetTick>
 8002d96:	0003      	movs	r3, r0
 8002d98:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002d9a:	e008      	b.n	8002dae <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d9c:	f7fd fcf8 	bl	8000790 <HAL_GetTick>
 8002da0:	0002      	movs	r2, r0
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e229      	b.n	8003202 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002dae:	4b0d      	ldr	r3, [pc, #52]	; (8002de4 <HAL_RCC_OscConfig+0x354>)
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	2380      	movs	r3, #128	; 0x80
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	4013      	ands	r3, r2
 8002db8:	d0f0      	beq.n	8002d9c <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dba:	4b0a      	ldr	r3, [pc, #40]	; (8002de4 <HAL_RCC_OscConfig+0x354>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	4a10      	ldr	r2, [pc, #64]	; (8002e00 <HAL_RCC_OscConfig+0x370>)
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	0019      	movs	r1, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dc8:	4b06      	ldr	r3, [pc, #24]	; (8002de4 <HAL_RCC_OscConfig+0x354>)
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dce:	4b05      	ldr	r3, [pc, #20]	; (8002de4 <HAL_RCC_OscConfig+0x354>)
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	021b      	lsls	r3, r3, #8
 8002dd4:	0a19      	lsrs	r1, r3, #8
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a1b      	ldr	r3, [r3, #32]
 8002dda:	061a      	lsls	r2, r3, #24
 8002ddc:	4b01      	ldr	r3, [pc, #4]	; (8002de4 <HAL_RCC_OscConfig+0x354>)
 8002dde:	430a      	orrs	r2, r1
 8002de0:	605a      	str	r2, [r3, #4]
 8002de2:	e029      	b.n	8002e38 <HAL_RCC_OscConfig+0x3a8>
 8002de4:	40021000 	.word	0x40021000
 8002de8:	fffeffff 	.word	0xfffeffff
 8002dec:	fffbffff 	.word	0xfffbffff
 8002df0:	ffffe0ff 	.word	0xffffe0ff
 8002df4:	08009164 	.word	0x08009164
 8002df8:	20000000 	.word	0x20000000
 8002dfc:	20000004 	.word	0x20000004
 8002e00:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e04:	4bbd      	ldr	r3, [pc, #756]	; (80030fc <HAL_RCC_OscConfig+0x66c>)
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	4bbc      	ldr	r3, [pc, #752]	; (80030fc <HAL_RCC_OscConfig+0x66c>)
 8002e0a:	49bd      	ldr	r1, [pc, #756]	; (8003100 <HAL_RCC_OscConfig+0x670>)
 8002e0c:	400a      	ands	r2, r1
 8002e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e10:	f7fd fcbe 	bl	8000790 <HAL_GetTick>
 8002e14:	0003      	movs	r3, r0
 8002e16:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002e18:	e008      	b.n	8002e2c <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e1a:	f7fd fcb9 	bl	8000790 <HAL_GetTick>
 8002e1e:	0002      	movs	r2, r0
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e1ea      	b.n	8003202 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002e2c:	4bb3      	ldr	r3, [pc, #716]	; (80030fc <HAL_RCC_OscConfig+0x66c>)
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	2380      	movs	r3, #128	; 0x80
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	4013      	ands	r3, r2
 8002e36:	d1f0      	bne.n	8002e1a <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2208      	movs	r2, #8
 8002e3e:	4013      	ands	r3, r2
 8002e40:	d036      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d019      	beq.n	8002e7e <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e4a:	4bac      	ldr	r3, [pc, #688]	; (80030fc <HAL_RCC_OscConfig+0x66c>)
 8002e4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e4e:	4bab      	ldr	r3, [pc, #684]	; (80030fc <HAL_RCC_OscConfig+0x66c>)
 8002e50:	2101      	movs	r1, #1
 8002e52:	430a      	orrs	r2, r1
 8002e54:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e56:	f7fd fc9b 	bl	8000790 <HAL_GetTick>
 8002e5a:	0003      	movs	r3, r0
 8002e5c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e60:	f7fd fc96 	bl	8000790 <HAL_GetTick>
 8002e64:	0002      	movs	r2, r0
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e1c7      	b.n	8003202 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e72:	4ba2      	ldr	r3, [pc, #648]	; (80030fc <HAL_RCC_OscConfig+0x66c>)
 8002e74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e76:	2202      	movs	r2, #2
 8002e78:	4013      	ands	r3, r2
 8002e7a:	d0f1      	beq.n	8002e60 <HAL_RCC_OscConfig+0x3d0>
 8002e7c:	e018      	b.n	8002eb0 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e7e:	4b9f      	ldr	r3, [pc, #636]	; (80030fc <HAL_RCC_OscConfig+0x66c>)
 8002e80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e82:	4b9e      	ldr	r3, [pc, #632]	; (80030fc <HAL_RCC_OscConfig+0x66c>)
 8002e84:	2101      	movs	r1, #1
 8002e86:	438a      	bics	r2, r1
 8002e88:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e8a:	f7fd fc81 	bl	8000790 <HAL_GetTick>
 8002e8e:	0003      	movs	r3, r0
 8002e90:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e94:	f7fd fc7c 	bl	8000790 <HAL_GetTick>
 8002e98:	0002      	movs	r2, r0
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e1ad      	b.n	8003202 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ea6:	4b95      	ldr	r3, [pc, #596]	; (80030fc <HAL_RCC_OscConfig+0x66c>)
 8002ea8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eaa:	2202      	movs	r2, #2
 8002eac:	4013      	ands	r3, r2
 8002eae:	d1f1      	bne.n	8002e94 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2204      	movs	r2, #4
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	d100      	bne.n	8002ebc <HAL_RCC_OscConfig+0x42c>
 8002eba:	e0ae      	b.n	800301a <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ebc:	2027      	movs	r0, #39	; 0x27
 8002ebe:	183b      	adds	r3, r7, r0
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ec4:	4b8d      	ldr	r3, [pc, #564]	; (80030fc <HAL_RCC_OscConfig+0x66c>)
 8002ec6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ec8:	2380      	movs	r3, #128	; 0x80
 8002eca:	055b      	lsls	r3, r3, #21
 8002ecc:	4013      	ands	r3, r2
 8002ece:	d109      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ed0:	4b8a      	ldr	r3, [pc, #552]	; (80030fc <HAL_RCC_OscConfig+0x66c>)
 8002ed2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ed4:	4b89      	ldr	r3, [pc, #548]	; (80030fc <HAL_RCC_OscConfig+0x66c>)
 8002ed6:	2180      	movs	r1, #128	; 0x80
 8002ed8:	0549      	lsls	r1, r1, #21
 8002eda:	430a      	orrs	r2, r1
 8002edc:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002ede:	183b      	adds	r3, r7, r0
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee4:	4b87      	ldr	r3, [pc, #540]	; (8003104 <HAL_RCC_OscConfig+0x674>)
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	2380      	movs	r3, #128	; 0x80
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	4013      	ands	r3, r2
 8002eee:	d11a      	bne.n	8002f26 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ef0:	4b84      	ldr	r3, [pc, #528]	; (8003104 <HAL_RCC_OscConfig+0x674>)
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	4b83      	ldr	r3, [pc, #524]	; (8003104 <HAL_RCC_OscConfig+0x674>)
 8002ef6:	2180      	movs	r1, #128	; 0x80
 8002ef8:	0049      	lsls	r1, r1, #1
 8002efa:	430a      	orrs	r2, r1
 8002efc:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002efe:	f7fd fc47 	bl	8000790 <HAL_GetTick>
 8002f02:	0003      	movs	r3, r0
 8002f04:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f08:	f7fd fc42 	bl	8000790 <HAL_GetTick>
 8002f0c:	0002      	movs	r2, r0
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b64      	cmp	r3, #100	; 0x64
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e173      	b.n	8003202 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f1a:	4b7a      	ldr	r3, [pc, #488]	; (8003104 <HAL_RCC_OscConfig+0x674>)
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	2380      	movs	r3, #128	; 0x80
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	4013      	ands	r3, r2
 8002f24:	d0f0      	beq.n	8002f08 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	689a      	ldr	r2, [r3, #8]
 8002f2a:	2380      	movs	r3, #128	; 0x80
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d107      	bne.n	8002f42 <HAL_RCC_OscConfig+0x4b2>
 8002f32:	4b72      	ldr	r3, [pc, #456]	; (80030fc <HAL_RCC_OscConfig+0x66c>)
 8002f34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f36:	4b71      	ldr	r3, [pc, #452]	; (80030fc <HAL_RCC_OscConfig+0x66c>)
 8002f38:	2180      	movs	r1, #128	; 0x80
 8002f3a:	0049      	lsls	r1, r1, #1
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	651a      	str	r2, [r3, #80]	; 0x50
 8002f40:	e031      	b.n	8002fa6 <HAL_RCC_OscConfig+0x516>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d10c      	bne.n	8002f64 <HAL_RCC_OscConfig+0x4d4>
 8002f4a:	4b6c      	ldr	r3, [pc, #432]	; (80030fc <HAL_RCC_OscConfig+0x66c>)
 8002f4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f4e:	4b6b      	ldr	r3, [pc, #428]	; (80030fc <HAL_RCC_OscConfig+0x66c>)
 8002f50:	496b      	ldr	r1, [pc, #428]	; (8003100 <HAL_RCC_OscConfig+0x670>)
 8002f52:	400a      	ands	r2, r1
 8002f54:	651a      	str	r2, [r3, #80]	; 0x50
 8002f56:	4b69      	ldr	r3, [pc, #420]	; (80030fc <HAL_RCC_OscConfig+0x66c>)
 8002f58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f5a:	4b68      	ldr	r3, [pc, #416]	; (80030fc <HAL_RCC_OscConfig+0x66c>)
 8002f5c:	496a      	ldr	r1, [pc, #424]	; (8003108 <HAL_RCC_OscConfig+0x678>)
 8002f5e:	400a      	ands	r2, r1
 8002f60:	651a      	str	r2, [r3, #80]	; 0x50
 8002f62:	e020      	b.n	8002fa6 <HAL_RCC_OscConfig+0x516>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689a      	ldr	r2, [r3, #8]
 8002f68:	23a0      	movs	r3, #160	; 0xa0
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d10e      	bne.n	8002f8e <HAL_RCC_OscConfig+0x4fe>
 8002f70:	4b62      	ldr	r3, [pc, #392]	; (80030fc <HAL_RCC_OscConfig+0x66c>)
 8002f72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f74:	4b61      	ldr	r3, [pc, #388]	; (80030fc <HAL_RCC_OscConfig+0x66c>)
 8002f76:	2180      	movs	r1, #128	; 0x80
 8002f78:	00c9      	lsls	r1, r1, #3
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	651a      	str	r2, [r3, #80]	; 0x50
 8002f7e:	4b5f      	ldr	r3, [pc, #380]	; (80030fc <HAL_RCC_OscConfig+0x66c>)
 8002f80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f82:	4b5e      	ldr	r3, [pc, #376]	; (80030fc <HAL_RCC_OscConfig+0x66c>)
 8002f84:	2180      	movs	r1, #128	; 0x80
 8002f86:	0049      	lsls	r1, r1, #1
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	651a      	str	r2, [r3, #80]	; 0x50
 8002f8c:	e00b      	b.n	8002fa6 <HAL_RCC_OscConfig+0x516>
 8002f8e:	4b5b      	ldr	r3, [pc, #364]	; (80030fc <HAL_RCC_OscConfig+0x66c>)
 8002f90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f92:	4b5a      	ldr	r3, [pc, #360]	; (80030fc <HAL_RCC_OscConfig+0x66c>)
 8002f94:	495a      	ldr	r1, [pc, #360]	; (8003100 <HAL_RCC_OscConfig+0x670>)
 8002f96:	400a      	ands	r2, r1
 8002f98:	651a      	str	r2, [r3, #80]	; 0x50
 8002f9a:	4b58      	ldr	r3, [pc, #352]	; (80030fc <HAL_RCC_OscConfig+0x66c>)
 8002f9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f9e:	4b57      	ldr	r3, [pc, #348]	; (80030fc <HAL_RCC_OscConfig+0x66c>)
 8002fa0:	4959      	ldr	r1, [pc, #356]	; (8003108 <HAL_RCC_OscConfig+0x678>)
 8002fa2:	400a      	ands	r2, r1
 8002fa4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d015      	beq.n	8002fda <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fae:	f7fd fbef 	bl	8000790 <HAL_GetTick>
 8002fb2:	0003      	movs	r3, r0
 8002fb4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fb6:	e009      	b.n	8002fcc <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fb8:	f7fd fbea 	bl	8000790 <HAL_GetTick>
 8002fbc:	0002      	movs	r2, r0
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	4a52      	ldr	r2, [pc, #328]	; (800310c <HAL_RCC_OscConfig+0x67c>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e11a      	b.n	8003202 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fcc:	4b4b      	ldr	r3, [pc, #300]	; (80030fc <HAL_RCC_OscConfig+0x66c>)
 8002fce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002fd0:	2380      	movs	r3, #128	; 0x80
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	d0ef      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x528>
 8002fd8:	e014      	b.n	8003004 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fda:	f7fd fbd9 	bl	8000790 <HAL_GetTick>
 8002fde:	0003      	movs	r3, r0
 8002fe0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002fe2:	e009      	b.n	8002ff8 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fe4:	f7fd fbd4 	bl	8000790 <HAL_GetTick>
 8002fe8:	0002      	movs	r2, r0
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	4a47      	ldr	r2, [pc, #284]	; (800310c <HAL_RCC_OscConfig+0x67c>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d901      	bls.n	8002ff8 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e104      	b.n	8003202 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ff8:	4b40      	ldr	r3, [pc, #256]	; (80030fc <HAL_RCC_OscConfig+0x66c>)
 8002ffa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ffc:	2380      	movs	r3, #128	; 0x80
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	4013      	ands	r3, r2
 8003002:	d1ef      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003004:	2327      	movs	r3, #39	; 0x27
 8003006:	18fb      	adds	r3, r7, r3
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d105      	bne.n	800301a <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800300e:	4b3b      	ldr	r3, [pc, #236]	; (80030fc <HAL_RCC_OscConfig+0x66c>)
 8003010:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003012:	4b3a      	ldr	r3, [pc, #232]	; (80030fc <HAL_RCC_OscConfig+0x66c>)
 8003014:	493e      	ldr	r1, [pc, #248]	; (8003110 <HAL_RCC_OscConfig+0x680>)
 8003016:	400a      	ands	r2, r1
 8003018:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2220      	movs	r2, #32
 8003020:	4013      	ands	r3, r2
 8003022:	d049      	beq.n	80030b8 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d026      	beq.n	800307a <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800302c:	4b33      	ldr	r3, [pc, #204]	; (80030fc <HAL_RCC_OscConfig+0x66c>)
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	4b32      	ldr	r3, [pc, #200]	; (80030fc <HAL_RCC_OscConfig+0x66c>)
 8003032:	2101      	movs	r1, #1
 8003034:	430a      	orrs	r2, r1
 8003036:	609a      	str	r2, [r3, #8]
 8003038:	4b30      	ldr	r3, [pc, #192]	; (80030fc <HAL_RCC_OscConfig+0x66c>)
 800303a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800303c:	4b2f      	ldr	r3, [pc, #188]	; (80030fc <HAL_RCC_OscConfig+0x66c>)
 800303e:	2101      	movs	r1, #1
 8003040:	430a      	orrs	r2, r1
 8003042:	635a      	str	r2, [r3, #52]	; 0x34
 8003044:	4b33      	ldr	r3, [pc, #204]	; (8003114 <HAL_RCC_OscConfig+0x684>)
 8003046:	6a1a      	ldr	r2, [r3, #32]
 8003048:	4b32      	ldr	r3, [pc, #200]	; (8003114 <HAL_RCC_OscConfig+0x684>)
 800304a:	2180      	movs	r1, #128	; 0x80
 800304c:	0189      	lsls	r1, r1, #6
 800304e:	430a      	orrs	r2, r1
 8003050:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003052:	f7fd fb9d 	bl	8000790 <HAL_GetTick>
 8003056:	0003      	movs	r3, r0
 8003058:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800305c:	f7fd fb98 	bl	8000790 <HAL_GetTick>
 8003060:	0002      	movs	r2, r0
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e0c9      	b.n	8003202 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800306e:	4b23      	ldr	r3, [pc, #140]	; (80030fc <HAL_RCC_OscConfig+0x66c>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	2202      	movs	r2, #2
 8003074:	4013      	ands	r3, r2
 8003076:	d0f1      	beq.n	800305c <HAL_RCC_OscConfig+0x5cc>
 8003078:	e01e      	b.n	80030b8 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800307a:	4b20      	ldr	r3, [pc, #128]	; (80030fc <HAL_RCC_OscConfig+0x66c>)
 800307c:	689a      	ldr	r2, [r3, #8]
 800307e:	4b1f      	ldr	r3, [pc, #124]	; (80030fc <HAL_RCC_OscConfig+0x66c>)
 8003080:	2101      	movs	r1, #1
 8003082:	438a      	bics	r2, r1
 8003084:	609a      	str	r2, [r3, #8]
 8003086:	4b23      	ldr	r3, [pc, #140]	; (8003114 <HAL_RCC_OscConfig+0x684>)
 8003088:	6a1a      	ldr	r2, [r3, #32]
 800308a:	4b22      	ldr	r3, [pc, #136]	; (8003114 <HAL_RCC_OscConfig+0x684>)
 800308c:	4922      	ldr	r1, [pc, #136]	; (8003118 <HAL_RCC_OscConfig+0x688>)
 800308e:	400a      	ands	r2, r1
 8003090:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003092:	f7fd fb7d 	bl	8000790 <HAL_GetTick>
 8003096:	0003      	movs	r3, r0
 8003098:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800309a:	e008      	b.n	80030ae <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800309c:	f7fd fb78 	bl	8000790 <HAL_GetTick>
 80030a0:	0002      	movs	r2, r0
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e0a9      	b.n	8003202 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80030ae:	4b13      	ldr	r3, [pc, #76]	; (80030fc <HAL_RCC_OscConfig+0x66c>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	2202      	movs	r2, #2
 80030b4:	4013      	ands	r3, r2
 80030b6:	d1f1      	bne.n	800309c <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d100      	bne.n	80030c2 <HAL_RCC_OscConfig+0x632>
 80030c0:	e09e      	b.n	8003200 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030c2:	6a3b      	ldr	r3, [r7, #32]
 80030c4:	2b0c      	cmp	r3, #12
 80030c6:	d100      	bne.n	80030ca <HAL_RCC_OscConfig+0x63a>
 80030c8:	e077      	b.n	80031ba <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d158      	bne.n	8003184 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030d2:	4b0a      	ldr	r3, [pc, #40]	; (80030fc <HAL_RCC_OscConfig+0x66c>)
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	4b09      	ldr	r3, [pc, #36]	; (80030fc <HAL_RCC_OscConfig+0x66c>)
 80030d8:	4910      	ldr	r1, [pc, #64]	; (800311c <HAL_RCC_OscConfig+0x68c>)
 80030da:	400a      	ands	r2, r1
 80030dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030de:	f7fd fb57 	bl	8000790 <HAL_GetTick>
 80030e2:	0003      	movs	r3, r0
 80030e4:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80030e6:	e01b      	b.n	8003120 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030e8:	f7fd fb52 	bl	8000790 <HAL_GetTick>
 80030ec:	0002      	movs	r2, r0
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d914      	bls.n	8003120 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e083      	b.n	8003202 <HAL_RCC_OscConfig+0x772>
 80030fa:	46c0      	nop			; (mov r8, r8)
 80030fc:	40021000 	.word	0x40021000
 8003100:	fffffeff 	.word	0xfffffeff
 8003104:	40007000 	.word	0x40007000
 8003108:	fffffbff 	.word	0xfffffbff
 800310c:	00001388 	.word	0x00001388
 8003110:	efffffff 	.word	0xefffffff
 8003114:	40010000 	.word	0x40010000
 8003118:	ffffdfff 	.word	0xffffdfff
 800311c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003120:	4b3a      	ldr	r3, [pc, #232]	; (800320c <HAL_RCC_OscConfig+0x77c>)
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	2380      	movs	r3, #128	; 0x80
 8003126:	049b      	lsls	r3, r3, #18
 8003128:	4013      	ands	r3, r2
 800312a:	d1dd      	bne.n	80030e8 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800312c:	4b37      	ldr	r3, [pc, #220]	; (800320c <HAL_RCC_OscConfig+0x77c>)
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	4a37      	ldr	r2, [pc, #220]	; (8003210 <HAL_RCC_OscConfig+0x780>)
 8003132:	4013      	ands	r3, r2
 8003134:	0019      	movs	r1, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313e:	431a      	orrs	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003144:	431a      	orrs	r2, r3
 8003146:	4b31      	ldr	r3, [pc, #196]	; (800320c <HAL_RCC_OscConfig+0x77c>)
 8003148:	430a      	orrs	r2, r1
 800314a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800314c:	4b2f      	ldr	r3, [pc, #188]	; (800320c <HAL_RCC_OscConfig+0x77c>)
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	4b2e      	ldr	r3, [pc, #184]	; (800320c <HAL_RCC_OscConfig+0x77c>)
 8003152:	2180      	movs	r1, #128	; 0x80
 8003154:	0449      	lsls	r1, r1, #17
 8003156:	430a      	orrs	r2, r1
 8003158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800315a:	f7fd fb19 	bl	8000790 <HAL_GetTick>
 800315e:	0003      	movs	r3, r0
 8003160:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003164:	f7fd fb14 	bl	8000790 <HAL_GetTick>
 8003168:	0002      	movs	r2, r0
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e045      	b.n	8003202 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003176:	4b25      	ldr	r3, [pc, #148]	; (800320c <HAL_RCC_OscConfig+0x77c>)
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	2380      	movs	r3, #128	; 0x80
 800317c:	049b      	lsls	r3, r3, #18
 800317e:	4013      	ands	r3, r2
 8003180:	d0f0      	beq.n	8003164 <HAL_RCC_OscConfig+0x6d4>
 8003182:	e03d      	b.n	8003200 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003184:	4b21      	ldr	r3, [pc, #132]	; (800320c <HAL_RCC_OscConfig+0x77c>)
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	4b20      	ldr	r3, [pc, #128]	; (800320c <HAL_RCC_OscConfig+0x77c>)
 800318a:	4922      	ldr	r1, [pc, #136]	; (8003214 <HAL_RCC_OscConfig+0x784>)
 800318c:	400a      	ands	r2, r1
 800318e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003190:	f7fd fafe 	bl	8000790 <HAL_GetTick>
 8003194:	0003      	movs	r3, r0
 8003196:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003198:	e008      	b.n	80031ac <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800319a:	f7fd faf9 	bl	8000790 <HAL_GetTick>
 800319e:	0002      	movs	r2, r0
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d901      	bls.n	80031ac <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e02a      	b.n	8003202 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80031ac:	4b17      	ldr	r3, [pc, #92]	; (800320c <HAL_RCC_OscConfig+0x77c>)
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	2380      	movs	r3, #128	; 0x80
 80031b2:	049b      	lsls	r3, r3, #18
 80031b4:	4013      	ands	r3, r2
 80031b6:	d1f0      	bne.n	800319a <HAL_RCC_OscConfig+0x70a>
 80031b8:	e022      	b.n	8003200 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d101      	bne.n	80031c6 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e01d      	b.n	8003202 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031c6:	4b11      	ldr	r3, [pc, #68]	; (800320c <HAL_RCC_OscConfig+0x77c>)
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031cc:	69fa      	ldr	r2, [r7, #28]
 80031ce:	2380      	movs	r3, #128	; 0x80
 80031d0:	025b      	lsls	r3, r3, #9
 80031d2:	401a      	ands	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d8:	429a      	cmp	r2, r3
 80031da:	d10f      	bne.n	80031fc <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80031dc:	69fa      	ldr	r2, [r7, #28]
 80031de:	23f0      	movs	r3, #240	; 0xf0
 80031e0:	039b      	lsls	r3, r3, #14
 80031e2:	401a      	ands	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d107      	bne.n	80031fc <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80031ec:	69fa      	ldr	r2, [r7, #28]
 80031ee:	23c0      	movs	r3, #192	; 0xc0
 80031f0:	041b      	lsls	r3, r3, #16
 80031f2:	401a      	ands	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d001      	beq.n	8003200 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e000      	b.n	8003202 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	0018      	movs	r0, r3
 8003204:	46bd      	mov	sp, r7
 8003206:	b00a      	add	sp, #40	; 0x28
 8003208:	bdb0      	pop	{r4, r5, r7, pc}
 800320a:	46c0      	nop			; (mov r8, r8)
 800320c:	40021000 	.word	0x40021000
 8003210:	ff02ffff 	.word	0xff02ffff
 8003214:	feffffff 	.word	0xfeffffff

08003218 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003218:	b5b0      	push	{r4, r5, r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d101      	bne.n	800322c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e128      	b.n	800347e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800322c:	4b96      	ldr	r3, [pc, #600]	; (8003488 <HAL_RCC_ClockConfig+0x270>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2201      	movs	r2, #1
 8003232:	4013      	ands	r3, r2
 8003234:	683a      	ldr	r2, [r7, #0]
 8003236:	429a      	cmp	r2, r3
 8003238:	d91e      	bls.n	8003278 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800323a:	4b93      	ldr	r3, [pc, #588]	; (8003488 <HAL_RCC_ClockConfig+0x270>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2201      	movs	r2, #1
 8003240:	4393      	bics	r3, r2
 8003242:	0019      	movs	r1, r3
 8003244:	4b90      	ldr	r3, [pc, #576]	; (8003488 <HAL_RCC_ClockConfig+0x270>)
 8003246:	683a      	ldr	r2, [r7, #0]
 8003248:	430a      	orrs	r2, r1
 800324a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800324c:	f7fd faa0 	bl	8000790 <HAL_GetTick>
 8003250:	0003      	movs	r3, r0
 8003252:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003254:	e009      	b.n	800326a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003256:	f7fd fa9b 	bl	8000790 <HAL_GetTick>
 800325a:	0002      	movs	r2, r0
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	4a8a      	ldr	r2, [pc, #552]	; (800348c <HAL_RCC_ClockConfig+0x274>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d901      	bls.n	800326a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e109      	b.n	800347e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800326a:	4b87      	ldr	r3, [pc, #540]	; (8003488 <HAL_RCC_ClockConfig+0x270>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2201      	movs	r2, #1
 8003270:	4013      	ands	r3, r2
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	429a      	cmp	r2, r3
 8003276:	d1ee      	bne.n	8003256 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2202      	movs	r2, #2
 800327e:	4013      	ands	r3, r2
 8003280:	d009      	beq.n	8003296 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003282:	4b83      	ldr	r3, [pc, #524]	; (8003490 <HAL_RCC_ClockConfig+0x278>)
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	22f0      	movs	r2, #240	; 0xf0
 8003288:	4393      	bics	r3, r2
 800328a:	0019      	movs	r1, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	4b7f      	ldr	r3, [pc, #508]	; (8003490 <HAL_RCC_ClockConfig+0x278>)
 8003292:	430a      	orrs	r2, r1
 8003294:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2201      	movs	r2, #1
 800329c:	4013      	ands	r3, r2
 800329e:	d100      	bne.n	80032a2 <HAL_RCC_ClockConfig+0x8a>
 80032a0:	e089      	b.n	80033b6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d107      	bne.n	80032ba <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032aa:	4b79      	ldr	r3, [pc, #484]	; (8003490 <HAL_RCC_ClockConfig+0x278>)
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	2380      	movs	r3, #128	; 0x80
 80032b0:	029b      	lsls	r3, r3, #10
 80032b2:	4013      	ands	r3, r2
 80032b4:	d120      	bne.n	80032f8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e0e1      	b.n	800347e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	2b03      	cmp	r3, #3
 80032c0:	d107      	bne.n	80032d2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032c2:	4b73      	ldr	r3, [pc, #460]	; (8003490 <HAL_RCC_ClockConfig+0x278>)
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	2380      	movs	r3, #128	; 0x80
 80032c8:	049b      	lsls	r3, r3, #18
 80032ca:	4013      	ands	r3, r2
 80032cc:	d114      	bne.n	80032f8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e0d5      	b.n	800347e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d106      	bne.n	80032e8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032da:	4b6d      	ldr	r3, [pc, #436]	; (8003490 <HAL_RCC_ClockConfig+0x278>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2204      	movs	r2, #4
 80032e0:	4013      	ands	r3, r2
 80032e2:	d109      	bne.n	80032f8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e0ca      	b.n	800347e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80032e8:	4b69      	ldr	r3, [pc, #420]	; (8003490 <HAL_RCC_ClockConfig+0x278>)
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	2380      	movs	r3, #128	; 0x80
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	4013      	ands	r3, r2
 80032f2:	d101      	bne.n	80032f8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e0c2      	b.n	800347e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032f8:	4b65      	ldr	r3, [pc, #404]	; (8003490 <HAL_RCC_ClockConfig+0x278>)
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	2203      	movs	r2, #3
 80032fe:	4393      	bics	r3, r2
 8003300:	0019      	movs	r1, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685a      	ldr	r2, [r3, #4]
 8003306:	4b62      	ldr	r3, [pc, #392]	; (8003490 <HAL_RCC_ClockConfig+0x278>)
 8003308:	430a      	orrs	r2, r1
 800330a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800330c:	f7fd fa40 	bl	8000790 <HAL_GetTick>
 8003310:	0003      	movs	r3, r0
 8003312:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	2b02      	cmp	r3, #2
 800331a:	d111      	bne.n	8003340 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800331c:	e009      	b.n	8003332 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800331e:	f7fd fa37 	bl	8000790 <HAL_GetTick>
 8003322:	0002      	movs	r2, r0
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	4a58      	ldr	r2, [pc, #352]	; (800348c <HAL_RCC_ClockConfig+0x274>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e0a5      	b.n	800347e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003332:	4b57      	ldr	r3, [pc, #348]	; (8003490 <HAL_RCC_ClockConfig+0x278>)
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	220c      	movs	r2, #12
 8003338:	4013      	ands	r3, r2
 800333a:	2b08      	cmp	r3, #8
 800333c:	d1ef      	bne.n	800331e <HAL_RCC_ClockConfig+0x106>
 800333e:	e03a      	b.n	80033b6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	2b03      	cmp	r3, #3
 8003346:	d111      	bne.n	800336c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003348:	e009      	b.n	800335e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800334a:	f7fd fa21 	bl	8000790 <HAL_GetTick>
 800334e:	0002      	movs	r2, r0
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	4a4d      	ldr	r2, [pc, #308]	; (800348c <HAL_RCC_ClockConfig+0x274>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d901      	bls.n	800335e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e08f      	b.n	800347e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800335e:	4b4c      	ldr	r3, [pc, #304]	; (8003490 <HAL_RCC_ClockConfig+0x278>)
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	220c      	movs	r2, #12
 8003364:	4013      	ands	r3, r2
 8003366:	2b0c      	cmp	r3, #12
 8003368:	d1ef      	bne.n	800334a <HAL_RCC_ClockConfig+0x132>
 800336a:	e024      	b.n	80033b6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d11b      	bne.n	80033ac <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003374:	e009      	b.n	800338a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003376:	f7fd fa0b 	bl	8000790 <HAL_GetTick>
 800337a:	0002      	movs	r2, r0
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	4a42      	ldr	r2, [pc, #264]	; (800348c <HAL_RCC_ClockConfig+0x274>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d901      	bls.n	800338a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e079      	b.n	800347e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800338a:	4b41      	ldr	r3, [pc, #260]	; (8003490 <HAL_RCC_ClockConfig+0x278>)
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	220c      	movs	r2, #12
 8003390:	4013      	ands	r3, r2
 8003392:	2b04      	cmp	r3, #4
 8003394:	d1ef      	bne.n	8003376 <HAL_RCC_ClockConfig+0x15e>
 8003396:	e00e      	b.n	80033b6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003398:	f7fd f9fa 	bl	8000790 <HAL_GetTick>
 800339c:	0002      	movs	r2, r0
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	4a3a      	ldr	r2, [pc, #232]	; (800348c <HAL_RCC_ClockConfig+0x274>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d901      	bls.n	80033ac <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e068      	b.n	800347e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80033ac:	4b38      	ldr	r3, [pc, #224]	; (8003490 <HAL_RCC_ClockConfig+0x278>)
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	220c      	movs	r2, #12
 80033b2:	4013      	ands	r3, r2
 80033b4:	d1f0      	bne.n	8003398 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033b6:	4b34      	ldr	r3, [pc, #208]	; (8003488 <HAL_RCC_ClockConfig+0x270>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2201      	movs	r2, #1
 80033bc:	4013      	ands	r3, r2
 80033be:	683a      	ldr	r2, [r7, #0]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d21e      	bcs.n	8003402 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033c4:	4b30      	ldr	r3, [pc, #192]	; (8003488 <HAL_RCC_ClockConfig+0x270>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2201      	movs	r2, #1
 80033ca:	4393      	bics	r3, r2
 80033cc:	0019      	movs	r1, r3
 80033ce:	4b2e      	ldr	r3, [pc, #184]	; (8003488 <HAL_RCC_ClockConfig+0x270>)
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	430a      	orrs	r2, r1
 80033d4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80033d6:	f7fd f9db 	bl	8000790 <HAL_GetTick>
 80033da:	0003      	movs	r3, r0
 80033dc:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033de:	e009      	b.n	80033f4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033e0:	f7fd f9d6 	bl	8000790 <HAL_GetTick>
 80033e4:	0002      	movs	r2, r0
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	4a28      	ldr	r2, [pc, #160]	; (800348c <HAL_RCC_ClockConfig+0x274>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d901      	bls.n	80033f4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e044      	b.n	800347e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033f4:	4b24      	ldr	r3, [pc, #144]	; (8003488 <HAL_RCC_ClockConfig+0x270>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2201      	movs	r2, #1
 80033fa:	4013      	ands	r3, r2
 80033fc:	683a      	ldr	r2, [r7, #0]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d1ee      	bne.n	80033e0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2204      	movs	r2, #4
 8003408:	4013      	ands	r3, r2
 800340a:	d009      	beq.n	8003420 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800340c:	4b20      	ldr	r3, [pc, #128]	; (8003490 <HAL_RCC_ClockConfig+0x278>)
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	4a20      	ldr	r2, [pc, #128]	; (8003494 <HAL_RCC_ClockConfig+0x27c>)
 8003412:	4013      	ands	r3, r2
 8003414:	0019      	movs	r1, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	68da      	ldr	r2, [r3, #12]
 800341a:	4b1d      	ldr	r3, [pc, #116]	; (8003490 <HAL_RCC_ClockConfig+0x278>)
 800341c:	430a      	orrs	r2, r1
 800341e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2208      	movs	r2, #8
 8003426:	4013      	ands	r3, r2
 8003428:	d00a      	beq.n	8003440 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800342a:	4b19      	ldr	r3, [pc, #100]	; (8003490 <HAL_RCC_ClockConfig+0x278>)
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	4a1a      	ldr	r2, [pc, #104]	; (8003498 <HAL_RCC_ClockConfig+0x280>)
 8003430:	4013      	ands	r3, r2
 8003432:	0019      	movs	r1, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	00da      	lsls	r2, r3, #3
 800343a:	4b15      	ldr	r3, [pc, #84]	; (8003490 <HAL_RCC_ClockConfig+0x278>)
 800343c:	430a      	orrs	r2, r1
 800343e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003440:	f000 f832 	bl	80034a8 <HAL_RCC_GetSysClockFreq>
 8003444:	0001      	movs	r1, r0
 8003446:	4b12      	ldr	r3, [pc, #72]	; (8003490 <HAL_RCC_ClockConfig+0x278>)
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	091b      	lsrs	r3, r3, #4
 800344c:	220f      	movs	r2, #15
 800344e:	4013      	ands	r3, r2
 8003450:	4a12      	ldr	r2, [pc, #72]	; (800349c <HAL_RCC_ClockConfig+0x284>)
 8003452:	5cd3      	ldrb	r3, [r2, r3]
 8003454:	000a      	movs	r2, r1
 8003456:	40da      	lsrs	r2, r3
 8003458:	4b11      	ldr	r3, [pc, #68]	; (80034a0 <HAL_RCC_ClockConfig+0x288>)
 800345a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800345c:	4b11      	ldr	r3, [pc, #68]	; (80034a4 <HAL_RCC_ClockConfig+0x28c>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	250b      	movs	r5, #11
 8003462:	197c      	adds	r4, r7, r5
 8003464:	0018      	movs	r0, r3
 8003466:	f7fd f94d 	bl	8000704 <HAL_InitTick>
 800346a:	0003      	movs	r3, r0
 800346c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800346e:	197b      	adds	r3, r7, r5
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d002      	beq.n	800347c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003476:	197b      	adds	r3, r7, r5
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	e000      	b.n	800347e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800347c:	2300      	movs	r3, #0
}
 800347e:	0018      	movs	r0, r3
 8003480:	46bd      	mov	sp, r7
 8003482:	b004      	add	sp, #16
 8003484:	bdb0      	pop	{r4, r5, r7, pc}
 8003486:	46c0      	nop			; (mov r8, r8)
 8003488:	40022000 	.word	0x40022000
 800348c:	00001388 	.word	0x00001388
 8003490:	40021000 	.word	0x40021000
 8003494:	fffff8ff 	.word	0xfffff8ff
 8003498:	ffffc7ff 	.word	0xffffc7ff
 800349c:	08009164 	.word	0x08009164
 80034a0:	20000000 	.word	0x20000000
 80034a4:	20000004 	.word	0x20000004

080034a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034a8:	b5b0      	push	{r4, r5, r7, lr}
 80034aa:	b08e      	sub	sp, #56	; 0x38
 80034ac:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80034ae:	4b4c      	ldr	r3, [pc, #304]	; (80035e0 <HAL_RCC_GetSysClockFreq+0x138>)
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034b6:	230c      	movs	r3, #12
 80034b8:	4013      	ands	r3, r2
 80034ba:	2b0c      	cmp	r3, #12
 80034bc:	d014      	beq.n	80034e8 <HAL_RCC_GetSysClockFreq+0x40>
 80034be:	d900      	bls.n	80034c2 <HAL_RCC_GetSysClockFreq+0x1a>
 80034c0:	e07b      	b.n	80035ba <HAL_RCC_GetSysClockFreq+0x112>
 80034c2:	2b04      	cmp	r3, #4
 80034c4:	d002      	beq.n	80034cc <HAL_RCC_GetSysClockFreq+0x24>
 80034c6:	2b08      	cmp	r3, #8
 80034c8:	d00b      	beq.n	80034e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80034ca:	e076      	b.n	80035ba <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80034cc:	4b44      	ldr	r3, [pc, #272]	; (80035e0 <HAL_RCC_GetSysClockFreq+0x138>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2210      	movs	r2, #16
 80034d2:	4013      	ands	r3, r2
 80034d4:	d002      	beq.n	80034dc <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80034d6:	4b43      	ldr	r3, [pc, #268]	; (80035e4 <HAL_RCC_GetSysClockFreq+0x13c>)
 80034d8:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80034da:	e07c      	b.n	80035d6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80034dc:	4b42      	ldr	r3, [pc, #264]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x140>)
 80034de:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80034e0:	e079      	b.n	80035d6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034e2:	4b42      	ldr	r3, [pc, #264]	; (80035ec <HAL_RCC_GetSysClockFreq+0x144>)
 80034e4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80034e6:	e076      	b.n	80035d6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80034e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ea:	0c9a      	lsrs	r2, r3, #18
 80034ec:	230f      	movs	r3, #15
 80034ee:	401a      	ands	r2, r3
 80034f0:	4b3f      	ldr	r3, [pc, #252]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x148>)
 80034f2:	5c9b      	ldrb	r3, [r3, r2]
 80034f4:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80034f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f8:	0d9a      	lsrs	r2, r3, #22
 80034fa:	2303      	movs	r3, #3
 80034fc:	4013      	ands	r3, r2
 80034fe:	3301      	adds	r3, #1
 8003500:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003502:	4b37      	ldr	r3, [pc, #220]	; (80035e0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003504:	68da      	ldr	r2, [r3, #12]
 8003506:	2380      	movs	r3, #128	; 0x80
 8003508:	025b      	lsls	r3, r3, #9
 800350a:	4013      	ands	r3, r2
 800350c:	d01a      	beq.n	8003544 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800350e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003510:	61bb      	str	r3, [r7, #24]
 8003512:	2300      	movs	r3, #0
 8003514:	61fb      	str	r3, [r7, #28]
 8003516:	4a35      	ldr	r2, [pc, #212]	; (80035ec <HAL_RCC_GetSysClockFreq+0x144>)
 8003518:	2300      	movs	r3, #0
 800351a:	69b8      	ldr	r0, [r7, #24]
 800351c:	69f9      	ldr	r1, [r7, #28]
 800351e:	f7fc fea7 	bl	8000270 <__aeabi_lmul>
 8003522:	0002      	movs	r2, r0
 8003524:	000b      	movs	r3, r1
 8003526:	0010      	movs	r0, r2
 8003528:	0019      	movs	r1, r3
 800352a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352c:	613b      	str	r3, [r7, #16]
 800352e:	2300      	movs	r3, #0
 8003530:	617b      	str	r3, [r7, #20]
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	f7fc fe7b 	bl	8000230 <__aeabi_uldivmod>
 800353a:	0002      	movs	r2, r0
 800353c:	000b      	movs	r3, r1
 800353e:	0013      	movs	r3, r2
 8003540:	637b      	str	r3, [r7, #52]	; 0x34
 8003542:	e037      	b.n	80035b4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003544:	4b26      	ldr	r3, [pc, #152]	; (80035e0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2210      	movs	r2, #16
 800354a:	4013      	ands	r3, r2
 800354c:	d01a      	beq.n	8003584 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800354e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003550:	60bb      	str	r3, [r7, #8]
 8003552:	2300      	movs	r3, #0
 8003554:	60fb      	str	r3, [r7, #12]
 8003556:	4a23      	ldr	r2, [pc, #140]	; (80035e4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003558:	2300      	movs	r3, #0
 800355a:	68b8      	ldr	r0, [r7, #8]
 800355c:	68f9      	ldr	r1, [r7, #12]
 800355e:	f7fc fe87 	bl	8000270 <__aeabi_lmul>
 8003562:	0002      	movs	r2, r0
 8003564:	000b      	movs	r3, r1
 8003566:	0010      	movs	r0, r2
 8003568:	0019      	movs	r1, r3
 800356a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356c:	603b      	str	r3, [r7, #0]
 800356e:	2300      	movs	r3, #0
 8003570:	607b      	str	r3, [r7, #4]
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f7fc fe5b 	bl	8000230 <__aeabi_uldivmod>
 800357a:	0002      	movs	r2, r0
 800357c:	000b      	movs	r3, r1
 800357e:	0013      	movs	r3, r2
 8003580:	637b      	str	r3, [r7, #52]	; 0x34
 8003582:	e017      	b.n	80035b4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003586:	0018      	movs	r0, r3
 8003588:	2300      	movs	r3, #0
 800358a:	0019      	movs	r1, r3
 800358c:	4a16      	ldr	r2, [pc, #88]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x140>)
 800358e:	2300      	movs	r3, #0
 8003590:	f7fc fe6e 	bl	8000270 <__aeabi_lmul>
 8003594:	0002      	movs	r2, r0
 8003596:	000b      	movs	r3, r1
 8003598:	0010      	movs	r0, r2
 800359a:	0019      	movs	r1, r3
 800359c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359e:	001c      	movs	r4, r3
 80035a0:	2300      	movs	r3, #0
 80035a2:	001d      	movs	r5, r3
 80035a4:	0022      	movs	r2, r4
 80035a6:	002b      	movs	r3, r5
 80035a8:	f7fc fe42 	bl	8000230 <__aeabi_uldivmod>
 80035ac:	0002      	movs	r2, r0
 80035ae:	000b      	movs	r3, r1
 80035b0:	0013      	movs	r3, r2
 80035b2:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80035b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035b6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80035b8:	e00d      	b.n	80035d6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80035ba:	4b09      	ldr	r3, [pc, #36]	; (80035e0 <HAL_RCC_GetSysClockFreq+0x138>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	0b5b      	lsrs	r3, r3, #13
 80035c0:	2207      	movs	r2, #7
 80035c2:	4013      	ands	r3, r2
 80035c4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80035c6:	6a3b      	ldr	r3, [r7, #32]
 80035c8:	3301      	adds	r3, #1
 80035ca:	2280      	movs	r2, #128	; 0x80
 80035cc:	0212      	lsls	r2, r2, #8
 80035ce:	409a      	lsls	r2, r3
 80035d0:	0013      	movs	r3, r2
 80035d2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80035d4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80035d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80035d8:	0018      	movs	r0, r3
 80035da:	46bd      	mov	sp, r7
 80035dc:	b00e      	add	sp, #56	; 0x38
 80035de:	bdb0      	pop	{r4, r5, r7, pc}
 80035e0:	40021000 	.word	0x40021000
 80035e4:	003d0900 	.word	0x003d0900
 80035e8:	00f42400 	.word	0x00f42400
 80035ec:	007a1200 	.word	0x007a1200
 80035f0:	08009174 	.word	0x08009174

080035f4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b086      	sub	sp, #24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80035fc:	2317      	movs	r3, #23
 80035fe:	18fb      	adds	r3, r7, r3
 8003600:	2200      	movs	r2, #0
 8003602:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2220      	movs	r2, #32
 800360a:	4013      	ands	r3, r2
 800360c:	d106      	bne.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	2380      	movs	r3, #128	; 0x80
 8003614:	011b      	lsls	r3, r3, #4
 8003616:	4013      	ands	r3, r2
 8003618:	d100      	bne.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x28>
 800361a:	e104      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800361c:	4bb1      	ldr	r3, [pc, #708]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800361e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003620:	2380      	movs	r3, #128	; 0x80
 8003622:	055b      	lsls	r3, r3, #21
 8003624:	4013      	ands	r3, r2
 8003626:	d10a      	bne.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003628:	4bae      	ldr	r3, [pc, #696]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800362a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800362c:	4bad      	ldr	r3, [pc, #692]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800362e:	2180      	movs	r1, #128	; 0x80
 8003630:	0549      	lsls	r1, r1, #21
 8003632:	430a      	orrs	r2, r1
 8003634:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003636:	2317      	movs	r3, #23
 8003638:	18fb      	adds	r3, r7, r3
 800363a:	2201      	movs	r2, #1
 800363c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800363e:	4baa      	ldr	r3, [pc, #680]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	2380      	movs	r3, #128	; 0x80
 8003644:	005b      	lsls	r3, r3, #1
 8003646:	4013      	ands	r3, r2
 8003648:	d11a      	bne.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800364a:	4ba7      	ldr	r3, [pc, #668]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	4ba6      	ldr	r3, [pc, #664]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003650:	2180      	movs	r1, #128	; 0x80
 8003652:	0049      	lsls	r1, r1, #1
 8003654:	430a      	orrs	r2, r1
 8003656:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003658:	f7fd f89a 	bl	8000790 <HAL_GetTick>
 800365c:	0003      	movs	r3, r0
 800365e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003660:	e008      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003662:	f7fd f895 	bl	8000790 <HAL_GetTick>
 8003666:	0002      	movs	r2, r0
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b64      	cmp	r3, #100	; 0x64
 800366e:	d901      	bls.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e133      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003674:	4b9c      	ldr	r3, [pc, #624]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	2380      	movs	r3, #128	; 0x80
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	4013      	ands	r3, r2
 800367e:	d0f0      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003680:	4b98      	ldr	r3, [pc, #608]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	23c0      	movs	r3, #192	; 0xc0
 8003686:	039b      	lsls	r3, r3, #14
 8003688:	4013      	ands	r3, r2
 800368a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685a      	ldr	r2, [r3, #4]
 8003690:	23c0      	movs	r3, #192	; 0xc0
 8003692:	039b      	lsls	r3, r3, #14
 8003694:	4013      	ands	r3, r2
 8003696:	68fa      	ldr	r2, [r7, #12]
 8003698:	429a      	cmp	r2, r3
 800369a:	d107      	bne.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689a      	ldr	r2, [r3, #8]
 80036a0:	23c0      	movs	r3, #192	; 0xc0
 80036a2:	039b      	lsls	r3, r3, #14
 80036a4:	4013      	ands	r3, r2
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d013      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685a      	ldr	r2, [r3, #4]
 80036b0:	23c0      	movs	r3, #192	; 0xc0
 80036b2:	029b      	lsls	r3, r3, #10
 80036b4:	401a      	ands	r2, r3
 80036b6:	23c0      	movs	r3, #192	; 0xc0
 80036b8:	029b      	lsls	r3, r3, #10
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d10a      	bne.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80036be:	4b89      	ldr	r3, [pc, #548]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	2380      	movs	r3, #128	; 0x80
 80036c4:	029b      	lsls	r3, r3, #10
 80036c6:	401a      	ands	r2, r3
 80036c8:	2380      	movs	r3, #128	; 0x80
 80036ca:	029b      	lsls	r3, r3, #10
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d101      	bne.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e103      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80036d4:	4b83      	ldr	r3, [pc, #524]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80036d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80036d8:	23c0      	movs	r3, #192	; 0xc0
 80036da:	029b      	lsls	r3, r3, #10
 80036dc:	4013      	ands	r3, r2
 80036de:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d049      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x186>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685a      	ldr	r2, [r3, #4]
 80036ea:	23c0      	movs	r3, #192	; 0xc0
 80036ec:	029b      	lsls	r3, r3, #10
 80036ee:	4013      	ands	r3, r2
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d004      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2220      	movs	r2, #32
 80036fc:	4013      	ands	r3, r2
 80036fe:	d10d      	bne.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689a      	ldr	r2, [r3, #8]
 8003704:	23c0      	movs	r3, #192	; 0xc0
 8003706:	029b      	lsls	r3, r3, #10
 8003708:	4013      	ands	r3, r2
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	429a      	cmp	r2, r3
 800370e:	d034      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	2380      	movs	r3, #128	; 0x80
 8003716:	011b      	lsls	r3, r3, #4
 8003718:	4013      	ands	r3, r2
 800371a:	d02e      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800371c:	4b71      	ldr	r3, [pc, #452]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800371e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003720:	4a72      	ldr	r2, [pc, #456]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003722:	4013      	ands	r3, r2
 8003724:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003726:	4b6f      	ldr	r3, [pc, #444]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003728:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800372a:	4b6e      	ldr	r3, [pc, #440]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800372c:	2180      	movs	r1, #128	; 0x80
 800372e:	0309      	lsls	r1, r1, #12
 8003730:	430a      	orrs	r2, r1
 8003732:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003734:	4b6b      	ldr	r3, [pc, #428]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003736:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003738:	4b6a      	ldr	r3, [pc, #424]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800373a:	496d      	ldr	r1, [pc, #436]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800373c:	400a      	ands	r2, r1
 800373e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003740:	4b68      	ldr	r3, [pc, #416]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	2380      	movs	r3, #128	; 0x80
 800374a:	005b      	lsls	r3, r3, #1
 800374c:	4013      	ands	r3, r2
 800374e:	d014      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003750:	f7fd f81e 	bl	8000790 <HAL_GetTick>
 8003754:	0003      	movs	r3, r0
 8003756:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003758:	e009      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800375a:	f7fd f819 	bl	8000790 <HAL_GetTick>
 800375e:	0002      	movs	r2, r0
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	4a63      	ldr	r2, [pc, #396]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d901      	bls.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e0b6      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800376e:	4b5d      	ldr	r3, [pc, #372]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003770:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003772:	2380      	movs	r3, #128	; 0x80
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	4013      	ands	r3, r2
 8003778:	d0ef      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	2380      	movs	r3, #128	; 0x80
 8003780:	011b      	lsls	r3, r3, #4
 8003782:	4013      	ands	r3, r2
 8003784:	d01f      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	689a      	ldr	r2, [r3, #8]
 800378a:	23c0      	movs	r3, #192	; 0xc0
 800378c:	029b      	lsls	r3, r3, #10
 800378e:	401a      	ands	r2, r3
 8003790:	23c0      	movs	r3, #192	; 0xc0
 8003792:	029b      	lsls	r3, r3, #10
 8003794:	429a      	cmp	r2, r3
 8003796:	d10c      	bne.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003798:	4b52      	ldr	r3, [pc, #328]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a56      	ldr	r2, [pc, #344]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800379e:	4013      	ands	r3, r2
 80037a0:	0019      	movs	r1, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	689a      	ldr	r2, [r3, #8]
 80037a6:	23c0      	movs	r3, #192	; 0xc0
 80037a8:	039b      	lsls	r3, r3, #14
 80037aa:	401a      	ands	r2, r3
 80037ac:	4b4d      	ldr	r3, [pc, #308]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80037ae:	430a      	orrs	r2, r1
 80037b0:	601a      	str	r2, [r3, #0]
 80037b2:	4b4c      	ldr	r3, [pc, #304]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80037b4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	689a      	ldr	r2, [r3, #8]
 80037ba:	23c0      	movs	r3, #192	; 0xc0
 80037bc:	029b      	lsls	r3, r3, #10
 80037be:	401a      	ands	r2, r3
 80037c0:	4b48      	ldr	r3, [pc, #288]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80037c2:	430a      	orrs	r2, r1
 80037c4:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2220      	movs	r2, #32
 80037cc:	4013      	ands	r3, r2
 80037ce:	d01f      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685a      	ldr	r2, [r3, #4]
 80037d4:	23c0      	movs	r3, #192	; 0xc0
 80037d6:	029b      	lsls	r3, r3, #10
 80037d8:	401a      	ands	r2, r3
 80037da:	23c0      	movs	r3, #192	; 0xc0
 80037dc:	029b      	lsls	r3, r3, #10
 80037de:	429a      	cmp	r2, r3
 80037e0:	d10c      	bne.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x208>
 80037e2:	4b40      	ldr	r3, [pc, #256]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a44      	ldr	r2, [pc, #272]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80037e8:	4013      	ands	r3, r2
 80037ea:	0019      	movs	r1, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685a      	ldr	r2, [r3, #4]
 80037f0:	23c0      	movs	r3, #192	; 0xc0
 80037f2:	039b      	lsls	r3, r3, #14
 80037f4:	401a      	ands	r2, r3
 80037f6:	4b3b      	ldr	r3, [pc, #236]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80037f8:	430a      	orrs	r2, r1
 80037fa:	601a      	str	r2, [r3, #0]
 80037fc:	4b39      	ldr	r3, [pc, #228]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80037fe:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685a      	ldr	r2, [r3, #4]
 8003804:	23c0      	movs	r3, #192	; 0xc0
 8003806:	029b      	lsls	r3, r3, #10
 8003808:	401a      	ands	r2, r3
 800380a:	4b36      	ldr	r3, [pc, #216]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800380c:	430a      	orrs	r2, r1
 800380e:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003810:	2317      	movs	r3, #23
 8003812:	18fb      	adds	r3, r7, r3
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d105      	bne.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800381a:	4b32      	ldr	r3, [pc, #200]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800381c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800381e:	4b31      	ldr	r3, [pc, #196]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003820:	4936      	ldr	r1, [pc, #216]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003822:	400a      	ands	r2, r1
 8003824:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2201      	movs	r2, #1
 800382c:	4013      	ands	r3, r2
 800382e:	d009      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003830:	4b2c      	ldr	r3, [pc, #176]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003832:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003834:	2203      	movs	r2, #3
 8003836:	4393      	bics	r3, r2
 8003838:	0019      	movs	r1, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	68da      	ldr	r2, [r3, #12]
 800383e:	4b29      	ldr	r3, [pc, #164]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003840:	430a      	orrs	r2, r1
 8003842:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2202      	movs	r2, #2
 800384a:	4013      	ands	r3, r2
 800384c:	d009      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800384e:	4b25      	ldr	r3, [pc, #148]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003852:	220c      	movs	r2, #12
 8003854:	4393      	bics	r3, r2
 8003856:	0019      	movs	r1, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	691a      	ldr	r2, [r3, #16]
 800385c:	4b21      	ldr	r3, [pc, #132]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800385e:	430a      	orrs	r2, r1
 8003860:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2204      	movs	r2, #4
 8003868:	4013      	ands	r3, r2
 800386a:	d009      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800386c:	4b1d      	ldr	r3, [pc, #116]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800386e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003870:	4a23      	ldr	r2, [pc, #140]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8003872:	4013      	ands	r3, r2
 8003874:	0019      	movs	r1, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	695a      	ldr	r2, [r3, #20]
 800387a:	4b1a      	ldr	r3, [pc, #104]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800387c:	430a      	orrs	r2, r1
 800387e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2208      	movs	r2, #8
 8003886:	4013      	ands	r3, r2
 8003888:	d009      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800388a:	4b16      	ldr	r3, [pc, #88]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800388c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800388e:	4a1d      	ldr	r2, [pc, #116]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003890:	4013      	ands	r3, r2
 8003892:	0019      	movs	r1, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	699a      	ldr	r2, [r3, #24]
 8003898:	4b12      	ldr	r3, [pc, #72]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800389a:	430a      	orrs	r2, r1
 800389c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2240      	movs	r2, #64	; 0x40
 80038a4:	4013      	ands	r3, r2
 80038a6:	d009      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038a8:	4b0e      	ldr	r3, [pc, #56]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80038aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ac:	4a16      	ldr	r2, [pc, #88]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80038ae:	4013      	ands	r3, r2
 80038b0:	0019      	movs	r1, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a1a      	ldr	r2, [r3, #32]
 80038b6:	4b0b      	ldr	r3, [pc, #44]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80038b8:	430a      	orrs	r2, r1
 80038ba:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2280      	movs	r2, #128	; 0x80
 80038c2:	4013      	ands	r3, r2
 80038c4:	d009      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80038c6:	4b07      	ldr	r3, [pc, #28]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80038c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ca:	4a10      	ldr	r2, [pc, #64]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80038cc:	4013      	ands	r3, r2
 80038ce:	0019      	movs	r1, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	69da      	ldr	r2, [r3, #28]
 80038d4:	4b03      	ldr	r3, [pc, #12]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80038d6:	430a      	orrs	r2, r1
 80038d8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	0018      	movs	r0, r3
 80038de:	46bd      	mov	sp, r7
 80038e0:	b006      	add	sp, #24
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	40021000 	.word	0x40021000
 80038e8:	40007000 	.word	0x40007000
 80038ec:	fffcffff 	.word	0xfffcffff
 80038f0:	fff7ffff 	.word	0xfff7ffff
 80038f4:	00001388 	.word	0x00001388
 80038f8:	ffcfffff 	.word	0xffcfffff
 80038fc:	efffffff 	.word	0xefffffff
 8003900:	fffff3ff 	.word	0xfffff3ff
 8003904:	ffffcfff 	.word	0xffffcfff
 8003908:	fbffffff 	.word	0xfbffffff
 800390c:	fff3ffff 	.word	0xfff3ffff

08003910 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2244      	movs	r2, #68	; 0x44
 800391c:	2100      	movs	r1, #0
 800391e:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003920:	4b05      	ldr	r3, [pc, #20]	; (8003938 <USB_EnableGlobalInt+0x28>)
 8003922:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	b299      	uxth	r1, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2240      	movs	r2, #64	; 0x40
 800392c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	0018      	movs	r0, r3
 8003932:	46bd      	mov	sp, r7
 8003934:	b004      	add	sp, #16
 8003936:	bd80      	pop	{r7, pc}
 8003938:	0000bf80 	.word	0x0000bf80

0800393c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003944:	4b09      	ldr	r3, [pc, #36]	; (800396c <USB_DisableGlobalInt+0x30>)
 8003946:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2240      	movs	r2, #64	; 0x40
 800394c:	5a9b      	ldrh	r3, [r3, r2]
 800394e:	b29b      	uxth	r3, r3
 8003950:	68fa      	ldr	r2, [r7, #12]
 8003952:	b292      	uxth	r2, r2
 8003954:	43d2      	mvns	r2, r2
 8003956:	b292      	uxth	r2, r2
 8003958:	4013      	ands	r3, r2
 800395a:	b299      	uxth	r1, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2240      	movs	r2, #64	; 0x40
 8003960:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	0018      	movs	r0, r3
 8003966:	46bd      	mov	sp, r7
 8003968:	b004      	add	sp, #16
 800396a:	bd80      	pop	{r7, pc}
 800396c:	0000bf80 	.word	0x0000bf80

08003970 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003970:	b084      	sub	sp, #16
 8003972:	b590      	push	{r4, r7, lr}
 8003974:	b083      	sub	sp, #12
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
 800397a:	2004      	movs	r0, #4
 800397c:	2410      	movs	r4, #16
 800397e:	1900      	adds	r0, r0, r4
 8003980:	2408      	movs	r4, #8
 8003982:	46a4      	mov	ip, r4
 8003984:	44bc      	add	ip, r7
 8003986:	4460      	add	r0, ip
 8003988:	6001      	str	r1, [r0, #0]
 800398a:	6042      	str	r2, [r0, #4]
 800398c:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2240      	movs	r2, #64	; 0x40
 8003992:	2101      	movs	r1, #1
 8003994:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2240      	movs	r2, #64	; 0x40
 800399a:	2100      	movs	r1, #0
 800399c:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2244      	movs	r2, #68	; 0x44
 80039a2:	2100      	movs	r1, #0
 80039a4:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2250      	movs	r2, #80	; 0x50
 80039aa:	2100      	movs	r1, #0
 80039ac:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	0018      	movs	r0, r3
 80039b2:	46bd      	mov	sp, r7
 80039b4:	b003      	add	sp, #12
 80039b6:	bc90      	pop	{r4, r7}
 80039b8:	bc08      	pop	{r3}
 80039ba:	b004      	add	sp, #16
 80039bc:	4718      	bx	r3
	...

080039c0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b09c      	sub	sp, #112	; 0x70
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80039ca:	236f      	movs	r3, #111	; 0x6f
 80039cc:	18fb      	adds	r3, r7, r3
 80039ce:	2200      	movs	r2, #0
 80039d0:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	18d3      	adds	r3, r2, r3
 80039dc:	881b      	ldrh	r3, [r3, #0]
 80039de:	b29a      	uxth	r2, r3
 80039e0:	236c      	movs	r3, #108	; 0x6c
 80039e2:	18fb      	adds	r3, r7, r3
 80039e4:	49a3      	ldr	r1, [pc, #652]	; (8003c74 <USB_ActivateEndpoint+0x2b4>)
 80039e6:	400a      	ands	r2, r1
 80039e8:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	78db      	ldrb	r3, [r3, #3]
 80039ee:	2b03      	cmp	r3, #3
 80039f0:	d017      	beq.n	8003a22 <USB_ActivateEndpoint+0x62>
 80039f2:	dc28      	bgt.n	8003a46 <USB_ActivateEndpoint+0x86>
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d00e      	beq.n	8003a16 <USB_ActivateEndpoint+0x56>
 80039f8:	dc25      	bgt.n	8003a46 <USB_ActivateEndpoint+0x86>
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d002      	beq.n	8003a04 <USB_ActivateEndpoint+0x44>
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d018      	beq.n	8003a34 <USB_ActivateEndpoint+0x74>
 8003a02:	e020      	b.n	8003a46 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003a04:	226c      	movs	r2, #108	; 0x6c
 8003a06:	18bb      	adds	r3, r7, r2
 8003a08:	18ba      	adds	r2, r7, r2
 8003a0a:	8812      	ldrh	r2, [r2, #0]
 8003a0c:	2180      	movs	r1, #128	; 0x80
 8003a0e:	0089      	lsls	r1, r1, #2
 8003a10:	430a      	orrs	r2, r1
 8003a12:	801a      	strh	r2, [r3, #0]
      break;
 8003a14:	e01c      	b.n	8003a50 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8003a16:	226c      	movs	r2, #108	; 0x6c
 8003a18:	18bb      	adds	r3, r7, r2
 8003a1a:	18ba      	adds	r2, r7, r2
 8003a1c:	8812      	ldrh	r2, [r2, #0]
 8003a1e:	801a      	strh	r2, [r3, #0]
      break;
 8003a20:	e016      	b.n	8003a50 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003a22:	226c      	movs	r2, #108	; 0x6c
 8003a24:	18bb      	adds	r3, r7, r2
 8003a26:	18ba      	adds	r2, r7, r2
 8003a28:	8812      	ldrh	r2, [r2, #0]
 8003a2a:	21c0      	movs	r1, #192	; 0xc0
 8003a2c:	00c9      	lsls	r1, r1, #3
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	801a      	strh	r2, [r3, #0]
      break;
 8003a32:	e00d      	b.n	8003a50 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003a34:	226c      	movs	r2, #108	; 0x6c
 8003a36:	18bb      	adds	r3, r7, r2
 8003a38:	18ba      	adds	r2, r7, r2
 8003a3a:	8812      	ldrh	r2, [r2, #0]
 8003a3c:	2180      	movs	r1, #128	; 0x80
 8003a3e:	00c9      	lsls	r1, r1, #3
 8003a40:	430a      	orrs	r2, r1
 8003a42:	801a      	strh	r2, [r3, #0]
      break;
 8003a44:	e004      	b.n	8003a50 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8003a46:	236f      	movs	r3, #111	; 0x6f
 8003a48:	18fb      	adds	r3, r7, r3
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	701a      	strb	r2, [r3, #0]
      break;
 8003a4e:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	18d3      	adds	r3, r2, r3
 8003a5a:	226c      	movs	r2, #108	; 0x6c
 8003a5c:	18ba      	adds	r2, r7, r2
 8003a5e:	8812      	ldrh	r2, [r2, #0]
 8003a60:	4985      	ldr	r1, [pc, #532]	; (8003c78 <USB_ActivateEndpoint+0x2b8>)
 8003a62:	430a      	orrs	r2, r1
 8003a64:	b292      	uxth	r2, r2
 8003a66:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	18d3      	adds	r3, r2, r3
 8003a72:	881b      	ldrh	r3, [r3, #0]
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	b21b      	sxth	r3, r3
 8003a78:	4a80      	ldr	r2, [pc, #512]	; (8003c7c <USB_ActivateEndpoint+0x2bc>)
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	b21a      	sxth	r2, r3
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	b21b      	sxth	r3, r3
 8003a84:	4313      	orrs	r3, r2
 8003a86:	b21a      	sxth	r2, r3
 8003a88:	2166      	movs	r1, #102	; 0x66
 8003a8a:	187b      	adds	r3, r7, r1
 8003a8c:	801a      	strh	r2, [r3, #0]
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	18d3      	adds	r3, r2, r3
 8003a98:	187a      	adds	r2, r7, r1
 8003a9a:	8812      	ldrh	r2, [r2, #0]
 8003a9c:	4976      	ldr	r1, [pc, #472]	; (8003c78 <USB_ActivateEndpoint+0x2b8>)
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	b292      	uxth	r2, r2
 8003aa2:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	7b1b      	ldrb	r3, [r3, #12]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d000      	beq.n	8003aae <USB_ActivateEndpoint+0xee>
 8003aac:	e178      	b.n	8003da0 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	785b      	ldrb	r3, [r3, #1]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d100      	bne.n	8003ab8 <USB_ActivateEndpoint+0xf8>
 8003ab6:	e07a      	b.n	8003bae <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	61bb      	str	r3, [r7, #24]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2250      	movs	r2, #80	; 0x50
 8003ac0:	5a9b      	ldrh	r3, [r3, r2]
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	001a      	movs	r2, r3
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	189b      	adds	r3, r3, r2
 8003aca:	61bb      	str	r3, [r7, #24]
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	00da      	lsls	r2, r3, #3
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	18d3      	adds	r3, r2, r3
 8003ad6:	2280      	movs	r2, #128	; 0x80
 8003ad8:	00d2      	lsls	r2, r2, #3
 8003ada:	4694      	mov	ip, r2
 8003adc:	4463      	add	r3, ip
 8003ade:	617b      	str	r3, [r7, #20]
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	88db      	ldrh	r3, [r3, #6]
 8003ae4:	085b      	lsrs	r3, r3, #1
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	18db      	adds	r3, r3, r3
 8003aea:	b29a      	uxth	r2, r3
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	18d2      	adds	r2, r2, r3
 8003afa:	2112      	movs	r1, #18
 8003afc:	187b      	adds	r3, r7, r1
 8003afe:	8812      	ldrh	r2, [r2, #0]
 8003b00:	801a      	strh	r2, [r3, #0]
 8003b02:	187b      	adds	r3, r7, r1
 8003b04:	881b      	ldrh	r3, [r3, #0]
 8003b06:	2240      	movs	r2, #64	; 0x40
 8003b08:	4013      	ands	r3, r2
 8003b0a:	d016      	beq.n	8003b3a <USB_ActivateEndpoint+0x17a>
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	18d3      	adds	r3, r2, r3
 8003b16:	881b      	ldrh	r3, [r3, #0]
 8003b18:	b29a      	uxth	r2, r3
 8003b1a:	2010      	movs	r0, #16
 8003b1c:	183b      	adds	r3, r7, r0
 8003b1e:	4957      	ldr	r1, [pc, #348]	; (8003c7c <USB_ActivateEndpoint+0x2bc>)
 8003b20:	400a      	ands	r2, r1
 8003b22:	801a      	strh	r2, [r3, #0]
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	18d3      	adds	r3, r2, r3
 8003b2e:	183a      	adds	r2, r7, r0
 8003b30:	8812      	ldrh	r2, [r2, #0]
 8003b32:	4953      	ldr	r1, [pc, #332]	; (8003c80 <USB_ActivateEndpoint+0x2c0>)
 8003b34:	430a      	orrs	r2, r1
 8003b36:	b292      	uxth	r2, r2
 8003b38:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	78db      	ldrb	r3, [r3, #3]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d01d      	beq.n	8003b7e <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	18d3      	adds	r3, r2, r3
 8003b4c:	881b      	ldrh	r3, [r3, #0]
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	200c      	movs	r0, #12
 8003b52:	183b      	adds	r3, r7, r0
 8003b54:	494b      	ldr	r1, [pc, #300]	; (8003c84 <USB_ActivateEndpoint+0x2c4>)
 8003b56:	400a      	ands	r2, r1
 8003b58:	801a      	strh	r2, [r3, #0]
 8003b5a:	183b      	adds	r3, r7, r0
 8003b5c:	183a      	adds	r2, r7, r0
 8003b5e:	8812      	ldrh	r2, [r2, #0]
 8003b60:	2120      	movs	r1, #32
 8003b62:	404a      	eors	r2, r1
 8003b64:	801a      	strh	r2, [r3, #0]
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	18d3      	adds	r3, r2, r3
 8003b70:	183a      	adds	r2, r7, r0
 8003b72:	8812      	ldrh	r2, [r2, #0]
 8003b74:	4940      	ldr	r1, [pc, #256]	; (8003c78 <USB_ActivateEndpoint+0x2b8>)
 8003b76:	430a      	orrs	r2, r1
 8003b78:	b292      	uxth	r2, r2
 8003b7a:	801a      	strh	r2, [r3, #0]
 8003b7c:	e2b4      	b.n	80040e8 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	18d3      	adds	r3, r2, r3
 8003b88:	881b      	ldrh	r3, [r3, #0]
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	200e      	movs	r0, #14
 8003b8e:	183b      	adds	r3, r7, r0
 8003b90:	493c      	ldr	r1, [pc, #240]	; (8003c84 <USB_ActivateEndpoint+0x2c4>)
 8003b92:	400a      	ands	r2, r1
 8003b94:	801a      	strh	r2, [r3, #0]
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	18d3      	adds	r3, r2, r3
 8003ba0:	183a      	adds	r2, r7, r0
 8003ba2:	8812      	ldrh	r2, [r2, #0]
 8003ba4:	4934      	ldr	r1, [pc, #208]	; (8003c78 <USB_ActivateEndpoint+0x2b8>)
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	b292      	uxth	r2, r2
 8003baa:	801a      	strh	r2, [r3, #0]
 8003bac:	e29c      	b.n	80040e8 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	633b      	str	r3, [r7, #48]	; 0x30
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2250      	movs	r2, #80	; 0x50
 8003bb6:	5a9b      	ldrh	r3, [r3, r2]
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	001a      	movs	r2, r3
 8003bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bbe:	189b      	adds	r3, r3, r2
 8003bc0:	633b      	str	r3, [r7, #48]	; 0x30
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	00da      	lsls	r2, r3, #3
 8003bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bca:	18d3      	adds	r3, r2, r3
 8003bcc:	4a2e      	ldr	r2, [pc, #184]	; (8003c88 <USB_ActivateEndpoint+0x2c8>)
 8003bce:	4694      	mov	ip, r2
 8003bd0:	4463      	add	r3, ip
 8003bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	88db      	ldrh	r3, [r3, #6]
 8003bd8:	085b      	lsrs	r3, r3, #1
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	18db      	adds	r3, r3, r3
 8003bde:	b29a      	uxth	r2, r3
 8003be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2250      	movs	r2, #80	; 0x50
 8003bec:	5a9b      	ldrh	r3, [r3, r2]
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	001a      	movs	r2, r3
 8003bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf4:	189b      	adds	r3, r3, r2
 8003bf6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	00da      	lsls	r2, r3, #3
 8003bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c00:	18d3      	adds	r3, r2, r3
 8003c02:	4a22      	ldr	r2, [pc, #136]	; (8003c8c <USB_ActivateEndpoint+0x2cc>)
 8003c04:	4694      	mov	ip, r2
 8003c06:	4463      	add	r3, ip
 8003c08:	627b      	str	r3, [r7, #36]	; 0x24
 8003c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0c:	881b      	ldrh	r3, [r3, #0]
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	059b      	lsls	r3, r3, #22
 8003c12:	0d9b      	lsrs	r3, r3, #22
 8003c14:	b29a      	uxth	r2, r3
 8003c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c18:	801a      	strh	r2, [r3, #0]
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	2b3e      	cmp	r3, #62	; 0x3e
 8003c20:	d91a      	bls.n	8003c58 <USB_ActivateEndpoint+0x298>
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	095b      	lsrs	r3, r3, #5
 8003c28:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	221f      	movs	r2, #31
 8003c30:	4013      	ands	r3, r2
 8003c32:	d102      	bne.n	8003c3a <USB_ActivateEndpoint+0x27a>
 8003c34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c36:	3b01      	subs	r3, #1
 8003c38:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3c:	881b      	ldrh	r3, [r3, #0]
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	029b      	lsls	r3, r3, #10
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	4a10      	ldr	r2, [pc, #64]	; (8003c90 <USB_ActivateEndpoint+0x2d0>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c54:	801a      	strh	r2, [r3, #0]
 8003c56:	e034      	b.n	8003cc2 <USB_ActivateEndpoint+0x302>
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d119      	bne.n	8003c94 <USB_ActivateEndpoint+0x2d4>
 8003c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c62:	881b      	ldrh	r3, [r3, #0]
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	4a0a      	ldr	r2, [pc, #40]	; (8003c90 <USB_ActivateEndpoint+0x2d0>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6e:	801a      	strh	r2, [r3, #0]
 8003c70:	e027      	b.n	8003cc2 <USB_ActivateEndpoint+0x302>
 8003c72:	46c0      	nop			; (mov r8, r8)
 8003c74:	ffff898f 	.word	0xffff898f
 8003c78:	ffff8080 	.word	0xffff8080
 8003c7c:	ffff8f8f 	.word	0xffff8f8f
 8003c80:	ffff80c0 	.word	0xffff80c0
 8003c84:	ffff8fbf 	.word	0xffff8fbf
 8003c88:	00000404 	.word	0x00000404
 8003c8c:	00000406 	.word	0x00000406
 8003c90:	ffff8000 	.word	0xffff8000
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	085b      	lsrs	r3, r3, #1
 8003c9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	d002      	beq.n	8003cac <USB_ActivateEndpoint+0x2ec>
 8003ca6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ca8:	3301      	adds	r3, #1
 8003caa:	66bb      	str	r3, [r7, #104]	; 0x68
 8003cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cae:	881b      	ldrh	r3, [r3, #0]
 8003cb0:	b29a      	uxth	r2, r3
 8003cb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	029b      	lsls	r3, r3, #10
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	18d2      	adds	r2, r2, r3
 8003ccc:	2122      	movs	r1, #34	; 0x22
 8003cce:	187b      	adds	r3, r7, r1
 8003cd0:	8812      	ldrh	r2, [r2, #0]
 8003cd2:	801a      	strh	r2, [r3, #0]
 8003cd4:	187b      	adds	r3, r7, r1
 8003cd6:	881a      	ldrh	r2, [r3, #0]
 8003cd8:	2380      	movs	r3, #128	; 0x80
 8003cda:	01db      	lsls	r3, r3, #7
 8003cdc:	4013      	ands	r3, r2
 8003cde:	d016      	beq.n	8003d0e <USB_ActivateEndpoint+0x34e>
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	18d3      	adds	r3, r2, r3
 8003cea:	881b      	ldrh	r3, [r3, #0]
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	2020      	movs	r0, #32
 8003cf0:	183b      	adds	r3, r7, r0
 8003cf2:	49dd      	ldr	r1, [pc, #884]	; (8004068 <USB_ActivateEndpoint+0x6a8>)
 8003cf4:	400a      	ands	r2, r1
 8003cf6:	801a      	strh	r2, [r3, #0]
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	18d3      	adds	r3, r2, r3
 8003d02:	183a      	adds	r2, r7, r0
 8003d04:	8812      	ldrh	r2, [r2, #0]
 8003d06:	49d9      	ldr	r1, [pc, #868]	; (800406c <USB_ActivateEndpoint+0x6ac>)
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	b292      	uxth	r2, r2
 8003d0c:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d125      	bne.n	8003d62 <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	18d3      	adds	r3, r2, r3
 8003d20:	881b      	ldrh	r3, [r3, #0]
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	201c      	movs	r0, #28
 8003d26:	183b      	adds	r3, r7, r0
 8003d28:	49d1      	ldr	r1, [pc, #836]	; (8004070 <USB_ActivateEndpoint+0x6b0>)
 8003d2a:	400a      	ands	r2, r1
 8003d2c:	801a      	strh	r2, [r3, #0]
 8003d2e:	183b      	adds	r3, r7, r0
 8003d30:	183a      	adds	r2, r7, r0
 8003d32:	8812      	ldrh	r2, [r2, #0]
 8003d34:	2180      	movs	r1, #128	; 0x80
 8003d36:	0149      	lsls	r1, r1, #5
 8003d38:	404a      	eors	r2, r1
 8003d3a:	801a      	strh	r2, [r3, #0]
 8003d3c:	183b      	adds	r3, r7, r0
 8003d3e:	183a      	adds	r2, r7, r0
 8003d40:	8812      	ldrh	r2, [r2, #0]
 8003d42:	2180      	movs	r1, #128	; 0x80
 8003d44:	0189      	lsls	r1, r1, #6
 8003d46:	404a      	eors	r2, r1
 8003d48:	801a      	strh	r2, [r3, #0]
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	18d3      	adds	r3, r2, r3
 8003d54:	183a      	adds	r2, r7, r0
 8003d56:	8812      	ldrh	r2, [r2, #0]
 8003d58:	49c6      	ldr	r1, [pc, #792]	; (8004074 <USB_ActivateEndpoint+0x6b4>)
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	b292      	uxth	r2, r2
 8003d5e:	801a      	strh	r2, [r3, #0]
 8003d60:	e1c2      	b.n	80040e8 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	18d3      	adds	r3, r2, r3
 8003d6c:	881b      	ldrh	r3, [r3, #0]
 8003d6e:	b29a      	uxth	r2, r3
 8003d70:	201e      	movs	r0, #30
 8003d72:	183b      	adds	r3, r7, r0
 8003d74:	49be      	ldr	r1, [pc, #760]	; (8004070 <USB_ActivateEndpoint+0x6b0>)
 8003d76:	400a      	ands	r2, r1
 8003d78:	801a      	strh	r2, [r3, #0]
 8003d7a:	183b      	adds	r3, r7, r0
 8003d7c:	183a      	adds	r2, r7, r0
 8003d7e:	8812      	ldrh	r2, [r2, #0]
 8003d80:	2180      	movs	r1, #128	; 0x80
 8003d82:	0189      	lsls	r1, r1, #6
 8003d84:	404a      	eors	r2, r1
 8003d86:	801a      	strh	r2, [r3, #0]
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	18d3      	adds	r3, r2, r3
 8003d92:	183a      	adds	r2, r7, r0
 8003d94:	8812      	ldrh	r2, [r2, #0]
 8003d96:	49b7      	ldr	r1, [pc, #732]	; (8004074 <USB_ActivateEndpoint+0x6b4>)
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	b292      	uxth	r2, r2
 8003d9c:	801a      	strh	r2, [r3, #0]
 8003d9e:	e1a3      	b.n	80040e8 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	78db      	ldrb	r3, [r3, #3]
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d117      	bne.n	8003dd8 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	18d3      	adds	r3, r2, r3
 8003db2:	881b      	ldrh	r3, [r3, #0]
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	2062      	movs	r0, #98	; 0x62
 8003db8:	183b      	adds	r3, r7, r0
 8003dba:	49ab      	ldr	r1, [pc, #684]	; (8004068 <USB_ActivateEndpoint+0x6a8>)
 8003dbc:	400a      	ands	r2, r1
 8003dbe:	801a      	strh	r2, [r3, #0]
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	18d3      	adds	r3, r2, r3
 8003dca:	183a      	adds	r2, r7, r0
 8003dcc:	8812      	ldrh	r2, [r2, #0]
 8003dce:	49aa      	ldr	r1, [pc, #680]	; (8004078 <USB_ActivateEndpoint+0x6b8>)
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	b292      	uxth	r2, r2
 8003dd4:	801a      	strh	r2, [r3, #0]
 8003dd6:	e016      	b.n	8003e06 <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	18d3      	adds	r3, r2, r3
 8003de2:	881b      	ldrh	r3, [r3, #0]
 8003de4:	b29a      	uxth	r2, r3
 8003de6:	2064      	movs	r0, #100	; 0x64
 8003de8:	183b      	adds	r3, r7, r0
 8003dea:	49a4      	ldr	r1, [pc, #656]	; (800407c <USB_ActivateEndpoint+0x6bc>)
 8003dec:	400a      	ands	r2, r1
 8003dee:	801a      	strh	r2, [r3, #0]
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	18d3      	adds	r3, r2, r3
 8003dfa:	183a      	adds	r2, r7, r0
 8003dfc:	8812      	ldrh	r2, [r2, #0]
 8003dfe:	499d      	ldr	r1, [pc, #628]	; (8004074 <USB_ActivateEndpoint+0x6b4>)
 8003e00:	430a      	orrs	r2, r1
 8003e02:	b292      	uxth	r2, r2
 8003e04:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2250      	movs	r2, #80	; 0x50
 8003e0e:	5a9b      	ldrh	r3, [r3, r2]
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	001a      	movs	r2, r3
 8003e14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e16:	189b      	adds	r3, r3, r2
 8003e18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	00da      	lsls	r2, r3, #3
 8003e20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e22:	18d3      	adds	r3, r2, r3
 8003e24:	2280      	movs	r2, #128	; 0x80
 8003e26:	00d2      	lsls	r2, r2, #3
 8003e28:	4694      	mov	ip, r2
 8003e2a:	4463      	add	r3, ip
 8003e2c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	891b      	ldrh	r3, [r3, #8]
 8003e32:	085b      	lsrs	r3, r3, #1
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	18db      	adds	r3, r3, r3
 8003e38:	b29a      	uxth	r2, r3
 8003e3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e3c:	801a      	strh	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	657b      	str	r3, [r7, #84]	; 0x54
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2250      	movs	r2, #80	; 0x50
 8003e46:	5a9b      	ldrh	r3, [r3, r2]
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	001a      	movs	r2, r3
 8003e4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e4e:	189b      	adds	r3, r3, r2
 8003e50:	657b      	str	r3, [r7, #84]	; 0x54
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	00da      	lsls	r2, r3, #3
 8003e58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e5a:	18d3      	adds	r3, r2, r3
 8003e5c:	4a88      	ldr	r2, [pc, #544]	; (8004080 <USB_ActivateEndpoint+0x6c0>)
 8003e5e:	4694      	mov	ip, r2
 8003e60:	4463      	add	r3, ip
 8003e62:	653b      	str	r3, [r7, #80]	; 0x50
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	895b      	ldrh	r3, [r3, #10]
 8003e68:	085b      	lsrs	r3, r3, #1
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	18db      	adds	r3, r3, r3
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e72:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	785b      	ldrb	r3, [r3, #1]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d000      	beq.n	8003e7e <USB_ActivateEndpoint+0x4be>
 8003e7c:	e087      	b.n	8003f8e <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	18d2      	adds	r2, r2, r3
 8003e88:	2140      	movs	r1, #64	; 0x40
 8003e8a:	187b      	adds	r3, r7, r1
 8003e8c:	8812      	ldrh	r2, [r2, #0]
 8003e8e:	801a      	strh	r2, [r3, #0]
 8003e90:	187b      	adds	r3, r7, r1
 8003e92:	881a      	ldrh	r2, [r3, #0]
 8003e94:	2380      	movs	r3, #128	; 0x80
 8003e96:	01db      	lsls	r3, r3, #7
 8003e98:	4013      	ands	r3, r2
 8003e9a:	d016      	beq.n	8003eca <USB_ActivateEndpoint+0x50a>
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	18d3      	adds	r3, r2, r3
 8003ea6:	881b      	ldrh	r3, [r3, #0]
 8003ea8:	b29a      	uxth	r2, r3
 8003eaa:	203e      	movs	r0, #62	; 0x3e
 8003eac:	183b      	adds	r3, r7, r0
 8003eae:	496e      	ldr	r1, [pc, #440]	; (8004068 <USB_ActivateEndpoint+0x6a8>)
 8003eb0:	400a      	ands	r2, r1
 8003eb2:	801a      	strh	r2, [r3, #0]
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	18d3      	adds	r3, r2, r3
 8003ebe:	183a      	adds	r2, r7, r0
 8003ec0:	8812      	ldrh	r2, [r2, #0]
 8003ec2:	496a      	ldr	r1, [pc, #424]	; (800406c <USB_ActivateEndpoint+0x6ac>)
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	b292      	uxth	r2, r2
 8003ec8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	18d2      	adds	r2, r2, r3
 8003ed4:	213c      	movs	r1, #60	; 0x3c
 8003ed6:	187b      	adds	r3, r7, r1
 8003ed8:	8812      	ldrh	r2, [r2, #0]
 8003eda:	801a      	strh	r2, [r3, #0]
 8003edc:	187b      	adds	r3, r7, r1
 8003ede:	881b      	ldrh	r3, [r3, #0]
 8003ee0:	2240      	movs	r2, #64	; 0x40
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	d016      	beq.n	8003f14 <USB_ActivateEndpoint+0x554>
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	18d3      	adds	r3, r2, r3
 8003ef0:	881b      	ldrh	r3, [r3, #0]
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	203a      	movs	r0, #58	; 0x3a
 8003ef6:	183b      	adds	r3, r7, r0
 8003ef8:	495b      	ldr	r1, [pc, #364]	; (8004068 <USB_ActivateEndpoint+0x6a8>)
 8003efa:	400a      	ands	r2, r1
 8003efc:	801a      	strh	r2, [r3, #0]
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	18d3      	adds	r3, r2, r3
 8003f08:	183a      	adds	r2, r7, r0
 8003f0a:	8812      	ldrh	r2, [r2, #0]
 8003f0c:	495d      	ldr	r1, [pc, #372]	; (8004084 <USB_ActivateEndpoint+0x6c4>)
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	b292      	uxth	r2, r2
 8003f12:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	18d3      	adds	r3, r2, r3
 8003f1e:	881b      	ldrh	r3, [r3, #0]
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	2038      	movs	r0, #56	; 0x38
 8003f24:	183b      	adds	r3, r7, r0
 8003f26:	4952      	ldr	r1, [pc, #328]	; (8004070 <USB_ActivateEndpoint+0x6b0>)
 8003f28:	400a      	ands	r2, r1
 8003f2a:	801a      	strh	r2, [r3, #0]
 8003f2c:	183b      	adds	r3, r7, r0
 8003f2e:	183a      	adds	r2, r7, r0
 8003f30:	8812      	ldrh	r2, [r2, #0]
 8003f32:	2180      	movs	r1, #128	; 0x80
 8003f34:	0149      	lsls	r1, r1, #5
 8003f36:	404a      	eors	r2, r1
 8003f38:	801a      	strh	r2, [r3, #0]
 8003f3a:	183b      	adds	r3, r7, r0
 8003f3c:	183a      	adds	r2, r7, r0
 8003f3e:	8812      	ldrh	r2, [r2, #0]
 8003f40:	2180      	movs	r1, #128	; 0x80
 8003f42:	0189      	lsls	r1, r1, #6
 8003f44:	404a      	eors	r2, r1
 8003f46:	801a      	strh	r2, [r3, #0]
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	18d3      	adds	r3, r2, r3
 8003f52:	183a      	adds	r2, r7, r0
 8003f54:	8812      	ldrh	r2, [r2, #0]
 8003f56:	4947      	ldr	r1, [pc, #284]	; (8004074 <USB_ActivateEndpoint+0x6b4>)
 8003f58:	430a      	orrs	r2, r1
 8003f5a:	b292      	uxth	r2, r2
 8003f5c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	18d3      	adds	r3, r2, r3
 8003f68:	881b      	ldrh	r3, [r3, #0]
 8003f6a:	b29a      	uxth	r2, r3
 8003f6c:	2036      	movs	r0, #54	; 0x36
 8003f6e:	183b      	adds	r3, r7, r0
 8003f70:	4945      	ldr	r1, [pc, #276]	; (8004088 <USB_ActivateEndpoint+0x6c8>)
 8003f72:	400a      	ands	r2, r1
 8003f74:	801a      	strh	r2, [r3, #0]
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	18d3      	adds	r3, r2, r3
 8003f80:	183a      	adds	r2, r7, r0
 8003f82:	8812      	ldrh	r2, [r2, #0]
 8003f84:	493b      	ldr	r1, [pc, #236]	; (8004074 <USB_ActivateEndpoint+0x6b4>)
 8003f86:	430a      	orrs	r2, r1
 8003f88:	b292      	uxth	r2, r2
 8003f8a:	801a      	strh	r2, [r3, #0]
 8003f8c:	e0ac      	b.n	80040e8 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	18d2      	adds	r2, r2, r3
 8003f98:	214e      	movs	r1, #78	; 0x4e
 8003f9a:	187b      	adds	r3, r7, r1
 8003f9c:	8812      	ldrh	r2, [r2, #0]
 8003f9e:	801a      	strh	r2, [r3, #0]
 8003fa0:	187b      	adds	r3, r7, r1
 8003fa2:	881a      	ldrh	r2, [r3, #0]
 8003fa4:	2380      	movs	r3, #128	; 0x80
 8003fa6:	01db      	lsls	r3, r3, #7
 8003fa8:	4013      	ands	r3, r2
 8003faa:	d016      	beq.n	8003fda <USB_ActivateEndpoint+0x61a>
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	18d3      	adds	r3, r2, r3
 8003fb6:	881b      	ldrh	r3, [r3, #0]
 8003fb8:	b29a      	uxth	r2, r3
 8003fba:	204c      	movs	r0, #76	; 0x4c
 8003fbc:	183b      	adds	r3, r7, r0
 8003fbe:	492a      	ldr	r1, [pc, #168]	; (8004068 <USB_ActivateEndpoint+0x6a8>)
 8003fc0:	400a      	ands	r2, r1
 8003fc2:	801a      	strh	r2, [r3, #0]
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	18d3      	adds	r3, r2, r3
 8003fce:	183a      	adds	r2, r7, r0
 8003fd0:	8812      	ldrh	r2, [r2, #0]
 8003fd2:	4926      	ldr	r1, [pc, #152]	; (800406c <USB_ActivateEndpoint+0x6ac>)
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	b292      	uxth	r2, r2
 8003fd8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	18d2      	adds	r2, r2, r3
 8003fe4:	214a      	movs	r1, #74	; 0x4a
 8003fe6:	187b      	adds	r3, r7, r1
 8003fe8:	8812      	ldrh	r2, [r2, #0]
 8003fea:	801a      	strh	r2, [r3, #0]
 8003fec:	187b      	adds	r3, r7, r1
 8003fee:	881b      	ldrh	r3, [r3, #0]
 8003ff0:	2240      	movs	r2, #64	; 0x40
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	d016      	beq.n	8004024 <USB_ActivateEndpoint+0x664>
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	18d3      	adds	r3, r2, r3
 8004000:	881b      	ldrh	r3, [r3, #0]
 8004002:	b29a      	uxth	r2, r3
 8004004:	2048      	movs	r0, #72	; 0x48
 8004006:	183b      	adds	r3, r7, r0
 8004008:	4917      	ldr	r1, [pc, #92]	; (8004068 <USB_ActivateEndpoint+0x6a8>)
 800400a:	400a      	ands	r2, r1
 800400c:	801a      	strh	r2, [r3, #0]
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	18d3      	adds	r3, r2, r3
 8004018:	183a      	adds	r2, r7, r0
 800401a:	8812      	ldrh	r2, [r2, #0]
 800401c:	4919      	ldr	r1, [pc, #100]	; (8004084 <USB_ActivateEndpoint+0x6c4>)
 800401e:	430a      	orrs	r2, r1
 8004020:	b292      	uxth	r2, r2
 8004022:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	78db      	ldrb	r3, [r3, #3]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d02f      	beq.n	800408c <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	18d3      	adds	r3, r2, r3
 8004036:	881b      	ldrh	r3, [r3, #0]
 8004038:	b29a      	uxth	r2, r3
 800403a:	2044      	movs	r0, #68	; 0x44
 800403c:	183b      	adds	r3, r7, r0
 800403e:	4912      	ldr	r1, [pc, #72]	; (8004088 <USB_ActivateEndpoint+0x6c8>)
 8004040:	400a      	ands	r2, r1
 8004042:	801a      	strh	r2, [r3, #0]
 8004044:	183b      	adds	r3, r7, r0
 8004046:	183a      	adds	r2, r7, r0
 8004048:	8812      	ldrh	r2, [r2, #0]
 800404a:	2120      	movs	r1, #32
 800404c:	404a      	eors	r2, r1
 800404e:	801a      	strh	r2, [r3, #0]
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	18d3      	adds	r3, r2, r3
 800405a:	183a      	adds	r2, r7, r0
 800405c:	8812      	ldrh	r2, [r2, #0]
 800405e:	4905      	ldr	r1, [pc, #20]	; (8004074 <USB_ActivateEndpoint+0x6b4>)
 8004060:	430a      	orrs	r2, r1
 8004062:	b292      	uxth	r2, r2
 8004064:	801a      	strh	r2, [r3, #0]
 8004066:	e028      	b.n	80040ba <USB_ActivateEndpoint+0x6fa>
 8004068:	ffff8f8f 	.word	0xffff8f8f
 800406c:	ffffc080 	.word	0xffffc080
 8004070:	ffffbf8f 	.word	0xffffbf8f
 8004074:	ffff8080 	.word	0xffff8080
 8004078:	ffff8180 	.word	0xffff8180
 800407c:	ffff8e8f 	.word	0xffff8e8f
 8004080:	00000404 	.word	0x00000404
 8004084:	ffff80c0 	.word	0xffff80c0
 8004088:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	18d3      	adds	r3, r2, r3
 8004096:	881b      	ldrh	r3, [r3, #0]
 8004098:	b29a      	uxth	r2, r3
 800409a:	2046      	movs	r0, #70	; 0x46
 800409c:	183b      	adds	r3, r7, r0
 800409e:	4916      	ldr	r1, [pc, #88]	; (80040f8 <USB_ActivateEndpoint+0x738>)
 80040a0:	400a      	ands	r2, r1
 80040a2:	801a      	strh	r2, [r3, #0]
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	18d3      	adds	r3, r2, r3
 80040ae:	183a      	adds	r2, r7, r0
 80040b0:	8812      	ldrh	r2, [r2, #0]
 80040b2:	4912      	ldr	r1, [pc, #72]	; (80040fc <USB_ActivateEndpoint+0x73c>)
 80040b4:	430a      	orrs	r2, r1
 80040b6:	b292      	uxth	r2, r2
 80040b8:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	18d3      	adds	r3, r2, r3
 80040c4:	881b      	ldrh	r3, [r3, #0]
 80040c6:	b29a      	uxth	r2, r3
 80040c8:	2042      	movs	r0, #66	; 0x42
 80040ca:	183b      	adds	r3, r7, r0
 80040cc:	490c      	ldr	r1, [pc, #48]	; (8004100 <USB_ActivateEndpoint+0x740>)
 80040ce:	400a      	ands	r2, r1
 80040d0:	801a      	strh	r2, [r3, #0]
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	18d3      	adds	r3, r2, r3
 80040dc:	183a      	adds	r2, r7, r0
 80040de:	8812      	ldrh	r2, [r2, #0]
 80040e0:	4906      	ldr	r1, [pc, #24]	; (80040fc <USB_ActivateEndpoint+0x73c>)
 80040e2:	430a      	orrs	r2, r1
 80040e4:	b292      	uxth	r2, r2
 80040e6:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80040e8:	236f      	movs	r3, #111	; 0x6f
 80040ea:	18fb      	adds	r3, r7, r3
 80040ec:	781b      	ldrb	r3, [r3, #0]
}
 80040ee:	0018      	movs	r0, r3
 80040f0:	46bd      	mov	sp, r7
 80040f2:	b01c      	add	sp, #112	; 0x70
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	46c0      	nop			; (mov r8, r8)
 80040f8:	ffff8fbf 	.word	0xffff8fbf
 80040fc:	ffff8080 	.word	0xffff8080
 8004100:	ffffbf8f 	.word	0xffffbf8f

08004104 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b08c      	sub	sp, #48	; 0x30
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	7b1b      	ldrb	r3, [r3, #12]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d000      	beq.n	8004118 <USB_DeactivateEndpoint+0x14>
 8004116:	e07e      	b.n	8004216 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	785b      	ldrb	r3, [r3, #1]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d03c      	beq.n	800419a <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	18d2      	adds	r2, r2, r3
 800412a:	210c      	movs	r1, #12
 800412c:	187b      	adds	r3, r7, r1
 800412e:	8812      	ldrh	r2, [r2, #0]
 8004130:	801a      	strh	r2, [r3, #0]
 8004132:	187b      	adds	r3, r7, r1
 8004134:	881b      	ldrh	r3, [r3, #0]
 8004136:	2240      	movs	r2, #64	; 0x40
 8004138:	4013      	ands	r3, r2
 800413a:	d016      	beq.n	800416a <USB_DeactivateEndpoint+0x66>
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	18d3      	adds	r3, r2, r3
 8004146:	881b      	ldrh	r3, [r3, #0]
 8004148:	b29a      	uxth	r2, r3
 800414a:	200a      	movs	r0, #10
 800414c:	183b      	adds	r3, r7, r0
 800414e:	49c7      	ldr	r1, [pc, #796]	; (800446c <USB_DeactivateEndpoint+0x368>)
 8004150:	400a      	ands	r2, r1
 8004152:	801a      	strh	r2, [r3, #0]
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	18d3      	adds	r3, r2, r3
 800415e:	183a      	adds	r2, r7, r0
 8004160:	8812      	ldrh	r2, [r2, #0]
 8004162:	49c3      	ldr	r1, [pc, #780]	; (8004470 <USB_DeactivateEndpoint+0x36c>)
 8004164:	430a      	orrs	r2, r1
 8004166:	b292      	uxth	r2, r2
 8004168:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	18d3      	adds	r3, r2, r3
 8004174:	881b      	ldrh	r3, [r3, #0]
 8004176:	b29a      	uxth	r2, r3
 8004178:	2008      	movs	r0, #8
 800417a:	183b      	adds	r3, r7, r0
 800417c:	49bd      	ldr	r1, [pc, #756]	; (8004474 <USB_DeactivateEndpoint+0x370>)
 800417e:	400a      	ands	r2, r1
 8004180:	801a      	strh	r2, [r3, #0]
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	18d3      	adds	r3, r2, r3
 800418c:	183a      	adds	r2, r7, r0
 800418e:	8812      	ldrh	r2, [r2, #0]
 8004190:	49b9      	ldr	r1, [pc, #740]	; (8004478 <USB_DeactivateEndpoint+0x374>)
 8004192:	430a      	orrs	r2, r1
 8004194:	b292      	uxth	r2, r2
 8004196:	801a      	strh	r2, [r3, #0]
 8004198:	e163      	b.n	8004462 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	18d2      	adds	r2, r2, r3
 80041a4:	2112      	movs	r1, #18
 80041a6:	187b      	adds	r3, r7, r1
 80041a8:	8812      	ldrh	r2, [r2, #0]
 80041aa:	801a      	strh	r2, [r3, #0]
 80041ac:	187b      	adds	r3, r7, r1
 80041ae:	881a      	ldrh	r2, [r3, #0]
 80041b0:	2380      	movs	r3, #128	; 0x80
 80041b2:	01db      	lsls	r3, r3, #7
 80041b4:	4013      	ands	r3, r2
 80041b6:	d016      	beq.n	80041e6 <USB_DeactivateEndpoint+0xe2>
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	18d3      	adds	r3, r2, r3
 80041c2:	881b      	ldrh	r3, [r3, #0]
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	2010      	movs	r0, #16
 80041c8:	183b      	adds	r3, r7, r0
 80041ca:	49a8      	ldr	r1, [pc, #672]	; (800446c <USB_DeactivateEndpoint+0x368>)
 80041cc:	400a      	ands	r2, r1
 80041ce:	801a      	strh	r2, [r3, #0]
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	18d3      	adds	r3, r2, r3
 80041da:	183a      	adds	r2, r7, r0
 80041dc:	8812      	ldrh	r2, [r2, #0]
 80041de:	49a7      	ldr	r1, [pc, #668]	; (800447c <USB_DeactivateEndpoint+0x378>)
 80041e0:	430a      	orrs	r2, r1
 80041e2:	b292      	uxth	r2, r2
 80041e4:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	18d3      	adds	r3, r2, r3
 80041f0:	881b      	ldrh	r3, [r3, #0]
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	200e      	movs	r0, #14
 80041f6:	183b      	adds	r3, r7, r0
 80041f8:	49a1      	ldr	r1, [pc, #644]	; (8004480 <USB_DeactivateEndpoint+0x37c>)
 80041fa:	400a      	ands	r2, r1
 80041fc:	801a      	strh	r2, [r3, #0]
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	18d3      	adds	r3, r2, r3
 8004208:	183a      	adds	r2, r7, r0
 800420a:	8812      	ldrh	r2, [r2, #0]
 800420c:	499a      	ldr	r1, [pc, #616]	; (8004478 <USB_DeactivateEndpoint+0x374>)
 800420e:	430a      	orrs	r2, r1
 8004210:	b292      	uxth	r2, r2
 8004212:	801a      	strh	r2, [r3, #0]
 8004214:	e125      	b.n	8004462 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	785b      	ldrb	r3, [r3, #1]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d000      	beq.n	8004220 <USB_DeactivateEndpoint+0x11c>
 800421e:	e090      	b.n	8004342 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	18d2      	adds	r2, r2, r3
 800422a:	2120      	movs	r1, #32
 800422c:	187b      	adds	r3, r7, r1
 800422e:	8812      	ldrh	r2, [r2, #0]
 8004230:	801a      	strh	r2, [r3, #0]
 8004232:	187b      	adds	r3, r7, r1
 8004234:	881a      	ldrh	r2, [r3, #0]
 8004236:	2380      	movs	r3, #128	; 0x80
 8004238:	01db      	lsls	r3, r3, #7
 800423a:	4013      	ands	r3, r2
 800423c:	d016      	beq.n	800426c <USB_DeactivateEndpoint+0x168>
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	18d3      	adds	r3, r2, r3
 8004248:	881b      	ldrh	r3, [r3, #0]
 800424a:	b29a      	uxth	r2, r3
 800424c:	201e      	movs	r0, #30
 800424e:	183b      	adds	r3, r7, r0
 8004250:	4986      	ldr	r1, [pc, #536]	; (800446c <USB_DeactivateEndpoint+0x368>)
 8004252:	400a      	ands	r2, r1
 8004254:	801a      	strh	r2, [r3, #0]
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	18d3      	adds	r3, r2, r3
 8004260:	183a      	adds	r2, r7, r0
 8004262:	8812      	ldrh	r2, [r2, #0]
 8004264:	4985      	ldr	r1, [pc, #532]	; (800447c <USB_DeactivateEndpoint+0x378>)
 8004266:	430a      	orrs	r2, r1
 8004268:	b292      	uxth	r2, r2
 800426a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	18d2      	adds	r2, r2, r3
 8004276:	211c      	movs	r1, #28
 8004278:	187b      	adds	r3, r7, r1
 800427a:	8812      	ldrh	r2, [r2, #0]
 800427c:	801a      	strh	r2, [r3, #0]
 800427e:	187b      	adds	r3, r7, r1
 8004280:	881b      	ldrh	r3, [r3, #0]
 8004282:	2240      	movs	r2, #64	; 0x40
 8004284:	4013      	ands	r3, r2
 8004286:	d016      	beq.n	80042b6 <USB_DeactivateEndpoint+0x1b2>
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	18d3      	adds	r3, r2, r3
 8004292:	881b      	ldrh	r3, [r3, #0]
 8004294:	b29a      	uxth	r2, r3
 8004296:	201a      	movs	r0, #26
 8004298:	183b      	adds	r3, r7, r0
 800429a:	4974      	ldr	r1, [pc, #464]	; (800446c <USB_DeactivateEndpoint+0x368>)
 800429c:	400a      	ands	r2, r1
 800429e:	801a      	strh	r2, [r3, #0]
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	18d3      	adds	r3, r2, r3
 80042aa:	183a      	adds	r2, r7, r0
 80042ac:	8812      	ldrh	r2, [r2, #0]
 80042ae:	4970      	ldr	r1, [pc, #448]	; (8004470 <USB_DeactivateEndpoint+0x36c>)
 80042b0:	430a      	orrs	r2, r1
 80042b2:	b292      	uxth	r2, r2
 80042b4:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	18d3      	adds	r3, r2, r3
 80042c0:	881b      	ldrh	r3, [r3, #0]
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	2018      	movs	r0, #24
 80042c6:	183b      	adds	r3, r7, r0
 80042c8:	4968      	ldr	r1, [pc, #416]	; (800446c <USB_DeactivateEndpoint+0x368>)
 80042ca:	400a      	ands	r2, r1
 80042cc:	801a      	strh	r2, [r3, #0]
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	18d3      	adds	r3, r2, r3
 80042d8:	183a      	adds	r2, r7, r0
 80042da:	8812      	ldrh	r2, [r2, #0]
 80042dc:	4964      	ldr	r1, [pc, #400]	; (8004470 <USB_DeactivateEndpoint+0x36c>)
 80042de:	430a      	orrs	r2, r1
 80042e0:	b292      	uxth	r2, r2
 80042e2:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	18d3      	adds	r3, r2, r3
 80042ee:	881b      	ldrh	r3, [r3, #0]
 80042f0:	b29a      	uxth	r2, r3
 80042f2:	2016      	movs	r0, #22
 80042f4:	183b      	adds	r3, r7, r0
 80042f6:	4962      	ldr	r1, [pc, #392]	; (8004480 <USB_DeactivateEndpoint+0x37c>)
 80042f8:	400a      	ands	r2, r1
 80042fa:	801a      	strh	r2, [r3, #0]
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	18d3      	adds	r3, r2, r3
 8004306:	183a      	adds	r2, r7, r0
 8004308:	8812      	ldrh	r2, [r2, #0]
 800430a:	495b      	ldr	r1, [pc, #364]	; (8004478 <USB_DeactivateEndpoint+0x374>)
 800430c:	430a      	orrs	r2, r1
 800430e:	b292      	uxth	r2, r2
 8004310:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	18d3      	adds	r3, r2, r3
 800431c:	881b      	ldrh	r3, [r3, #0]
 800431e:	b29a      	uxth	r2, r3
 8004320:	2014      	movs	r0, #20
 8004322:	183b      	adds	r3, r7, r0
 8004324:	4953      	ldr	r1, [pc, #332]	; (8004474 <USB_DeactivateEndpoint+0x370>)
 8004326:	400a      	ands	r2, r1
 8004328:	801a      	strh	r2, [r3, #0]
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	18d3      	adds	r3, r2, r3
 8004334:	183a      	adds	r2, r7, r0
 8004336:	8812      	ldrh	r2, [r2, #0]
 8004338:	494f      	ldr	r1, [pc, #316]	; (8004478 <USB_DeactivateEndpoint+0x374>)
 800433a:	430a      	orrs	r2, r1
 800433c:	b292      	uxth	r2, r2
 800433e:	801a      	strh	r2, [r3, #0]
 8004340:	e08f      	b.n	8004462 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	18d2      	adds	r2, r2, r3
 800434c:	212e      	movs	r1, #46	; 0x2e
 800434e:	187b      	adds	r3, r7, r1
 8004350:	8812      	ldrh	r2, [r2, #0]
 8004352:	801a      	strh	r2, [r3, #0]
 8004354:	187b      	adds	r3, r7, r1
 8004356:	881a      	ldrh	r2, [r3, #0]
 8004358:	2380      	movs	r3, #128	; 0x80
 800435a:	01db      	lsls	r3, r3, #7
 800435c:	4013      	ands	r3, r2
 800435e:	d016      	beq.n	800438e <USB_DeactivateEndpoint+0x28a>
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	18d3      	adds	r3, r2, r3
 800436a:	881b      	ldrh	r3, [r3, #0]
 800436c:	b29a      	uxth	r2, r3
 800436e:	202c      	movs	r0, #44	; 0x2c
 8004370:	183b      	adds	r3, r7, r0
 8004372:	493e      	ldr	r1, [pc, #248]	; (800446c <USB_DeactivateEndpoint+0x368>)
 8004374:	400a      	ands	r2, r1
 8004376:	801a      	strh	r2, [r3, #0]
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	18d3      	adds	r3, r2, r3
 8004382:	183a      	adds	r2, r7, r0
 8004384:	8812      	ldrh	r2, [r2, #0]
 8004386:	493d      	ldr	r1, [pc, #244]	; (800447c <USB_DeactivateEndpoint+0x378>)
 8004388:	430a      	orrs	r2, r1
 800438a:	b292      	uxth	r2, r2
 800438c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	18d2      	adds	r2, r2, r3
 8004398:	212a      	movs	r1, #42	; 0x2a
 800439a:	187b      	adds	r3, r7, r1
 800439c:	8812      	ldrh	r2, [r2, #0]
 800439e:	801a      	strh	r2, [r3, #0]
 80043a0:	187b      	adds	r3, r7, r1
 80043a2:	881b      	ldrh	r3, [r3, #0]
 80043a4:	2240      	movs	r2, #64	; 0x40
 80043a6:	4013      	ands	r3, r2
 80043a8:	d016      	beq.n	80043d8 <USB_DeactivateEndpoint+0x2d4>
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	18d3      	adds	r3, r2, r3
 80043b4:	881b      	ldrh	r3, [r3, #0]
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	2028      	movs	r0, #40	; 0x28
 80043ba:	183b      	adds	r3, r7, r0
 80043bc:	492b      	ldr	r1, [pc, #172]	; (800446c <USB_DeactivateEndpoint+0x368>)
 80043be:	400a      	ands	r2, r1
 80043c0:	801a      	strh	r2, [r3, #0]
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	18d3      	adds	r3, r2, r3
 80043cc:	183a      	adds	r2, r7, r0
 80043ce:	8812      	ldrh	r2, [r2, #0]
 80043d0:	4927      	ldr	r1, [pc, #156]	; (8004470 <USB_DeactivateEndpoint+0x36c>)
 80043d2:	430a      	orrs	r2, r1
 80043d4:	b292      	uxth	r2, r2
 80043d6:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	18d3      	adds	r3, r2, r3
 80043e2:	881b      	ldrh	r3, [r3, #0]
 80043e4:	b29a      	uxth	r2, r3
 80043e6:	2026      	movs	r0, #38	; 0x26
 80043e8:	183b      	adds	r3, r7, r0
 80043ea:	4920      	ldr	r1, [pc, #128]	; (800446c <USB_DeactivateEndpoint+0x368>)
 80043ec:	400a      	ands	r2, r1
 80043ee:	801a      	strh	r2, [r3, #0]
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	18d3      	adds	r3, r2, r3
 80043fa:	183a      	adds	r2, r7, r0
 80043fc:	8812      	ldrh	r2, [r2, #0]
 80043fe:	491f      	ldr	r1, [pc, #124]	; (800447c <USB_DeactivateEndpoint+0x378>)
 8004400:	430a      	orrs	r2, r1
 8004402:	b292      	uxth	r2, r2
 8004404:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	18d3      	adds	r3, r2, r3
 8004410:	881b      	ldrh	r3, [r3, #0]
 8004412:	b29a      	uxth	r2, r3
 8004414:	2024      	movs	r0, #36	; 0x24
 8004416:	183b      	adds	r3, r7, r0
 8004418:	4916      	ldr	r1, [pc, #88]	; (8004474 <USB_DeactivateEndpoint+0x370>)
 800441a:	400a      	ands	r2, r1
 800441c:	801a      	strh	r2, [r3, #0]
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	18d3      	adds	r3, r2, r3
 8004428:	183a      	adds	r2, r7, r0
 800442a:	8812      	ldrh	r2, [r2, #0]
 800442c:	4912      	ldr	r1, [pc, #72]	; (8004478 <USB_DeactivateEndpoint+0x374>)
 800442e:	430a      	orrs	r2, r1
 8004430:	b292      	uxth	r2, r2
 8004432:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	18d3      	adds	r3, r2, r3
 800443e:	881b      	ldrh	r3, [r3, #0]
 8004440:	b29a      	uxth	r2, r3
 8004442:	2022      	movs	r0, #34	; 0x22
 8004444:	183b      	adds	r3, r7, r0
 8004446:	490e      	ldr	r1, [pc, #56]	; (8004480 <USB_DeactivateEndpoint+0x37c>)
 8004448:	400a      	ands	r2, r1
 800444a:	801a      	strh	r2, [r3, #0]
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	18d3      	adds	r3, r2, r3
 8004456:	183a      	adds	r2, r7, r0
 8004458:	8812      	ldrh	r2, [r2, #0]
 800445a:	4907      	ldr	r1, [pc, #28]	; (8004478 <USB_DeactivateEndpoint+0x374>)
 800445c:	430a      	orrs	r2, r1
 800445e:	b292      	uxth	r2, r2
 8004460:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004462:	2300      	movs	r3, #0
}
 8004464:	0018      	movs	r0, r3
 8004466:	46bd      	mov	sp, r7
 8004468:	b00c      	add	sp, #48	; 0x30
 800446a:	bd80      	pop	{r7, pc}
 800446c:	ffff8f8f 	.word	0xffff8f8f
 8004470:	ffff80c0 	.word	0xffff80c0
 8004474:	ffff8fbf 	.word	0xffff8fbf
 8004478:	ffff8080 	.word	0xffff8080
 800447c:	ffffc080 	.word	0xffffc080
 8004480:	ffffbf8f 	.word	0xffffbf8f

08004484 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004484:	b590      	push	{r4, r7, lr}
 8004486:	b0c3      	sub	sp, #268	; 0x10c
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	785b      	ldrb	r3, [r3, #1]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d001      	beq.n	800449a <USB_EPStartXfer+0x16>
 8004496:	f000 fd2d 	bl	8004ef4 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	699a      	ldr	r2, [r3, #24]
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d905      	bls.n	80044b2 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	1d7a      	adds	r2, r7, #5
 80044ac:	32ff      	adds	r2, #255	; 0xff
 80044ae:	6013      	str	r3, [r2, #0]
 80044b0:	e004      	b.n	80044bc <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	1d7a      	adds	r2, r7, #5
 80044b8:	32ff      	adds	r2, #255	; 0xff
 80044ba:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	7b1b      	ldrb	r3, [r3, #12]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d125      	bne.n	8004510 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	6959      	ldr	r1, [r3, #20]
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	88da      	ldrh	r2, [r3, #6]
 80044cc:	1d7b      	adds	r3, r7, #5
 80044ce:	33ff      	adds	r3, #255	; 0xff
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f001 fa47 	bl	8005968 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	613b      	str	r3, [r7, #16]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2250      	movs	r2, #80	; 0x50
 80044e2:	5a9b      	ldrh	r3, [r3, r2]
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	001a      	movs	r2, r3
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	189b      	adds	r3, r3, r2
 80044ec:	613b      	str	r3, [r7, #16]
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	00da      	lsls	r2, r3, #3
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	18d3      	adds	r3, r2, r3
 80044f8:	4ad7      	ldr	r2, [pc, #860]	; (8004858 <USB_EPStartXfer+0x3d4>)
 80044fa:	4694      	mov	ip, r2
 80044fc:	4463      	add	r3, ip
 80044fe:	60fb      	str	r3, [r7, #12]
 8004500:	1d7b      	adds	r3, r7, #5
 8004502:	33ff      	adds	r3, #255	; 0xff
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	b29a      	uxth	r2, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	801a      	strh	r2, [r3, #0]
 800450c:	f000 fccd 	bl	8004eaa <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	78db      	ldrb	r3, [r3, #3]
 8004514:	2b02      	cmp	r3, #2
 8004516:	d000      	beq.n	800451a <USB_EPStartXfer+0x96>
 8004518:	e362      	b.n	8004be0 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	6a1a      	ldr	r2, [r3, #32]
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	429a      	cmp	r2, r3
 8004524:	d800      	bhi.n	8004528 <USB_EPStartXfer+0xa4>
 8004526:	e309      	b.n	8004b3c <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	18d3      	adds	r3, r2, r3
 8004532:	881b      	ldrh	r3, [r3, #0]
 8004534:	b29a      	uxth	r2, r3
 8004536:	2056      	movs	r0, #86	; 0x56
 8004538:	183b      	adds	r3, r7, r0
 800453a:	49c8      	ldr	r1, [pc, #800]	; (800485c <USB_EPStartXfer+0x3d8>)
 800453c:	400a      	ands	r2, r1
 800453e:	801a      	strh	r2, [r3, #0]
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	18d3      	adds	r3, r2, r3
 800454a:	183a      	adds	r2, r7, r0
 800454c:	8812      	ldrh	r2, [r2, #0]
 800454e:	49c4      	ldr	r1, [pc, #784]	; (8004860 <USB_EPStartXfer+0x3dc>)
 8004550:	430a      	orrs	r2, r1
 8004552:	b292      	uxth	r2, r2
 8004554:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	6a1a      	ldr	r2, [r3, #32]
 800455a:	1d7b      	adds	r3, r7, #5
 800455c:	33ff      	adds	r3, #255	; 0xff
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	1ad2      	subs	r2, r2, r3
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	18d3      	adds	r3, r2, r3
 8004570:	881b      	ldrh	r3, [r3, #0]
 8004572:	b29b      	uxth	r3, r3
 8004574:	001a      	movs	r2, r3
 8004576:	2340      	movs	r3, #64	; 0x40
 8004578:	4013      	ands	r3, r2
 800457a:	d100      	bne.n	800457e <USB_EPStartXfer+0xfa>
 800457c:	e176      	b.n	800486c <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	633b      	str	r3, [r7, #48]	; 0x30
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	785b      	ldrb	r3, [r3, #1]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d000      	beq.n	800458c <USB_EPStartXfer+0x108>
 800458a:	e074      	b.n	8004676 <USB_EPStartXfer+0x1f2>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2250      	movs	r2, #80	; 0x50
 8004594:	5a9b      	ldrh	r3, [r3, r2]
 8004596:	b29b      	uxth	r3, r3
 8004598:	001a      	movs	r2, r3
 800459a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800459c:	189b      	adds	r3, r3, r2
 800459e:	62bb      	str	r3, [r7, #40]	; 0x28
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	00da      	lsls	r2, r3, #3
 80045a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a8:	18d3      	adds	r3, r2, r3
 80045aa:	4aae      	ldr	r2, [pc, #696]	; (8004864 <USB_EPStartXfer+0x3e0>)
 80045ac:	4694      	mov	ip, r2
 80045ae:	4463      	add	r3, ip
 80045b0:	627b      	str	r3, [r7, #36]	; 0x24
 80045b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b4:	881b      	ldrh	r3, [r3, #0]
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	059b      	lsls	r3, r3, #22
 80045ba:	0d9b      	lsrs	r3, r3, #22
 80045bc:	b29a      	uxth	r2, r3
 80045be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c0:	801a      	strh	r2, [r3, #0]
 80045c2:	1d7b      	adds	r3, r7, #5
 80045c4:	33ff      	adds	r3, #255	; 0xff
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2b3e      	cmp	r3, #62	; 0x3e
 80045ca:	d924      	bls.n	8004616 <USB_EPStartXfer+0x192>
 80045cc:	1d7b      	adds	r3, r7, #5
 80045ce:	33ff      	adds	r3, #255	; 0xff
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	095b      	lsrs	r3, r3, #5
 80045d4:	1c7a      	adds	r2, r7, #1
 80045d6:	32ff      	adds	r2, #255	; 0xff
 80045d8:	6013      	str	r3, [r2, #0]
 80045da:	1d7b      	adds	r3, r7, #5
 80045dc:	33ff      	adds	r3, #255	; 0xff
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	221f      	movs	r2, #31
 80045e2:	4013      	ands	r3, r2
 80045e4:	d106      	bne.n	80045f4 <USB_EPStartXfer+0x170>
 80045e6:	1c7b      	adds	r3, r7, #1
 80045e8:	33ff      	adds	r3, #255	; 0xff
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	3b01      	subs	r3, #1
 80045ee:	1c7a      	adds	r2, r7, #1
 80045f0:	32ff      	adds	r2, #255	; 0xff
 80045f2:	6013      	str	r3, [r2, #0]
 80045f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f6:	881b      	ldrh	r3, [r3, #0]
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	1c7b      	adds	r3, r7, #1
 80045fc:	33ff      	adds	r3, #255	; 0xff
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	b29b      	uxth	r3, r3
 8004602:	029b      	lsls	r3, r3, #10
 8004604:	b29b      	uxth	r3, r3
 8004606:	4313      	orrs	r3, r2
 8004608:	b29b      	uxth	r3, r3
 800460a:	4a97      	ldr	r2, [pc, #604]	; (8004868 <USB_EPStartXfer+0x3e4>)
 800460c:	4313      	orrs	r3, r2
 800460e:	b29a      	uxth	r2, r3
 8004610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004612:	801a      	strh	r2, [r3, #0]
 8004614:	e04a      	b.n	80046ac <USB_EPStartXfer+0x228>
 8004616:	1d7b      	adds	r3, r7, #5
 8004618:	33ff      	adds	r3, #255	; 0xff
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d108      	bne.n	8004632 <USB_EPStartXfer+0x1ae>
 8004620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004622:	881b      	ldrh	r3, [r3, #0]
 8004624:	b29b      	uxth	r3, r3
 8004626:	4a90      	ldr	r2, [pc, #576]	; (8004868 <USB_EPStartXfer+0x3e4>)
 8004628:	4313      	orrs	r3, r2
 800462a:	b29a      	uxth	r2, r3
 800462c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462e:	801a      	strh	r2, [r3, #0]
 8004630:	e03c      	b.n	80046ac <USB_EPStartXfer+0x228>
 8004632:	1d7b      	adds	r3, r7, #5
 8004634:	33ff      	adds	r3, #255	; 0xff
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	085b      	lsrs	r3, r3, #1
 800463a:	1c7a      	adds	r2, r7, #1
 800463c:	32ff      	adds	r2, #255	; 0xff
 800463e:	6013      	str	r3, [r2, #0]
 8004640:	1d7b      	adds	r3, r7, #5
 8004642:	33ff      	adds	r3, #255	; 0xff
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2201      	movs	r2, #1
 8004648:	4013      	ands	r3, r2
 800464a:	d006      	beq.n	800465a <USB_EPStartXfer+0x1d6>
 800464c:	1c7b      	adds	r3, r7, #1
 800464e:	33ff      	adds	r3, #255	; 0xff
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	3301      	adds	r3, #1
 8004654:	1c7a      	adds	r2, r7, #1
 8004656:	32ff      	adds	r2, #255	; 0xff
 8004658:	6013      	str	r3, [r2, #0]
 800465a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465c:	881b      	ldrh	r3, [r3, #0]
 800465e:	b29a      	uxth	r2, r3
 8004660:	1c7b      	adds	r3, r7, #1
 8004662:	33ff      	adds	r3, #255	; 0xff
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	b29b      	uxth	r3, r3
 8004668:	029b      	lsls	r3, r3, #10
 800466a:	b29b      	uxth	r3, r3
 800466c:	4313      	orrs	r3, r2
 800466e:	b29a      	uxth	r2, r3
 8004670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004672:	801a      	strh	r2, [r3, #0]
 8004674:	e01a      	b.n	80046ac <USB_EPStartXfer+0x228>
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	785b      	ldrb	r3, [r3, #1]
 800467a:	2b01      	cmp	r3, #1
 800467c:	d116      	bne.n	80046ac <USB_EPStartXfer+0x228>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2250      	movs	r2, #80	; 0x50
 8004682:	5a9b      	ldrh	r3, [r3, r2]
 8004684:	b29b      	uxth	r3, r3
 8004686:	001a      	movs	r2, r3
 8004688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800468a:	189b      	adds	r3, r3, r2
 800468c:	633b      	str	r3, [r7, #48]	; 0x30
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	00da      	lsls	r2, r3, #3
 8004694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004696:	18d3      	adds	r3, r2, r3
 8004698:	4a72      	ldr	r2, [pc, #456]	; (8004864 <USB_EPStartXfer+0x3e0>)
 800469a:	4694      	mov	ip, r2
 800469c:	4463      	add	r3, ip
 800469e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046a0:	1d7b      	adds	r3, r7, #5
 80046a2:	33ff      	adds	r3, #255	; 0xff
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046aa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80046ac:	2076      	movs	r0, #118	; 0x76
 80046ae:	183b      	adds	r3, r7, r0
 80046b0:	683a      	ldr	r2, [r7, #0]
 80046b2:	8952      	ldrh	r2, [r2, #10]
 80046b4:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	6959      	ldr	r1, [r3, #20]
 80046ba:	1d7b      	adds	r3, r7, #5
 80046bc:	33ff      	adds	r3, #255	; 0xff
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	b29c      	uxth	r4, r3
 80046c2:	183b      	adds	r3, r7, r0
 80046c4:	881a      	ldrh	r2, [r3, #0]
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	0023      	movs	r3, r4
 80046ca:	f001 f94d 	bl	8005968 <USB_WritePMA>
            ep->xfer_buff += len;
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	695a      	ldr	r2, [r3, #20]
 80046d2:	1d7b      	adds	r3, r7, #5
 80046d4:	33ff      	adds	r3, #255	; 0xff
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	18d2      	adds	r2, r2, r3
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	6a1a      	ldr	r2, [r3, #32]
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d908      	bls.n	80046fc <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	6a1a      	ldr	r2, [r3, #32]
 80046ee:	1d7b      	adds	r3, r7, #5
 80046f0:	33ff      	adds	r3, #255	; 0xff
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	1ad2      	subs	r2, r2, r3
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	621a      	str	r2, [r3, #32]
 80046fa:	e007      	b.n	800470c <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	6a1b      	ldr	r3, [r3, #32]
 8004700:	1d7a      	adds	r2, r7, #5
 8004702:	32ff      	adds	r2, #255	; 0xff
 8004704:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	2200      	movs	r2, #0
 800470a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	785b      	ldrb	r3, [r3, #1]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d000      	beq.n	8004716 <USB_EPStartXfer+0x292>
 8004714:	e070      	b.n	80047f8 <USB_EPStartXfer+0x374>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	61bb      	str	r3, [r7, #24]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2250      	movs	r2, #80	; 0x50
 800471e:	5a9b      	ldrh	r3, [r3, r2]
 8004720:	b29b      	uxth	r3, r3
 8004722:	001a      	movs	r2, r3
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	189b      	adds	r3, r3, r2
 8004728:	61bb      	str	r3, [r7, #24]
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	00da      	lsls	r2, r3, #3
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	18d3      	adds	r3, r2, r3
 8004734:	4a48      	ldr	r2, [pc, #288]	; (8004858 <USB_EPStartXfer+0x3d4>)
 8004736:	4694      	mov	ip, r2
 8004738:	4463      	add	r3, ip
 800473a:	617b      	str	r3, [r7, #20]
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	881b      	ldrh	r3, [r3, #0]
 8004740:	b29b      	uxth	r3, r3
 8004742:	059b      	lsls	r3, r3, #22
 8004744:	0d9b      	lsrs	r3, r3, #22
 8004746:	b29a      	uxth	r2, r3
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	801a      	strh	r2, [r3, #0]
 800474c:	1d7b      	adds	r3, r7, #5
 800474e:	33ff      	adds	r3, #255	; 0xff
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2b3e      	cmp	r3, #62	; 0x3e
 8004754:	d922      	bls.n	800479c <USB_EPStartXfer+0x318>
 8004756:	1d7b      	adds	r3, r7, #5
 8004758:	33ff      	adds	r3, #255	; 0xff
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	095b      	lsrs	r3, r3, #5
 800475e:	21fc      	movs	r1, #252	; 0xfc
 8004760:	187a      	adds	r2, r7, r1
 8004762:	6013      	str	r3, [r2, #0]
 8004764:	1d7b      	adds	r3, r7, #5
 8004766:	33ff      	adds	r3, #255	; 0xff
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	221f      	movs	r2, #31
 800476c:	4013      	ands	r3, r2
 800476e:	d104      	bne.n	800477a <USB_EPStartXfer+0x2f6>
 8004770:	187b      	adds	r3, r7, r1
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	3b01      	subs	r3, #1
 8004776:	187a      	adds	r2, r7, r1
 8004778:	6013      	str	r3, [r2, #0]
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	881b      	ldrh	r3, [r3, #0]
 800477e:	b29a      	uxth	r2, r3
 8004780:	23fc      	movs	r3, #252	; 0xfc
 8004782:	18fb      	adds	r3, r7, r3
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	b29b      	uxth	r3, r3
 8004788:	029b      	lsls	r3, r3, #10
 800478a:	b29b      	uxth	r3, r3
 800478c:	4313      	orrs	r3, r2
 800478e:	b29b      	uxth	r3, r3
 8004790:	4a35      	ldr	r2, [pc, #212]	; (8004868 <USB_EPStartXfer+0x3e4>)
 8004792:	4313      	orrs	r3, r2
 8004794:	b29a      	uxth	r2, r3
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	801a      	strh	r2, [r3, #0]
 800479a:	e04a      	b.n	8004832 <USB_EPStartXfer+0x3ae>
 800479c:	1d7b      	adds	r3, r7, #5
 800479e:	33ff      	adds	r3, #255	; 0xff
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d108      	bne.n	80047b8 <USB_EPStartXfer+0x334>
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	881b      	ldrh	r3, [r3, #0]
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	4a2e      	ldr	r2, [pc, #184]	; (8004868 <USB_EPStartXfer+0x3e4>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	801a      	strh	r2, [r3, #0]
 80047b6:	e03c      	b.n	8004832 <USB_EPStartXfer+0x3ae>
 80047b8:	1d7b      	adds	r3, r7, #5
 80047ba:	33ff      	adds	r3, #255	; 0xff
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	085b      	lsrs	r3, r3, #1
 80047c0:	21fc      	movs	r1, #252	; 0xfc
 80047c2:	187a      	adds	r2, r7, r1
 80047c4:	6013      	str	r3, [r2, #0]
 80047c6:	1d7b      	adds	r3, r7, #5
 80047c8:	33ff      	adds	r3, #255	; 0xff
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2201      	movs	r2, #1
 80047ce:	4013      	ands	r3, r2
 80047d0:	d004      	beq.n	80047dc <USB_EPStartXfer+0x358>
 80047d2:	187b      	adds	r3, r7, r1
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	3301      	adds	r3, #1
 80047d8:	187a      	adds	r2, r7, r1
 80047da:	6013      	str	r3, [r2, #0]
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	881b      	ldrh	r3, [r3, #0]
 80047e0:	b29a      	uxth	r2, r3
 80047e2:	23fc      	movs	r3, #252	; 0xfc
 80047e4:	18fb      	adds	r3, r7, r3
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	029b      	lsls	r3, r3, #10
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	4313      	orrs	r3, r2
 80047f0:	b29a      	uxth	r2, r3
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	801a      	strh	r2, [r3, #0]
 80047f6:	e01c      	b.n	8004832 <USB_EPStartXfer+0x3ae>
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	785b      	ldrb	r3, [r3, #1]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d118      	bne.n	8004832 <USB_EPStartXfer+0x3ae>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	623b      	str	r3, [r7, #32]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2250      	movs	r2, #80	; 0x50
 8004808:	5a9b      	ldrh	r3, [r3, r2]
 800480a:	b29b      	uxth	r3, r3
 800480c:	001a      	movs	r2, r3
 800480e:	6a3b      	ldr	r3, [r7, #32]
 8004810:	189b      	adds	r3, r3, r2
 8004812:	623b      	str	r3, [r7, #32]
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	00da      	lsls	r2, r3, #3
 800481a:	6a3b      	ldr	r3, [r7, #32]
 800481c:	18d3      	adds	r3, r2, r3
 800481e:	4a0e      	ldr	r2, [pc, #56]	; (8004858 <USB_EPStartXfer+0x3d4>)
 8004820:	4694      	mov	ip, r2
 8004822:	4463      	add	r3, ip
 8004824:	61fb      	str	r3, [r7, #28]
 8004826:	1d7b      	adds	r3, r7, #5
 8004828:	33ff      	adds	r3, #255	; 0xff
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	b29a      	uxth	r2, r3
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004832:	2076      	movs	r0, #118	; 0x76
 8004834:	183b      	adds	r3, r7, r0
 8004836:	683a      	ldr	r2, [r7, #0]
 8004838:	8912      	ldrh	r2, [r2, #8]
 800483a:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	6959      	ldr	r1, [r3, #20]
 8004840:	1d7b      	adds	r3, r7, #5
 8004842:	33ff      	adds	r3, #255	; 0xff
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	b29c      	uxth	r4, r3
 8004848:	183b      	adds	r3, r7, r0
 800484a:	881a      	ldrh	r2, [r3, #0]
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	0023      	movs	r3, r4
 8004850:	f001 f88a 	bl	8005968 <USB_WritePMA>
 8004854:	e329      	b.n	8004eaa <USB_EPStartXfer+0xa26>
 8004856:	46c0      	nop			; (mov r8, r8)
 8004858:	00000402 	.word	0x00000402
 800485c:	ffff8f8f 	.word	0xffff8f8f
 8004860:	ffff8180 	.word	0xffff8180
 8004864:	00000406 	.word	0x00000406
 8004868:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	785b      	ldrb	r3, [r3, #1]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d000      	beq.n	8004876 <USB_EPStartXfer+0x3f2>
 8004874:	e070      	b.n	8004958 <USB_EPStartXfer+0x4d4>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	64bb      	str	r3, [r7, #72]	; 0x48
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2250      	movs	r2, #80	; 0x50
 800487e:	5a9b      	ldrh	r3, [r3, r2]
 8004880:	b29b      	uxth	r3, r3
 8004882:	001a      	movs	r2, r3
 8004884:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004886:	189b      	adds	r3, r3, r2
 8004888:	64bb      	str	r3, [r7, #72]	; 0x48
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	00da      	lsls	r2, r3, #3
 8004890:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004892:	18d3      	adds	r3, r2, r3
 8004894:	4acd      	ldr	r2, [pc, #820]	; (8004bcc <USB_EPStartXfer+0x748>)
 8004896:	4694      	mov	ip, r2
 8004898:	4463      	add	r3, ip
 800489a:	647b      	str	r3, [r7, #68]	; 0x44
 800489c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800489e:	881b      	ldrh	r3, [r3, #0]
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	059b      	lsls	r3, r3, #22
 80048a4:	0d9b      	lsrs	r3, r3, #22
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048aa:	801a      	strh	r2, [r3, #0]
 80048ac:	1d7b      	adds	r3, r7, #5
 80048ae:	33ff      	adds	r3, #255	; 0xff
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2b3e      	cmp	r3, #62	; 0x3e
 80048b4:	d922      	bls.n	80048fc <USB_EPStartXfer+0x478>
 80048b6:	1d7b      	adds	r3, r7, #5
 80048b8:	33ff      	adds	r3, #255	; 0xff
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	095b      	lsrs	r3, r3, #5
 80048be:	21f8      	movs	r1, #248	; 0xf8
 80048c0:	187a      	adds	r2, r7, r1
 80048c2:	6013      	str	r3, [r2, #0]
 80048c4:	1d7b      	adds	r3, r7, #5
 80048c6:	33ff      	adds	r3, #255	; 0xff
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	221f      	movs	r2, #31
 80048cc:	4013      	ands	r3, r2
 80048ce:	d104      	bne.n	80048da <USB_EPStartXfer+0x456>
 80048d0:	187b      	adds	r3, r7, r1
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	3b01      	subs	r3, #1
 80048d6:	187a      	adds	r2, r7, r1
 80048d8:	6013      	str	r3, [r2, #0]
 80048da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048dc:	881b      	ldrh	r3, [r3, #0]
 80048de:	b29a      	uxth	r2, r3
 80048e0:	23f8      	movs	r3, #248	; 0xf8
 80048e2:	18fb      	adds	r3, r7, r3
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	029b      	lsls	r3, r3, #10
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	4313      	orrs	r3, r2
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	4ab7      	ldr	r2, [pc, #732]	; (8004bd0 <USB_EPStartXfer+0x74c>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	b29a      	uxth	r2, r3
 80048f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048f8:	801a      	strh	r2, [r3, #0]
 80048fa:	e04a      	b.n	8004992 <USB_EPStartXfer+0x50e>
 80048fc:	1d7b      	adds	r3, r7, #5
 80048fe:	33ff      	adds	r3, #255	; 0xff
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d108      	bne.n	8004918 <USB_EPStartXfer+0x494>
 8004906:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004908:	881b      	ldrh	r3, [r3, #0]
 800490a:	b29b      	uxth	r3, r3
 800490c:	4ab0      	ldr	r2, [pc, #704]	; (8004bd0 <USB_EPStartXfer+0x74c>)
 800490e:	4313      	orrs	r3, r2
 8004910:	b29a      	uxth	r2, r3
 8004912:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004914:	801a      	strh	r2, [r3, #0]
 8004916:	e03c      	b.n	8004992 <USB_EPStartXfer+0x50e>
 8004918:	1d7b      	adds	r3, r7, #5
 800491a:	33ff      	adds	r3, #255	; 0xff
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	085b      	lsrs	r3, r3, #1
 8004920:	21f8      	movs	r1, #248	; 0xf8
 8004922:	187a      	adds	r2, r7, r1
 8004924:	6013      	str	r3, [r2, #0]
 8004926:	1d7b      	adds	r3, r7, #5
 8004928:	33ff      	adds	r3, #255	; 0xff
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2201      	movs	r2, #1
 800492e:	4013      	ands	r3, r2
 8004930:	d004      	beq.n	800493c <USB_EPStartXfer+0x4b8>
 8004932:	187b      	adds	r3, r7, r1
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	3301      	adds	r3, #1
 8004938:	187a      	adds	r2, r7, r1
 800493a:	6013      	str	r3, [r2, #0]
 800493c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800493e:	881b      	ldrh	r3, [r3, #0]
 8004940:	b29a      	uxth	r2, r3
 8004942:	23f8      	movs	r3, #248	; 0xf8
 8004944:	18fb      	adds	r3, r7, r3
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	b29b      	uxth	r3, r3
 800494a:	029b      	lsls	r3, r3, #10
 800494c:	b29b      	uxth	r3, r3
 800494e:	4313      	orrs	r3, r2
 8004950:	b29a      	uxth	r2, r3
 8004952:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004954:	801a      	strh	r2, [r3, #0]
 8004956:	e01c      	b.n	8004992 <USB_EPStartXfer+0x50e>
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	785b      	ldrb	r3, [r3, #1]
 800495c:	2b01      	cmp	r3, #1
 800495e:	d118      	bne.n	8004992 <USB_EPStartXfer+0x50e>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	653b      	str	r3, [r7, #80]	; 0x50
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2250      	movs	r2, #80	; 0x50
 8004968:	5a9b      	ldrh	r3, [r3, r2]
 800496a:	b29b      	uxth	r3, r3
 800496c:	001a      	movs	r2, r3
 800496e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004970:	189b      	adds	r3, r3, r2
 8004972:	653b      	str	r3, [r7, #80]	; 0x50
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	00da      	lsls	r2, r3, #3
 800497a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800497c:	18d3      	adds	r3, r2, r3
 800497e:	4a93      	ldr	r2, [pc, #588]	; (8004bcc <USB_EPStartXfer+0x748>)
 8004980:	4694      	mov	ip, r2
 8004982:	4463      	add	r3, ip
 8004984:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004986:	1d7b      	adds	r3, r7, #5
 8004988:	33ff      	adds	r3, #255	; 0xff
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	b29a      	uxth	r2, r3
 800498e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004990:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004992:	2076      	movs	r0, #118	; 0x76
 8004994:	183b      	adds	r3, r7, r0
 8004996:	683a      	ldr	r2, [r7, #0]
 8004998:	8912      	ldrh	r2, [r2, #8]
 800499a:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	6959      	ldr	r1, [r3, #20]
 80049a0:	1d7b      	adds	r3, r7, #5
 80049a2:	33ff      	adds	r3, #255	; 0xff
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	b29c      	uxth	r4, r3
 80049a8:	183b      	adds	r3, r7, r0
 80049aa:	881a      	ldrh	r2, [r3, #0]
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	0023      	movs	r3, r4
 80049b0:	f000 ffda 	bl	8005968 <USB_WritePMA>
            ep->xfer_buff += len;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	695a      	ldr	r2, [r3, #20]
 80049b8:	1d7b      	adds	r3, r7, #5
 80049ba:	33ff      	adds	r3, #255	; 0xff
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	18d2      	adds	r2, r2, r3
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	6a1a      	ldr	r2, [r3, #32]
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d908      	bls.n	80049e2 <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	6a1a      	ldr	r2, [r3, #32]
 80049d4:	1d7b      	adds	r3, r7, #5
 80049d6:	33ff      	adds	r3, #255	; 0xff
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	1ad2      	subs	r2, r2, r3
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	621a      	str	r2, [r3, #32]
 80049e0:	e007      	b.n	80049f2 <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	6a1b      	ldr	r3, [r3, #32]
 80049e6:	1d7a      	adds	r2, r7, #5
 80049e8:	32ff      	adds	r2, #255	; 0xff
 80049ea:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	2200      	movs	r2, #0
 80049f0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	643b      	str	r3, [r7, #64]	; 0x40
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	785b      	ldrb	r3, [r3, #1]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d000      	beq.n	8004a00 <USB_EPStartXfer+0x57c>
 80049fe:	e070      	b.n	8004ae2 <USB_EPStartXfer+0x65e>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2250      	movs	r2, #80	; 0x50
 8004a08:	5a9b      	ldrh	r3, [r3, r2]
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	001a      	movs	r2, r3
 8004a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a10:	189b      	adds	r3, r3, r2
 8004a12:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	00da      	lsls	r2, r3, #3
 8004a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a1c:	18d3      	adds	r3, r2, r3
 8004a1e:	4a6d      	ldr	r2, [pc, #436]	; (8004bd4 <USB_EPStartXfer+0x750>)
 8004a20:	4694      	mov	ip, r2
 8004a22:	4463      	add	r3, ip
 8004a24:	637b      	str	r3, [r7, #52]	; 0x34
 8004a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a28:	881b      	ldrh	r3, [r3, #0]
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	059b      	lsls	r3, r3, #22
 8004a2e:	0d9b      	lsrs	r3, r3, #22
 8004a30:	b29a      	uxth	r2, r3
 8004a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a34:	801a      	strh	r2, [r3, #0]
 8004a36:	1d7b      	adds	r3, r7, #5
 8004a38:	33ff      	adds	r3, #255	; 0xff
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2b3e      	cmp	r3, #62	; 0x3e
 8004a3e:	d922      	bls.n	8004a86 <USB_EPStartXfer+0x602>
 8004a40:	1d7b      	adds	r3, r7, #5
 8004a42:	33ff      	adds	r3, #255	; 0xff
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	095b      	lsrs	r3, r3, #5
 8004a48:	21f4      	movs	r1, #244	; 0xf4
 8004a4a:	187a      	adds	r2, r7, r1
 8004a4c:	6013      	str	r3, [r2, #0]
 8004a4e:	1d7b      	adds	r3, r7, #5
 8004a50:	33ff      	adds	r3, #255	; 0xff
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	221f      	movs	r2, #31
 8004a56:	4013      	ands	r3, r2
 8004a58:	d104      	bne.n	8004a64 <USB_EPStartXfer+0x5e0>
 8004a5a:	187b      	adds	r3, r7, r1
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	187a      	adds	r2, r7, r1
 8004a62:	6013      	str	r3, [r2, #0]
 8004a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a66:	881b      	ldrh	r3, [r3, #0]
 8004a68:	b29a      	uxth	r2, r3
 8004a6a:	23f4      	movs	r3, #244	; 0xf4
 8004a6c:	18fb      	adds	r3, r7, r3
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	029b      	lsls	r3, r3, #10
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	4313      	orrs	r3, r2
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	4a55      	ldr	r2, [pc, #340]	; (8004bd0 <USB_EPStartXfer+0x74c>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	b29a      	uxth	r2, r3
 8004a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a82:	801a      	strh	r2, [r3, #0]
 8004a84:	e048      	b.n	8004b18 <USB_EPStartXfer+0x694>
 8004a86:	1d7b      	adds	r3, r7, #5
 8004a88:	33ff      	adds	r3, #255	; 0xff
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d108      	bne.n	8004aa2 <USB_EPStartXfer+0x61e>
 8004a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a92:	881b      	ldrh	r3, [r3, #0]
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	4a4e      	ldr	r2, [pc, #312]	; (8004bd0 <USB_EPStartXfer+0x74c>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	b29a      	uxth	r2, r3
 8004a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a9e:	801a      	strh	r2, [r3, #0]
 8004aa0:	e03a      	b.n	8004b18 <USB_EPStartXfer+0x694>
 8004aa2:	1d7b      	adds	r3, r7, #5
 8004aa4:	33ff      	adds	r3, #255	; 0xff
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	085b      	lsrs	r3, r3, #1
 8004aaa:	21f4      	movs	r1, #244	; 0xf4
 8004aac:	187a      	adds	r2, r7, r1
 8004aae:	6013      	str	r3, [r2, #0]
 8004ab0:	1d7b      	adds	r3, r7, #5
 8004ab2:	33ff      	adds	r3, #255	; 0xff
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	4013      	ands	r3, r2
 8004aba:	d004      	beq.n	8004ac6 <USB_EPStartXfer+0x642>
 8004abc:	187b      	adds	r3, r7, r1
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	187a      	adds	r2, r7, r1
 8004ac4:	6013      	str	r3, [r2, #0]
 8004ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ac8:	881b      	ldrh	r3, [r3, #0]
 8004aca:	b29a      	uxth	r2, r3
 8004acc:	23f4      	movs	r3, #244	; 0xf4
 8004ace:	18fb      	adds	r3, r7, r3
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	029b      	lsls	r3, r3, #10
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	b29a      	uxth	r2, r3
 8004adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ade:	801a      	strh	r2, [r3, #0]
 8004ae0:	e01a      	b.n	8004b18 <USB_EPStartXfer+0x694>
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	785b      	ldrb	r3, [r3, #1]
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d116      	bne.n	8004b18 <USB_EPStartXfer+0x694>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2250      	movs	r2, #80	; 0x50
 8004aee:	5a9b      	ldrh	r3, [r3, r2]
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	001a      	movs	r2, r3
 8004af4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004af6:	189b      	adds	r3, r3, r2
 8004af8:	643b      	str	r3, [r7, #64]	; 0x40
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	00da      	lsls	r2, r3, #3
 8004b00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b02:	18d3      	adds	r3, r2, r3
 8004b04:	4a33      	ldr	r2, [pc, #204]	; (8004bd4 <USB_EPStartXfer+0x750>)
 8004b06:	4694      	mov	ip, r2
 8004b08:	4463      	add	r3, ip
 8004b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b0c:	1d7b      	adds	r3, r7, #5
 8004b0e:	33ff      	adds	r3, #255	; 0xff
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b16:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004b18:	2076      	movs	r0, #118	; 0x76
 8004b1a:	183b      	adds	r3, r7, r0
 8004b1c:	683a      	ldr	r2, [r7, #0]
 8004b1e:	8952      	ldrh	r2, [r2, #10]
 8004b20:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	6959      	ldr	r1, [r3, #20]
 8004b26:	1d7b      	adds	r3, r7, #5
 8004b28:	33ff      	adds	r3, #255	; 0xff
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	b29c      	uxth	r4, r3
 8004b2e:	183b      	adds	r3, r7, r0
 8004b30:	881a      	ldrh	r2, [r3, #0]
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	0023      	movs	r3, r4
 8004b36:	f000 ff17 	bl	8005968 <USB_WritePMA>
 8004b3a:	e1b6      	b.n	8004eaa <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	6a1b      	ldr	r3, [r3, #32]
 8004b40:	1d7a      	adds	r2, r7, #5
 8004b42:	32ff      	adds	r2, #255	; 0xff
 8004b44:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	18d3      	adds	r3, r2, r3
 8004b50:	881b      	ldrh	r3, [r3, #0]
 8004b52:	b29a      	uxth	r2, r3
 8004b54:	2062      	movs	r0, #98	; 0x62
 8004b56:	183b      	adds	r3, r7, r0
 8004b58:	491f      	ldr	r1, [pc, #124]	; (8004bd8 <USB_EPStartXfer+0x754>)
 8004b5a:	400a      	ands	r2, r1
 8004b5c:	801a      	strh	r2, [r3, #0]
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	18d3      	adds	r3, r2, r3
 8004b68:	183a      	adds	r2, r7, r0
 8004b6a:	8812      	ldrh	r2, [r2, #0]
 8004b6c:	491b      	ldr	r1, [pc, #108]	; (8004bdc <USB_EPStartXfer+0x758>)
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	b292      	uxth	r2, r2
 8004b72:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2250      	movs	r2, #80	; 0x50
 8004b7c:	5a9b      	ldrh	r3, [r3, r2]
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	001a      	movs	r2, r3
 8004b82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b84:	189b      	adds	r3, r3, r2
 8004b86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	00da      	lsls	r2, r3, #3
 8004b8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b90:	18d3      	adds	r3, r2, r3
 8004b92:	4a0e      	ldr	r2, [pc, #56]	; (8004bcc <USB_EPStartXfer+0x748>)
 8004b94:	4694      	mov	ip, r2
 8004b96:	4463      	add	r3, ip
 8004b98:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b9a:	1d7b      	adds	r3, r7, #5
 8004b9c:	33ff      	adds	r3, #255	; 0xff
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	b29a      	uxth	r2, r3
 8004ba2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ba4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004ba6:	2076      	movs	r0, #118	; 0x76
 8004ba8:	183b      	adds	r3, r7, r0
 8004baa:	683a      	ldr	r2, [r7, #0]
 8004bac:	8912      	ldrh	r2, [r2, #8]
 8004bae:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	6959      	ldr	r1, [r3, #20]
 8004bb4:	1d7b      	adds	r3, r7, #5
 8004bb6:	33ff      	adds	r3, #255	; 0xff
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	b29c      	uxth	r4, r3
 8004bbc:	183b      	adds	r3, r7, r0
 8004bbe:	881a      	ldrh	r2, [r3, #0]
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	0023      	movs	r3, r4
 8004bc4:	f000 fed0 	bl	8005968 <USB_WritePMA>
 8004bc8:	e16f      	b.n	8004eaa <USB_EPStartXfer+0xa26>
 8004bca:	46c0      	nop			; (mov r8, r8)
 8004bcc:	00000402 	.word	0x00000402
 8004bd0:	ffff8000 	.word	0xffff8000
 8004bd4:	00000406 	.word	0x00000406
 8004bd8:	ffff8e8f 	.word	0xffff8e8f
 8004bdc:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	6a1a      	ldr	r2, [r3, #32]
 8004be4:	1d7b      	adds	r3, r7, #5
 8004be6:	33ff      	adds	r3, #255	; 0xff
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	1ad2      	subs	r2, r2, r3
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	18d3      	adds	r3, r2, r3
 8004bfa:	881b      	ldrh	r3, [r3, #0]
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	001a      	movs	r2, r3
 8004c00:	2340      	movs	r3, #64	; 0x40
 8004c02:	4013      	ands	r3, r2
 8004c04:	d100      	bne.n	8004c08 <USB_EPStartXfer+0x784>
 8004c06:	e0a4      	b.n	8004d52 <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	673b      	str	r3, [r7, #112]	; 0x70
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	785b      	ldrb	r3, [r3, #1]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d000      	beq.n	8004c16 <USB_EPStartXfer+0x792>
 8004c14:	e070      	b.n	8004cf8 <USB_EPStartXfer+0x874>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2250      	movs	r2, #80	; 0x50
 8004c1e:	5a9b      	ldrh	r3, [r3, r2]
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	001a      	movs	r2, r3
 8004c24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c26:	189b      	adds	r3, r3, r2
 8004c28:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	00da      	lsls	r2, r3, #3
 8004c30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c32:	18d3      	adds	r3, r2, r3
 8004c34:	4abc      	ldr	r2, [pc, #752]	; (8004f28 <USB_EPStartXfer+0xaa4>)
 8004c36:	4694      	mov	ip, r2
 8004c38:	4463      	add	r3, ip
 8004c3a:	667b      	str	r3, [r7, #100]	; 0x64
 8004c3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c3e:	881b      	ldrh	r3, [r3, #0]
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	059b      	lsls	r3, r3, #22
 8004c44:	0d9b      	lsrs	r3, r3, #22
 8004c46:	b29a      	uxth	r2, r3
 8004c48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c4a:	801a      	strh	r2, [r3, #0]
 8004c4c:	1d7b      	adds	r3, r7, #5
 8004c4e:	33ff      	adds	r3, #255	; 0xff
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	2b3e      	cmp	r3, #62	; 0x3e
 8004c54:	d922      	bls.n	8004c9c <USB_EPStartXfer+0x818>
 8004c56:	1d7b      	adds	r3, r7, #5
 8004c58:	33ff      	adds	r3, #255	; 0xff
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	095b      	lsrs	r3, r3, #5
 8004c5e:	21f0      	movs	r1, #240	; 0xf0
 8004c60:	187a      	adds	r2, r7, r1
 8004c62:	6013      	str	r3, [r2, #0]
 8004c64:	1d7b      	adds	r3, r7, #5
 8004c66:	33ff      	adds	r3, #255	; 0xff
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	221f      	movs	r2, #31
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	d104      	bne.n	8004c7a <USB_EPStartXfer+0x7f6>
 8004c70:	187b      	adds	r3, r7, r1
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	3b01      	subs	r3, #1
 8004c76:	187a      	adds	r2, r7, r1
 8004c78:	6013      	str	r3, [r2, #0]
 8004c7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c7c:	881b      	ldrh	r3, [r3, #0]
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	23f0      	movs	r3, #240	; 0xf0
 8004c82:	18fb      	adds	r3, r7, r3
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	029b      	lsls	r3, r3, #10
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	4aa6      	ldr	r2, [pc, #664]	; (8004f2c <USB_EPStartXfer+0xaa8>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	b29a      	uxth	r2, r3
 8004c96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c98:	801a      	strh	r2, [r3, #0]
 8004c9a:	e048      	b.n	8004d2e <USB_EPStartXfer+0x8aa>
 8004c9c:	1d7b      	adds	r3, r7, #5
 8004c9e:	33ff      	adds	r3, #255	; 0xff
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d108      	bne.n	8004cb8 <USB_EPStartXfer+0x834>
 8004ca6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ca8:	881b      	ldrh	r3, [r3, #0]
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	4a9f      	ldr	r2, [pc, #636]	; (8004f2c <USB_EPStartXfer+0xaa8>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	b29a      	uxth	r2, r3
 8004cb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cb4:	801a      	strh	r2, [r3, #0]
 8004cb6:	e03a      	b.n	8004d2e <USB_EPStartXfer+0x8aa>
 8004cb8:	1d7b      	adds	r3, r7, #5
 8004cba:	33ff      	adds	r3, #255	; 0xff
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	085b      	lsrs	r3, r3, #1
 8004cc0:	21f0      	movs	r1, #240	; 0xf0
 8004cc2:	187a      	adds	r2, r7, r1
 8004cc4:	6013      	str	r3, [r2, #0]
 8004cc6:	1d7b      	adds	r3, r7, #5
 8004cc8:	33ff      	adds	r3, #255	; 0xff
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	4013      	ands	r3, r2
 8004cd0:	d004      	beq.n	8004cdc <USB_EPStartXfer+0x858>
 8004cd2:	187b      	adds	r3, r7, r1
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	187a      	adds	r2, r7, r1
 8004cda:	6013      	str	r3, [r2, #0]
 8004cdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cde:	881b      	ldrh	r3, [r3, #0]
 8004ce0:	b29a      	uxth	r2, r3
 8004ce2:	23f0      	movs	r3, #240	; 0xf0
 8004ce4:	18fb      	adds	r3, r7, r3
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	029b      	lsls	r3, r3, #10
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	b29a      	uxth	r2, r3
 8004cf2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cf4:	801a      	strh	r2, [r3, #0]
 8004cf6:	e01a      	b.n	8004d2e <USB_EPStartXfer+0x8aa>
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	785b      	ldrb	r3, [r3, #1]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d116      	bne.n	8004d2e <USB_EPStartXfer+0x8aa>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2250      	movs	r2, #80	; 0x50
 8004d04:	5a9b      	ldrh	r3, [r3, r2]
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	001a      	movs	r2, r3
 8004d0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d0c:	189b      	adds	r3, r3, r2
 8004d0e:	673b      	str	r3, [r7, #112]	; 0x70
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	00da      	lsls	r2, r3, #3
 8004d16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d18:	18d3      	adds	r3, r2, r3
 8004d1a:	4a83      	ldr	r2, [pc, #524]	; (8004f28 <USB_EPStartXfer+0xaa4>)
 8004d1c:	4694      	mov	ip, r2
 8004d1e:	4463      	add	r3, ip
 8004d20:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d22:	1d7b      	adds	r3, r7, #5
 8004d24:	33ff      	adds	r3, #255	; 0xff
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	b29a      	uxth	r2, r3
 8004d2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d2c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004d2e:	2076      	movs	r0, #118	; 0x76
 8004d30:	183b      	adds	r3, r7, r0
 8004d32:	683a      	ldr	r2, [r7, #0]
 8004d34:	8952      	ldrh	r2, [r2, #10]
 8004d36:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	6959      	ldr	r1, [r3, #20]
 8004d3c:	1d7b      	adds	r3, r7, #5
 8004d3e:	33ff      	adds	r3, #255	; 0xff
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	b29c      	uxth	r4, r3
 8004d44:	183b      	adds	r3, r7, r0
 8004d46:	881a      	ldrh	r2, [r3, #0]
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	0023      	movs	r3, r4
 8004d4c:	f000 fe0c 	bl	8005968 <USB_WritePMA>
 8004d50:	e0ab      	b.n	8004eaa <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	785b      	ldrb	r3, [r3, #1]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d000      	beq.n	8004d5c <USB_EPStartXfer+0x8d8>
 8004d5a:	e070      	b.n	8004e3e <USB_EPStartXfer+0x9ba>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2250      	movs	r2, #80	; 0x50
 8004d64:	5a9b      	ldrh	r3, [r3, r2]
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	001a      	movs	r2, r3
 8004d6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d6c:	189b      	adds	r3, r3, r2
 8004d6e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	00da      	lsls	r2, r3, #3
 8004d76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d78:	18d3      	adds	r3, r2, r3
 8004d7a:	4a6d      	ldr	r2, [pc, #436]	; (8004f30 <USB_EPStartXfer+0xaac>)
 8004d7c:	4694      	mov	ip, r2
 8004d7e:	4463      	add	r3, ip
 8004d80:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d84:	881b      	ldrh	r3, [r3, #0]
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	059b      	lsls	r3, r3, #22
 8004d8a:	0d9b      	lsrs	r3, r3, #22
 8004d8c:	b29a      	uxth	r2, r3
 8004d8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d90:	801a      	strh	r2, [r3, #0]
 8004d92:	1d7b      	adds	r3, r7, #5
 8004d94:	33ff      	adds	r3, #255	; 0xff
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2b3e      	cmp	r3, #62	; 0x3e
 8004d9a:	d922      	bls.n	8004de2 <USB_EPStartXfer+0x95e>
 8004d9c:	1d7b      	adds	r3, r7, #5
 8004d9e:	33ff      	adds	r3, #255	; 0xff
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	095b      	lsrs	r3, r3, #5
 8004da4:	21ec      	movs	r1, #236	; 0xec
 8004da6:	187a      	adds	r2, r7, r1
 8004da8:	6013      	str	r3, [r2, #0]
 8004daa:	1d7b      	adds	r3, r7, #5
 8004dac:	33ff      	adds	r3, #255	; 0xff
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	221f      	movs	r2, #31
 8004db2:	4013      	ands	r3, r2
 8004db4:	d104      	bne.n	8004dc0 <USB_EPStartXfer+0x93c>
 8004db6:	187b      	adds	r3, r7, r1
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	187a      	adds	r2, r7, r1
 8004dbe:	6013      	str	r3, [r2, #0]
 8004dc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dc2:	881b      	ldrh	r3, [r3, #0]
 8004dc4:	b29a      	uxth	r2, r3
 8004dc6:	23ec      	movs	r3, #236	; 0xec
 8004dc8:	18fb      	adds	r3, r7, r3
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	029b      	lsls	r3, r3, #10
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	4a55      	ldr	r2, [pc, #340]	; (8004f2c <USB_EPStartXfer+0xaa8>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dde:	801a      	strh	r2, [r3, #0]
 8004de0:	e052      	b.n	8004e88 <USB_EPStartXfer+0xa04>
 8004de2:	1d7b      	adds	r3, r7, #5
 8004de4:	33ff      	adds	r3, #255	; 0xff
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d108      	bne.n	8004dfe <USB_EPStartXfer+0x97a>
 8004dec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dee:	881b      	ldrh	r3, [r3, #0]
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	4a4e      	ldr	r2, [pc, #312]	; (8004f2c <USB_EPStartXfer+0xaa8>)
 8004df4:	4313      	orrs	r3, r2
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dfa:	801a      	strh	r2, [r3, #0]
 8004dfc:	e044      	b.n	8004e88 <USB_EPStartXfer+0xa04>
 8004dfe:	1d7b      	adds	r3, r7, #5
 8004e00:	33ff      	adds	r3, #255	; 0xff
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	085b      	lsrs	r3, r3, #1
 8004e06:	21ec      	movs	r1, #236	; 0xec
 8004e08:	187a      	adds	r2, r7, r1
 8004e0a:	6013      	str	r3, [r2, #0]
 8004e0c:	1d7b      	adds	r3, r7, #5
 8004e0e:	33ff      	adds	r3, #255	; 0xff
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2201      	movs	r2, #1
 8004e14:	4013      	ands	r3, r2
 8004e16:	d004      	beq.n	8004e22 <USB_EPStartXfer+0x99e>
 8004e18:	187b      	adds	r3, r7, r1
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	187a      	adds	r2, r7, r1
 8004e20:	6013      	str	r3, [r2, #0]
 8004e22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e24:	881b      	ldrh	r3, [r3, #0]
 8004e26:	b29a      	uxth	r2, r3
 8004e28:	23ec      	movs	r3, #236	; 0xec
 8004e2a:	18fb      	adds	r3, r7, r3
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	029b      	lsls	r3, r3, #10
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	4313      	orrs	r3, r2
 8004e36:	b29a      	uxth	r2, r3
 8004e38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e3a:	801a      	strh	r2, [r3, #0]
 8004e3c:	e024      	b.n	8004e88 <USB_EPStartXfer+0xa04>
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	785b      	ldrb	r3, [r3, #1]
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d120      	bne.n	8004e88 <USB_EPStartXfer+0xa04>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2184      	movs	r1, #132	; 0x84
 8004e4a:	187a      	adds	r2, r7, r1
 8004e4c:	6013      	str	r3, [r2, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2250      	movs	r2, #80	; 0x50
 8004e52:	5a9b      	ldrh	r3, [r3, r2]
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	001a      	movs	r2, r3
 8004e58:	187b      	adds	r3, r7, r1
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	189b      	adds	r3, r3, r2
 8004e5e:	187a      	adds	r2, r7, r1
 8004e60:	6013      	str	r3, [r2, #0]
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	00da      	lsls	r2, r3, #3
 8004e68:	187b      	adds	r3, r7, r1
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	18d3      	adds	r3, r2, r3
 8004e6e:	4a30      	ldr	r2, [pc, #192]	; (8004f30 <USB_EPStartXfer+0xaac>)
 8004e70:	4694      	mov	ip, r2
 8004e72:	4463      	add	r3, ip
 8004e74:	2180      	movs	r1, #128	; 0x80
 8004e76:	187a      	adds	r2, r7, r1
 8004e78:	6013      	str	r3, [r2, #0]
 8004e7a:	1d7b      	adds	r3, r7, #5
 8004e7c:	33ff      	adds	r3, #255	; 0xff
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	b29a      	uxth	r2, r3
 8004e82:	187b      	adds	r3, r7, r1
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004e88:	2076      	movs	r0, #118	; 0x76
 8004e8a:	183b      	adds	r3, r7, r0
 8004e8c:	683a      	ldr	r2, [r7, #0]
 8004e8e:	8912      	ldrh	r2, [r2, #8]
 8004e90:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	6959      	ldr	r1, [r3, #20]
 8004e96:	1d7b      	adds	r3, r7, #5
 8004e98:	33ff      	adds	r3, #255	; 0xff
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	b29c      	uxth	r4, r3
 8004e9e:	183b      	adds	r3, r7, r0
 8004ea0:	881a      	ldrh	r2, [r3, #0]
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	0023      	movs	r3, r4
 8004ea6:	f000 fd5f 	bl	8005968 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	18d3      	adds	r3, r2, r3
 8004eb4:	881b      	ldrh	r3, [r3, #0]
 8004eb6:	b29a      	uxth	r2, r3
 8004eb8:	200a      	movs	r0, #10
 8004eba:	183b      	adds	r3, r7, r0
 8004ebc:	491d      	ldr	r1, [pc, #116]	; (8004f34 <USB_EPStartXfer+0xab0>)
 8004ebe:	400a      	ands	r2, r1
 8004ec0:	801a      	strh	r2, [r3, #0]
 8004ec2:	183b      	adds	r3, r7, r0
 8004ec4:	183a      	adds	r2, r7, r0
 8004ec6:	8812      	ldrh	r2, [r2, #0]
 8004ec8:	2110      	movs	r1, #16
 8004eca:	404a      	eors	r2, r1
 8004ecc:	801a      	strh	r2, [r3, #0]
 8004ece:	183b      	adds	r3, r7, r0
 8004ed0:	183a      	adds	r2, r7, r0
 8004ed2:	8812      	ldrh	r2, [r2, #0]
 8004ed4:	2120      	movs	r1, #32
 8004ed6:	404a      	eors	r2, r1
 8004ed8:	801a      	strh	r2, [r3, #0]
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	18d3      	adds	r3, r2, r3
 8004ee4:	183a      	adds	r2, r7, r0
 8004ee6:	8812      	ldrh	r2, [r2, #0]
 8004ee8:	4913      	ldr	r1, [pc, #76]	; (8004f38 <USB_EPStartXfer+0xab4>)
 8004eea:	430a      	orrs	r2, r1
 8004eec:	b292      	uxth	r2, r2
 8004eee:	801a      	strh	r2, [r3, #0]
 8004ef0:	f000 fbf4 	bl	80056dc <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	7b1b      	ldrb	r3, [r3, #12]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d000      	beq.n	8004efe <USB_EPStartXfer+0xa7a>
 8004efc:	e0a9      	b.n	8005052 <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	699a      	ldr	r2, [r3, #24]
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d918      	bls.n	8004f3c <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	1d7a      	adds	r2, r7, #5
 8004f10:	32ff      	adds	r2, #255	; 0xff
 8004f12:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	699a      	ldr	r2, [r3, #24]
 8004f18:	1d7b      	adds	r3, r7, #5
 8004f1a:	33ff      	adds	r3, #255	; 0xff
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	1ad2      	subs	r2, r2, r3
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	619a      	str	r2, [r3, #24]
 8004f24:	e012      	b.n	8004f4c <USB_EPStartXfer+0xac8>
 8004f26:	46c0      	nop			; (mov r8, r8)
 8004f28:	00000406 	.word	0x00000406
 8004f2c:	ffff8000 	.word	0xffff8000
 8004f30:	00000402 	.word	0x00000402
 8004f34:	ffff8fbf 	.word	0xffff8fbf
 8004f38:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	1d7a      	adds	r2, r7, #5
 8004f42:	32ff      	adds	r2, #255	; 0xff
 8004f44:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2190      	movs	r1, #144	; 0x90
 8004f50:	187a      	adds	r2, r7, r1
 8004f52:	6013      	str	r3, [r2, #0]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2250      	movs	r2, #80	; 0x50
 8004f58:	5a9b      	ldrh	r3, [r3, r2]
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	001a      	movs	r2, r3
 8004f5e:	187b      	adds	r3, r7, r1
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	189b      	adds	r3, r3, r2
 8004f64:	187a      	adds	r2, r7, r1
 8004f66:	6013      	str	r3, [r2, #0]
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	00da      	lsls	r2, r3, #3
 8004f6e:	187b      	adds	r3, r7, r1
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	18d3      	adds	r3, r2, r3
 8004f74:	4acf      	ldr	r2, [pc, #828]	; (80052b4 <USB_EPStartXfer+0xe30>)
 8004f76:	4694      	mov	ip, r2
 8004f78:	4463      	add	r3, ip
 8004f7a:	218c      	movs	r1, #140	; 0x8c
 8004f7c:	187a      	adds	r2, r7, r1
 8004f7e:	6013      	str	r3, [r2, #0]
 8004f80:	187b      	adds	r3, r7, r1
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	881b      	ldrh	r3, [r3, #0]
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	059b      	lsls	r3, r3, #22
 8004f8a:	0d9b      	lsrs	r3, r3, #22
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	187b      	adds	r3, r7, r1
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	801a      	strh	r2, [r3, #0]
 8004f94:	1d7b      	adds	r3, r7, #5
 8004f96:	33ff      	adds	r3, #255	; 0xff
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2b3e      	cmp	r3, #62	; 0x3e
 8004f9c:	d925      	bls.n	8004fea <USB_EPStartXfer+0xb66>
 8004f9e:	1d7b      	adds	r3, r7, #5
 8004fa0:	33ff      	adds	r3, #255	; 0xff
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	095b      	lsrs	r3, r3, #5
 8004fa6:	21e8      	movs	r1, #232	; 0xe8
 8004fa8:	187a      	adds	r2, r7, r1
 8004faa:	6013      	str	r3, [r2, #0]
 8004fac:	1d7b      	adds	r3, r7, #5
 8004fae:	33ff      	adds	r3, #255	; 0xff
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	221f      	movs	r2, #31
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	d104      	bne.n	8004fc2 <USB_EPStartXfer+0xb3e>
 8004fb8:	187b      	adds	r3, r7, r1
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	187a      	adds	r2, r7, r1
 8004fc0:	6013      	str	r3, [r2, #0]
 8004fc2:	218c      	movs	r1, #140	; 0x8c
 8004fc4:	187b      	adds	r3, r7, r1
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	881b      	ldrh	r3, [r3, #0]
 8004fca:	b29a      	uxth	r2, r3
 8004fcc:	23e8      	movs	r3, #232	; 0xe8
 8004fce:	18fb      	adds	r3, r7, r3
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	029b      	lsls	r3, r3, #10
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	4ab6      	ldr	r2, [pc, #728]	; (80052b8 <USB_EPStartXfer+0xe34>)
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	b29a      	uxth	r2, r3
 8004fe2:	187b      	adds	r3, r7, r1
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	801a      	strh	r2, [r3, #0]
 8004fe8:	e353      	b.n	8005692 <USB_EPStartXfer+0x120e>
 8004fea:	1d7b      	adds	r3, r7, #5
 8004fec:	33ff      	adds	r3, #255	; 0xff
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d10b      	bne.n	800500c <USB_EPStartXfer+0xb88>
 8004ff4:	218c      	movs	r1, #140	; 0x8c
 8004ff6:	187b      	adds	r3, r7, r1
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	881b      	ldrh	r3, [r3, #0]
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	4aae      	ldr	r2, [pc, #696]	; (80052b8 <USB_EPStartXfer+0xe34>)
 8005000:	4313      	orrs	r3, r2
 8005002:	b29a      	uxth	r2, r3
 8005004:	187b      	adds	r3, r7, r1
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	801a      	strh	r2, [r3, #0]
 800500a:	e342      	b.n	8005692 <USB_EPStartXfer+0x120e>
 800500c:	1d7b      	adds	r3, r7, #5
 800500e:	33ff      	adds	r3, #255	; 0xff
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	085b      	lsrs	r3, r3, #1
 8005014:	21e8      	movs	r1, #232	; 0xe8
 8005016:	187a      	adds	r2, r7, r1
 8005018:	6013      	str	r3, [r2, #0]
 800501a:	1d7b      	adds	r3, r7, #5
 800501c:	33ff      	adds	r3, #255	; 0xff
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2201      	movs	r2, #1
 8005022:	4013      	ands	r3, r2
 8005024:	d004      	beq.n	8005030 <USB_EPStartXfer+0xbac>
 8005026:	187b      	adds	r3, r7, r1
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	3301      	adds	r3, #1
 800502c:	187a      	adds	r2, r7, r1
 800502e:	6013      	str	r3, [r2, #0]
 8005030:	218c      	movs	r1, #140	; 0x8c
 8005032:	187b      	adds	r3, r7, r1
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	881b      	ldrh	r3, [r3, #0]
 8005038:	b29a      	uxth	r2, r3
 800503a:	23e8      	movs	r3, #232	; 0xe8
 800503c:	18fb      	adds	r3, r7, r3
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	b29b      	uxth	r3, r3
 8005042:	029b      	lsls	r3, r3, #10
 8005044:	b29b      	uxth	r3, r3
 8005046:	4313      	orrs	r3, r2
 8005048:	b29a      	uxth	r2, r3
 800504a:	187b      	adds	r3, r7, r1
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	801a      	strh	r2, [r3, #0]
 8005050:	e31f      	b.n	8005692 <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	78db      	ldrb	r3, [r3, #3]
 8005056:	2b02      	cmp	r3, #2
 8005058:	d000      	beq.n	800505c <USB_EPStartXfer+0xbd8>
 800505a:	e191      	b.n	8005380 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	785b      	ldrb	r3, [r3, #1]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d000      	beq.n	8005066 <USB_EPStartXfer+0xbe2>
 8005064:	e07c      	b.n	8005160 <USB_EPStartXfer+0xcdc>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	21ac      	movs	r1, #172	; 0xac
 800506a:	187a      	adds	r2, r7, r1
 800506c:	6013      	str	r3, [r2, #0]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2250      	movs	r2, #80	; 0x50
 8005072:	5a9b      	ldrh	r3, [r3, r2]
 8005074:	b29b      	uxth	r3, r3
 8005076:	001a      	movs	r2, r3
 8005078:	187b      	adds	r3, r7, r1
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	189b      	adds	r3, r3, r2
 800507e:	187a      	adds	r2, r7, r1
 8005080:	6013      	str	r3, [r2, #0]
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	00da      	lsls	r2, r3, #3
 8005088:	187b      	adds	r3, r7, r1
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	18d3      	adds	r3, r2, r3
 800508e:	4a8b      	ldr	r2, [pc, #556]	; (80052bc <USB_EPStartXfer+0xe38>)
 8005090:	4694      	mov	ip, r2
 8005092:	4463      	add	r3, ip
 8005094:	21a8      	movs	r1, #168	; 0xa8
 8005096:	187a      	adds	r2, r7, r1
 8005098:	6013      	str	r3, [r2, #0]
 800509a:	187b      	adds	r3, r7, r1
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	881b      	ldrh	r3, [r3, #0]
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	059b      	lsls	r3, r3, #22
 80050a4:	0d9b      	lsrs	r3, r3, #22
 80050a6:	b29a      	uxth	r2, r3
 80050a8:	187b      	adds	r3, r7, r1
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	801a      	strh	r2, [r3, #0]
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	2b3e      	cmp	r3, #62	; 0x3e
 80050b4:	d923      	bls.n	80050fe <USB_EPStartXfer+0xc7a>
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	095b      	lsrs	r3, r3, #5
 80050bc:	21e4      	movs	r1, #228	; 0xe4
 80050be:	187a      	adds	r2, r7, r1
 80050c0:	6013      	str	r3, [r2, #0]
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	221f      	movs	r2, #31
 80050c8:	4013      	ands	r3, r2
 80050ca:	d104      	bne.n	80050d6 <USB_EPStartXfer+0xc52>
 80050cc:	187b      	adds	r3, r7, r1
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	3b01      	subs	r3, #1
 80050d2:	187a      	adds	r2, r7, r1
 80050d4:	6013      	str	r3, [r2, #0]
 80050d6:	21a8      	movs	r1, #168	; 0xa8
 80050d8:	187b      	adds	r3, r7, r1
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	881b      	ldrh	r3, [r3, #0]
 80050de:	b29a      	uxth	r2, r3
 80050e0:	23e4      	movs	r3, #228	; 0xe4
 80050e2:	18fb      	adds	r3, r7, r3
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	029b      	lsls	r3, r3, #10
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	4313      	orrs	r3, r2
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	4a71      	ldr	r2, [pc, #452]	; (80052b8 <USB_EPStartXfer+0xe34>)
 80050f2:	4313      	orrs	r3, r2
 80050f4:	b29a      	uxth	r2, r3
 80050f6:	187b      	adds	r3, r7, r1
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	801a      	strh	r2, [r3, #0]
 80050fc:	e054      	b.n	80051a8 <USB_EPStartXfer+0xd24>
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d10b      	bne.n	800511e <USB_EPStartXfer+0xc9a>
 8005106:	21a8      	movs	r1, #168	; 0xa8
 8005108:	187b      	adds	r3, r7, r1
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	881b      	ldrh	r3, [r3, #0]
 800510e:	b29b      	uxth	r3, r3
 8005110:	4a69      	ldr	r2, [pc, #420]	; (80052b8 <USB_EPStartXfer+0xe34>)
 8005112:	4313      	orrs	r3, r2
 8005114:	b29a      	uxth	r2, r3
 8005116:	187b      	adds	r3, r7, r1
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	801a      	strh	r2, [r3, #0]
 800511c:	e044      	b.n	80051a8 <USB_EPStartXfer+0xd24>
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	085b      	lsrs	r3, r3, #1
 8005124:	21e4      	movs	r1, #228	; 0xe4
 8005126:	187a      	adds	r2, r7, r1
 8005128:	6013      	str	r3, [r2, #0]
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	2201      	movs	r2, #1
 8005130:	4013      	ands	r3, r2
 8005132:	d004      	beq.n	800513e <USB_EPStartXfer+0xcba>
 8005134:	187b      	adds	r3, r7, r1
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	3301      	adds	r3, #1
 800513a:	187a      	adds	r2, r7, r1
 800513c:	6013      	str	r3, [r2, #0]
 800513e:	21a8      	movs	r1, #168	; 0xa8
 8005140:	187b      	adds	r3, r7, r1
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	881b      	ldrh	r3, [r3, #0]
 8005146:	b29a      	uxth	r2, r3
 8005148:	23e4      	movs	r3, #228	; 0xe4
 800514a:	18fb      	adds	r3, r7, r3
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	b29b      	uxth	r3, r3
 8005150:	029b      	lsls	r3, r3, #10
 8005152:	b29b      	uxth	r3, r3
 8005154:	4313      	orrs	r3, r2
 8005156:	b29a      	uxth	r2, r3
 8005158:	187b      	adds	r3, r7, r1
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	801a      	strh	r2, [r3, #0]
 800515e:	e023      	b.n	80051a8 <USB_EPStartXfer+0xd24>
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	785b      	ldrb	r3, [r3, #1]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d11f      	bne.n	80051a8 <USB_EPStartXfer+0xd24>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	21b4      	movs	r1, #180	; 0xb4
 800516c:	187a      	adds	r2, r7, r1
 800516e:	6013      	str	r3, [r2, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2250      	movs	r2, #80	; 0x50
 8005174:	5a9b      	ldrh	r3, [r3, r2]
 8005176:	b29b      	uxth	r3, r3
 8005178:	001a      	movs	r2, r3
 800517a:	187b      	adds	r3, r7, r1
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	189b      	adds	r3, r3, r2
 8005180:	187a      	adds	r2, r7, r1
 8005182:	6013      	str	r3, [r2, #0]
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	00da      	lsls	r2, r3, #3
 800518a:	187b      	adds	r3, r7, r1
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	18d3      	adds	r3, r2, r3
 8005190:	4a4a      	ldr	r2, [pc, #296]	; (80052bc <USB_EPStartXfer+0xe38>)
 8005192:	4694      	mov	ip, r2
 8005194:	4463      	add	r3, ip
 8005196:	21b0      	movs	r1, #176	; 0xb0
 8005198:	187a      	adds	r2, r7, r1
 800519a:	6013      	str	r3, [r2, #0]
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	691b      	ldr	r3, [r3, #16]
 80051a0:	b29a      	uxth	r2, r3
 80051a2:	187b      	adds	r3, r7, r1
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	801a      	strh	r2, [r3, #0]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	22a4      	movs	r2, #164	; 0xa4
 80051ac:	18ba      	adds	r2, r7, r2
 80051ae:	6013      	str	r3, [r2, #0]
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	785b      	ldrb	r3, [r3, #1]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d000      	beq.n	80051ba <USB_EPStartXfer+0xd36>
 80051b8:	e082      	b.n	80052c0 <USB_EPStartXfer+0xe3c>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	219c      	movs	r1, #156	; 0x9c
 80051be:	187a      	adds	r2, r7, r1
 80051c0:	6013      	str	r3, [r2, #0]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2250      	movs	r2, #80	; 0x50
 80051c6:	5a9b      	ldrh	r3, [r3, r2]
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	001a      	movs	r2, r3
 80051cc:	187b      	adds	r3, r7, r1
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	189b      	adds	r3, r3, r2
 80051d2:	187a      	adds	r2, r7, r1
 80051d4:	6013      	str	r3, [r2, #0]
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	00da      	lsls	r2, r3, #3
 80051dc:	187b      	adds	r3, r7, r1
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	18d3      	adds	r3, r2, r3
 80051e2:	4a34      	ldr	r2, [pc, #208]	; (80052b4 <USB_EPStartXfer+0xe30>)
 80051e4:	4694      	mov	ip, r2
 80051e6:	4463      	add	r3, ip
 80051e8:	2198      	movs	r1, #152	; 0x98
 80051ea:	187a      	adds	r2, r7, r1
 80051ec:	6013      	str	r3, [r2, #0]
 80051ee:	187b      	adds	r3, r7, r1
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	881b      	ldrh	r3, [r3, #0]
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	059b      	lsls	r3, r3, #22
 80051f8:	0d9b      	lsrs	r3, r3, #22
 80051fa:	b29a      	uxth	r2, r3
 80051fc:	187b      	adds	r3, r7, r1
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	801a      	strh	r2, [r3, #0]
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	2b3e      	cmp	r3, #62	; 0x3e
 8005208:	d923      	bls.n	8005252 <USB_EPStartXfer+0xdce>
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	095b      	lsrs	r3, r3, #5
 8005210:	21e0      	movs	r1, #224	; 0xe0
 8005212:	187a      	adds	r2, r7, r1
 8005214:	6013      	str	r3, [r2, #0]
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	221f      	movs	r2, #31
 800521c:	4013      	ands	r3, r2
 800521e:	d104      	bne.n	800522a <USB_EPStartXfer+0xda6>
 8005220:	187b      	adds	r3, r7, r1
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	3b01      	subs	r3, #1
 8005226:	187a      	adds	r2, r7, r1
 8005228:	6013      	str	r3, [r2, #0]
 800522a:	2198      	movs	r1, #152	; 0x98
 800522c:	187b      	adds	r3, r7, r1
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	881b      	ldrh	r3, [r3, #0]
 8005232:	b29a      	uxth	r2, r3
 8005234:	23e0      	movs	r3, #224	; 0xe0
 8005236:	18fb      	adds	r3, r7, r3
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	b29b      	uxth	r3, r3
 800523c:	029b      	lsls	r3, r3, #10
 800523e:	b29b      	uxth	r3, r3
 8005240:	4313      	orrs	r3, r2
 8005242:	b29b      	uxth	r3, r3
 8005244:	4a1c      	ldr	r2, [pc, #112]	; (80052b8 <USB_EPStartXfer+0xe34>)
 8005246:	4313      	orrs	r3, r2
 8005248:	b29a      	uxth	r2, r3
 800524a:	187b      	adds	r3, r7, r1
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	801a      	strh	r2, [r3, #0]
 8005250:	e057      	b.n	8005302 <USB_EPStartXfer+0xe7e>
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d10b      	bne.n	8005272 <USB_EPStartXfer+0xdee>
 800525a:	2198      	movs	r1, #152	; 0x98
 800525c:	187b      	adds	r3, r7, r1
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	881b      	ldrh	r3, [r3, #0]
 8005262:	b29b      	uxth	r3, r3
 8005264:	4a14      	ldr	r2, [pc, #80]	; (80052b8 <USB_EPStartXfer+0xe34>)
 8005266:	4313      	orrs	r3, r2
 8005268:	b29a      	uxth	r2, r3
 800526a:	187b      	adds	r3, r7, r1
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	801a      	strh	r2, [r3, #0]
 8005270:	e047      	b.n	8005302 <USB_EPStartXfer+0xe7e>
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	085b      	lsrs	r3, r3, #1
 8005278:	21e0      	movs	r1, #224	; 0xe0
 800527a:	187a      	adds	r2, r7, r1
 800527c:	6013      	str	r3, [r2, #0]
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	2201      	movs	r2, #1
 8005284:	4013      	ands	r3, r2
 8005286:	d004      	beq.n	8005292 <USB_EPStartXfer+0xe0e>
 8005288:	187b      	adds	r3, r7, r1
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	3301      	adds	r3, #1
 800528e:	187a      	adds	r2, r7, r1
 8005290:	6013      	str	r3, [r2, #0]
 8005292:	2198      	movs	r1, #152	; 0x98
 8005294:	187b      	adds	r3, r7, r1
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	881b      	ldrh	r3, [r3, #0]
 800529a:	b29a      	uxth	r2, r3
 800529c:	23e0      	movs	r3, #224	; 0xe0
 800529e:	18fb      	adds	r3, r7, r3
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	029b      	lsls	r3, r3, #10
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	4313      	orrs	r3, r2
 80052aa:	b29a      	uxth	r2, r3
 80052ac:	187b      	adds	r3, r7, r1
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	801a      	strh	r2, [r3, #0]
 80052b2:	e026      	b.n	8005302 <USB_EPStartXfer+0xe7e>
 80052b4:	00000406 	.word	0x00000406
 80052b8:	ffff8000 	.word	0xffff8000
 80052bc:	00000402 	.word	0x00000402
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	785b      	ldrb	r3, [r3, #1]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d11c      	bne.n	8005302 <USB_EPStartXfer+0xe7e>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2250      	movs	r2, #80	; 0x50
 80052cc:	5a9b      	ldrh	r3, [r3, r2]
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	001a      	movs	r2, r3
 80052d2:	21a4      	movs	r1, #164	; 0xa4
 80052d4:	187b      	adds	r3, r7, r1
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	189b      	adds	r3, r3, r2
 80052da:	187a      	adds	r2, r7, r1
 80052dc:	6013      	str	r3, [r2, #0]
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	00da      	lsls	r2, r3, #3
 80052e4:	187b      	adds	r3, r7, r1
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	18d3      	adds	r3, r2, r3
 80052ea:	4ad2      	ldr	r2, [pc, #840]	; (8005634 <USB_EPStartXfer+0x11b0>)
 80052ec:	4694      	mov	ip, r2
 80052ee:	4463      	add	r3, ip
 80052f0:	21a0      	movs	r1, #160	; 0xa0
 80052f2:	187a      	adds	r2, r7, r1
 80052f4:	6013      	str	r3, [r2, #0]
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	b29a      	uxth	r2, r3
 80052fc:	187b      	adds	r3, r7, r1
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	69db      	ldr	r3, [r3, #28]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d100      	bne.n	800530c <USB_EPStartXfer+0xe88>
 800530a:	e1c2      	b.n	8005692 <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	18d2      	adds	r2, r2, r3
 8005316:	2196      	movs	r1, #150	; 0x96
 8005318:	187b      	adds	r3, r7, r1
 800531a:	8812      	ldrh	r2, [r2, #0]
 800531c:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800531e:	187b      	adds	r3, r7, r1
 8005320:	881a      	ldrh	r2, [r3, #0]
 8005322:	2380      	movs	r3, #128	; 0x80
 8005324:	01db      	lsls	r3, r3, #7
 8005326:	4013      	ands	r3, r2
 8005328:	d004      	beq.n	8005334 <USB_EPStartXfer+0xeb0>
 800532a:	187b      	adds	r3, r7, r1
 800532c:	881b      	ldrh	r3, [r3, #0]
 800532e:	2240      	movs	r2, #64	; 0x40
 8005330:	4013      	ands	r3, r2
 8005332:	d10d      	bne.n	8005350 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005334:	2196      	movs	r1, #150	; 0x96
 8005336:	187b      	adds	r3, r7, r1
 8005338:	881a      	ldrh	r2, [r3, #0]
 800533a:	2380      	movs	r3, #128	; 0x80
 800533c:	01db      	lsls	r3, r3, #7
 800533e:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005340:	d000      	beq.n	8005344 <USB_EPStartXfer+0xec0>
 8005342:	e1a6      	b.n	8005692 <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005344:	187b      	adds	r3, r7, r1
 8005346:	881b      	ldrh	r3, [r3, #0]
 8005348:	2240      	movs	r2, #64	; 0x40
 800534a:	4013      	ands	r3, r2
 800534c:	d000      	beq.n	8005350 <USB_EPStartXfer+0xecc>
 800534e:	e1a0      	b.n	8005692 <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	18d3      	adds	r3, r2, r3
 800535a:	881b      	ldrh	r3, [r3, #0]
 800535c:	b29a      	uxth	r2, r3
 800535e:	2094      	movs	r0, #148	; 0x94
 8005360:	183b      	adds	r3, r7, r0
 8005362:	49b5      	ldr	r1, [pc, #724]	; (8005638 <USB_EPStartXfer+0x11b4>)
 8005364:	400a      	ands	r2, r1
 8005366:	801a      	strh	r2, [r3, #0]
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	18d3      	adds	r3, r2, r3
 8005372:	183a      	adds	r2, r7, r0
 8005374:	8812      	ldrh	r2, [r2, #0]
 8005376:	49b1      	ldr	r1, [pc, #708]	; (800563c <USB_EPStartXfer+0x11b8>)
 8005378:	430a      	orrs	r2, r1
 800537a:	b292      	uxth	r2, r2
 800537c:	801a      	strh	r2, [r3, #0]
 800537e:	e188      	b.n	8005692 <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	78db      	ldrb	r3, [r3, #3]
 8005384:	2b01      	cmp	r3, #1
 8005386:	d000      	beq.n	800538a <USB_EPStartXfer+0xf06>
 8005388:	e181      	b.n	800568e <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	699a      	ldr	r2, [r3, #24]
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	429a      	cmp	r2, r3
 8005394:	d90d      	bls.n	80053b2 <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	1d7a      	adds	r2, r7, #5
 800539c:	32ff      	adds	r2, #255	; 0xff
 800539e:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	699a      	ldr	r2, [r3, #24]
 80053a4:	1d7b      	adds	r3, r7, #5
 80053a6:	33ff      	adds	r3, #255	; 0xff
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	1ad2      	subs	r2, r2, r3
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	619a      	str	r2, [r3, #24]
 80053b0:	e007      	b.n	80053c2 <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	699b      	ldr	r3, [r3, #24]
 80053b6:	1d7a      	adds	r2, r7, #5
 80053b8:	32ff      	adds	r2, #255	; 0xff
 80053ba:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	2200      	movs	r2, #0
 80053c0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	785b      	ldrb	r3, [r3, #1]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d000      	beq.n	80053cc <USB_EPStartXfer+0xf48>
 80053ca:	e082      	b.n	80054d2 <USB_EPStartXfer+0x104e>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	21cc      	movs	r1, #204	; 0xcc
 80053d0:	187a      	adds	r2, r7, r1
 80053d2:	6013      	str	r3, [r2, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2250      	movs	r2, #80	; 0x50
 80053d8:	5a9b      	ldrh	r3, [r3, r2]
 80053da:	b29b      	uxth	r3, r3
 80053dc:	001a      	movs	r2, r3
 80053de:	187b      	adds	r3, r7, r1
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	189b      	adds	r3, r3, r2
 80053e4:	187a      	adds	r2, r7, r1
 80053e6:	6013      	str	r3, [r2, #0]
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	00da      	lsls	r2, r3, #3
 80053ee:	187b      	adds	r3, r7, r1
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	18d3      	adds	r3, r2, r3
 80053f4:	4a92      	ldr	r2, [pc, #584]	; (8005640 <USB_EPStartXfer+0x11bc>)
 80053f6:	4694      	mov	ip, r2
 80053f8:	4463      	add	r3, ip
 80053fa:	21c8      	movs	r1, #200	; 0xc8
 80053fc:	187a      	adds	r2, r7, r1
 80053fe:	6013      	str	r3, [r2, #0]
 8005400:	187b      	adds	r3, r7, r1
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	881b      	ldrh	r3, [r3, #0]
 8005406:	b29b      	uxth	r3, r3
 8005408:	059b      	lsls	r3, r3, #22
 800540a:	0d9b      	lsrs	r3, r3, #22
 800540c:	b29a      	uxth	r2, r3
 800540e:	187b      	adds	r3, r7, r1
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	801a      	strh	r2, [r3, #0]
 8005414:	1d7b      	adds	r3, r7, #5
 8005416:	33ff      	adds	r3, #255	; 0xff
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2b3e      	cmp	r3, #62	; 0x3e
 800541c:	d925      	bls.n	800546a <USB_EPStartXfer+0xfe6>
 800541e:	1d7b      	adds	r3, r7, #5
 8005420:	33ff      	adds	r3, #255	; 0xff
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	095b      	lsrs	r3, r3, #5
 8005426:	21dc      	movs	r1, #220	; 0xdc
 8005428:	187a      	adds	r2, r7, r1
 800542a:	6013      	str	r3, [r2, #0]
 800542c:	1d7b      	adds	r3, r7, #5
 800542e:	33ff      	adds	r3, #255	; 0xff
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	221f      	movs	r2, #31
 8005434:	4013      	ands	r3, r2
 8005436:	d104      	bne.n	8005442 <USB_EPStartXfer+0xfbe>
 8005438:	187b      	adds	r3, r7, r1
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	3b01      	subs	r3, #1
 800543e:	187a      	adds	r2, r7, r1
 8005440:	6013      	str	r3, [r2, #0]
 8005442:	21c8      	movs	r1, #200	; 0xc8
 8005444:	187b      	adds	r3, r7, r1
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	881b      	ldrh	r3, [r3, #0]
 800544a:	b29a      	uxth	r2, r3
 800544c:	23dc      	movs	r3, #220	; 0xdc
 800544e:	18fb      	adds	r3, r7, r3
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	b29b      	uxth	r3, r3
 8005454:	029b      	lsls	r3, r3, #10
 8005456:	b29b      	uxth	r3, r3
 8005458:	4313      	orrs	r3, r2
 800545a:	b29b      	uxth	r3, r3
 800545c:	4a79      	ldr	r2, [pc, #484]	; (8005644 <USB_EPStartXfer+0x11c0>)
 800545e:	4313      	orrs	r3, r2
 8005460:	b29a      	uxth	r2, r3
 8005462:	187b      	adds	r3, r7, r1
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	801a      	strh	r2, [r3, #0]
 8005468:	e058      	b.n	800551c <USB_EPStartXfer+0x1098>
 800546a:	1d7b      	adds	r3, r7, #5
 800546c:	33ff      	adds	r3, #255	; 0xff
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d10b      	bne.n	800548c <USB_EPStartXfer+0x1008>
 8005474:	21c8      	movs	r1, #200	; 0xc8
 8005476:	187b      	adds	r3, r7, r1
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	881b      	ldrh	r3, [r3, #0]
 800547c:	b29b      	uxth	r3, r3
 800547e:	4a71      	ldr	r2, [pc, #452]	; (8005644 <USB_EPStartXfer+0x11c0>)
 8005480:	4313      	orrs	r3, r2
 8005482:	b29a      	uxth	r2, r3
 8005484:	187b      	adds	r3, r7, r1
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	801a      	strh	r2, [r3, #0]
 800548a:	e047      	b.n	800551c <USB_EPStartXfer+0x1098>
 800548c:	1d7b      	adds	r3, r7, #5
 800548e:	33ff      	adds	r3, #255	; 0xff
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	085b      	lsrs	r3, r3, #1
 8005494:	21dc      	movs	r1, #220	; 0xdc
 8005496:	187a      	adds	r2, r7, r1
 8005498:	6013      	str	r3, [r2, #0]
 800549a:	1d7b      	adds	r3, r7, #5
 800549c:	33ff      	adds	r3, #255	; 0xff
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2201      	movs	r2, #1
 80054a2:	4013      	ands	r3, r2
 80054a4:	d004      	beq.n	80054b0 <USB_EPStartXfer+0x102c>
 80054a6:	187b      	adds	r3, r7, r1
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	3301      	adds	r3, #1
 80054ac:	187a      	adds	r2, r7, r1
 80054ae:	6013      	str	r3, [r2, #0]
 80054b0:	21c8      	movs	r1, #200	; 0xc8
 80054b2:	187b      	adds	r3, r7, r1
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	881b      	ldrh	r3, [r3, #0]
 80054b8:	b29a      	uxth	r2, r3
 80054ba:	23dc      	movs	r3, #220	; 0xdc
 80054bc:	18fb      	adds	r3, r7, r3
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	029b      	lsls	r3, r3, #10
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	4313      	orrs	r3, r2
 80054c8:	b29a      	uxth	r2, r3
 80054ca:	187b      	adds	r3, r7, r1
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	801a      	strh	r2, [r3, #0]
 80054d0:	e024      	b.n	800551c <USB_EPStartXfer+0x1098>
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	785b      	ldrb	r3, [r3, #1]
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d120      	bne.n	800551c <USB_EPStartXfer+0x1098>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	21d4      	movs	r1, #212	; 0xd4
 80054de:	187a      	adds	r2, r7, r1
 80054e0:	6013      	str	r3, [r2, #0]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2250      	movs	r2, #80	; 0x50
 80054e6:	5a9b      	ldrh	r3, [r3, r2]
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	001a      	movs	r2, r3
 80054ec:	187b      	adds	r3, r7, r1
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	189b      	adds	r3, r3, r2
 80054f2:	187a      	adds	r2, r7, r1
 80054f4:	6013      	str	r3, [r2, #0]
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	00da      	lsls	r2, r3, #3
 80054fc:	187b      	adds	r3, r7, r1
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	18d3      	adds	r3, r2, r3
 8005502:	4a4f      	ldr	r2, [pc, #316]	; (8005640 <USB_EPStartXfer+0x11bc>)
 8005504:	4694      	mov	ip, r2
 8005506:	4463      	add	r3, ip
 8005508:	21d0      	movs	r1, #208	; 0xd0
 800550a:	187a      	adds	r2, r7, r1
 800550c:	6013      	str	r3, [r2, #0]
 800550e:	1d7b      	adds	r3, r7, #5
 8005510:	33ff      	adds	r3, #255	; 0xff
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	b29a      	uxth	r2, r3
 8005516:	187b      	adds	r3, r7, r1
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	801a      	strh	r2, [r3, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	22c4      	movs	r2, #196	; 0xc4
 8005520:	18ba      	adds	r2, r7, r2
 8005522:	6013      	str	r3, [r2, #0]
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	785b      	ldrb	r3, [r3, #1]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d000      	beq.n	800552e <USB_EPStartXfer+0x10aa>
 800552c:	e08c      	b.n	8005648 <USB_EPStartXfer+0x11c4>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	21bc      	movs	r1, #188	; 0xbc
 8005532:	187a      	adds	r2, r7, r1
 8005534:	6013      	str	r3, [r2, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2250      	movs	r2, #80	; 0x50
 800553a:	5a9b      	ldrh	r3, [r3, r2]
 800553c:	b29b      	uxth	r3, r3
 800553e:	001a      	movs	r2, r3
 8005540:	187b      	adds	r3, r7, r1
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	189b      	adds	r3, r3, r2
 8005546:	187a      	adds	r2, r7, r1
 8005548:	6013      	str	r3, [r2, #0]
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	00da      	lsls	r2, r3, #3
 8005550:	187b      	adds	r3, r7, r1
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	18d3      	adds	r3, r2, r3
 8005556:	4a37      	ldr	r2, [pc, #220]	; (8005634 <USB_EPStartXfer+0x11b0>)
 8005558:	4694      	mov	ip, r2
 800555a:	4463      	add	r3, ip
 800555c:	21b8      	movs	r1, #184	; 0xb8
 800555e:	187a      	adds	r2, r7, r1
 8005560:	6013      	str	r3, [r2, #0]
 8005562:	187b      	adds	r3, r7, r1
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	881b      	ldrh	r3, [r3, #0]
 8005568:	b29b      	uxth	r3, r3
 800556a:	059b      	lsls	r3, r3, #22
 800556c:	0d9b      	lsrs	r3, r3, #22
 800556e:	b29a      	uxth	r2, r3
 8005570:	187b      	adds	r3, r7, r1
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	801a      	strh	r2, [r3, #0]
 8005576:	1d7b      	adds	r3, r7, #5
 8005578:	33ff      	adds	r3, #255	; 0xff
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2b3e      	cmp	r3, #62	; 0x3e
 800557e:	d925      	bls.n	80055cc <USB_EPStartXfer+0x1148>
 8005580:	1d7b      	adds	r3, r7, #5
 8005582:	33ff      	adds	r3, #255	; 0xff
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	095b      	lsrs	r3, r3, #5
 8005588:	21d8      	movs	r1, #216	; 0xd8
 800558a:	187a      	adds	r2, r7, r1
 800558c:	6013      	str	r3, [r2, #0]
 800558e:	1d7b      	adds	r3, r7, #5
 8005590:	33ff      	adds	r3, #255	; 0xff
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	221f      	movs	r2, #31
 8005596:	4013      	ands	r3, r2
 8005598:	d104      	bne.n	80055a4 <USB_EPStartXfer+0x1120>
 800559a:	187b      	adds	r3, r7, r1
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	3b01      	subs	r3, #1
 80055a0:	187a      	adds	r2, r7, r1
 80055a2:	6013      	str	r3, [r2, #0]
 80055a4:	21b8      	movs	r1, #184	; 0xb8
 80055a6:	187b      	adds	r3, r7, r1
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	881b      	ldrh	r3, [r3, #0]
 80055ac:	b29a      	uxth	r2, r3
 80055ae:	23d8      	movs	r3, #216	; 0xd8
 80055b0:	18fb      	adds	r3, r7, r3
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	029b      	lsls	r3, r3, #10
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	4313      	orrs	r3, r2
 80055bc:	b29b      	uxth	r3, r3
 80055be:	4a21      	ldr	r2, [pc, #132]	; (8005644 <USB_EPStartXfer+0x11c0>)
 80055c0:	4313      	orrs	r3, r2
 80055c2:	b29a      	uxth	r2, r3
 80055c4:	187b      	adds	r3, r7, r1
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	801a      	strh	r2, [r3, #0]
 80055ca:	e062      	b.n	8005692 <USB_EPStartXfer+0x120e>
 80055cc:	1d7b      	adds	r3, r7, #5
 80055ce:	33ff      	adds	r3, #255	; 0xff
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d10b      	bne.n	80055ee <USB_EPStartXfer+0x116a>
 80055d6:	21b8      	movs	r1, #184	; 0xb8
 80055d8:	187b      	adds	r3, r7, r1
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	881b      	ldrh	r3, [r3, #0]
 80055de:	b29b      	uxth	r3, r3
 80055e0:	4a18      	ldr	r2, [pc, #96]	; (8005644 <USB_EPStartXfer+0x11c0>)
 80055e2:	4313      	orrs	r3, r2
 80055e4:	b29a      	uxth	r2, r3
 80055e6:	187b      	adds	r3, r7, r1
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	801a      	strh	r2, [r3, #0]
 80055ec:	e051      	b.n	8005692 <USB_EPStartXfer+0x120e>
 80055ee:	1d7b      	adds	r3, r7, #5
 80055f0:	33ff      	adds	r3, #255	; 0xff
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	085b      	lsrs	r3, r3, #1
 80055f6:	21d8      	movs	r1, #216	; 0xd8
 80055f8:	187a      	adds	r2, r7, r1
 80055fa:	6013      	str	r3, [r2, #0]
 80055fc:	1d7b      	adds	r3, r7, #5
 80055fe:	33ff      	adds	r3, #255	; 0xff
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2201      	movs	r2, #1
 8005604:	4013      	ands	r3, r2
 8005606:	d004      	beq.n	8005612 <USB_EPStartXfer+0x118e>
 8005608:	187b      	adds	r3, r7, r1
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	3301      	adds	r3, #1
 800560e:	187a      	adds	r2, r7, r1
 8005610:	6013      	str	r3, [r2, #0]
 8005612:	21b8      	movs	r1, #184	; 0xb8
 8005614:	187b      	adds	r3, r7, r1
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	881b      	ldrh	r3, [r3, #0]
 800561a:	b29a      	uxth	r2, r3
 800561c:	23d8      	movs	r3, #216	; 0xd8
 800561e:	18fb      	adds	r3, r7, r3
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	b29b      	uxth	r3, r3
 8005624:	029b      	lsls	r3, r3, #10
 8005626:	b29b      	uxth	r3, r3
 8005628:	4313      	orrs	r3, r2
 800562a:	b29a      	uxth	r2, r3
 800562c:	187b      	adds	r3, r7, r1
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	801a      	strh	r2, [r3, #0]
 8005632:	e02e      	b.n	8005692 <USB_EPStartXfer+0x120e>
 8005634:	00000406 	.word	0x00000406
 8005638:	ffff8f8f 	.word	0xffff8f8f
 800563c:	ffff80c0 	.word	0xffff80c0
 8005640:	00000402 	.word	0x00000402
 8005644:	ffff8000 	.word	0xffff8000
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	785b      	ldrb	r3, [r3, #1]
 800564c:	2b01      	cmp	r3, #1
 800564e:	d120      	bne.n	8005692 <USB_EPStartXfer+0x120e>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2250      	movs	r2, #80	; 0x50
 8005654:	5a9b      	ldrh	r3, [r3, r2]
 8005656:	b29b      	uxth	r3, r3
 8005658:	001a      	movs	r2, r3
 800565a:	21c4      	movs	r1, #196	; 0xc4
 800565c:	187b      	adds	r3, r7, r1
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	189b      	adds	r3, r3, r2
 8005662:	187a      	adds	r2, r7, r1
 8005664:	6013      	str	r3, [r2, #0]
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	00da      	lsls	r2, r3, #3
 800566c:	187b      	adds	r3, r7, r1
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	18d3      	adds	r3, r2, r3
 8005672:	4a1d      	ldr	r2, [pc, #116]	; (80056e8 <USB_EPStartXfer+0x1264>)
 8005674:	4694      	mov	ip, r2
 8005676:	4463      	add	r3, ip
 8005678:	21c0      	movs	r1, #192	; 0xc0
 800567a:	187a      	adds	r2, r7, r1
 800567c:	6013      	str	r3, [r2, #0]
 800567e:	1d7b      	adds	r3, r7, #5
 8005680:	33ff      	adds	r3, #255	; 0xff
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	b29a      	uxth	r2, r3
 8005686:	187b      	adds	r3, r7, r1
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	801a      	strh	r2, [r3, #0]
 800568c:	e001      	b.n	8005692 <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e025      	b.n	80056de <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	18d3      	adds	r3, r2, r3
 800569c:	881b      	ldrh	r3, [r3, #0]
 800569e:	b29a      	uxth	r2, r3
 80056a0:	208a      	movs	r0, #138	; 0x8a
 80056a2:	183b      	adds	r3, r7, r0
 80056a4:	4911      	ldr	r1, [pc, #68]	; (80056ec <USB_EPStartXfer+0x1268>)
 80056a6:	400a      	ands	r2, r1
 80056a8:	801a      	strh	r2, [r3, #0]
 80056aa:	183b      	adds	r3, r7, r0
 80056ac:	183a      	adds	r2, r7, r0
 80056ae:	8812      	ldrh	r2, [r2, #0]
 80056b0:	2180      	movs	r1, #128	; 0x80
 80056b2:	0149      	lsls	r1, r1, #5
 80056b4:	404a      	eors	r2, r1
 80056b6:	801a      	strh	r2, [r3, #0]
 80056b8:	183b      	adds	r3, r7, r0
 80056ba:	183a      	adds	r2, r7, r0
 80056bc:	8812      	ldrh	r2, [r2, #0]
 80056be:	2180      	movs	r1, #128	; 0x80
 80056c0:	0189      	lsls	r1, r1, #6
 80056c2:	404a      	eors	r2, r1
 80056c4:	801a      	strh	r2, [r3, #0]
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	18d3      	adds	r3, r2, r3
 80056d0:	183a      	adds	r2, r7, r0
 80056d2:	8812      	ldrh	r2, [r2, #0]
 80056d4:	4906      	ldr	r1, [pc, #24]	; (80056f0 <USB_EPStartXfer+0x126c>)
 80056d6:	430a      	orrs	r2, r1
 80056d8:	b292      	uxth	r2, r2
 80056da:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80056dc:	2300      	movs	r3, #0
}
 80056de:	0018      	movs	r0, r3
 80056e0:	46bd      	mov	sp, r7
 80056e2:	b043      	add	sp, #268	; 0x10c
 80056e4:	bd90      	pop	{r4, r7, pc}
 80056e6:	46c0      	nop			; (mov r8, r8)
 80056e8:	00000406 	.word	0x00000406
 80056ec:	ffffbf8f 	.word	0xffffbf8f
 80056f0:	ffff8080 	.word	0xffff8080

080056f4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	785b      	ldrb	r3, [r3, #1]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d01d      	beq.n	8005742 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	18d3      	adds	r3, r2, r3
 8005710:	881b      	ldrh	r3, [r3, #0]
 8005712:	b29a      	uxth	r2, r3
 8005714:	200c      	movs	r0, #12
 8005716:	183b      	adds	r3, r7, r0
 8005718:	491b      	ldr	r1, [pc, #108]	; (8005788 <USB_EPSetStall+0x94>)
 800571a:	400a      	ands	r2, r1
 800571c:	801a      	strh	r2, [r3, #0]
 800571e:	183b      	adds	r3, r7, r0
 8005720:	183a      	adds	r2, r7, r0
 8005722:	8812      	ldrh	r2, [r2, #0]
 8005724:	2110      	movs	r1, #16
 8005726:	404a      	eors	r2, r1
 8005728:	801a      	strh	r2, [r3, #0]
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	18d3      	adds	r3, r2, r3
 8005734:	183a      	adds	r2, r7, r0
 8005736:	8812      	ldrh	r2, [r2, #0]
 8005738:	4914      	ldr	r1, [pc, #80]	; (800578c <USB_EPSetStall+0x98>)
 800573a:	430a      	orrs	r2, r1
 800573c:	b292      	uxth	r2, r2
 800573e:	801a      	strh	r2, [r3, #0]
 8005740:	e01d      	b.n	800577e <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	18d3      	adds	r3, r2, r3
 800574c:	881b      	ldrh	r3, [r3, #0]
 800574e:	b29a      	uxth	r2, r3
 8005750:	200e      	movs	r0, #14
 8005752:	183b      	adds	r3, r7, r0
 8005754:	490e      	ldr	r1, [pc, #56]	; (8005790 <USB_EPSetStall+0x9c>)
 8005756:	400a      	ands	r2, r1
 8005758:	801a      	strh	r2, [r3, #0]
 800575a:	183b      	adds	r3, r7, r0
 800575c:	183a      	adds	r2, r7, r0
 800575e:	8812      	ldrh	r2, [r2, #0]
 8005760:	2180      	movs	r1, #128	; 0x80
 8005762:	0149      	lsls	r1, r1, #5
 8005764:	404a      	eors	r2, r1
 8005766:	801a      	strh	r2, [r3, #0]
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	18d3      	adds	r3, r2, r3
 8005772:	183a      	adds	r2, r7, r0
 8005774:	8812      	ldrh	r2, [r2, #0]
 8005776:	4905      	ldr	r1, [pc, #20]	; (800578c <USB_EPSetStall+0x98>)
 8005778:	430a      	orrs	r2, r1
 800577a:	b292      	uxth	r2, r2
 800577c:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	0018      	movs	r0, r3
 8005782:	46bd      	mov	sp, r7
 8005784:	b004      	add	sp, #16
 8005786:	bd80      	pop	{r7, pc}
 8005788:	ffff8fbf 	.word	0xffff8fbf
 800578c:	ffff8080 	.word	0xffff8080
 8005790:	ffffbf8f 	.word	0xffffbf8f

08005794 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b086      	sub	sp, #24
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	7b1b      	ldrb	r3, [r3, #12]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d000      	beq.n	80057a8 <USB_EPClearStall+0x14>
 80057a6:	e095      	b.n	80058d4 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	785b      	ldrb	r3, [r3, #1]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d046      	beq.n	800583e <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	18d2      	adds	r2, r2, r3
 80057ba:	2110      	movs	r1, #16
 80057bc:	187b      	adds	r3, r7, r1
 80057be:	8812      	ldrh	r2, [r2, #0]
 80057c0:	801a      	strh	r2, [r3, #0]
 80057c2:	187b      	adds	r3, r7, r1
 80057c4:	881b      	ldrh	r3, [r3, #0]
 80057c6:	2240      	movs	r2, #64	; 0x40
 80057c8:	4013      	ands	r3, r2
 80057ca:	d016      	beq.n	80057fa <USB_EPClearStall+0x66>
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	18d3      	adds	r3, r2, r3
 80057d6:	881b      	ldrh	r3, [r3, #0]
 80057d8:	b29a      	uxth	r2, r3
 80057da:	200e      	movs	r0, #14
 80057dc:	183b      	adds	r3, r7, r0
 80057de:	4940      	ldr	r1, [pc, #256]	; (80058e0 <USB_EPClearStall+0x14c>)
 80057e0:	400a      	ands	r2, r1
 80057e2:	801a      	strh	r2, [r3, #0]
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	18d3      	adds	r3, r2, r3
 80057ee:	183a      	adds	r2, r7, r0
 80057f0:	8812      	ldrh	r2, [r2, #0]
 80057f2:	493c      	ldr	r1, [pc, #240]	; (80058e4 <USB_EPClearStall+0x150>)
 80057f4:	430a      	orrs	r2, r1
 80057f6:	b292      	uxth	r2, r2
 80057f8:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	78db      	ldrb	r3, [r3, #3]
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d068      	beq.n	80058d4 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	18d3      	adds	r3, r2, r3
 800580c:	881b      	ldrh	r3, [r3, #0]
 800580e:	b29a      	uxth	r2, r3
 8005810:	200c      	movs	r0, #12
 8005812:	183b      	adds	r3, r7, r0
 8005814:	4934      	ldr	r1, [pc, #208]	; (80058e8 <USB_EPClearStall+0x154>)
 8005816:	400a      	ands	r2, r1
 8005818:	801a      	strh	r2, [r3, #0]
 800581a:	183b      	adds	r3, r7, r0
 800581c:	183a      	adds	r2, r7, r0
 800581e:	8812      	ldrh	r2, [r2, #0]
 8005820:	2120      	movs	r1, #32
 8005822:	404a      	eors	r2, r1
 8005824:	801a      	strh	r2, [r3, #0]
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	18d3      	adds	r3, r2, r3
 8005830:	183a      	adds	r2, r7, r0
 8005832:	8812      	ldrh	r2, [r2, #0]
 8005834:	492d      	ldr	r1, [pc, #180]	; (80058ec <USB_EPClearStall+0x158>)
 8005836:	430a      	orrs	r2, r1
 8005838:	b292      	uxth	r2, r2
 800583a:	801a      	strh	r2, [r3, #0]
 800583c:	e04a      	b.n	80058d4 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	18d2      	adds	r2, r2, r3
 8005848:	2116      	movs	r1, #22
 800584a:	187b      	adds	r3, r7, r1
 800584c:	8812      	ldrh	r2, [r2, #0]
 800584e:	801a      	strh	r2, [r3, #0]
 8005850:	187b      	adds	r3, r7, r1
 8005852:	881a      	ldrh	r2, [r3, #0]
 8005854:	2380      	movs	r3, #128	; 0x80
 8005856:	01db      	lsls	r3, r3, #7
 8005858:	4013      	ands	r3, r2
 800585a:	d016      	beq.n	800588a <USB_EPClearStall+0xf6>
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	18d3      	adds	r3, r2, r3
 8005866:	881b      	ldrh	r3, [r3, #0]
 8005868:	b29a      	uxth	r2, r3
 800586a:	2014      	movs	r0, #20
 800586c:	183b      	adds	r3, r7, r0
 800586e:	491c      	ldr	r1, [pc, #112]	; (80058e0 <USB_EPClearStall+0x14c>)
 8005870:	400a      	ands	r2, r1
 8005872:	801a      	strh	r2, [r3, #0]
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	18d3      	adds	r3, r2, r3
 800587e:	183a      	adds	r2, r7, r0
 8005880:	8812      	ldrh	r2, [r2, #0]
 8005882:	491b      	ldr	r1, [pc, #108]	; (80058f0 <USB_EPClearStall+0x15c>)
 8005884:	430a      	orrs	r2, r1
 8005886:	b292      	uxth	r2, r2
 8005888:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	18d3      	adds	r3, r2, r3
 8005894:	881b      	ldrh	r3, [r3, #0]
 8005896:	b29a      	uxth	r2, r3
 8005898:	2012      	movs	r0, #18
 800589a:	183b      	adds	r3, r7, r0
 800589c:	4915      	ldr	r1, [pc, #84]	; (80058f4 <USB_EPClearStall+0x160>)
 800589e:	400a      	ands	r2, r1
 80058a0:	801a      	strh	r2, [r3, #0]
 80058a2:	183b      	adds	r3, r7, r0
 80058a4:	183a      	adds	r2, r7, r0
 80058a6:	8812      	ldrh	r2, [r2, #0]
 80058a8:	2180      	movs	r1, #128	; 0x80
 80058aa:	0149      	lsls	r1, r1, #5
 80058ac:	404a      	eors	r2, r1
 80058ae:	801a      	strh	r2, [r3, #0]
 80058b0:	183b      	adds	r3, r7, r0
 80058b2:	183a      	adds	r2, r7, r0
 80058b4:	8812      	ldrh	r2, [r2, #0]
 80058b6:	2180      	movs	r1, #128	; 0x80
 80058b8:	0189      	lsls	r1, r1, #6
 80058ba:	404a      	eors	r2, r1
 80058bc:	801a      	strh	r2, [r3, #0]
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	18d3      	adds	r3, r2, r3
 80058c8:	183a      	adds	r2, r7, r0
 80058ca:	8812      	ldrh	r2, [r2, #0]
 80058cc:	4907      	ldr	r1, [pc, #28]	; (80058ec <USB_EPClearStall+0x158>)
 80058ce:	430a      	orrs	r2, r1
 80058d0:	b292      	uxth	r2, r2
 80058d2:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	0018      	movs	r0, r3
 80058d8:	46bd      	mov	sp, r7
 80058da:	b006      	add	sp, #24
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	46c0      	nop			; (mov r8, r8)
 80058e0:	ffff8f8f 	.word	0xffff8f8f
 80058e4:	ffff80c0 	.word	0xffff80c0
 80058e8:	ffff8fbf 	.word	0xffff8fbf
 80058ec:	ffff8080 	.word	0xffff8080
 80058f0:	ffffc080 	.word	0xffffc080
 80058f4:	ffffbf8f 	.word	0xffffbf8f

080058f8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	000a      	movs	r2, r1
 8005902:	1cfb      	adds	r3, r7, #3
 8005904:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8005906:	1cfb      	adds	r3, r7, #3
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d103      	bne.n	8005916 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	224c      	movs	r2, #76	; 0x4c
 8005912:	2180      	movs	r1, #128	; 0x80
 8005914:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 8005916:	2300      	movs	r3, #0
}
 8005918:	0018      	movs	r0, r3
 800591a:	46bd      	mov	sp, r7
 800591c:	b002      	add	sp, #8
 800591e:	bd80      	pop	{r7, pc}

08005920 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b082      	sub	sp, #8
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2258      	movs	r2, #88	; 0x58
 800592c:	5a9b      	ldrh	r3, [r3, r2]
 800592e:	b29b      	uxth	r3, r3
 8005930:	4a05      	ldr	r2, [pc, #20]	; (8005948 <USB_DevConnect+0x28>)
 8005932:	4313      	orrs	r3, r2
 8005934:	b299      	uxth	r1, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2258      	movs	r2, #88	; 0x58
 800593a:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	0018      	movs	r0, r3
 8005940:	46bd      	mov	sp, r7
 8005942:	b002      	add	sp, #8
 8005944:	bd80      	pop	{r7, pc}
 8005946:	46c0      	nop			; (mov r8, r8)
 8005948:	ffff8000 	.word	0xffff8000

0800594c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2244      	movs	r2, #68	; 0x44
 8005958:	5a9b      	ldrh	r3, [r3, r2]
 800595a:	b29b      	uxth	r3, r3
 800595c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800595e:	68fb      	ldr	r3, [r7, #12]
}
 8005960:	0018      	movs	r0, r3
 8005962:	46bd      	mov	sp, r7
 8005964:	b004      	add	sp, #16
 8005966:	bd80      	pop	{r7, pc}

08005968 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b08a      	sub	sp, #40	; 0x28
 800596c:	af00      	add	r7, sp, #0
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	0019      	movs	r1, r3
 8005974:	1dbb      	adds	r3, r7, #6
 8005976:	801a      	strh	r2, [r3, #0]
 8005978:	1d3b      	adds	r3, r7, #4
 800597a:	1c0a      	adds	r2, r1, #0
 800597c:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800597e:	1d3b      	adds	r3, r7, #4
 8005980:	881b      	ldrh	r3, [r3, #0]
 8005982:	3301      	adds	r3, #1
 8005984:	085b      	lsrs	r3, r3, #1
 8005986:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005990:	1dbb      	adds	r3, r7, #6
 8005992:	881a      	ldrh	r2, [r3, #0]
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	18d3      	adds	r3, r2, r3
 8005998:	2280      	movs	r2, #128	; 0x80
 800599a:	00d2      	lsls	r2, r2, #3
 800599c:	4694      	mov	ip, r2
 800599e:	4463      	add	r3, ip
 80059a0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	627b      	str	r3, [r7, #36]	; 0x24
 80059a6:	e020      	b.n	80059ea <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	781a      	ldrb	r2, [r3, #0]
 80059ac:	2112      	movs	r1, #18
 80059ae:	187b      	adds	r3, r7, r1
 80059b0:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	3301      	adds	r3, #1
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	021b      	lsls	r3, r3, #8
 80059ba:	b21a      	sxth	r2, r3
 80059bc:	187b      	adds	r3, r7, r1
 80059be:	2000      	movs	r0, #0
 80059c0:	5e1b      	ldrsh	r3, [r3, r0]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	b21a      	sxth	r2, r3
 80059c6:	187b      	adds	r3, r7, r1
 80059c8:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 80059ca:	6a3b      	ldr	r3, [r7, #32]
 80059cc:	187a      	adds	r2, r7, r1
 80059ce:	8812      	ldrh	r2, [r2, #0]
 80059d0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80059d2:	6a3b      	ldr	r3, [r7, #32]
 80059d4:	3302      	adds	r3, #2
 80059d6:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	3301      	adds	r3, #1
 80059dc:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	3301      	adds	r3, #1
 80059e2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80059e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e6:	3b01      	subs	r3, #1
 80059e8:	627b      	str	r3, [r7, #36]	; 0x24
 80059ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d1db      	bne.n	80059a8 <USB_WritePMA+0x40>
  }
}
 80059f0:	46c0      	nop			; (mov r8, r8)
 80059f2:	46c0      	nop			; (mov r8, r8)
 80059f4:	46bd      	mov	sp, r7
 80059f6:	b00a      	add	sp, #40	; 0x28
 80059f8:	bd80      	pop	{r7, pc}

080059fa <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80059fa:	b580      	push	{r7, lr}
 80059fc:	b08a      	sub	sp, #40	; 0x28
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	60f8      	str	r0, [r7, #12]
 8005a02:	60b9      	str	r1, [r7, #8]
 8005a04:	0019      	movs	r1, r3
 8005a06:	1dbb      	adds	r3, r7, #6
 8005a08:	801a      	strh	r2, [r3, #0]
 8005a0a:	1d3b      	adds	r3, r7, #4
 8005a0c:	1c0a      	adds	r2, r1, #0
 8005a0e:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005a10:	1d3b      	adds	r3, r7, #4
 8005a12:	881b      	ldrh	r3, [r3, #0]
 8005a14:	085b      	lsrs	r3, r3, #1
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005a22:	1dbb      	adds	r3, r7, #6
 8005a24:	881a      	ldrh	r2, [r3, #0]
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	18d3      	adds	r3, r2, r3
 8005a2a:	2280      	movs	r2, #128	; 0x80
 8005a2c:	00d2      	lsls	r2, r2, #3
 8005a2e:	4694      	mov	ip, r2
 8005a30:	4463      	add	r3, ip
 8005a32:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005a34:	69bb      	ldr	r3, [r7, #24]
 8005a36:	627b      	str	r3, [r7, #36]	; 0x24
 8005a38:	e018      	b.n	8005a6c <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8005a3a:	6a3b      	ldr	r3, [r7, #32]
 8005a3c:	881b      	ldrh	r3, [r3, #0]
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005a42:	6a3b      	ldr	r3, [r7, #32]
 8005a44:	3302      	adds	r3, #2
 8005a46:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	b2da      	uxtb	r2, r3
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	3301      	adds	r3, #1
 8005a54:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	0a1b      	lsrs	r3, r3, #8
 8005a5a:	b2da      	uxtb	r2, r3
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	3301      	adds	r3, #1
 8005a64:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8005a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a68:	3b01      	subs	r3, #1
 8005a6a:	627b      	str	r3, [r7, #36]	; 0x24
 8005a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d1e3      	bne.n	8005a3a <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8005a72:	1d3b      	adds	r3, r7, #4
 8005a74:	881b      	ldrh	r3, [r3, #0]
 8005a76:	2201      	movs	r2, #1
 8005a78:	4013      	ands	r3, r2
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d007      	beq.n	8005a90 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 8005a80:	6a3b      	ldr	r3, [r7, #32]
 8005a82:	881b      	ldrh	r3, [r3, #0]
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	b2da      	uxtb	r2, r3
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	701a      	strb	r2, [r3, #0]
  }
}
 8005a90:	46c0      	nop			; (mov r8, r8)
 8005a92:	46bd      	mov	sp, r7
 8005a94:	b00a      	add	sp, #40	; 0x28
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	000a      	movs	r2, r1
 8005aa2:	1cfb      	adds	r3, r7, #3
 8005aa4:	701a      	strb	r2, [r3, #0]
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	7c1b      	ldrb	r3, [r3, #16]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d116      	bne.n	8005adc <USBD_MSC_Init+0x44>
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8005aae:	2380      	movs	r3, #128	; 0x80
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	2202      	movs	r2, #2
 8005ab6:	2101      	movs	r1, #1
 8005ab8:	f003 f8d1 	bl	8008c5e <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	23b6      	movs	r3, #182	; 0xb6
 8005ac0:	005b      	lsls	r3, r3, #1
 8005ac2:	2101      	movs	r1, #1
 8005ac4:	50d1      	str	r1, [r2, r3]

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8005ac6:	2380      	movs	r3, #128	; 0x80
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	2202      	movs	r2, #2
 8005ace:	2181      	movs	r1, #129	; 0x81
 8005ad0:	f003 f8c5 	bl	8008c5e <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	62da      	str	r2, [r3, #44]	; 0x2c
 8005ada:	e013      	b.n	8005b04 <USBD_MSC_Init+0x6c>
  }
  else
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	2340      	movs	r3, #64	; 0x40
 8005ae0:	2202      	movs	r2, #2
 8005ae2:	2101      	movs	r1, #1
 8005ae4:	f003 f8bb 	bl	8008c5e <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	23b6      	movs	r3, #182	; 0xb6
 8005aec:	005b      	lsls	r3, r3, #1
 8005aee:	2101      	movs	r1, #1
 8005af0:	50d1      	str	r1, [r2, r3]

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	2340      	movs	r3, #64	; 0x40
 8005af6:	2202      	movs	r2, #2
 8005af8:	2181      	movs	r1, #129	; 0x81
 8005afa:	f003 f8b0 	bl	8008c5e <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2201      	movs	r2, #1
 8005b02:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  pdev->pClassData = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8005b04:	4b0c      	ldr	r3, [pc, #48]	; (8005b38 <USBD_MSC_Init+0xa0>)
 8005b06:	0018      	movs	r0, r3
 8005b08:	f003 fa6c 	bl	8008fe4 <USBD_static_malloc>
 8005b0c:	0001      	movs	r1, r0
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	23ae      	movs	r3, #174	; 0xae
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	23ae      	movs	r3, #174	; 0xae
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	58d3      	ldr	r3, [r2, r3]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d101      	bne.n	8005b26 <USBD_MSC_Init+0x8e>
  {
    return USBD_FAIL;
 8005b22:	2302      	movs	r3, #2
 8005b24:	e004      	b.n	8005b30 <USBD_MSC_Init+0x98>
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	0018      	movs	r0, r3
 8005b2a:	f000 fa01 	bl	8005f30 <MSC_BOT_Init>

  return USBD_OK;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	0018      	movs	r0, r3
 8005b32:	46bd      	mov	sp, r7
 8005b34:	b002      	add	sp, #8
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	0000046c 	.word	0x0000046c

08005b3c <USBD_MSC_DeInit>:
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev,
                         uint8_t cfgidx)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b082      	sub	sp, #8
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	000a      	movs	r2, r1
 8005b46:	1cfb      	adds	r3, r7, #3
 8005b48:	701a      	strb	r2, [r3, #0]
  /* Close MSC EPs */
  USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2101      	movs	r1, #1
 8005b4e:	0018      	movs	r0, r3
 8005b50:	f003 f8bc 	bl	8008ccc <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	23b6      	movs	r3, #182	; 0xb6
 8005b58:	005b      	lsls	r3, r3, #1
 8005b5a:	2100      	movs	r1, #0
 8005b5c:	50d1      	str	r1, [r2, r3]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2181      	movs	r1, #129	; 0x81
 8005b62:	0018      	movs	r0, r3
 8005b64:	f003 f8b2 	bl	8008ccc <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	0018      	movs	r0, r3
 8005b72:	f000 fa35 	bl	8005fe0 <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	23ae      	movs	r3, #174	; 0xae
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	58d3      	ldr	r3, [r2, r3]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00b      	beq.n	8005b9a <USBD_MSC_DeInit+0x5e>
  {
    USBD_free(pdev->pClassData);
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	23ae      	movs	r3, #174	; 0xae
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	58d3      	ldr	r3, [r2, r3]
 8005b8a:	0018      	movs	r0, r3
 8005b8c:	f003 fa36 	bl	8008ffc <USBD_static_free>
    pdev->pClassData  = NULL;
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	23ae      	movs	r3, #174	; 0xae
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	2100      	movs	r1, #0
 8005b98:	50d1      	str	r1, [r2, r3]
  }

  return USBD_OK;
 8005b9a:	2300      	movs	r3, #0
}
 8005b9c:	0018      	movs	r0, r3
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	b002      	add	sp, #8
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b086      	sub	sp, #24
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	23ae      	movs	r3, #174	; 0xae
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	58d3      	ldr	r3, [r2, r3]
 8005bb6:	613b      	str	r3, [r7, #16]
  uint8_t ret = USBD_OK;
 8005bb8:	2317      	movs	r3, #23
 8005bba:	18fb      	adds	r3, r7, r3
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8005bc0:	230e      	movs	r3, #14
 8005bc2:	18fb      	adds	r3, r7, r3
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	801a      	strh	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	001a      	movs	r2, r3
 8005bce:	2360      	movs	r3, #96	; 0x60
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	d05b      	beq.n	8005c8c <USBD_MSC_Setup+0xe8>
 8005bd4:	2b20      	cmp	r3, #32
 8005bd6:	d000      	beq.n	8005bda <USBD_MSC_Setup+0x36>
 8005bd8:	e128      	b.n	8005e2c <USBD_MSC_Setup+0x288>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	785b      	ldrb	r3, [r3, #1]
 8005bde:	2bfe      	cmp	r3, #254	; 0xfe
 8005be0:	d002      	beq.n	8005be8 <USBD_MSC_Setup+0x44>
 8005be2:	2bff      	cmp	r3, #255	; 0xff
 8005be4:	d029      	beq.n	8005c3a <USBD_MSC_Setup+0x96>
 8005be6:	e045      	b.n	8005c74 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	885b      	ldrh	r3, [r3, #2]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d119      	bne.n	8005c24 <USBD_MSC_Setup+0x80>
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	88db      	ldrh	r3, [r3, #6]
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d115      	bne.n	8005c24 <USBD_MSC_Setup+0x80>
              ((req->bmRequest & 0x80U) == 0x80U))
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	da10      	bge.n	8005c24 <USBD_MSC_Setup+0x80>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	23af      	movs	r3, #175	; 0xaf
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	58d3      	ldr	r3, [r2, r3]
 8005c0a:	699b      	ldr	r3, [r3, #24]
 8005c0c:	4798      	blx	r3
 8005c0e:	0003      	movs	r3, r0
 8005c10:	001a      	movs	r2, r3
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	601a      	str	r2, [r3, #0]
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->max_lun, 1U);
 8005c16:	6939      	ldr	r1, [r7, #16]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	0018      	movs	r0, r3
 8005c1e:	f002 fbb5 	bl	800838c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005c22:	e032      	b.n	8005c8a <USBD_MSC_Setup+0xe6>
            USBD_CtlError(pdev, req);
 8005c24:	683a      	ldr	r2, [r7, #0]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	0011      	movs	r1, r2
 8005c2a:	0018      	movs	r0, r3
 8005c2c:	f002 fb30 	bl	8008290 <USBD_CtlError>
            ret = USBD_FAIL;
 8005c30:	2317      	movs	r3, #23
 8005c32:	18fb      	adds	r3, r7, r3
 8005c34:	2202      	movs	r2, #2
 8005c36:	701a      	strb	r2, [r3, #0]
          break;
 8005c38:	e027      	b.n	8005c8a <USBD_MSC_Setup+0xe6>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	885b      	ldrh	r3, [r3, #2]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d10d      	bne.n	8005c5e <USBD_MSC_Setup+0xba>
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	88db      	ldrh	r3, [r3, #6]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d109      	bne.n	8005c5e <USBD_MSC_Setup+0xba>
              ((req->bmRequest & 0x80U) != 0x80U))
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	db04      	blt.n	8005c5e <USBD_MSC_Setup+0xba>
          {
            MSC_BOT_Reset(pdev);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	0018      	movs	r0, r3
 8005c58:	f000 f9a4 	bl	8005fa4 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005c5c:	e015      	b.n	8005c8a <USBD_MSC_Setup+0xe6>
            USBD_CtlError(pdev, req);
 8005c5e:	683a      	ldr	r2, [r7, #0]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	0011      	movs	r1, r2
 8005c64:	0018      	movs	r0, r3
 8005c66:	f002 fb13 	bl	8008290 <USBD_CtlError>
            ret = USBD_FAIL;
 8005c6a:	2317      	movs	r3, #23
 8005c6c:	18fb      	adds	r3, r7, r3
 8005c6e:	2202      	movs	r2, #2
 8005c70:	701a      	strb	r2, [r3, #0]
          break;
 8005c72:	e00a      	b.n	8005c8a <USBD_MSC_Setup+0xe6>

        default:
          USBD_CtlError(pdev, req);
 8005c74:	683a      	ldr	r2, [r7, #0]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	0011      	movs	r1, r2
 8005c7a:	0018      	movs	r0, r3
 8005c7c:	f002 fb08 	bl	8008290 <USBD_CtlError>
          ret = USBD_FAIL;
 8005c80:	2317      	movs	r3, #23
 8005c82:	18fb      	adds	r3, r7, r3
 8005c84:	2202      	movs	r2, #2
 8005c86:	701a      	strb	r2, [r3, #0]
          break;
 8005c88:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8005c8a:	e0da      	b.n	8005e42 <USBD_MSC_Setup+0x29e>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	785b      	ldrb	r3, [r3, #1]
 8005c90:	2b0b      	cmp	r3, #11
 8005c92:	d03c      	beq.n	8005d0e <USBD_MSC_Setup+0x16a>
 8005c94:	dd00      	ble.n	8005c98 <USBD_MSC_Setup+0xf4>
 8005c96:	e0bd      	b.n	8005e14 <USBD_MSC_Setup+0x270>
 8005c98:	2b0a      	cmp	r3, #10
 8005c9a:	d01f      	beq.n	8005cdc <USBD_MSC_Setup+0x138>
 8005c9c:	dd00      	ble.n	8005ca0 <USBD_MSC_Setup+0xfc>
 8005c9e:	e0b9      	b.n	8005e14 <USBD_MSC_Setup+0x270>
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d002      	beq.n	8005caa <USBD_MSC_Setup+0x106>
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d04a      	beq.n	8005d3e <USBD_MSC_Setup+0x19a>
 8005ca8:	e0b4      	b.n	8005e14 <USBD_MSC_Setup+0x270>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	23a7      	movs	r3, #167	; 0xa7
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	5cd3      	ldrb	r3, [r2, r3]
 8005cb2:	2b03      	cmp	r3, #3
 8005cb4:	d107      	bne.n	8005cc6 <USBD_MSC_Setup+0x122>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005cb6:	230e      	movs	r3, #14
 8005cb8:	18f9      	adds	r1, r7, r3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2202      	movs	r2, #2
 8005cbe:	0018      	movs	r0, r3
 8005cc0:	f002 fb64 	bl	800838c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005cc4:	e0b1      	b.n	8005e2a <USBD_MSC_Setup+0x286>
            USBD_CtlError(pdev, req);
 8005cc6:	683a      	ldr	r2, [r7, #0]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	0011      	movs	r1, r2
 8005ccc:	0018      	movs	r0, r3
 8005cce:	f002 fadf 	bl	8008290 <USBD_CtlError>
            ret = USBD_FAIL;
 8005cd2:	2317      	movs	r3, #23
 8005cd4:	18fb      	adds	r3, r7, r3
 8005cd6:	2202      	movs	r2, #2
 8005cd8:	701a      	strb	r2, [r3, #0]
          break;
 8005cda:	e0a6      	b.n	8005e2a <USBD_MSC_Setup+0x286>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	23a7      	movs	r3, #167	; 0xa7
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	5cd3      	ldrb	r3, [r2, r3]
 8005ce4:	2b03      	cmp	r3, #3
 8005ce6:	d107      	bne.n	8005cf8 <USBD_MSC_Setup+0x154>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->interface, 1U);
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	1d19      	adds	r1, r3, #4
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	0018      	movs	r0, r3
 8005cf2:	f002 fb4b 	bl	800838c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005cf6:	e098      	b.n	8005e2a <USBD_MSC_Setup+0x286>
            USBD_CtlError(pdev, req);
 8005cf8:	683a      	ldr	r2, [r7, #0]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	0011      	movs	r1, r2
 8005cfe:	0018      	movs	r0, r3
 8005d00:	f002 fac6 	bl	8008290 <USBD_CtlError>
            ret = USBD_FAIL;
 8005d04:	2317      	movs	r3, #23
 8005d06:	18fb      	adds	r3, r7, r3
 8005d08:	2202      	movs	r2, #2
 8005d0a:	701a      	strb	r2, [r3, #0]
          break;
 8005d0c:	e08d      	b.n	8005e2a <USBD_MSC_Setup+0x286>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	23a7      	movs	r3, #167	; 0xa7
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	5cd3      	ldrb	r3, [r2, r3]
 8005d16:	2b03      	cmp	r3, #3
 8005d18:	d106      	bne.n	8005d28 <USBD_MSC_Setup+0x184>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	885b      	ldrh	r3, [r3, #2]
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	001a      	movs	r2, r3
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005d26:	e080      	b.n	8005e2a <USBD_MSC_Setup+0x286>
            USBD_CtlError(pdev, req);
 8005d28:	683a      	ldr	r2, [r7, #0]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	0011      	movs	r1, r2
 8005d2e:	0018      	movs	r0, r3
 8005d30:	f002 faae 	bl	8008290 <USBD_CtlError>
            ret = USBD_FAIL;
 8005d34:	2317      	movs	r3, #23
 8005d36:	18fb      	adds	r3, r7, r3
 8005d38:	2202      	movs	r2, #2
 8005d3a:	701a      	strb	r2, [r3, #0]
          break;
 8005d3c:	e075      	b.n	8005e2a <USBD_MSC_Setup+0x286>

        case USB_REQ_CLEAR_FEATURE:

          /* Flush the FIFO and Clear the stall status */
          USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	889b      	ldrh	r3, [r3, #4]
 8005d42:	b2da      	uxtb	r2, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	0011      	movs	r1, r2
 8005d48:	0018      	movs	r0, r3
 8005d4a:	f002 ffea 	bl	8008d22 <USBD_LL_FlushEP>

          /* Reactivate the EP */
          USBD_LL_CloseEP(pdev, (uint8_t)req->wIndex);
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	889b      	ldrh	r3, [r3, #4]
 8005d52:	b2da      	uxtb	r2, r3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	0011      	movs	r1, r2
 8005d58:	0018      	movs	r0, r3
 8005d5a:	f002 ffb7 	bl	8008ccc <USBD_LL_CloseEP>
          if ((((uint8_t)req->wIndex) & 0x80U) == 0x80U)
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	889b      	ldrh	r3, [r3, #4]
 8005d62:	b25b      	sxtb	r3, r3
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	da24      	bge.n	8005db2 <USBD_MSC_Setup+0x20e>
          {
            pdev->ep_in[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	889b      	ldrh	r3, [r3, #4]
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	001a      	movs	r2, r3
 8005d70:	230f      	movs	r3, #15
 8005d72:	401a      	ands	r2, r3
 8005d74:	6879      	ldr	r1, [r7, #4]
 8005d76:	0013      	movs	r3, r2
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	189b      	adds	r3, r3, r2
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	18cb      	adds	r3, r1, r3
 8005d80:	3318      	adds	r3, #24
 8005d82:	2200      	movs	r2, #0
 8005d84:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	7c1b      	ldrb	r3, [r3, #16]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d107      	bne.n	8005d9e <USBD_MSC_Setup+0x1fa>
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8005d8e:	2380      	movs	r3, #128	; 0x80
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	2202      	movs	r2, #2
 8005d96:	2181      	movs	r1, #129	; 0x81
 8005d98:	f002 ff61 	bl	8008c5e <USBD_LL_OpenEP>
 8005d9c:	e005      	b.n	8005daa <USBD_MSC_Setup+0x206>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	2340      	movs	r3, #64	; 0x40
 8005da2:	2202      	movs	r2, #2
 8005da4:	2181      	movs	r1, #129	; 0x81
 8005da6:	f002 ff5a 	bl	8008c5e <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2201      	movs	r2, #1
 8005dae:	62da      	str	r2, [r3, #44]	; 0x2c
 8005db0:	e027      	b.n	8005e02 <USBD_MSC_Setup+0x25e>
          }
          else
          {
            pdev->ep_out[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	889b      	ldrh	r3, [r3, #4]
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	001a      	movs	r2, r3
 8005dba:	230f      	movs	r3, #15
 8005dbc:	401a      	ands	r2, r3
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	23ac      	movs	r3, #172	; 0xac
 8005dc2:	0059      	lsls	r1, r3, #1
 8005dc4:	0013      	movs	r3, r2
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	189b      	adds	r3, r3, r2
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	18c3      	adds	r3, r0, r3
 8005dce:	185b      	adds	r3, r3, r1
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	7c1b      	ldrb	r3, [r3, #16]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d107      	bne.n	8005dec <USBD_MSC_Setup+0x248>
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8005ddc:	2380      	movs	r3, #128	; 0x80
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	2202      	movs	r2, #2
 8005de4:	2101      	movs	r1, #1
 8005de6:	f002 ff3a 	bl	8008c5e <USBD_LL_OpenEP>
 8005dea:	e005      	b.n	8005df8 <USBD_MSC_Setup+0x254>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	2340      	movs	r3, #64	; 0x40
 8005df0:	2202      	movs	r2, #2
 8005df2:	2101      	movs	r1, #1
 8005df4:	f002 ff33 	bl	8008c5e <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	23b6      	movs	r3, #182	; 0xb6
 8005dfc:	005b      	lsls	r3, r3, #1
 8005dfe:	2101      	movs	r1, #1
 8005e00:	50d1      	str	r1, [r2, r3]
          }

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	889b      	ldrh	r3, [r3, #4]
 8005e06:	b2da      	uxtb	r2, r3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	0011      	movs	r1, r2
 8005e0c:	0018      	movs	r0, r3
 8005e0e:	f000 faa3 	bl	8006358 <MSC_BOT_CplClrFeature>
          break;
 8005e12:	e00a      	b.n	8005e2a <USBD_MSC_Setup+0x286>

        default:
          USBD_CtlError(pdev, req);
 8005e14:	683a      	ldr	r2, [r7, #0]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	0011      	movs	r1, r2
 8005e1a:	0018      	movs	r0, r3
 8005e1c:	f002 fa38 	bl	8008290 <USBD_CtlError>
          ret = USBD_FAIL;
 8005e20:	2317      	movs	r3, #23
 8005e22:	18fb      	adds	r3, r7, r3
 8005e24:	2202      	movs	r2, #2
 8005e26:	701a      	strb	r2, [r3, #0]
          break;
 8005e28:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8005e2a:	e00a      	b.n	8005e42 <USBD_MSC_Setup+0x29e>

    default:
      USBD_CtlError(pdev, req);
 8005e2c:	683a      	ldr	r2, [r7, #0]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	0011      	movs	r1, r2
 8005e32:	0018      	movs	r0, r3
 8005e34:	f002 fa2c 	bl	8008290 <USBD_CtlError>
      ret = USBD_FAIL;
 8005e38:	2317      	movs	r3, #23
 8005e3a:	18fb      	adds	r3, r7, r3
 8005e3c:	2202      	movs	r2, #2
 8005e3e:	701a      	strb	r2, [r3, #0]
      break;
 8005e40:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8005e42:	2317      	movs	r3, #23
 8005e44:	18fb      	adds	r3, r7, r3
 8005e46:	781b      	ldrb	r3, [r3, #0]
}
 8005e48:	0018      	movs	r0, r3
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	b006      	add	sp, #24
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b082      	sub	sp, #8
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	000a      	movs	r2, r1
 8005e5a:	1cfb      	adds	r3, r7, #3
 8005e5c:	701a      	strb	r2, [r3, #0]
  MSC_BOT_DataIn(pdev, epnum);
 8005e5e:	1cfb      	adds	r3, r7, #3
 8005e60:	781a      	ldrb	r2, [r3, #0]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	0011      	movs	r1, r2
 8005e66:	0018      	movs	r0, r3
 8005e68:	f000 f8ca 	bl	8006000 <MSC_BOT_DataIn>

  return USBD_OK;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	0018      	movs	r0, r3
 8005e70:	46bd      	mov	sp, r7
 8005e72:	b002      	add	sp, #8
 8005e74:	bd80      	pop	{r7, pc}

08005e76 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b082      	sub	sp, #8
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
 8005e7e:	000a      	movs	r2, r1
 8005e80:	1cfb      	adds	r3, r7, #3
 8005e82:	701a      	strb	r2, [r3, #0]
  MSC_BOT_DataOut(pdev, epnum);
 8005e84:	1cfb      	adds	r3, r7, #3
 8005e86:	781a      	ldrb	r2, [r3, #0]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	0011      	movs	r1, r2
 8005e8c:	0018      	movs	r0, r3
 8005e8e:	f000 f8ef 	bl	8006070 <MSC_BOT_DataOut>

  return USBD_OK;
 8005e92:	2300      	movs	r3, #0
}
 8005e94:	0018      	movs	r0, r3
 8005e96:	46bd      	mov	sp, r7
 8005e98:	b002      	add	sp, #8
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b082      	sub	sp, #8
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgHSDesc);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2220      	movs	r2, #32
 8005ea8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 8005eaa:	4b02      	ldr	r3, [pc, #8]	; (8005eb4 <USBD_MSC_GetHSCfgDesc+0x18>)
}
 8005eac:	0018      	movs	r0, r3
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	b002      	add	sp, #8
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	20000044 	.word	0x20000044

08005eb8 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b082      	sub	sp, #8
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgFSDesc);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2220      	movs	r2, #32
 8005ec4:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 8005ec6:	4b02      	ldr	r3, [pc, #8]	; (8005ed0 <USBD_MSC_GetFSCfgDesc+0x18>)
}
 8005ec8:	0018      	movs	r0, r3
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	b002      	add	sp, #8
 8005ece:	bd80      	pop	{r7, pc}
 8005ed0:	20000064 	.word	0x20000064

08005ed4 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b082      	sub	sp, #8
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_OtherSpeedCfgDesc);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2220      	movs	r2, #32
 8005ee0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 8005ee2:	4b02      	ldr	r3, [pc, #8]	; (8005eec <USBD_MSC_GetOtherSpeedCfgDesc+0x18>)
}
 8005ee4:	0018      	movs	r0, r3
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	b002      	add	sp, #8
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	20000084 	.word	0x20000084

08005ef0 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b082      	sub	sp, #8
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_DeviceQualifierDesc);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	220a      	movs	r2, #10
 8005efc:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8005efe:	4b02      	ldr	r3, [pc, #8]	; (8005f08 <USBD_MSC_GetDeviceQualifierDescriptor+0x18>)
}
 8005f00:	0018      	movs	r0, r3
 8005f02:	46bd      	mov	sp, r7
 8005f04:	b002      	add	sp, #8
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	200000a4 	.word	0x200000a4

08005f0c <USBD_MSC_RegisterStorage>:
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev,
                                 USBD_StorageTypeDef *fops)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b082      	sub	sp, #8
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
  if (fops != NULL)
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d004      	beq.n	8005f26 <USBD_MSC_RegisterStorage+0x1a>
  {
    pdev->pUserData = fops;
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	23af      	movs	r3, #175	; 0xaf
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	6839      	ldr	r1, [r7, #0]
 8005f24:	50d1      	str	r1, [r2, r3]
  }

  return USBD_OK;
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	0018      	movs	r0, r3
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	b002      	add	sp, #8
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef  *pdev)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	23ae      	movs	r3, #174	; 0xae
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	58d3      	ldr	r3, [r2, r3]
 8005f40:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2200      	movs	r2, #0
 8005f46:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	4a11      	ldr	r2, [pc, #68]	; (8005f98 <MSC_BOT_Init+0x68>)
 8005f52:	2100      	movs	r1, #0
 8005f54:	5499      	strb	r1, [r3, r2]
  hmsc->scsi_sense_head = 0U;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	4a10      	ldr	r2, [pc, #64]	; (8005f9c <MSC_BOT_Init+0x6c>)
 8005f5a:	2100      	movs	r1, #0
 8005f5c:	5499      	strb	r1, [r3, r2]

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	23af      	movs	r3, #175	; 0xaf
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	58d3      	ldr	r3, [r2, r3]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2000      	movs	r0, #0
 8005f6a:	4798      	blx	r3

  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2101      	movs	r1, #1
 8005f70:	0018      	movs	r0, r3
 8005f72:	f002 fed6 	bl	8008d22 <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2181      	movs	r1, #129	; 0x81
 8005f7a:	0018      	movs	r0, r3
 8005f7c:	f002 fed1 	bl	8008d22 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	4a07      	ldr	r2, [pc, #28]	; (8005fa0 <MSC_BOT_Init+0x70>)
 8005f84:	189a      	adds	r2, r3, r2
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	231f      	movs	r3, #31
 8005f8a:	2101      	movs	r1, #1
 8005f8c:	f002 ffdd 	bl	8008f4a <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8005f90:	46c0      	nop			; (mov r8, r8)
 8005f92:	46bd      	mov	sp, r7
 8005f94:	b004      	add	sp, #16
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	0000045d 	.word	0x0000045d
 8005f9c:	0000045c 	.word	0x0000045c
 8005fa0:	0000040c 	.word	0x0000040c

08005fa4 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef  *pdev)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	23ae      	movs	r3, #174	; 0xae
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	58d3      	ldr	r3, [r2, r3]
 8005fb4:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	725a      	strb	r2, [r3, #9]

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	4a05      	ldr	r2, [pc, #20]	; (8005fdc <MSC_BOT_Reset+0x38>)
 8005fc6:	189a      	adds	r2, r3, r2
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	231f      	movs	r3, #31
 8005fcc:	2101      	movs	r1, #1
 8005fce:	f002 ffbc 	bl	8008f4a <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8005fd2:	46c0      	nop			; (mov r8, r8)
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	b004      	add	sp, #16
 8005fd8:	bd80      	pop	{r7, pc}
 8005fda:	46c0      	nop			; (mov r8, r8)
 8005fdc:	0000040c 	.word	0x0000040c

08005fe0 <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	23ae      	movs	r3, #174	; 0xae
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	58d3      	ldr	r3, [r2, r3]
 8005ff0:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	721a      	strb	r2, [r3, #8]
}
 8005ff8:	46c0      	nop			; (mov r8, r8)
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	b004      	add	sp, #16
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <MSC_BOT_DataIn>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef  *pdev,
                    uint8_t epnum)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	000a      	movs	r2, r1
 800600a:	1cfb      	adds	r3, r7, #3
 800600c:	701a      	strb	r2, [r3, #0]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	23ae      	movs	r3, #174	; 0xae
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	58d3      	ldr	r3, [r2, r3]
 8006016:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	7a1b      	ldrb	r3, [r3, #8]
 800601c:	2b02      	cmp	r3, #2
 800601e:	d004      	beq.n	800602a <MSC_BOT_DataIn+0x2a>
 8006020:	db1b      	blt.n	800605a <MSC_BOT_DataIn+0x5a>
 8006022:	3b03      	subs	r3, #3
 8006024:	2b01      	cmp	r3, #1
 8006026:	d818      	bhi.n	800605a <MSC_BOT_DataIn+0x5a>
 8006028:	e011      	b.n	800604e <MSC_BOT_DataIn+0x4e>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	4a0e      	ldr	r2, [pc, #56]	; (8006068 <MSC_BOT_DataIn+0x68>)
 800602e:	5c99      	ldrb	r1, [r3, r2]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	4a0e      	ldr	r2, [pc, #56]	; (800606c <MSC_BOT_DataIn+0x6c>)
 8006034:	189a      	adds	r2, r3, r2
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	0018      	movs	r0, r3
 800603a:	f000 f9b9 	bl	80063b0 <SCSI_ProcessCmd>
 800603e:	1e03      	subs	r3, r0, #0
 8006040:	da0d      	bge.n	800605e <MSC_BOT_DataIn+0x5e>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2101      	movs	r1, #1
 8006046:	0018      	movs	r0, r3
 8006048:	f000 f91c 	bl	8006284 <MSC_BOT_SendCSW>
      }
      break;
 800604c:	e007      	b.n	800605e <MSC_BOT_DataIn+0x5e>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2100      	movs	r1, #0
 8006052:	0018      	movs	r0, r3
 8006054:	f000 f916 	bl	8006284 <MSC_BOT_SendCSW>
      break;
 8006058:	e002      	b.n	8006060 <MSC_BOT_DataIn+0x60>

    default:
      break;
 800605a:	46c0      	nop			; (mov r8, r8)
 800605c:	e000      	b.n	8006060 <MSC_BOT_DataIn+0x60>
      break;
 800605e:	46c0      	nop			; (mov r8, r8)
  }
}
 8006060:	46c0      	nop			; (mov r8, r8)
 8006062:	46bd      	mov	sp, r7
 8006064:	b004      	add	sp, #16
 8006066:	bd80      	pop	{r7, pc}
 8006068:	00000419 	.word	0x00000419
 800606c:	0000041b 	.word	0x0000041b

08006070 <MSC_BOT_DataOut>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef  *pdev,
                     uint8_t epnum)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	000a      	movs	r2, r1
 800607a:	1cfb      	adds	r3, r7, #3
 800607c:	701a      	strb	r2, [r3, #0]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	23ae      	movs	r3, #174	; 0xae
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	58d3      	ldr	r3, [r2, r3]
 8006086:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	7a1b      	ldrb	r3, [r3, #8]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d002      	beq.n	8006096 <MSC_BOT_DataOut+0x26>
 8006090:	2b01      	cmp	r3, #1
 8006092:	d005      	beq.n	80060a0 <MSC_BOT_DataOut+0x30>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8006094:	e016      	b.n	80060c4 <MSC_BOT_DataOut+0x54>
      MSC_BOT_CBW_Decode(pdev);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	0018      	movs	r0, r3
 800609a:	f000 f81b 	bl	80060d4 <MSC_BOT_CBW_Decode>
      break;
 800609e:	e011      	b.n	80060c4 <MSC_BOT_DataOut+0x54>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	4a0a      	ldr	r2, [pc, #40]	; (80060cc <MSC_BOT_DataOut+0x5c>)
 80060a4:	5c99      	ldrb	r1, [r3, r2]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	4a09      	ldr	r2, [pc, #36]	; (80060d0 <MSC_BOT_DataOut+0x60>)
 80060aa:	189a      	adds	r2, r3, r2
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	0018      	movs	r0, r3
 80060b0:	f000 f97e 	bl	80063b0 <SCSI_ProcessCmd>
 80060b4:	1e03      	subs	r3, r0, #0
 80060b6:	da04      	bge.n	80060c2 <MSC_BOT_DataOut+0x52>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2101      	movs	r1, #1
 80060bc:	0018      	movs	r0, r3
 80060be:	f000 f8e1 	bl	8006284 <MSC_BOT_SendCSW>
      break;
 80060c2:	46c0      	nop			; (mov r8, r8)
  }
}
 80060c4:	46c0      	nop			; (mov r8, r8)
 80060c6:	46bd      	mov	sp, r7
 80060c8:	b004      	add	sp, #16
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	00000419 	.word	0x00000419
 80060d0:	0000041b 	.word	0x0000041b

080060d4 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef  *pdev)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	23ae      	movs	r3, #174	; 0xae
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	58d3      	ldr	r3, [r2, r3]
 80060e4:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 80060e6:	68fa      	ldr	r2, [r7, #12]
 80060e8:	2382      	movs	r3, #130	; 0x82
 80060ea:	00db      	lsls	r3, r3, #3
 80060ec:	58d1      	ldr	r1, [r2, r3]
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	2386      	movs	r3, #134	; 0x86
 80060f2:	00db      	lsls	r3, r3, #3
 80060f4:	50d1      	str	r1, [r2, r3]
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	4a3c      	ldr	r2, [pc, #240]	; (80061ec <MSC_BOT_CBW_Decode+0x118>)
 80060fa:	589a      	ldr	r2, [r3, r2]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	493c      	ldr	r1, [pc, #240]	; (80061f0 <MSC_BOT_CBW_Decode+0x11c>)
 8006100:	505a      	str	r2, [r3, r1]

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2101      	movs	r1, #1
 8006106:	0018      	movs	r0, r3
 8006108:	f002 ff56 	bl	8008fb8 <USBD_LL_GetRxDataSize>
 800610c:	0003      	movs	r3, r0
 800610e:	2b1f      	cmp	r3, #31
 8006110:	d114      	bne.n	800613c <MSC_BOT_CBW_Decode+0x68>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	4a37      	ldr	r2, [pc, #220]	; (80061f4 <MSC_BOT_CBW_Decode+0x120>)
 8006116:	589b      	ldr	r3, [r3, r2]
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8006118:	4a37      	ldr	r2, [pc, #220]	; (80061f8 <MSC_BOT_CBW_Decode+0x124>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d10e      	bne.n	800613c <MSC_BOT_CBW_Decode+0x68>
      (hmsc->cbw.bLUN > 1U) ||
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	4a36      	ldr	r2, [pc, #216]	; (80061fc <MSC_BOT_CBW_Decode+0x128>)
 8006122:	5c9b      	ldrb	r3, [r3, r2]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8006124:	2b01      	cmp	r3, #1
 8006126:	d809      	bhi.n	800613c <MSC_BOT_CBW_Decode+0x68>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	4a35      	ldr	r2, [pc, #212]	; (8006200 <MSC_BOT_CBW_Decode+0x12c>)
 800612c:	5c9b      	ldrb	r3, [r3, r2]
      (hmsc->cbw.bLUN > 1U) ||
 800612e:	2b00      	cmp	r3, #0
 8006130:	d004      	beq.n	800613c <MSC_BOT_CBW_Decode+0x68>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	4a32      	ldr	r2, [pc, #200]	; (8006200 <MSC_BOT_CBW_Decode+0x12c>)
 8006136:	5c9b      	ldrb	r3, [r3, r2]
 8006138:	2b10      	cmp	r3, #16
 800613a:	d90f      	bls.n	800615c <MSC_BOT_CBW_Decode+0x88>
  {

    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	4a2f      	ldr	r2, [pc, #188]	; (80061fc <MSC_BOT_CBW_Decode+0x128>)
 8006140:	5c99      	ldrb	r1, [r3, r2]
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	2320      	movs	r3, #32
 8006146:	2205      	movs	r2, #5
 8006148:	f000 fc52 	bl	80069f0 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2202      	movs	r2, #2
 8006150:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	0018      	movs	r0, r3
 8006156:	f000 f8c9 	bl	80062ec <MSC_BOT_Abort>
 800615a:	e044      	b.n	80061e6 <MSC_BOT_CBW_Decode+0x112>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	4a27      	ldr	r2, [pc, #156]	; (80061fc <MSC_BOT_CBW_Decode+0x128>)
 8006160:	5c99      	ldrb	r1, [r3, r2]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	4a27      	ldr	r2, [pc, #156]	; (8006204 <MSC_BOT_CBW_Decode+0x130>)
 8006166:	189a      	adds	r2, r3, r2
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	0018      	movs	r0, r3
 800616c:	f000 f920 	bl	80063b0 <SCSI_ProcessCmd>
 8006170:	1e03      	subs	r3, r0, #0
 8006172:	da0e      	bge.n	8006192 <MSC_BOT_CBW_Decode+0xbe>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	7a1b      	ldrb	r3, [r3, #8]
 8006178:	2b05      	cmp	r3, #5
 800617a:	d105      	bne.n	8006188 <MSC_BOT_CBW_Decode+0xb4>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2101      	movs	r1, #1
 8006180:	0018      	movs	r0, r3
 8006182:	f000 f87f 	bl	8006284 <MSC_BOT_SendCSW>
 8006186:	e02e      	b.n	80061e6 <MSC_BOT_CBW_Decode+0x112>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	0018      	movs	r0, r3
 800618c:	f000 f8ae 	bl	80062ec <MSC_BOT_Abort>
 8006190:	e029      	b.n	80061e6 <MSC_BOT_CBW_Decode+0x112>
      }
    }
    /*Burst xfer handled internally*/
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	7a1b      	ldrb	r3, [r3, #8]
 8006196:	2b02      	cmp	r3, #2
 8006198:	d024      	beq.n	80061e4 <MSC_BOT_CBW_Decode+0x110>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d020      	beq.n	80061e4 <MSC_BOT_CBW_Decode+0x110>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80061a6:	2b03      	cmp	r3, #3
 80061a8:	d01c      	beq.n	80061e4 <MSC_BOT_CBW_Decode+0x110>
    {
      if (hmsc->bot_data_length > 0U)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	895b      	ldrh	r3, [r3, #10]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d009      	beq.n	80061c6 <MSC_BOT_CBW_Decode+0xf2>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	330c      	adds	r3, #12
 80061b6:	0019      	movs	r1, r3
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	895a      	ldrh	r2, [r3, #10]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	0018      	movs	r0, r3
 80061c0:	f000 f822 	bl	8006208 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 80061c4:	e00f      	b.n	80061e6 <MSC_BOT_CBW_Decode+0x112>
      }
      else if (hmsc->bot_data_length == 0U)
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	895b      	ldrh	r3, [r3, #10]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d105      	bne.n	80061da <MSC_BOT_CBW_Decode+0x106>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2100      	movs	r1, #0
 80061d2:	0018      	movs	r0, r3
 80061d4:	f000 f856 	bl	8006284 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 80061d8:	e005      	b.n	80061e6 <MSC_BOT_CBW_Decode+0x112>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	0018      	movs	r0, r3
 80061de:	f000 f885 	bl	80062ec <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 80061e2:	e000      	b.n	80061e6 <MSC_BOT_CBW_Decode+0x112>
      }
    }
    else
    {
      return;
 80061e4:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 80061e6:	46bd      	mov	sp, r7
 80061e8:	b004      	add	sp, #16
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	00000414 	.word	0x00000414
 80061f0:	00000434 	.word	0x00000434
 80061f4:	0000040c 	.word	0x0000040c
 80061f8:	43425355 	.word	0x43425355
 80061fc:	00000419 	.word	0x00000419
 8006200:	0000041a 	.word	0x0000041a
 8006204:	0000041b 	.word	0x0000041b

08006208 <MSC_BOT_SendData>:
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                              uint16_t len)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b086      	sub	sp, #24
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	1dbb      	adds	r3, r7, #6
 8006214:	801a      	strh	r2, [r3, #0]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006216:	68fa      	ldr	r2, [r7, #12]
 8006218:	23ae      	movs	r3, #174	; 0xae
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	58d3      	ldr	r3, [r2, r3]
 800621e:	617b      	str	r3, [r7, #20]

  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	4a16      	ldr	r2, [pc, #88]	; (800627c <MSC_BOT_SendData+0x74>)
 8006224:	589a      	ldr	r2, [r3, r2]
 8006226:	1dbb      	adds	r3, r7, #6
 8006228:	881b      	ldrh	r3, [r3, #0]
 800622a:	429a      	cmp	r2, r3
 800622c:	d204      	bcs.n	8006238 <MSC_BOT_SendData+0x30>
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	4a12      	ldr	r2, [pc, #72]	; (800627c <MSC_BOT_SendData+0x74>)
 8006232:	589b      	ldr	r3, [r3, r2]
 8006234:	b29b      	uxth	r3, r3
 8006236:	e001      	b.n	800623c <MSC_BOT_SendData+0x34>
 8006238:	1dbb      	adds	r3, r7, #6
 800623a:	881b      	ldrh	r3, [r3, #0]
 800623c:	2012      	movs	r0, #18
 800623e:	183a      	adds	r2, r7, r0
 8006240:	8013      	strh	r3, [r2, #0]

  hmsc->csw.dDataResidue -= len;
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	4a0e      	ldr	r2, [pc, #56]	; (8006280 <MSC_BOT_SendData+0x78>)
 8006246:	589a      	ldr	r2, [r3, r2]
 8006248:	1dbb      	adds	r3, r7, #6
 800624a:	881b      	ldrh	r3, [r3, #0]
 800624c:	1ad2      	subs	r2, r2, r3
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	490b      	ldr	r1, [pc, #44]	; (8006280 <MSC_BOT_SendData+0x78>)
 8006252:	505a      	str	r2, [r3, r1]
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8006254:	697a      	ldr	r2, [r7, #20]
 8006256:	2387      	movs	r3, #135	; 0x87
 8006258:	00db      	lsls	r3, r3, #3
 800625a:	2100      	movs	r1, #0
 800625c:	54d1      	strb	r1, [r2, r3]
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	2204      	movs	r2, #4
 8006262:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8006264:	183b      	adds	r3, r7, r0
 8006266:	881b      	ldrh	r3, [r3, #0]
 8006268:	68ba      	ldr	r2, [r7, #8]
 800626a:	68f8      	ldr	r0, [r7, #12]
 800626c:	2181      	movs	r1, #129	; 0x81
 800626e:	f002 fe35 	bl	8008edc <USBD_LL_Transmit>
}
 8006272:	46c0      	nop			; (mov r8, r8)
 8006274:	46bd      	mov	sp, r7
 8006276:	b006      	add	sp, #24
 8006278:	bd80      	pop	{r7, pc}
 800627a:	46c0      	nop			; (mov r8, r8)
 800627c:	00000414 	.word	0x00000414
 8006280:	00000434 	.word	0x00000434

08006284 <MSC_BOT_SendCSW>:
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef  *pdev,
                      uint8_t CSW_Status)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b084      	sub	sp, #16
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	000a      	movs	r2, r1
 800628e:	1cfb      	adds	r3, r7, #3
 8006290:	701a      	strb	r2, [r3, #0]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	23ae      	movs	r3, #174	; 0xae
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	58d3      	ldr	r3, [r2, r3]
 800629a:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	4a10      	ldr	r2, [pc, #64]	; (80062e0 <MSC_BOT_SendCSW+0x5c>)
 80062a0:	4910      	ldr	r1, [pc, #64]	; (80062e4 <MSC_BOT_SendCSW+0x60>)
 80062a2:	5099      	str	r1, [r3, r2]
  hmsc->csw.bStatus = CSW_Status;
 80062a4:	68fa      	ldr	r2, [r7, #12]
 80062a6:	1cf9      	adds	r1, r7, #3
 80062a8:	2387      	movs	r3, #135	; 0x87
 80062aa:	00db      	lsls	r3, r3, #3
 80062ac:	7809      	ldrb	r1, [r1, #0]
 80062ae:	54d1      	strb	r1, [r2, r3]
  hmsc->bot_state = USBD_BOT_IDLE;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2200      	movs	r2, #0
 80062b4:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)(void *)&hmsc->csw,
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	4a09      	ldr	r2, [pc, #36]	; (80062e0 <MSC_BOT_SendCSW+0x5c>)
 80062ba:	189a      	adds	r2, r3, r2
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	230d      	movs	r3, #13
 80062c0:	2181      	movs	r1, #129	; 0x81
 80062c2:	f002 fe0b 	bl	8008edc <USBD_LL_Transmit>
                   USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	4a07      	ldr	r2, [pc, #28]	; (80062e8 <MSC_BOT_SendCSW+0x64>)
 80062ca:	189a      	adds	r2, r3, r2
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	231f      	movs	r3, #31
 80062d0:	2101      	movs	r1, #1
 80062d2:	f002 fe3a 	bl	8008f4a <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 80062d6:	46c0      	nop			; (mov r8, r8)
 80062d8:	46bd      	mov	sp, r7
 80062da:	b004      	add	sp, #16
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	46c0      	nop			; (mov r8, r8)
 80062e0:	0000042c 	.word	0x0000042c
 80062e4:	53425355 	.word	0x53425355
 80062e8:	0000040c 	.word	0x0000040c

080062ec <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef  *pdev)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	23ae      	movs	r3, #174	; 0xae
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	58d3      	ldr	r3, [r2, r3]
 80062fc:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 80062fe:	68fa      	ldr	r2, [r7, #12]
 8006300:	2383      	movs	r3, #131	; 0x83
 8006302:	00db      	lsls	r3, r3, #3
 8006304:	5cd3      	ldrb	r3, [r2, r3]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d10d      	bne.n	8006326 <MSC_BOT_Abort+0x3a>
      (hmsc->cbw.dDataLength != 0U) &&
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	4a10      	ldr	r2, [pc, #64]	; (8006350 <MSC_BOT_Abort+0x64>)
 800630e:	589b      	ldr	r3, [r3, r2]
  if ((hmsc->cbw.bmFlags == 0U) &&
 8006310:	2b00      	cmp	r3, #0
 8006312:	d008      	beq.n	8006326 <MSC_BOT_Abort+0x3a>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8006318:	2b00      	cmp	r3, #0
 800631a:	d104      	bne.n	8006326 <MSC_BOT_Abort+0x3a>
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2101      	movs	r1, #1
 8006320:	0018      	movs	r0, r3
 8006322:	f002 fd29 	bl	8008d78 <USBD_LL_StallEP>
  }

  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2181      	movs	r1, #129	; 0x81
 800632a:	0018      	movs	r0, r3
 800632c:	f002 fd24 	bl	8008d78 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	7a5b      	ldrb	r3, [r3, #9]
 8006334:	2b02      	cmp	r3, #2
 8006336:	d107      	bne.n	8006348 <MSC_BOT_Abort+0x5c>
  {
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	4a06      	ldr	r2, [pc, #24]	; (8006354 <MSC_BOT_Abort+0x68>)
 800633c:	189a      	adds	r2, r3, r2
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	231f      	movs	r3, #31
 8006342:	2101      	movs	r1, #1
 8006344:	f002 fe01 	bl	8008f4a <USBD_LL_PrepareReceive>
                           USBD_BOT_CBW_LENGTH);
  }
}
 8006348:	46c0      	nop			; (mov r8, r8)
 800634a:	46bd      	mov	sp, r7
 800634c:	b004      	add	sp, #16
 800634e:	bd80      	pop	{r7, pc}
 8006350:	00000414 	.word	0x00000414
 8006354:	0000040c 	.word	0x0000040c

08006358 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	000a      	movs	r2, r1
 8006362:	1cfb      	adds	r3, r7, #3
 8006364:	701a      	strb	r2, [r3, #0]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	23ae      	movs	r3, #174	; 0xae
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	58d3      	ldr	r3, [r2, r3]
 800636e:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	7a5b      	ldrb	r3, [r3, #9]
 8006374:	2b02      	cmp	r3, #2
 8006376:	d108      	bne.n	800638a <MSC_BOT_CplClrFeature+0x32>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2181      	movs	r1, #129	; 0x81
 800637c:	0018      	movs	r0, r3
 800637e:	f002 fcfb 	bl	8008d78 <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2200      	movs	r2, #0
 8006386:	725a      	strb	r2, [r3, #9]
 8006388:	e00f      	b.n	80063aa <MSC_BOT_CplClrFeature+0x52>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800638a:	1cfb      	adds	r3, r7, #3
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	b25b      	sxtb	r3, r3
 8006390:	2b00      	cmp	r3, #0
 8006392:	da09      	bge.n	80063a8 <MSC_BOT_CplClrFeature+0x50>
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	7a5b      	ldrb	r3, [r3, #9]
 8006398:	2b01      	cmp	r3, #1
 800639a:	d005      	beq.n	80063a8 <MSC_BOT_CplClrFeature+0x50>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2101      	movs	r1, #1
 80063a0:	0018      	movs	r0, r3
 80063a2:	f7ff ff6f 	bl	8006284 <MSC_BOT_SendCSW>
 80063a6:	e000      	b.n	80063aa <MSC_BOT_CplClrFeature+0x52>
  }
  else
  {
    return;
 80063a8:	46c0      	nop			; (mov r8, r8)
  }
}
 80063aa:	46bd      	mov	sp, r7
 80063ac:	b004      	add	sp, #16
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	607a      	str	r2, [r7, #4]
 80063ba:	230b      	movs	r3, #11
 80063bc:	18fb      	adds	r3, r7, r3
 80063be:	1c0a      	adds	r2, r1, #0
 80063c0:	701a      	strb	r2, [r3, #0]
  switch (cmd[0])
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	2b5a      	cmp	r3, #90	; 0x5a
 80063c8:	d870      	bhi.n	80064ac <SCSI_ProcessCmd+0xfc>
 80063ca:	009a      	lsls	r2, r3, #2
 80063cc:	4b3f      	ldr	r3, [pc, #252]	; (80064cc <SCSI_ProcessCmd+0x11c>)
 80063ce:	18d3      	adds	r3, r2, r3
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	469f      	mov	pc, r3
  {
    case SCSI_TEST_UNIT_READY:
      SCSI_TestUnitReady(pdev, lun, cmd);
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	230b      	movs	r3, #11
 80063d8:	18fb      	adds	r3, r7, r3
 80063da:	7819      	ldrb	r1, [r3, #0]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	0018      	movs	r0, r3
 80063e0:	f000 f876 	bl	80064d0 <SCSI_TestUnitReady>
      break;
 80063e4:	e06d      	b.n	80064c2 <SCSI_ProcessCmd+0x112>

    case SCSI_REQUEST_SENSE:
      SCSI_RequestSense(pdev, lun, cmd);
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	230b      	movs	r3, #11
 80063ea:	18fb      	adds	r3, r7, r3
 80063ec:	7819      	ldrb	r1, [r3, #0]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	0018      	movs	r0, r3
 80063f2:	f000 fa81 	bl	80068f8 <SCSI_RequestSense>
      break;
 80063f6:	e064      	b.n	80064c2 <SCSI_ProcessCmd+0x112>
    case SCSI_INQUIRY:
      SCSI_Inquiry(pdev, lun, cmd);
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	230b      	movs	r3, #11
 80063fc:	18fb      	adds	r3, r7, r3
 80063fe:	7819      	ldrb	r1, [r3, #0]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	0018      	movs	r0, r3
 8006404:	f000 f8a8 	bl	8006558 <SCSI_Inquiry>
      break;
 8006408:	e05b      	b.n	80064c2 <SCSI_ProcessCmd+0x112>

    case SCSI_START_STOP_UNIT:
      SCSI_StartStopUnit(pdev, lun, cmd);
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	230b      	movs	r3, #11
 800640e:	18fb      	adds	r3, r7, r3
 8006410:	7819      	ldrb	r1, [r3, #0]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	0018      	movs	r0, r3
 8006416:	f000 fb2d 	bl	8006a74 <SCSI_StartStopUnit>
      break;
 800641a:	e052      	b.n	80064c2 <SCSI_ProcessCmd+0x112>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      SCSI_StartStopUnit(pdev, lun, cmd);
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	230b      	movs	r3, #11
 8006420:	18fb      	adds	r3, r7, r3
 8006422:	7819      	ldrb	r1, [r3, #0]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	0018      	movs	r0, r3
 8006428:	f000 fb24 	bl	8006a74 <SCSI_StartStopUnit>
      break;
 800642c:	e049      	b.n	80064c2 <SCSI_ProcessCmd+0x112>

    case SCSI_MODE_SENSE6:
      SCSI_ModeSense6(pdev, lun, cmd);
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	230b      	movs	r3, #11
 8006432:	18fb      	adds	r3, r7, r3
 8006434:	7819      	ldrb	r1, [r3, #0]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	0018      	movs	r0, r3
 800643a:	f000 f9f5 	bl	8006828 <SCSI_ModeSense6>
      break;
 800643e:	e040      	b.n	80064c2 <SCSI_ProcessCmd+0x112>

    case SCSI_MODE_SENSE10:
      SCSI_ModeSense10(pdev, lun, cmd);
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	230b      	movs	r3, #11
 8006444:	18fb      	adds	r3, r7, r3
 8006446:	7819      	ldrb	r1, [r3, #0]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	0018      	movs	r0, r3
 800644c:	f000 fa20 	bl	8006890 <SCSI_ModeSense10>
      break;
 8006450:	e037      	b.n	80064c2 <SCSI_ProcessCmd+0x112>

    case SCSI_READ_FORMAT_CAPACITIES:
      SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	230b      	movs	r3, #11
 8006456:	18fb      	adds	r3, r7, r3
 8006458:	7819      	ldrb	r1, [r3, #0]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	0018      	movs	r0, r3
 800645e:	f000 f96b 	bl	8006738 <SCSI_ReadFormatCapacity>
      break;
 8006462:	e02e      	b.n	80064c2 <SCSI_ProcessCmd+0x112>

    case SCSI_READ_CAPACITY10:
      SCSI_ReadCapacity10(pdev, lun, cmd);
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	230b      	movs	r3, #11
 8006468:	18fb      	adds	r3, r7, r3
 800646a:	7819      	ldrb	r1, [r3, #0]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	0018      	movs	r0, r3
 8006470:	f000 f8ec 	bl	800664c <SCSI_ReadCapacity10>
      break;
 8006474:	e025      	b.n	80064c2 <SCSI_ProcessCmd+0x112>

    case SCSI_READ10:
      SCSI_Read10(pdev, lun, cmd);
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	230b      	movs	r3, #11
 800647a:	18fb      	adds	r3, r7, r3
 800647c:	7819      	ldrb	r1, [r3, #0]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	0018      	movs	r0, r3
 8006482:	f000 fb0d 	bl	8006aa0 <SCSI_Read10>
      break;
 8006486:	e01c      	b.n	80064c2 <SCSI_ProcessCmd+0x112>

    case SCSI_WRITE10:
      SCSI_Write10(pdev, lun, cmd);
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	230b      	movs	r3, #11
 800648c:	18fb      	adds	r3, r7, r3
 800648e:	7819      	ldrb	r1, [r3, #0]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	0018      	movs	r0, r3
 8006494:	f000 fbaa 	bl	8006bec <SCSI_Write10>
      break;
 8006498:	e013      	b.n	80064c2 <SCSI_ProcessCmd+0x112>

    case SCSI_VERIFY10:
      SCSI_Verify10(pdev, lun, cmd);
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	230b      	movs	r3, #11
 800649e:	18fb      	adds	r3, r7, r3
 80064a0:	7819      	ldrb	r1, [r3, #0]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	0018      	movs	r0, r3
 80064a6:	f000 fc6d 	bl	8006d84 <SCSI_Verify10>
      break;
 80064aa:	e00a      	b.n	80064c2 <SCSI_ProcessCmd+0x112>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 80064ac:	230b      	movs	r3, #11
 80064ae:	18fb      	adds	r3, r7, r3
 80064b0:	7819      	ldrb	r1, [r3, #0]
 80064b2:	68f8      	ldr	r0, [r7, #12]
 80064b4:	2320      	movs	r3, #32
 80064b6:	2205      	movs	r2, #5
 80064b8:	f000 fa9a 	bl	80069f0 <SCSI_SenseCode>
      return -1;
 80064bc:	2301      	movs	r3, #1
 80064be:	425b      	negs	r3, r3
 80064c0:	e000      	b.n	80064c4 <SCSI_ProcessCmd+0x114>
  }

  return 0;
 80064c2:	2300      	movs	r3, #0
}
 80064c4:	0018      	movs	r0, r3
 80064c6:	46bd      	mov	sp, r7
 80064c8:	b004      	add	sp, #16
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	08009198 	.word	0x08009198

080064d0 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80064d0:	b590      	push	{r4, r7, lr}
 80064d2:	b087      	sub	sp, #28
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	607a      	str	r2, [r7, #4]
 80064da:	230b      	movs	r3, #11
 80064dc:	18fb      	adds	r3, r7, r3
 80064de:	1c0a      	adds	r2, r1, #0
 80064e0:	701a      	strb	r2, [r3, #0]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80064e2:	68fa      	ldr	r2, [r7, #12]
 80064e4:	23ae      	movs	r3, #174	; 0xae
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	58d3      	ldr	r3, [r2, r3]
 80064ea:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	4a18      	ldr	r2, [pc, #96]	; (8006550 <SCSI_TestUnitReady+0x80>)
 80064f0:	589b      	ldr	r3, [r3, r2]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d00a      	beq.n	800650c <SCSI_TestUnitReady+0x3c>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	4a16      	ldr	r2, [pc, #88]	; (8006554 <SCSI_TestUnitReady+0x84>)
 80064fa:	5c99      	ldrb	r1, [r3, r2]
 80064fc:	68f8      	ldr	r0, [r7, #12]
 80064fe:	2320      	movs	r3, #32
 8006500:	2205      	movs	r2, #5
 8006502:	f000 fa75 	bl	80069f0 <SCSI_SenseCode>

    return -1;
 8006506:	2301      	movs	r3, #1
 8006508:	425b      	negs	r3, r3
 800650a:	e01c      	b.n	8006546 <SCSI_TestUnitReady+0x76>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	23af      	movs	r3, #175	; 0xaf
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	58d3      	ldr	r3, [r2, r3]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	240b      	movs	r4, #11
 8006518:	193a      	adds	r2, r7, r4
 800651a:	7812      	ldrb	r2, [r2, #0]
 800651c:	0010      	movs	r0, r2
 800651e:	4798      	blx	r3
 8006520:	1e03      	subs	r3, r0, #0
 8006522:	d00c      	beq.n	800653e <SCSI_TestUnitReady+0x6e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006524:	193b      	adds	r3, r7, r4
 8006526:	7819      	ldrb	r1, [r3, #0]
 8006528:	68f8      	ldr	r0, [r7, #12]
 800652a:	233a      	movs	r3, #58	; 0x3a
 800652c:	2202      	movs	r2, #2
 800652e:	f000 fa5f 	bl	80069f0 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	2205      	movs	r2, #5
 8006536:	721a      	strb	r2, [r3, #8]

    return -1;
 8006538:	2301      	movs	r3, #1
 800653a:	425b      	negs	r3, r3
 800653c:	e003      	b.n	8006546 <SCSI_TestUnitReady+0x76>
  }
  hmsc->bot_data_length = 0U;
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	2200      	movs	r2, #0
 8006542:	815a      	strh	r2, [r3, #10]

  return 0;
 8006544:	2300      	movs	r3, #0
}
 8006546:	0018      	movs	r0, r3
 8006548:	46bd      	mov	sp, r7
 800654a:	b007      	add	sp, #28
 800654c:	bd90      	pop	{r4, r7, pc}
 800654e:	46c0      	nop			; (mov r8, r8)
 8006550:	00000414 	.word	0x00000414
 8006554:	00000419 	.word	0x00000419

08006558 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t  SCSI_Inquiry(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b088      	sub	sp, #32
 800655c:	af00      	add	r7, sp, #0
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	607a      	str	r2, [r7, #4]
 8006562:	230b      	movs	r3, #11
 8006564:	18fb      	adds	r3, r7, r3
 8006566:	1c0a      	adds	r2, r1, #0
 8006568:	701a      	strb	r2, [r3, #0]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	23ae      	movs	r3, #174	; 0xae
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	58d3      	ldr	r3, [r2, r3]
 8006572:	61bb      	str	r3, [r7, #24]

  if (params[1] & 0x01U)/*Evpd is set*/
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	3301      	adds	r3, #1
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	001a      	movs	r2, r3
 800657c:	2301      	movs	r3, #1
 800657e:	4013      	ands	r3, r2
 8006580:	d01e      	beq.n	80065c0 <SCSI_Inquiry+0x68>
  {
    len = LENGTH_INQUIRY_PAGE00;
 8006582:	211e      	movs	r1, #30
 8006584:	187b      	adds	r3, r7, r1
 8006586:	2207      	movs	r2, #7
 8006588:	801a      	strh	r2, [r3, #0]
    hmsc->bot_data_length = len;
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	187a      	adds	r2, r7, r1
 800658e:	8812      	ldrh	r2, [r2, #0]
 8006590:	815a      	strh	r2, [r3, #10]

    while (len)
 8006592:	e00f      	b.n	80065b4 <SCSI_Inquiry+0x5c>
    {
      len--;
 8006594:	211e      	movs	r1, #30
 8006596:	187b      	adds	r3, r7, r1
 8006598:	881a      	ldrh	r2, [r3, #0]
 800659a:	187b      	adds	r3, r7, r1
 800659c:	3a01      	subs	r2, #1
 800659e:	801a      	strh	r2, [r3, #0]
      hmsc->bot_data[len] = MSC_Page00_Inquiry_Data[len];
 80065a0:	187b      	adds	r3, r7, r1
 80065a2:	881a      	ldrh	r2, [r3, #0]
 80065a4:	187b      	adds	r3, r7, r1
 80065a6:	881b      	ldrh	r3, [r3, #0]
 80065a8:	4927      	ldr	r1, [pc, #156]	; (8006648 <SCSI_Inquiry+0xf0>)
 80065aa:	5c89      	ldrb	r1, [r1, r2]
 80065ac:	69ba      	ldr	r2, [r7, #24]
 80065ae:	18d3      	adds	r3, r2, r3
 80065b0:	1c0a      	adds	r2, r1, #0
 80065b2:	731a      	strb	r2, [r3, #12]
    while (len)
 80065b4:	231e      	movs	r3, #30
 80065b6:	18fb      	adds	r3, r7, r3
 80065b8:	881b      	ldrh	r3, [r3, #0]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d1ea      	bne.n	8006594 <SCSI_Inquiry+0x3c>
 80065be:	e03e      	b.n	800663e <SCSI_Inquiry+0xe6>
    }
  }
  else
  {
    pPage = (uint8_t *)(void *) & ((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 80065c0:	68fa      	ldr	r2, [r7, #12]
 80065c2:	23af      	movs	r3, #175	; 0xaf
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	58d3      	ldr	r3, [r2, r3]
 80065c8:	69d9      	ldr	r1, [r3, #28]
 80065ca:	230b      	movs	r3, #11
 80065cc:	18fb      	adds	r3, r7, r3
 80065ce:	781a      	ldrb	r2, [r3, #0]
 80065d0:	0013      	movs	r3, r2
 80065d2:	00db      	lsls	r3, r3, #3
 80065d4:	189b      	adds	r3, r3, r2
 80065d6:	009b      	lsls	r3, r3, #2
 80065d8:	18cb      	adds	r3, r1, r3
 80065da:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	3304      	adds	r3, #4
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	b29a      	uxth	r2, r3
 80065e4:	211e      	movs	r1, #30
 80065e6:	187b      	adds	r3, r7, r1
 80065e8:	3205      	adds	r2, #5
 80065ea:	801a      	strh	r2, [r3, #0]

    if (params[4] <= len)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	3304      	adds	r3, #4
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	187a      	adds	r2, r7, r1
 80065f6:	8812      	ldrh	r2, [r2, #0]
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d304      	bcc.n	8006606 <SCSI_Inquiry+0xae>
    {
      len = params[4];
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	3304      	adds	r3, #4
 8006600:	781a      	ldrb	r2, [r3, #0]
 8006602:	187b      	adds	r3, r7, r1
 8006604:	801a      	strh	r2, [r3, #0]
    }
    hmsc->bot_data_length = len;
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	221e      	movs	r2, #30
 800660a:	18ba      	adds	r2, r7, r2
 800660c:	8812      	ldrh	r2, [r2, #0]
 800660e:	815a      	strh	r2, [r3, #10]

    while (len)
 8006610:	e010      	b.n	8006634 <SCSI_Inquiry+0xdc>
    {
      len--;
 8006612:	211e      	movs	r1, #30
 8006614:	187b      	adds	r3, r7, r1
 8006616:	881a      	ldrh	r2, [r3, #0]
 8006618:	187b      	adds	r3, r7, r1
 800661a:	3a01      	subs	r2, #1
 800661c:	801a      	strh	r2, [r3, #0]
      hmsc->bot_data[len] = pPage[len];
 800661e:	187b      	adds	r3, r7, r1
 8006620:	881b      	ldrh	r3, [r3, #0]
 8006622:	697a      	ldr	r2, [r7, #20]
 8006624:	18d2      	adds	r2, r2, r3
 8006626:	187b      	adds	r3, r7, r1
 8006628:	881b      	ldrh	r3, [r3, #0]
 800662a:	7811      	ldrb	r1, [r2, #0]
 800662c:	69ba      	ldr	r2, [r7, #24]
 800662e:	18d3      	adds	r3, r2, r3
 8006630:	1c0a      	adds	r2, r1, #0
 8006632:	731a      	strb	r2, [r3, #12]
    while (len)
 8006634:	231e      	movs	r3, #30
 8006636:	18fb      	adds	r3, r7, r3
 8006638:	881b      	ldrh	r3, [r3, #0]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d1e9      	bne.n	8006612 <SCSI_Inquiry+0xba>
    }
  }

  return 0;
 800663e:	2300      	movs	r3, #0
}
 8006640:	0018      	movs	r0, r3
 8006642:	46bd      	mov	sp, r7
 8006644:	b008      	add	sp, #32
 8006646:	bd80      	pop	{r7, pc}
 8006648:	08009180 	.word	0x08009180

0800664c <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800664c:	b5b0      	push	{r4, r5, r7, lr}
 800664e:	b086      	sub	sp, #24
 8006650:	af00      	add	r7, sp, #0
 8006652:	60f8      	str	r0, [r7, #12]
 8006654:	607a      	str	r2, [r7, #4]
 8006656:	200b      	movs	r0, #11
 8006658:	183b      	adds	r3, r7, r0
 800665a:	1c0a      	adds	r2, r1, #0
 800665c:	701a      	strb	r2, [r3, #0]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800665e:	68fa      	ldr	r2, [r7, #12]
 8006660:	23ae      	movs	r3, #174	; 0xae
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	58d3      	ldr	r3, [r2, r3]
 8006666:	617b      	str	r3, [r7, #20]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 8006668:	68fa      	ldr	r2, [r7, #12]
 800666a:	23af      	movs	r3, #175	; 0xaf
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	58d3      	ldr	r3, [r2, r3]
 8006670:	685c      	ldr	r4, [r3, #4]
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	228c      	movs	r2, #140	; 0x8c
 8006676:	00d2      	lsls	r2, r2, #3
 8006678:	1899      	adds	r1, r3, r2
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	4a2d      	ldr	r2, [pc, #180]	; (8006734 <SCSI_ReadCapacity10+0xe8>)
 800667e:	189a      	adds	r2, r3, r2
 8006680:	0005      	movs	r5, r0
 8006682:	183b      	adds	r3, r7, r0
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	0018      	movs	r0, r3
 8006688:	47a0      	blx	r4
 800668a:	1e03      	subs	r3, r0, #0
 800668c:	d009      	beq.n	80066a2 <SCSI_ReadCapacity10+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800668e:	197b      	adds	r3, r7, r5
 8006690:	7819      	ldrb	r1, [r3, #0]
 8006692:	68f8      	ldr	r0, [r7, #12]
 8006694:	233a      	movs	r3, #58	; 0x3a
 8006696:	2202      	movs	r2, #2
 8006698:	f000 f9aa 	bl	80069f0 <SCSI_SenseCode>
    return -1;
 800669c:	2301      	movs	r3, #1
 800669e:	425b      	negs	r3, r3
 80066a0:	e043      	b.n	800672a <SCSI_ReadCapacity10+0xde>
  }
  else
  {

    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80066a2:	697a      	ldr	r2, [r7, #20]
 80066a4:	238c      	movs	r3, #140	; 0x8c
 80066a6:	00db      	lsls	r3, r3, #3
 80066a8:	58d3      	ldr	r3, [r2, r3]
 80066aa:	3b01      	subs	r3, #1
 80066ac:	0e1b      	lsrs	r3, r3, #24
 80066ae:	b2da      	uxtb	r2, r3
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	731a      	strb	r2, [r3, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80066b4:	697a      	ldr	r2, [r7, #20]
 80066b6:	238c      	movs	r3, #140	; 0x8c
 80066b8:	00db      	lsls	r3, r3, #3
 80066ba:	58d3      	ldr	r3, [r2, r3]
 80066bc:	3b01      	subs	r3, #1
 80066be:	0c1b      	lsrs	r3, r3, #16
 80066c0:	b2da      	uxtb	r2, r3
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	735a      	strb	r2, [r3, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80066c6:	697a      	ldr	r2, [r7, #20]
 80066c8:	238c      	movs	r3, #140	; 0x8c
 80066ca:	00db      	lsls	r3, r3, #3
 80066cc:	58d3      	ldr	r3, [r2, r3]
 80066ce:	3b01      	subs	r3, #1
 80066d0:	0a1b      	lsrs	r3, r3, #8
 80066d2:	b2da      	uxtb	r2, r3
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 80066d8:	697a      	ldr	r2, [r7, #20]
 80066da:	238c      	movs	r3, #140	; 0x8c
 80066dc:	00db      	lsls	r3, r3, #3
 80066de:	58d3      	ldr	r3, [r2, r3]
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	3b01      	subs	r3, #1
 80066e4:	b2da      	uxtb	r2, r3
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	73da      	strb	r2, [r3, #15]

    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	4a11      	ldr	r2, [pc, #68]	; (8006734 <SCSI_ReadCapacity10+0xe8>)
 80066ee:	5a9b      	ldrh	r3, [r3, r2]
 80066f0:	161b      	asrs	r3, r3, #24
 80066f2:	b2da      	uxtb	r2, r3
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	4a0e      	ldr	r2, [pc, #56]	; (8006734 <SCSI_ReadCapacity10+0xe8>)
 80066fc:	5a9b      	ldrh	r3, [r3, r2]
 80066fe:	141b      	asrs	r3, r3, #16
 8006700:	b2da      	uxtb	r2, r3
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	4a0a      	ldr	r2, [pc, #40]	; (8006734 <SCSI_ReadCapacity10+0xe8>)
 800670a:	5a9b      	ldrh	r3, [r3, r2]
 800670c:	0a1b      	lsrs	r3, r3, #8
 800670e:	b29b      	uxth	r3, r3
 8006710:	b2da      	uxtb	r2, r3
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	4a06      	ldr	r2, [pc, #24]	; (8006734 <SCSI_ReadCapacity10+0xe8>)
 800671a:	5a9b      	ldrh	r3, [r3, r2]
 800671c:	b2da      	uxtb	r2, r3
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data_length = 8U;
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	2208      	movs	r2, #8
 8006726:	815a      	strh	r2, [r3, #10]
    return 0;
 8006728:	2300      	movs	r3, #0
  }
}
 800672a:	0018      	movs	r0, r3
 800672c:	46bd      	mov	sp, r7
 800672e:	b006      	add	sp, #24
 8006730:	bdb0      	pop	{r4, r5, r7, pc}
 8006732:	46c0      	nop			; (mov r8, r8)
 8006734:	0000045e 	.word	0x0000045e

08006738 <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8006738:	b5b0      	push	{r4, r5, r7, lr}
 800673a:	b088      	sub	sp, #32
 800673c:	af00      	add	r7, sp, #0
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	607a      	str	r2, [r7, #4]
 8006742:	230b      	movs	r3, #11
 8006744:	18fb      	adds	r3, r7, r3
 8006746:	1c0a      	adds	r2, r1, #0
 8006748:	701a      	strb	r2, [r3, #0]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	23ae      	movs	r3, #174	; 0xae
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	58d3      	ldr	r3, [r2, r3]
 8006752:	61bb      	str	r3, [r7, #24]

  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;

  for (i = 0U; i < 12U ; i++)
 8006754:	231e      	movs	r3, #30
 8006756:	18fb      	adds	r3, r7, r3
 8006758:	2200      	movs	r2, #0
 800675a:	801a      	strh	r2, [r3, #0]
 800675c:	e00b      	b.n	8006776 <SCSI_ReadFormatCapacity+0x3e>
  {
    hmsc->bot_data[i] = 0U;
 800675e:	211e      	movs	r1, #30
 8006760:	187b      	adds	r3, r7, r1
 8006762:	881b      	ldrh	r3, [r3, #0]
 8006764:	69ba      	ldr	r2, [r7, #24]
 8006766:	18d3      	adds	r3, r2, r3
 8006768:	2200      	movs	r2, #0
 800676a:	731a      	strb	r2, [r3, #12]
  for (i = 0U; i < 12U ; i++)
 800676c:	187b      	adds	r3, r7, r1
 800676e:	881a      	ldrh	r2, [r3, #0]
 8006770:	187b      	adds	r3, r7, r1
 8006772:	3201      	adds	r2, #1
 8006774:	801a      	strh	r2, [r3, #0]
 8006776:	231e      	movs	r3, #30
 8006778:	18fb      	adds	r3, r7, r3
 800677a:	881b      	ldrh	r3, [r3, #0]
 800677c:	2b0b      	cmp	r3, #11
 800677e:	d9ee      	bls.n	800675e <SCSI_ReadFormatCapacity+0x26>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0U)
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	23af      	movs	r3, #175	; 0xaf
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	58d3      	ldr	r3, [r2, r3]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	2216      	movs	r2, #22
 800678c:	18bc      	adds	r4, r7, r2
 800678e:	2210      	movs	r2, #16
 8006790:	18b9      	adds	r1, r7, r2
 8006792:	250b      	movs	r5, #11
 8006794:	197a      	adds	r2, r7, r5
 8006796:	7810      	ldrb	r0, [r2, #0]
 8006798:	0022      	movs	r2, r4
 800679a:	4798      	blx	r3
 800679c:	1e03      	subs	r3, r0, #0
 800679e:	d009      	beq.n	80067b4 <SCSI_ReadFormatCapacity+0x7c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80067a0:	197b      	adds	r3, r7, r5
 80067a2:	7819      	ldrb	r1, [r3, #0]
 80067a4:	68f8      	ldr	r0, [r7, #12]
 80067a6:	233a      	movs	r3, #58	; 0x3a
 80067a8:	2202      	movs	r2, #2
 80067aa:	f000 f921 	bl	80069f0 <SCSI_SenseCode>
    return -1;
 80067ae:	2301      	movs	r3, #1
 80067b0:	425b      	negs	r3, r3
 80067b2:	e034      	b.n	800681e <SCSI_ReadFormatCapacity+0xe6>
  }
  else
  {
    hmsc->bot_data[3] = 0x08U;
 80067b4:	69bb      	ldr	r3, [r7, #24]
 80067b6:	2208      	movs	r2, #8
 80067b8:	73da      	strb	r2, [r3, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	3b01      	subs	r3, #1
 80067be:	0e1b      	lsrs	r3, r3, #24
 80067c0:	b2da      	uxtb	r2, r3
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	3b01      	subs	r3, #1
 80067ca:	0c1b      	lsrs	r3, r3, #16
 80067cc:	b2da      	uxtb	r2, r3
 80067ce:	69bb      	ldr	r3, [r7, #24]
 80067d0:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	3b01      	subs	r3, #1
 80067d6:	0a1b      	lsrs	r3, r3, #8
 80067d8:	b2da      	uxtb	r2, r3
 80067da:	69bb      	ldr	r3, [r7, #24]
 80067dc:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	3b01      	subs	r3, #1
 80067e4:	b2da      	uxtb	r2, r3
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data[8] = 0x02U;
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	2202      	movs	r2, #2
 80067ee:	751a      	strb	r2, [r3, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 80067f0:	2116      	movs	r1, #22
 80067f2:	187b      	adds	r3, r7, r1
 80067f4:	881b      	ldrh	r3, [r3, #0]
 80067f6:	141b      	asrs	r3, r3, #16
 80067f8:	b2da      	uxtb	r2, r3
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	755a      	strb	r2, [r3, #21]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 80067fe:	187b      	adds	r3, r7, r1
 8006800:	881b      	ldrh	r3, [r3, #0]
 8006802:	0a1b      	lsrs	r3, r3, #8
 8006804:	b29b      	uxth	r3, r3
 8006806:	b2da      	uxtb	r2, r3
 8006808:	69bb      	ldr	r3, [r7, #24]
 800680a:	759a      	strb	r2, [r3, #22]
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 800680c:	187b      	adds	r3, r7, r1
 800680e:	881b      	ldrh	r3, [r3, #0]
 8006810:	b2da      	uxtb	r2, r3
 8006812:	69bb      	ldr	r3, [r7, #24]
 8006814:	75da      	strb	r2, [r3, #23]

    hmsc->bot_data_length = 12U;
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	220c      	movs	r2, #12
 800681a:	815a      	strh	r2, [r3, #10]
    return 0;
 800681c:	2300      	movs	r3, #0
  }
}
 800681e:	0018      	movs	r0, r3
 8006820:	46bd      	mov	sp, r7
 8006822:	b008      	add	sp, #32
 8006824:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006828 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b086      	sub	sp, #24
 800682c:	af00      	add	r7, sp, #0
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	607a      	str	r2, [r7, #4]
 8006832:	230b      	movs	r3, #11
 8006834:	18fb      	adds	r3, r7, r3
 8006836:	1c0a      	adds	r2, r1, #0
 8006838:	701a      	strb	r2, [r3, #0]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800683a:	68fa      	ldr	r2, [r7, #12]
 800683c:	23ae      	movs	r3, #174	; 0xae
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	58d3      	ldr	r3, [r2, r3]
 8006842:	613b      	str	r3, [r7, #16]
  uint16_t len = 8U;
 8006844:	2116      	movs	r1, #22
 8006846:	187b      	adds	r3, r7, r1
 8006848:	2208      	movs	r2, #8
 800684a:	801a      	strh	r2, [r3, #0]
  hmsc->bot_data_length = len;
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	187a      	adds	r2, r7, r1
 8006850:	8812      	ldrh	r2, [r2, #0]
 8006852:	815a      	strh	r2, [r3, #10]

  while (len)
 8006854:	e00f      	b.n	8006876 <SCSI_ModeSense6+0x4e>
  {
    len--;
 8006856:	2116      	movs	r1, #22
 8006858:	187b      	adds	r3, r7, r1
 800685a:	881a      	ldrh	r2, [r3, #0]
 800685c:	187b      	adds	r3, r7, r1
 800685e:	3a01      	subs	r2, #1
 8006860:	801a      	strh	r2, [r3, #0]
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 8006862:	187b      	adds	r3, r7, r1
 8006864:	881a      	ldrh	r2, [r3, #0]
 8006866:	187b      	adds	r3, r7, r1
 8006868:	881b      	ldrh	r3, [r3, #0]
 800686a:	4908      	ldr	r1, [pc, #32]	; (800688c <SCSI_ModeSense6+0x64>)
 800686c:	5c89      	ldrb	r1, [r1, r2]
 800686e:	693a      	ldr	r2, [r7, #16]
 8006870:	18d3      	adds	r3, r2, r3
 8006872:	1c0a      	adds	r2, r1, #0
 8006874:	731a      	strb	r2, [r3, #12]
  while (len)
 8006876:	2316      	movs	r3, #22
 8006878:	18fb      	adds	r3, r7, r3
 800687a:	881b      	ldrh	r3, [r3, #0]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d1ea      	bne.n	8006856 <SCSI_ModeSense6+0x2e>
  }
  return 0;
 8006880:	2300      	movs	r3, #0
}
 8006882:	0018      	movs	r0, r3
 8006884:	46bd      	mov	sp, r7
 8006886:	b006      	add	sp, #24
 8006888:	bd80      	pop	{r7, pc}
 800688a:	46c0      	nop			; (mov r8, r8)
 800688c:	08009188 	.word	0x08009188

08006890 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b086      	sub	sp, #24
 8006894:	af00      	add	r7, sp, #0
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	607a      	str	r2, [r7, #4]
 800689a:	230b      	movs	r3, #11
 800689c:	18fb      	adds	r3, r7, r3
 800689e:	1c0a      	adds	r2, r1, #0
 80068a0:	701a      	strb	r2, [r3, #0]
  uint16_t len = 8U;
 80068a2:	2116      	movs	r1, #22
 80068a4:	187b      	adds	r3, r7, r1
 80068a6:	2208      	movs	r2, #8
 80068a8:	801a      	strh	r2, [r3, #0]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80068aa:	68fa      	ldr	r2, [r7, #12]
 80068ac:	23ae      	movs	r3, #174	; 0xae
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	58d3      	ldr	r3, [r2, r3]
 80068b2:	613b      	str	r3, [r7, #16]

  hmsc->bot_data_length = len;
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	187a      	adds	r2, r7, r1
 80068b8:	8812      	ldrh	r2, [r2, #0]
 80068ba:	815a      	strh	r2, [r3, #10]

  while (len)
 80068bc:	e00f      	b.n	80068de <SCSI_ModeSense10+0x4e>
  {
    len--;
 80068be:	2116      	movs	r1, #22
 80068c0:	187b      	adds	r3, r7, r1
 80068c2:	881a      	ldrh	r2, [r3, #0]
 80068c4:	187b      	adds	r3, r7, r1
 80068c6:	3a01      	subs	r2, #1
 80068c8:	801a      	strh	r2, [r3, #0]
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 80068ca:	187b      	adds	r3, r7, r1
 80068cc:	881a      	ldrh	r2, [r3, #0]
 80068ce:	187b      	adds	r3, r7, r1
 80068d0:	881b      	ldrh	r3, [r3, #0]
 80068d2:	4908      	ldr	r1, [pc, #32]	; (80068f4 <SCSI_ModeSense10+0x64>)
 80068d4:	5c89      	ldrb	r1, [r1, r2]
 80068d6:	693a      	ldr	r2, [r7, #16]
 80068d8:	18d3      	adds	r3, r2, r3
 80068da:	1c0a      	adds	r2, r1, #0
 80068dc:	731a      	strb	r2, [r3, #12]
  while (len)
 80068de:	2316      	movs	r3, #22
 80068e0:	18fb      	adds	r3, r7, r3
 80068e2:	881b      	ldrh	r3, [r3, #0]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d1ea      	bne.n	80068be <SCSI_ModeSense10+0x2e>
  }

  return 0;
 80068e8:	2300      	movs	r3, #0
}
 80068ea:	0018      	movs	r0, r3
 80068ec:	46bd      	mov	sp, r7
 80068ee:	b006      	add	sp, #24
 80068f0:	bd80      	pop	{r7, pc}
 80068f2:	46c0      	nop			; (mov r8, r8)
 80068f4:	08009190 	.word	0x08009190

080068f8 <SCSI_RequestSense>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_RequestSense(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b086      	sub	sp, #24
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	607a      	str	r2, [r7, #4]
 8006902:	230b      	movs	r3, #11
 8006904:	18fb      	adds	r3, r7, r3
 8006906:	1c0a      	adds	r2, r1, #0
 8006908:	701a      	strb	r2, [r3, #0]
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800690a:	68fa      	ldr	r2, [r7, #12]
 800690c:	23ae      	movs	r3, #174	; 0xae
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	58d3      	ldr	r3, [r2, r3]
 8006912:	613b      	str	r3, [r7, #16]

  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 8006914:	2317      	movs	r3, #23
 8006916:	18fb      	adds	r3, r7, r3
 8006918:	2200      	movs	r2, #0
 800691a:	701a      	strb	r2, [r3, #0]
 800691c:	e00b      	b.n	8006936 <SCSI_RequestSense+0x3e>
  {
    hmsc->bot_data[i] = 0U;
 800691e:	2117      	movs	r1, #23
 8006920:	187b      	adds	r3, r7, r1
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	693a      	ldr	r2, [r7, #16]
 8006926:	18d3      	adds	r3, r2, r3
 8006928:	2200      	movs	r2, #0
 800692a:	731a      	strb	r2, [r3, #12]
  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 800692c:	187b      	adds	r3, r7, r1
 800692e:	781a      	ldrb	r2, [r3, #0]
 8006930:	187b      	adds	r3, r7, r1
 8006932:	3201      	adds	r2, #1
 8006934:	701a      	strb	r2, [r3, #0]
 8006936:	2317      	movs	r3, #23
 8006938:	18fb      	adds	r3, r7, r3
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	2b11      	cmp	r3, #17
 800693e:	d9ee      	bls.n	800691e <SCSI_RequestSense+0x26>
  }

  hmsc->bot_data[0] = 0x70U;
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	2270      	movs	r2, #112	; 0x70
 8006944:	731a      	strb	r2, [r3, #12]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	220c      	movs	r2, #12
 800694a:	74da      	strb	r2, [r3, #19]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	4a26      	ldr	r2, [pc, #152]	; (80069e8 <SCSI_RequestSense+0xf0>)
 8006950:	5c9a      	ldrb	r2, [r3, r2]
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	4925      	ldr	r1, [pc, #148]	; (80069ec <SCSI_RequestSense+0xf4>)
 8006956:	5c5b      	ldrb	r3, [r3, r1]
 8006958:	429a      	cmp	r2, r3
 800695a:	d031      	beq.n	80069c0 <SCSI_RequestSense+0xc8>
  {

    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	4a22      	ldr	r2, [pc, #136]	; (80069e8 <SCSI_RequestSense+0xf0>)
 8006960:	5c9b      	ldrb	r3, [r3, r2]
 8006962:	693a      	ldr	r2, [r7, #16]
 8006964:	3387      	adds	r3, #135	; 0x87
 8006966:	00db      	lsls	r3, r3, #3
 8006968:	18d3      	adds	r3, r2, r3
 800696a:	3304      	adds	r3, #4
 800696c:	781a      	ldrb	r2, [r3, #0]
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	4a1c      	ldr	r2, [pc, #112]	; (80069e8 <SCSI_RequestSense+0xf0>)
 8006976:	5c9b      	ldrb	r3, [r3, r2]
 8006978:	693a      	ldr	r2, [r7, #16]
 800697a:	3387      	adds	r3, #135	; 0x87
 800697c:	00db      	lsls	r3, r3, #3
 800697e:	18d3      	adds	r3, r2, r3
 8006980:	3309      	adds	r3, #9
 8006982:	781a      	ldrb	r2, [r3, #0]
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	761a      	strb	r2, [r3, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	4a17      	ldr	r2, [pc, #92]	; (80069e8 <SCSI_RequestSense+0xf0>)
 800698c:	5c9b      	ldrb	r3, [r3, r2]
 800698e:	693a      	ldr	r2, [r7, #16]
 8006990:	3387      	adds	r3, #135	; 0x87
 8006992:	00db      	lsls	r3, r3, #3
 8006994:	18d3      	adds	r3, r2, r3
 8006996:	3308      	adds	r3, #8
 8006998:	781a      	ldrb	r2, [r3, #0]
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	765a      	strb	r2, [r3, #25]
    hmsc->scsi_sense_head++;
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	4a11      	ldr	r2, [pc, #68]	; (80069e8 <SCSI_RequestSense+0xf0>)
 80069a2:	5c9b      	ldrb	r3, [r3, r2]
 80069a4:	3301      	adds	r3, #1
 80069a6:	b2d9      	uxtb	r1, r3
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	4a0f      	ldr	r2, [pc, #60]	; (80069e8 <SCSI_RequestSense+0xf0>)
 80069ac:	5499      	strb	r1, [r3, r2]

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	4a0d      	ldr	r2, [pc, #52]	; (80069e8 <SCSI_RequestSense+0xf0>)
 80069b2:	5c9b      	ldrb	r3, [r3, r2]
 80069b4:	2b04      	cmp	r3, #4
 80069b6:	d103      	bne.n	80069c0 <SCSI_RequestSense+0xc8>
    {
      hmsc->scsi_sense_head = 0U;
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	4a0b      	ldr	r2, [pc, #44]	; (80069e8 <SCSI_RequestSense+0xf0>)
 80069bc:	2100      	movs	r1, #0
 80069be:	5499      	strb	r1, [r3, r2]
    }
  }
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	2212      	movs	r2, #18
 80069c4:	815a      	strh	r2, [r3, #10]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	3304      	adds	r3, #4
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	2b12      	cmp	r3, #18
 80069ce:	d805      	bhi.n	80069dc <SCSI_RequestSense+0xe4>
  {
    hmsc->bot_data_length = params[4];
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	3304      	adds	r3, #4
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	b29a      	uxth	r2, r3
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	815a      	strh	r2, [r3, #10]
  }
  return 0;
 80069dc:	2300      	movs	r3, #0
}
 80069de:	0018      	movs	r0, r3
 80069e0:	46bd      	mov	sp, r7
 80069e2:	b006      	add	sp, #24
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	46c0      	nop			; (mov r8, r8)
 80069e8:	0000045c 	.word	0x0000045c
 80069ec:	0000045d 	.word	0x0000045d

080069f0 <SCSI_SenseCode>:
* @param  ASC: Additional Sense Key
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 80069f0:	b590      	push	{r4, r7, lr}
 80069f2:	b085      	sub	sp, #20
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	000c      	movs	r4, r1
 80069fa:	0010      	movs	r0, r2
 80069fc:	0019      	movs	r1, r3
 80069fe:	1cfb      	adds	r3, r7, #3
 8006a00:	1c22      	adds	r2, r4, #0
 8006a02:	701a      	strb	r2, [r3, #0]
 8006a04:	1cbb      	adds	r3, r7, #2
 8006a06:	1c02      	adds	r2, r0, #0
 8006a08:	701a      	strb	r2, [r3, #0]
 8006a0a:	1c7b      	adds	r3, r7, #1
 8006a0c:	1c0a      	adds	r2, r1, #0
 8006a0e:	701a      	strb	r2, [r3, #0]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	23ae      	movs	r3, #174	; 0xae
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	58d3      	ldr	r3, [r2, r3]
 8006a18:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	4a14      	ldr	r2, [pc, #80]	; (8006a70 <SCSI_SenseCode+0x80>)
 8006a1e:	5c9b      	ldrb	r3, [r3, r2]
 8006a20:	68fa      	ldr	r2, [r7, #12]
 8006a22:	3387      	adds	r3, #135	; 0x87
 8006a24:	00db      	lsls	r3, r3, #3
 8006a26:	18d3      	adds	r3, r2, r3
 8006a28:	3304      	adds	r3, #4
 8006a2a:	1cba      	adds	r2, r7, #2
 8006a2c:	7812      	ldrb	r2, [r2, #0]
 8006a2e:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	4a0f      	ldr	r2, [pc, #60]	; (8006a70 <SCSI_SenseCode+0x80>)
 8006a34:	5c9b      	ldrb	r3, [r3, r2]
 8006a36:	68fa      	ldr	r2, [r7, #12]
 8006a38:	3387      	adds	r3, #135	; 0x87
 8006a3a:	00db      	lsls	r3, r3, #3
 8006a3c:	18d3      	adds	r3, r2, r3
 8006a3e:	3308      	adds	r3, #8
 8006a40:	2200      	movs	r2, #0
 8006a42:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_sense_tail++;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	4a0a      	ldr	r2, [pc, #40]	; (8006a70 <SCSI_SenseCode+0x80>)
 8006a48:	5c9b      	ldrb	r3, [r3, r2]
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	b2d9      	uxtb	r1, r3
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	4a07      	ldr	r2, [pc, #28]	; (8006a70 <SCSI_SenseCode+0x80>)
 8006a52:	5499      	strb	r1, [r3, r2]
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	4a06      	ldr	r2, [pc, #24]	; (8006a70 <SCSI_SenseCode+0x80>)
 8006a58:	5c9b      	ldrb	r3, [r3, r2]
 8006a5a:	2b04      	cmp	r3, #4
 8006a5c:	d103      	bne.n	8006a66 <SCSI_SenseCode+0x76>
  {
    hmsc->scsi_sense_tail = 0U;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	4a03      	ldr	r2, [pc, #12]	; (8006a70 <SCSI_SenseCode+0x80>)
 8006a62:	2100      	movs	r1, #0
 8006a64:	5499      	strb	r1, [r3, r2]
  }
}
 8006a66:	46c0      	nop			; (mov r8, r8)
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	b005      	add	sp, #20
 8006a6c:	bd90      	pop	{r4, r7, pc}
 8006a6e:	46c0      	nop			; (mov r8, r8)
 8006a70:	0000045d 	.word	0x0000045d

08006a74 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b086      	sub	sp, #24
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	607a      	str	r2, [r7, #4]
 8006a7e:	230b      	movs	r3, #11
 8006a80:	18fb      	adds	r3, r7, r3
 8006a82:	1c0a      	adds	r2, r1, #0
 8006a84:	701a      	strb	r2, [r3, #0]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8006a86:	68fa      	ldr	r2, [r7, #12]
 8006a88:	23ae      	movs	r3, #174	; 0xae
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	58d3      	ldr	r3, [r2, r3]
 8006a8e:	617b      	str	r3, [r7, #20]
  hmsc->bot_data_length = 0U;
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	2200      	movs	r2, #0
 8006a94:	815a      	strh	r2, [r3, #10]
  return 0;
 8006a96:	2300      	movs	r3, #0
}
 8006a98:	0018      	movs	r0, r3
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	b006      	add	sp, #24
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006aa0:	b590      	push	{r4, r7, lr}
 8006aa2:	b087      	sub	sp, #28
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	607a      	str	r2, [r7, #4]
 8006aaa:	230b      	movs	r3, #11
 8006aac:	18fb      	adds	r3, r7, r3
 8006aae:	1c0a      	adds	r2, r1, #0
 8006ab0:	701a      	strb	r2, [r3, #0]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8006ab2:	68fa      	ldr	r2, [r7, #12]
 8006ab4:	23ae      	movs	r3, #174	; 0xae
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	58d3      	ldr	r3, [r2, r3]
 8006aba:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	7a1b      	ldrb	r3, [r3, #8]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d000      	beq.n	8006ac6 <SCSI_Read10+0x26>
 8006ac4:	e078      	b.n	8006bb8 <SCSI_Read10+0x118>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8006ac6:	697a      	ldr	r2, [r7, #20]
 8006ac8:	2383      	movs	r3, #131	; 0x83
 8006aca:	00db      	lsls	r3, r3, #3
 8006acc:	5cd3      	ldrb	r3, [r2, r3]
 8006ace:	b25b      	sxtb	r3, r3
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	db0a      	blt.n	8006aea <SCSI_Read10+0x4a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	4a41      	ldr	r2, [pc, #260]	; (8006bdc <SCSI_Read10+0x13c>)
 8006ad8:	5c99      	ldrb	r1, [r3, r2]
 8006ada:	68f8      	ldr	r0, [r7, #12]
 8006adc:	2320      	movs	r3, #32
 8006ade:	2205      	movs	r2, #5
 8006ae0:	f7ff ff86 	bl	80069f0 <SCSI_SenseCode>
      return -1;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	425b      	negs	r3, r3
 8006ae8:	e073      	b.n	8006bd2 <SCSI_Read10+0x132>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8006aea:	68fa      	ldr	r2, [r7, #12]
 8006aec:	23af      	movs	r3, #175	; 0xaf
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	58d3      	ldr	r3, [r2, r3]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	240b      	movs	r4, #11
 8006af6:	193a      	adds	r2, r7, r4
 8006af8:	7812      	ldrb	r2, [r2, #0]
 8006afa:	0010      	movs	r0, r2
 8006afc:	4798      	blx	r3
 8006afe:	1e03      	subs	r3, r0, #0
 8006b00:	d009      	beq.n	8006b16 <SCSI_Read10+0x76>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006b02:	193b      	adds	r3, r7, r4
 8006b04:	7819      	ldrb	r1, [r3, #0]
 8006b06:	68f8      	ldr	r0, [r7, #12]
 8006b08:	233a      	movs	r3, #58	; 0x3a
 8006b0a:	2202      	movs	r2, #2
 8006b0c:	f7ff ff70 	bl	80069f0 <SCSI_SenseCode>
      return -1;
 8006b10:	2301      	movs	r3, #1
 8006b12:	425b      	negs	r3, r3
 8006b14:	e05d      	b.n	8006bd2 <SCSI_Read10+0x132>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	3302      	adds	r3, #2
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	3303      	adds	r3, #3
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006b26:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	3304      	adds	r3, #4
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8006b30:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	3205      	adds	r2, #5
 8006b36:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8006b38:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	4928      	ldr	r1, [pc, #160]	; (8006be0 <SCSI_Read10+0x140>)
 8006b3e:	505a      	str	r2, [r3, r1]

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	3307      	adds	r3, #7
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	021b      	lsls	r3, r3, #8
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	3208      	adds	r2, #8
 8006b4c:	7812      	ldrb	r2, [r2, #0]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	0019      	movs	r1, r3
 8006b52:	697a      	ldr	r2, [r7, #20]
 8006b54:	238d      	movs	r3, #141	; 0x8d
 8006b56:	00db      	lsls	r3, r3, #3
 8006b58:	50d1      	str	r1, [r2, r3]

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	4a20      	ldr	r2, [pc, #128]	; (8006be0 <SCSI_Read10+0x140>)
 8006b5e:	589c      	ldr	r4, [r3, r2]
 8006b60:	697a      	ldr	r2, [r7, #20]
 8006b62:	238d      	movs	r3, #141	; 0x8d
 8006b64:	00db      	lsls	r3, r3, #3
 8006b66:	58d2      	ldr	r2, [r2, r3]
 8006b68:	230b      	movs	r3, #11
 8006b6a:	18fb      	adds	r3, r7, r3
 8006b6c:	7819      	ldrb	r1, [r3, #0]
 8006b6e:	68f8      	ldr	r0, [r7, #12]
 8006b70:	0013      	movs	r3, r2
 8006b72:	0022      	movs	r2, r4
 8006b74:	f000 f944 	bl	8006e00 <SCSI_CheckAddressRange>
 8006b78:	1e03      	subs	r3, r0, #0
 8006b7a:	da02      	bge.n	8006b82 <SCSI_Read10+0xe2>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	425b      	negs	r3, r3
 8006b80:	e027      	b.n	8006bd2 <SCSI_Read10+0x132>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	2202      	movs	r2, #2
 8006b86:	721a      	strb	r2, [r3, #8]

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	4a16      	ldr	r2, [pc, #88]	; (8006be4 <SCSI_Read10+0x144>)
 8006b8c:	589a      	ldr	r2, [r3, r2]
 8006b8e:	6979      	ldr	r1, [r7, #20]
 8006b90:	238d      	movs	r3, #141	; 0x8d
 8006b92:	00db      	lsls	r3, r3, #3
 8006b94:	58cb      	ldr	r3, [r1, r3]
 8006b96:	6979      	ldr	r1, [r7, #20]
 8006b98:	4813      	ldr	r0, [pc, #76]	; (8006be8 <SCSI_Read10+0x148>)
 8006b9a:	5a09      	ldrh	r1, [r1, r0]
 8006b9c:	434b      	muls	r3, r1
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d00a      	beq.n	8006bb8 <SCSI_Read10+0x118>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	4a0d      	ldr	r2, [pc, #52]	; (8006bdc <SCSI_Read10+0x13c>)
 8006ba6:	5c99      	ldrb	r1, [r3, r2]
 8006ba8:	68f8      	ldr	r0, [r7, #12]
 8006baa:	2320      	movs	r3, #32
 8006bac:	2205      	movs	r2, #5
 8006bae:	f7ff ff1f 	bl	80069f0 <SCSI_SenseCode>
      return -1;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	425b      	negs	r3, r3
 8006bb6:	e00c      	b.n	8006bd2 <SCSI_Read10+0x132>
    }
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	2280      	movs	r2, #128	; 0x80
 8006bbc:	00d2      	lsls	r2, r2, #3
 8006bbe:	815a      	strh	r2, [r3, #10]

  return SCSI_ProcessRead(pdev, lun);
 8006bc0:	230b      	movs	r3, #11
 8006bc2:	18fb      	adds	r3, r7, r3
 8006bc4:	781a      	ldrb	r2, [r3, #0]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	0011      	movs	r1, r2
 8006bca:	0018      	movs	r0, r3
 8006bcc:	f000 f940 	bl	8006e50 <SCSI_ProcessRead>
 8006bd0:	0003      	movs	r3, r0
}
 8006bd2:	0018      	movs	r0, r3
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	b007      	add	sp, #28
 8006bd8:	bd90      	pop	{r4, r7, pc}
 8006bda:	46c0      	nop			; (mov r8, r8)
 8006bdc:	00000419 	.word	0x00000419
 8006be0:	00000464 	.word	0x00000464
 8006be4:	00000414 	.word	0x00000414
 8006be8:	0000045e 	.word	0x0000045e

08006bec <SCSI_Write10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Write10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8006bec:	b590      	push	{r4, r7, lr}
 8006bee:	b087      	sub	sp, #28
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	607a      	str	r2, [r7, #4]
 8006bf6:	230b      	movs	r3, #11
 8006bf8:	18fb      	adds	r3, r7, r3
 8006bfa:	1c0a      	adds	r2, r1, #0
 8006bfc:	701a      	strb	r2, [r3, #0]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8006bfe:	68fa      	ldr	r2, [r7, #12]
 8006c00:	23ae      	movs	r3, #174	; 0xae
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	58d3      	ldr	r3, [r2, r3]
 8006c06:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	7a1b      	ldrb	r3, [r3, #8]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d000      	beq.n	8006c12 <SCSI_Write10+0x26>
 8006c10:	e0a3      	b.n	8006d5a <SCSI_Write10+0x16e>
  {
    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8006c12:	697a      	ldr	r2, [r7, #20]
 8006c14:	2383      	movs	r3, #131	; 0x83
 8006c16:	00db      	lsls	r3, r3, #3
 8006c18:	5cd3      	ldrb	r3, [r2, r3]
 8006c1a:	b25b      	sxtb	r3, r3
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	da0a      	bge.n	8006c36 <SCSI_Write10+0x4a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	4a54      	ldr	r2, [pc, #336]	; (8006d74 <SCSI_Write10+0x188>)
 8006c24:	5c99      	ldrb	r1, [r3, r2]
 8006c26:	68f8      	ldr	r0, [r7, #12]
 8006c28:	2320      	movs	r3, #32
 8006c2a:	2205      	movs	r2, #5
 8006c2c:	f7ff fee0 	bl	80069f0 <SCSI_SenseCode>
      return -1;
 8006c30:	2301      	movs	r3, #1
 8006c32:	425b      	negs	r3, r3
 8006c34:	e09a      	b.n	8006d6c <SCSI_Write10+0x180>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8006c36:	68fa      	ldr	r2, [r7, #12]
 8006c38:	23af      	movs	r3, #175	; 0xaf
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	58d3      	ldr	r3, [r2, r3]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	240b      	movs	r4, #11
 8006c42:	193a      	adds	r2, r7, r4
 8006c44:	7812      	ldrb	r2, [r2, #0]
 8006c46:	0010      	movs	r0, r2
 8006c48:	4798      	blx	r3
 8006c4a:	1e03      	subs	r3, r0, #0
 8006c4c:	d009      	beq.n	8006c62 <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006c4e:	193b      	adds	r3, r7, r4
 8006c50:	7819      	ldrb	r1, [r3, #0]
 8006c52:	68f8      	ldr	r0, [r7, #12]
 8006c54:	233a      	movs	r3, #58	; 0x3a
 8006c56:	2202      	movs	r2, #2
 8006c58:	f7ff feca 	bl	80069f0 <SCSI_SenseCode>
      return -1;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	425b      	negs	r3, r3
 8006c60:	e084      	b.n	8006d6c <SCSI_Write10+0x180>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	23af      	movs	r3, #175	; 0xaf
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	58d3      	ldr	r3, [r2, r3]
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	240b      	movs	r4, #11
 8006c6e:	193a      	adds	r2, r7, r4
 8006c70:	7812      	ldrb	r2, [r2, #0]
 8006c72:	0010      	movs	r0, r2
 8006c74:	4798      	blx	r3
 8006c76:	1e03      	subs	r3, r0, #0
 8006c78:	d009      	beq.n	8006c8e <SCSI_Write10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8006c7a:	193b      	adds	r3, r7, r4
 8006c7c:	7819      	ldrb	r1, [r3, #0]
 8006c7e:	68f8      	ldr	r0, [r7, #12]
 8006c80:	2327      	movs	r3, #39	; 0x27
 8006c82:	2202      	movs	r2, #2
 8006c84:	f7ff feb4 	bl	80069f0 <SCSI_SenseCode>
      return -1;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	425b      	negs	r3, r3
 8006c8c:	e06e      	b.n	8006d6c <SCSI_Write10+0x180>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	3302      	adds	r3, #2
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	3303      	adds	r3, #3
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006c9e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	3304      	adds	r3, #4
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8006ca8:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	3205      	adds	r2, #5
 8006cae:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8006cb0:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	4930      	ldr	r1, [pc, #192]	; (8006d78 <SCSI_Write10+0x18c>)
 8006cb6:	505a      	str	r2, [r3, r1]

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	3307      	adds	r3, #7
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	3208      	adds	r2, #8
 8006cc4:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	0019      	movs	r1, r3
 8006cca:	697a      	ldr	r2, [r7, #20]
 8006ccc:	238d      	movs	r3, #141	; 0x8d
 8006cce:	00db      	lsls	r3, r3, #3
 8006cd0:	50d1      	str	r1, [r2, r3]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	4a28      	ldr	r2, [pc, #160]	; (8006d78 <SCSI_Write10+0x18c>)
 8006cd6:	589c      	ldr	r4, [r3, r2]
 8006cd8:	697a      	ldr	r2, [r7, #20]
 8006cda:	238d      	movs	r3, #141	; 0x8d
 8006cdc:	00db      	lsls	r3, r3, #3
 8006cde:	58d2      	ldr	r2, [r2, r3]
 8006ce0:	230b      	movs	r3, #11
 8006ce2:	18fb      	adds	r3, r7, r3
 8006ce4:	7819      	ldrb	r1, [r3, #0]
 8006ce6:	68f8      	ldr	r0, [r7, #12]
 8006ce8:	0013      	movs	r3, r2
 8006cea:	0022      	movs	r2, r4
 8006cec:	f000 f888 	bl	8006e00 <SCSI_CheckAddressRange>
 8006cf0:	1e03      	subs	r3, r0, #0
 8006cf2:	da02      	bge.n	8006cfa <SCSI_Write10+0x10e>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	425b      	negs	r3, r3
 8006cf8:	e038      	b.n	8006d6c <SCSI_Write10+0x180>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8006cfa:	697a      	ldr	r2, [r7, #20]
 8006cfc:	238d      	movs	r3, #141	; 0x8d
 8006cfe:	00db      	lsls	r3, r3, #3
 8006d00:	58d3      	ldr	r3, [r2, r3]
 8006d02:	697a      	ldr	r2, [r7, #20]
 8006d04:	491d      	ldr	r1, [pc, #116]	; (8006d7c <SCSI_Write10+0x190>)
 8006d06:	5a52      	ldrh	r2, [r2, r1]
 8006d08:	4353      	muls	r3, r2
 8006d0a:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	4a1c      	ldr	r2, [pc, #112]	; (8006d80 <SCSI_Write10+0x194>)
 8006d10:	589b      	ldr	r3, [r3, r2]
 8006d12:	693a      	ldr	r2, [r7, #16]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d00a      	beq.n	8006d2e <SCSI_Write10+0x142>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	4a16      	ldr	r2, [pc, #88]	; (8006d74 <SCSI_Write10+0x188>)
 8006d1c:	5c99      	ldrb	r1, [r3, r2]
 8006d1e:	68f8      	ldr	r0, [r7, #12]
 8006d20:	2320      	movs	r3, #32
 8006d22:	2205      	movs	r2, #5
 8006d24:	f7ff fe64 	bl	80069f0 <SCSI_SenseCode>
      return -1;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	425b      	negs	r3, r3
 8006d2c:	e01e      	b.n	8006d6c <SCSI_Write10+0x180>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	2280      	movs	r2, #128	; 0x80
 8006d32:	00d2      	lsls	r2, r2, #3
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d901      	bls.n	8006d3c <SCSI_Write10+0x150>
 8006d38:	2380      	movs	r3, #128	; 0x80
 8006d3a:	00db      	lsls	r3, r3, #3
 8006d3c:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	2201      	movs	r2, #1
 8006d42:	721a      	strb	r2, [r3, #8]
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	330c      	adds	r3, #12
 8006d48:	001a      	movs	r2, r3
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	68f8      	ldr	r0, [r7, #12]
 8006d50:	2101      	movs	r1, #1
 8006d52:	f002 f8fa 	bl	8008f4a <USBD_LL_PrepareReceive>
  }
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }
  return 0;
 8006d56:	2300      	movs	r3, #0
 8006d58:	e008      	b.n	8006d6c <SCSI_Write10+0x180>
    return SCSI_ProcessWrite(pdev, lun);
 8006d5a:	230b      	movs	r3, #11
 8006d5c:	18fb      	adds	r3, r7, r3
 8006d5e:	781a      	ldrb	r2, [r3, #0]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	0011      	movs	r1, r2
 8006d64:	0018      	movs	r0, r3
 8006d66:	f000 f8fb 	bl	8006f60 <SCSI_ProcessWrite>
 8006d6a:	0003      	movs	r3, r0
}
 8006d6c:	0018      	movs	r0, r3
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	b007      	add	sp, #28
 8006d72:	bd90      	pop	{r4, r7, pc}
 8006d74:	00000419 	.word	0x00000419
 8006d78:	00000464 	.word	0x00000464
 8006d7c:	0000045e 	.word	0x0000045e
 8006d80:	00000414 	.word	0x00000414

08006d84 <SCSI_Verify10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Verify10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8006d84:	b590      	push	{r4, r7, lr}
 8006d86:	b087      	sub	sp, #28
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	60f8      	str	r0, [r7, #12]
 8006d8c:	607a      	str	r2, [r7, #4]
 8006d8e:	200b      	movs	r0, #11
 8006d90:	183b      	adds	r3, r7, r0
 8006d92:	1c0a      	adds	r2, r1, #0
 8006d94:	701a      	strb	r2, [r3, #0]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8006d96:	68fa      	ldr	r2, [r7, #12]
 8006d98:	23ae      	movs	r3, #174	; 0xae
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	58d3      	ldr	r3, [r2, r3]
 8006d9e:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	3301      	adds	r3, #1
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	001a      	movs	r2, r3
 8006da8:	2302      	movs	r3, #2
 8006daa:	4013      	ands	r3, r2
 8006dac:	d009      	beq.n	8006dc2 <SCSI_Verify10+0x3e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8006dae:	183b      	adds	r3, r7, r0
 8006db0:	7819      	ldrb	r1, [r3, #0]
 8006db2:	68f8      	ldr	r0, [r7, #12]
 8006db4:	2324      	movs	r3, #36	; 0x24
 8006db6:	2205      	movs	r2, #5
 8006db8:	f7ff fe1a 	bl	80069f0 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	425b      	negs	r3, r3
 8006dc0:	e017      	b.n	8006df2 <SCSI_Verify10+0x6e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	4a0d      	ldr	r2, [pc, #52]	; (8006dfc <SCSI_Verify10+0x78>)
 8006dc6:	589c      	ldr	r4, [r3, r2]
 8006dc8:	697a      	ldr	r2, [r7, #20]
 8006dca:	238d      	movs	r3, #141	; 0x8d
 8006dcc:	00db      	lsls	r3, r3, #3
 8006dce:	58d2      	ldr	r2, [r2, r3]
 8006dd0:	230b      	movs	r3, #11
 8006dd2:	18fb      	adds	r3, r7, r3
 8006dd4:	7819      	ldrb	r1, [r3, #0]
 8006dd6:	68f8      	ldr	r0, [r7, #12]
 8006dd8:	0013      	movs	r3, r2
 8006dda:	0022      	movs	r2, r4
 8006ddc:	f000 f810 	bl	8006e00 <SCSI_CheckAddressRange>
 8006de0:	1e03      	subs	r3, r0, #0
 8006de2:	da02      	bge.n	8006dea <SCSI_Verify10+0x66>
                             hmsc->scsi_blk_len) < 0)
  {
    return -1; /* error */
 8006de4:	2301      	movs	r3, #1
 8006de6:	425b      	negs	r3, r3
 8006de8:	e003      	b.n	8006df2 <SCSI_Verify10+0x6e>
  }
  hmsc->bot_data_length = 0U;
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	2200      	movs	r2, #0
 8006dee:	815a      	strh	r2, [r3, #10]
  return 0;
 8006df0:	2300      	movs	r3, #0
}
 8006df2:	0018      	movs	r0, r3
 8006df4:	46bd      	mov	sp, r7
 8006df6:	b007      	add	sp, #28
 8006df8:	bd90      	pop	{r4, r7, pc}
 8006dfa:	46c0      	nop			; (mov r8, r8)
 8006dfc:	00000464 	.word	0x00000464

08006e00 <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b086      	sub	sp, #24
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	607a      	str	r2, [r7, #4]
 8006e0a:	603b      	str	r3, [r7, #0]
 8006e0c:	200b      	movs	r0, #11
 8006e0e:	183b      	adds	r3, r7, r0
 8006e10:	1c0a      	adds	r2, r1, #0
 8006e12:	701a      	strb	r2, [r3, #0]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8006e14:	68fa      	ldr	r2, [r7, #12]
 8006e16:	23ae      	movs	r3, #174	; 0xae
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	58d3      	ldr	r3, [r2, r3]
 8006e1c:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	18d2      	adds	r2, r2, r3
 8006e24:	6979      	ldr	r1, [r7, #20]
 8006e26:	238c      	movs	r3, #140	; 0x8c
 8006e28:	00db      	lsls	r3, r3, #3
 8006e2a:	58cb      	ldr	r3, [r1, r3]
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d909      	bls.n	8006e44 <SCSI_CheckAddressRange+0x44>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8006e30:	183b      	adds	r3, r7, r0
 8006e32:	7819      	ldrb	r1, [r3, #0]
 8006e34:	68f8      	ldr	r0, [r7, #12]
 8006e36:	2321      	movs	r3, #33	; 0x21
 8006e38:	2205      	movs	r2, #5
 8006e3a:	f7ff fdd9 	bl	80069f0 <SCSI_SenseCode>
    return -1;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	425b      	negs	r3, r3
 8006e42:	e000      	b.n	8006e46 <SCSI_CheckAddressRange+0x46>
  }
  return 0;
 8006e44:	2300      	movs	r3, #0
}
 8006e46:	0018      	movs	r0, r3
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	b006      	add	sp, #24
 8006e4c:	bd80      	pop	{r7, pc}
	...

08006e50 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 8006e50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e52:	b085      	sub	sp, #20
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	000a      	movs	r2, r1
 8006e5a:	1cfb      	adds	r3, r7, #3
 8006e5c:	701a      	strb	r2, [r3, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	23ae      	movs	r3, #174	; 0xae
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	58d3      	ldr	r3, [r2, r3]
 8006e66:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8006e68:	68fa      	ldr	r2, [r7, #12]
 8006e6a:	238d      	movs	r3, #141	; 0x8d
 8006e6c:	00db      	lsls	r3, r3, #3
 8006e6e:	58d3      	ldr	r3, [r2, r3]
 8006e70:	68fa      	ldr	r2, [r7, #12]
 8006e72:	4938      	ldr	r1, [pc, #224]	; (8006f54 <SCSI_ProcessRead+0x104>)
 8006e74:	5a52      	ldrh	r2, [r2, r1]
 8006e76:	4353      	muls	r3, r2
 8006e78:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	2280      	movs	r2, #128	; 0x80
 8006e7e:	00d2      	lsls	r2, r2, #3
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d901      	bls.n	8006e88 <SCSI_ProcessRead+0x38>
 8006e84:	2380      	movs	r3, #128	; 0x80
 8006e86:	00db      	lsls	r3, r3, #3
 8006e88:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	23af      	movs	r3, #175	; 0xaf
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	58d3      	ldr	r3, [r2, r3]
 8006e92:	691c      	ldr	r4, [r3, #16]
                                                     hmsc->bot_data,
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	330c      	adds	r3, #12
 8006e98:	001d      	movs	r5, r3
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	4a2e      	ldr	r2, [pc, #184]	; (8006f58 <SCSI_ProcessRead+0x108>)
 8006e9e:	589e      	ldr	r6, [r3, r2]
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	4a2c      	ldr	r2, [pc, #176]	; (8006f54 <SCSI_ProcessRead+0x104>)
 8006ea4:	5a9b      	ldrh	r3, [r3, r2]
 8006ea6:	0019      	movs	r1, r3
 8006ea8:	68b8      	ldr	r0, [r7, #8]
 8006eaa:	f7f9 f935 	bl	8000118 <__udivsi3>
 8006eae:	0003      	movs	r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8006eb0:	b29a      	uxth	r2, r3
 8006eb2:	1cfb      	adds	r3, r7, #3
 8006eb4:	7818      	ldrb	r0, [r3, #0]
 8006eb6:	0013      	movs	r3, r2
 8006eb8:	0032      	movs	r2, r6
 8006eba:	0029      	movs	r1, r5
 8006ebc:	47a0      	blx	r4
 8006ebe:	1e03      	subs	r3, r0, #0
 8006ec0:	da09      	bge.n	8006ed6 <SCSI_ProcessRead+0x86>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8006ec2:	1cfb      	adds	r3, r7, #3
 8006ec4:	7819      	ldrb	r1, [r3, #0]
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	2311      	movs	r3, #17
 8006eca:	2204      	movs	r2, #4
 8006ecc:	f7ff fd90 	bl	80069f0 <SCSI_SenseCode>
    return -1;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	425b      	negs	r3, r3
 8006ed4:	e03a      	b.n	8006f4c <SCSI_ProcessRead+0xfc>
  }

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	330c      	adds	r3, #12
 8006eda:	001a      	movs	r2, r3
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	2181      	movs	r1, #129	; 0x81
 8006ee4:	f001 fffa 	bl	8008edc <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	4a1b      	ldr	r2, [pc, #108]	; (8006f58 <SCSI_ProcessRead+0x108>)
 8006eec:	589c      	ldr	r4, [r3, r2]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	4a18      	ldr	r2, [pc, #96]	; (8006f54 <SCSI_ProcessRead+0x104>)
 8006ef2:	5a9b      	ldrh	r3, [r3, r2]
 8006ef4:	0019      	movs	r1, r3
 8006ef6:	68b8      	ldr	r0, [r7, #8]
 8006ef8:	f7f9 f90e 	bl	8000118 <__udivsi3>
 8006efc:	0003      	movs	r3, r0
 8006efe:	18e2      	adds	r2, r4, r3
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	4915      	ldr	r1, [pc, #84]	; (8006f58 <SCSI_ProcessRead+0x108>)
 8006f04:	505a      	str	r2, [r3, r1]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8006f06:	68fa      	ldr	r2, [r7, #12]
 8006f08:	238d      	movs	r3, #141	; 0x8d
 8006f0a:	00db      	lsls	r3, r3, #3
 8006f0c:	58d4      	ldr	r4, [r2, r3]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	4a10      	ldr	r2, [pc, #64]	; (8006f54 <SCSI_ProcessRead+0x104>)
 8006f12:	5a9b      	ldrh	r3, [r3, r2]
 8006f14:	0019      	movs	r1, r3
 8006f16:	68b8      	ldr	r0, [r7, #8]
 8006f18:	f7f9 f8fe 	bl	8000118 <__udivsi3>
 8006f1c:	0003      	movs	r3, r0
 8006f1e:	1ae1      	subs	r1, r4, r3
 8006f20:	68fa      	ldr	r2, [r7, #12]
 8006f22:	238d      	movs	r3, #141	; 0x8d
 8006f24:	00db      	lsls	r3, r3, #3
 8006f26:	50d1      	str	r1, [r2, r3]

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	4a0c      	ldr	r2, [pc, #48]	; (8006f5c <SCSI_ProcessRead+0x10c>)
 8006f2c:	589a      	ldr	r2, [r3, r2]
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	1ad2      	subs	r2, r2, r3
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	4909      	ldr	r1, [pc, #36]	; (8006f5c <SCSI_ProcessRead+0x10c>)
 8006f36:	505a      	str	r2, [r3, r1]

  if (hmsc->scsi_blk_len == 0U)
 8006f38:	68fa      	ldr	r2, [r7, #12]
 8006f3a:	238d      	movs	r3, #141	; 0x8d
 8006f3c:	00db      	lsls	r3, r3, #3
 8006f3e:	58d3      	ldr	r3, [r2, r3]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d102      	bne.n	8006f4a <SCSI_ProcessRead+0xfa>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2203      	movs	r2, #3
 8006f48:	721a      	strb	r2, [r3, #8]
  }
  return 0;
 8006f4a:	2300      	movs	r3, #0
}
 8006f4c:	0018      	movs	r0, r3
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	b005      	add	sp, #20
 8006f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f54:	0000045e 	.word	0x0000045e
 8006f58:	00000464 	.word	0x00000464
 8006f5c:	00000434 	.word	0x00000434

08006f60 <SCSI_ProcessWrite>:
* @param  lun: Logical unit number
* @retval status
*/

static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 8006f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f62:	b085      	sub	sp, #20
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	000a      	movs	r2, r1
 8006f6a:	1cfb      	adds	r3, r7, #3
 8006f6c:	701a      	strb	r2, [r3, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	23ae      	movs	r3, #174	; 0xae
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	58d3      	ldr	r3, [r2, r3]
 8006f76:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8006f78:	68fa      	ldr	r2, [r7, #12]
 8006f7a:	238d      	movs	r3, #141	; 0x8d
 8006f7c:	00db      	lsls	r3, r3, #3
 8006f7e:	58d3      	ldr	r3, [r2, r3]
 8006f80:	68fa      	ldr	r2, [r7, #12]
 8006f82:	4941      	ldr	r1, [pc, #260]	; (8007088 <SCSI_ProcessWrite+0x128>)
 8006f84:	5a52      	ldrh	r2, [r2, r1]
 8006f86:	4353      	muls	r3, r2
 8006f88:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	2280      	movs	r2, #128	; 0x80
 8006f8e:	00d2      	lsls	r2, r2, #3
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d901      	bls.n	8006f98 <SCSI_ProcessWrite+0x38>
 8006f94:	2380      	movs	r3, #128	; 0x80
 8006f96:	00db      	lsls	r3, r3, #3
 8006f98:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	23af      	movs	r3, #175	; 0xaf
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	58d3      	ldr	r3, [r2, r3]
 8006fa2:	695c      	ldr	r4, [r3, #20]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	330c      	adds	r3, #12
 8006fa8:	001d      	movs	r5, r3
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	4a37      	ldr	r2, [pc, #220]	; (800708c <SCSI_ProcessWrite+0x12c>)
 8006fae:	589e      	ldr	r6, [r3, r2]
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	4a35      	ldr	r2, [pc, #212]	; (8007088 <SCSI_ProcessWrite+0x128>)
 8006fb4:	5a9b      	ldrh	r3, [r3, r2]
 8006fb6:	0019      	movs	r1, r3
 8006fb8:	68b8      	ldr	r0, [r7, #8]
 8006fba:	f7f9 f8ad 	bl	8000118 <__udivsi3>
 8006fbe:	0003      	movs	r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8006fc0:	b29a      	uxth	r2, r3
 8006fc2:	1cfb      	adds	r3, r7, #3
 8006fc4:	7818      	ldrb	r0, [r3, #0]
 8006fc6:	0013      	movs	r3, r2
 8006fc8:	0032      	movs	r2, r6
 8006fca:	0029      	movs	r1, r5
 8006fcc:	47a0      	blx	r4
 8006fce:	1e03      	subs	r3, r0, #0
 8006fd0:	da09      	bge.n	8006fe6 <SCSI_ProcessWrite+0x86>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8006fd2:	1cfb      	adds	r3, r7, #3
 8006fd4:	7819      	ldrb	r1, [r3, #0]
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	2303      	movs	r3, #3
 8006fda:	2204      	movs	r2, #4
 8006fdc:	f7ff fd08 	bl	80069f0 <SCSI_SenseCode>

    return -1;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	425b      	negs	r3, r3
 8006fe4:	e04c      	b.n	8007080 <SCSI_ProcessWrite+0x120>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	4a28      	ldr	r2, [pc, #160]	; (800708c <SCSI_ProcessWrite+0x12c>)
 8006fea:	589c      	ldr	r4, [r3, r2]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	4a26      	ldr	r2, [pc, #152]	; (8007088 <SCSI_ProcessWrite+0x128>)
 8006ff0:	5a9b      	ldrh	r3, [r3, r2]
 8006ff2:	0019      	movs	r1, r3
 8006ff4:	68b8      	ldr	r0, [r7, #8]
 8006ff6:	f7f9 f88f 	bl	8000118 <__udivsi3>
 8006ffa:	0003      	movs	r3, r0
 8006ffc:	18e2      	adds	r2, r4, r3
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	4922      	ldr	r1, [pc, #136]	; (800708c <SCSI_ProcessWrite+0x12c>)
 8007002:	505a      	str	r2, [r3, r1]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	238d      	movs	r3, #141	; 0x8d
 8007008:	00db      	lsls	r3, r3, #3
 800700a:	58d4      	ldr	r4, [r2, r3]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	4a1e      	ldr	r2, [pc, #120]	; (8007088 <SCSI_ProcessWrite+0x128>)
 8007010:	5a9b      	ldrh	r3, [r3, r2]
 8007012:	0019      	movs	r1, r3
 8007014:	68b8      	ldr	r0, [r7, #8]
 8007016:	f7f9 f87f 	bl	8000118 <__udivsi3>
 800701a:	0003      	movs	r3, r0
 800701c:	1ae1      	subs	r1, r4, r3
 800701e:	68fa      	ldr	r2, [r7, #12]
 8007020:	238d      	movs	r3, #141	; 0x8d
 8007022:	00db      	lsls	r3, r3, #3
 8007024:	50d1      	str	r1, [r2, r3]

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	4a19      	ldr	r2, [pc, #100]	; (8007090 <SCSI_ProcessWrite+0x130>)
 800702a:	589a      	ldr	r2, [r3, r2]
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	1ad2      	subs	r2, r2, r3
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	4917      	ldr	r1, [pc, #92]	; (8007090 <SCSI_ProcessWrite+0x130>)
 8007034:	505a      	str	r2, [r3, r1]

  if (hmsc->scsi_blk_len == 0U)
 8007036:	68fa      	ldr	r2, [r7, #12]
 8007038:	238d      	movs	r3, #141	; 0x8d
 800703a:	00db      	lsls	r3, r3, #3
 800703c:	58d3      	ldr	r3, [r2, r3]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d105      	bne.n	800704e <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2100      	movs	r1, #0
 8007046:	0018      	movs	r0, r3
 8007048:	f7ff f91c 	bl	8006284 <MSC_BOT_SendCSW>
 800704c:	e017      	b.n	800707e <SCSI_ProcessWrite+0x11e>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800704e:	68fa      	ldr	r2, [r7, #12]
 8007050:	238d      	movs	r3, #141	; 0x8d
 8007052:	00db      	lsls	r3, r3, #3
 8007054:	58d3      	ldr	r3, [r2, r3]
 8007056:	68fa      	ldr	r2, [r7, #12]
 8007058:	490b      	ldr	r1, [pc, #44]	; (8007088 <SCSI_ProcessWrite+0x128>)
 800705a:	5a52      	ldrh	r2, [r2, r1]
 800705c:	4353      	muls	r3, r2
 800705e:	2280      	movs	r2, #128	; 0x80
 8007060:	00d2      	lsls	r2, r2, #3
 8007062:	4293      	cmp	r3, r2
 8007064:	d901      	bls.n	800706a <SCSI_ProcessWrite+0x10a>
 8007066:	2380      	movs	r3, #128	; 0x80
 8007068:	00db      	lsls	r3, r3, #3
 800706a:	60bb      	str	r3, [r7, #8]
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	330c      	adds	r3, #12
 8007070:	001a      	movs	r2, r3
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	b29b      	uxth	r3, r3
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	2101      	movs	r1, #1
 800707a:	f001 ff66 	bl	8008f4a <USBD_LL_PrepareReceive>
  }

  return 0;
 800707e:	2300      	movs	r3, #0
}
 8007080:	0018      	movs	r0, r3
 8007082:	46bd      	mov	sp, r7
 8007084:	b005      	add	sp, #20
 8007086:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007088:	0000045e 	.word	0x0000045e
 800708c:	00000464 	.word	0x00000464
 8007090:	00000434 	.word	0x00000434

08007094 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b084      	sub	sp, #16
 8007098:	af00      	add	r7, sp, #0
 800709a:	60f8      	str	r0, [r7, #12]
 800709c:	60b9      	str	r1, [r7, #8]
 800709e:	1dfb      	adds	r3, r7, #7
 80070a0:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d101      	bne.n	80070ac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80070a8:	2302      	movs	r3, #2
 80070aa:	e020      	b.n	80070ee <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80070ac:	68fa      	ldr	r2, [r7, #12]
 80070ae:	23ad      	movs	r3, #173	; 0xad
 80070b0:	009b      	lsls	r3, r3, #2
 80070b2:	58d3      	ldr	r3, [r2, r3]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d004      	beq.n	80070c2 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 80070b8:	68fa      	ldr	r2, [r7, #12]
 80070ba:	23ad      	movs	r3, #173	; 0xad
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	2100      	movs	r1, #0
 80070c0:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d004      	beq.n	80070d2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80070c8:	68fa      	ldr	r2, [r7, #12]
 80070ca:	23ac      	movs	r3, #172	; 0xac
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	68b9      	ldr	r1, [r7, #8]
 80070d0:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80070d2:	68fa      	ldr	r2, [r7, #12]
 80070d4:	23a7      	movs	r3, #167	; 0xa7
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	2101      	movs	r1, #1
 80070da:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	1dfa      	adds	r2, r7, #7
 80070e0:	7812      	ldrb	r2, [r2, #0]
 80070e2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	0018      	movs	r0, r3
 80070e8:	f001 fd3c 	bl	8008b64 <USBD_LL_Init>

  return USBD_OK;
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	0018      	movs	r0, r3
 80070f0:	46bd      	mov	sp, r7
 80070f2:	b004      	add	sp, #16
 80070f4:	bd80      	pop	{r7, pc}

080070f6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80070f6:	b580      	push	{r7, lr}
 80070f8:	b084      	sub	sp, #16
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
 80070fe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007100:	200f      	movs	r0, #15
 8007102:	183b      	adds	r3, r7, r0
 8007104:	2200      	movs	r2, #0
 8007106:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d008      	beq.n	8007120 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	23ad      	movs	r3, #173	; 0xad
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	6839      	ldr	r1, [r7, #0]
 8007116:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8007118:	183b      	adds	r3, r7, r0
 800711a:	2200      	movs	r2, #0
 800711c:	701a      	strb	r2, [r3, #0]
 800711e:	e003      	b.n	8007128 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007120:	230f      	movs	r3, #15
 8007122:	18fb      	adds	r3, r7, r3
 8007124:	2202      	movs	r2, #2
 8007126:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8007128:	230f      	movs	r3, #15
 800712a:	18fb      	adds	r3, r7, r3
 800712c:	781b      	ldrb	r3, [r3, #0]
}
 800712e:	0018      	movs	r0, r3
 8007130:	46bd      	mov	sp, r7
 8007132:	b004      	add	sp, #16
 8007134:	bd80      	pop	{r7, pc}

08007136 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007136:	b580      	push	{r7, lr}
 8007138:	b082      	sub	sp, #8
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	0018      	movs	r0, r3
 8007142:	f001 fd67 	bl	8008c14 <USBD_LL_Start>

  return USBD_OK;
 8007146:	2300      	movs	r3, #0
}
 8007148:	0018      	movs	r0, r3
 800714a:	46bd      	mov	sp, r7
 800714c:	b002      	add	sp, #8
 800714e:	bd80      	pop	{r7, pc}

08007150 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b082      	sub	sp, #8
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007158:	2300      	movs	r3, #0
}
 800715a:	0018      	movs	r0, r3
 800715c:	46bd      	mov	sp, r7
 800715e:	b002      	add	sp, #8
 8007160:	bd80      	pop	{r7, pc}

08007162 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007162:	b590      	push	{r4, r7, lr}
 8007164:	b085      	sub	sp, #20
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
 800716a:	000a      	movs	r2, r1
 800716c:	1cfb      	adds	r3, r7, #3
 800716e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007170:	240f      	movs	r4, #15
 8007172:	193b      	adds	r3, r7, r4
 8007174:	2202      	movs	r2, #2
 8007176:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	23ad      	movs	r3, #173	; 0xad
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	58d3      	ldr	r3, [r2, r3]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d00e      	beq.n	80071a2 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	23ad      	movs	r3, #173	; 0xad
 8007188:	009b      	lsls	r3, r3, #2
 800718a:	58d3      	ldr	r3, [r2, r3]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	1cfa      	adds	r2, r7, #3
 8007190:	7811      	ldrb	r1, [r2, #0]
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	0010      	movs	r0, r2
 8007196:	4798      	blx	r3
 8007198:	1e03      	subs	r3, r0, #0
 800719a:	d102      	bne.n	80071a2 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 800719c:	193b      	adds	r3, r7, r4
 800719e:	2200      	movs	r2, #0
 80071a0:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 80071a2:	230f      	movs	r3, #15
 80071a4:	18fb      	adds	r3, r7, r3
 80071a6:	781b      	ldrb	r3, [r3, #0]
}
 80071a8:	0018      	movs	r0, r3
 80071aa:	46bd      	mov	sp, r7
 80071ac:	b005      	add	sp, #20
 80071ae:	bd90      	pop	{r4, r7, pc}

080071b0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b082      	sub	sp, #8
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	000a      	movs	r2, r1
 80071ba:	1cfb      	adds	r3, r7, #3
 80071bc:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	23ad      	movs	r3, #173	; 0xad
 80071c2:	009b      	lsls	r3, r3, #2
 80071c4:	58d3      	ldr	r3, [r2, r3]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	1cfa      	adds	r2, r7, #3
 80071ca:	7811      	ldrb	r1, [r2, #0]
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	0010      	movs	r0, r2
 80071d0:	4798      	blx	r3

  return USBD_OK;
 80071d2:	2300      	movs	r3, #0
}
 80071d4:	0018      	movs	r0, r3
 80071d6:	46bd      	mov	sp, r7
 80071d8:	b002      	add	sp, #8
 80071da:	bd80      	pop	{r7, pc}

080071dc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b082      	sub	sp, #8
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	22aa      	movs	r2, #170	; 0xaa
 80071ea:	0092      	lsls	r2, r2, #2
 80071ec:	4694      	mov	ip, r2
 80071ee:	4463      	add	r3, ip
 80071f0:	683a      	ldr	r2, [r7, #0]
 80071f2:	0011      	movs	r1, r2
 80071f4:	0018      	movs	r0, r3
 80071f6:	f001 f810 	bl	800821a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	23a5      	movs	r3, #165	; 0xa5
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	2101      	movs	r1, #1
 8007202:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	4a23      	ldr	r2, [pc, #140]	; (8007294 <USBD_LL_SetupStage+0xb8>)
 8007208:	5a9b      	ldrh	r3, [r3, r2]
 800720a:	0019      	movs	r1, r3
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	23a6      	movs	r3, #166	; 0xa6
 8007210:	009b      	lsls	r3, r3, #2
 8007212:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	23aa      	movs	r3, #170	; 0xaa
 8007218:	009b      	lsls	r3, r3, #2
 800721a:	5cd3      	ldrb	r3, [r2, r3]
 800721c:	001a      	movs	r2, r3
 800721e:	231f      	movs	r3, #31
 8007220:	4013      	ands	r3, r2
 8007222:	2b02      	cmp	r3, #2
 8007224:	d019      	beq.n	800725a <USBD_LL_SetupStage+0x7e>
 8007226:	d822      	bhi.n	800726e <USBD_LL_SetupStage+0x92>
 8007228:	2b00      	cmp	r3, #0
 800722a:	d002      	beq.n	8007232 <USBD_LL_SetupStage+0x56>
 800722c:	2b01      	cmp	r3, #1
 800722e:	d00a      	beq.n	8007246 <USBD_LL_SetupStage+0x6a>
 8007230:	e01d      	b.n	800726e <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	22aa      	movs	r2, #170	; 0xaa
 8007236:	0092      	lsls	r2, r2, #2
 8007238:	189a      	adds	r2, r3, r2
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	0011      	movs	r1, r2
 800723e:	0018      	movs	r0, r3
 8007240:	f000 fa10 	bl	8007664 <USBD_StdDevReq>
      break;
 8007244:	e020      	b.n	8007288 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	22aa      	movs	r2, #170	; 0xaa
 800724a:	0092      	lsls	r2, r2, #2
 800724c:	189a      	adds	r2, r3, r2
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	0011      	movs	r1, r2
 8007252:	0018      	movs	r0, r3
 8007254:	f000 fa78 	bl	8007748 <USBD_StdItfReq>
      break;
 8007258:	e016      	b.n	8007288 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	22aa      	movs	r2, #170	; 0xaa
 800725e:	0092      	lsls	r2, r2, #2
 8007260:	189a      	adds	r2, r3, r2
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	0011      	movs	r1, r2
 8007266:	0018      	movs	r0, r3
 8007268:	f000 fac5 	bl	80077f6 <USBD_StdEPReq>
      break;
 800726c:	e00c      	b.n	8007288 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	23aa      	movs	r3, #170	; 0xaa
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	5cd3      	ldrb	r3, [r2, r3]
 8007276:	227f      	movs	r2, #127	; 0x7f
 8007278:	4393      	bics	r3, r2
 800727a:	b2da      	uxtb	r2, r3
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	0011      	movs	r1, r2
 8007280:	0018      	movs	r0, r3
 8007282:	f001 fd79 	bl	8008d78 <USBD_LL_StallEP>
      break;
 8007286:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	0018      	movs	r0, r3
 800728c:	46bd      	mov	sp, r7
 800728e:	b002      	add	sp, #8
 8007290:	bd80      	pop	{r7, pc}
 8007292:	46c0      	nop			; (mov r8, r8)
 8007294:	000002ae 	.word	0x000002ae

08007298 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b086      	sub	sp, #24
 800729c:	af00      	add	r7, sp, #0
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	607a      	str	r2, [r7, #4]
 80072a2:	200b      	movs	r0, #11
 80072a4:	183b      	adds	r3, r7, r0
 80072a6:	1c0a      	adds	r2, r1, #0
 80072a8:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80072aa:	183b      	adds	r3, r7, r0
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d154      	bne.n	800735c <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	3355      	adds	r3, #85	; 0x55
 80072b6:	33ff      	adds	r3, #255	; 0xff
 80072b8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80072ba:	68fa      	ldr	r2, [r7, #12]
 80072bc:	23a5      	movs	r3, #165	; 0xa5
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	58d3      	ldr	r3, [r2, r3]
 80072c2:	2b03      	cmp	r3, #3
 80072c4:	d139      	bne.n	800733a <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	68da      	ldr	r2, [r3, #12]
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	691b      	ldr	r3, [r3, #16]
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d919      	bls.n	8007306 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	68da      	ldr	r2, [r3, #12]
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	691b      	ldr	r3, [r3, #16]
 80072da:	1ad2      	subs	r2, r2, r3
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	68da      	ldr	r2, [r3, #12]
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d203      	bcs.n	80072f4 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	e002      	b.n	80072fa <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	6879      	ldr	r1, [r7, #4]
 80072fc:	68f8      	ldr	r0, [r7, #12]
 80072fe:	001a      	movs	r2, r3
 8007300:	f001 f877 	bl	80083f2 <USBD_CtlContinueRx>
 8007304:	e045      	b.n	8007392 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007306:	68fa      	ldr	r2, [r7, #12]
 8007308:	23ad      	movs	r3, #173	; 0xad
 800730a:	009b      	lsls	r3, r3, #2
 800730c:	58d3      	ldr	r3, [r2, r3]
 800730e:	691b      	ldr	r3, [r3, #16]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d00d      	beq.n	8007330 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007314:	68fa      	ldr	r2, [r7, #12]
 8007316:	23a7      	movs	r3, #167	; 0xa7
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800731c:	2b03      	cmp	r3, #3
 800731e:	d107      	bne.n	8007330 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007320:	68fa      	ldr	r2, [r7, #12]
 8007322:	23ad      	movs	r3, #173	; 0xad
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	58d3      	ldr	r3, [r2, r3]
 8007328:	691b      	ldr	r3, [r3, #16]
 800732a:	68fa      	ldr	r2, [r7, #12]
 800732c:	0010      	movs	r0, r2
 800732e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	0018      	movs	r0, r3
 8007334:	f001 f870 	bl	8008418 <USBD_CtlSendStatus>
 8007338:	e02b      	b.n	8007392 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800733a:	68fa      	ldr	r2, [r7, #12]
 800733c:	23a5      	movs	r3, #165	; 0xa5
 800733e:	009b      	lsls	r3, r3, #2
 8007340:	58d3      	ldr	r3, [r2, r3]
 8007342:	2b05      	cmp	r3, #5
 8007344:	d125      	bne.n	8007392 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007346:	68fa      	ldr	r2, [r7, #12]
 8007348:	23a5      	movs	r3, #165	; 0xa5
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	2100      	movs	r1, #0
 800734e:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2100      	movs	r1, #0
 8007354:	0018      	movs	r0, r3
 8007356:	f001 fd0f 	bl	8008d78 <USBD_LL_StallEP>
 800735a:	e01a      	b.n	8007392 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800735c:	68fa      	ldr	r2, [r7, #12]
 800735e:	23ad      	movs	r3, #173	; 0xad
 8007360:	009b      	lsls	r3, r3, #2
 8007362:	58d3      	ldr	r3, [r2, r3]
 8007364:	699b      	ldr	r3, [r3, #24]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d011      	beq.n	800738e <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800736a:	68fa      	ldr	r2, [r7, #12]
 800736c:	23a7      	movs	r3, #167	; 0xa7
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8007372:	2b03      	cmp	r3, #3
 8007374:	d10b      	bne.n	800738e <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007376:	68fa      	ldr	r2, [r7, #12]
 8007378:	23ad      	movs	r3, #173	; 0xad
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	58d3      	ldr	r3, [r2, r3]
 800737e:	699b      	ldr	r3, [r3, #24]
 8007380:	220b      	movs	r2, #11
 8007382:	18ba      	adds	r2, r7, r2
 8007384:	7811      	ldrb	r1, [r2, #0]
 8007386:	68fa      	ldr	r2, [r7, #12]
 8007388:	0010      	movs	r0, r2
 800738a:	4798      	blx	r3
 800738c:	e001      	b.n	8007392 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800738e:	2302      	movs	r3, #2
 8007390:	e000      	b.n	8007394 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8007392:	2300      	movs	r3, #0
}
 8007394:	0018      	movs	r0, r3
 8007396:	46bd      	mov	sp, r7
 8007398:	b006      	add	sp, #24
 800739a:	bd80      	pop	{r7, pc}

0800739c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b086      	sub	sp, #24
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	60f8      	str	r0, [r7, #12]
 80073a4:	607a      	str	r2, [r7, #4]
 80073a6:	200b      	movs	r0, #11
 80073a8:	183b      	adds	r3, r7, r0
 80073aa:	1c0a      	adds	r2, r1, #0
 80073ac:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80073ae:	183b      	adds	r3, r7, r0
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d000      	beq.n	80073b8 <USBD_LL_DataInStage+0x1c>
 80073b6:	e08e      	b.n	80074d6 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	3314      	adds	r3, #20
 80073bc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80073be:	68fa      	ldr	r2, [r7, #12]
 80073c0:	23a5      	movs	r3, #165	; 0xa5
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	58d3      	ldr	r3, [r2, r3]
 80073c6:	2b02      	cmp	r3, #2
 80073c8:	d164      	bne.n	8007494 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	68da      	ldr	r2, [r3, #12]
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	691b      	ldr	r3, [r3, #16]
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d915      	bls.n	8007402 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	68da      	ldr	r2, [r3, #12]
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	691b      	ldr	r3, [r3, #16]
 80073de:	1ad2      	subs	r2, r2, r3
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	b29a      	uxth	r2, r3
 80073ea:	6879      	ldr	r1, [r7, #4]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	0018      	movs	r0, r3
 80073f0:	f000 ffec 	bl	80083cc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073f4:	68f8      	ldr	r0, [r7, #12]
 80073f6:	2300      	movs	r3, #0
 80073f8:	2200      	movs	r2, #0
 80073fa:	2100      	movs	r1, #0
 80073fc:	f001 fda5 	bl	8008f4a <USBD_LL_PrepareReceive>
 8007400:	e059      	b.n	80074b6 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	689a      	ldr	r2, [r3, #8]
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	691b      	ldr	r3, [r3, #16]
 800740a:	0019      	movs	r1, r3
 800740c:	0010      	movs	r0, r2
 800740e:	f7f8 ff09 	bl	8000224 <__aeabi_uidivmod>
 8007412:	1e0b      	subs	r3, r1, #0
 8007414:	d11f      	bne.n	8007456 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	689a      	ldr	r2, [r3, #8]
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800741e:	429a      	cmp	r2, r3
 8007420:	d319      	bcc.n	8007456 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	689a      	ldr	r2, [r3, #8]
 8007426:	68f9      	ldr	r1, [r7, #12]
 8007428:	23a6      	movs	r3, #166	; 0xa6
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 800742e:	429a      	cmp	r2, r3
 8007430:	d211      	bcs.n	8007456 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2200      	movs	r2, #0
 8007436:	2100      	movs	r1, #0
 8007438:	0018      	movs	r0, r3
 800743a:	f000 ffc7 	bl	80083cc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800743e:	68fa      	ldr	r2, [r7, #12]
 8007440:	23a6      	movs	r3, #166	; 0xa6
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	2100      	movs	r1, #0
 8007446:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007448:	68f8      	ldr	r0, [r7, #12]
 800744a:	2300      	movs	r3, #0
 800744c:	2200      	movs	r2, #0
 800744e:	2100      	movs	r1, #0
 8007450:	f001 fd7b 	bl	8008f4a <USBD_LL_PrepareReceive>
 8007454:	e02f      	b.n	80074b6 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007456:	68fa      	ldr	r2, [r7, #12]
 8007458:	23ad      	movs	r3, #173	; 0xad
 800745a:	009b      	lsls	r3, r3, #2
 800745c:	58d3      	ldr	r3, [r2, r3]
 800745e:	68db      	ldr	r3, [r3, #12]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d00d      	beq.n	8007480 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007464:	68fa      	ldr	r2, [r7, #12]
 8007466:	23a7      	movs	r3, #167	; 0xa7
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800746c:	2b03      	cmp	r3, #3
 800746e:	d107      	bne.n	8007480 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007470:	68fa      	ldr	r2, [r7, #12]
 8007472:	23ad      	movs	r3, #173	; 0xad
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	58d3      	ldr	r3, [r2, r3]
 8007478:	68db      	ldr	r3, [r3, #12]
 800747a:	68fa      	ldr	r2, [r7, #12]
 800747c:	0010      	movs	r0, r2
 800747e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2180      	movs	r1, #128	; 0x80
 8007484:	0018      	movs	r0, r3
 8007486:	f001 fc77 	bl	8008d78 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	0018      	movs	r0, r3
 800748e:	f000 ffd7 	bl	8008440 <USBD_CtlReceiveStatus>
 8007492:	e010      	b.n	80074b6 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007494:	68fa      	ldr	r2, [r7, #12]
 8007496:	23a5      	movs	r3, #165	; 0xa5
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	58d3      	ldr	r3, [r2, r3]
 800749c:	2b04      	cmp	r3, #4
 800749e:	d005      	beq.n	80074ac <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80074a0:	68fa      	ldr	r2, [r7, #12]
 80074a2:	23a5      	movs	r3, #165	; 0xa5
 80074a4:	009b      	lsls	r3, r3, #2
 80074a6:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d104      	bne.n	80074b6 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2180      	movs	r1, #128	; 0x80
 80074b0:	0018      	movs	r0, r3
 80074b2:	f001 fc61 	bl	8008d78 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80074b6:	68fa      	ldr	r2, [r7, #12]
 80074b8:	23a8      	movs	r3, #168	; 0xa8
 80074ba:	009b      	lsls	r3, r3, #2
 80074bc:	5cd3      	ldrb	r3, [r2, r3]
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d124      	bne.n	800750c <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	0018      	movs	r0, r3
 80074c6:	f7ff fe43 	bl	8007150 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80074ca:	68fa      	ldr	r2, [r7, #12]
 80074cc:	23a8      	movs	r3, #168	; 0xa8
 80074ce:	009b      	lsls	r3, r3, #2
 80074d0:	2100      	movs	r1, #0
 80074d2:	54d1      	strb	r1, [r2, r3]
 80074d4:	e01a      	b.n	800750c <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80074d6:	68fa      	ldr	r2, [r7, #12]
 80074d8:	23ad      	movs	r3, #173	; 0xad
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	58d3      	ldr	r3, [r2, r3]
 80074de:	695b      	ldr	r3, [r3, #20]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d011      	beq.n	8007508 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80074e4:	68fa      	ldr	r2, [r7, #12]
 80074e6:	23a7      	movs	r3, #167	; 0xa7
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 80074ec:	2b03      	cmp	r3, #3
 80074ee:	d10b      	bne.n	8007508 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80074f0:	68fa      	ldr	r2, [r7, #12]
 80074f2:	23ad      	movs	r3, #173	; 0xad
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	58d3      	ldr	r3, [r2, r3]
 80074f8:	695b      	ldr	r3, [r3, #20]
 80074fa:	220b      	movs	r2, #11
 80074fc:	18ba      	adds	r2, r7, r2
 80074fe:	7811      	ldrb	r1, [r2, #0]
 8007500:	68fa      	ldr	r2, [r7, #12]
 8007502:	0010      	movs	r0, r2
 8007504:	4798      	blx	r3
 8007506:	e001      	b.n	800750c <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007508:	2302      	movs	r3, #2
 800750a:	e000      	b.n	800750e <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 800750c:	2300      	movs	r3, #0
}
 800750e:	0018      	movs	r0, r3
 8007510:	46bd      	mov	sp, r7
 8007512:	b006      	add	sp, #24
 8007514:	bd80      	pop	{r7, pc}

08007516 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007516:	b580      	push	{r7, lr}
 8007518:	b082      	sub	sp, #8
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	2340      	movs	r3, #64	; 0x40
 8007522:	2200      	movs	r2, #0
 8007524:	2100      	movs	r1, #0
 8007526:	f001 fb9a 	bl	8008c5e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	23ac      	movs	r3, #172	; 0xac
 800752e:	005b      	lsls	r3, r3, #1
 8007530:	2101      	movs	r1, #1
 8007532:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	23b2      	movs	r3, #178	; 0xb2
 8007538:	005b      	lsls	r3, r3, #1
 800753a:	2140      	movs	r1, #64	; 0x40
 800753c:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	2340      	movs	r3, #64	; 0x40
 8007542:	2200      	movs	r2, #0
 8007544:	2180      	movs	r1, #128	; 0x80
 8007546:	f001 fb8a 	bl	8008c5e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2201      	movs	r2, #1
 800754e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2240      	movs	r2, #64	; 0x40
 8007554:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	23a7      	movs	r3, #167	; 0xa7
 800755a:	009b      	lsls	r3, r3, #2
 800755c:	2101      	movs	r1, #1
 800755e:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	23a5      	movs	r3, #165	; 0xa5
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	2100      	movs	r1, #0
 8007568:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	23a9      	movs	r3, #169	; 0xa9
 8007574:	009b      	lsls	r3, r3, #2
 8007576:	2100      	movs	r1, #0
 8007578:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	23ae      	movs	r3, #174	; 0xae
 800757e:	009b      	lsls	r3, r3, #2
 8007580:	58d3      	ldr	r3, [r2, r3]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d00a      	beq.n	800759c <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	23ad      	movs	r3, #173	; 0xad
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	58d3      	ldr	r3, [r2, r3]
 800758e:	685a      	ldr	r2, [r3, #4]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	b2d9      	uxtb	r1, r3
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	0018      	movs	r0, r3
 800759a:	4790      	blx	r2
  }

  return USBD_OK;
 800759c:	2300      	movs	r3, #0
}
 800759e:	0018      	movs	r0, r3
 80075a0:	46bd      	mov	sp, r7
 80075a2:	b002      	add	sp, #8
 80075a4:	bd80      	pop	{r7, pc}

080075a6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80075a6:	b580      	push	{r7, lr}
 80075a8:	b082      	sub	sp, #8
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
 80075ae:	000a      	movs	r2, r1
 80075b0:	1cfb      	adds	r3, r7, #3
 80075b2:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	1cfa      	adds	r2, r7, #3
 80075b8:	7812      	ldrb	r2, [r2, #0]
 80075ba:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	0018      	movs	r0, r3
 80075c0:	46bd      	mov	sp, r7
 80075c2:	b002      	add	sp, #8
 80075c4:	bd80      	pop	{r7, pc}
	...

080075c8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b082      	sub	sp, #8
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80075d0:	687a      	ldr	r2, [r7, #4]
 80075d2:	23a7      	movs	r3, #167	; 0xa7
 80075d4:	009b      	lsls	r3, r3, #2
 80075d6:	5cd1      	ldrb	r1, [r2, r3]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	4a06      	ldr	r2, [pc, #24]	; (80075f4 <USBD_LL_Suspend+0x2c>)
 80075dc:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	23a7      	movs	r3, #167	; 0xa7
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	2104      	movs	r1, #4
 80075e6:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 80075e8:	2300      	movs	r3, #0
}
 80075ea:	0018      	movs	r0, r3
 80075ec:	46bd      	mov	sp, r7
 80075ee:	b002      	add	sp, #8
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	46c0      	nop			; (mov r8, r8)
 80075f4:	0000029d 	.word	0x0000029d

080075f8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	23a7      	movs	r3, #167	; 0xa7
 8007604:	009b      	lsls	r3, r3, #2
 8007606:	5cd3      	ldrb	r3, [r2, r3]
 8007608:	2b04      	cmp	r3, #4
 800760a:	d106      	bne.n	800761a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	4a05      	ldr	r2, [pc, #20]	; (8007624 <USBD_LL_Resume+0x2c>)
 8007610:	5c99      	ldrb	r1, [r3, r2]
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	23a7      	movs	r3, #167	; 0xa7
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800761a:	2300      	movs	r3, #0
}
 800761c:	0018      	movs	r0, r3
 800761e:	46bd      	mov	sp, r7
 8007620:	b002      	add	sp, #8
 8007622:	bd80      	pop	{r7, pc}
 8007624:	0000029d 	.word	0x0000029d

08007628 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	23a7      	movs	r3, #167	; 0xa7
 8007634:	009b      	lsls	r3, r3, #2
 8007636:	5cd3      	ldrb	r3, [r2, r3]
 8007638:	2b03      	cmp	r3, #3
 800763a:	d10e      	bne.n	800765a <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 800763c:	687a      	ldr	r2, [r7, #4]
 800763e:	23ad      	movs	r3, #173	; 0xad
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	58d3      	ldr	r3, [r2, r3]
 8007644:	69db      	ldr	r3, [r3, #28]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d007      	beq.n	800765a <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	23ad      	movs	r3, #173	; 0xad
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	58d3      	ldr	r3, [r2, r3]
 8007652:	69db      	ldr	r3, [r3, #28]
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	0010      	movs	r0, r2
 8007658:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800765a:	2300      	movs	r3, #0
}
 800765c:	0018      	movs	r0, r3
 800765e:	46bd      	mov	sp, r7
 8007660:	b002      	add	sp, #8
 8007662:	bd80      	pop	{r7, pc}

08007664 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b084      	sub	sp, #16
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800766e:	230f      	movs	r3, #15
 8007670:	18fb      	adds	r3, r7, r3
 8007672:	2200      	movs	r2, #0
 8007674:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	001a      	movs	r2, r3
 800767c:	2360      	movs	r3, #96	; 0x60
 800767e:	4013      	ands	r3, r2
 8007680:	2b40      	cmp	r3, #64	; 0x40
 8007682:	d004      	beq.n	800768e <USBD_StdDevReq+0x2a>
 8007684:	d84f      	bhi.n	8007726 <USBD_StdDevReq+0xc2>
 8007686:	2b00      	cmp	r3, #0
 8007688:	d00b      	beq.n	80076a2 <USBD_StdDevReq+0x3e>
 800768a:	2b20      	cmp	r3, #32
 800768c:	d14b      	bne.n	8007726 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	23ad      	movs	r3, #173	; 0xad
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	58d3      	ldr	r3, [r2, r3]
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	6839      	ldr	r1, [r7, #0]
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	0010      	movs	r0, r2
 800769e:	4798      	blx	r3
      break;
 80076a0:	e048      	b.n	8007734 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	785b      	ldrb	r3, [r3, #1]
 80076a6:	2b09      	cmp	r3, #9
 80076a8:	d835      	bhi.n	8007716 <USBD_StdDevReq+0xb2>
 80076aa:	009a      	lsls	r2, r3, #2
 80076ac:	4b25      	ldr	r3, [pc, #148]	; (8007744 <USBD_StdDevReq+0xe0>)
 80076ae:	18d3      	adds	r3, r2, r3
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80076b4:	683a      	ldr	r2, [r7, #0]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	0011      	movs	r1, r2
 80076ba:	0018      	movs	r0, r3
 80076bc:	f000 fa52 	bl	8007b64 <USBD_GetDescriptor>
          break;
 80076c0:	e030      	b.n	8007724 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80076c2:	683a      	ldr	r2, [r7, #0]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	0011      	movs	r1, r2
 80076c8:	0018      	movs	r0, r3
 80076ca:	f000 fbfd 	bl	8007ec8 <USBD_SetAddress>
          break;
 80076ce:	e029      	b.n	8007724 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80076d0:	683a      	ldr	r2, [r7, #0]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	0011      	movs	r1, r2
 80076d6:	0018      	movs	r0, r3
 80076d8:	f000 fc4a 	bl	8007f70 <USBD_SetConfig>
          break;
 80076dc:	e022      	b.n	8007724 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80076de:	683a      	ldr	r2, [r7, #0]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	0011      	movs	r1, r2
 80076e4:	0018      	movs	r0, r3
 80076e6:	f000 fce7 	bl	80080b8 <USBD_GetConfig>
          break;
 80076ea:	e01b      	b.n	8007724 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80076ec:	683a      	ldr	r2, [r7, #0]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	0011      	movs	r1, r2
 80076f2:	0018      	movs	r0, r3
 80076f4:	f000 fd1b 	bl	800812e <USBD_GetStatus>
          break;
 80076f8:	e014      	b.n	8007724 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80076fa:	683a      	ldr	r2, [r7, #0]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	0011      	movs	r1, r2
 8007700:	0018      	movs	r0, r3
 8007702:	f000 fd4e 	bl	80081a2 <USBD_SetFeature>
          break;
 8007706:	e00d      	b.n	8007724 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007708:	683a      	ldr	r2, [r7, #0]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	0011      	movs	r1, r2
 800770e:	0018      	movs	r0, r3
 8007710:	f000 fd5d 	bl	80081ce <USBD_ClrFeature>
          break;
 8007714:	e006      	b.n	8007724 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007716:	683a      	ldr	r2, [r7, #0]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	0011      	movs	r1, r2
 800771c:	0018      	movs	r0, r3
 800771e:	f000 fdb7 	bl	8008290 <USBD_CtlError>
          break;
 8007722:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8007724:	e006      	b.n	8007734 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007726:	683a      	ldr	r2, [r7, #0]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	0011      	movs	r1, r2
 800772c:	0018      	movs	r0, r3
 800772e:	f000 fdaf 	bl	8008290 <USBD_CtlError>
      break;
 8007732:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8007734:	230f      	movs	r3, #15
 8007736:	18fb      	adds	r3, r7, r3
 8007738:	781b      	ldrb	r3, [r3, #0]
}
 800773a:	0018      	movs	r0, r3
 800773c:	46bd      	mov	sp, r7
 800773e:	b004      	add	sp, #16
 8007740:	bd80      	pop	{r7, pc}
 8007742:	46c0      	nop			; (mov r8, r8)
 8007744:	08009304 	.word	0x08009304

08007748 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007748:	b5b0      	push	{r4, r5, r7, lr}
 800774a:	b084      	sub	sp, #16
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007752:	230f      	movs	r3, #15
 8007754:	18fb      	adds	r3, r7, r3
 8007756:	2200      	movs	r2, #0
 8007758:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	001a      	movs	r2, r3
 8007760:	2360      	movs	r3, #96	; 0x60
 8007762:	4013      	ands	r3, r2
 8007764:	2b40      	cmp	r3, #64	; 0x40
 8007766:	d004      	beq.n	8007772 <USBD_StdItfReq+0x2a>
 8007768:	d839      	bhi.n	80077de <USBD_StdItfReq+0x96>
 800776a:	2b00      	cmp	r3, #0
 800776c:	d001      	beq.n	8007772 <USBD_StdItfReq+0x2a>
 800776e:	2b20      	cmp	r3, #32
 8007770:	d135      	bne.n	80077de <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	23a7      	movs	r3, #167	; 0xa7
 8007776:	009b      	lsls	r3, r3, #2
 8007778:	5cd3      	ldrb	r3, [r2, r3]
 800777a:	3b01      	subs	r3, #1
 800777c:	2b02      	cmp	r3, #2
 800777e:	d825      	bhi.n	80077cc <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	889b      	ldrh	r3, [r3, #4]
 8007784:	b2db      	uxtb	r3, r3
 8007786:	2b01      	cmp	r3, #1
 8007788:	d819      	bhi.n	80077be <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	23ad      	movs	r3, #173	; 0xad
 800778e:	009b      	lsls	r3, r3, #2
 8007790:	58d3      	ldr	r3, [r2, r3]
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	250f      	movs	r5, #15
 8007796:	197c      	adds	r4, r7, r5
 8007798:	6839      	ldr	r1, [r7, #0]
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	0010      	movs	r0, r2
 800779e:	4798      	blx	r3
 80077a0:	0003      	movs	r3, r0
 80077a2:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	88db      	ldrh	r3, [r3, #6]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d116      	bne.n	80077da <USBD_StdItfReq+0x92>
 80077ac:	197b      	adds	r3, r7, r5
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d112      	bne.n	80077da <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	0018      	movs	r0, r3
 80077b8:	f000 fe2e 	bl	8008418 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80077bc:	e00d      	b.n	80077da <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 80077be:	683a      	ldr	r2, [r7, #0]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	0011      	movs	r1, r2
 80077c4:	0018      	movs	r0, r3
 80077c6:	f000 fd63 	bl	8008290 <USBD_CtlError>
          break;
 80077ca:	e006      	b.n	80077da <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 80077cc:	683a      	ldr	r2, [r7, #0]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	0011      	movs	r1, r2
 80077d2:	0018      	movs	r0, r3
 80077d4:	f000 fd5c 	bl	8008290 <USBD_CtlError>
          break;
 80077d8:	e000      	b.n	80077dc <USBD_StdItfReq+0x94>
          break;
 80077da:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80077dc:	e006      	b.n	80077ec <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 80077de:	683a      	ldr	r2, [r7, #0]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	0011      	movs	r1, r2
 80077e4:	0018      	movs	r0, r3
 80077e6:	f000 fd53 	bl	8008290 <USBD_CtlError>
      break;
 80077ea:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 80077ec:	2300      	movs	r3, #0
}
 80077ee:	0018      	movs	r0, r3
 80077f0:	46bd      	mov	sp, r7
 80077f2:	b004      	add	sp, #16
 80077f4:	bdb0      	pop	{r4, r5, r7, pc}

080077f6 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80077f6:	b5b0      	push	{r4, r5, r7, lr}
 80077f8:	b084      	sub	sp, #16
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
 80077fe:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007800:	230f      	movs	r3, #15
 8007802:	18fb      	adds	r3, r7, r3
 8007804:	2200      	movs	r2, #0
 8007806:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	889a      	ldrh	r2, [r3, #4]
 800780c:	230e      	movs	r3, #14
 800780e:	18fb      	adds	r3, r7, r3
 8007810:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	001a      	movs	r2, r3
 8007818:	2360      	movs	r3, #96	; 0x60
 800781a:	4013      	ands	r3, r2
 800781c:	2b40      	cmp	r3, #64	; 0x40
 800781e:	d006      	beq.n	800782e <USBD_StdEPReq+0x38>
 8007820:	d900      	bls.n	8007824 <USBD_StdEPReq+0x2e>
 8007822:	e190      	b.n	8007b46 <USBD_StdEPReq+0x350>
 8007824:	2b00      	cmp	r3, #0
 8007826:	d00c      	beq.n	8007842 <USBD_StdEPReq+0x4c>
 8007828:	2b20      	cmp	r3, #32
 800782a:	d000      	beq.n	800782e <USBD_StdEPReq+0x38>
 800782c:	e18b      	b.n	8007b46 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	23ad      	movs	r3, #173	; 0xad
 8007832:	009b      	lsls	r3, r3, #2
 8007834:	58d3      	ldr	r3, [r2, r3]
 8007836:	689b      	ldr	r3, [r3, #8]
 8007838:	6839      	ldr	r1, [r7, #0]
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	0010      	movs	r0, r2
 800783e:	4798      	blx	r3
      break;
 8007840:	e188      	b.n	8007b54 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	001a      	movs	r2, r3
 8007848:	2360      	movs	r3, #96	; 0x60
 800784a:	4013      	ands	r3, r2
 800784c:	2b20      	cmp	r3, #32
 800784e:	d10f      	bne.n	8007870 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	23ad      	movs	r3, #173	; 0xad
 8007854:	009b      	lsls	r3, r3, #2
 8007856:	58d3      	ldr	r3, [r2, r3]
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	250f      	movs	r5, #15
 800785c:	197c      	adds	r4, r7, r5
 800785e:	6839      	ldr	r1, [r7, #0]
 8007860:	687a      	ldr	r2, [r7, #4]
 8007862:	0010      	movs	r0, r2
 8007864:	4798      	blx	r3
 8007866:	0003      	movs	r3, r0
 8007868:	7023      	strb	r3, [r4, #0]

        return ret;
 800786a:	197b      	adds	r3, r7, r5
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	e174      	b.n	8007b5a <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	785b      	ldrb	r3, [r3, #1]
 8007874:	2b03      	cmp	r3, #3
 8007876:	d007      	beq.n	8007888 <USBD_StdEPReq+0x92>
 8007878:	dd00      	ble.n	800787c <USBD_StdEPReq+0x86>
 800787a:	e15c      	b.n	8007b36 <USBD_StdEPReq+0x340>
 800787c:	2b00      	cmp	r3, #0
 800787e:	d100      	bne.n	8007882 <USBD_StdEPReq+0x8c>
 8007880:	e092      	b.n	80079a8 <USBD_StdEPReq+0x1b2>
 8007882:	2b01      	cmp	r3, #1
 8007884:	d04b      	beq.n	800791e <USBD_StdEPReq+0x128>
 8007886:	e156      	b.n	8007b36 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	23a7      	movs	r3, #167	; 0xa7
 800788c:	009b      	lsls	r3, r3, #2
 800788e:	5cd3      	ldrb	r3, [r2, r3]
 8007890:	2b02      	cmp	r3, #2
 8007892:	d002      	beq.n	800789a <USBD_StdEPReq+0xa4>
 8007894:	2b03      	cmp	r3, #3
 8007896:	d01d      	beq.n	80078d4 <USBD_StdEPReq+0xde>
 8007898:	e039      	b.n	800790e <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800789a:	220e      	movs	r2, #14
 800789c:	18bb      	adds	r3, r7, r2
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d010      	beq.n	80078c6 <USBD_StdEPReq+0xd0>
 80078a4:	18bb      	adds	r3, r7, r2
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	2b80      	cmp	r3, #128	; 0x80
 80078aa:	d00c      	beq.n	80078c6 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80078ac:	18bb      	adds	r3, r7, r2
 80078ae:	781a      	ldrb	r2, [r3, #0]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	0011      	movs	r1, r2
 80078b4:	0018      	movs	r0, r3
 80078b6:	f001 fa5f 	bl	8008d78 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2180      	movs	r1, #128	; 0x80
 80078be:	0018      	movs	r0, r3
 80078c0:	f001 fa5a 	bl	8008d78 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80078c4:	e02a      	b.n	800791c <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 80078c6:	683a      	ldr	r2, [r7, #0]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	0011      	movs	r1, r2
 80078cc:	0018      	movs	r0, r3
 80078ce:	f000 fcdf 	bl	8008290 <USBD_CtlError>
              break;
 80078d2:	e023      	b.n	800791c <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	885b      	ldrh	r3, [r3, #2]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d113      	bne.n	8007904 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 80078dc:	220e      	movs	r2, #14
 80078de:	18bb      	adds	r3, r7, r2
 80078e0:	781b      	ldrb	r3, [r3, #0]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d00e      	beq.n	8007904 <USBD_StdEPReq+0x10e>
 80078e6:	18bb      	adds	r3, r7, r2
 80078e8:	781b      	ldrb	r3, [r3, #0]
 80078ea:	2b80      	cmp	r3, #128	; 0x80
 80078ec:	d00a      	beq.n	8007904 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	88db      	ldrh	r3, [r3, #6]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d106      	bne.n	8007904 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80078f6:	18bb      	adds	r3, r7, r2
 80078f8:	781a      	ldrb	r2, [r3, #0]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	0011      	movs	r1, r2
 80078fe:	0018      	movs	r0, r3
 8007900:	f001 fa3a 	bl	8008d78 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	0018      	movs	r0, r3
 8007908:	f000 fd86 	bl	8008418 <USBD_CtlSendStatus>

              break;
 800790c:	e006      	b.n	800791c <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 800790e:	683a      	ldr	r2, [r7, #0]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	0011      	movs	r1, r2
 8007914:	0018      	movs	r0, r3
 8007916:	f000 fcbb 	bl	8008290 <USBD_CtlError>
              break;
 800791a:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800791c:	e112      	b.n	8007b44 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800791e:	687a      	ldr	r2, [r7, #4]
 8007920:	23a7      	movs	r3, #167	; 0xa7
 8007922:	009b      	lsls	r3, r3, #2
 8007924:	5cd3      	ldrb	r3, [r2, r3]
 8007926:	2b02      	cmp	r3, #2
 8007928:	d002      	beq.n	8007930 <USBD_StdEPReq+0x13a>
 800792a:	2b03      	cmp	r3, #3
 800792c:	d01d      	beq.n	800796a <USBD_StdEPReq+0x174>
 800792e:	e032      	b.n	8007996 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007930:	220e      	movs	r2, #14
 8007932:	18bb      	adds	r3, r7, r2
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d010      	beq.n	800795c <USBD_StdEPReq+0x166>
 800793a:	18bb      	adds	r3, r7, r2
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	2b80      	cmp	r3, #128	; 0x80
 8007940:	d00c      	beq.n	800795c <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007942:	18bb      	adds	r3, r7, r2
 8007944:	781a      	ldrb	r2, [r3, #0]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	0011      	movs	r1, r2
 800794a:	0018      	movs	r0, r3
 800794c:	f001 fa14 	bl	8008d78 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2180      	movs	r1, #128	; 0x80
 8007954:	0018      	movs	r0, r3
 8007956:	f001 fa0f 	bl	8008d78 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800795a:	e024      	b.n	80079a6 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 800795c:	683a      	ldr	r2, [r7, #0]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	0011      	movs	r1, r2
 8007962:	0018      	movs	r0, r3
 8007964:	f000 fc94 	bl	8008290 <USBD_CtlError>
              break;
 8007968:	e01d      	b.n	80079a6 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	885b      	ldrh	r3, [r3, #2]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d118      	bne.n	80079a4 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007972:	210e      	movs	r1, #14
 8007974:	187b      	adds	r3, r7, r1
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	227f      	movs	r2, #127	; 0x7f
 800797a:	4013      	ands	r3, r2
 800797c:	d006      	beq.n	800798c <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800797e:	187b      	adds	r3, r7, r1
 8007980:	781a      	ldrb	r2, [r3, #0]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	0011      	movs	r1, r2
 8007986:	0018      	movs	r0, r3
 8007988:	f001 fa21 	bl	8008dce <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	0018      	movs	r0, r3
 8007990:	f000 fd42 	bl	8008418 <USBD_CtlSendStatus>
              }
              break;
 8007994:	e006      	b.n	80079a4 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 8007996:	683a      	ldr	r2, [r7, #0]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	0011      	movs	r1, r2
 800799c:	0018      	movs	r0, r3
 800799e:	f000 fc77 	bl	8008290 <USBD_CtlError>
              break;
 80079a2:	e000      	b.n	80079a6 <USBD_StdEPReq+0x1b0>
              break;
 80079a4:	46c0      	nop			; (mov r8, r8)
          }
          break;
 80079a6:	e0cd      	b.n	8007b44 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80079a8:	687a      	ldr	r2, [r7, #4]
 80079aa:	23a7      	movs	r3, #167	; 0xa7
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	5cd3      	ldrb	r3, [r2, r3]
 80079b0:	2b02      	cmp	r3, #2
 80079b2:	d002      	beq.n	80079ba <USBD_StdEPReq+0x1c4>
 80079b4:	2b03      	cmp	r3, #3
 80079b6:	d03c      	beq.n	8007a32 <USBD_StdEPReq+0x23c>
 80079b8:	e0b5      	b.n	8007b26 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079ba:	220e      	movs	r2, #14
 80079bc:	18bb      	adds	r3, r7, r2
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d00a      	beq.n	80079da <USBD_StdEPReq+0x1e4>
 80079c4:	18bb      	adds	r3, r7, r2
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	2b80      	cmp	r3, #128	; 0x80
 80079ca:	d006      	beq.n	80079da <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 80079cc:	683a      	ldr	r2, [r7, #0]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	0011      	movs	r1, r2
 80079d2:	0018      	movs	r0, r3
 80079d4:	f000 fc5c 	bl	8008290 <USBD_CtlError>
                break;
 80079d8:	e0ac      	b.n	8007b34 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079da:	220e      	movs	r2, #14
 80079dc:	18bb      	adds	r3, r7, r2
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	b25b      	sxtb	r3, r3
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	da0c      	bge.n	8007a00 <USBD_StdEPReq+0x20a>
 80079e6:	18bb      	adds	r3, r7, r2
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	227f      	movs	r2, #127	; 0x7f
 80079ec:	401a      	ands	r2, r3
 80079ee:	0013      	movs	r3, r2
 80079f0:	009b      	lsls	r3, r3, #2
 80079f2:	189b      	adds	r3, r3, r2
 80079f4:	009b      	lsls	r3, r3, #2
 80079f6:	3310      	adds	r3, #16
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	18d3      	adds	r3, r2, r3
 80079fc:	3304      	adds	r3, #4
 80079fe:	e00d      	b.n	8007a1c <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007a00:	230e      	movs	r3, #14
 8007a02:	18fb      	adds	r3, r7, r3
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	227f      	movs	r2, #127	; 0x7f
 8007a08:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a0a:	0013      	movs	r3, r2
 8007a0c:	009b      	lsls	r3, r3, #2
 8007a0e:	189b      	adds	r3, r3, r2
 8007a10:	009b      	lsls	r3, r3, #2
 8007a12:	3351      	adds	r3, #81	; 0x51
 8007a14:	33ff      	adds	r3, #255	; 0xff
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	18d3      	adds	r3, r2, r3
 8007a1a:	3304      	adds	r3, #4
 8007a1c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	2200      	movs	r2, #0
 8007a22:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007a24:	68b9      	ldr	r1, [r7, #8]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2202      	movs	r2, #2
 8007a2a:	0018      	movs	r0, r3
 8007a2c:	f000 fcae 	bl	800838c <USBD_CtlSendData>
              break;
 8007a30:	e080      	b.n	8007b34 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007a32:	220e      	movs	r2, #14
 8007a34:	18bb      	adds	r3, r7, r2
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	b25b      	sxtb	r3, r3
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	da14      	bge.n	8007a68 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007a3e:	18bb      	adds	r3, r7, r2
 8007a40:	781b      	ldrb	r3, [r3, #0]
 8007a42:	220f      	movs	r2, #15
 8007a44:	401a      	ands	r2, r3
 8007a46:	6879      	ldr	r1, [r7, #4]
 8007a48:	0013      	movs	r3, r2
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	189b      	adds	r3, r3, r2
 8007a4e:	009b      	lsls	r3, r3, #2
 8007a50:	18cb      	adds	r3, r1, r3
 8007a52:	3318      	adds	r3, #24
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d11e      	bne.n	8007a98 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8007a5a:	683a      	ldr	r2, [r7, #0]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	0011      	movs	r1, r2
 8007a60:	0018      	movs	r0, r3
 8007a62:	f000 fc15 	bl	8008290 <USBD_CtlError>
                  break;
 8007a66:	e065      	b.n	8007b34 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007a68:	230e      	movs	r3, #14
 8007a6a:	18fb      	adds	r3, r7, r3
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	220f      	movs	r2, #15
 8007a70:	401a      	ands	r2, r3
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	23ac      	movs	r3, #172	; 0xac
 8007a76:	0059      	lsls	r1, r3, #1
 8007a78:	0013      	movs	r3, r2
 8007a7a:	009b      	lsls	r3, r3, #2
 8007a7c:	189b      	adds	r3, r3, r2
 8007a7e:	009b      	lsls	r3, r3, #2
 8007a80:	18c3      	adds	r3, r0, r3
 8007a82:	185b      	adds	r3, r3, r1
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d106      	bne.n	8007a98 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8007a8a:	683a      	ldr	r2, [r7, #0]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	0011      	movs	r1, r2
 8007a90:	0018      	movs	r0, r3
 8007a92:	f000 fbfd 	bl	8008290 <USBD_CtlError>
                  break;
 8007a96:	e04d      	b.n	8007b34 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a98:	220e      	movs	r2, #14
 8007a9a:	18bb      	adds	r3, r7, r2
 8007a9c:	781b      	ldrb	r3, [r3, #0]
 8007a9e:	b25b      	sxtb	r3, r3
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	da0c      	bge.n	8007abe <USBD_StdEPReq+0x2c8>
 8007aa4:	18bb      	adds	r3, r7, r2
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	227f      	movs	r2, #127	; 0x7f
 8007aaa:	401a      	ands	r2, r3
 8007aac:	0013      	movs	r3, r2
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	189b      	adds	r3, r3, r2
 8007ab2:	009b      	lsls	r3, r3, #2
 8007ab4:	3310      	adds	r3, #16
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	18d3      	adds	r3, r2, r3
 8007aba:	3304      	adds	r3, #4
 8007abc:	e00d      	b.n	8007ada <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007abe:	230e      	movs	r3, #14
 8007ac0:	18fb      	adds	r3, r7, r3
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	227f      	movs	r2, #127	; 0x7f
 8007ac6:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ac8:	0013      	movs	r3, r2
 8007aca:	009b      	lsls	r3, r3, #2
 8007acc:	189b      	adds	r3, r3, r2
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	3351      	adds	r3, #81	; 0x51
 8007ad2:	33ff      	adds	r3, #255	; 0xff
 8007ad4:	687a      	ldr	r2, [r7, #4]
 8007ad6:	18d3      	adds	r3, r2, r3
 8007ad8:	3304      	adds	r3, #4
 8007ada:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007adc:	220e      	movs	r2, #14
 8007ade:	18bb      	adds	r3, r7, r2
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d003      	beq.n	8007aee <USBD_StdEPReq+0x2f8>
 8007ae6:	18bb      	adds	r3, r7, r2
 8007ae8:	781b      	ldrb	r3, [r3, #0]
 8007aea:	2b80      	cmp	r3, #128	; 0x80
 8007aec:	d103      	bne.n	8007af6 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	2200      	movs	r2, #0
 8007af2:	601a      	str	r2, [r3, #0]
 8007af4:	e010      	b.n	8007b18 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007af6:	230e      	movs	r3, #14
 8007af8:	18fb      	adds	r3, r7, r3
 8007afa:	781a      	ldrb	r2, [r3, #0]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	0011      	movs	r1, r2
 8007b00:	0018      	movs	r0, r3
 8007b02:	f001 f98f 	bl	8008e24 <USBD_LL_IsStallEP>
 8007b06:	1e03      	subs	r3, r0, #0
 8007b08:	d003      	beq.n	8007b12 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	601a      	str	r2, [r3, #0]
 8007b10:	e002      	b.n	8007b18 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	2200      	movs	r2, #0
 8007b16:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007b18:	68b9      	ldr	r1, [r7, #8]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2202      	movs	r2, #2
 8007b1e:	0018      	movs	r0, r3
 8007b20:	f000 fc34 	bl	800838c <USBD_CtlSendData>
              break;
 8007b24:	e006      	b.n	8007b34 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 8007b26:	683a      	ldr	r2, [r7, #0]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	0011      	movs	r1, r2
 8007b2c:	0018      	movs	r0, r3
 8007b2e:	f000 fbaf 	bl	8008290 <USBD_CtlError>
              break;
 8007b32:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8007b34:	e006      	b.n	8007b44 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 8007b36:	683a      	ldr	r2, [r7, #0]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	0011      	movs	r1, r2
 8007b3c:	0018      	movs	r0, r3
 8007b3e:	f000 fba7 	bl	8008290 <USBD_CtlError>
          break;
 8007b42:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8007b44:	e006      	b.n	8007b54 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 8007b46:	683a      	ldr	r2, [r7, #0]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	0011      	movs	r1, r2
 8007b4c:	0018      	movs	r0, r3
 8007b4e:	f000 fb9f 	bl	8008290 <USBD_CtlError>
      break;
 8007b52:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8007b54:	230f      	movs	r3, #15
 8007b56:	18fb      	adds	r3, r7, r3
 8007b58:	781b      	ldrb	r3, [r3, #0]
}
 8007b5a:	0018      	movs	r0, r3
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	b004      	add	sp, #16
 8007b60:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007b64 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b084      	sub	sp, #16
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b6e:	2308      	movs	r3, #8
 8007b70:	18fb      	adds	r3, r7, r3
 8007b72:	2200      	movs	r2, #0
 8007b74:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8007b76:	2300      	movs	r3, #0
 8007b78:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007b7a:	230b      	movs	r3, #11
 8007b7c:	18fb      	adds	r3, r7, r3
 8007b7e:	2200      	movs	r2, #0
 8007b80:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	885b      	ldrh	r3, [r3, #2]
 8007b86:	0a1b      	lsrs	r3, r3, #8
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	2b07      	cmp	r3, #7
 8007b8c:	d900      	bls.n	8007b90 <USBD_GetDescriptor+0x2c>
 8007b8e:	e159      	b.n	8007e44 <USBD_GetDescriptor+0x2e0>
 8007b90:	009a      	lsls	r2, r3, #2
 8007b92:	4bcb      	ldr	r3, [pc, #812]	; (8007ec0 <USBD_GetDescriptor+0x35c>)
 8007b94:	18d3      	adds	r3, r2, r3
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007b9a:	687a      	ldr	r2, [r7, #4]
 8007b9c:	23ac      	movs	r3, #172	; 0xac
 8007b9e:	009b      	lsls	r3, r3, #2
 8007ba0:	58d3      	ldr	r3, [r2, r3]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	7c12      	ldrb	r2, [r2, #16]
 8007ba8:	2108      	movs	r1, #8
 8007baa:	1879      	adds	r1, r7, r1
 8007bac:	0010      	movs	r0, r2
 8007bae:	4798      	blx	r3
 8007bb0:	0003      	movs	r3, r0
 8007bb2:	60fb      	str	r3, [r7, #12]
      break;
 8007bb4:	e153      	b.n	8007e5e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	7c1b      	ldrb	r3, [r3, #16]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d10f      	bne.n	8007bde <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	23ad      	movs	r3, #173	; 0xad
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	58d3      	ldr	r3, [r2, r3]
 8007bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bc8:	2208      	movs	r2, #8
 8007bca:	18ba      	adds	r2, r7, r2
 8007bcc:	0010      	movs	r0, r2
 8007bce:	4798      	blx	r3
 8007bd0:	0003      	movs	r3, r0
 8007bd2:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	2202      	movs	r2, #2
 8007bda:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007bdc:	e13f      	b.n	8007e5e <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007bde:	687a      	ldr	r2, [r7, #4]
 8007be0:	23ad      	movs	r3, #173	; 0xad
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	58d3      	ldr	r3, [r2, r3]
 8007be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be8:	2208      	movs	r2, #8
 8007bea:	18ba      	adds	r2, r7, r2
 8007bec:	0010      	movs	r0, r2
 8007bee:	4798      	blx	r3
 8007bf0:	0003      	movs	r3, r0
 8007bf2:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	2202      	movs	r2, #2
 8007bfa:	701a      	strb	r2, [r3, #0]
      break;
 8007bfc:	e12f      	b.n	8007e5e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	885b      	ldrh	r3, [r3, #2]
 8007c02:	b2db      	uxtb	r3, r3
 8007c04:	2b05      	cmp	r3, #5
 8007c06:	d900      	bls.n	8007c0a <USBD_GetDescriptor+0xa6>
 8007c08:	e0d0      	b.n	8007dac <USBD_GetDescriptor+0x248>
 8007c0a:	009a      	lsls	r2, r3, #2
 8007c0c:	4bad      	ldr	r3, [pc, #692]	; (8007ec4 <USBD_GetDescriptor+0x360>)
 8007c0e:	18d3      	adds	r3, r2, r3
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007c14:	687a      	ldr	r2, [r7, #4]
 8007c16:	23ac      	movs	r3, #172	; 0xac
 8007c18:	009b      	lsls	r3, r3, #2
 8007c1a:	58d3      	ldr	r3, [r2, r3]
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d00d      	beq.n	8007c3e <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007c22:	687a      	ldr	r2, [r7, #4]
 8007c24:	23ac      	movs	r3, #172	; 0xac
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	58d3      	ldr	r3, [r2, r3]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	687a      	ldr	r2, [r7, #4]
 8007c2e:	7c12      	ldrb	r2, [r2, #16]
 8007c30:	2108      	movs	r1, #8
 8007c32:	1879      	adds	r1, r7, r1
 8007c34:	0010      	movs	r0, r2
 8007c36:	4798      	blx	r3
 8007c38:	0003      	movs	r3, r0
 8007c3a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c3c:	e0c3      	b.n	8007dc6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8007c3e:	683a      	ldr	r2, [r7, #0]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	0011      	movs	r1, r2
 8007c44:	0018      	movs	r0, r3
 8007c46:	f000 fb23 	bl	8008290 <USBD_CtlError>
            err++;
 8007c4a:	210b      	movs	r1, #11
 8007c4c:	187b      	adds	r3, r7, r1
 8007c4e:	781a      	ldrb	r2, [r3, #0]
 8007c50:	187b      	adds	r3, r7, r1
 8007c52:	3201      	adds	r2, #1
 8007c54:	701a      	strb	r2, [r3, #0]
          break;
 8007c56:	e0b6      	b.n	8007dc6 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	23ac      	movs	r3, #172	; 0xac
 8007c5c:	009b      	lsls	r3, r3, #2
 8007c5e:	58d3      	ldr	r3, [r2, r3]
 8007c60:	689b      	ldr	r3, [r3, #8]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d00d      	beq.n	8007c82 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007c66:	687a      	ldr	r2, [r7, #4]
 8007c68:	23ac      	movs	r3, #172	; 0xac
 8007c6a:	009b      	lsls	r3, r3, #2
 8007c6c:	58d3      	ldr	r3, [r2, r3]
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	7c12      	ldrb	r2, [r2, #16]
 8007c74:	2108      	movs	r1, #8
 8007c76:	1879      	adds	r1, r7, r1
 8007c78:	0010      	movs	r0, r2
 8007c7a:	4798      	blx	r3
 8007c7c:	0003      	movs	r3, r0
 8007c7e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c80:	e0a1      	b.n	8007dc6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8007c82:	683a      	ldr	r2, [r7, #0]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	0011      	movs	r1, r2
 8007c88:	0018      	movs	r0, r3
 8007c8a:	f000 fb01 	bl	8008290 <USBD_CtlError>
            err++;
 8007c8e:	210b      	movs	r1, #11
 8007c90:	187b      	adds	r3, r7, r1
 8007c92:	781a      	ldrb	r2, [r3, #0]
 8007c94:	187b      	adds	r3, r7, r1
 8007c96:	3201      	adds	r2, #1
 8007c98:	701a      	strb	r2, [r3, #0]
          break;
 8007c9a:	e094      	b.n	8007dc6 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	23ac      	movs	r3, #172	; 0xac
 8007ca0:	009b      	lsls	r3, r3, #2
 8007ca2:	58d3      	ldr	r3, [r2, r3]
 8007ca4:	68db      	ldr	r3, [r3, #12]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d00d      	beq.n	8007cc6 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	23ac      	movs	r3, #172	; 0xac
 8007cae:	009b      	lsls	r3, r3, #2
 8007cb0:	58d3      	ldr	r3, [r2, r3]
 8007cb2:	68db      	ldr	r3, [r3, #12]
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	7c12      	ldrb	r2, [r2, #16]
 8007cb8:	2108      	movs	r1, #8
 8007cba:	1879      	adds	r1, r7, r1
 8007cbc:	0010      	movs	r0, r2
 8007cbe:	4798      	blx	r3
 8007cc0:	0003      	movs	r3, r0
 8007cc2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cc4:	e07f      	b.n	8007dc6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8007cc6:	683a      	ldr	r2, [r7, #0]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	0011      	movs	r1, r2
 8007ccc:	0018      	movs	r0, r3
 8007cce:	f000 fadf 	bl	8008290 <USBD_CtlError>
            err++;
 8007cd2:	210b      	movs	r1, #11
 8007cd4:	187b      	adds	r3, r7, r1
 8007cd6:	781a      	ldrb	r2, [r3, #0]
 8007cd8:	187b      	adds	r3, r7, r1
 8007cda:	3201      	adds	r2, #1
 8007cdc:	701a      	strb	r2, [r3, #0]
          break;
 8007cde:	e072      	b.n	8007dc6 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007ce0:	687a      	ldr	r2, [r7, #4]
 8007ce2:	23ac      	movs	r3, #172	; 0xac
 8007ce4:	009b      	lsls	r3, r3, #2
 8007ce6:	58d3      	ldr	r3, [r2, r3]
 8007ce8:	691b      	ldr	r3, [r3, #16]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d00d      	beq.n	8007d0a <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	23ac      	movs	r3, #172	; 0xac
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	58d3      	ldr	r3, [r2, r3]
 8007cf6:	691b      	ldr	r3, [r3, #16]
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	7c12      	ldrb	r2, [r2, #16]
 8007cfc:	2108      	movs	r1, #8
 8007cfe:	1879      	adds	r1, r7, r1
 8007d00:	0010      	movs	r0, r2
 8007d02:	4798      	blx	r3
 8007d04:	0003      	movs	r3, r0
 8007d06:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d08:	e05d      	b.n	8007dc6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8007d0a:	683a      	ldr	r2, [r7, #0]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	0011      	movs	r1, r2
 8007d10:	0018      	movs	r0, r3
 8007d12:	f000 fabd 	bl	8008290 <USBD_CtlError>
            err++;
 8007d16:	210b      	movs	r1, #11
 8007d18:	187b      	adds	r3, r7, r1
 8007d1a:	781a      	ldrb	r2, [r3, #0]
 8007d1c:	187b      	adds	r3, r7, r1
 8007d1e:	3201      	adds	r2, #1
 8007d20:	701a      	strb	r2, [r3, #0]
          break;
 8007d22:	e050      	b.n	8007dc6 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007d24:	687a      	ldr	r2, [r7, #4]
 8007d26:	23ac      	movs	r3, #172	; 0xac
 8007d28:	009b      	lsls	r3, r3, #2
 8007d2a:	58d3      	ldr	r3, [r2, r3]
 8007d2c:	695b      	ldr	r3, [r3, #20]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d00d      	beq.n	8007d4e <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007d32:	687a      	ldr	r2, [r7, #4]
 8007d34:	23ac      	movs	r3, #172	; 0xac
 8007d36:	009b      	lsls	r3, r3, #2
 8007d38:	58d3      	ldr	r3, [r2, r3]
 8007d3a:	695b      	ldr	r3, [r3, #20]
 8007d3c:	687a      	ldr	r2, [r7, #4]
 8007d3e:	7c12      	ldrb	r2, [r2, #16]
 8007d40:	2108      	movs	r1, #8
 8007d42:	1879      	adds	r1, r7, r1
 8007d44:	0010      	movs	r0, r2
 8007d46:	4798      	blx	r3
 8007d48:	0003      	movs	r3, r0
 8007d4a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d4c:	e03b      	b.n	8007dc6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8007d4e:	683a      	ldr	r2, [r7, #0]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	0011      	movs	r1, r2
 8007d54:	0018      	movs	r0, r3
 8007d56:	f000 fa9b 	bl	8008290 <USBD_CtlError>
            err++;
 8007d5a:	210b      	movs	r1, #11
 8007d5c:	187b      	adds	r3, r7, r1
 8007d5e:	781a      	ldrb	r2, [r3, #0]
 8007d60:	187b      	adds	r3, r7, r1
 8007d62:	3201      	adds	r2, #1
 8007d64:	701a      	strb	r2, [r3, #0]
          break;
 8007d66:	e02e      	b.n	8007dc6 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007d68:	687a      	ldr	r2, [r7, #4]
 8007d6a:	23ac      	movs	r3, #172	; 0xac
 8007d6c:	009b      	lsls	r3, r3, #2
 8007d6e:	58d3      	ldr	r3, [r2, r3]
 8007d70:	699b      	ldr	r3, [r3, #24]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d00d      	beq.n	8007d92 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	23ac      	movs	r3, #172	; 0xac
 8007d7a:	009b      	lsls	r3, r3, #2
 8007d7c:	58d3      	ldr	r3, [r2, r3]
 8007d7e:	699b      	ldr	r3, [r3, #24]
 8007d80:	687a      	ldr	r2, [r7, #4]
 8007d82:	7c12      	ldrb	r2, [r2, #16]
 8007d84:	2108      	movs	r1, #8
 8007d86:	1879      	adds	r1, r7, r1
 8007d88:	0010      	movs	r0, r2
 8007d8a:	4798      	blx	r3
 8007d8c:	0003      	movs	r3, r0
 8007d8e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d90:	e019      	b.n	8007dc6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8007d92:	683a      	ldr	r2, [r7, #0]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	0011      	movs	r1, r2
 8007d98:	0018      	movs	r0, r3
 8007d9a:	f000 fa79 	bl	8008290 <USBD_CtlError>
            err++;
 8007d9e:	210b      	movs	r1, #11
 8007da0:	187b      	adds	r3, r7, r1
 8007da2:	781a      	ldrb	r2, [r3, #0]
 8007da4:	187b      	adds	r3, r7, r1
 8007da6:	3201      	adds	r2, #1
 8007da8:	701a      	strb	r2, [r3, #0]
          break;
 8007daa:	e00c      	b.n	8007dc6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007dac:	683a      	ldr	r2, [r7, #0]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	0011      	movs	r1, r2
 8007db2:	0018      	movs	r0, r3
 8007db4:	f000 fa6c 	bl	8008290 <USBD_CtlError>
          err++;
 8007db8:	210b      	movs	r1, #11
 8007dba:	187b      	adds	r3, r7, r1
 8007dbc:	781a      	ldrb	r2, [r3, #0]
 8007dbe:	187b      	adds	r3, r7, r1
 8007dc0:	3201      	adds	r2, #1
 8007dc2:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8007dc4:	e04b      	b.n	8007e5e <USBD_GetDescriptor+0x2fa>
 8007dc6:	e04a      	b.n	8007e5e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	7c1b      	ldrb	r3, [r3, #16]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d10b      	bne.n	8007de8 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	23ad      	movs	r3, #173	; 0xad
 8007dd4:	009b      	lsls	r3, r3, #2
 8007dd6:	58d3      	ldr	r3, [r2, r3]
 8007dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dda:	2208      	movs	r2, #8
 8007ddc:	18ba      	adds	r2, r7, r2
 8007dde:	0010      	movs	r0, r2
 8007de0:	4798      	blx	r3
 8007de2:	0003      	movs	r3, r0
 8007de4:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007de6:	e03a      	b.n	8007e5e <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8007de8:	683a      	ldr	r2, [r7, #0]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	0011      	movs	r1, r2
 8007dee:	0018      	movs	r0, r3
 8007df0:	f000 fa4e 	bl	8008290 <USBD_CtlError>
        err++;
 8007df4:	210b      	movs	r1, #11
 8007df6:	187b      	adds	r3, r7, r1
 8007df8:	781a      	ldrb	r2, [r3, #0]
 8007dfa:	187b      	adds	r3, r7, r1
 8007dfc:	3201      	adds	r2, #1
 8007dfe:	701a      	strb	r2, [r3, #0]
      break;
 8007e00:	e02d      	b.n	8007e5e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	7c1b      	ldrb	r3, [r3, #16]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d10f      	bne.n	8007e2a <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007e0a:	687a      	ldr	r2, [r7, #4]
 8007e0c:	23ad      	movs	r3, #173	; 0xad
 8007e0e:	009b      	lsls	r3, r3, #2
 8007e10:	58d3      	ldr	r3, [r2, r3]
 8007e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e14:	2208      	movs	r2, #8
 8007e16:	18ba      	adds	r2, r7, r2
 8007e18:	0010      	movs	r0, r2
 8007e1a:	4798      	blx	r3
 8007e1c:	0003      	movs	r3, r0
 8007e1e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	3301      	adds	r3, #1
 8007e24:	2207      	movs	r2, #7
 8007e26:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e28:	e019      	b.n	8007e5e <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8007e2a:	683a      	ldr	r2, [r7, #0]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	0011      	movs	r1, r2
 8007e30:	0018      	movs	r0, r3
 8007e32:	f000 fa2d 	bl	8008290 <USBD_CtlError>
        err++;
 8007e36:	210b      	movs	r1, #11
 8007e38:	187b      	adds	r3, r7, r1
 8007e3a:	781a      	ldrb	r2, [r3, #0]
 8007e3c:	187b      	adds	r3, r7, r1
 8007e3e:	3201      	adds	r2, #1
 8007e40:	701a      	strb	r2, [r3, #0]
      break;
 8007e42:	e00c      	b.n	8007e5e <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8007e44:	683a      	ldr	r2, [r7, #0]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	0011      	movs	r1, r2
 8007e4a:	0018      	movs	r0, r3
 8007e4c:	f000 fa20 	bl	8008290 <USBD_CtlError>
      err++;
 8007e50:	210b      	movs	r1, #11
 8007e52:	187b      	adds	r3, r7, r1
 8007e54:	781a      	ldrb	r2, [r3, #0]
 8007e56:	187b      	adds	r3, r7, r1
 8007e58:	3201      	adds	r2, #1
 8007e5a:	701a      	strb	r2, [r3, #0]
      break;
 8007e5c:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 8007e5e:	230b      	movs	r3, #11
 8007e60:	18fb      	adds	r3, r7, r3
 8007e62:	781b      	ldrb	r3, [r3, #0]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d127      	bne.n	8007eb8 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007e68:	2108      	movs	r1, #8
 8007e6a:	187b      	adds	r3, r7, r1
 8007e6c:	881b      	ldrh	r3, [r3, #0]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d019      	beq.n	8007ea6 <USBD_GetDescriptor+0x342>
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	88db      	ldrh	r3, [r3, #6]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d015      	beq.n	8007ea6 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	88da      	ldrh	r2, [r3, #6]
 8007e7e:	187b      	adds	r3, r7, r1
 8007e80:	881b      	ldrh	r3, [r3, #0]
 8007e82:	1c18      	adds	r0, r3, #0
 8007e84:	1c11      	adds	r1, r2, #0
 8007e86:	b28a      	uxth	r2, r1
 8007e88:	b283      	uxth	r3, r0
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	d900      	bls.n	8007e90 <USBD_GetDescriptor+0x32c>
 8007e8e:	1c01      	adds	r1, r0, #0
 8007e90:	b28a      	uxth	r2, r1
 8007e92:	2108      	movs	r1, #8
 8007e94:	187b      	adds	r3, r7, r1
 8007e96:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007e98:	187b      	adds	r3, r7, r1
 8007e9a:	881a      	ldrh	r2, [r3, #0]
 8007e9c:	68f9      	ldr	r1, [r7, #12]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	0018      	movs	r0, r3
 8007ea2:	f000 fa73 	bl	800838c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	88db      	ldrh	r3, [r3, #6]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d105      	bne.n	8007eba <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	0018      	movs	r0, r3
 8007eb2:	f000 fab1 	bl	8008418 <USBD_CtlSendStatus>
 8007eb6:	e000      	b.n	8007eba <USBD_GetDescriptor+0x356>
    return;
 8007eb8:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	b004      	add	sp, #16
 8007ebe:	bd80      	pop	{r7, pc}
 8007ec0:	0800932c 	.word	0x0800932c
 8007ec4:	0800934c 	.word	0x0800934c

08007ec8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007ec8:	b590      	push	{r4, r7, lr}
 8007eca:	b085      	sub	sp, #20
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	889b      	ldrh	r3, [r3, #4]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d13d      	bne.n	8007f56 <USBD_SetAddress+0x8e>
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	88db      	ldrh	r3, [r3, #6]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d139      	bne.n	8007f56 <USBD_SetAddress+0x8e>
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	885b      	ldrh	r3, [r3, #2]
 8007ee6:	2b7f      	cmp	r3, #127	; 0x7f
 8007ee8:	d835      	bhi.n	8007f56 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	885b      	ldrh	r3, [r3, #2]
 8007eee:	b2da      	uxtb	r2, r3
 8007ef0:	230f      	movs	r3, #15
 8007ef2:	18fb      	adds	r3, r7, r3
 8007ef4:	217f      	movs	r1, #127	; 0x7f
 8007ef6:	400a      	ands	r2, r1
 8007ef8:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007efa:	687a      	ldr	r2, [r7, #4]
 8007efc:	23a7      	movs	r3, #167	; 0xa7
 8007efe:	009b      	lsls	r3, r3, #2
 8007f00:	5cd3      	ldrb	r3, [r2, r3]
 8007f02:	2b03      	cmp	r3, #3
 8007f04:	d106      	bne.n	8007f14 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8007f06:	683a      	ldr	r2, [r7, #0]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	0011      	movs	r1, r2
 8007f0c:	0018      	movs	r0, r3
 8007f0e:	f000 f9bf 	bl	8008290 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f12:	e027      	b.n	8007f64 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	240f      	movs	r4, #15
 8007f18:	193a      	adds	r2, r7, r4
 8007f1a:	4914      	ldr	r1, [pc, #80]	; (8007f6c <USBD_SetAddress+0xa4>)
 8007f1c:	7812      	ldrb	r2, [r2, #0]
 8007f1e:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007f20:	193b      	adds	r3, r7, r4
 8007f22:	781a      	ldrb	r2, [r3, #0]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	0011      	movs	r1, r2
 8007f28:	0018      	movs	r0, r3
 8007f2a:	f000 ffac 	bl	8008e86 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	0018      	movs	r0, r3
 8007f32:	f000 fa71 	bl	8008418 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007f36:	193b      	adds	r3, r7, r4
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d005      	beq.n	8007f4a <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	23a7      	movs	r3, #167	; 0xa7
 8007f42:	009b      	lsls	r3, r3, #2
 8007f44:	2102      	movs	r1, #2
 8007f46:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f48:	e00c      	b.n	8007f64 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007f4a:	687a      	ldr	r2, [r7, #4]
 8007f4c:	23a7      	movs	r3, #167	; 0xa7
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	2101      	movs	r1, #1
 8007f52:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f54:	e006      	b.n	8007f64 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007f56:	683a      	ldr	r2, [r7, #0]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	0011      	movs	r1, r2
 8007f5c:	0018      	movs	r0, r3
 8007f5e:	f000 f997 	bl	8008290 <USBD_CtlError>
  }
}
 8007f62:	46c0      	nop			; (mov r8, r8)
 8007f64:	46c0      	nop			; (mov r8, r8)
 8007f66:	46bd      	mov	sp, r7
 8007f68:	b005      	add	sp, #20
 8007f6a:	bd90      	pop	{r4, r7, pc}
 8007f6c:	0000029e 	.word	0x0000029e

08007f70 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b082      	sub	sp, #8
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	885b      	ldrh	r3, [r3, #2]
 8007f7e:	b2da      	uxtb	r2, r3
 8007f80:	4b4c      	ldr	r3, [pc, #304]	; (80080b4 <USBD_SetConfig+0x144>)
 8007f82:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007f84:	4b4b      	ldr	r3, [pc, #300]	; (80080b4 <USBD_SetConfig+0x144>)
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d906      	bls.n	8007f9a <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8007f8c:	683a      	ldr	r2, [r7, #0]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	0011      	movs	r1, r2
 8007f92:	0018      	movs	r0, r3
 8007f94:	f000 f97c 	bl	8008290 <USBD_CtlError>
 8007f98:	e088      	b.n	80080ac <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8007f9a:	687a      	ldr	r2, [r7, #4]
 8007f9c:	23a7      	movs	r3, #167	; 0xa7
 8007f9e:	009b      	lsls	r3, r3, #2
 8007fa0:	5cd3      	ldrb	r3, [r2, r3]
 8007fa2:	2b02      	cmp	r3, #2
 8007fa4:	d002      	beq.n	8007fac <USBD_SetConfig+0x3c>
 8007fa6:	2b03      	cmp	r3, #3
 8007fa8:	d029      	beq.n	8007ffe <USBD_SetConfig+0x8e>
 8007faa:	e071      	b.n	8008090 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007fac:	4b41      	ldr	r3, [pc, #260]	; (80080b4 <USBD_SetConfig+0x144>)
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d01f      	beq.n	8007ff4 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8007fb4:	4b3f      	ldr	r3, [pc, #252]	; (80080b4 <USBD_SetConfig+0x144>)
 8007fb6:	781b      	ldrb	r3, [r3, #0]
 8007fb8:	001a      	movs	r2, r3
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007fbe:	687a      	ldr	r2, [r7, #4]
 8007fc0:	23a7      	movs	r3, #167	; 0xa7
 8007fc2:	009b      	lsls	r3, r3, #2
 8007fc4:	2103      	movs	r1, #3
 8007fc6:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007fc8:	4b3a      	ldr	r3, [pc, #232]	; (80080b4 <USBD_SetConfig+0x144>)
 8007fca:	781a      	ldrb	r2, [r3, #0]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	0011      	movs	r1, r2
 8007fd0:	0018      	movs	r0, r3
 8007fd2:	f7ff f8c6 	bl	8007162 <USBD_SetClassConfig>
 8007fd6:	0003      	movs	r3, r0
 8007fd8:	2b02      	cmp	r3, #2
 8007fda:	d106      	bne.n	8007fea <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8007fdc:	683a      	ldr	r2, [r7, #0]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	0011      	movs	r1, r2
 8007fe2:	0018      	movs	r0, r3
 8007fe4:	f000 f954 	bl	8008290 <USBD_CtlError>
            return;
 8007fe8:	e060      	b.n	80080ac <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	0018      	movs	r0, r3
 8007fee:	f000 fa13 	bl	8008418 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007ff2:	e05b      	b.n	80080ac <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	0018      	movs	r0, r3
 8007ff8:	f000 fa0e 	bl	8008418 <USBD_CtlSendStatus>
        break;
 8007ffc:	e056      	b.n	80080ac <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007ffe:	4b2d      	ldr	r3, [pc, #180]	; (80080b4 <USBD_SetConfig+0x144>)
 8008000:	781b      	ldrb	r3, [r3, #0]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d115      	bne.n	8008032 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	23a7      	movs	r3, #167	; 0xa7
 800800a:	009b      	lsls	r3, r3, #2
 800800c:	2102      	movs	r1, #2
 800800e:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8008010:	4b28      	ldr	r3, [pc, #160]	; (80080b4 <USBD_SetConfig+0x144>)
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	001a      	movs	r2, r3
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800801a:	4b26      	ldr	r3, [pc, #152]	; (80080b4 <USBD_SetConfig+0x144>)
 800801c:	781a      	ldrb	r2, [r3, #0]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	0011      	movs	r1, r2
 8008022:	0018      	movs	r0, r3
 8008024:	f7ff f8c4 	bl	80071b0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	0018      	movs	r0, r3
 800802c:	f000 f9f4 	bl	8008418 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008030:	e03c      	b.n	80080ac <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8008032:	4b20      	ldr	r3, [pc, #128]	; (80080b4 <USBD_SetConfig+0x144>)
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	001a      	movs	r2, r3
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	685b      	ldr	r3, [r3, #4]
 800803c:	429a      	cmp	r2, r3
 800803e:	d022      	beq.n	8008086 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	b2da      	uxtb	r2, r3
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	0011      	movs	r1, r2
 800804a:	0018      	movs	r0, r3
 800804c:	f7ff f8b0 	bl	80071b0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008050:	4b18      	ldr	r3, [pc, #96]	; (80080b4 <USBD_SetConfig+0x144>)
 8008052:	781b      	ldrb	r3, [r3, #0]
 8008054:	001a      	movs	r2, r3
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800805a:	4b16      	ldr	r3, [pc, #88]	; (80080b4 <USBD_SetConfig+0x144>)
 800805c:	781a      	ldrb	r2, [r3, #0]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	0011      	movs	r1, r2
 8008062:	0018      	movs	r0, r3
 8008064:	f7ff f87d 	bl	8007162 <USBD_SetClassConfig>
 8008068:	0003      	movs	r3, r0
 800806a:	2b02      	cmp	r3, #2
 800806c:	d106      	bne.n	800807c <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 800806e:	683a      	ldr	r2, [r7, #0]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	0011      	movs	r1, r2
 8008074:	0018      	movs	r0, r3
 8008076:	f000 f90b 	bl	8008290 <USBD_CtlError>
            return;
 800807a:	e017      	b.n	80080ac <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	0018      	movs	r0, r3
 8008080:	f000 f9ca 	bl	8008418 <USBD_CtlSendStatus>
        break;
 8008084:	e012      	b.n	80080ac <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	0018      	movs	r0, r3
 800808a:	f000 f9c5 	bl	8008418 <USBD_CtlSendStatus>
        break;
 800808e:	e00d      	b.n	80080ac <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8008090:	683a      	ldr	r2, [r7, #0]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	0011      	movs	r1, r2
 8008096:	0018      	movs	r0, r3
 8008098:	f000 f8fa 	bl	8008290 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800809c:	4b05      	ldr	r3, [pc, #20]	; (80080b4 <USBD_SetConfig+0x144>)
 800809e:	781a      	ldrb	r2, [r3, #0]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	0011      	movs	r1, r2
 80080a4:	0018      	movs	r0, r3
 80080a6:	f7ff f883 	bl	80071b0 <USBD_ClrClassConfig>
        break;
 80080aa:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 80080ac:	46bd      	mov	sp, r7
 80080ae:	b002      	add	sp, #8
 80080b0:	bd80      	pop	{r7, pc}
 80080b2:	46c0      	nop			; (mov r8, r8)
 80080b4:	20000158 	.word	0x20000158

080080b8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b082      	sub	sp, #8
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	88db      	ldrh	r3, [r3, #6]
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d006      	beq.n	80080d8 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 80080ca:	683a      	ldr	r2, [r7, #0]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	0011      	movs	r1, r2
 80080d0:	0018      	movs	r0, r3
 80080d2:	f000 f8dd 	bl	8008290 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80080d6:	e026      	b.n	8008126 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	23a7      	movs	r3, #167	; 0xa7
 80080dc:	009b      	lsls	r3, r3, #2
 80080de:	5cd3      	ldrb	r3, [r2, r3]
 80080e0:	2b02      	cmp	r3, #2
 80080e2:	dc02      	bgt.n	80080ea <USBD_GetConfig+0x32>
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	dc03      	bgt.n	80080f0 <USBD_GetConfig+0x38>
 80080e8:	e016      	b.n	8008118 <USBD_GetConfig+0x60>
 80080ea:	2b03      	cmp	r3, #3
 80080ec:	d00c      	beq.n	8008108 <USBD_GetConfig+0x50>
 80080ee:	e013      	b.n	8008118 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2200      	movs	r2, #0
 80080f4:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	3308      	adds	r3, #8
 80080fa:	0019      	movs	r1, r3
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2201      	movs	r2, #1
 8008100:	0018      	movs	r0, r3
 8008102:	f000 f943 	bl	800838c <USBD_CtlSendData>
        break;
 8008106:	e00e      	b.n	8008126 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	1d19      	adds	r1, r3, #4
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2201      	movs	r2, #1
 8008110:	0018      	movs	r0, r3
 8008112:	f000 f93b 	bl	800838c <USBD_CtlSendData>
        break;
 8008116:	e006      	b.n	8008126 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8008118:	683a      	ldr	r2, [r7, #0]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	0011      	movs	r1, r2
 800811e:	0018      	movs	r0, r3
 8008120:	f000 f8b6 	bl	8008290 <USBD_CtlError>
        break;
 8008124:	46c0      	nop			; (mov r8, r8)
}
 8008126:	46c0      	nop			; (mov r8, r8)
 8008128:	46bd      	mov	sp, r7
 800812a:	b002      	add	sp, #8
 800812c:	bd80      	pop	{r7, pc}

0800812e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800812e:	b580      	push	{r7, lr}
 8008130:	b082      	sub	sp, #8
 8008132:	af00      	add	r7, sp, #0
 8008134:	6078      	str	r0, [r7, #4]
 8008136:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	23a7      	movs	r3, #167	; 0xa7
 800813c:	009b      	lsls	r3, r3, #2
 800813e:	5cd3      	ldrb	r3, [r2, r3]
 8008140:	3b01      	subs	r3, #1
 8008142:	2b02      	cmp	r3, #2
 8008144:	d822      	bhi.n	800818c <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	88db      	ldrh	r3, [r3, #6]
 800814a:	2b02      	cmp	r3, #2
 800814c:	d006      	beq.n	800815c <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 800814e:	683a      	ldr	r2, [r7, #0]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	0011      	movs	r1, r2
 8008154:	0018      	movs	r0, r3
 8008156:	f000 f89b 	bl	8008290 <USBD_CtlError>
        break;
 800815a:	e01e      	b.n	800819a <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2201      	movs	r2, #1
 8008160:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008162:	687a      	ldr	r2, [r7, #4]
 8008164:	23a9      	movs	r3, #169	; 0xa9
 8008166:	009b      	lsls	r3, r3, #2
 8008168:	58d3      	ldr	r3, [r2, r3]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d005      	beq.n	800817a <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	68db      	ldr	r3, [r3, #12]
 8008172:	2202      	movs	r2, #2
 8008174:	431a      	orrs	r2, r3
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	330c      	adds	r3, #12
 800817e:	0019      	movs	r1, r3
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2202      	movs	r2, #2
 8008184:	0018      	movs	r0, r3
 8008186:	f000 f901 	bl	800838c <USBD_CtlSendData>
      break;
 800818a:	e006      	b.n	800819a <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 800818c:	683a      	ldr	r2, [r7, #0]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	0011      	movs	r1, r2
 8008192:	0018      	movs	r0, r3
 8008194:	f000 f87c 	bl	8008290 <USBD_CtlError>
      break;
 8008198:	46c0      	nop			; (mov r8, r8)
  }
}
 800819a:	46c0      	nop			; (mov r8, r8)
 800819c:	46bd      	mov	sp, r7
 800819e:	b002      	add	sp, #8
 80081a0:	bd80      	pop	{r7, pc}

080081a2 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80081a2:	b580      	push	{r7, lr}
 80081a4:	b082      	sub	sp, #8
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	6078      	str	r0, [r7, #4]
 80081aa:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	885b      	ldrh	r3, [r3, #2]
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d108      	bne.n	80081c6 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 80081b4:	687a      	ldr	r2, [r7, #4]
 80081b6:	23a9      	movs	r3, #169	; 0xa9
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	2101      	movs	r1, #1
 80081bc:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	0018      	movs	r0, r3
 80081c2:	f000 f929 	bl	8008418 <USBD_CtlSendStatus>
  }
}
 80081c6:	46c0      	nop			; (mov r8, r8)
 80081c8:	46bd      	mov	sp, r7
 80081ca:	b002      	add	sp, #8
 80081cc:	bd80      	pop	{r7, pc}

080081ce <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80081ce:	b580      	push	{r7, lr}
 80081d0:	b082      	sub	sp, #8
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]
 80081d6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80081d8:	687a      	ldr	r2, [r7, #4]
 80081da:	23a7      	movs	r3, #167	; 0xa7
 80081dc:	009b      	lsls	r3, r3, #2
 80081de:	5cd3      	ldrb	r3, [r2, r3]
 80081e0:	3b01      	subs	r3, #1
 80081e2:	2b02      	cmp	r3, #2
 80081e4:	d80d      	bhi.n	8008202 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	885b      	ldrh	r3, [r3, #2]
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	d110      	bne.n	8008210 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	23a9      	movs	r3, #169	; 0xa9
 80081f2:	009b      	lsls	r3, r3, #2
 80081f4:	2100      	movs	r1, #0
 80081f6:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	0018      	movs	r0, r3
 80081fc:	f000 f90c 	bl	8008418 <USBD_CtlSendStatus>
      }
      break;
 8008200:	e006      	b.n	8008210 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8008202:	683a      	ldr	r2, [r7, #0]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	0011      	movs	r1, r2
 8008208:	0018      	movs	r0, r3
 800820a:	f000 f841 	bl	8008290 <USBD_CtlError>
      break;
 800820e:	e000      	b.n	8008212 <USBD_ClrFeature+0x44>
      break;
 8008210:	46c0      	nop			; (mov r8, r8)
  }
}
 8008212:	46c0      	nop			; (mov r8, r8)
 8008214:	46bd      	mov	sp, r7
 8008216:	b002      	add	sp, #8
 8008218:	bd80      	pop	{r7, pc}

0800821a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800821a:	b580      	push	{r7, lr}
 800821c:	b082      	sub	sp, #8
 800821e:	af00      	add	r7, sp, #0
 8008220:	6078      	str	r0, [r7, #4]
 8008222:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	781a      	ldrb	r2, [r3, #0]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	785a      	ldrb	r2, [r3, #1]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	3302      	adds	r3, #2
 8008238:	781b      	ldrb	r3, [r3, #0]
 800823a:	b29a      	uxth	r2, r3
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	3303      	adds	r3, #3
 8008240:	781b      	ldrb	r3, [r3, #0]
 8008242:	b29b      	uxth	r3, r3
 8008244:	021b      	lsls	r3, r3, #8
 8008246:	b29b      	uxth	r3, r3
 8008248:	18d3      	adds	r3, r2, r3
 800824a:	b29a      	uxth	r2, r3
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	3304      	adds	r3, #4
 8008254:	781b      	ldrb	r3, [r3, #0]
 8008256:	b29a      	uxth	r2, r3
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	3305      	adds	r3, #5
 800825c:	781b      	ldrb	r3, [r3, #0]
 800825e:	b29b      	uxth	r3, r3
 8008260:	021b      	lsls	r3, r3, #8
 8008262:	b29b      	uxth	r3, r3
 8008264:	18d3      	adds	r3, r2, r3
 8008266:	b29a      	uxth	r2, r3
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	3306      	adds	r3, #6
 8008270:	781b      	ldrb	r3, [r3, #0]
 8008272:	b29a      	uxth	r2, r3
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	3307      	adds	r3, #7
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	b29b      	uxth	r3, r3
 800827c:	021b      	lsls	r3, r3, #8
 800827e:	b29b      	uxth	r3, r3
 8008280:	18d3      	adds	r3, r2, r3
 8008282:	b29a      	uxth	r2, r3
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	80da      	strh	r2, [r3, #6]

}
 8008288:	46c0      	nop			; (mov r8, r8)
 800828a:	46bd      	mov	sp, r7
 800828c:	b002      	add	sp, #8
 800828e:	bd80      	pop	{r7, pc}

08008290 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b082      	sub	sp, #8
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2180      	movs	r1, #128	; 0x80
 800829e:	0018      	movs	r0, r3
 80082a0:	f000 fd6a 	bl	8008d78 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2100      	movs	r1, #0
 80082a8:	0018      	movs	r0, r3
 80082aa:	f000 fd65 	bl	8008d78 <USBD_LL_StallEP>
}
 80082ae:	46c0      	nop			; (mov r8, r8)
 80082b0:	46bd      	mov	sp, r7
 80082b2:	b002      	add	sp, #8
 80082b4:	bd80      	pop	{r7, pc}

080082b6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80082b6:	b590      	push	{r4, r7, lr}
 80082b8:	b087      	sub	sp, #28
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	60f8      	str	r0, [r7, #12]
 80082be:	60b9      	str	r1, [r7, #8]
 80082c0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80082c2:	2417      	movs	r4, #23
 80082c4:	193b      	adds	r3, r7, r4
 80082c6:	2200      	movs	r2, #0
 80082c8:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d03c      	beq.n	800834a <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	0018      	movs	r0, r3
 80082d4:	f000 f83d 	bl	8008352 <USBD_GetLen>
 80082d8:	0003      	movs	r3, r0
 80082da:	3301      	adds	r3, #1
 80082dc:	b29b      	uxth	r3, r3
 80082de:	18db      	adds	r3, r3, r3
 80082e0:	b29a      	uxth	r2, r3
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80082e6:	193b      	adds	r3, r7, r4
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	193a      	adds	r2, r7, r4
 80082ec:	1c59      	adds	r1, r3, #1
 80082ee:	7011      	strb	r1, [r2, #0]
 80082f0:	001a      	movs	r2, r3
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	189b      	adds	r3, r3, r2
 80082f6:	687a      	ldr	r2, [r7, #4]
 80082f8:	7812      	ldrb	r2, [r2, #0]
 80082fa:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80082fc:	193b      	adds	r3, r7, r4
 80082fe:	781b      	ldrb	r3, [r3, #0]
 8008300:	193a      	adds	r2, r7, r4
 8008302:	1c59      	adds	r1, r3, #1
 8008304:	7011      	strb	r1, [r2, #0]
 8008306:	001a      	movs	r2, r3
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	189b      	adds	r3, r3, r2
 800830c:	2203      	movs	r2, #3
 800830e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008310:	e017      	b.n	8008342 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	1c5a      	adds	r2, r3, #1
 8008316:	60fa      	str	r2, [r7, #12]
 8008318:	2417      	movs	r4, #23
 800831a:	193a      	adds	r2, r7, r4
 800831c:	7812      	ldrb	r2, [r2, #0]
 800831e:	1939      	adds	r1, r7, r4
 8008320:	1c50      	adds	r0, r2, #1
 8008322:	7008      	strb	r0, [r1, #0]
 8008324:	0011      	movs	r1, r2
 8008326:	68ba      	ldr	r2, [r7, #8]
 8008328:	1852      	adds	r2, r2, r1
 800832a:	781b      	ldrb	r3, [r3, #0]
 800832c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800832e:	193b      	adds	r3, r7, r4
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	193a      	adds	r2, r7, r4
 8008334:	1c59      	adds	r1, r3, #1
 8008336:	7011      	strb	r1, [r2, #0]
 8008338:	001a      	movs	r2, r3
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	189b      	adds	r3, r3, r2
 800833e:	2200      	movs	r2, #0
 8008340:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d1e3      	bne.n	8008312 <USBD_GetString+0x5c>
    }
  }
}
 800834a:	46c0      	nop			; (mov r8, r8)
 800834c:	46bd      	mov	sp, r7
 800834e:	b007      	add	sp, #28
 8008350:	bd90      	pop	{r4, r7, pc}

08008352 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008352:	b580      	push	{r7, lr}
 8008354:	b084      	sub	sp, #16
 8008356:	af00      	add	r7, sp, #0
 8008358:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800835a:	230f      	movs	r3, #15
 800835c:	18fb      	adds	r3, r7, r3
 800835e:	2200      	movs	r2, #0
 8008360:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8008362:	e008      	b.n	8008376 <USBD_GetLen+0x24>
  {
    len++;
 8008364:	210f      	movs	r1, #15
 8008366:	187b      	adds	r3, r7, r1
 8008368:	781a      	ldrb	r2, [r3, #0]
 800836a:	187b      	adds	r3, r7, r1
 800836c:	3201      	adds	r2, #1
 800836e:	701a      	strb	r2, [r3, #0]
    buf++;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	3301      	adds	r3, #1
 8008374:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	781b      	ldrb	r3, [r3, #0]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d1f2      	bne.n	8008364 <USBD_GetLen+0x12>
  }

  return len;
 800837e:	230f      	movs	r3, #15
 8008380:	18fb      	adds	r3, r7, r3
 8008382:	781b      	ldrb	r3, [r3, #0]
}
 8008384:	0018      	movs	r0, r3
 8008386:	46bd      	mov	sp, r7
 8008388:	b004      	add	sp, #16
 800838a:	bd80      	pop	{r7, pc}

0800838c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b084      	sub	sp, #16
 8008390:	af00      	add	r7, sp, #0
 8008392:	60f8      	str	r0, [r7, #12]
 8008394:	60b9      	str	r1, [r7, #8]
 8008396:	1dbb      	adds	r3, r7, #6
 8008398:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800839a:	68fa      	ldr	r2, [r7, #12]
 800839c:	23a5      	movs	r3, #165	; 0xa5
 800839e:	009b      	lsls	r3, r3, #2
 80083a0:	2102      	movs	r1, #2
 80083a2:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 80083a4:	1dbb      	adds	r3, r7, #6
 80083a6:	881a      	ldrh	r2, [r3, #0]
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80083ac:	1dbb      	adds	r3, r7, #6
 80083ae:	881a      	ldrh	r2, [r3, #0]
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80083b4:	1dbb      	adds	r3, r7, #6
 80083b6:	881b      	ldrh	r3, [r3, #0]
 80083b8:	68ba      	ldr	r2, [r7, #8]
 80083ba:	68f8      	ldr	r0, [r7, #12]
 80083bc:	2100      	movs	r1, #0
 80083be:	f000 fd8d 	bl	8008edc <USBD_LL_Transmit>

  return USBD_OK;
 80083c2:	2300      	movs	r3, #0
}
 80083c4:	0018      	movs	r0, r3
 80083c6:	46bd      	mov	sp, r7
 80083c8:	b004      	add	sp, #16
 80083ca:	bd80      	pop	{r7, pc}

080083cc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b084      	sub	sp, #16
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	60f8      	str	r0, [r7, #12]
 80083d4:	60b9      	str	r1, [r7, #8]
 80083d6:	1dbb      	adds	r3, r7, #6
 80083d8:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80083da:	1dbb      	adds	r3, r7, #6
 80083dc:	881b      	ldrh	r3, [r3, #0]
 80083de:	68ba      	ldr	r2, [r7, #8]
 80083e0:	68f8      	ldr	r0, [r7, #12]
 80083e2:	2100      	movs	r1, #0
 80083e4:	f000 fd7a 	bl	8008edc <USBD_LL_Transmit>

  return USBD_OK;
 80083e8:	2300      	movs	r3, #0
}
 80083ea:	0018      	movs	r0, r3
 80083ec:	46bd      	mov	sp, r7
 80083ee:	b004      	add	sp, #16
 80083f0:	bd80      	pop	{r7, pc}

080083f2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80083f2:	b580      	push	{r7, lr}
 80083f4:	b084      	sub	sp, #16
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	60f8      	str	r0, [r7, #12]
 80083fa:	60b9      	str	r1, [r7, #8]
 80083fc:	1dbb      	adds	r3, r7, #6
 80083fe:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008400:	1dbb      	adds	r3, r7, #6
 8008402:	881b      	ldrh	r3, [r3, #0]
 8008404:	68ba      	ldr	r2, [r7, #8]
 8008406:	68f8      	ldr	r0, [r7, #12]
 8008408:	2100      	movs	r1, #0
 800840a:	f000 fd9e 	bl	8008f4a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800840e:	2300      	movs	r3, #0
}
 8008410:	0018      	movs	r0, r3
 8008412:	46bd      	mov	sp, r7
 8008414:	b004      	add	sp, #16
 8008416:	bd80      	pop	{r7, pc}

08008418 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b082      	sub	sp, #8
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008420:	687a      	ldr	r2, [r7, #4]
 8008422:	23a5      	movs	r3, #165	; 0xa5
 8008424:	009b      	lsls	r3, r3, #2
 8008426:	2104      	movs	r1, #4
 8008428:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	2300      	movs	r3, #0
 800842e:	2200      	movs	r2, #0
 8008430:	2100      	movs	r1, #0
 8008432:	f000 fd53 	bl	8008edc <USBD_LL_Transmit>

  return USBD_OK;
 8008436:	2300      	movs	r3, #0
}
 8008438:	0018      	movs	r0, r3
 800843a:	46bd      	mov	sp, r7
 800843c:	b002      	add	sp, #8
 800843e:	bd80      	pop	{r7, pc}

08008440 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b082      	sub	sp, #8
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008448:	687a      	ldr	r2, [r7, #4]
 800844a:	23a5      	movs	r3, #165	; 0xa5
 800844c:	009b      	lsls	r3, r3, #2
 800844e:	2105      	movs	r1, #5
 8008450:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	2300      	movs	r3, #0
 8008456:	2200      	movs	r2, #0
 8008458:	2100      	movs	r1, #0
 800845a:	f000 fd76 	bl	8008f4a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800845e:	2300      	movs	r3, #0
}
 8008460:	0018      	movs	r0, r3
 8008462:	46bd      	mov	sp, r7
 8008464:	b002      	add	sp, #8
 8008466:	bd80      	pop	{r7, pc}

08008468 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800846c:	4914      	ldr	r1, [pc, #80]	; (80084c0 <MX_USB_DEVICE_Init+0x58>)
 800846e:	4b15      	ldr	r3, [pc, #84]	; (80084c4 <MX_USB_DEVICE_Init+0x5c>)
 8008470:	2200      	movs	r2, #0
 8008472:	0018      	movs	r0, r3
 8008474:	f7fe fe0e 	bl	8007094 <USBD_Init>
 8008478:	1e03      	subs	r3, r0, #0
 800847a:	d001      	beq.n	8008480 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800847c:	f7f8 f8b4 	bl	80005e8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8008480:	4a11      	ldr	r2, [pc, #68]	; (80084c8 <MX_USB_DEVICE_Init+0x60>)
 8008482:	4b10      	ldr	r3, [pc, #64]	; (80084c4 <MX_USB_DEVICE_Init+0x5c>)
 8008484:	0011      	movs	r1, r2
 8008486:	0018      	movs	r0, r3
 8008488:	f7fe fe35 	bl	80070f6 <USBD_RegisterClass>
 800848c:	1e03      	subs	r3, r0, #0
 800848e:	d001      	beq.n	8008494 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8008490:	f7f8 f8aa 	bl	80005e8 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8008494:	4a0d      	ldr	r2, [pc, #52]	; (80084cc <MX_USB_DEVICE_Init+0x64>)
 8008496:	4b0b      	ldr	r3, [pc, #44]	; (80084c4 <MX_USB_DEVICE_Init+0x5c>)
 8008498:	0011      	movs	r1, r2
 800849a:	0018      	movs	r0, r3
 800849c:	f7fd fd36 	bl	8005f0c <USBD_MSC_RegisterStorage>
 80084a0:	1e03      	subs	r3, r0, #0
 80084a2:	d001      	beq.n	80084a8 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 80084a4:	f7f8 f8a0 	bl	80005e8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80084a8:	4b06      	ldr	r3, [pc, #24]	; (80084c4 <MX_USB_DEVICE_Init+0x5c>)
 80084aa:	0018      	movs	r0, r3
 80084ac:	f7fe fe43 	bl	8007136 <USBD_Start>
 80084b0:	1e03      	subs	r3, r0, #0
 80084b2:	d001      	beq.n	80084b8 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 80084b4:	f7f8 f898 	bl	80005e8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80084b8:	46c0      	nop			; (mov r8, r8)
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
 80084be:	46c0      	nop			; (mov r8, r8)
 80084c0:	200000b0 	.word	0x200000b0
 80084c4:	2000015c 	.word	0x2000015c
 80084c8:	2000000c 	.word	0x2000000c
 80084cc:	20000100 	.word	0x20000100

080084d0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b082      	sub	sp, #8
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	0002      	movs	r2, r0
 80084d8:	6039      	str	r1, [r7, #0]
 80084da:	1dfb      	adds	r3, r7, #7
 80084dc:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	2212      	movs	r2, #18
 80084e2:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80084e4:	4b02      	ldr	r3, [pc, #8]	; (80084f0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80084e6:	0018      	movs	r0, r3
 80084e8:	46bd      	mov	sp, r7
 80084ea:	b002      	add	sp, #8
 80084ec:	bd80      	pop	{r7, pc}
 80084ee:	46c0      	nop			; (mov r8, r8)
 80084f0:	200000cc 	.word	0x200000cc

080084f4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b082      	sub	sp, #8
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	0002      	movs	r2, r0
 80084fc:	6039      	str	r1, [r7, #0]
 80084fe:	1dfb      	adds	r3, r7, #7
 8008500:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	2204      	movs	r2, #4
 8008506:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008508:	4b02      	ldr	r3, [pc, #8]	; (8008514 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800850a:	0018      	movs	r0, r3
 800850c:	46bd      	mov	sp, r7
 800850e:	b002      	add	sp, #8
 8008510:	bd80      	pop	{r7, pc}
 8008512:	46c0      	nop			; (mov r8, r8)
 8008514:	200000e0 	.word	0x200000e0

08008518 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b082      	sub	sp, #8
 800851c:	af00      	add	r7, sp, #0
 800851e:	0002      	movs	r2, r0
 8008520:	6039      	str	r1, [r7, #0]
 8008522:	1dfb      	adds	r3, r7, #7
 8008524:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8008526:	1dfb      	adds	r3, r7, #7
 8008528:	781b      	ldrb	r3, [r3, #0]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d106      	bne.n	800853c <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800852e:	683a      	ldr	r2, [r7, #0]
 8008530:	4908      	ldr	r1, [pc, #32]	; (8008554 <USBD_FS_ProductStrDescriptor+0x3c>)
 8008532:	4b09      	ldr	r3, [pc, #36]	; (8008558 <USBD_FS_ProductStrDescriptor+0x40>)
 8008534:	0018      	movs	r0, r3
 8008536:	f7ff febe 	bl	80082b6 <USBD_GetString>
 800853a:	e005      	b.n	8008548 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800853c:	683a      	ldr	r2, [r7, #0]
 800853e:	4905      	ldr	r1, [pc, #20]	; (8008554 <USBD_FS_ProductStrDescriptor+0x3c>)
 8008540:	4b05      	ldr	r3, [pc, #20]	; (8008558 <USBD_FS_ProductStrDescriptor+0x40>)
 8008542:	0018      	movs	r0, r3
 8008544:	f7ff feb7 	bl	80082b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008548:	4b02      	ldr	r3, [pc, #8]	; (8008554 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800854a:	0018      	movs	r0, r3
 800854c:	46bd      	mov	sp, r7
 800854e:	b002      	add	sp, #8
 8008550:	bd80      	pop	{r7, pc}
 8008552:	46c0      	nop			; (mov r8, r8)
 8008554:	20000420 	.word	0x20000420
 8008558:	0800910c 	.word	0x0800910c

0800855c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b082      	sub	sp, #8
 8008560:	af00      	add	r7, sp, #0
 8008562:	0002      	movs	r2, r0
 8008564:	6039      	str	r1, [r7, #0]
 8008566:	1dfb      	adds	r3, r7, #7
 8008568:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800856a:	683a      	ldr	r2, [r7, #0]
 800856c:	4904      	ldr	r1, [pc, #16]	; (8008580 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800856e:	4b05      	ldr	r3, [pc, #20]	; (8008584 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8008570:	0018      	movs	r0, r3
 8008572:	f7ff fea0 	bl	80082b6 <USBD_GetString>
  return USBD_StrDesc;
 8008576:	4b02      	ldr	r3, [pc, #8]	; (8008580 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8008578:	0018      	movs	r0, r3
 800857a:	46bd      	mov	sp, r7
 800857c:	b002      	add	sp, #8
 800857e:	bd80      	pop	{r7, pc}
 8008580:	20000420 	.word	0x20000420
 8008584:	08009120 	.word	0x08009120

08008588 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b082      	sub	sp, #8
 800858c:	af00      	add	r7, sp, #0
 800858e:	0002      	movs	r2, r0
 8008590:	6039      	str	r1, [r7, #0]
 8008592:	1dfb      	adds	r3, r7, #7
 8008594:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	221a      	movs	r2, #26
 800859a:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800859c:	f000 f84c 	bl	8008638 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80085a0:	4b02      	ldr	r3, [pc, #8]	; (80085ac <USBD_FS_SerialStrDescriptor+0x24>)
}
 80085a2:	0018      	movs	r0, r3
 80085a4:	46bd      	mov	sp, r7
 80085a6:	b002      	add	sp, #8
 80085a8:	bd80      	pop	{r7, pc}
 80085aa:	46c0      	nop			; (mov r8, r8)
 80085ac:	200000e4 	.word	0x200000e4

080085b0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b082      	sub	sp, #8
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	0002      	movs	r2, r0
 80085b8:	6039      	str	r1, [r7, #0]
 80085ba:	1dfb      	adds	r3, r7, #7
 80085bc:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 80085be:	1dfb      	adds	r3, r7, #7
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d106      	bne.n	80085d4 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80085c6:	683a      	ldr	r2, [r7, #0]
 80085c8:	4908      	ldr	r1, [pc, #32]	; (80085ec <USBD_FS_ConfigStrDescriptor+0x3c>)
 80085ca:	4b09      	ldr	r3, [pc, #36]	; (80085f0 <USBD_FS_ConfigStrDescriptor+0x40>)
 80085cc:	0018      	movs	r0, r3
 80085ce:	f7ff fe72 	bl	80082b6 <USBD_GetString>
 80085d2:	e005      	b.n	80085e0 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80085d4:	683a      	ldr	r2, [r7, #0]
 80085d6:	4905      	ldr	r1, [pc, #20]	; (80085ec <USBD_FS_ConfigStrDescriptor+0x3c>)
 80085d8:	4b05      	ldr	r3, [pc, #20]	; (80085f0 <USBD_FS_ConfigStrDescriptor+0x40>)
 80085da:	0018      	movs	r0, r3
 80085dc:	f7ff fe6b 	bl	80082b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80085e0:	4b02      	ldr	r3, [pc, #8]	; (80085ec <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 80085e2:	0018      	movs	r0, r3
 80085e4:	46bd      	mov	sp, r7
 80085e6:	b002      	add	sp, #8
 80085e8:	bd80      	pop	{r7, pc}
 80085ea:	46c0      	nop			; (mov r8, r8)
 80085ec:	20000420 	.word	0x20000420
 80085f0:	08009134 	.word	0x08009134

080085f4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b082      	sub	sp, #8
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	0002      	movs	r2, r0
 80085fc:	6039      	str	r1, [r7, #0]
 80085fe:	1dfb      	adds	r3, r7, #7
 8008600:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8008602:	1dfb      	adds	r3, r7, #7
 8008604:	781b      	ldrb	r3, [r3, #0]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d106      	bne.n	8008618 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800860a:	683a      	ldr	r2, [r7, #0]
 800860c:	4908      	ldr	r1, [pc, #32]	; (8008630 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800860e:	4b09      	ldr	r3, [pc, #36]	; (8008634 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8008610:	0018      	movs	r0, r3
 8008612:	f7ff fe50 	bl	80082b6 <USBD_GetString>
 8008616:	e005      	b.n	8008624 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008618:	683a      	ldr	r2, [r7, #0]
 800861a:	4905      	ldr	r1, [pc, #20]	; (8008630 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800861c:	4b05      	ldr	r3, [pc, #20]	; (8008634 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800861e:	0018      	movs	r0, r3
 8008620:	f7ff fe49 	bl	80082b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008624:	4b02      	ldr	r3, [pc, #8]	; (8008630 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8008626:	0018      	movs	r0, r3
 8008628:	46bd      	mov	sp, r7
 800862a:	b002      	add	sp, #8
 800862c:	bd80      	pop	{r7, pc}
 800862e:	46c0      	nop			; (mov r8, r8)
 8008630:	20000420 	.word	0x20000420
 8008634:	08009140 	.word	0x08009140

08008638 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b084      	sub	sp, #16
 800863c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800863e:	4b10      	ldr	r3, [pc, #64]	; (8008680 <Get_SerialNum+0x48>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008644:	4b0f      	ldr	r3, [pc, #60]	; (8008684 <Get_SerialNum+0x4c>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800864a:	4b0f      	ldr	r3, [pc, #60]	; (8008688 <Get_SerialNum+0x50>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008650:	68fa      	ldr	r2, [r7, #12]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	18d3      	adds	r3, r2, r3
 8008656:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d00b      	beq.n	8008676 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800865e:	490b      	ldr	r1, [pc, #44]	; (800868c <Get_SerialNum+0x54>)
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2208      	movs	r2, #8
 8008664:	0018      	movs	r0, r3
 8008666:	f000 f815 	bl	8008694 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800866a:	4909      	ldr	r1, [pc, #36]	; (8008690 <Get_SerialNum+0x58>)
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	2204      	movs	r2, #4
 8008670:	0018      	movs	r0, r3
 8008672:	f000 f80f 	bl	8008694 <IntToUnicode>
  }
}
 8008676:	46c0      	nop			; (mov r8, r8)
 8008678:	46bd      	mov	sp, r7
 800867a:	b004      	add	sp, #16
 800867c:	bd80      	pop	{r7, pc}
 800867e:	46c0      	nop			; (mov r8, r8)
 8008680:	1ff80050 	.word	0x1ff80050
 8008684:	1ff80054 	.word	0x1ff80054
 8008688:	1ff80058 	.word	0x1ff80058
 800868c:	200000e6 	.word	0x200000e6
 8008690:	200000f6 	.word	0x200000f6

08008694 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b086      	sub	sp, #24
 8008698:	af00      	add	r7, sp, #0
 800869a:	60f8      	str	r0, [r7, #12]
 800869c:	60b9      	str	r1, [r7, #8]
 800869e:	1dfb      	adds	r3, r7, #7
 80086a0:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 80086a2:	2117      	movs	r1, #23
 80086a4:	187b      	adds	r3, r7, r1
 80086a6:	2200      	movs	r2, #0
 80086a8:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 80086aa:	187b      	adds	r3, r7, r1
 80086ac:	2200      	movs	r2, #0
 80086ae:	701a      	strb	r2, [r3, #0]
 80086b0:	e02f      	b.n	8008712 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	0f1b      	lsrs	r3, r3, #28
 80086b6:	2b09      	cmp	r3, #9
 80086b8:	d80d      	bhi.n	80086d6 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	0f1b      	lsrs	r3, r3, #28
 80086be:	b2da      	uxtb	r2, r3
 80086c0:	2317      	movs	r3, #23
 80086c2:	18fb      	adds	r3, r7, r3
 80086c4:	781b      	ldrb	r3, [r3, #0]
 80086c6:	005b      	lsls	r3, r3, #1
 80086c8:	0019      	movs	r1, r3
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	185b      	adds	r3, r3, r1
 80086ce:	3230      	adds	r2, #48	; 0x30
 80086d0:	b2d2      	uxtb	r2, r2
 80086d2:	701a      	strb	r2, [r3, #0]
 80086d4:	e00c      	b.n	80086f0 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	0f1b      	lsrs	r3, r3, #28
 80086da:	b2da      	uxtb	r2, r3
 80086dc:	2317      	movs	r3, #23
 80086de:	18fb      	adds	r3, r7, r3
 80086e0:	781b      	ldrb	r3, [r3, #0]
 80086e2:	005b      	lsls	r3, r3, #1
 80086e4:	0019      	movs	r1, r3
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	185b      	adds	r3, r3, r1
 80086ea:	3237      	adds	r2, #55	; 0x37
 80086ec:	b2d2      	uxtb	r2, r2
 80086ee:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	011b      	lsls	r3, r3, #4
 80086f4:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80086f6:	2117      	movs	r1, #23
 80086f8:	187b      	adds	r3, r7, r1
 80086fa:	781b      	ldrb	r3, [r3, #0]
 80086fc:	005b      	lsls	r3, r3, #1
 80086fe:	3301      	adds	r3, #1
 8008700:	68ba      	ldr	r2, [r7, #8]
 8008702:	18d3      	adds	r3, r2, r3
 8008704:	2200      	movs	r2, #0
 8008706:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008708:	187b      	adds	r3, r7, r1
 800870a:	781a      	ldrb	r2, [r3, #0]
 800870c:	187b      	adds	r3, r7, r1
 800870e:	3201      	adds	r2, #1
 8008710:	701a      	strb	r2, [r3, #0]
 8008712:	2317      	movs	r3, #23
 8008714:	18fa      	adds	r2, r7, r3
 8008716:	1dfb      	adds	r3, r7, #7
 8008718:	7812      	ldrb	r2, [r2, #0]
 800871a:	781b      	ldrb	r3, [r3, #0]
 800871c:	429a      	cmp	r2, r3
 800871e:	d3c8      	bcc.n	80086b2 <IntToUnicode+0x1e>
  }
}
 8008720:	46c0      	nop			; (mov r8, r8)
 8008722:	46c0      	nop			; (mov r8, r8)
 8008724:	46bd      	mov	sp, r7
 8008726:	b006      	add	sp, #24
 8008728:	bd80      	pop	{r7, pc}
	...

0800872c <write_data_to_flash>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval HAL_StatusTypeDef
  */
static HAL_StatusTypeDef write_data_to_flash( uint8_t *buf, uint32_t blk_addr, uint16_t blk_len )
{
 800872c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800872e:	4c44      	ldr	r4, [pc, #272]	; (8008840 <write_data_to_flash+0x114>)
 8008730:	44a5      	add	sp, r4
 8008732:	af00      	add	r7, sp, #0
 8008734:	60f8      	str	r0, [r7, #12]
 8008736:	60b9      	str	r1, [r7, #8]
 8008738:	4b42      	ldr	r3, [pc, #264]	; (8008844 <write_data_to_flash+0x118>)
 800873a:	4d43      	ldr	r5, [pc, #268]	; (8008848 <write_data_to_flash+0x11c>)
 800873c:	195b      	adds	r3, r3, r5
 800873e:	19db      	adds	r3, r3, r7
 8008740:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008742:	4c42      	ldr	r4, [pc, #264]	; (800884c <write_data_to_flash+0x120>)
 8008744:	193b      	adds	r3, r7, r4
 8008746:	2200      	movs	r2, #0
 8008748:	701a      	strb	r2, [r3, #0]
  uint8_t           data[ TOTAL_USB_DEVICE_SIZE ];

  do
  {
    /* First copy the data to the local buffer from Flash */
    memcpy( data, (const void *)USB_FLASH_START_ADDRESS, TOTAL_USB_DEVICE_SIZE );
 800874a:	4b41      	ldr	r3, [pc, #260]	; (8008850 <write_data_to_flash+0x124>)
 800874c:	195b      	adds	r3, r3, r5
 800874e:	19da      	adds	r2, r3, r7
 8008750:	2380      	movs	r3, #128	; 0x80
 8008752:	051b      	lsls	r3, r3, #20
 8008754:	0010      	movs	r0, r2
 8008756:	0019      	movs	r1, r3
 8008758:	23a0      	movs	r3, #160	; 0xa0
 800875a:	01db      	lsls	r3, r3, #7
 800875c:	001a      	movs	r2, r3
 800875e:	f000 fcb7 	bl	80090d0 <memcpy>

    /* Make modifications in the local buffer */
    memcpy((void*)&data[blk_addr*STORAGE_BLK_SIZ], buf, (blk_len*STORAGE_BLK_SIZ));
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	025b      	lsls	r3, r3, #9
 8008766:	2220      	movs	r2, #32
 8008768:	18ba      	adds	r2, r7, r2
 800876a:	18d0      	adds	r0, r2, r3
 800876c:	4b35      	ldr	r3, [pc, #212]	; (8008844 <write_data_to_flash+0x118>)
 800876e:	195b      	adds	r3, r3, r5
 8008770:	19db      	adds	r3, r3, r7
 8008772:	881b      	ldrh	r3, [r3, #0]
 8008774:	025b      	lsls	r3, r3, #9
 8008776:	001a      	movs	r2, r3
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	0019      	movs	r1, r3
 800877c:	f000 fca8 	bl	80090d0 <memcpy>

    ret = HAL_FLASH_Unlock();
 8008780:	0026      	movs	r6, r4
 8008782:	193c      	adds	r4, r7, r4
 8008784:	f7f8 f928 	bl	80009d8 <HAL_FLASH_Unlock>
 8008788:	0003      	movs	r3, r0
 800878a:	7023      	strb	r3, [r4, #0]
    if( ret != HAL_OK )
 800878c:	0034      	movs	r4, r6
 800878e:	193b      	adds	r3, r7, r4
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d14a      	bne.n	800882c <write_data_to_flash+0x100>
    }

    /* Erase the Flash */
    FLASH_EraseInitTypeDef EraseInitStruct;
    uint32_t SectorError;
    EraseInitStruct.TypeErase     = FLASH_TYPEERASE_PAGES;
 8008796:	4b2f      	ldr	r3, [pc, #188]	; (8008854 <write_data_to_flash+0x128>)
 8008798:	195b      	adds	r3, r3, r5
 800879a:	19db      	adds	r3, r3, r7
 800879c:	2200      	movs	r2, #0
 800879e:	601a      	str	r2, [r3, #0]
    EraseInitStruct.PageAddress   = 0x08000000;
 80087a0:	4b2c      	ldr	r3, [pc, #176]	; (8008854 <write_data_to_flash+0x128>)
 80087a2:	195b      	adds	r3, r3, r5
 80087a4:	19db      	adds	r3, r3, r7
 80087a6:	2280      	movs	r2, #128	; 0x80
 80087a8:	0512      	lsls	r2, r2, #20
 80087aa:	605a      	str	r2, [r3, #4]
    EraseInitStruct.NbPages       = 160;                    //erase 160 pages
 80087ac:	4b29      	ldr	r3, [pc, #164]	; (8008854 <write_data_to_flash+0x128>)
 80087ae:	195b      	adds	r3, r3, r5
 80087b0:	19db      	adds	r3, r3, r7
 80087b2:	22a0      	movs	r2, #160	; 0xa0
 80087b4:	609a      	str	r2, [r3, #8]
//    EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;

    ret = HAL_FLASHEx_Erase( &EraseInitStruct, &SectorError );
 80087b6:	193c      	adds	r4, r7, r4
 80087b8:	2310      	movs	r3, #16
 80087ba:	18fa      	adds	r2, r7, r3
 80087bc:	2314      	movs	r3, #20
 80087be:	18fb      	adds	r3, r7, r3
 80087c0:	0011      	movs	r1, r2
 80087c2:	0018      	movs	r0, r3
 80087c4:	f7f8 fa7e 	bl	8000cc4 <HAL_FLASHEx_Erase>
 80087c8:	0003      	movs	r3, r0
 80087ca:	7023      	strb	r3, [r4, #0]

    /* Write the data to the Flash */
    for( uint32_t i = 0; i < TOTAL_USB_DEVICE_SIZE; i++)
 80087cc:	2300      	movs	r3, #0
 80087ce:	4a22      	ldr	r2, [pc, #136]	; (8008858 <write_data_to_flash+0x12c>)
 80087d0:	18ba      	adds	r2, r7, r2
 80087d2:	6013      	str	r3, [r2, #0]
 80087d4:	e01e      	b.n	8008814 <write_data_to_flash+0xe8>
    {
      ret = HAL_FLASH_Program( FLASH_TYPEPROGRAMDATA_BYTE,
 80087d6:	4d20      	ldr	r5, [pc, #128]	; (8008858 <write_data_to_flash+0x12c>)
 80087d8:	197b      	adds	r3, r7, r5
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	2280      	movs	r2, #128	; 0x80
 80087de:	0512      	lsls	r2, r2, #20
 80087e0:	1899      	adds	r1, r3, r2
                  ( USB_FLASH_START_ADDRESS + i ),
                  data[i]
 80087e2:	4b1b      	ldr	r3, [pc, #108]	; (8008850 <write_data_to_flash+0x124>)
 80087e4:	4a18      	ldr	r2, [pc, #96]	; (8008848 <write_data_to_flash+0x11c>)
 80087e6:	189b      	adds	r3, r3, r2
 80087e8:	19da      	adds	r2, r3, r7
 80087ea:	197b      	adds	r3, r7, r5
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	18d3      	adds	r3, r2, r3
 80087f0:	781b      	ldrb	r3, [r3, #0]
      ret = HAL_FLASH_Program( FLASH_TYPEPROGRAMDATA_BYTE,
 80087f2:	4e16      	ldr	r6, [pc, #88]	; (800884c <write_data_to_flash+0x120>)
 80087f4:	19bc      	adds	r4, r7, r6
 80087f6:	001a      	movs	r2, r3
 80087f8:	2000      	movs	r0, #0
 80087fa:	f7f8 f8b1 	bl	8000960 <HAL_FLASH_Program>
 80087fe:	0003      	movs	r3, r0
 8008800:	7023      	strb	r3, [r4, #0]
                  );

      if( ret != HAL_OK )
 8008802:	19bb      	adds	r3, r7, r6
 8008804:	781b      	ldrb	r3, [r3, #0]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d10c      	bne.n	8008824 <write_data_to_flash+0xf8>
    for( uint32_t i = 0; i < TOTAL_USB_DEVICE_SIZE; i++)
 800880a:	197b      	adds	r3, r7, r5
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	3301      	adds	r3, #1
 8008810:	197a      	adds	r2, r7, r5
 8008812:	6013      	str	r3, [r2, #0]
 8008814:	4b10      	ldr	r3, [pc, #64]	; (8008858 <write_data_to_flash+0x12c>)
 8008816:	18fb      	adds	r3, r7, r3
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	23a0      	movs	r3, #160	; 0xa0
 800881c:	01db      	lsls	r3, r3, #7
 800881e:	429a      	cmp	r2, r3
 8008820:	d3d9      	bcc.n	80087d6 <write_data_to_flash+0xaa>
 8008822:	e000      	b.n	8008826 <write_data_to_flash+0xfa>
      {
        break;
 8008824:	46c0      	nop			; (mov r8, r8)
      }
    }

    HAL_FLASH_Lock();
 8008826:	f7f8 f92b 	bl	8000a80 <HAL_FLASH_Lock>
 800882a:	e000      	b.n	800882e <write_data_to_flash+0x102>
      break;
 800882c:	46c0      	nop			; (mov r8, r8)
  } while( false );

  return( ret );
 800882e:	4b07      	ldr	r3, [pc, #28]	; (800884c <write_data_to_flash+0x120>)
 8008830:	18fb      	adds	r3, r7, r3
 8008832:	781b      	ldrb	r3, [r3, #0]
}
 8008834:	0018      	movs	r0, r3
 8008836:	46bd      	mov	sp, r7
 8008838:	4b08      	ldr	r3, [pc, #32]	; (800885c <write_data_to_flash+0x130>)
 800883a:	449d      	add	sp, r3
 800883c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800883e:	46c0      	nop			; (mov r8, r8)
 8008840:	ffffafd4 	.word	0xffffafd4
 8008844:	ffffafde 	.word	0xffffafde
 8008848:	00005028 	.word	0x00005028
 800884c:	00005027 	.word	0x00005027
 8008850:	ffffaff8 	.word	0xffffaff8
 8008854:	ffffafec 	.word	0xffffafec
 8008858:	00005020 	.word	0x00005020
 800885c:	0000502c 	.word	0x0000502c

08008860 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b082      	sub	sp, #8
 8008864:	af00      	add	r7, sp, #0
 8008866:	0002      	movs	r2, r0
 8008868:	1dfb      	adds	r3, r7, #7
 800886a:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 800886c:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800886e:	0018      	movs	r0, r3
 8008870:	46bd      	mov	sp, r7
 8008872:	b002      	add	sp, #8
 8008874:	bd80      	pop	{r7, pc}

08008876 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8008876:	b580      	push	{r7, lr}
 8008878:	b084      	sub	sp, #16
 800887a:	af00      	add	r7, sp, #0
 800887c:	60b9      	str	r1, [r7, #8]
 800887e:	607a      	str	r2, [r7, #4]
 8008880:	230f      	movs	r3, #15
 8008882:	18fb      	adds	r3, r7, r3
 8008884:	1c02      	adds	r2, r0, #0
 8008886:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	2228      	movs	r2, #40	; 0x28
 800888c:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2280      	movs	r2, #128	; 0x80
 8008892:	0092      	lsls	r2, r2, #2
 8008894:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 8008896:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008898:	0018      	movs	r0, r3
 800889a:	46bd      	mov	sp, r7
 800889c:	b004      	add	sp, #16
 800889e:	bd80      	pop	{r7, pc}

080088a0 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b082      	sub	sp, #8
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	0002      	movs	r2, r0
 80088a8:	1dfb      	adds	r3, r7, #7
 80088aa:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80088ac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80088ae:	0018      	movs	r0, r3
 80088b0:	46bd      	mov	sp, r7
 80088b2:	b002      	add	sp, #8
 80088b4:	bd80      	pop	{r7, pc}

080088b6 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 80088b6:	b580      	push	{r7, lr}
 80088b8:	b082      	sub	sp, #8
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	0002      	movs	r2, r0
 80088be:	1dfb      	adds	r3, r7, #7
 80088c0:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 80088c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80088c4:	0018      	movs	r0, r3
 80088c6:	46bd      	mov	sp, r7
 80088c8:	b002      	add	sp, #8
 80088ca:	bd80      	pop	{r7, pc}

080088cc <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b084      	sub	sp, #16
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	60b9      	str	r1, [r7, #8]
 80088d4:	607a      	str	r2, [r7, #4]
 80088d6:	0019      	movs	r1, r3
 80088d8:	230f      	movs	r3, #15
 80088da:	18fb      	adds	r3, r7, r3
 80088dc:	1c02      	adds	r2, r0, #0
 80088de:	701a      	strb	r2, [r3, #0]
 80088e0:	200c      	movs	r0, #12
 80088e2:	183b      	adds	r3, r7, r0
 80088e4:	1c0a      	adds	r2, r1, #0
 80088e6:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 6 */

	memcpy( buf,
	          (const void *)(USB_FLASH_START_ADDRESS + ( blk_addr * STORAGE_BLK_SIZ )),
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2280      	movs	r2, #128	; 0x80
 80088ec:	02d2      	lsls	r2, r2, #11
 80088ee:	4694      	mov	ip, r2
 80088f0:	4463      	add	r3, ip
 80088f2:	025b      	lsls	r3, r3, #9
	memcpy( buf,
 80088f4:	0019      	movs	r1, r3
	          (blk_len * STORAGE_BLK_SIZ)
 80088f6:	183b      	adds	r3, r7, r0
 80088f8:	881b      	ldrh	r3, [r3, #0]
 80088fa:	025b      	lsls	r3, r3, #9
	memcpy( buf,
 80088fc:	001a      	movs	r2, r3
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	0018      	movs	r0, r3
 8008902:	f000 fbe5 	bl	80090d0 <memcpy>
//        flash_addr += STORAGE_BLK_SIZ;
//    }
//    printf("Read: addr=%lu, len=%u\n", blk_addr, blk_len); // Debug log
//    return (USBD_OK);

  return (USBD_OK);
 8008906:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008908:	0018      	movs	r0, r3
 800890a:	46bd      	mov	sp, r7
 800890c:	b004      	add	sp, #16
 800890e:	bd80      	pop	{r7, pc}

08008910 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8008910:	b5b0      	push	{r4, r5, r7, lr}
 8008912:	b088      	sub	sp, #32
 8008914:	af00      	add	r7, sp, #0
 8008916:	60b9      	str	r1, [r7, #8]
 8008918:	607a      	str	r2, [r7, #4]
 800891a:	0019      	movs	r1, r3
 800891c:	230f      	movs	r3, #15
 800891e:	18fb      	adds	r3, r7, r3
 8008920:	1c02      	adds	r2, r0, #0
 8008922:	701a      	strb	r2, [r3, #0]
 8008924:	200c      	movs	r0, #12
 8008926:	183b      	adds	r3, r7, r0
 8008928:	1c0a      	adds	r2, r1, #0
 800892a:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 7 */

	// Check if this write operation is for creating a text file
	    if (blk_addr == 0 && blk_len == 1) {
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d11e      	bne.n	8008970 <STORAGE_Write_FS+0x60>
 8008932:	183b      	adds	r3, r7, r0
 8008934:	881b      	ldrh	r3, [r3, #0]
 8008936:	2b01      	cmp	r3, #1
 8008938:	d11a      	bne.n	8008970 <STORAGE_Write_FS+0x60>
	        // Define the file name and content
	        const char* file_name = "example.txt";
 800893a:	4b14      	ldr	r3, [pc, #80]	; (800898c <STORAGE_Write_FS+0x7c>)
 800893c:	61fb      	str	r3, [r7, #28]
	        const char* file_content = "Hello\n";
 800893e:	4b14      	ldr	r3, [pc, #80]	; (8008990 <STORAGE_Write_FS+0x80>)
 8008940:	61bb      	str	r3, [r7, #24]

	        // Write the file content to flash memory
	        HAL_StatusTypeDef ret = write_data_to_flash((uint8_t*)file_content, 0, strlen(file_content));
 8008942:	69bb      	ldr	r3, [r7, #24]
 8008944:	0018      	movs	r0, r3
 8008946:	f7f7 fbdf 	bl	8000108 <strlen>
 800894a:	0003      	movs	r3, r0
 800894c:	b29a      	uxth	r2, r3
 800894e:	2517      	movs	r5, #23
 8008950:	197c      	adds	r4, r7, r5
 8008952:	69bb      	ldr	r3, [r7, #24]
 8008954:	2100      	movs	r1, #0
 8008956:	0018      	movs	r0, r3
 8008958:	f7ff fee8 	bl	800872c <write_data_to_flash>
 800895c:	0003      	movs	r3, r0
 800895e:	7023      	strb	r3, [r4, #0]

	        if (ret != HAL_OK) {
 8008960:	197b      	adds	r3, r7, r5
 8008962:	781b      	ldrb	r3, [r3, #0]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d001      	beq.n	800896c <STORAGE_Write_FS+0x5c>
	            // Handle error, e.g., return USBD_FAIL
	            return USBD_FAIL;
 8008968:	2302      	movs	r3, #2
 800896a:	e00b      	b.n	8008984 <STORAGE_Write_FS+0x74>
	        }

	        // File creation successful
	        return USBD_OK;
 800896c:	2300      	movs	r3, #0
 800896e:	e009      	b.n	8008984 <STORAGE_Write_FS+0x74>
	    }
	return write_data_to_flash( buf, blk_addr, blk_len );
 8008970:	230c      	movs	r3, #12
 8008972:	18fb      	adds	r3, r7, r3
 8008974:	881a      	ldrh	r2, [r3, #0]
 8008976:	6879      	ldr	r1, [r7, #4]
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	0018      	movs	r0, r3
 800897c:	f7ff fed6 	bl	800872c <write_data_to_flash>
 8008980:	0003      	movs	r3, r0
 8008982:	b25b      	sxtb	r3, r3
//    HAL_FLASH_Lock();
//    printf("Write: addr=%lu, len=%u\n", blk_addr, blk_len); // Debug log
//
//    return (USBD_OK);
  /* USER CODE END 7 */
}
 8008984:	0018      	movs	r0, r3
 8008986:	46bd      	mov	sp, r7
 8008988:	b008      	add	sp, #32
 800898a:	bdb0      	pop	{r4, r5, r7, pc}
 800898c:	08009150 	.word	0x08009150
 8008990:	0800915c 	.word	0x0800915c

08008994 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8008998:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800899a:	0018      	movs	r0, r3
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}

080089a0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b082      	sub	sp, #8
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4a0a      	ldr	r2, [pc, #40]	; (80089d8 <HAL_PCD_MspInit+0x38>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d10e      	bne.n	80089d0 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80089b2:	4b0a      	ldr	r3, [pc, #40]	; (80089dc <HAL_PCD_MspInit+0x3c>)
 80089b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089b6:	4b09      	ldr	r3, [pc, #36]	; (80089dc <HAL_PCD_MspInit+0x3c>)
 80089b8:	2180      	movs	r1, #128	; 0x80
 80089ba:	0409      	lsls	r1, r1, #16
 80089bc:	430a      	orrs	r2, r1
 80089be:	639a      	str	r2, [r3, #56]	; 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 80089c0:	2200      	movs	r2, #0
 80089c2:	2100      	movs	r1, #0
 80089c4:	201f      	movs	r0, #31
 80089c6:	f7f7 ff99 	bl	80008fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 80089ca:	201f      	movs	r0, #31
 80089cc:	f7f7 ffab 	bl	8000926 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80089d0:	46c0      	nop			; (mov r8, r8)
 80089d2:	46bd      	mov	sp, r7
 80089d4:	b002      	add	sp, #8
 80089d6:	bd80      	pop	{r7, pc}
 80089d8:	40005c00 	.word	0x40005c00
 80089dc:	40021000 	.word	0x40021000

080089e0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b082      	sub	sp, #8
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	23bc      	movs	r3, #188	; 0xbc
 80089ec:	009b      	lsls	r3, r3, #2
 80089ee:	58d2      	ldr	r2, [r2, r3]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	21ac      	movs	r1, #172	; 0xac
 80089f4:	0089      	lsls	r1, r1, #2
 80089f6:	468c      	mov	ip, r1
 80089f8:	4463      	add	r3, ip
 80089fa:	0019      	movs	r1, r3
 80089fc:	0010      	movs	r0, r2
 80089fe:	f7fe fbed 	bl	80071dc <USBD_LL_SetupStage>
}
 8008a02:	46c0      	nop			; (mov r8, r8)
 8008a04:	46bd      	mov	sp, r7
 8008a06:	b002      	add	sp, #8
 8008a08:	bd80      	pop	{r7, pc}

08008a0a <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a0a:	b590      	push	{r4, r7, lr}
 8008a0c:	b083      	sub	sp, #12
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	6078      	str	r0, [r7, #4]
 8008a12:	000a      	movs	r2, r1
 8008a14:	1cfb      	adds	r3, r7, #3
 8008a16:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008a18:	687a      	ldr	r2, [r7, #4]
 8008a1a:	23bc      	movs	r3, #188	; 0xbc
 8008a1c:	009b      	lsls	r3, r3, #2
 8008a1e:	58d4      	ldr	r4, [r2, r3]
 8008a20:	1cfb      	adds	r3, r7, #3
 8008a22:	781a      	ldrb	r2, [r3, #0]
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	23be      	movs	r3, #190	; 0xbe
 8008a28:	0059      	lsls	r1, r3, #1
 8008a2a:	0013      	movs	r3, r2
 8008a2c:	009b      	lsls	r3, r3, #2
 8008a2e:	189b      	adds	r3, r3, r2
 8008a30:	00db      	lsls	r3, r3, #3
 8008a32:	18c3      	adds	r3, r0, r3
 8008a34:	185b      	adds	r3, r3, r1
 8008a36:	681a      	ldr	r2, [r3, #0]
 8008a38:	1cfb      	adds	r3, r7, #3
 8008a3a:	781b      	ldrb	r3, [r3, #0]
 8008a3c:	0019      	movs	r1, r3
 8008a3e:	0020      	movs	r0, r4
 8008a40:	f7fe fc2a 	bl	8007298 <USBD_LL_DataOutStage>
}
 8008a44:	46c0      	nop			; (mov r8, r8)
 8008a46:	46bd      	mov	sp, r7
 8008a48:	b003      	add	sp, #12
 8008a4a:	bd90      	pop	{r4, r7, pc}

08008a4c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b082      	sub	sp, #8
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	000a      	movs	r2, r1
 8008a56:	1cfb      	adds	r3, r7, #3
 8008a58:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008a5a:	687a      	ldr	r2, [r7, #4]
 8008a5c:	23bc      	movs	r3, #188	; 0xbc
 8008a5e:	009b      	lsls	r3, r3, #2
 8008a60:	58d0      	ldr	r0, [r2, r3]
 8008a62:	1cfb      	adds	r3, r7, #3
 8008a64:	781a      	ldrb	r2, [r3, #0]
 8008a66:	6879      	ldr	r1, [r7, #4]
 8008a68:	0013      	movs	r3, r2
 8008a6a:	009b      	lsls	r3, r3, #2
 8008a6c:	189b      	adds	r3, r3, r2
 8008a6e:	00db      	lsls	r3, r3, #3
 8008a70:	18cb      	adds	r3, r1, r3
 8008a72:	333c      	adds	r3, #60	; 0x3c
 8008a74:	681a      	ldr	r2, [r3, #0]
 8008a76:	1cfb      	adds	r3, r7, #3
 8008a78:	781b      	ldrb	r3, [r3, #0]
 8008a7a:	0019      	movs	r1, r3
 8008a7c:	f7fe fc8e 	bl	800739c <USBD_LL_DataInStage>
}
 8008a80:	46c0      	nop			; (mov r8, r8)
 8008a82:	46bd      	mov	sp, r7
 8008a84:	b002      	add	sp, #8
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b082      	sub	sp, #8
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008a90:	687a      	ldr	r2, [r7, #4]
 8008a92:	23bc      	movs	r3, #188	; 0xbc
 8008a94:	009b      	lsls	r3, r3, #2
 8008a96:	58d3      	ldr	r3, [r2, r3]
 8008a98:	0018      	movs	r0, r3
 8008a9a:	f7fe fdc5 	bl	8007628 <USBD_LL_SOF>
}
 8008a9e:	46c0      	nop			; (mov r8, r8)
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	b002      	add	sp, #8
 8008aa4:	bd80      	pop	{r7, pc}

08008aa6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008aa6:	b580      	push	{r7, lr}
 8008aa8:	b084      	sub	sp, #16
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008aae:	230f      	movs	r3, #15
 8008ab0:	18fb      	adds	r3, r7, r3
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	689b      	ldr	r3, [r3, #8]
 8008aba:	2b02      	cmp	r3, #2
 8008abc:	d001      	beq.n	8008ac2 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8008abe:	f7f7 fd93 	bl	80005e8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008ac2:	687a      	ldr	r2, [r7, #4]
 8008ac4:	23bc      	movs	r3, #188	; 0xbc
 8008ac6:	009b      	lsls	r3, r3, #2
 8008ac8:	58d2      	ldr	r2, [r2, r3]
 8008aca:	230f      	movs	r3, #15
 8008acc:	18fb      	adds	r3, r7, r3
 8008ace:	781b      	ldrb	r3, [r3, #0]
 8008ad0:	0019      	movs	r1, r3
 8008ad2:	0010      	movs	r0, r2
 8008ad4:	f7fe fd67 	bl	80075a6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008ad8:	687a      	ldr	r2, [r7, #4]
 8008ada:	23bc      	movs	r3, #188	; 0xbc
 8008adc:	009b      	lsls	r3, r3, #2
 8008ade:	58d3      	ldr	r3, [r2, r3]
 8008ae0:	0018      	movs	r0, r3
 8008ae2:	f7fe fd18 	bl	8007516 <USBD_LL_Reset>
}
 8008ae6:	46c0      	nop			; (mov r8, r8)
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	b004      	add	sp, #16
 8008aec:	bd80      	pop	{r7, pc}
	...

08008af0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b082      	sub	sp, #8
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008af8:	687a      	ldr	r2, [r7, #4]
 8008afa:	23bc      	movs	r3, #188	; 0xbc
 8008afc:	009b      	lsls	r3, r3, #2
 8008afe:	58d3      	ldr	r3, [r2, r3]
 8008b00:	0018      	movs	r0, r3
 8008b02:	f7fe fd61 	bl	80075c8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	699b      	ldr	r3, [r3, #24]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d005      	beq.n	8008b1a <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008b0e:	4b05      	ldr	r3, [pc, #20]	; (8008b24 <HAL_PCD_SuspendCallback+0x34>)
 8008b10:	691a      	ldr	r2, [r3, #16]
 8008b12:	4b04      	ldr	r3, [pc, #16]	; (8008b24 <HAL_PCD_SuspendCallback+0x34>)
 8008b14:	2106      	movs	r1, #6
 8008b16:	430a      	orrs	r2, r1
 8008b18:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 8008b1a:	46c0      	nop			; (mov r8, r8)
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	b002      	add	sp, #8
 8008b20:	bd80      	pop	{r7, pc}
 8008b22:	46c0      	nop			; (mov r8, r8)
 8008b24:	e000ed00 	.word	0xe000ed00

08008b28 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b082      	sub	sp, #8
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	699b      	ldr	r3, [r3, #24]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d007      	beq.n	8008b48 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008b38:	4b09      	ldr	r3, [pc, #36]	; (8008b60 <HAL_PCD_ResumeCallback+0x38>)
 8008b3a:	691a      	ldr	r2, [r3, #16]
 8008b3c:	4b08      	ldr	r3, [pc, #32]	; (8008b60 <HAL_PCD_ResumeCallback+0x38>)
 8008b3e:	2106      	movs	r1, #6
 8008b40:	438a      	bics	r2, r1
 8008b42:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8008b44:	f000 fa62 	bl	800900c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008b48:	687a      	ldr	r2, [r7, #4]
 8008b4a:	23bc      	movs	r3, #188	; 0xbc
 8008b4c:	009b      	lsls	r3, r3, #2
 8008b4e:	58d3      	ldr	r3, [r2, r3]
 8008b50:	0018      	movs	r0, r3
 8008b52:	f7fe fd51 	bl	80075f8 <USBD_LL_Resume>
}
 8008b56:	46c0      	nop			; (mov r8, r8)
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	b002      	add	sp, #8
 8008b5c:	bd80      	pop	{r7, pc}
 8008b5e:	46c0      	nop			; (mov r8, r8)
 8008b60:	e000ed00 	.word	0xe000ed00

08008b64 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b082      	sub	sp, #8
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008b6c:	4a27      	ldr	r2, [pc, #156]	; (8008c0c <USBD_LL_Init+0xa8>)
 8008b6e:	23bc      	movs	r3, #188	; 0xbc
 8008b70:	009b      	lsls	r3, r3, #2
 8008b72:	6879      	ldr	r1, [r7, #4]
 8008b74:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 8008b76:	687a      	ldr	r2, [r7, #4]
 8008b78:	23b0      	movs	r3, #176	; 0xb0
 8008b7a:	009b      	lsls	r3, r3, #2
 8008b7c:	4923      	ldr	r1, [pc, #140]	; (8008c0c <USBD_LL_Init+0xa8>)
 8008b7e:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8008b80:	4b22      	ldr	r3, [pc, #136]	; (8008c0c <USBD_LL_Init+0xa8>)
 8008b82:	4a23      	ldr	r2, [pc, #140]	; (8008c10 <USBD_LL_Init+0xac>)
 8008b84:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008b86:	4b21      	ldr	r3, [pc, #132]	; (8008c0c <USBD_LL_Init+0xa8>)
 8008b88:	2208      	movs	r2, #8
 8008b8a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008b8c:	4b1f      	ldr	r3, [pc, #124]	; (8008c0c <USBD_LL_Init+0xa8>)
 8008b8e:	2202      	movs	r2, #2
 8008b90:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008b92:	4b1e      	ldr	r3, [pc, #120]	; (8008c0c <USBD_LL_Init+0xa8>)
 8008b94:	2202      	movs	r2, #2
 8008b96:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008b98:	4b1c      	ldr	r3, [pc, #112]	; (8008c0c <USBD_LL_Init+0xa8>)
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008b9e:	4b1b      	ldr	r3, [pc, #108]	; (8008c0c <USBD_LL_Init+0xa8>)
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008ba4:	4b19      	ldr	r3, [pc, #100]	; (8008c0c <USBD_LL_Init+0xa8>)
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008baa:	4b18      	ldr	r3, [pc, #96]	; (8008c0c <USBD_LL_Init+0xa8>)
 8008bac:	0018      	movs	r0, r3
 8008bae:	f7f8 f911 	bl	8000dd4 <HAL_PCD_Init>
 8008bb2:	1e03      	subs	r3, r0, #0
 8008bb4:	d001      	beq.n	8008bba <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8008bb6:	f7f7 fd17 	bl	80005e8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008bba:	687a      	ldr	r2, [r7, #4]
 8008bbc:	23b0      	movs	r3, #176	; 0xb0
 8008bbe:	009b      	lsls	r3, r3, #2
 8008bc0:	58d0      	ldr	r0, [r2, r3]
 8008bc2:	2318      	movs	r3, #24
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	2100      	movs	r1, #0
 8008bc8:	f7f9 fede 	bl	8002988 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008bcc:	687a      	ldr	r2, [r7, #4]
 8008bce:	23b0      	movs	r3, #176	; 0xb0
 8008bd0:	009b      	lsls	r3, r3, #2
 8008bd2:	58d0      	ldr	r0, [r2, r3]
 8008bd4:	2358      	movs	r3, #88	; 0x58
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	2180      	movs	r1, #128	; 0x80
 8008bda:	f7f9 fed5 	bl	8002988 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_MSC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x98);
 8008bde:	687a      	ldr	r2, [r7, #4]
 8008be0:	23b0      	movs	r3, #176	; 0xb0
 8008be2:	009b      	lsls	r3, r3, #2
 8008be4:	58d0      	ldr	r0, [r2, r3]
 8008be6:	2398      	movs	r3, #152	; 0x98
 8008be8:	2200      	movs	r2, #0
 8008bea:	2181      	movs	r1, #129	; 0x81
 8008bec:	f7f9 fecc 	bl	8002988 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0xD8);
 8008bf0:	687a      	ldr	r2, [r7, #4]
 8008bf2:	23b0      	movs	r3, #176	; 0xb0
 8008bf4:	009b      	lsls	r3, r3, #2
 8008bf6:	58d0      	ldr	r0, [r2, r3]
 8008bf8:	23d8      	movs	r3, #216	; 0xd8
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	2101      	movs	r1, #1
 8008bfe:	f7f9 fec3 	bl	8002988 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_MSC */
  return USBD_OK;
 8008c02:	2300      	movs	r3, #0
}
 8008c04:	0018      	movs	r0, r3
 8008c06:	46bd      	mov	sp, r7
 8008c08:	b002      	add	sp, #8
 8008c0a:	bd80      	pop	{r7, pc}
 8008c0c:	20000620 	.word	0x20000620
 8008c10:	40005c00 	.word	0x40005c00

08008c14 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c16:	b085      	sub	sp, #20
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c1c:	210f      	movs	r1, #15
 8008c1e:	187b      	adds	r3, r7, r1
 8008c20:	2200      	movs	r2, #0
 8008c22:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c24:	260e      	movs	r6, #14
 8008c26:	19bb      	adds	r3, r7, r6
 8008c28:	2200      	movs	r2, #0
 8008c2a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008c2c:	687a      	ldr	r2, [r7, #4]
 8008c2e:	23b0      	movs	r3, #176	; 0xb0
 8008c30:	009b      	lsls	r3, r3, #2
 8008c32:	58d3      	ldr	r3, [r2, r3]
 8008c34:	000d      	movs	r5, r1
 8008c36:	187c      	adds	r4, r7, r1
 8008c38:	0018      	movs	r0, r3
 8008c3a:	f7f8 f9cb 	bl	8000fd4 <HAL_PCD_Start>
 8008c3e:	0003      	movs	r3, r0
 8008c40:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c42:	19bc      	adds	r4, r7, r6
 8008c44:	197b      	adds	r3, r7, r5
 8008c46:	781b      	ldrb	r3, [r3, #0]
 8008c48:	0018      	movs	r0, r3
 8008c4a:	f000 f9e6 	bl	800901a <USBD_Get_USB_Status>
 8008c4e:	0003      	movs	r3, r0
 8008c50:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008c52:	19bb      	adds	r3, r7, r6
 8008c54:	781b      	ldrb	r3, [r3, #0]
}
 8008c56:	0018      	movs	r0, r3
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	b005      	add	sp, #20
 8008c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008c5e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008c5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c60:	b085      	sub	sp, #20
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	6078      	str	r0, [r7, #4]
 8008c66:	000c      	movs	r4, r1
 8008c68:	0010      	movs	r0, r2
 8008c6a:	0019      	movs	r1, r3
 8008c6c:	1cfb      	adds	r3, r7, #3
 8008c6e:	1c22      	adds	r2, r4, #0
 8008c70:	701a      	strb	r2, [r3, #0]
 8008c72:	1cbb      	adds	r3, r7, #2
 8008c74:	1c02      	adds	r2, r0, #0
 8008c76:	701a      	strb	r2, [r3, #0]
 8008c78:	003b      	movs	r3, r7
 8008c7a:	1c0a      	adds	r2, r1, #0
 8008c7c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c7e:	260f      	movs	r6, #15
 8008c80:	19bb      	adds	r3, r7, r6
 8008c82:	2200      	movs	r2, #0
 8008c84:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c86:	250e      	movs	r5, #14
 8008c88:	197b      	adds	r3, r7, r5
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008c8e:	687a      	ldr	r2, [r7, #4]
 8008c90:	23b0      	movs	r3, #176	; 0xb0
 8008c92:	009b      	lsls	r3, r3, #2
 8008c94:	58d0      	ldr	r0, [r2, r3]
 8008c96:	19bc      	adds	r4, r7, r6
 8008c98:	1cbb      	adds	r3, r7, #2
 8008c9a:	781d      	ldrb	r5, [r3, #0]
 8008c9c:	003b      	movs	r3, r7
 8008c9e:	881a      	ldrh	r2, [r3, #0]
 8008ca0:	1cfb      	adds	r3, r7, #3
 8008ca2:	7819      	ldrb	r1, [r3, #0]
 8008ca4:	002b      	movs	r3, r5
 8008ca6:	f7f8 fb2a 	bl	80012fe <HAL_PCD_EP_Open>
 8008caa:	0003      	movs	r3, r0
 8008cac:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cae:	250e      	movs	r5, #14
 8008cb0:	197c      	adds	r4, r7, r5
 8008cb2:	19bb      	adds	r3, r7, r6
 8008cb4:	781b      	ldrb	r3, [r3, #0]
 8008cb6:	0018      	movs	r0, r3
 8008cb8:	f000 f9af 	bl	800901a <USBD_Get_USB_Status>
 8008cbc:	0003      	movs	r3, r0
 8008cbe:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008cc0:	197b      	adds	r3, r7, r5
 8008cc2:	781b      	ldrb	r3, [r3, #0]
}
 8008cc4:	0018      	movs	r0, r3
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	b005      	add	sp, #20
 8008cca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008ccc <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cce:	b085      	sub	sp, #20
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	000a      	movs	r2, r1
 8008cd6:	1cfb      	adds	r3, r7, #3
 8008cd8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cda:	210f      	movs	r1, #15
 8008cdc:	187b      	adds	r3, r7, r1
 8008cde:	2200      	movs	r2, #0
 8008ce0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ce2:	260e      	movs	r6, #14
 8008ce4:	19bb      	adds	r3, r7, r6
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008cea:	687a      	ldr	r2, [r7, #4]
 8008cec:	23b0      	movs	r3, #176	; 0xb0
 8008cee:	009b      	lsls	r3, r3, #2
 8008cf0:	58d2      	ldr	r2, [r2, r3]
 8008cf2:	000d      	movs	r5, r1
 8008cf4:	187c      	adds	r4, r7, r1
 8008cf6:	1cfb      	adds	r3, r7, #3
 8008cf8:	781b      	ldrb	r3, [r3, #0]
 8008cfa:	0019      	movs	r1, r3
 8008cfc:	0010      	movs	r0, r2
 8008cfe:	f7f8 fb6d 	bl	80013dc <HAL_PCD_EP_Close>
 8008d02:	0003      	movs	r3, r0
 8008d04:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d06:	19bc      	adds	r4, r7, r6
 8008d08:	197b      	adds	r3, r7, r5
 8008d0a:	781b      	ldrb	r3, [r3, #0]
 8008d0c:	0018      	movs	r0, r3
 8008d0e:	f000 f984 	bl	800901a <USBD_Get_USB_Status>
 8008d12:	0003      	movs	r3, r0
 8008d14:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008d16:	19bb      	adds	r3, r7, r6
 8008d18:	781b      	ldrb	r3, [r3, #0]
}
 8008d1a:	0018      	movs	r0, r3
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	b005      	add	sp, #20
 8008d20:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008d22 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d24:	b085      	sub	sp, #20
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	6078      	str	r0, [r7, #4]
 8008d2a:	000a      	movs	r2, r1
 8008d2c:	1cfb      	adds	r3, r7, #3
 8008d2e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d30:	210f      	movs	r1, #15
 8008d32:	187b      	adds	r3, r7, r1
 8008d34:	2200      	movs	r2, #0
 8008d36:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d38:	260e      	movs	r6, #14
 8008d3a:	19bb      	adds	r3, r7, r6
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8008d40:	687a      	ldr	r2, [r7, #4]
 8008d42:	23b0      	movs	r3, #176	; 0xb0
 8008d44:	009b      	lsls	r3, r3, #2
 8008d46:	58d2      	ldr	r2, [r2, r3]
 8008d48:	000d      	movs	r5, r1
 8008d4a:	187c      	adds	r4, r7, r1
 8008d4c:	1cfb      	adds	r3, r7, #3
 8008d4e:	781b      	ldrb	r3, [r3, #0]
 8008d50:	0019      	movs	r1, r3
 8008d52:	0010      	movs	r0, r2
 8008d54:	f7f8 fcd9 	bl	800170a <HAL_PCD_EP_Flush>
 8008d58:	0003      	movs	r3, r0
 8008d5a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d5c:	19bc      	adds	r4, r7, r6
 8008d5e:	197b      	adds	r3, r7, r5
 8008d60:	781b      	ldrb	r3, [r3, #0]
 8008d62:	0018      	movs	r0, r3
 8008d64:	f000 f959 	bl	800901a <USBD_Get_USB_Status>
 8008d68:	0003      	movs	r3, r0
 8008d6a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008d6c:	19bb      	adds	r3, r7, r6
 8008d6e:	781b      	ldrb	r3, [r3, #0]
}
 8008d70:	0018      	movs	r0, r3
 8008d72:	46bd      	mov	sp, r7
 8008d74:	b005      	add	sp, #20
 8008d76:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008d78 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d7a:	b085      	sub	sp, #20
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	000a      	movs	r2, r1
 8008d82:	1cfb      	adds	r3, r7, #3
 8008d84:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d86:	210f      	movs	r1, #15
 8008d88:	187b      	adds	r3, r7, r1
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d8e:	260e      	movs	r6, #14
 8008d90:	19bb      	adds	r3, r7, r6
 8008d92:	2200      	movs	r2, #0
 8008d94:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008d96:	687a      	ldr	r2, [r7, #4]
 8008d98:	23b0      	movs	r3, #176	; 0xb0
 8008d9a:	009b      	lsls	r3, r3, #2
 8008d9c:	58d2      	ldr	r2, [r2, r3]
 8008d9e:	000d      	movs	r5, r1
 8008da0:	187c      	adds	r4, r7, r1
 8008da2:	1cfb      	adds	r3, r7, #3
 8008da4:	781b      	ldrb	r3, [r3, #0]
 8008da6:	0019      	movs	r1, r3
 8008da8:	0010      	movs	r0, r2
 8008daa:	f7f8 fbf4 	bl	8001596 <HAL_PCD_EP_SetStall>
 8008dae:	0003      	movs	r3, r0
 8008db0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008db2:	19bc      	adds	r4, r7, r6
 8008db4:	197b      	adds	r3, r7, r5
 8008db6:	781b      	ldrb	r3, [r3, #0]
 8008db8:	0018      	movs	r0, r3
 8008dba:	f000 f92e 	bl	800901a <USBD_Get_USB_Status>
 8008dbe:	0003      	movs	r3, r0
 8008dc0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008dc2:	19bb      	adds	r3, r7, r6
 8008dc4:	781b      	ldrb	r3, [r3, #0]
}
 8008dc6:	0018      	movs	r0, r3
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	b005      	add	sp, #20
 8008dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008dce <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008dce:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008dd0:	b085      	sub	sp, #20
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	6078      	str	r0, [r7, #4]
 8008dd6:	000a      	movs	r2, r1
 8008dd8:	1cfb      	adds	r3, r7, #3
 8008dda:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ddc:	210f      	movs	r1, #15
 8008dde:	187b      	adds	r3, r7, r1
 8008de0:	2200      	movs	r2, #0
 8008de2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008de4:	260e      	movs	r6, #14
 8008de6:	19bb      	adds	r3, r7, r6
 8008de8:	2200      	movs	r2, #0
 8008dea:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008dec:	687a      	ldr	r2, [r7, #4]
 8008dee:	23b0      	movs	r3, #176	; 0xb0
 8008df0:	009b      	lsls	r3, r3, #2
 8008df2:	58d2      	ldr	r2, [r2, r3]
 8008df4:	000d      	movs	r5, r1
 8008df6:	187c      	adds	r4, r7, r1
 8008df8:	1cfb      	adds	r3, r7, #3
 8008dfa:	781b      	ldrb	r3, [r3, #0]
 8008dfc:	0019      	movs	r1, r3
 8008dfe:	0010      	movs	r0, r2
 8008e00:	f7f8 fc25 	bl	800164e <HAL_PCD_EP_ClrStall>
 8008e04:	0003      	movs	r3, r0
 8008e06:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e08:	19bc      	adds	r4, r7, r6
 8008e0a:	197b      	adds	r3, r7, r5
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	0018      	movs	r0, r3
 8008e10:	f000 f903 	bl	800901a <USBD_Get_USB_Status>
 8008e14:	0003      	movs	r3, r0
 8008e16:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008e18:	19bb      	adds	r3, r7, r6
 8008e1a:	781b      	ldrb	r3, [r3, #0]
}
 8008e1c:	0018      	movs	r0, r3
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	b005      	add	sp, #20
 8008e22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008e24 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b084      	sub	sp, #16
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	000a      	movs	r2, r1
 8008e2e:	1cfb      	adds	r3, r7, #3
 8008e30:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	23b0      	movs	r3, #176	; 0xb0
 8008e36:	009b      	lsls	r3, r3, #2
 8008e38:	58d3      	ldr	r3, [r2, r3]
 8008e3a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008e3c:	1cfb      	adds	r3, r7, #3
 8008e3e:	781b      	ldrb	r3, [r3, #0]
 8008e40:	b25b      	sxtb	r3, r3
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	da0d      	bge.n	8008e62 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008e46:	1cfb      	adds	r3, r7, #3
 8008e48:	781b      	ldrb	r3, [r3, #0]
 8008e4a:	227f      	movs	r2, #127	; 0x7f
 8008e4c:	4013      	ands	r3, r2
 8008e4e:	68f9      	ldr	r1, [r7, #12]
 8008e50:	1c5a      	adds	r2, r3, #1
 8008e52:	0013      	movs	r3, r2
 8008e54:	009b      	lsls	r3, r3, #2
 8008e56:	189b      	adds	r3, r3, r2
 8008e58:	00db      	lsls	r3, r3, #3
 8008e5a:	18cb      	adds	r3, r1, r3
 8008e5c:	3302      	adds	r3, #2
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	e00d      	b.n	8008e7e <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008e62:	1cfb      	adds	r3, r7, #3
 8008e64:	781b      	ldrb	r3, [r3, #0]
 8008e66:	227f      	movs	r2, #127	; 0x7f
 8008e68:	401a      	ands	r2, r3
 8008e6a:	68f8      	ldr	r0, [r7, #12]
 8008e6c:	23b5      	movs	r3, #181	; 0xb5
 8008e6e:	0059      	lsls	r1, r3, #1
 8008e70:	0013      	movs	r3, r2
 8008e72:	009b      	lsls	r3, r3, #2
 8008e74:	189b      	adds	r3, r3, r2
 8008e76:	00db      	lsls	r3, r3, #3
 8008e78:	18c3      	adds	r3, r0, r3
 8008e7a:	185b      	adds	r3, r3, r1
 8008e7c:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008e7e:	0018      	movs	r0, r3
 8008e80:	46bd      	mov	sp, r7
 8008e82:	b004      	add	sp, #16
 8008e84:	bd80      	pop	{r7, pc}

08008e86 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008e86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e88:	b085      	sub	sp, #20
 8008e8a:	af00      	add	r7, sp, #0
 8008e8c:	6078      	str	r0, [r7, #4]
 8008e8e:	000a      	movs	r2, r1
 8008e90:	1cfb      	adds	r3, r7, #3
 8008e92:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e94:	210f      	movs	r1, #15
 8008e96:	187b      	adds	r3, r7, r1
 8008e98:	2200      	movs	r2, #0
 8008e9a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e9c:	260e      	movs	r6, #14
 8008e9e:	19bb      	adds	r3, r7, r6
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008ea4:	687a      	ldr	r2, [r7, #4]
 8008ea6:	23b0      	movs	r3, #176	; 0xb0
 8008ea8:	009b      	lsls	r3, r3, #2
 8008eaa:	58d2      	ldr	r2, [r2, r3]
 8008eac:	000d      	movs	r5, r1
 8008eae:	187c      	adds	r4, r7, r1
 8008eb0:	1cfb      	adds	r3, r7, #3
 8008eb2:	781b      	ldrb	r3, [r3, #0]
 8008eb4:	0019      	movs	r1, r3
 8008eb6:	0010      	movs	r0, r2
 8008eb8:	f7f8 f9f6 	bl	80012a8 <HAL_PCD_SetAddress>
 8008ebc:	0003      	movs	r3, r0
 8008ebe:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ec0:	19bc      	adds	r4, r7, r6
 8008ec2:	197b      	adds	r3, r7, r5
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	0018      	movs	r0, r3
 8008ec8:	f000 f8a7 	bl	800901a <USBD_Get_USB_Status>
 8008ecc:	0003      	movs	r3, r0
 8008ece:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008ed0:	19bb      	adds	r3, r7, r6
 8008ed2:	781b      	ldrb	r3, [r3, #0]
}
 8008ed4:	0018      	movs	r0, r3
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	b005      	add	sp, #20
 8008eda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008edc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008edc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ede:	b087      	sub	sp, #28
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	60f8      	str	r0, [r7, #12]
 8008ee4:	0008      	movs	r0, r1
 8008ee6:	607a      	str	r2, [r7, #4]
 8008ee8:	0019      	movs	r1, r3
 8008eea:	230b      	movs	r3, #11
 8008eec:	18fb      	adds	r3, r7, r3
 8008eee:	1c02      	adds	r2, r0, #0
 8008ef0:	701a      	strb	r2, [r3, #0]
 8008ef2:	2408      	movs	r4, #8
 8008ef4:	193b      	adds	r3, r7, r4
 8008ef6:	1c0a      	adds	r2, r1, #0
 8008ef8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008efa:	2117      	movs	r1, #23
 8008efc:	187b      	adds	r3, r7, r1
 8008efe:	2200      	movs	r2, #0
 8008f00:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f02:	2516      	movs	r5, #22
 8008f04:	197b      	adds	r3, r7, r5
 8008f06:	2200      	movs	r2, #0
 8008f08:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008f0a:	68fa      	ldr	r2, [r7, #12]
 8008f0c:	23b0      	movs	r3, #176	; 0xb0
 8008f0e:	009b      	lsls	r3, r3, #2
 8008f10:	58d0      	ldr	r0, [r2, r3]
 8008f12:	193b      	adds	r3, r7, r4
 8008f14:	881d      	ldrh	r5, [r3, #0]
 8008f16:	000e      	movs	r6, r1
 8008f18:	187c      	adds	r4, r7, r1
 8008f1a:	687a      	ldr	r2, [r7, #4]
 8008f1c:	230b      	movs	r3, #11
 8008f1e:	18fb      	adds	r3, r7, r3
 8008f20:	7819      	ldrb	r1, [r3, #0]
 8008f22:	002b      	movs	r3, r5
 8008f24:	f7f8 fafb 	bl	800151e <HAL_PCD_EP_Transmit>
 8008f28:	0003      	movs	r3, r0
 8008f2a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f2c:	2516      	movs	r5, #22
 8008f2e:	197c      	adds	r4, r7, r5
 8008f30:	19bb      	adds	r3, r7, r6
 8008f32:	781b      	ldrb	r3, [r3, #0]
 8008f34:	0018      	movs	r0, r3
 8008f36:	f000 f870 	bl	800901a <USBD_Get_USB_Status>
 8008f3a:	0003      	movs	r3, r0
 8008f3c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008f3e:	197b      	adds	r3, r7, r5
 8008f40:	781b      	ldrb	r3, [r3, #0]
}
 8008f42:	0018      	movs	r0, r3
 8008f44:	46bd      	mov	sp, r7
 8008f46:	b007      	add	sp, #28
 8008f48:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008f4a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008f4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f4c:	b087      	sub	sp, #28
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	60f8      	str	r0, [r7, #12]
 8008f52:	0008      	movs	r0, r1
 8008f54:	607a      	str	r2, [r7, #4]
 8008f56:	0019      	movs	r1, r3
 8008f58:	230b      	movs	r3, #11
 8008f5a:	18fb      	adds	r3, r7, r3
 8008f5c:	1c02      	adds	r2, r0, #0
 8008f5e:	701a      	strb	r2, [r3, #0]
 8008f60:	2408      	movs	r4, #8
 8008f62:	193b      	adds	r3, r7, r4
 8008f64:	1c0a      	adds	r2, r1, #0
 8008f66:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f68:	2117      	movs	r1, #23
 8008f6a:	187b      	adds	r3, r7, r1
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f70:	2516      	movs	r5, #22
 8008f72:	197b      	adds	r3, r7, r5
 8008f74:	2200      	movs	r2, #0
 8008f76:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008f78:	68fa      	ldr	r2, [r7, #12]
 8008f7a:	23b0      	movs	r3, #176	; 0xb0
 8008f7c:	009b      	lsls	r3, r3, #2
 8008f7e:	58d0      	ldr	r0, [r2, r3]
 8008f80:	193b      	adds	r3, r7, r4
 8008f82:	881d      	ldrh	r5, [r3, #0]
 8008f84:	000e      	movs	r6, r1
 8008f86:	187c      	adds	r4, r7, r1
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	230b      	movs	r3, #11
 8008f8c:	18fb      	adds	r3, r7, r3
 8008f8e:	7819      	ldrb	r1, [r3, #0]
 8008f90:	002b      	movs	r3, r5
 8008f92:	f7f8 fa74 	bl	800147e <HAL_PCD_EP_Receive>
 8008f96:	0003      	movs	r3, r0
 8008f98:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f9a:	2516      	movs	r5, #22
 8008f9c:	197c      	adds	r4, r7, r5
 8008f9e:	19bb      	adds	r3, r7, r6
 8008fa0:	781b      	ldrb	r3, [r3, #0]
 8008fa2:	0018      	movs	r0, r3
 8008fa4:	f000 f839 	bl	800901a <USBD_Get_USB_Status>
 8008fa8:	0003      	movs	r3, r0
 8008faa:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008fac:	197b      	adds	r3, r7, r5
 8008fae:	781b      	ldrb	r3, [r3, #0]
}
 8008fb0:	0018      	movs	r0, r3
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	b007      	add	sp, #28
 8008fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008fb8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b082      	sub	sp, #8
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	000a      	movs	r2, r1
 8008fc2:	1cfb      	adds	r3, r7, #3
 8008fc4:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008fc6:	687a      	ldr	r2, [r7, #4]
 8008fc8:	23b0      	movs	r3, #176	; 0xb0
 8008fca:	009b      	lsls	r3, r3, #2
 8008fcc:	58d2      	ldr	r2, [r2, r3]
 8008fce:	1cfb      	adds	r3, r7, #3
 8008fd0:	781b      	ldrb	r3, [r3, #0]
 8008fd2:	0019      	movs	r1, r3
 8008fd4:	0010      	movs	r0, r2
 8008fd6:	f7f8 fa89 	bl	80014ec <HAL_PCD_EP_GetRxCount>
 8008fda:	0003      	movs	r3, r0
}
 8008fdc:	0018      	movs	r0, r3
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	b002      	add	sp, #8
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b082      	sub	sp, #8
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008fec:	4b02      	ldr	r3, [pc, #8]	; (8008ff8 <USBD_static_malloc+0x14>)
}
 8008fee:	0018      	movs	r0, r3
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	b002      	add	sp, #8
 8008ff4:	bd80      	pop	{r7, pc}
 8008ff6:	46c0      	nop			; (mov r8, r8)
 8008ff8:	20000914 	.word	0x20000914

08008ffc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b082      	sub	sp, #8
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]

}
 8009004:	46c0      	nop			; (mov r8, r8)
 8009006:	46bd      	mov	sp, r7
 8009008:	b002      	add	sp, #8
 800900a:	bd80      	pop	{r7, pc}

0800900c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009010:	f7f7 fa5e 	bl	80004d0 <SystemClock_Config>
}
 8009014:	46c0      	nop			; (mov r8, r8)
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}

0800901a <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800901a:	b580      	push	{r7, lr}
 800901c:	b084      	sub	sp, #16
 800901e:	af00      	add	r7, sp, #0
 8009020:	0002      	movs	r2, r0
 8009022:	1dfb      	adds	r3, r7, #7
 8009024:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009026:	230f      	movs	r3, #15
 8009028:	18fb      	adds	r3, r7, r3
 800902a:	2200      	movs	r2, #0
 800902c:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800902e:	1dfb      	adds	r3, r7, #7
 8009030:	781b      	ldrb	r3, [r3, #0]
 8009032:	2b03      	cmp	r3, #3
 8009034:	d017      	beq.n	8009066 <USBD_Get_USB_Status+0x4c>
 8009036:	dc1b      	bgt.n	8009070 <USBD_Get_USB_Status+0x56>
 8009038:	2b02      	cmp	r3, #2
 800903a:	d00f      	beq.n	800905c <USBD_Get_USB_Status+0x42>
 800903c:	dc18      	bgt.n	8009070 <USBD_Get_USB_Status+0x56>
 800903e:	2b00      	cmp	r3, #0
 8009040:	d002      	beq.n	8009048 <USBD_Get_USB_Status+0x2e>
 8009042:	2b01      	cmp	r3, #1
 8009044:	d005      	beq.n	8009052 <USBD_Get_USB_Status+0x38>
 8009046:	e013      	b.n	8009070 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009048:	230f      	movs	r3, #15
 800904a:	18fb      	adds	r3, r7, r3
 800904c:	2200      	movs	r2, #0
 800904e:	701a      	strb	r2, [r3, #0]
    break;
 8009050:	e013      	b.n	800907a <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009052:	230f      	movs	r3, #15
 8009054:	18fb      	adds	r3, r7, r3
 8009056:	2202      	movs	r2, #2
 8009058:	701a      	strb	r2, [r3, #0]
    break;
 800905a:	e00e      	b.n	800907a <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800905c:	230f      	movs	r3, #15
 800905e:	18fb      	adds	r3, r7, r3
 8009060:	2201      	movs	r2, #1
 8009062:	701a      	strb	r2, [r3, #0]
    break;
 8009064:	e009      	b.n	800907a <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009066:	230f      	movs	r3, #15
 8009068:	18fb      	adds	r3, r7, r3
 800906a:	2202      	movs	r2, #2
 800906c:	701a      	strb	r2, [r3, #0]
    break;
 800906e:	e004      	b.n	800907a <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8009070:	230f      	movs	r3, #15
 8009072:	18fb      	adds	r3, r7, r3
 8009074:	2202      	movs	r2, #2
 8009076:	701a      	strb	r2, [r3, #0]
    break;
 8009078:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 800907a:	230f      	movs	r3, #15
 800907c:	18fb      	adds	r3, r7, r3
 800907e:	781b      	ldrb	r3, [r3, #0]
}
 8009080:	0018      	movs	r0, r3
 8009082:	46bd      	mov	sp, r7
 8009084:	b004      	add	sp, #16
 8009086:	bd80      	pop	{r7, pc}

08009088 <__libc_init_array>:
 8009088:	b570      	push	{r4, r5, r6, lr}
 800908a:	2600      	movs	r6, #0
 800908c:	4d0c      	ldr	r5, [pc, #48]	; (80090c0 <__libc_init_array+0x38>)
 800908e:	4c0d      	ldr	r4, [pc, #52]	; (80090c4 <__libc_init_array+0x3c>)
 8009090:	1b64      	subs	r4, r4, r5
 8009092:	10a4      	asrs	r4, r4, #2
 8009094:	42a6      	cmp	r6, r4
 8009096:	d109      	bne.n	80090ac <__libc_init_array+0x24>
 8009098:	2600      	movs	r6, #0
 800909a:	f000 f82b 	bl	80090f4 <_init>
 800909e:	4d0a      	ldr	r5, [pc, #40]	; (80090c8 <__libc_init_array+0x40>)
 80090a0:	4c0a      	ldr	r4, [pc, #40]	; (80090cc <__libc_init_array+0x44>)
 80090a2:	1b64      	subs	r4, r4, r5
 80090a4:	10a4      	asrs	r4, r4, #2
 80090a6:	42a6      	cmp	r6, r4
 80090a8:	d105      	bne.n	80090b6 <__libc_init_array+0x2e>
 80090aa:	bd70      	pop	{r4, r5, r6, pc}
 80090ac:	00b3      	lsls	r3, r6, #2
 80090ae:	58eb      	ldr	r3, [r5, r3]
 80090b0:	4798      	blx	r3
 80090b2:	3601      	adds	r6, #1
 80090b4:	e7ee      	b.n	8009094 <__libc_init_array+0xc>
 80090b6:	00b3      	lsls	r3, r6, #2
 80090b8:	58eb      	ldr	r3, [r5, r3]
 80090ba:	4798      	blx	r3
 80090bc:	3601      	adds	r6, #1
 80090be:	e7f2      	b.n	80090a6 <__libc_init_array+0x1e>
 80090c0:	08009390 	.word	0x08009390
 80090c4:	08009390 	.word	0x08009390
 80090c8:	08009390 	.word	0x08009390
 80090cc:	08009394 	.word	0x08009394

080090d0 <memcpy>:
 80090d0:	2300      	movs	r3, #0
 80090d2:	b510      	push	{r4, lr}
 80090d4:	429a      	cmp	r2, r3
 80090d6:	d100      	bne.n	80090da <memcpy+0xa>
 80090d8:	bd10      	pop	{r4, pc}
 80090da:	5ccc      	ldrb	r4, [r1, r3]
 80090dc:	54c4      	strb	r4, [r0, r3]
 80090de:	3301      	adds	r3, #1
 80090e0:	e7f8      	b.n	80090d4 <memcpy+0x4>

080090e2 <memset>:
 80090e2:	0003      	movs	r3, r0
 80090e4:	1882      	adds	r2, r0, r2
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d100      	bne.n	80090ec <memset+0xa>
 80090ea:	4770      	bx	lr
 80090ec:	7019      	strb	r1, [r3, #0]
 80090ee:	3301      	adds	r3, #1
 80090f0:	e7f9      	b.n	80090e6 <memset+0x4>
	...

080090f4 <_init>:
 80090f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090f6:	46c0      	nop			; (mov r8, r8)
 80090f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090fa:	bc08      	pop	{r3}
 80090fc:	469e      	mov	lr, r3
 80090fe:	4770      	bx	lr

08009100 <_fini>:
 8009100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009102:	46c0      	nop			; (mov r8, r8)
 8009104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009106:	bc08      	pop	{r3}
 8009108:	469e      	mov	lr, r3
 800910a:	4770      	bx	lr
