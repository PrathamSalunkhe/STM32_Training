
001_LED_Control_NEW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005450  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  0800560c  0800560c  0001560c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005738  08005738  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005738  08005738  00015738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005740  08005740  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005740  08005740  00015740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005744  08005744  00015744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005748  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  20000070  080057b8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  080057b8  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012ca5  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000228e  00000000  00000000  00032d45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001018  00000000  00000000  00034fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f40  00000000  00000000  00035ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b13c  00000000  00000000  00036f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012a5e  00000000  00000000  0006206c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001091ac  00000000  00000000  00074aca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017dc76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a78  00000000  00000000  0017dcc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000070 	.word	0x20000070
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080055f4 	.word	0x080055f4

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000074 	.word	0x20000074
 80001f8:	080055f4 	.word	0x080055f4

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <light_state_machine>:

/* function to control the state machine
 * param : event occured
 * based on the event, current state will change */
void light_state_machine(uint8_t event)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	4603      	mov	r3, r0
 8000508:	71fb      	strb	r3, [r7, #7]
	switch (curr_state) {
 800050a:	4b2f      	ldr	r3, [pc, #188]	; (80005c8 <light_state_machine+0xc8>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	2b03      	cmp	r3, #3
 8000510:	d855      	bhi.n	80005be <light_state_machine+0xbe>
 8000512:	a201      	add	r2, pc, #4	; (adr r2, 8000518 <light_state_machine+0x18>)
 8000514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000518:	08000529 	.word	0x08000529
 800051c:	0800053f 	.word	0x0800053f
 8000520:	08000569 	.word	0x08000569
 8000524:	08000593 	.word	0x08000593
		case LIGHT_OFF:{
			switch (event) {
 8000528:	79fb      	ldrb	r3, [r7, #7]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d146      	bne.n	80005bc <light_state_machine+0xbc>
				case ON:{
					light_change_intensity(LIGHT_BRIGHT_DIM);
 800052e:	2019      	movs	r0, #25
 8000530:	f000 f84c 	bl	80005cc <light_change_intensity>
					curr_state = LIGHT_DIM;
 8000534:	4b24      	ldr	r3, [pc, #144]	; (80005c8 <light_state_machine+0xc8>)
 8000536:	2201      	movs	r2, #1
 8000538:	701a      	strb	r2, [r3, #0]
					break;
 800053a:	bf00      	nop
				}
			}
			break;
 800053c:	e03e      	b.n	80005bc <light_state_machine+0xbc>
		}
		case LIGHT_DIM:{
			switch (event) {
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d002      	beq.n	800054a <light_state_machine+0x4a>
 8000544:	2b01      	cmp	r3, #1
 8000546:	d007      	beq.n	8000558 <light_state_machine+0x58>
					light_change_intensity(LIGHT_BRIGHT_OFF);
					curr_state = LIGHT_OFF;
					break;
				}
			}
			break;
 8000548:	e039      	b.n	80005be <light_state_machine+0xbe>
					light_change_intensity(LIGHT_BRIGHT_MED);
 800054a:	2032      	movs	r0, #50	; 0x32
 800054c:	f000 f83e 	bl	80005cc <light_change_intensity>
					curr_state = LIGHT_MEDIUM;
 8000550:	4b1d      	ldr	r3, [pc, #116]	; (80005c8 <light_state_machine+0xc8>)
 8000552:	2202      	movs	r2, #2
 8000554:	701a      	strb	r2, [r3, #0]
					break;
 8000556:	e006      	b.n	8000566 <light_state_machine+0x66>
					light_change_intensity(LIGHT_BRIGHT_OFF);
 8000558:	2000      	movs	r0, #0
 800055a:	f000 f837 	bl	80005cc <light_change_intensity>
					curr_state = LIGHT_OFF;
 800055e:	4b1a      	ldr	r3, [pc, #104]	; (80005c8 <light_state_machine+0xc8>)
 8000560:	2200      	movs	r2, #0
 8000562:	701a      	strb	r2, [r3, #0]
					break;
 8000564:	bf00      	nop
			break;
 8000566:	e02a      	b.n	80005be <light_state_machine+0xbe>
		}
		case LIGHT_MEDIUM:{
			switch (event) {
 8000568:	79fb      	ldrb	r3, [r7, #7]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d002      	beq.n	8000574 <light_state_machine+0x74>
 800056e:	2b01      	cmp	r3, #1
 8000570:	d007      	beq.n	8000582 <light_state_machine+0x82>
					light_change_intensity(LIGHT_BRIGHT_OFF);
					curr_state = LIGHT_OFF;
					break;
				}
			}
			break;
 8000572:	e024      	b.n	80005be <light_state_machine+0xbe>
					light_change_intensity(LIGHT_BRIGHT_FULL);
 8000574:	2064      	movs	r0, #100	; 0x64
 8000576:	f000 f829 	bl	80005cc <light_change_intensity>
					curr_state = LIGHT_FULL;
 800057a:	4b13      	ldr	r3, [pc, #76]	; (80005c8 <light_state_machine+0xc8>)
 800057c:	2203      	movs	r2, #3
 800057e:	701a      	strb	r2, [r3, #0]
					break;
 8000580:	e006      	b.n	8000590 <light_state_machine+0x90>
					light_change_intensity(LIGHT_BRIGHT_OFF);
 8000582:	2000      	movs	r0, #0
 8000584:	f000 f822 	bl	80005cc <light_change_intensity>
					curr_state = LIGHT_OFF;
 8000588:	4b0f      	ldr	r3, [pc, #60]	; (80005c8 <light_state_machine+0xc8>)
 800058a:	2200      	movs	r2, #0
 800058c:	701a      	strb	r2, [r3, #0]
					break;
 800058e:	bf00      	nop
			break;
 8000590:	e015      	b.n	80005be <light_state_machine+0xbe>
		}
		case LIGHT_FULL:{
			switch (event) {
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d002      	beq.n	800059e <light_state_machine+0x9e>
 8000598:	2b01      	cmp	r3, #1
 800059a:	d007      	beq.n	80005ac <light_state_machine+0xac>
					light_change_intensity(LIGHT_BRIGHT_OFF);
					curr_state = LIGHT_OFF;
					break;
				}
			}
			break;
 800059c:	e00f      	b.n	80005be <light_state_machine+0xbe>
					light_change_intensity(LIGHT_BRIGHT_DIM);
 800059e:	2019      	movs	r0, #25
 80005a0:	f000 f814 	bl	80005cc <light_change_intensity>
					curr_state = LIGHT_DIM;
 80005a4:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <light_state_machine+0xc8>)
 80005a6:	2201      	movs	r2, #1
 80005a8:	701a      	strb	r2, [r3, #0]
					break;
 80005aa:	e006      	b.n	80005ba <light_state_machine+0xba>
					light_change_intensity(LIGHT_BRIGHT_OFF);
 80005ac:	2000      	movs	r0, #0
 80005ae:	f000 f80d 	bl	80005cc <light_change_intensity>
					curr_state = LIGHT_OFF;
 80005b2:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <light_state_machine+0xc8>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	701a      	strb	r2, [r3, #0]
					break;
 80005b8:	bf00      	nop
			break;
 80005ba:	e000      	b.n	80005be <light_state_machine+0xbe>
			break;
 80005bc:	bf00      	nop
		}
	}
}
 80005be:	bf00      	nop
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	20000168 	.word	0x20000168

080005cc <light_change_intensity>:

/* function to change the intensity of the led
 * param : value to the CCR register (duty cycle) */
void light_change_intensity(uint8_t Intensity)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	71fb      	strb	r3, [r7, #7]
	/* pwm generation function */
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,Intensity);
 80005d6:	4b05      	ldr	r3, [pc, #20]	; (80005ec <light_change_intensity+0x20>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	79fa      	ldrb	r2, [r7, #7]
 80005dc:	639a      	str	r2, [r3, #56]	; 0x38
}
 80005de:	bf00      	nop
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	2000011c 	.word	0x2000011c

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f4:	f000 fb59 	bl	8000caa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f8:	f000 f83a 	bl	8000670 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fc:	f000 f94c 	bl	8000898 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000600:	f000 f888 	bl	8000714 <MX_LPUART1_UART_Init>
  MX_TIM4_Init();
 8000604:	f000 f8d2 	bl	80007ac <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000608:	2104      	movs	r1, #4
 800060a:	4813      	ldr	r0, [pc, #76]	; (8000658 <main+0x68>)
 800060c:	f002 fbb6 	bl	8002d7c <HAL_TIM_PWM_Start>

  printf("LED Control Application\r\n");
 8000610:	4812      	ldr	r0, [pc, #72]	; (800065c <main+0x6c>)
 8000612:	f004 fb5f 	bl	8004cd4 <puts>
  printf("------------------------------------\r\n");
 8000616:	4812      	ldr	r0, [pc, #72]	; (8000660 <main+0x70>)
 8000618:	f004 fb5c 	bl	8004cd4 <puts>
  printf("Send 'x' or 'o' \r\n");
 800061c:	4811      	ldr	r0, [pc, #68]	; (8000664 <main+0x74>)
 800061e:	f004 fb59 	bl	8004cd4 <puts>

    /* USER CODE BEGIN 3 */

	  /* receive the character via UART
	   * based on received command call the funtion to generate respective event */
	  if(HAL_UART_Receive(&hlpuart1, &rx_buffer, 1, HAL_MAX_DELAY)== HAL_OK)
 8000622:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000626:	2201      	movs	r2, #1
 8000628:	490f      	ldr	r1, [pc, #60]	; (8000668 <main+0x78>)
 800062a:	4810      	ldr	r0, [pc, #64]	; (800066c <main+0x7c>)
 800062c:	f003 fc29 	bl	8003e82 <HAL_UART_Receive>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d1f5      	bne.n	8000622 <main+0x32>
	  {
		  if(rx_buffer == 'o')
 8000636:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <main+0x78>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b6f      	cmp	r3, #111	; 0x6f
 800063c:	d103      	bne.n	8000646 <main+0x56>
		  {
			  light_state_machine(ON);
 800063e:	2000      	movs	r0, #0
 8000640:	f7ff ff5e 	bl	8000500 <light_state_machine>
 8000644:	e7ed      	b.n	8000622 <main+0x32>
		  }
		  else if(rx_buffer == 'x')
 8000646:	4b08      	ldr	r3, [pc, #32]	; (8000668 <main+0x78>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	2b78      	cmp	r3, #120	; 0x78
 800064c:	d1e9      	bne.n	8000622 <main+0x32>
		  {
			  light_state_machine(OFF);
 800064e:	2001      	movs	r0, #1
 8000650:	f7ff ff56 	bl	8000500 <light_state_machine>
	  if(HAL_UART_Receive(&hlpuart1, &rx_buffer, 1, HAL_MAX_DELAY)== HAL_OK)
 8000654:	e7e5      	b.n	8000622 <main+0x32>
 8000656:	bf00      	nop
 8000658:	2000011c 	.word	0x2000011c
 800065c:	0800560c 	.word	0x0800560c
 8000660:	08005628 	.word	0x08005628
 8000664:	08005650 	.word	0x08005650
 8000668:	20000169 	.word	0x20000169
 800066c:	2000008c 	.word	0x2000008c

08000670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b096      	sub	sp, #88	; 0x58
 8000674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000676:	f107 0314 	add.w	r3, r7, #20
 800067a:	2244      	movs	r2, #68	; 0x44
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f004 fab2 	bl	8004be8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000684:	463b      	mov	r3, r7
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
 8000690:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000692:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000696:	f000 fe15 	bl	80012c4 <HAL_PWREx_ControlVoltageScaling>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006a0:	f000 f91e 	bl	80008e0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a4:	2302      	movs	r3, #2
 80006a6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006ac:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ae:	2340      	movs	r3, #64	; 0x40
 80006b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b2:	2302      	movs	r3, #2
 80006b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b6:	2302      	movs	r3, #2
 80006b8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006ba:	2301      	movs	r3, #1
 80006bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 80006be:	2308      	movs	r3, #8
 80006c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c2:	2302      	movs	r3, #2
 80006c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006c6:	2302      	movs	r3, #2
 80006c8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006ca:	2302      	movs	r3, #2
 80006cc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ce:	f107 0314 	add.w	r3, r7, #20
 80006d2:	4618      	mov	r0, r3
 80006d4:	f000 feaa 	bl	800142c <HAL_RCC_OscConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006de:	f000 f8ff 	bl	80008e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e2:	230f      	movs	r3, #15
 80006e4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e6:	2303      	movs	r3, #3
 80006e8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006f6:	463b      	mov	r3, r7
 80006f8:	2103      	movs	r1, #3
 80006fa:	4618      	mov	r0, r3
 80006fc:	f001 fab0 	bl	8001c60 <HAL_RCC_ClockConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000706:	f000 f8eb 	bl	80008e0 <Error_Handler>
  }
}
 800070a:	bf00      	nop
 800070c:	3758      	adds	r7, #88	; 0x58
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
	...

08000714 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000718:	4b22      	ldr	r3, [pc, #136]	; (80007a4 <MX_LPUART1_UART_Init+0x90>)
 800071a:	4a23      	ldr	r2, [pc, #140]	; (80007a8 <MX_LPUART1_UART_Init+0x94>)
 800071c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800071e:	4b21      	ldr	r3, [pc, #132]	; (80007a4 <MX_LPUART1_UART_Init+0x90>)
 8000720:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000724:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000726:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <MX_LPUART1_UART_Init+0x90>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800072c:	4b1d      	ldr	r3, [pc, #116]	; (80007a4 <MX_LPUART1_UART_Init+0x90>)
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000732:	4b1c      	ldr	r3, [pc, #112]	; (80007a4 <MX_LPUART1_UART_Init+0x90>)
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000738:	4b1a      	ldr	r3, [pc, #104]	; (80007a4 <MX_LPUART1_UART_Init+0x90>)
 800073a:	220c      	movs	r2, #12
 800073c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073e:	4b19      	ldr	r3, [pc, #100]	; (80007a4 <MX_LPUART1_UART_Init+0x90>)
 8000740:	2200      	movs	r2, #0
 8000742:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000744:	4b17      	ldr	r3, [pc, #92]	; (80007a4 <MX_LPUART1_UART_Init+0x90>)
 8000746:	2200      	movs	r2, #0
 8000748:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800074a:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <MX_LPUART1_UART_Init+0x90>)
 800074c:	2200      	movs	r2, #0
 800074e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000750:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <MX_LPUART1_UART_Init+0x90>)
 8000752:	2200      	movs	r2, #0
 8000754:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000756:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <MX_LPUART1_UART_Init+0x90>)
 8000758:	2200      	movs	r2, #0
 800075a:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800075c:	4811      	ldr	r0, [pc, #68]	; (80007a4 <MX_LPUART1_UART_Init+0x90>)
 800075e:	f003 faa9 	bl	8003cb4 <HAL_UART_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000768:	f000 f8ba 	bl	80008e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800076c:	2100      	movs	r1, #0
 800076e:	480d      	ldr	r0, [pc, #52]	; (80007a4 <MX_LPUART1_UART_Init+0x90>)
 8000770:	f004 f946 	bl	8004a00 <HAL_UARTEx_SetTxFifoThreshold>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800077a:	f000 f8b1 	bl	80008e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800077e:	2100      	movs	r1, #0
 8000780:	4808      	ldr	r0, [pc, #32]	; (80007a4 <MX_LPUART1_UART_Init+0x90>)
 8000782:	f004 f97b 	bl	8004a7c <HAL_UARTEx_SetRxFifoThreshold>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 800078c:	f000 f8a8 	bl	80008e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000790:	4804      	ldr	r0, [pc, #16]	; (80007a4 <MX_LPUART1_UART_Init+0x90>)
 8000792:	f004 f8fc 	bl	800498e <HAL_UARTEx_DisableFifoMode>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 800079c:	f000 f8a0 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	2000008c 	.word	0x2000008c
 80007a8:	40008000 	.word	0x40008000

080007ac <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08e      	sub	sp, #56	; 0x38
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007c0:	f107 031c 	add.w	r3, r7, #28
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007cc:	463b      	mov	r3, r7
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	611a      	str	r2, [r3, #16]
 80007da:	615a      	str	r2, [r3, #20]
 80007dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80007de:	4b2c      	ldr	r3, [pc, #176]	; (8000890 <MX_TIM4_Init+0xe4>)
 80007e0:	4a2c      	ldr	r2, [pc, #176]	; (8000894 <MX_TIM4_Init+0xe8>)
 80007e2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 64-1;
 80007e4:	4b2a      	ldr	r3, [pc, #168]	; (8000890 <MX_TIM4_Init+0xe4>)
 80007e6:	223f      	movs	r2, #63	; 0x3f
 80007e8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ea:	4b29      	ldr	r3, [pc, #164]	; (8000890 <MX_TIM4_Init+0xe4>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 80007f0:	4b27      	ldr	r3, [pc, #156]	; (8000890 <MX_TIM4_Init+0xe4>)
 80007f2:	2263      	movs	r2, #99	; 0x63
 80007f4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f6:	4b26      	ldr	r3, [pc, #152]	; (8000890 <MX_TIM4_Init+0xe4>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007fc:	4b24      	ldr	r3, [pc, #144]	; (8000890 <MX_TIM4_Init+0xe4>)
 80007fe:	2200      	movs	r2, #0
 8000800:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000802:	4823      	ldr	r0, [pc, #140]	; (8000890 <MX_TIM4_Init+0xe4>)
 8000804:	f002 fa02 	bl	8002c0c <HAL_TIM_Base_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800080e:	f000 f867 	bl	80008e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000812:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000816:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000818:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800081c:	4619      	mov	r1, r3
 800081e:	481c      	ldr	r0, [pc, #112]	; (8000890 <MX_TIM4_Init+0xe4>)
 8000820:	f002 fcc6 	bl	80031b0 <HAL_TIM_ConfigClockSource>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800082a:	f000 f859 	bl	80008e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800082e:	4818      	ldr	r0, [pc, #96]	; (8000890 <MX_TIM4_Init+0xe4>)
 8000830:	f002 fa43 	bl	8002cba <HAL_TIM_PWM_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800083a:	f000 f851 	bl	80008e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800083e:	2300      	movs	r3, #0
 8000840:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000846:	f107 031c 	add.w	r3, r7, #28
 800084a:	4619      	mov	r1, r3
 800084c:	4810      	ldr	r0, [pc, #64]	; (8000890 <MX_TIM4_Init+0xe4>)
 800084e:	f003 f9a9 	bl	8003ba4 <HAL_TIMEx_MasterConfigSynchronization>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000858:	f000 f842 	bl	80008e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800085c:	2360      	movs	r3, #96	; 0x60
 800085e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000860:	2300      	movs	r3, #0
 8000862:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000864:	2300      	movs	r3, #0
 8000866:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000868:	2300      	movs	r3, #0
 800086a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800086c:	463b      	mov	r3, r7
 800086e:	2204      	movs	r2, #4
 8000870:	4619      	mov	r1, r3
 8000872:	4807      	ldr	r0, [pc, #28]	; (8000890 <MX_TIM4_Init+0xe4>)
 8000874:	f002 fb88 	bl	8002f88 <HAL_TIM_PWM_ConfigChannel>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800087e:	f000 f82f 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000882:	4803      	ldr	r0, [pc, #12]	; (8000890 <MX_TIM4_Init+0xe4>)
 8000884:	f000 f8d6 	bl	8000a34 <HAL_TIM_MspPostInit>

}
 8000888:	bf00      	nop
 800088a:	3738      	adds	r7, #56	; 0x38
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	2000011c 	.word	0x2000011c
 8000894:	40000800 	.word	0x40000800

08000898 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800089e:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <MX_GPIO_Init+0x44>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a2:	4a0e      	ldr	r2, [pc, #56]	; (80008dc <MX_GPIO_Init+0x44>)
 80008a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008aa:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <MX_GPIO_Init+0x44>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80008b6:	f000 fda9 	bl	800140c <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ba:	4b08      	ldr	r3, [pc, #32]	; (80008dc <MX_GPIO_Init+0x44>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008be:	4a07      	ldr	r2, [pc, #28]	; (80008dc <MX_GPIO_Init+0x44>)
 80008c0:	f043 0302 	orr.w	r3, r3, #2
 80008c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008c6:	4b05      	ldr	r3, [pc, #20]	; (80008dc <MX_GPIO_Init+0x44>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ca:	f003 0302 	and.w	r3, r3, #2
 80008ce:	603b      	str	r3, [r7, #0]
 80008d0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40021000 	.word	0x40021000

080008e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e4:	b672      	cpsid	i
}
 80008e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <Error_Handler+0x8>
	...

080008ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f2:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <HAL_MspInit+0x44>)
 80008f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008f6:	4a0e      	ldr	r2, [pc, #56]	; (8000930 <HAL_MspInit+0x44>)
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	6613      	str	r3, [r2, #96]	; 0x60
 80008fe:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <HAL_MspInit+0x44>)
 8000900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <HAL_MspInit+0x44>)
 800090c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800090e:	4a08      	ldr	r2, [pc, #32]	; (8000930 <HAL_MspInit+0x44>)
 8000910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000914:	6593      	str	r3, [r2, #88]	; 0x58
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <HAL_MspInit+0x44>)
 8000918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800091a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000922:	bf00      	nop
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	40021000 	.word	0x40021000

08000934 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b0ae      	sub	sp, #184	; 0xb8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800094c:	f107 0310 	add.w	r3, r7, #16
 8000950:	2294      	movs	r2, #148	; 0x94
 8000952:	2100      	movs	r1, #0
 8000954:	4618      	mov	r0, r3
 8000956:	f004 f947 	bl	8004be8 <memset>
  if(huart->Instance==LPUART1)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a22      	ldr	r2, [pc, #136]	; (80009e8 <HAL_UART_MspInit+0xb4>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d13d      	bne.n	80009e0 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000964:	2320      	movs	r3, #32
 8000966:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000968:	2300      	movs	r3, #0
 800096a:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800096c:	f107 0310 	add.w	r3, r7, #16
 8000970:	4618      	mov	r0, r3
 8000972:	f001 fc33 	bl	80021dc <HAL_RCCEx_PeriphCLKConfig>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800097c:	f7ff ffb0 	bl	80008e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000980:	4b1a      	ldr	r3, [pc, #104]	; (80009ec <HAL_UART_MspInit+0xb8>)
 8000982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000984:	4a19      	ldr	r2, [pc, #100]	; (80009ec <HAL_UART_MspInit+0xb8>)
 8000986:	f043 0301 	orr.w	r3, r3, #1
 800098a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800098c:	4b17      	ldr	r3, [pc, #92]	; (80009ec <HAL_UART_MspInit+0xb8>)
 800098e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000990:	f003 0301 	and.w	r3, r3, #1
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000998:	4b14      	ldr	r3, [pc, #80]	; (80009ec <HAL_UART_MspInit+0xb8>)
 800099a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099c:	4a13      	ldr	r2, [pc, #76]	; (80009ec <HAL_UART_MspInit+0xb8>)
 800099e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009a4:	4b11      	ldr	r3, [pc, #68]	; (80009ec <HAL_UART_MspInit+0xb8>)
 80009a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009ac:	60bb      	str	r3, [r7, #8]
 80009ae:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 80009b0:	f000 fd2c 	bl	800140c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = BSP_DEBUG_UART_TX_Pin|BSP_DEBUG_UART_RX_Pin;
 80009b4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80009b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009bc:	2302      	movs	r3, #2
 80009be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c8:	2303      	movs	r3, #3
 80009ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80009ce:	2308      	movs	r3, #8
 80009d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009d4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80009d8:	4619      	mov	r1, r3
 80009da:	4805      	ldr	r0, [pc, #20]	; (80009f0 <HAL_UART_MspInit+0xbc>)
 80009dc:	f000 fac0 	bl	8000f60 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80009e0:	bf00      	nop
 80009e2:	37b8      	adds	r7, #184	; 0xb8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40008000 	.word	0x40008000
 80009ec:	40021000 	.word	0x40021000
 80009f0:	48001800 	.word	0x48001800

080009f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b085      	sub	sp, #20
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a0a      	ldr	r2, [pc, #40]	; (8000a2c <HAL_TIM_Base_MspInit+0x38>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d10b      	bne.n	8000a1e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000a06:	4b0a      	ldr	r3, [pc, #40]	; (8000a30 <HAL_TIM_Base_MspInit+0x3c>)
 8000a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a0a:	4a09      	ldr	r2, [pc, #36]	; (8000a30 <HAL_TIM_Base_MspInit+0x3c>)
 8000a0c:	f043 0304 	orr.w	r3, r3, #4
 8000a10:	6593      	str	r3, [r2, #88]	; 0x58
 8000a12:	4b07      	ldr	r3, [pc, #28]	; (8000a30 <HAL_TIM_Base_MspInit+0x3c>)
 8000a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a16:	f003 0304 	and.w	r3, r3, #4
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000a1e:	bf00      	nop
 8000a20:	3714      	adds	r7, #20
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	40000800 	.word	0x40000800
 8000a30:	40021000 	.word	0x40021000

08000a34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b088      	sub	sp, #32
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3c:	f107 030c 	add.w	r3, r7, #12
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a11      	ldr	r2, [pc, #68]	; (8000a98 <HAL_TIM_MspPostInit+0x64>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d11b      	bne.n	8000a8e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a56:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <HAL_TIM_MspPostInit+0x68>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5a:	4a10      	ldr	r2, [pc, #64]	; (8000a9c <HAL_TIM_MspPostInit+0x68>)
 8000a5c:	f043 0302 	orr.w	r3, r3, #2
 8000a60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <HAL_TIM_MspPostInit+0x68>)
 8000a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a66:	f003 0302 	and.w	r3, r3, #2
 8000a6a:	60bb      	str	r3, [r7, #8]
 8000a6c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a6e:	2380      	movs	r3, #128	; 0x80
 8000a70:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a72:	2302      	movs	r3, #2
 8000a74:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a82:	f107 030c 	add.w	r3, r7, #12
 8000a86:	4619      	mov	r1, r3
 8000a88:	4805      	ldr	r0, [pc, #20]	; (8000aa0 <HAL_TIM_MspPostInit+0x6c>)
 8000a8a:	f000 fa69 	bl	8000f60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000a8e:	bf00      	nop
 8000a90:	3720      	adds	r7, #32
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40000800 	.word	0x40000800
 8000a9c:	40021000 	.word	0x40021000
 8000aa0:	48000400 	.word	0x48000400

08000aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <NMI_Handler+0x4>

08000aaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aae:	e7fe      	b.n	8000aae <HardFault_Handler+0x4>

08000ab0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <MemManage_Handler+0x4>

08000ab6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aba:	e7fe      	b.n	8000aba <BusFault_Handler+0x4>

08000abc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <UsageFault_Handler+0x4>

08000ac2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr

08000ad0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af0:	f000 f930 	bl	8000d54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b086      	sub	sp, #24
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	60b9      	str	r1, [r7, #8]
 8000b02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]
 8000b08:	e00a      	b.n	8000b20 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b0a:	f3af 8000 	nop.w
 8000b0e:	4601      	mov	r1, r0
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	1c5a      	adds	r2, r3, #1
 8000b14:	60ba      	str	r2, [r7, #8]
 8000b16:	b2ca      	uxtb	r2, r1
 8000b18:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	617b      	str	r3, [r7, #20]
 8000b20:	697a      	ldr	r2, [r7, #20]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	dbf0      	blt.n	8000b0a <_read+0x12>
  }

  return len;
 8000b28:	687b      	ldr	r3, [r7, #4]
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3718      	adds	r7, #24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
	...

08000b34 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
//
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }
	HAL_UART_Transmit(&hlpuart1, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	b29a      	uxth	r2, r3
 8000b44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b48:	68b9      	ldr	r1, [r7, #8]
 8000b4a:	4804      	ldr	r0, [pc, #16]	; (8000b5c <_write+0x28>)
 8000b4c:	f003 f902 	bl	8003d54 <HAL_UART_Transmit>
  return len;
 8000b50:	687b      	ldr	r3, [r7, #4]
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	2000008c 	.word	0x2000008c

08000b60 <_close>:

int _close(int file)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b88:	605a      	str	r2, [r3, #4]
  return 0;
 8000b8a:	2300      	movs	r3, #0
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <_isatty>:

int _isatty(int file)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ba0:	2301      	movs	r3, #1
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	b085      	sub	sp, #20
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	60f8      	str	r0, [r7, #12]
 8000bb6:	60b9      	str	r1, [r7, #8]
 8000bb8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bba:	2300      	movs	r3, #0
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3714      	adds	r7, #20
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bd0:	4a14      	ldr	r2, [pc, #80]	; (8000c24 <_sbrk+0x5c>)
 8000bd2:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <_sbrk+0x60>)
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bdc:	4b13      	ldr	r3, [pc, #76]	; (8000c2c <_sbrk+0x64>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d102      	bne.n	8000bea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000be4:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <_sbrk+0x64>)
 8000be6:	4a12      	ldr	r2, [pc, #72]	; (8000c30 <_sbrk+0x68>)
 8000be8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bea:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <_sbrk+0x64>)
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d207      	bcs.n	8000c08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bf8:	f003 ffcc 	bl	8004b94 <__errno>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	220c      	movs	r2, #12
 8000c00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c06:	e009      	b.n	8000c1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c08:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <_sbrk+0x64>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c0e:	4b07      	ldr	r3, [pc, #28]	; (8000c2c <_sbrk+0x64>)
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4413      	add	r3, r2
 8000c16:	4a05      	ldr	r2, [pc, #20]	; (8000c2c <_sbrk+0x64>)
 8000c18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c1a:	68fb      	ldr	r3, [r7, #12]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3718      	adds	r7, #24
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	200a0000 	.word	0x200a0000
 8000c28:	00000400 	.word	0x00000400
 8000c2c:	2000016c 	.word	0x2000016c
 8000c30:	20000188 	.word	0x20000188

08000c34 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <SystemInit+0x20>)
 8000c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c3e:	4a05      	ldr	r2, [pc, #20]	; (8000c54 <SystemInit+0x20>)
 8000c40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c90 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c5c:	f7ff ffea 	bl	8000c34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c60:	480c      	ldr	r0, [pc, #48]	; (8000c94 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c62:	490d      	ldr	r1, [pc, #52]	; (8000c98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c64:	4a0d      	ldr	r2, [pc, #52]	; (8000c9c <LoopForever+0xe>)
  movs r3, #0
 8000c66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c68:	e002      	b.n	8000c70 <LoopCopyDataInit>

08000c6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6e:	3304      	adds	r3, #4

08000c70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c74:	d3f9      	bcc.n	8000c6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c76:	4a0a      	ldr	r2, [pc, #40]	; (8000ca0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c78:	4c0a      	ldr	r4, [pc, #40]	; (8000ca4 <LoopForever+0x16>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c7c:	e001      	b.n	8000c82 <LoopFillZerobss>

08000c7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c80:	3204      	adds	r2, #4

08000c82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c84:	d3fb      	bcc.n	8000c7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c86:	f003 ff8b 	bl	8004ba0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c8a:	f7ff fcb1 	bl	80005f0 <main>

08000c8e <LoopForever>:

LoopForever:
    b LoopForever
 8000c8e:	e7fe      	b.n	8000c8e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c90:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000c94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c98:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c9c:	08005748 	.word	0x08005748
  ldr r2, =_sbss
 8000ca0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ca4:	20000184 	.word	0x20000184

08000ca8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ca8:	e7fe      	b.n	8000ca8 <ADC1_IRQHandler>

08000caa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b082      	sub	sp, #8
 8000cae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb4:	2003      	movs	r0, #3
 8000cb6:	f000 f91f 	bl	8000ef8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cba:	2000      	movs	r0, #0
 8000cbc:	f000 f80e 	bl	8000cdc <HAL_InitTick>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d002      	beq.n	8000ccc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	71fb      	strb	r3, [r7, #7]
 8000cca:	e001      	b.n	8000cd0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ccc:	f7ff fe0e 	bl	80008ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
	...

08000cdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ce8:	4b17      	ldr	r3, [pc, #92]	; (8000d48 <HAL_InitTick+0x6c>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d023      	beq.n	8000d38 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000cf0:	4b16      	ldr	r3, [pc, #88]	; (8000d4c <HAL_InitTick+0x70>)
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	4b14      	ldr	r3, [pc, #80]	; (8000d48 <HAL_InitTick+0x6c>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d06:	4618      	mov	r0, r3
 8000d08:	f000 f91d 	bl	8000f46 <HAL_SYSTICK_Config>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d10f      	bne.n	8000d32 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2b0f      	cmp	r3, #15
 8000d16:	d809      	bhi.n	8000d2c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	6879      	ldr	r1, [r7, #4]
 8000d1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d20:	f000 f8f5 	bl	8000f0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d24:	4a0a      	ldr	r2, [pc, #40]	; (8000d50 <HAL_InitTick+0x74>)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6013      	str	r3, [r2, #0]
 8000d2a:	e007      	b.n	8000d3c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	73fb      	strb	r3, [r7, #15]
 8000d30:	e004      	b.n	8000d3c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	73fb      	strb	r3, [r7, #15]
 8000d36:	e001      	b.n	8000d3c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20000008 	.word	0x20000008
 8000d4c:	20000000 	.word	0x20000000
 8000d50:	20000004 	.word	0x20000004

08000d54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <HAL_IncTick+0x20>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <HAL_IncTick+0x24>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4413      	add	r3, r2
 8000d64:	4a04      	ldr	r2, [pc, #16]	; (8000d78 <HAL_IncTick+0x24>)
 8000d66:	6013      	str	r3, [r2, #0]
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	20000008 	.word	0x20000008
 8000d78:	20000170 	.word	0x20000170

08000d7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d80:	4b03      	ldr	r3, [pc, #12]	; (8000d90 <HAL_GetTick+0x14>)
 8000d82:	681b      	ldr	r3, [r3, #0]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	20000170 	.word	0x20000170

08000d94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	f003 0307 	and.w	r3, r3, #7
 8000da2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000da4:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000daa:	68ba      	ldr	r2, [r7, #8]
 8000dac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000db0:	4013      	ands	r3, r2
 8000db2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dc6:	4a04      	ldr	r2, [pc, #16]	; (8000dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	60d3      	str	r3, [r2, #12]
}
 8000dcc:	bf00      	nop
 8000dce:	3714      	adds	r7, #20
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de0:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <__NVIC_GetPriorityGrouping+0x18>)
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	0a1b      	lsrs	r3, r3, #8
 8000de6:	f003 0307 	and.w	r3, r3, #7
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	6039      	str	r1, [r7, #0]
 8000e02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	db0a      	blt.n	8000e22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	b2da      	uxtb	r2, r3
 8000e10:	490c      	ldr	r1, [pc, #48]	; (8000e44 <__NVIC_SetPriority+0x4c>)
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	0112      	lsls	r2, r2, #4
 8000e18:	b2d2      	uxtb	r2, r2
 8000e1a:	440b      	add	r3, r1
 8000e1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e20:	e00a      	b.n	8000e38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	b2da      	uxtb	r2, r3
 8000e26:	4908      	ldr	r1, [pc, #32]	; (8000e48 <__NVIC_SetPriority+0x50>)
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	f003 030f 	and.w	r3, r3, #15
 8000e2e:	3b04      	subs	r3, #4
 8000e30:	0112      	lsls	r2, r2, #4
 8000e32:	b2d2      	uxtb	r2, r2
 8000e34:	440b      	add	r3, r1
 8000e36:	761a      	strb	r2, [r3, #24]
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	e000e100 	.word	0xe000e100
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b089      	sub	sp, #36	; 0x24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	f003 0307 	and.w	r3, r3, #7
 8000e5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	f1c3 0307 	rsb	r3, r3, #7
 8000e66:	2b04      	cmp	r3, #4
 8000e68:	bf28      	it	cs
 8000e6a:	2304      	movcs	r3, #4
 8000e6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	3304      	adds	r3, #4
 8000e72:	2b06      	cmp	r3, #6
 8000e74:	d902      	bls.n	8000e7c <NVIC_EncodePriority+0x30>
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3b03      	subs	r3, #3
 8000e7a:	e000      	b.n	8000e7e <NVIC_EncodePriority+0x32>
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	43da      	mvns	r2, r3
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	401a      	ands	r2, r3
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9e:	43d9      	mvns	r1, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea4:	4313      	orrs	r3, r2
         );
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3724      	adds	r7, #36	; 0x24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
	...

08000eb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ec4:	d301      	bcc.n	8000eca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e00f      	b.n	8000eea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eca:	4a0a      	ldr	r2, [pc, #40]	; (8000ef4 <SysTick_Config+0x40>)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ed2:	210f      	movs	r1, #15
 8000ed4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ed8:	f7ff ff8e 	bl	8000df8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000edc:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <SysTick_Config+0x40>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ee2:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <SysTick_Config+0x40>)
 8000ee4:	2207      	movs	r2, #7
 8000ee6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	e000e010 	.word	0xe000e010

08000ef8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f7ff ff47 	bl	8000d94 <__NVIC_SetPriorityGrouping>
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b086      	sub	sp, #24
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	4603      	mov	r3, r0
 8000f16:	60b9      	str	r1, [r7, #8]
 8000f18:	607a      	str	r2, [r7, #4]
 8000f1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f20:	f7ff ff5c 	bl	8000ddc <__NVIC_GetPriorityGrouping>
 8000f24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	68b9      	ldr	r1, [r7, #8]
 8000f2a:	6978      	ldr	r0, [r7, #20]
 8000f2c:	f7ff ff8e 	bl	8000e4c <NVIC_EncodePriority>
 8000f30:	4602      	mov	r2, r0
 8000f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f36:	4611      	mov	r1, r2
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff ff5d 	bl	8000df8 <__NVIC_SetPriority>
}
 8000f3e:	bf00      	nop
 8000f40:	3718      	adds	r7, #24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b082      	sub	sp, #8
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f7ff ffb0 	bl	8000eb4 <SysTick_Config>
 8000f54:	4603      	mov	r3, r0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b087      	sub	sp, #28
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f6e:	e166      	b.n	800123e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	2101      	movs	r1, #1
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	f000 8158 	beq.w	8001238 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 0303 	and.w	r3, r3, #3
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d005      	beq.n	8000fa0 <HAL_GPIO_Init+0x40>
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f003 0303 	and.w	r3, r3, #3
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	d130      	bne.n	8001002 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	2203      	movs	r2, #3
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	68da      	ldr	r2, [r3, #12]
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	091b      	lsrs	r3, r3, #4
 8000fec:	f003 0201 	and.w	r2, r3, #1
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f003 0303 	and.w	r3, r3, #3
 800100a:	2b03      	cmp	r3, #3
 800100c:	d017      	beq.n	800103e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	68db      	ldr	r3, [r3, #12]
 8001012:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	2203      	movs	r2, #3
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43db      	mvns	r3, r3
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	4013      	ands	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	689a      	ldr	r2, [r3, #8]
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	4313      	orrs	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f003 0303 	and.w	r3, r3, #3
 8001046:	2b02      	cmp	r3, #2
 8001048:	d123      	bne.n	8001092 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	08da      	lsrs	r2, r3, #3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	3208      	adds	r2, #8
 8001052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001056:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	220f      	movs	r2, #15
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	43db      	mvns	r3, r3
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	4013      	ands	r3, r2
 800106c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	691a      	ldr	r2, [r3, #16]
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	f003 0307 	and.w	r3, r3, #7
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	4313      	orrs	r3, r2
 8001082:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	08da      	lsrs	r2, r3, #3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3208      	adds	r2, #8
 800108c:	6939      	ldr	r1, [r7, #16]
 800108e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	2203      	movs	r2, #3
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43db      	mvns	r3, r3
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	4013      	ands	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f003 0203 	and.w	r2, r3, #3
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	4313      	orrs	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	f000 80b2 	beq.w	8001238 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d4:	4b61      	ldr	r3, [pc, #388]	; (800125c <HAL_GPIO_Init+0x2fc>)
 80010d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010d8:	4a60      	ldr	r2, [pc, #384]	; (800125c <HAL_GPIO_Init+0x2fc>)
 80010da:	f043 0301 	orr.w	r3, r3, #1
 80010de:	6613      	str	r3, [r2, #96]	; 0x60
 80010e0:	4b5e      	ldr	r3, [pc, #376]	; (800125c <HAL_GPIO_Init+0x2fc>)
 80010e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	60bb      	str	r3, [r7, #8]
 80010ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010ec:	4a5c      	ldr	r2, [pc, #368]	; (8001260 <HAL_GPIO_Init+0x300>)
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	089b      	lsrs	r3, r3, #2
 80010f2:	3302      	adds	r3, #2
 80010f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	f003 0303 	and.w	r3, r3, #3
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	220f      	movs	r2, #15
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	43db      	mvns	r3, r3
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	4013      	ands	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001116:	d02b      	beq.n	8001170 <HAL_GPIO_Init+0x210>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4a52      	ldr	r2, [pc, #328]	; (8001264 <HAL_GPIO_Init+0x304>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d025      	beq.n	800116c <HAL_GPIO_Init+0x20c>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4a51      	ldr	r2, [pc, #324]	; (8001268 <HAL_GPIO_Init+0x308>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d01f      	beq.n	8001168 <HAL_GPIO_Init+0x208>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4a50      	ldr	r2, [pc, #320]	; (800126c <HAL_GPIO_Init+0x30c>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d019      	beq.n	8001164 <HAL_GPIO_Init+0x204>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4a4f      	ldr	r2, [pc, #316]	; (8001270 <HAL_GPIO_Init+0x310>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d013      	beq.n	8001160 <HAL_GPIO_Init+0x200>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4a4e      	ldr	r2, [pc, #312]	; (8001274 <HAL_GPIO_Init+0x314>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d00d      	beq.n	800115c <HAL_GPIO_Init+0x1fc>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4a4d      	ldr	r2, [pc, #308]	; (8001278 <HAL_GPIO_Init+0x318>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d007      	beq.n	8001158 <HAL_GPIO_Init+0x1f8>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4a4c      	ldr	r2, [pc, #304]	; (800127c <HAL_GPIO_Init+0x31c>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d101      	bne.n	8001154 <HAL_GPIO_Init+0x1f4>
 8001150:	2307      	movs	r3, #7
 8001152:	e00e      	b.n	8001172 <HAL_GPIO_Init+0x212>
 8001154:	2308      	movs	r3, #8
 8001156:	e00c      	b.n	8001172 <HAL_GPIO_Init+0x212>
 8001158:	2306      	movs	r3, #6
 800115a:	e00a      	b.n	8001172 <HAL_GPIO_Init+0x212>
 800115c:	2305      	movs	r3, #5
 800115e:	e008      	b.n	8001172 <HAL_GPIO_Init+0x212>
 8001160:	2304      	movs	r3, #4
 8001162:	e006      	b.n	8001172 <HAL_GPIO_Init+0x212>
 8001164:	2303      	movs	r3, #3
 8001166:	e004      	b.n	8001172 <HAL_GPIO_Init+0x212>
 8001168:	2302      	movs	r3, #2
 800116a:	e002      	b.n	8001172 <HAL_GPIO_Init+0x212>
 800116c:	2301      	movs	r3, #1
 800116e:	e000      	b.n	8001172 <HAL_GPIO_Init+0x212>
 8001170:	2300      	movs	r3, #0
 8001172:	697a      	ldr	r2, [r7, #20]
 8001174:	f002 0203 	and.w	r2, r2, #3
 8001178:	0092      	lsls	r2, r2, #2
 800117a:	4093      	lsls	r3, r2
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	4313      	orrs	r3, r2
 8001180:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001182:	4937      	ldr	r1, [pc, #220]	; (8001260 <HAL_GPIO_Init+0x300>)
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	089b      	lsrs	r3, r3, #2
 8001188:	3302      	adds	r3, #2
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001190:	4b3b      	ldr	r3, [pc, #236]	; (8001280 <HAL_GPIO_Init+0x320>)
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	43db      	mvns	r3, r3
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	4013      	ands	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d003      	beq.n	80011b4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011b4:	4a32      	ldr	r2, [pc, #200]	; (8001280 <HAL_GPIO_Init+0x320>)
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011ba:	4b31      	ldr	r3, [pc, #196]	; (8001280 <HAL_GPIO_Init+0x320>)
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	43db      	mvns	r3, r3
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	4013      	ands	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d003      	beq.n	80011de <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	4313      	orrs	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011de:	4a28      	ldr	r2, [pc, #160]	; (8001280 <HAL_GPIO_Init+0x320>)
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80011e4:	4b26      	ldr	r3, [pc, #152]	; (8001280 <HAL_GPIO_Init+0x320>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	43db      	mvns	r3, r3
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	4013      	ands	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d003      	beq.n	8001208 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	4313      	orrs	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001208:	4a1d      	ldr	r2, [pc, #116]	; (8001280 <HAL_GPIO_Init+0x320>)
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800120e:	4b1c      	ldr	r3, [pc, #112]	; (8001280 <HAL_GPIO_Init+0x320>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	43db      	mvns	r3, r3
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	4013      	ands	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d003      	beq.n	8001232 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	4313      	orrs	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001232:	4a13      	ldr	r2, [pc, #76]	; (8001280 <HAL_GPIO_Init+0x320>)
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	3301      	adds	r3, #1
 800123c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	fa22 f303 	lsr.w	r3, r2, r3
 8001248:	2b00      	cmp	r3, #0
 800124a:	f47f ae91 	bne.w	8000f70 <HAL_GPIO_Init+0x10>
  }
}
 800124e:	bf00      	nop
 8001250:	bf00      	nop
 8001252:	371c      	adds	r7, #28
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	40021000 	.word	0x40021000
 8001260:	40010000 	.word	0x40010000
 8001264:	48000400 	.word	0x48000400
 8001268:	48000800 	.word	0x48000800
 800126c:	48000c00 	.word	0x48000c00
 8001270:	48001000 	.word	0x48001000
 8001274:	48001400 	.word	0x48001400
 8001278:	48001800 	.word	0x48001800
 800127c:	48001c00 	.word	0x48001c00
 8001280:	40010400 	.word	0x40010400

08001284 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001288:	4b0d      	ldr	r3, [pc, #52]	; (80012c0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001290:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001294:	d102      	bne.n	800129c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001296:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800129a:	e00b      	b.n	80012b4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800129c:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800129e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012aa:	d102      	bne.n	80012b2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80012ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012b0:	e000      	b.n	80012b4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80012b2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	40007000 	.word	0x40007000

080012c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d141      	bne.n	8001356 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80012d2:	4b4b      	ldr	r3, [pc, #300]	; (8001400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012de:	d131      	bne.n	8001344 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012e0:	4b47      	ldr	r3, [pc, #284]	; (8001400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012e6:	4a46      	ldr	r2, [pc, #280]	; (8001400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012f0:	4b43      	ldr	r3, [pc, #268]	; (8001400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012f8:	4a41      	ldr	r2, [pc, #260]	; (8001400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001300:	4b40      	ldr	r3, [pc, #256]	; (8001404 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2232      	movs	r2, #50	; 0x32
 8001306:	fb02 f303 	mul.w	r3, r2, r3
 800130a:	4a3f      	ldr	r2, [pc, #252]	; (8001408 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800130c:	fba2 2303 	umull	r2, r3, r2, r3
 8001310:	0c9b      	lsrs	r3, r3, #18
 8001312:	3301      	adds	r3, #1
 8001314:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001316:	e002      	b.n	800131e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	3b01      	subs	r3, #1
 800131c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800131e:	4b38      	ldr	r3, [pc, #224]	; (8001400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001320:	695b      	ldr	r3, [r3, #20]
 8001322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001326:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800132a:	d102      	bne.n	8001332 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d1f2      	bne.n	8001318 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001332:	4b33      	ldr	r3, [pc, #204]	; (8001400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001334:	695b      	ldr	r3, [r3, #20]
 8001336:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800133a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800133e:	d158      	bne.n	80013f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001340:	2303      	movs	r3, #3
 8001342:	e057      	b.n	80013f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001344:	4b2e      	ldr	r3, [pc, #184]	; (8001400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001346:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800134a:	4a2d      	ldr	r2, [pc, #180]	; (8001400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800134c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001350:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001354:	e04d      	b.n	80013f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800135c:	d141      	bne.n	80013e2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800135e:	4b28      	ldr	r3, [pc, #160]	; (8001400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001366:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800136a:	d131      	bne.n	80013d0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800136c:	4b24      	ldr	r3, [pc, #144]	; (8001400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800136e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001372:	4a23      	ldr	r2, [pc, #140]	; (8001400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001378:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800137c:	4b20      	ldr	r3, [pc, #128]	; (8001400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001384:	4a1e      	ldr	r2, [pc, #120]	; (8001400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001386:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800138a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800138c:	4b1d      	ldr	r3, [pc, #116]	; (8001404 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2232      	movs	r2, #50	; 0x32
 8001392:	fb02 f303 	mul.w	r3, r2, r3
 8001396:	4a1c      	ldr	r2, [pc, #112]	; (8001408 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001398:	fba2 2303 	umull	r2, r3, r2, r3
 800139c:	0c9b      	lsrs	r3, r3, #18
 800139e:	3301      	adds	r3, #1
 80013a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013a2:	e002      	b.n	80013aa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	3b01      	subs	r3, #1
 80013a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013aa:	4b15      	ldr	r3, [pc, #84]	; (8001400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013ac:	695b      	ldr	r3, [r3, #20]
 80013ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013b6:	d102      	bne.n	80013be <HAL_PWREx_ControlVoltageScaling+0xfa>
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1f2      	bne.n	80013a4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013be:	4b10      	ldr	r3, [pc, #64]	; (8001400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013c0:	695b      	ldr	r3, [r3, #20]
 80013c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013ca:	d112      	bne.n	80013f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e011      	b.n	80013f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013d0:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013d6:	4a0a      	ldr	r2, [pc, #40]	; (8001400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80013e0:	e007      	b.n	80013f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013e2:	4b07      	ldr	r3, [pc, #28]	; (8001400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013ea:	4a05      	ldr	r2, [pc, #20]	; (8001400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013f0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80013f2:	2300      	movs	r3, #0
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3714      	adds	r7, #20
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	40007000 	.word	0x40007000
 8001404:	20000000 	.word	0x20000000
 8001408:	431bde83 	.word	0x431bde83

0800140c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001410:	4b05      	ldr	r3, [pc, #20]	; (8001428 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	4a04      	ldr	r2, [pc, #16]	; (8001428 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001416:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800141a:	6053      	str	r3, [r2, #4]
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	40007000 	.word	0x40007000

0800142c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b088      	sub	sp, #32
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d102      	bne.n	8001440 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	f000 bc08 	b.w	8001c50 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001440:	4b96      	ldr	r3, [pc, #600]	; (800169c <HAL_RCC_OscConfig+0x270>)
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	f003 030c 	and.w	r3, r3, #12
 8001448:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800144a:	4b94      	ldr	r3, [pc, #592]	; (800169c <HAL_RCC_OscConfig+0x270>)
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	f003 0303 	and.w	r3, r3, #3
 8001452:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0310 	and.w	r3, r3, #16
 800145c:	2b00      	cmp	r3, #0
 800145e:	f000 80e4 	beq.w	800162a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d007      	beq.n	8001478 <HAL_RCC_OscConfig+0x4c>
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	2b0c      	cmp	r3, #12
 800146c:	f040 808b 	bne.w	8001586 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	2b01      	cmp	r3, #1
 8001474:	f040 8087 	bne.w	8001586 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001478:	4b88      	ldr	r3, [pc, #544]	; (800169c <HAL_RCC_OscConfig+0x270>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0302 	and.w	r3, r3, #2
 8001480:	2b00      	cmp	r3, #0
 8001482:	d005      	beq.n	8001490 <HAL_RCC_OscConfig+0x64>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d101      	bne.n	8001490 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e3df      	b.n	8001c50 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6a1a      	ldr	r2, [r3, #32]
 8001494:	4b81      	ldr	r3, [pc, #516]	; (800169c <HAL_RCC_OscConfig+0x270>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0308 	and.w	r3, r3, #8
 800149c:	2b00      	cmp	r3, #0
 800149e:	d004      	beq.n	80014aa <HAL_RCC_OscConfig+0x7e>
 80014a0:	4b7e      	ldr	r3, [pc, #504]	; (800169c <HAL_RCC_OscConfig+0x270>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014a8:	e005      	b.n	80014b6 <HAL_RCC_OscConfig+0x8a>
 80014aa:	4b7c      	ldr	r3, [pc, #496]	; (800169c <HAL_RCC_OscConfig+0x270>)
 80014ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014b0:	091b      	lsrs	r3, r3, #4
 80014b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d223      	bcs.n	8001502 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a1b      	ldr	r3, [r3, #32]
 80014be:	4618      	mov	r0, r3
 80014c0:	f000 fdcc 	bl	800205c <RCC_SetFlashLatencyFromMSIRange>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e3c0      	b.n	8001c50 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014ce:	4b73      	ldr	r3, [pc, #460]	; (800169c <HAL_RCC_OscConfig+0x270>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a72      	ldr	r2, [pc, #456]	; (800169c <HAL_RCC_OscConfig+0x270>)
 80014d4:	f043 0308 	orr.w	r3, r3, #8
 80014d8:	6013      	str	r3, [r2, #0]
 80014da:	4b70      	ldr	r3, [pc, #448]	; (800169c <HAL_RCC_OscConfig+0x270>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a1b      	ldr	r3, [r3, #32]
 80014e6:	496d      	ldr	r1, [pc, #436]	; (800169c <HAL_RCC_OscConfig+0x270>)
 80014e8:	4313      	orrs	r3, r2
 80014ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014ec:	4b6b      	ldr	r3, [pc, #428]	; (800169c <HAL_RCC_OscConfig+0x270>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	69db      	ldr	r3, [r3, #28]
 80014f8:	021b      	lsls	r3, r3, #8
 80014fa:	4968      	ldr	r1, [pc, #416]	; (800169c <HAL_RCC_OscConfig+0x270>)
 80014fc:	4313      	orrs	r3, r2
 80014fe:	604b      	str	r3, [r1, #4]
 8001500:	e025      	b.n	800154e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001502:	4b66      	ldr	r3, [pc, #408]	; (800169c <HAL_RCC_OscConfig+0x270>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a65      	ldr	r2, [pc, #404]	; (800169c <HAL_RCC_OscConfig+0x270>)
 8001508:	f043 0308 	orr.w	r3, r3, #8
 800150c:	6013      	str	r3, [r2, #0]
 800150e:	4b63      	ldr	r3, [pc, #396]	; (800169c <HAL_RCC_OscConfig+0x270>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6a1b      	ldr	r3, [r3, #32]
 800151a:	4960      	ldr	r1, [pc, #384]	; (800169c <HAL_RCC_OscConfig+0x270>)
 800151c:	4313      	orrs	r3, r2
 800151e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001520:	4b5e      	ldr	r3, [pc, #376]	; (800169c <HAL_RCC_OscConfig+0x270>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	69db      	ldr	r3, [r3, #28]
 800152c:	021b      	lsls	r3, r3, #8
 800152e:	495b      	ldr	r1, [pc, #364]	; (800169c <HAL_RCC_OscConfig+0x270>)
 8001530:	4313      	orrs	r3, r2
 8001532:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d109      	bne.n	800154e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a1b      	ldr	r3, [r3, #32]
 800153e:	4618      	mov	r0, r3
 8001540:	f000 fd8c 	bl	800205c <RCC_SetFlashLatencyFromMSIRange>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e380      	b.n	8001c50 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800154e:	f000 fcc1 	bl	8001ed4 <HAL_RCC_GetSysClockFreq>
 8001552:	4602      	mov	r2, r0
 8001554:	4b51      	ldr	r3, [pc, #324]	; (800169c <HAL_RCC_OscConfig+0x270>)
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	091b      	lsrs	r3, r3, #4
 800155a:	f003 030f 	and.w	r3, r3, #15
 800155e:	4950      	ldr	r1, [pc, #320]	; (80016a0 <HAL_RCC_OscConfig+0x274>)
 8001560:	5ccb      	ldrb	r3, [r1, r3]
 8001562:	f003 031f 	and.w	r3, r3, #31
 8001566:	fa22 f303 	lsr.w	r3, r2, r3
 800156a:	4a4e      	ldr	r2, [pc, #312]	; (80016a4 <HAL_RCC_OscConfig+0x278>)
 800156c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800156e:	4b4e      	ldr	r3, [pc, #312]	; (80016a8 <HAL_RCC_OscConfig+0x27c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff fbb2 	bl	8000cdc <HAL_InitTick>
 8001578:	4603      	mov	r3, r0
 800157a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800157c:	7bfb      	ldrb	r3, [r7, #15]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d052      	beq.n	8001628 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001582:	7bfb      	ldrb	r3, [r7, #15]
 8001584:	e364      	b.n	8001c50 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d032      	beq.n	80015f4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800158e:	4b43      	ldr	r3, [pc, #268]	; (800169c <HAL_RCC_OscConfig+0x270>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a42      	ldr	r2, [pc, #264]	; (800169c <HAL_RCC_OscConfig+0x270>)
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800159a:	f7ff fbef 	bl	8000d7c <HAL_GetTick>
 800159e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015a0:	e008      	b.n	80015b4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015a2:	f7ff fbeb 	bl	8000d7c <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e34d      	b.n	8001c50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015b4:	4b39      	ldr	r3, [pc, #228]	; (800169c <HAL_RCC_OscConfig+0x270>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d0f0      	beq.n	80015a2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015c0:	4b36      	ldr	r3, [pc, #216]	; (800169c <HAL_RCC_OscConfig+0x270>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a35      	ldr	r2, [pc, #212]	; (800169c <HAL_RCC_OscConfig+0x270>)
 80015c6:	f043 0308 	orr.w	r3, r3, #8
 80015ca:	6013      	str	r3, [r2, #0]
 80015cc:	4b33      	ldr	r3, [pc, #204]	; (800169c <HAL_RCC_OscConfig+0x270>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6a1b      	ldr	r3, [r3, #32]
 80015d8:	4930      	ldr	r1, [pc, #192]	; (800169c <HAL_RCC_OscConfig+0x270>)
 80015da:	4313      	orrs	r3, r2
 80015dc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015de:	4b2f      	ldr	r3, [pc, #188]	; (800169c <HAL_RCC_OscConfig+0x270>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	69db      	ldr	r3, [r3, #28]
 80015ea:	021b      	lsls	r3, r3, #8
 80015ec:	492b      	ldr	r1, [pc, #172]	; (800169c <HAL_RCC_OscConfig+0x270>)
 80015ee:	4313      	orrs	r3, r2
 80015f0:	604b      	str	r3, [r1, #4]
 80015f2:	e01a      	b.n	800162a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015f4:	4b29      	ldr	r3, [pc, #164]	; (800169c <HAL_RCC_OscConfig+0x270>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a28      	ldr	r2, [pc, #160]	; (800169c <HAL_RCC_OscConfig+0x270>)
 80015fa:	f023 0301 	bic.w	r3, r3, #1
 80015fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001600:	f7ff fbbc 	bl	8000d7c <HAL_GetTick>
 8001604:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001606:	e008      	b.n	800161a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001608:	f7ff fbb8 	bl	8000d7c <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b02      	cmp	r3, #2
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e31a      	b.n	8001c50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800161a:	4b20      	ldr	r3, [pc, #128]	; (800169c <HAL_RCC_OscConfig+0x270>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d1f0      	bne.n	8001608 <HAL_RCC_OscConfig+0x1dc>
 8001626:	e000      	b.n	800162a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001628:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	2b00      	cmp	r3, #0
 8001634:	d073      	beq.n	800171e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	2b08      	cmp	r3, #8
 800163a:	d005      	beq.n	8001648 <HAL_RCC_OscConfig+0x21c>
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	2b0c      	cmp	r3, #12
 8001640:	d10e      	bne.n	8001660 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	2b03      	cmp	r3, #3
 8001646:	d10b      	bne.n	8001660 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001648:	4b14      	ldr	r3, [pc, #80]	; (800169c <HAL_RCC_OscConfig+0x270>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d063      	beq.n	800171c <HAL_RCC_OscConfig+0x2f0>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d15f      	bne.n	800171c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e2f7      	b.n	8001c50 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001668:	d106      	bne.n	8001678 <HAL_RCC_OscConfig+0x24c>
 800166a:	4b0c      	ldr	r3, [pc, #48]	; (800169c <HAL_RCC_OscConfig+0x270>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a0b      	ldr	r2, [pc, #44]	; (800169c <HAL_RCC_OscConfig+0x270>)
 8001670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001674:	6013      	str	r3, [r2, #0]
 8001676:	e025      	b.n	80016c4 <HAL_RCC_OscConfig+0x298>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001680:	d114      	bne.n	80016ac <HAL_RCC_OscConfig+0x280>
 8001682:	4b06      	ldr	r3, [pc, #24]	; (800169c <HAL_RCC_OscConfig+0x270>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a05      	ldr	r2, [pc, #20]	; (800169c <HAL_RCC_OscConfig+0x270>)
 8001688:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800168c:	6013      	str	r3, [r2, #0]
 800168e:	4b03      	ldr	r3, [pc, #12]	; (800169c <HAL_RCC_OscConfig+0x270>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a02      	ldr	r2, [pc, #8]	; (800169c <HAL_RCC_OscConfig+0x270>)
 8001694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001698:	6013      	str	r3, [r2, #0]
 800169a:	e013      	b.n	80016c4 <HAL_RCC_OscConfig+0x298>
 800169c:	40021000 	.word	0x40021000
 80016a0:	08005664 	.word	0x08005664
 80016a4:	20000000 	.word	0x20000000
 80016a8:	20000004 	.word	0x20000004
 80016ac:	4ba0      	ldr	r3, [pc, #640]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a9f      	ldr	r2, [pc, #636]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 80016b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016b6:	6013      	str	r3, [r2, #0]
 80016b8:	4b9d      	ldr	r3, [pc, #628]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a9c      	ldr	r2, [pc, #624]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 80016be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d013      	beq.n	80016f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016cc:	f7ff fb56 	bl	8000d7c <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016d4:	f7ff fb52 	bl	8000d7c <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b64      	cmp	r3, #100	; 0x64
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e2b4      	b.n	8001c50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016e6:	4b92      	ldr	r3, [pc, #584]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d0f0      	beq.n	80016d4 <HAL_RCC_OscConfig+0x2a8>
 80016f2:	e014      	b.n	800171e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f4:	f7ff fb42 	bl	8000d7c <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016fc:	f7ff fb3e 	bl	8000d7c <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b64      	cmp	r3, #100	; 0x64
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e2a0      	b.n	8001c50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800170e:	4b88      	ldr	r3, [pc, #544]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1f0      	bne.n	80016fc <HAL_RCC_OscConfig+0x2d0>
 800171a:	e000      	b.n	800171e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800171c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d060      	beq.n	80017ec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	2b04      	cmp	r3, #4
 800172e:	d005      	beq.n	800173c <HAL_RCC_OscConfig+0x310>
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	2b0c      	cmp	r3, #12
 8001734:	d119      	bne.n	800176a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	2b02      	cmp	r3, #2
 800173a:	d116      	bne.n	800176a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800173c:	4b7c      	ldr	r3, [pc, #496]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001744:	2b00      	cmp	r3, #0
 8001746:	d005      	beq.n	8001754 <HAL_RCC_OscConfig+0x328>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d101      	bne.n	8001754 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e27d      	b.n	8001c50 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001754:	4b76      	ldr	r3, [pc, #472]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	691b      	ldr	r3, [r3, #16]
 8001760:	061b      	lsls	r3, r3, #24
 8001762:	4973      	ldr	r1, [pc, #460]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 8001764:	4313      	orrs	r3, r2
 8001766:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001768:	e040      	b.n	80017ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d023      	beq.n	80017ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001772:	4b6f      	ldr	r3, [pc, #444]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a6e      	ldr	r2, [pc, #440]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 8001778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800177c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800177e:	f7ff fafd 	bl	8000d7c <HAL_GetTick>
 8001782:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001784:	e008      	b.n	8001798 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001786:	f7ff faf9 	bl	8000d7c <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d901      	bls.n	8001798 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e25b      	b.n	8001c50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001798:	4b65      	ldr	r3, [pc, #404]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d0f0      	beq.n	8001786 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a4:	4b62      	ldr	r3, [pc, #392]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	691b      	ldr	r3, [r3, #16]
 80017b0:	061b      	lsls	r3, r3, #24
 80017b2:	495f      	ldr	r1, [pc, #380]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 80017b4:	4313      	orrs	r3, r2
 80017b6:	604b      	str	r3, [r1, #4]
 80017b8:	e018      	b.n	80017ec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017ba:	4b5d      	ldr	r3, [pc, #372]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a5c      	ldr	r2, [pc, #368]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 80017c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c6:	f7ff fad9 	bl	8000d7c <HAL_GetTick>
 80017ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017cc:	e008      	b.n	80017e0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017ce:	f7ff fad5 	bl	8000d7c <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e237      	b.n	8001c50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017e0:	4b53      	ldr	r3, [pc, #332]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d1f0      	bne.n	80017ce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0308 	and.w	r3, r3, #8
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d03c      	beq.n	8001872 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	695b      	ldr	r3, [r3, #20]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d01c      	beq.n	800183a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001800:	4b4b      	ldr	r3, [pc, #300]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 8001802:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001806:	4a4a      	ldr	r2, [pc, #296]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001810:	f7ff fab4 	bl	8000d7c <HAL_GetTick>
 8001814:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001816:	e008      	b.n	800182a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001818:	f7ff fab0 	bl	8000d7c <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b02      	cmp	r3, #2
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e212      	b.n	8001c50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800182a:	4b41      	ldr	r3, [pc, #260]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 800182c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001830:	f003 0302 	and.w	r3, r3, #2
 8001834:	2b00      	cmp	r3, #0
 8001836:	d0ef      	beq.n	8001818 <HAL_RCC_OscConfig+0x3ec>
 8001838:	e01b      	b.n	8001872 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800183a:	4b3d      	ldr	r3, [pc, #244]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 800183c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001840:	4a3b      	ldr	r2, [pc, #236]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 8001842:	f023 0301 	bic.w	r3, r3, #1
 8001846:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800184a:	f7ff fa97 	bl	8000d7c <HAL_GetTick>
 800184e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001850:	e008      	b.n	8001864 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001852:	f7ff fa93 	bl	8000d7c <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e1f5      	b.n	8001c50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001864:	4b32      	ldr	r3, [pc, #200]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 8001866:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1ef      	bne.n	8001852 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0304 	and.w	r3, r3, #4
 800187a:	2b00      	cmp	r3, #0
 800187c:	f000 80a6 	beq.w	80019cc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001880:	2300      	movs	r3, #0
 8001882:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001884:	4b2a      	ldr	r3, [pc, #168]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 8001886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d10d      	bne.n	80018ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001890:	4b27      	ldr	r3, [pc, #156]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 8001892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001894:	4a26      	ldr	r2, [pc, #152]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 8001896:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800189a:	6593      	str	r3, [r2, #88]	; 0x58
 800189c:	4b24      	ldr	r3, [pc, #144]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 800189e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a4:	60bb      	str	r3, [r7, #8]
 80018a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018a8:	2301      	movs	r3, #1
 80018aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018ac:	4b21      	ldr	r3, [pc, #132]	; (8001934 <HAL_RCC_OscConfig+0x508>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d118      	bne.n	80018ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018b8:	4b1e      	ldr	r3, [pc, #120]	; (8001934 <HAL_RCC_OscConfig+0x508>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a1d      	ldr	r2, [pc, #116]	; (8001934 <HAL_RCC_OscConfig+0x508>)
 80018be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018c4:	f7ff fa5a 	bl	8000d7c <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018cc:	f7ff fa56 	bl	8000d7c <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e1b8      	b.n	8001c50 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018de:	4b15      	ldr	r3, [pc, #84]	; (8001934 <HAL_RCC_OscConfig+0x508>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d0f0      	beq.n	80018cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d108      	bne.n	8001904 <HAL_RCC_OscConfig+0x4d8>
 80018f2:	4b0f      	ldr	r3, [pc, #60]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 80018f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018f8:	4a0d      	ldr	r2, [pc, #52]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 80018fa:	f043 0301 	orr.w	r3, r3, #1
 80018fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001902:	e029      	b.n	8001958 <HAL_RCC_OscConfig+0x52c>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	2b05      	cmp	r3, #5
 800190a:	d115      	bne.n	8001938 <HAL_RCC_OscConfig+0x50c>
 800190c:	4b08      	ldr	r3, [pc, #32]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 800190e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001912:	4a07      	ldr	r2, [pc, #28]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 8001914:	f043 0304 	orr.w	r3, r3, #4
 8001918:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800191c:	4b04      	ldr	r3, [pc, #16]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 800191e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001922:	4a03      	ldr	r2, [pc, #12]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800192c:	e014      	b.n	8001958 <HAL_RCC_OscConfig+0x52c>
 800192e:	bf00      	nop
 8001930:	40021000 	.word	0x40021000
 8001934:	40007000 	.word	0x40007000
 8001938:	4b9d      	ldr	r3, [pc, #628]	; (8001bb0 <HAL_RCC_OscConfig+0x784>)
 800193a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800193e:	4a9c      	ldr	r2, [pc, #624]	; (8001bb0 <HAL_RCC_OscConfig+0x784>)
 8001940:	f023 0301 	bic.w	r3, r3, #1
 8001944:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001948:	4b99      	ldr	r3, [pc, #612]	; (8001bb0 <HAL_RCC_OscConfig+0x784>)
 800194a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800194e:	4a98      	ldr	r2, [pc, #608]	; (8001bb0 <HAL_RCC_OscConfig+0x784>)
 8001950:	f023 0304 	bic.w	r3, r3, #4
 8001954:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d016      	beq.n	800198e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001960:	f7ff fa0c 	bl	8000d7c <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001966:	e00a      	b.n	800197e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001968:	f7ff fa08 	bl	8000d7c <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	f241 3288 	movw	r2, #5000	; 0x1388
 8001976:	4293      	cmp	r3, r2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e168      	b.n	8001c50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800197e:	4b8c      	ldr	r3, [pc, #560]	; (8001bb0 <HAL_RCC_OscConfig+0x784>)
 8001980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001984:	f003 0302 	and.w	r3, r3, #2
 8001988:	2b00      	cmp	r3, #0
 800198a:	d0ed      	beq.n	8001968 <HAL_RCC_OscConfig+0x53c>
 800198c:	e015      	b.n	80019ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800198e:	f7ff f9f5 	bl	8000d7c <HAL_GetTick>
 8001992:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001994:	e00a      	b.n	80019ac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001996:	f7ff f9f1 	bl	8000d7c <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d901      	bls.n	80019ac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e151      	b.n	8001c50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019ac:	4b80      	ldr	r3, [pc, #512]	; (8001bb0 <HAL_RCC_OscConfig+0x784>)
 80019ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d1ed      	bne.n	8001996 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019ba:	7ffb      	ldrb	r3, [r7, #31]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d105      	bne.n	80019cc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019c0:	4b7b      	ldr	r3, [pc, #492]	; (8001bb0 <HAL_RCC_OscConfig+0x784>)
 80019c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c4:	4a7a      	ldr	r2, [pc, #488]	; (8001bb0 <HAL_RCC_OscConfig+0x784>)
 80019c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019ca:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0320 	and.w	r3, r3, #32
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d03c      	beq.n	8001a52 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d01c      	beq.n	8001a1a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80019e0:	4b73      	ldr	r3, [pc, #460]	; (8001bb0 <HAL_RCC_OscConfig+0x784>)
 80019e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019e6:	4a72      	ldr	r2, [pc, #456]	; (8001bb0 <HAL_RCC_OscConfig+0x784>)
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f0:	f7ff f9c4 	bl	8000d7c <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019f8:	f7ff f9c0 	bl	8000d7c <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e122      	b.n	8001c50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a0a:	4b69      	ldr	r3, [pc, #420]	; (8001bb0 <HAL_RCC_OscConfig+0x784>)
 8001a0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d0ef      	beq.n	80019f8 <HAL_RCC_OscConfig+0x5cc>
 8001a18:	e01b      	b.n	8001a52 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a1a:	4b65      	ldr	r3, [pc, #404]	; (8001bb0 <HAL_RCC_OscConfig+0x784>)
 8001a1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a20:	4a63      	ldr	r2, [pc, #396]	; (8001bb0 <HAL_RCC_OscConfig+0x784>)
 8001a22:	f023 0301 	bic.w	r3, r3, #1
 8001a26:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a2a:	f7ff f9a7 	bl	8000d7c <HAL_GetTick>
 8001a2e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a30:	e008      	b.n	8001a44 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a32:	f7ff f9a3 	bl	8000d7c <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e105      	b.n	8001c50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a44:	4b5a      	ldr	r3, [pc, #360]	; (8001bb0 <HAL_RCC_OscConfig+0x784>)
 8001a46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1ef      	bne.n	8001a32 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	f000 80f9 	beq.w	8001c4e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	f040 80cf 	bne.w	8001c04 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a66:	4b52      	ldr	r3, [pc, #328]	; (8001bb0 <HAL_RCC_OscConfig+0x784>)
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	f003 0203 	and.w	r2, r3, #3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d12c      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a84:	3b01      	subs	r3, #1
 8001a86:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d123      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a96:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d11b      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aa6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d113      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ab6:	085b      	lsrs	r3, r3, #1
 8001ab8:	3b01      	subs	r3, #1
 8001aba:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d109      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	085b      	lsrs	r3, r3, #1
 8001acc:	3b01      	subs	r3, #1
 8001ace:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d071      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	2b0c      	cmp	r3, #12
 8001ad8:	d068      	beq.n	8001bac <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ada:	4b35      	ldr	r3, [pc, #212]	; (8001bb0 <HAL_RCC_OscConfig+0x784>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d105      	bne.n	8001af2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001ae6:	4b32      	ldr	r3, [pc, #200]	; (8001bb0 <HAL_RCC_OscConfig+0x784>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e0ac      	b.n	8001c50 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001af6:	4b2e      	ldr	r3, [pc, #184]	; (8001bb0 <HAL_RCC_OscConfig+0x784>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a2d      	ldr	r2, [pc, #180]	; (8001bb0 <HAL_RCC_OscConfig+0x784>)
 8001afc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b00:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b02:	f7ff f93b 	bl	8000d7c <HAL_GetTick>
 8001b06:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b08:	e008      	b.n	8001b1c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b0a:	f7ff f937 	bl	8000d7c <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e099      	b.n	8001c50 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b1c:	4b24      	ldr	r3, [pc, #144]	; (8001bb0 <HAL_RCC_OscConfig+0x784>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d1f0      	bne.n	8001b0a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b28:	4b21      	ldr	r3, [pc, #132]	; (8001bb0 <HAL_RCC_OscConfig+0x784>)
 8001b2a:	68da      	ldr	r2, [r3, #12]
 8001b2c:	4b21      	ldr	r3, [pc, #132]	; (8001bb4 <HAL_RCC_OscConfig+0x788>)
 8001b2e:	4013      	ands	r3, r2
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b38:	3a01      	subs	r2, #1
 8001b3a:	0112      	lsls	r2, r2, #4
 8001b3c:	4311      	orrs	r1, r2
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b42:	0212      	lsls	r2, r2, #8
 8001b44:	4311      	orrs	r1, r2
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001b4a:	0852      	lsrs	r2, r2, #1
 8001b4c:	3a01      	subs	r2, #1
 8001b4e:	0552      	lsls	r2, r2, #21
 8001b50:	4311      	orrs	r1, r2
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b56:	0852      	lsrs	r2, r2, #1
 8001b58:	3a01      	subs	r2, #1
 8001b5a:	0652      	lsls	r2, r2, #25
 8001b5c:	4311      	orrs	r1, r2
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b62:	06d2      	lsls	r2, r2, #27
 8001b64:	430a      	orrs	r2, r1
 8001b66:	4912      	ldr	r1, [pc, #72]	; (8001bb0 <HAL_RCC_OscConfig+0x784>)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b6c:	4b10      	ldr	r3, [pc, #64]	; (8001bb0 <HAL_RCC_OscConfig+0x784>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a0f      	ldr	r2, [pc, #60]	; (8001bb0 <HAL_RCC_OscConfig+0x784>)
 8001b72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b76:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b78:	4b0d      	ldr	r3, [pc, #52]	; (8001bb0 <HAL_RCC_OscConfig+0x784>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	4a0c      	ldr	r2, [pc, #48]	; (8001bb0 <HAL_RCC_OscConfig+0x784>)
 8001b7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b82:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b84:	f7ff f8fa 	bl	8000d7c <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b8c:	f7ff f8f6 	bl	8000d7c <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e058      	b.n	8001c50 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b9e:	4b04      	ldr	r3, [pc, #16]	; (8001bb0 <HAL_RCC_OscConfig+0x784>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d0f0      	beq.n	8001b8c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001baa:	e050      	b.n	8001c4e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e04f      	b.n	8001c50 <HAL_RCC_OscConfig+0x824>
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bb8:	4b27      	ldr	r3, [pc, #156]	; (8001c58 <HAL_RCC_OscConfig+0x82c>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d144      	bne.n	8001c4e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001bc4:	4b24      	ldr	r3, [pc, #144]	; (8001c58 <HAL_RCC_OscConfig+0x82c>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a23      	ldr	r2, [pc, #140]	; (8001c58 <HAL_RCC_OscConfig+0x82c>)
 8001bca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bd0:	4b21      	ldr	r3, [pc, #132]	; (8001c58 <HAL_RCC_OscConfig+0x82c>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	4a20      	ldr	r2, [pc, #128]	; (8001c58 <HAL_RCC_OscConfig+0x82c>)
 8001bd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bda:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001bdc:	f7ff f8ce 	bl	8000d7c <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001be4:	f7ff f8ca 	bl	8000d7c <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e02c      	b.n	8001c50 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bf6:	4b18      	ldr	r3, [pc, #96]	; (8001c58 <HAL_RCC_OscConfig+0x82c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d0f0      	beq.n	8001be4 <HAL_RCC_OscConfig+0x7b8>
 8001c02:	e024      	b.n	8001c4e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	2b0c      	cmp	r3, #12
 8001c08:	d01f      	beq.n	8001c4a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c0a:	4b13      	ldr	r3, [pc, #76]	; (8001c58 <HAL_RCC_OscConfig+0x82c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a12      	ldr	r2, [pc, #72]	; (8001c58 <HAL_RCC_OscConfig+0x82c>)
 8001c10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c16:	f7ff f8b1 	bl	8000d7c <HAL_GetTick>
 8001c1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c1c:	e008      	b.n	8001c30 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c1e:	f7ff f8ad 	bl	8000d7c <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e00f      	b.n	8001c50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c30:	4b09      	ldr	r3, [pc, #36]	; (8001c58 <HAL_RCC_OscConfig+0x82c>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d1f0      	bne.n	8001c1e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001c3c:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <HAL_RCC_OscConfig+0x82c>)
 8001c3e:	68da      	ldr	r2, [r3, #12]
 8001c40:	4905      	ldr	r1, [pc, #20]	; (8001c58 <HAL_RCC_OscConfig+0x82c>)
 8001c42:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <HAL_RCC_OscConfig+0x830>)
 8001c44:	4013      	ands	r3, r2
 8001c46:	60cb      	str	r3, [r1, #12]
 8001c48:	e001      	b.n	8001c4e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e000      	b.n	8001c50 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3720      	adds	r7, #32
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	feeefffc 	.word	0xfeeefffc

08001c60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d101      	bne.n	8001c78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e11d      	b.n	8001eb4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c78:	4b90      	ldr	r3, [pc, #576]	; (8001ebc <HAL_RCC_ClockConfig+0x25c>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 030f 	and.w	r3, r3, #15
 8001c80:	683a      	ldr	r2, [r7, #0]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d910      	bls.n	8001ca8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c86:	4b8d      	ldr	r3, [pc, #564]	; (8001ebc <HAL_RCC_ClockConfig+0x25c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f023 020f 	bic.w	r2, r3, #15
 8001c8e:	498b      	ldr	r1, [pc, #556]	; (8001ebc <HAL_RCC_ClockConfig+0x25c>)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c96:	4b89      	ldr	r3, [pc, #548]	; (8001ebc <HAL_RCC_ClockConfig+0x25c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 030f 	and.w	r3, r3, #15
 8001c9e:	683a      	ldr	r2, [r7, #0]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d001      	beq.n	8001ca8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e105      	b.n	8001eb4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d010      	beq.n	8001cd6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689a      	ldr	r2, [r3, #8]
 8001cb8:	4b81      	ldr	r3, [pc, #516]	; (8001ec0 <HAL_RCC_ClockConfig+0x260>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d908      	bls.n	8001cd6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cc4:	4b7e      	ldr	r3, [pc, #504]	; (8001ec0 <HAL_RCC_ClockConfig+0x260>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	497b      	ldr	r1, [pc, #492]	; (8001ec0 <HAL_RCC_ClockConfig+0x260>)
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d079      	beq.n	8001dd6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	2b03      	cmp	r3, #3
 8001ce8:	d11e      	bne.n	8001d28 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cea:	4b75      	ldr	r3, [pc, #468]	; (8001ec0 <HAL_RCC_ClockConfig+0x260>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d101      	bne.n	8001cfa <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e0dc      	b.n	8001eb4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001cfa:	f000 fa09 	bl	8002110 <RCC_GetSysClockFreqFromPLLSource>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	4a70      	ldr	r2, [pc, #448]	; (8001ec4 <HAL_RCC_ClockConfig+0x264>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d946      	bls.n	8001d94 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001d06:	4b6e      	ldr	r3, [pc, #440]	; (8001ec0 <HAL_RCC_ClockConfig+0x260>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d140      	bne.n	8001d94 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d12:	4b6b      	ldr	r3, [pc, #428]	; (8001ec0 <HAL_RCC_ClockConfig+0x260>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d1a:	4a69      	ldr	r2, [pc, #420]	; (8001ec0 <HAL_RCC_ClockConfig+0x260>)
 8001d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d20:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001d22:	2380      	movs	r3, #128	; 0x80
 8001d24:	617b      	str	r3, [r7, #20]
 8001d26:	e035      	b.n	8001d94 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d107      	bne.n	8001d40 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d30:	4b63      	ldr	r3, [pc, #396]	; (8001ec0 <HAL_RCC_ClockConfig+0x260>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d115      	bne.n	8001d68 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e0b9      	b.n	8001eb4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d107      	bne.n	8001d58 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d48:	4b5d      	ldr	r3, [pc, #372]	; (8001ec0 <HAL_RCC_ClockConfig+0x260>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d109      	bne.n	8001d68 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e0ad      	b.n	8001eb4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d58:	4b59      	ldr	r3, [pc, #356]	; (8001ec0 <HAL_RCC_ClockConfig+0x260>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d101      	bne.n	8001d68 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e0a5      	b.n	8001eb4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001d68:	f000 f8b4 	bl	8001ed4 <HAL_RCC_GetSysClockFreq>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	4a55      	ldr	r2, [pc, #340]	; (8001ec4 <HAL_RCC_ClockConfig+0x264>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d90f      	bls.n	8001d94 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001d74:	4b52      	ldr	r3, [pc, #328]	; (8001ec0 <HAL_RCC_ClockConfig+0x260>)
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d109      	bne.n	8001d94 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d80:	4b4f      	ldr	r3, [pc, #316]	; (8001ec0 <HAL_RCC_ClockConfig+0x260>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d88:	4a4d      	ldr	r2, [pc, #308]	; (8001ec0 <HAL_RCC_ClockConfig+0x260>)
 8001d8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d8e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001d90:	2380      	movs	r3, #128	; 0x80
 8001d92:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d94:	4b4a      	ldr	r3, [pc, #296]	; (8001ec0 <HAL_RCC_ClockConfig+0x260>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f023 0203 	bic.w	r2, r3, #3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	4947      	ldr	r1, [pc, #284]	; (8001ec0 <HAL_RCC_ClockConfig+0x260>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001da6:	f7fe ffe9 	bl	8000d7c <HAL_GetTick>
 8001daa:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dac:	e00a      	b.n	8001dc4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dae:	f7fe ffe5 	bl	8000d7c <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e077      	b.n	8001eb4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dc4:	4b3e      	ldr	r3, [pc, #248]	; (8001ec0 <HAL_RCC_ClockConfig+0x260>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f003 020c 	and.w	r2, r3, #12
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d1eb      	bne.n	8001dae <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	2b80      	cmp	r3, #128	; 0x80
 8001dda:	d105      	bne.n	8001de8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001ddc:	4b38      	ldr	r3, [pc, #224]	; (8001ec0 <HAL_RCC_ClockConfig+0x260>)
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	4a37      	ldr	r2, [pc, #220]	; (8001ec0 <HAL_RCC_ClockConfig+0x260>)
 8001de2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001de6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d010      	beq.n	8001e16 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	4b31      	ldr	r3, [pc, #196]	; (8001ec0 <HAL_RCC_ClockConfig+0x260>)
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d208      	bcs.n	8001e16 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e04:	4b2e      	ldr	r3, [pc, #184]	; (8001ec0 <HAL_RCC_ClockConfig+0x260>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	492b      	ldr	r1, [pc, #172]	; (8001ec0 <HAL_RCC_ClockConfig+0x260>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e16:	4b29      	ldr	r3, [pc, #164]	; (8001ebc <HAL_RCC_ClockConfig+0x25c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 030f 	and.w	r3, r3, #15
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d210      	bcs.n	8001e46 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e24:	4b25      	ldr	r3, [pc, #148]	; (8001ebc <HAL_RCC_ClockConfig+0x25c>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f023 020f 	bic.w	r2, r3, #15
 8001e2c:	4923      	ldr	r1, [pc, #140]	; (8001ebc <HAL_RCC_ClockConfig+0x25c>)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e34:	4b21      	ldr	r3, [pc, #132]	; (8001ebc <HAL_RCC_ClockConfig+0x25c>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 030f 	and.w	r3, r3, #15
 8001e3c:	683a      	ldr	r2, [r7, #0]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d001      	beq.n	8001e46 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e036      	b.n	8001eb4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0304 	and.w	r3, r3, #4
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d008      	beq.n	8001e64 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e52:	4b1b      	ldr	r3, [pc, #108]	; (8001ec0 <HAL_RCC_ClockConfig+0x260>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	4918      	ldr	r1, [pc, #96]	; (8001ec0 <HAL_RCC_ClockConfig+0x260>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0308 	and.w	r3, r3, #8
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d009      	beq.n	8001e84 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e70:	4b13      	ldr	r3, [pc, #76]	; (8001ec0 <HAL_RCC_ClockConfig+0x260>)
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	4910      	ldr	r1, [pc, #64]	; (8001ec0 <HAL_RCC_ClockConfig+0x260>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e84:	f000 f826 	bl	8001ed4 <HAL_RCC_GetSysClockFreq>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	4b0d      	ldr	r3, [pc, #52]	; (8001ec0 <HAL_RCC_ClockConfig+0x260>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	091b      	lsrs	r3, r3, #4
 8001e90:	f003 030f 	and.w	r3, r3, #15
 8001e94:	490c      	ldr	r1, [pc, #48]	; (8001ec8 <HAL_RCC_ClockConfig+0x268>)
 8001e96:	5ccb      	ldrb	r3, [r1, r3]
 8001e98:	f003 031f 	and.w	r3, r3, #31
 8001e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001ea0:	4a0a      	ldr	r2, [pc, #40]	; (8001ecc <HAL_RCC_ClockConfig+0x26c>)
 8001ea2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ea4:	4b0a      	ldr	r3, [pc, #40]	; (8001ed0 <HAL_RCC_ClockConfig+0x270>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7fe ff17 	bl	8000cdc <HAL_InitTick>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	73fb      	strb	r3, [r7, #15]

  return status;
 8001eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3718      	adds	r7, #24
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40022000 	.word	0x40022000
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	04c4b400 	.word	0x04c4b400
 8001ec8:	08005664 	.word	0x08005664
 8001ecc:	20000000 	.word	0x20000000
 8001ed0:	20000004 	.word	0x20000004

08001ed4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b089      	sub	sp, #36	; 0x24
 8001ed8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001eda:	2300      	movs	r3, #0
 8001edc:	61fb      	str	r3, [r7, #28]
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ee2:	4b3e      	ldr	r3, [pc, #248]	; (8001fdc <HAL_RCC_GetSysClockFreq+0x108>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 030c 	and.w	r3, r3, #12
 8001eea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001eec:	4b3b      	ldr	r3, [pc, #236]	; (8001fdc <HAL_RCC_GetSysClockFreq+0x108>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	f003 0303 	and.w	r3, r3, #3
 8001ef4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d005      	beq.n	8001f08 <HAL_RCC_GetSysClockFreq+0x34>
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	2b0c      	cmp	r3, #12
 8001f00:	d121      	bne.n	8001f46 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d11e      	bne.n	8001f46 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f08:	4b34      	ldr	r3, [pc, #208]	; (8001fdc <HAL_RCC_GetSysClockFreq+0x108>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0308 	and.w	r3, r3, #8
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d107      	bne.n	8001f24 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f14:	4b31      	ldr	r3, [pc, #196]	; (8001fdc <HAL_RCC_GetSysClockFreq+0x108>)
 8001f16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f1a:	0a1b      	lsrs	r3, r3, #8
 8001f1c:	f003 030f 	and.w	r3, r3, #15
 8001f20:	61fb      	str	r3, [r7, #28]
 8001f22:	e005      	b.n	8001f30 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f24:	4b2d      	ldr	r3, [pc, #180]	; (8001fdc <HAL_RCC_GetSysClockFreq+0x108>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	091b      	lsrs	r3, r3, #4
 8001f2a:	f003 030f 	and.w	r3, r3, #15
 8001f2e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f30:	4a2b      	ldr	r2, [pc, #172]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f38:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d10d      	bne.n	8001f5c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f44:	e00a      	b.n	8001f5c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	2b04      	cmp	r3, #4
 8001f4a:	d102      	bne.n	8001f52 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f4c:	4b25      	ldr	r3, [pc, #148]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f4e:	61bb      	str	r3, [r7, #24]
 8001f50:	e004      	b.n	8001f5c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	2b08      	cmp	r3, #8
 8001f56:	d101      	bne.n	8001f5c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f58:	4b23      	ldr	r3, [pc, #140]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f5a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	2b0c      	cmp	r3, #12
 8001f60:	d134      	bne.n	8001fcc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f62:	4b1e      	ldr	r3, [pc, #120]	; (8001fdc <HAL_RCC_GetSysClockFreq+0x108>)
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	f003 0303 	and.w	r3, r3, #3
 8001f6a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d003      	beq.n	8001f7a <HAL_RCC_GetSysClockFreq+0xa6>
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	2b03      	cmp	r3, #3
 8001f76:	d003      	beq.n	8001f80 <HAL_RCC_GetSysClockFreq+0xac>
 8001f78:	e005      	b.n	8001f86 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f7a:	4b1a      	ldr	r3, [pc, #104]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f7c:	617b      	str	r3, [r7, #20]
      break;
 8001f7e:	e005      	b.n	8001f8c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f80:	4b19      	ldr	r3, [pc, #100]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f82:	617b      	str	r3, [r7, #20]
      break;
 8001f84:	e002      	b.n	8001f8c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	617b      	str	r3, [r7, #20]
      break;
 8001f8a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f8c:	4b13      	ldr	r3, [pc, #76]	; (8001fdc <HAL_RCC_GetSysClockFreq+0x108>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	091b      	lsrs	r3, r3, #4
 8001f92:	f003 030f 	and.w	r3, r3, #15
 8001f96:	3301      	adds	r3, #1
 8001f98:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f9a:	4b10      	ldr	r3, [pc, #64]	; (8001fdc <HAL_RCC_GetSysClockFreq+0x108>)
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	0a1b      	lsrs	r3, r3, #8
 8001fa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001fa4:	697a      	ldr	r2, [r7, #20]
 8001fa6:	fb03 f202 	mul.w	r2, r3, r2
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001fb2:	4b0a      	ldr	r3, [pc, #40]	; (8001fdc <HAL_RCC_GetSysClockFreq+0x108>)
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	0e5b      	lsrs	r3, r3, #25
 8001fb8:	f003 0303 	and.w	r3, r3, #3
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001fc2:	697a      	ldr	r2, [r7, #20]
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001fcc:	69bb      	ldr	r3, [r7, #24]
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3724      	adds	r7, #36	; 0x24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	0800567c 	.word	0x0800567c
 8001fe4:	00f42400 	.word	0x00f42400
 8001fe8:	007a1200 	.word	0x007a1200

08001fec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ff0:	4b03      	ldr	r3, [pc, #12]	; (8002000 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	20000000 	.word	0x20000000

08002004 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002008:	f7ff fff0 	bl	8001fec <HAL_RCC_GetHCLKFreq>
 800200c:	4602      	mov	r2, r0
 800200e:	4b06      	ldr	r3, [pc, #24]	; (8002028 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	0a1b      	lsrs	r3, r3, #8
 8002014:	f003 0307 	and.w	r3, r3, #7
 8002018:	4904      	ldr	r1, [pc, #16]	; (800202c <HAL_RCC_GetPCLK1Freq+0x28>)
 800201a:	5ccb      	ldrb	r3, [r1, r3]
 800201c:	f003 031f 	and.w	r3, r3, #31
 8002020:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002024:	4618      	mov	r0, r3
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40021000 	.word	0x40021000
 800202c:	08005674 	.word	0x08005674

08002030 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002034:	f7ff ffda 	bl	8001fec <HAL_RCC_GetHCLKFreq>
 8002038:	4602      	mov	r2, r0
 800203a:	4b06      	ldr	r3, [pc, #24]	; (8002054 <HAL_RCC_GetPCLK2Freq+0x24>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	0adb      	lsrs	r3, r3, #11
 8002040:	f003 0307 	and.w	r3, r3, #7
 8002044:	4904      	ldr	r1, [pc, #16]	; (8002058 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002046:	5ccb      	ldrb	r3, [r1, r3]
 8002048:	f003 031f 	and.w	r3, r3, #31
 800204c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002050:	4618      	mov	r0, r3
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40021000 	.word	0x40021000
 8002058:	08005674 	.word	0x08005674

0800205c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002064:	2300      	movs	r3, #0
 8002066:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002068:	4b27      	ldr	r3, [pc, #156]	; (8002108 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800206a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800206c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d003      	beq.n	800207c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002074:	f7ff f906 	bl	8001284 <HAL_PWREx_GetVoltageRange>
 8002078:	6178      	str	r0, [r7, #20]
 800207a:	e014      	b.n	80020a6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800207c:	4b22      	ldr	r3, [pc, #136]	; (8002108 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800207e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002080:	4a21      	ldr	r2, [pc, #132]	; (8002108 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002082:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002086:	6593      	str	r3, [r2, #88]	; 0x58
 8002088:	4b1f      	ldr	r3, [pc, #124]	; (8002108 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800208a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002090:	60fb      	str	r3, [r7, #12]
 8002092:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002094:	f7ff f8f6 	bl	8001284 <HAL_PWREx_GetVoltageRange>
 8002098:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800209a:	4b1b      	ldr	r3, [pc, #108]	; (8002108 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800209c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209e:	4a1a      	ldr	r2, [pc, #104]	; (8002108 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80020a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020a4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020ac:	d10b      	bne.n	80020c6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2b80      	cmp	r3, #128	; 0x80
 80020b2:	d913      	bls.n	80020dc <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2ba0      	cmp	r3, #160	; 0xa0
 80020b8:	d902      	bls.n	80020c0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020ba:	2302      	movs	r3, #2
 80020bc:	613b      	str	r3, [r7, #16]
 80020be:	e00d      	b.n	80020dc <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020c0:	2301      	movs	r3, #1
 80020c2:	613b      	str	r3, [r7, #16]
 80020c4:	e00a      	b.n	80020dc <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2b7f      	cmp	r3, #127	; 0x7f
 80020ca:	d902      	bls.n	80020d2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80020cc:	2302      	movs	r3, #2
 80020ce:	613b      	str	r3, [r7, #16]
 80020d0:	e004      	b.n	80020dc <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2b70      	cmp	r3, #112	; 0x70
 80020d6:	d101      	bne.n	80020dc <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020d8:	2301      	movs	r3, #1
 80020da:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80020dc:	4b0b      	ldr	r3, [pc, #44]	; (800210c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f023 020f 	bic.w	r2, r3, #15
 80020e4:	4909      	ldr	r1, [pc, #36]	; (800210c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80020ec:	4b07      	ldr	r3, [pc, #28]	; (800210c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 030f 	and.w	r3, r3, #15
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d001      	beq.n	80020fe <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e000      	b.n	8002100 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3718      	adds	r7, #24
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40021000 	.word	0x40021000
 800210c:	40022000 	.word	0x40022000

08002110 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002110:	b480      	push	{r7}
 8002112:	b087      	sub	sp, #28
 8002114:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002116:	4b2d      	ldr	r3, [pc, #180]	; (80021cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	f003 0303 	and.w	r3, r3, #3
 800211e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2b03      	cmp	r3, #3
 8002124:	d00b      	beq.n	800213e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2b03      	cmp	r3, #3
 800212a:	d825      	bhi.n	8002178 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2b01      	cmp	r3, #1
 8002130:	d008      	beq.n	8002144 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2b02      	cmp	r3, #2
 8002136:	d11f      	bne.n	8002178 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002138:	4b25      	ldr	r3, [pc, #148]	; (80021d0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800213a:	613b      	str	r3, [r7, #16]
    break;
 800213c:	e01f      	b.n	800217e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800213e:	4b25      	ldr	r3, [pc, #148]	; (80021d4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002140:	613b      	str	r3, [r7, #16]
    break;
 8002142:	e01c      	b.n	800217e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002144:	4b21      	ldr	r3, [pc, #132]	; (80021cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0308 	and.w	r3, r3, #8
 800214c:	2b00      	cmp	r3, #0
 800214e:	d107      	bne.n	8002160 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002150:	4b1e      	ldr	r3, [pc, #120]	; (80021cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002152:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002156:	0a1b      	lsrs	r3, r3, #8
 8002158:	f003 030f 	and.w	r3, r3, #15
 800215c:	617b      	str	r3, [r7, #20]
 800215e:	e005      	b.n	800216c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002160:	4b1a      	ldr	r3, [pc, #104]	; (80021cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	091b      	lsrs	r3, r3, #4
 8002166:	f003 030f 	and.w	r3, r3, #15
 800216a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800216c:	4a1a      	ldr	r2, [pc, #104]	; (80021d8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002174:	613b      	str	r3, [r7, #16]
    break;
 8002176:	e002      	b.n	800217e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002178:	2300      	movs	r3, #0
 800217a:	613b      	str	r3, [r7, #16]
    break;
 800217c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800217e:	4b13      	ldr	r3, [pc, #76]	; (80021cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	091b      	lsrs	r3, r3, #4
 8002184:	f003 030f 	and.w	r3, r3, #15
 8002188:	3301      	adds	r3, #1
 800218a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800218c:	4b0f      	ldr	r3, [pc, #60]	; (80021cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	0a1b      	lsrs	r3, r3, #8
 8002192:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	fb03 f202 	mul.w	r2, r3, r2
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021a4:	4b09      	ldr	r3, [pc, #36]	; (80021cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	0e5b      	lsrs	r3, r3, #25
 80021aa:	f003 0303 	and.w	r3, r3, #3
 80021ae:	3301      	adds	r3, #1
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80021b4:	693a      	ldr	r2, [r7, #16]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021bc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80021be:	683b      	ldr	r3, [r7, #0]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	371c      	adds	r7, #28
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr
 80021cc:	40021000 	.word	0x40021000
 80021d0:	00f42400 	.word	0x00f42400
 80021d4:	007a1200 	.word	0x007a1200
 80021d8:	0800567c 	.word	0x0800567c

080021dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80021e4:	2300      	movs	r3, #0
 80021e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80021e8:	2300      	movs	r3, #0
 80021ea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d040      	beq.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021fc:	2b80      	cmp	r3, #128	; 0x80
 80021fe:	d02a      	beq.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002200:	2b80      	cmp	r3, #128	; 0x80
 8002202:	d825      	bhi.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002204:	2b60      	cmp	r3, #96	; 0x60
 8002206:	d026      	beq.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002208:	2b60      	cmp	r3, #96	; 0x60
 800220a:	d821      	bhi.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800220c:	2b40      	cmp	r3, #64	; 0x40
 800220e:	d006      	beq.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002210:	2b40      	cmp	r3, #64	; 0x40
 8002212:	d81d      	bhi.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002214:	2b00      	cmp	r3, #0
 8002216:	d009      	beq.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002218:	2b20      	cmp	r3, #32
 800221a:	d010      	beq.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800221c:	e018      	b.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800221e:	4b89      	ldr	r3, [pc, #548]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	4a88      	ldr	r2, [pc, #544]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002228:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800222a:	e015      	b.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	3304      	adds	r3, #4
 8002230:	2100      	movs	r1, #0
 8002232:	4618      	mov	r0, r3
 8002234:	f000 fb02 	bl	800283c <RCCEx_PLLSAI1_Config>
 8002238:	4603      	mov	r3, r0
 800223a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800223c:	e00c      	b.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	3320      	adds	r3, #32
 8002242:	2100      	movs	r1, #0
 8002244:	4618      	mov	r0, r3
 8002246:	f000 fbed 	bl	8002a24 <RCCEx_PLLSAI2_Config>
 800224a:	4603      	mov	r3, r0
 800224c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800224e:	e003      	b.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	74fb      	strb	r3, [r7, #19]
      break;
 8002254:	e000      	b.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002256:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002258:	7cfb      	ldrb	r3, [r7, #19]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d10b      	bne.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800225e:	4b79      	ldr	r3, [pc, #484]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002260:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002264:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800226c:	4975      	ldr	r1, [pc, #468]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800226e:	4313      	orrs	r3, r2
 8002270:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002274:	e001      	b.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002276:	7cfb      	ldrb	r3, [r7, #19]
 8002278:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d047      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800228a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800228e:	d030      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002290:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002294:	d82a      	bhi.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002296:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800229a:	d02a      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800229c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80022a0:	d824      	bhi.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x110>
 80022a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022a6:	d008      	beq.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0xde>
 80022a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022ac:	d81e      	bhi.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x110>
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00a      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80022b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022b6:	d010      	beq.n	80022da <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80022b8:	e018      	b.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80022ba:	4b62      	ldr	r3, [pc, #392]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	4a61      	ldr	r2, [pc, #388]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80022c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022c6:	e015      	b.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	3304      	adds	r3, #4
 80022cc:	2100      	movs	r1, #0
 80022ce:	4618      	mov	r0, r3
 80022d0:	f000 fab4 	bl	800283c <RCCEx_PLLSAI1_Config>
 80022d4:	4603      	mov	r3, r0
 80022d6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022d8:	e00c      	b.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	3320      	adds	r3, #32
 80022de:	2100      	movs	r1, #0
 80022e0:	4618      	mov	r0, r3
 80022e2:	f000 fb9f 	bl	8002a24 <RCCEx_PLLSAI2_Config>
 80022e6:	4603      	mov	r3, r0
 80022e8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022ea:	e003      	b.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	74fb      	strb	r3, [r7, #19]
      break;
 80022f0:	e000      	b.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80022f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022f4:	7cfb      	ldrb	r3, [r7, #19]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d10b      	bne.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80022fa:	4b52      	ldr	r3, [pc, #328]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80022fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002300:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002308:	494e      	ldr	r1, [pc, #312]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800230a:	4313      	orrs	r3, r2
 800230c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002310:	e001      	b.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002312:	7cfb      	ldrb	r3, [r7, #19]
 8002314:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231e:	2b00      	cmp	r3, #0
 8002320:	f000 809f 	beq.w	8002462 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002324:	2300      	movs	r3, #0
 8002326:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002328:	4b46      	ldr	r3, [pc, #280]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800232a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800232c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d101      	bne.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002334:	2301      	movs	r3, #1
 8002336:	e000      	b.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002338:	2300      	movs	r3, #0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00d      	beq.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800233e:	4b41      	ldr	r3, [pc, #260]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002342:	4a40      	ldr	r2, [pc, #256]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002348:	6593      	str	r3, [r2, #88]	; 0x58
 800234a:	4b3e      	ldr	r3, [pc, #248]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800234c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800234e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002352:	60bb      	str	r3, [r7, #8]
 8002354:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002356:	2301      	movs	r3, #1
 8002358:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800235a:	4b3b      	ldr	r3, [pc, #236]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a3a      	ldr	r2, [pc, #232]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002364:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002366:	f7fe fd09 	bl	8000d7c <HAL_GetTick>
 800236a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800236c:	e009      	b.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800236e:	f7fe fd05 	bl	8000d7c <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d902      	bls.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	74fb      	strb	r3, [r7, #19]
        break;
 8002380:	e005      	b.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002382:	4b31      	ldr	r3, [pc, #196]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800238a:	2b00      	cmp	r3, #0
 800238c:	d0ef      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800238e:	7cfb      	ldrb	r3, [r7, #19]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d15b      	bne.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002394:	4b2b      	ldr	r3, [pc, #172]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800239a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800239e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d01f      	beq.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ac:	697a      	ldr	r2, [r7, #20]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d019      	beq.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80023b2:	4b24      	ldr	r3, [pc, #144]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023bc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80023be:	4b21      	ldr	r3, [pc, #132]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c4:	4a1f      	ldr	r2, [pc, #124]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80023ce:	4b1d      	ldr	r3, [pc, #116]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d4:	4a1b      	ldr	r2, [pc, #108]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80023de:	4a19      	ldr	r2, [pc, #100]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	f003 0301 	and.w	r3, r3, #1
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d016      	beq.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f0:	f7fe fcc4 	bl	8000d7c <HAL_GetTick>
 80023f4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023f6:	e00b      	b.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023f8:	f7fe fcc0 	bl	8000d7c <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	f241 3288 	movw	r2, #5000	; 0x1388
 8002406:	4293      	cmp	r3, r2
 8002408:	d902      	bls.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	74fb      	strb	r3, [r7, #19]
            break;
 800240e:	e006      	b.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002410:	4b0c      	ldr	r3, [pc, #48]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d0ec      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800241e:	7cfb      	ldrb	r3, [r7, #19]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d10c      	bne.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002424:	4b07      	ldr	r3, [pc, #28]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800242a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002434:	4903      	ldr	r1, [pc, #12]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002436:	4313      	orrs	r3, r2
 8002438:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800243c:	e008      	b.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800243e:	7cfb      	ldrb	r3, [r7, #19]
 8002440:	74bb      	strb	r3, [r7, #18]
 8002442:	e005      	b.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002444:	40021000 	.word	0x40021000
 8002448:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800244c:	7cfb      	ldrb	r3, [r7, #19]
 800244e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002450:	7c7b      	ldrb	r3, [r7, #17]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d105      	bne.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002456:	4ba0      	ldr	r3, [pc, #640]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245a:	4a9f      	ldr	r2, [pc, #636]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800245c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002460:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00a      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800246e:	4b9a      	ldr	r3, [pc, #616]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002474:	f023 0203 	bic.w	r2, r3, #3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800247c:	4996      	ldr	r1, [pc, #600]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800247e:	4313      	orrs	r3, r2
 8002480:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00a      	beq.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002490:	4b91      	ldr	r3, [pc, #580]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002496:	f023 020c 	bic.w	r2, r3, #12
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	498e      	ldr	r1, [pc, #568]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0304 	and.w	r3, r3, #4
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00a      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024b2:	4b89      	ldr	r3, [pc, #548]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80024b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c0:	4985      	ldr	r1, [pc, #532]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0308 	and.w	r3, r3, #8
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d00a      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024d4:	4b80      	ldr	r3, [pc, #512]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80024d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024da:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024e2:	497d      	ldr	r1, [pc, #500]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0310 	and.w	r3, r3, #16
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00a      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024f6:	4b78      	ldr	r3, [pc, #480]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80024f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002504:	4974      	ldr	r1, [pc, #464]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002506:	4313      	orrs	r3, r2
 8002508:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0320 	and.w	r3, r3, #32
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00a      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002518:	4b6f      	ldr	r3, [pc, #444]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800251a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800251e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002526:	496c      	ldr	r1, [pc, #432]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002528:	4313      	orrs	r3, r2
 800252a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00a      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800253a:	4b67      	ldr	r3, [pc, #412]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800253c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002540:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002548:	4963      	ldr	r1, [pc, #396]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800254a:	4313      	orrs	r3, r2
 800254c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002558:	2b00      	cmp	r3, #0
 800255a:	d00a      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800255c:	4b5e      	ldr	r3, [pc, #376]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800255e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002562:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800256a:	495b      	ldr	r1, [pc, #364]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800256c:	4313      	orrs	r3, r2
 800256e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00a      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800257e:	4b56      	ldr	r3, [pc, #344]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002584:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800258c:	4952      	ldr	r1, [pc, #328]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800258e:	4313      	orrs	r3, r2
 8002590:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800259c:	2b00      	cmp	r3, #0
 800259e:	d00a      	beq.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025a0:	4b4d      	ldr	r3, [pc, #308]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ae:	494a      	ldr	r1, [pc, #296]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00a      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025c2:	4b45      	ldr	r3, [pc, #276]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d0:	4941      	ldr	r1, [pc, #260]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d00a      	beq.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80025e4:	4b3c      	ldr	r3, [pc, #240]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80025ea:	f023 0203 	bic.w	r2, r3, #3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025f2:	4939      	ldr	r1, [pc, #228]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d028      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002606:	4b34      	ldr	r3, [pc, #208]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002614:	4930      	ldr	r1, [pc, #192]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002616:	4313      	orrs	r3, r2
 8002618:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002620:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002624:	d106      	bne.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002626:	4b2c      	ldr	r3, [pc, #176]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	4a2b      	ldr	r2, [pc, #172]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800262c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002630:	60d3      	str	r3, [r2, #12]
 8002632:	e011      	b.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002638:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800263c:	d10c      	bne.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	3304      	adds	r3, #4
 8002642:	2101      	movs	r1, #1
 8002644:	4618      	mov	r0, r3
 8002646:	f000 f8f9 	bl	800283c <RCCEx_PLLSAI1_Config>
 800264a:	4603      	mov	r3, r0
 800264c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800264e:	7cfb      	ldrb	r3, [r7, #19]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8002654:	7cfb      	ldrb	r3, [r7, #19]
 8002656:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d04d      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002668:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800266c:	d108      	bne.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800266e:	4b1a      	ldr	r3, [pc, #104]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002670:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002674:	4a18      	ldr	r2, [pc, #96]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002676:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800267a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800267e:	e012      	b.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8002680:	4b15      	ldr	r3, [pc, #84]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002682:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002686:	4a14      	ldr	r2, [pc, #80]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002688:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800268c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002690:	4b11      	ldr	r3, [pc, #68]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002696:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800269e:	490e      	ldr	r1, [pc, #56]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026ae:	d106      	bne.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026b0:	4b09      	ldr	r3, [pc, #36]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	4a08      	ldr	r2, [pc, #32]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026ba:	60d3      	str	r3, [r2, #12]
 80026bc:	e020      	b.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026c6:	d109      	bne.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80026c8:	4b03      	ldr	r3, [pc, #12]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	4a02      	ldr	r2, [pc, #8]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026d2:	60d3      	str	r3, [r2, #12]
 80026d4:	e014      	b.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80026d6:	bf00      	nop
 80026d8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026e4:	d10c      	bne.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	3304      	adds	r3, #4
 80026ea:	2101      	movs	r1, #1
 80026ec:	4618      	mov	r0, r3
 80026ee:	f000 f8a5 	bl	800283c <RCCEx_PLLSAI1_Config>
 80026f2:	4603      	mov	r3, r0
 80026f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026f6:	7cfb      	ldrb	r3, [r7, #19]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80026fc:	7cfb      	ldrb	r3, [r7, #19]
 80026fe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d028      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800270c:	4b4a      	ldr	r3, [pc, #296]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800270e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002712:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800271a:	4947      	ldr	r1, [pc, #284]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800271c:	4313      	orrs	r3, r2
 800271e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002726:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800272a:	d106      	bne.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800272c:	4b42      	ldr	r3, [pc, #264]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	4a41      	ldr	r2, [pc, #260]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002732:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002736:	60d3      	str	r3, [r2, #12]
 8002738:	e011      	b.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800273e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002742:	d10c      	bne.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3304      	adds	r3, #4
 8002748:	2101      	movs	r1, #1
 800274a:	4618      	mov	r0, r3
 800274c:	f000 f876 	bl	800283c <RCCEx_PLLSAI1_Config>
 8002750:	4603      	mov	r3, r0
 8002752:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002754:	7cfb      	ldrb	r3, [r7, #19]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800275a:	7cfb      	ldrb	r3, [r7, #19]
 800275c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d01e      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800276a:	4b33      	ldr	r3, [pc, #204]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800276c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002770:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800277a:	492f      	ldr	r1, [pc, #188]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800277c:	4313      	orrs	r3, r2
 800277e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002788:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800278c:	d10c      	bne.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	3304      	adds	r3, #4
 8002792:	2102      	movs	r1, #2
 8002794:	4618      	mov	r0, r3
 8002796:	f000 f851 	bl	800283c <RCCEx_PLLSAI1_Config>
 800279a:	4603      	mov	r3, r0
 800279c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800279e:	7cfb      	ldrb	r3, [r7, #19]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80027a4:	7cfb      	ldrb	r3, [r7, #19]
 80027a6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00b      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80027b4:	4b20      	ldr	r3, [pc, #128]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80027ba:	f023 0204 	bic.w	r2, r3, #4
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027c4:	491c      	ldr	r1, [pc, #112]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00b      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80027d8:	4b17      	ldr	r3, [pc, #92]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80027de:	f023 0218 	bic.w	r2, r3, #24
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e8:	4913      	ldr	r1, [pc, #76]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d017      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80027fc:	4b0e      	ldr	r3, [pc, #56]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002802:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800280c:	490a      	ldr	r1, [pc, #40]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800280e:	4313      	orrs	r3, r2
 8002810:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800281a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800281e:	d105      	bne.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002820:	4b05      	ldr	r3, [pc, #20]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	4a04      	ldr	r2, [pc, #16]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002826:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800282a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800282c:	7cbb      	ldrb	r3, [r7, #18]
}
 800282e:	4618      	mov	r0, r3
 8002830:	3718      	adds	r7, #24
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	40021000 	.word	0x40021000

0800283c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002846:	2300      	movs	r3, #0
 8002848:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800284a:	4b72      	ldr	r3, [pc, #456]	; (8002a14 <RCCEx_PLLSAI1_Config+0x1d8>)
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	f003 0303 	and.w	r3, r3, #3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00e      	beq.n	8002874 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002856:	4b6f      	ldr	r3, [pc, #444]	; (8002a14 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	f003 0203 	and.w	r2, r3, #3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	429a      	cmp	r2, r3
 8002864:	d103      	bne.n	800286e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
       ||
 800286a:	2b00      	cmp	r3, #0
 800286c:	d142      	bne.n	80028f4 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	73fb      	strb	r3, [r7, #15]
 8002872:	e03f      	b.n	80028f4 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2b03      	cmp	r3, #3
 800287a:	d018      	beq.n	80028ae <RCCEx_PLLSAI1_Config+0x72>
 800287c:	2b03      	cmp	r3, #3
 800287e:	d825      	bhi.n	80028cc <RCCEx_PLLSAI1_Config+0x90>
 8002880:	2b01      	cmp	r3, #1
 8002882:	d002      	beq.n	800288a <RCCEx_PLLSAI1_Config+0x4e>
 8002884:	2b02      	cmp	r3, #2
 8002886:	d009      	beq.n	800289c <RCCEx_PLLSAI1_Config+0x60>
 8002888:	e020      	b.n	80028cc <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800288a:	4b62      	ldr	r3, [pc, #392]	; (8002a14 <RCCEx_PLLSAI1_Config+0x1d8>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d11d      	bne.n	80028d2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800289a:	e01a      	b.n	80028d2 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800289c:	4b5d      	ldr	r3, [pc, #372]	; (8002a14 <RCCEx_PLLSAI1_Config+0x1d8>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d116      	bne.n	80028d6 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028ac:	e013      	b.n	80028d6 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80028ae:	4b59      	ldr	r3, [pc, #356]	; (8002a14 <RCCEx_PLLSAI1_Config+0x1d8>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10f      	bne.n	80028da <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028ba:	4b56      	ldr	r3, [pc, #344]	; (8002a14 <RCCEx_PLLSAI1_Config+0x1d8>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d109      	bne.n	80028da <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80028ca:	e006      	b.n	80028da <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	73fb      	strb	r3, [r7, #15]
      break;
 80028d0:	e004      	b.n	80028dc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80028d2:	bf00      	nop
 80028d4:	e002      	b.n	80028dc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80028d6:	bf00      	nop
 80028d8:	e000      	b.n	80028dc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80028da:	bf00      	nop
    }

    if(status == HAL_OK)
 80028dc:	7bfb      	ldrb	r3, [r7, #15]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d108      	bne.n	80028f4 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80028e2:	4b4c      	ldr	r3, [pc, #304]	; (8002a14 <RCCEx_PLLSAI1_Config+0x1d8>)
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	f023 0203 	bic.w	r2, r3, #3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4949      	ldr	r1, [pc, #292]	; (8002a14 <RCCEx_PLLSAI1_Config+0x1d8>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80028f4:	7bfb      	ldrb	r3, [r7, #15]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f040 8086 	bne.w	8002a08 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80028fc:	4b45      	ldr	r3, [pc, #276]	; (8002a14 <RCCEx_PLLSAI1_Config+0x1d8>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a44      	ldr	r2, [pc, #272]	; (8002a14 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002902:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002906:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002908:	f7fe fa38 	bl	8000d7c <HAL_GetTick>
 800290c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800290e:	e009      	b.n	8002924 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002910:	f7fe fa34 	bl	8000d7c <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d902      	bls.n	8002924 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	73fb      	strb	r3, [r7, #15]
        break;
 8002922:	e005      	b.n	8002930 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002924:	4b3b      	ldr	r3, [pc, #236]	; (8002a14 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d1ef      	bne.n	8002910 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002930:	7bfb      	ldrb	r3, [r7, #15]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d168      	bne.n	8002a08 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d113      	bne.n	8002964 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800293c:	4b35      	ldr	r3, [pc, #212]	; (8002a14 <RCCEx_PLLSAI1_Config+0x1d8>)
 800293e:	691a      	ldr	r2, [r3, #16]
 8002940:	4b35      	ldr	r3, [pc, #212]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002942:	4013      	ands	r3, r2
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	6892      	ldr	r2, [r2, #8]
 8002948:	0211      	lsls	r1, r2, #8
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	68d2      	ldr	r2, [r2, #12]
 800294e:	06d2      	lsls	r2, r2, #27
 8002950:	4311      	orrs	r1, r2
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	6852      	ldr	r2, [r2, #4]
 8002956:	3a01      	subs	r2, #1
 8002958:	0112      	lsls	r2, r2, #4
 800295a:	430a      	orrs	r2, r1
 800295c:	492d      	ldr	r1, [pc, #180]	; (8002a14 <RCCEx_PLLSAI1_Config+0x1d8>)
 800295e:	4313      	orrs	r3, r2
 8002960:	610b      	str	r3, [r1, #16]
 8002962:	e02d      	b.n	80029c0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d115      	bne.n	8002996 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800296a:	4b2a      	ldr	r3, [pc, #168]	; (8002a14 <RCCEx_PLLSAI1_Config+0x1d8>)
 800296c:	691a      	ldr	r2, [r3, #16]
 800296e:	4b2b      	ldr	r3, [pc, #172]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002970:	4013      	ands	r3, r2
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	6892      	ldr	r2, [r2, #8]
 8002976:	0211      	lsls	r1, r2, #8
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	6912      	ldr	r2, [r2, #16]
 800297c:	0852      	lsrs	r2, r2, #1
 800297e:	3a01      	subs	r2, #1
 8002980:	0552      	lsls	r2, r2, #21
 8002982:	4311      	orrs	r1, r2
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	6852      	ldr	r2, [r2, #4]
 8002988:	3a01      	subs	r2, #1
 800298a:	0112      	lsls	r2, r2, #4
 800298c:	430a      	orrs	r2, r1
 800298e:	4921      	ldr	r1, [pc, #132]	; (8002a14 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002990:	4313      	orrs	r3, r2
 8002992:	610b      	str	r3, [r1, #16]
 8002994:	e014      	b.n	80029c0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002996:	4b1f      	ldr	r3, [pc, #124]	; (8002a14 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002998:	691a      	ldr	r2, [r3, #16]
 800299a:	4b21      	ldr	r3, [pc, #132]	; (8002a20 <RCCEx_PLLSAI1_Config+0x1e4>)
 800299c:	4013      	ands	r3, r2
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	6892      	ldr	r2, [r2, #8]
 80029a2:	0211      	lsls	r1, r2, #8
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	6952      	ldr	r2, [r2, #20]
 80029a8:	0852      	lsrs	r2, r2, #1
 80029aa:	3a01      	subs	r2, #1
 80029ac:	0652      	lsls	r2, r2, #25
 80029ae:	4311      	orrs	r1, r2
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	6852      	ldr	r2, [r2, #4]
 80029b4:	3a01      	subs	r2, #1
 80029b6:	0112      	lsls	r2, r2, #4
 80029b8:	430a      	orrs	r2, r1
 80029ba:	4916      	ldr	r1, [pc, #88]	; (8002a14 <RCCEx_PLLSAI1_Config+0x1d8>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80029c0:	4b14      	ldr	r3, [pc, #80]	; (8002a14 <RCCEx_PLLSAI1_Config+0x1d8>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a13      	ldr	r2, [pc, #76]	; (8002a14 <RCCEx_PLLSAI1_Config+0x1d8>)
 80029c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029cc:	f7fe f9d6 	bl	8000d7c <HAL_GetTick>
 80029d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029d2:	e009      	b.n	80029e8 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029d4:	f7fe f9d2 	bl	8000d7c <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d902      	bls.n	80029e8 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	73fb      	strb	r3, [r7, #15]
          break;
 80029e6:	e005      	b.n	80029f4 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029e8:	4b0a      	ldr	r3, [pc, #40]	; (8002a14 <RCCEx_PLLSAI1_Config+0x1d8>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d0ef      	beq.n	80029d4 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80029f4:	7bfb      	ldrb	r3, [r7, #15]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d106      	bne.n	8002a08 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80029fa:	4b06      	ldr	r3, [pc, #24]	; (8002a14 <RCCEx_PLLSAI1_Config+0x1d8>)
 80029fc:	691a      	ldr	r2, [r3, #16]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	4904      	ldr	r1, [pc, #16]	; (8002a14 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	40021000 	.word	0x40021000
 8002a18:	07ff800f 	.word	0x07ff800f
 8002a1c:	ff9f800f 	.word	0xff9f800f
 8002a20:	f9ff800f 	.word	0xf9ff800f

08002a24 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a32:	4b72      	ldr	r3, [pc, #456]	; (8002bfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	f003 0303 	and.w	r3, r3, #3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00e      	beq.n	8002a5c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002a3e:	4b6f      	ldr	r3, [pc, #444]	; (8002bfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	f003 0203 	and.w	r2, r3, #3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d103      	bne.n	8002a56 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
       ||
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d142      	bne.n	8002adc <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	73fb      	strb	r3, [r7, #15]
 8002a5a:	e03f      	b.n	8002adc <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2b03      	cmp	r3, #3
 8002a62:	d018      	beq.n	8002a96 <RCCEx_PLLSAI2_Config+0x72>
 8002a64:	2b03      	cmp	r3, #3
 8002a66:	d825      	bhi.n	8002ab4 <RCCEx_PLLSAI2_Config+0x90>
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d002      	beq.n	8002a72 <RCCEx_PLLSAI2_Config+0x4e>
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d009      	beq.n	8002a84 <RCCEx_PLLSAI2_Config+0x60>
 8002a70:	e020      	b.n	8002ab4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a72:	4b62      	ldr	r3, [pc, #392]	; (8002bfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d11d      	bne.n	8002aba <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a82:	e01a      	b.n	8002aba <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a84:	4b5d      	ldr	r3, [pc, #372]	; (8002bfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d116      	bne.n	8002abe <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a94:	e013      	b.n	8002abe <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a96:	4b59      	ldr	r3, [pc, #356]	; (8002bfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10f      	bne.n	8002ac2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002aa2:	4b56      	ldr	r3, [pc, #344]	; (8002bfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d109      	bne.n	8002ac2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ab2:	e006      	b.n	8002ac2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ab8:	e004      	b.n	8002ac4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002aba:	bf00      	nop
 8002abc:	e002      	b.n	8002ac4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002abe:	bf00      	nop
 8002ac0:	e000      	b.n	8002ac4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002ac2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ac4:	7bfb      	ldrb	r3, [r7, #15]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d108      	bne.n	8002adc <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8002aca:	4b4c      	ldr	r3, [pc, #304]	; (8002bfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	f023 0203 	bic.w	r2, r3, #3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4949      	ldr	r1, [pc, #292]	; (8002bfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002adc:	7bfb      	ldrb	r3, [r7, #15]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f040 8086 	bne.w	8002bf0 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002ae4:	4b45      	ldr	r3, [pc, #276]	; (8002bfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a44      	ldr	r2, [pc, #272]	; (8002bfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8002aea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002af0:	f7fe f944 	bl	8000d7c <HAL_GetTick>
 8002af4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002af6:	e009      	b.n	8002b0c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002af8:	f7fe f940 	bl	8000d7c <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d902      	bls.n	8002b0c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	73fb      	strb	r3, [r7, #15]
        break;
 8002b0a:	e005      	b.n	8002b18 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b0c:	4b3b      	ldr	r3, [pc, #236]	; (8002bfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1ef      	bne.n	8002af8 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002b18:	7bfb      	ldrb	r3, [r7, #15]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d168      	bne.n	8002bf0 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d113      	bne.n	8002b4c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b24:	4b35      	ldr	r3, [pc, #212]	; (8002bfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b26:	695a      	ldr	r2, [r3, #20]
 8002b28:	4b35      	ldr	r3, [pc, #212]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1dc>)
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	6892      	ldr	r2, [r2, #8]
 8002b30:	0211      	lsls	r1, r2, #8
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	68d2      	ldr	r2, [r2, #12]
 8002b36:	06d2      	lsls	r2, r2, #27
 8002b38:	4311      	orrs	r1, r2
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	6852      	ldr	r2, [r2, #4]
 8002b3e:	3a01      	subs	r2, #1
 8002b40:	0112      	lsls	r2, r2, #4
 8002b42:	430a      	orrs	r2, r1
 8002b44:	492d      	ldr	r1, [pc, #180]	; (8002bfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	614b      	str	r3, [r1, #20]
 8002b4a:	e02d      	b.n	8002ba8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d115      	bne.n	8002b7e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b52:	4b2a      	ldr	r3, [pc, #168]	; (8002bfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b54:	695a      	ldr	r2, [r3, #20]
 8002b56:	4b2b      	ldr	r3, [pc, #172]	; (8002c04 <RCCEx_PLLSAI2_Config+0x1e0>)
 8002b58:	4013      	ands	r3, r2
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	6892      	ldr	r2, [r2, #8]
 8002b5e:	0211      	lsls	r1, r2, #8
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6912      	ldr	r2, [r2, #16]
 8002b64:	0852      	lsrs	r2, r2, #1
 8002b66:	3a01      	subs	r2, #1
 8002b68:	0552      	lsls	r2, r2, #21
 8002b6a:	4311      	orrs	r1, r2
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	6852      	ldr	r2, [r2, #4]
 8002b70:	3a01      	subs	r2, #1
 8002b72:	0112      	lsls	r2, r2, #4
 8002b74:	430a      	orrs	r2, r1
 8002b76:	4921      	ldr	r1, [pc, #132]	; (8002bfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	614b      	str	r3, [r1, #20]
 8002b7c:	e014      	b.n	8002ba8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b7e:	4b1f      	ldr	r3, [pc, #124]	; (8002bfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b80:	695a      	ldr	r2, [r3, #20]
 8002b82:	4b21      	ldr	r3, [pc, #132]	; (8002c08 <RCCEx_PLLSAI2_Config+0x1e4>)
 8002b84:	4013      	ands	r3, r2
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	6892      	ldr	r2, [r2, #8]
 8002b8a:	0211      	lsls	r1, r2, #8
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	6952      	ldr	r2, [r2, #20]
 8002b90:	0852      	lsrs	r2, r2, #1
 8002b92:	3a01      	subs	r2, #1
 8002b94:	0652      	lsls	r2, r2, #25
 8002b96:	4311      	orrs	r1, r2
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	6852      	ldr	r2, [r2, #4]
 8002b9c:	3a01      	subs	r2, #1
 8002b9e:	0112      	lsls	r2, r2, #4
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	4916      	ldr	r1, [pc, #88]	; (8002bfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002ba8:	4b14      	ldr	r3, [pc, #80]	; (8002bfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a13      	ldr	r2, [pc, #76]	; (8002bfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8002bae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bb2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb4:	f7fe f8e2 	bl	8000d7c <HAL_GetTick>
 8002bb8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002bba:	e009      	b.n	8002bd0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002bbc:	f7fe f8de 	bl	8000d7c <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d902      	bls.n	8002bd0 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	73fb      	strb	r3, [r7, #15]
          break;
 8002bce:	e005      	b.n	8002bdc <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002bd0:	4b0a      	ldr	r3, [pc, #40]	; (8002bfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d0ef      	beq.n	8002bbc <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002bdc:	7bfb      	ldrb	r3, [r7, #15]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d106      	bne.n	8002bf0 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002be2:	4b06      	ldr	r3, [pc, #24]	; (8002bfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8002be4:	695a      	ldr	r2, [r3, #20]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	4904      	ldr	r1, [pc, #16]	; (8002bfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	07ff800f 	.word	0x07ff800f
 8002c04:	ff9f800f 	.word	0xff9f800f
 8002c08:	f9ff800f 	.word	0xf9ff800f

08002c0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e049      	b.n	8002cb2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d106      	bne.n	8002c38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f7fd fede 	bl	80009f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	3304      	adds	r3, #4
 8002c48:	4619      	mov	r1, r3
 8002c4a:	4610      	mov	r0, r2
 8002c4c:	f000 fb7a 	bl	8003344 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b082      	sub	sp, #8
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d101      	bne.n	8002ccc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e049      	b.n	8002d60 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d106      	bne.n	8002ce6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 f841 	bl	8002d68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2202      	movs	r2, #2
 8002cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	3304      	adds	r3, #4
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	4610      	mov	r0, r2
 8002cfa:	f000 fb23 	bl	8003344 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2201      	movs	r2, #1
 8002d02:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2201      	movs	r2, #1
 8002d32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3708      	adds	r7, #8
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d109      	bne.n	8002da0 <HAL_TIM_PWM_Start+0x24>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	bf14      	ite	ne
 8002d98:	2301      	movne	r3, #1
 8002d9a:	2300      	moveq	r3, #0
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	e03c      	b.n	8002e1a <HAL_TIM_PWM_Start+0x9e>
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	2b04      	cmp	r3, #4
 8002da4:	d109      	bne.n	8002dba <HAL_TIM_PWM_Start+0x3e>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	bf14      	ite	ne
 8002db2:	2301      	movne	r3, #1
 8002db4:	2300      	moveq	r3, #0
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	e02f      	b.n	8002e1a <HAL_TIM_PWM_Start+0x9e>
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	2b08      	cmp	r3, #8
 8002dbe:	d109      	bne.n	8002dd4 <HAL_TIM_PWM_Start+0x58>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	bf14      	ite	ne
 8002dcc:	2301      	movne	r3, #1
 8002dce:	2300      	moveq	r3, #0
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	e022      	b.n	8002e1a <HAL_TIM_PWM_Start+0x9e>
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	2b0c      	cmp	r3, #12
 8002dd8:	d109      	bne.n	8002dee <HAL_TIM_PWM_Start+0x72>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	bf14      	ite	ne
 8002de6:	2301      	movne	r3, #1
 8002de8:	2300      	moveq	r3, #0
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	e015      	b.n	8002e1a <HAL_TIM_PWM_Start+0x9e>
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	2b10      	cmp	r3, #16
 8002df2:	d109      	bne.n	8002e08 <HAL_TIM_PWM_Start+0x8c>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	bf14      	ite	ne
 8002e00:	2301      	movne	r3, #1
 8002e02:	2300      	moveq	r3, #0
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	e008      	b.n	8002e1a <HAL_TIM_PWM_Start+0x9e>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	bf14      	ite	ne
 8002e14:	2301      	movne	r3, #1
 8002e16:	2300      	moveq	r3, #0
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e09c      	b.n	8002f5c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d104      	bne.n	8002e32 <HAL_TIM_PWM_Start+0xb6>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e30:	e023      	b.n	8002e7a <HAL_TIM_PWM_Start+0xfe>
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	2b04      	cmp	r3, #4
 8002e36:	d104      	bne.n	8002e42 <HAL_TIM_PWM_Start+0xc6>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e40:	e01b      	b.n	8002e7a <HAL_TIM_PWM_Start+0xfe>
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	2b08      	cmp	r3, #8
 8002e46:	d104      	bne.n	8002e52 <HAL_TIM_PWM_Start+0xd6>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e50:	e013      	b.n	8002e7a <HAL_TIM_PWM_Start+0xfe>
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	2b0c      	cmp	r3, #12
 8002e56:	d104      	bne.n	8002e62 <HAL_TIM_PWM_Start+0xe6>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e60:	e00b      	b.n	8002e7a <HAL_TIM_PWM_Start+0xfe>
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	2b10      	cmp	r3, #16
 8002e66:	d104      	bne.n	8002e72 <HAL_TIM_PWM_Start+0xf6>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e70:	e003      	b.n	8002e7a <HAL_TIM_PWM_Start+0xfe>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2202      	movs	r2, #2
 8002e76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	6839      	ldr	r1, [r7, #0]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f000 fe68 	bl	8003b58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a35      	ldr	r2, [pc, #212]	; (8002f64 <HAL_TIM_PWM_Start+0x1e8>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d013      	beq.n	8002eba <HAL_TIM_PWM_Start+0x13e>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a34      	ldr	r2, [pc, #208]	; (8002f68 <HAL_TIM_PWM_Start+0x1ec>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d00e      	beq.n	8002eba <HAL_TIM_PWM_Start+0x13e>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a32      	ldr	r2, [pc, #200]	; (8002f6c <HAL_TIM_PWM_Start+0x1f0>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d009      	beq.n	8002eba <HAL_TIM_PWM_Start+0x13e>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a31      	ldr	r2, [pc, #196]	; (8002f70 <HAL_TIM_PWM_Start+0x1f4>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d004      	beq.n	8002eba <HAL_TIM_PWM_Start+0x13e>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a2f      	ldr	r2, [pc, #188]	; (8002f74 <HAL_TIM_PWM_Start+0x1f8>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d101      	bne.n	8002ebe <HAL_TIM_PWM_Start+0x142>
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e000      	b.n	8002ec0 <HAL_TIM_PWM_Start+0x144>
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d007      	beq.n	8002ed4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ed2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a22      	ldr	r2, [pc, #136]	; (8002f64 <HAL_TIM_PWM_Start+0x1e8>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d01d      	beq.n	8002f1a <HAL_TIM_PWM_Start+0x19e>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee6:	d018      	beq.n	8002f1a <HAL_TIM_PWM_Start+0x19e>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a22      	ldr	r2, [pc, #136]	; (8002f78 <HAL_TIM_PWM_Start+0x1fc>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d013      	beq.n	8002f1a <HAL_TIM_PWM_Start+0x19e>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a21      	ldr	r2, [pc, #132]	; (8002f7c <HAL_TIM_PWM_Start+0x200>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d00e      	beq.n	8002f1a <HAL_TIM_PWM_Start+0x19e>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a1f      	ldr	r2, [pc, #124]	; (8002f80 <HAL_TIM_PWM_Start+0x204>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d009      	beq.n	8002f1a <HAL_TIM_PWM_Start+0x19e>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a17      	ldr	r2, [pc, #92]	; (8002f68 <HAL_TIM_PWM_Start+0x1ec>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d004      	beq.n	8002f1a <HAL_TIM_PWM_Start+0x19e>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a15      	ldr	r2, [pc, #84]	; (8002f6c <HAL_TIM_PWM_Start+0x1f0>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d115      	bne.n	8002f46 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	689a      	ldr	r2, [r3, #8]
 8002f20:	4b18      	ldr	r3, [pc, #96]	; (8002f84 <HAL_TIM_PWM_Start+0x208>)
 8002f22:	4013      	ands	r3, r2
 8002f24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2b06      	cmp	r3, #6
 8002f2a:	d015      	beq.n	8002f58 <HAL_TIM_PWM_Start+0x1dc>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f32:	d011      	beq.n	8002f58 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f042 0201 	orr.w	r2, r2, #1
 8002f42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f44:	e008      	b.n	8002f58 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f042 0201 	orr.w	r2, r2, #1
 8002f54:	601a      	str	r2, [r3, #0]
 8002f56:	e000      	b.n	8002f5a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f58:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3710      	adds	r7, #16
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40012c00 	.word	0x40012c00
 8002f68:	40013400 	.word	0x40013400
 8002f6c:	40014000 	.word	0x40014000
 8002f70:	40014400 	.word	0x40014400
 8002f74:	40014800 	.word	0x40014800
 8002f78:	40000400 	.word	0x40000400
 8002f7c:	40000800 	.word	0x40000800
 8002f80:	40000c00 	.word	0x40000c00
 8002f84:	00010007 	.word	0x00010007

08002f88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f94:	2300      	movs	r3, #0
 8002f96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d101      	bne.n	8002fa6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	e0ff      	b.n	80031a6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2b14      	cmp	r3, #20
 8002fb2:	f200 80f0 	bhi.w	8003196 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002fb6:	a201      	add	r2, pc, #4	; (adr r2, 8002fbc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fbc:	08003011 	.word	0x08003011
 8002fc0:	08003197 	.word	0x08003197
 8002fc4:	08003197 	.word	0x08003197
 8002fc8:	08003197 	.word	0x08003197
 8002fcc:	08003051 	.word	0x08003051
 8002fd0:	08003197 	.word	0x08003197
 8002fd4:	08003197 	.word	0x08003197
 8002fd8:	08003197 	.word	0x08003197
 8002fdc:	08003093 	.word	0x08003093
 8002fe0:	08003197 	.word	0x08003197
 8002fe4:	08003197 	.word	0x08003197
 8002fe8:	08003197 	.word	0x08003197
 8002fec:	080030d3 	.word	0x080030d3
 8002ff0:	08003197 	.word	0x08003197
 8002ff4:	08003197 	.word	0x08003197
 8002ff8:	08003197 	.word	0x08003197
 8002ffc:	08003115 	.word	0x08003115
 8003000:	08003197 	.word	0x08003197
 8003004:	08003197 	.word	0x08003197
 8003008:	08003197 	.word	0x08003197
 800300c:	08003155 	.word	0x08003155
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68b9      	ldr	r1, [r7, #8]
 8003016:	4618      	mov	r0, r3
 8003018:	f000 fa2e 	bl	8003478 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	699a      	ldr	r2, [r3, #24]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f042 0208 	orr.w	r2, r2, #8
 800302a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	699a      	ldr	r2, [r3, #24]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f022 0204 	bic.w	r2, r2, #4
 800303a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6999      	ldr	r1, [r3, #24]
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	691a      	ldr	r2, [r3, #16]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	430a      	orrs	r2, r1
 800304c:	619a      	str	r2, [r3, #24]
      break;
 800304e:	e0a5      	b.n	800319c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68b9      	ldr	r1, [r7, #8]
 8003056:	4618      	mov	r0, r3
 8003058:	f000 fa9e 	bl	8003598 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	699a      	ldr	r2, [r3, #24]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800306a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	699a      	ldr	r2, [r3, #24]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800307a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6999      	ldr	r1, [r3, #24]
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	021a      	lsls	r2, r3, #8
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	430a      	orrs	r2, r1
 800308e:	619a      	str	r2, [r3, #24]
      break;
 8003090:	e084      	b.n	800319c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68b9      	ldr	r1, [r7, #8]
 8003098:	4618      	mov	r0, r3
 800309a:	f000 fb07 	bl	80036ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	69da      	ldr	r2, [r3, #28]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f042 0208 	orr.w	r2, r2, #8
 80030ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	69da      	ldr	r2, [r3, #28]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 0204 	bic.w	r2, r2, #4
 80030bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	69d9      	ldr	r1, [r3, #28]
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	691a      	ldr	r2, [r3, #16]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	61da      	str	r2, [r3, #28]
      break;
 80030d0:	e064      	b.n	800319c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68b9      	ldr	r1, [r7, #8]
 80030d8:	4618      	mov	r0, r3
 80030da:	f000 fb6f 	bl	80037bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	69da      	ldr	r2, [r3, #28]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	69da      	ldr	r2, [r3, #28]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	69d9      	ldr	r1, [r3, #28]
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	021a      	lsls	r2, r3, #8
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	430a      	orrs	r2, r1
 8003110:	61da      	str	r2, [r3, #28]
      break;
 8003112:	e043      	b.n	800319c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68b9      	ldr	r1, [r7, #8]
 800311a:	4618      	mov	r0, r3
 800311c:	f000 fbb8 	bl	8003890 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f042 0208 	orr.w	r2, r2, #8
 800312e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f022 0204 	bic.w	r2, r2, #4
 800313e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	691a      	ldr	r2, [r3, #16]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	430a      	orrs	r2, r1
 8003150:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003152:	e023      	b.n	800319c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68b9      	ldr	r1, [r7, #8]
 800315a:	4618      	mov	r0, r3
 800315c:	f000 fbfc 	bl	8003958 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800316e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800317e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	021a      	lsls	r2, r3, #8
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	430a      	orrs	r2, r1
 8003192:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003194:	e002      	b.n	800319c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	75fb      	strb	r3, [r7, #23]
      break;
 800319a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80031a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3718      	adds	r7, #24
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop

080031b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031ba:	2300      	movs	r3, #0
 80031bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d101      	bne.n	80031cc <HAL_TIM_ConfigClockSource+0x1c>
 80031c8:	2302      	movs	r3, #2
 80031ca:	e0b6      	b.n	800333a <HAL_TIM_ConfigClockSource+0x18a>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2202      	movs	r2, #2
 80031d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80031ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68ba      	ldr	r2, [r7, #8]
 80031fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003208:	d03e      	beq.n	8003288 <HAL_TIM_ConfigClockSource+0xd8>
 800320a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800320e:	f200 8087 	bhi.w	8003320 <HAL_TIM_ConfigClockSource+0x170>
 8003212:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003216:	f000 8086 	beq.w	8003326 <HAL_TIM_ConfigClockSource+0x176>
 800321a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800321e:	d87f      	bhi.n	8003320 <HAL_TIM_ConfigClockSource+0x170>
 8003220:	2b70      	cmp	r3, #112	; 0x70
 8003222:	d01a      	beq.n	800325a <HAL_TIM_ConfigClockSource+0xaa>
 8003224:	2b70      	cmp	r3, #112	; 0x70
 8003226:	d87b      	bhi.n	8003320 <HAL_TIM_ConfigClockSource+0x170>
 8003228:	2b60      	cmp	r3, #96	; 0x60
 800322a:	d050      	beq.n	80032ce <HAL_TIM_ConfigClockSource+0x11e>
 800322c:	2b60      	cmp	r3, #96	; 0x60
 800322e:	d877      	bhi.n	8003320 <HAL_TIM_ConfigClockSource+0x170>
 8003230:	2b50      	cmp	r3, #80	; 0x50
 8003232:	d03c      	beq.n	80032ae <HAL_TIM_ConfigClockSource+0xfe>
 8003234:	2b50      	cmp	r3, #80	; 0x50
 8003236:	d873      	bhi.n	8003320 <HAL_TIM_ConfigClockSource+0x170>
 8003238:	2b40      	cmp	r3, #64	; 0x40
 800323a:	d058      	beq.n	80032ee <HAL_TIM_ConfigClockSource+0x13e>
 800323c:	2b40      	cmp	r3, #64	; 0x40
 800323e:	d86f      	bhi.n	8003320 <HAL_TIM_ConfigClockSource+0x170>
 8003240:	2b30      	cmp	r3, #48	; 0x30
 8003242:	d064      	beq.n	800330e <HAL_TIM_ConfigClockSource+0x15e>
 8003244:	2b30      	cmp	r3, #48	; 0x30
 8003246:	d86b      	bhi.n	8003320 <HAL_TIM_ConfigClockSource+0x170>
 8003248:	2b20      	cmp	r3, #32
 800324a:	d060      	beq.n	800330e <HAL_TIM_ConfigClockSource+0x15e>
 800324c:	2b20      	cmp	r3, #32
 800324e:	d867      	bhi.n	8003320 <HAL_TIM_ConfigClockSource+0x170>
 8003250:	2b00      	cmp	r3, #0
 8003252:	d05c      	beq.n	800330e <HAL_TIM_ConfigClockSource+0x15e>
 8003254:	2b10      	cmp	r3, #16
 8003256:	d05a      	beq.n	800330e <HAL_TIM_ConfigClockSource+0x15e>
 8003258:	e062      	b.n	8003320 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6818      	ldr	r0, [r3, #0]
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	6899      	ldr	r1, [r3, #8]
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685a      	ldr	r2, [r3, #4]
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	f000 fc55 	bl	8003b18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800327c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68ba      	ldr	r2, [r7, #8]
 8003284:	609a      	str	r2, [r3, #8]
      break;
 8003286:	e04f      	b.n	8003328 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6818      	ldr	r0, [r3, #0]
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	6899      	ldr	r1, [r3, #8]
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685a      	ldr	r2, [r3, #4]
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	f000 fc3e 	bl	8003b18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	689a      	ldr	r2, [r3, #8]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032aa:	609a      	str	r2, [r3, #8]
      break;
 80032ac:	e03c      	b.n	8003328 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6818      	ldr	r0, [r3, #0]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	6859      	ldr	r1, [r3, #4]
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	461a      	mov	r2, r3
 80032bc:	f000 fbb2 	bl	8003a24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2150      	movs	r1, #80	; 0x50
 80032c6:	4618      	mov	r0, r3
 80032c8:	f000 fc0b 	bl	8003ae2 <TIM_ITRx_SetConfig>
      break;
 80032cc:	e02c      	b.n	8003328 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6818      	ldr	r0, [r3, #0]
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	6859      	ldr	r1, [r3, #4]
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	461a      	mov	r2, r3
 80032dc:	f000 fbd1 	bl	8003a82 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2160      	movs	r1, #96	; 0x60
 80032e6:	4618      	mov	r0, r3
 80032e8:	f000 fbfb 	bl	8003ae2 <TIM_ITRx_SetConfig>
      break;
 80032ec:	e01c      	b.n	8003328 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6818      	ldr	r0, [r3, #0]
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	6859      	ldr	r1, [r3, #4]
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	461a      	mov	r2, r3
 80032fc:	f000 fb92 	bl	8003a24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2140      	movs	r1, #64	; 0x40
 8003306:	4618      	mov	r0, r3
 8003308:	f000 fbeb 	bl	8003ae2 <TIM_ITRx_SetConfig>
      break;
 800330c:	e00c      	b.n	8003328 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4619      	mov	r1, r3
 8003318:	4610      	mov	r0, r2
 800331a:	f000 fbe2 	bl	8003ae2 <TIM_ITRx_SetConfig>
      break;
 800331e:	e003      	b.n	8003328 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	73fb      	strb	r3, [r7, #15]
      break;
 8003324:	e000      	b.n	8003328 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003326:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003338:	7bfb      	ldrb	r3, [r7, #15]
}
 800333a:	4618      	mov	r0, r3
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
	...

08003344 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a40      	ldr	r2, [pc, #256]	; (8003458 <TIM_Base_SetConfig+0x114>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d013      	beq.n	8003384 <TIM_Base_SetConfig+0x40>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003362:	d00f      	beq.n	8003384 <TIM_Base_SetConfig+0x40>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a3d      	ldr	r2, [pc, #244]	; (800345c <TIM_Base_SetConfig+0x118>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d00b      	beq.n	8003384 <TIM_Base_SetConfig+0x40>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a3c      	ldr	r2, [pc, #240]	; (8003460 <TIM_Base_SetConfig+0x11c>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d007      	beq.n	8003384 <TIM_Base_SetConfig+0x40>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a3b      	ldr	r2, [pc, #236]	; (8003464 <TIM_Base_SetConfig+0x120>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d003      	beq.n	8003384 <TIM_Base_SetConfig+0x40>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a3a      	ldr	r2, [pc, #232]	; (8003468 <TIM_Base_SetConfig+0x124>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d108      	bne.n	8003396 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800338a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	4313      	orrs	r3, r2
 8003394:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a2f      	ldr	r2, [pc, #188]	; (8003458 <TIM_Base_SetConfig+0x114>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d01f      	beq.n	80033de <TIM_Base_SetConfig+0x9a>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033a4:	d01b      	beq.n	80033de <TIM_Base_SetConfig+0x9a>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a2c      	ldr	r2, [pc, #176]	; (800345c <TIM_Base_SetConfig+0x118>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d017      	beq.n	80033de <TIM_Base_SetConfig+0x9a>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a2b      	ldr	r2, [pc, #172]	; (8003460 <TIM_Base_SetConfig+0x11c>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d013      	beq.n	80033de <TIM_Base_SetConfig+0x9a>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a2a      	ldr	r2, [pc, #168]	; (8003464 <TIM_Base_SetConfig+0x120>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d00f      	beq.n	80033de <TIM_Base_SetConfig+0x9a>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a29      	ldr	r2, [pc, #164]	; (8003468 <TIM_Base_SetConfig+0x124>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d00b      	beq.n	80033de <TIM_Base_SetConfig+0x9a>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a28      	ldr	r2, [pc, #160]	; (800346c <TIM_Base_SetConfig+0x128>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d007      	beq.n	80033de <TIM_Base_SetConfig+0x9a>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a27      	ldr	r2, [pc, #156]	; (8003470 <TIM_Base_SetConfig+0x12c>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d003      	beq.n	80033de <TIM_Base_SetConfig+0x9a>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a26      	ldr	r2, [pc, #152]	; (8003474 <TIM_Base_SetConfig+0x130>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d108      	bne.n	80033f0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	689a      	ldr	r2, [r3, #8]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a10      	ldr	r2, [pc, #64]	; (8003458 <TIM_Base_SetConfig+0x114>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d00f      	beq.n	800343c <TIM_Base_SetConfig+0xf8>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a12      	ldr	r2, [pc, #72]	; (8003468 <TIM_Base_SetConfig+0x124>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d00b      	beq.n	800343c <TIM_Base_SetConfig+0xf8>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a11      	ldr	r2, [pc, #68]	; (800346c <TIM_Base_SetConfig+0x128>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d007      	beq.n	800343c <TIM_Base_SetConfig+0xf8>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a10      	ldr	r2, [pc, #64]	; (8003470 <TIM_Base_SetConfig+0x12c>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d003      	beq.n	800343c <TIM_Base_SetConfig+0xf8>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a0f      	ldr	r2, [pc, #60]	; (8003474 <TIM_Base_SetConfig+0x130>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d103      	bne.n	8003444 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	691a      	ldr	r2, [r3, #16]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	615a      	str	r2, [r3, #20]
}
 800344a:	bf00      	nop
 800344c:	3714      	adds	r7, #20
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	40012c00 	.word	0x40012c00
 800345c:	40000400 	.word	0x40000400
 8003460:	40000800 	.word	0x40000800
 8003464:	40000c00 	.word	0x40000c00
 8003468:	40013400 	.word	0x40013400
 800346c:	40014000 	.word	0x40014000
 8003470:	40014400 	.word	0x40014400
 8003474:	40014800 	.word	0x40014800

08003478 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003478:	b480      	push	{r7}
 800347a:	b087      	sub	sp, #28
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	f023 0201 	bic.w	r2, r3, #1
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f023 0303 	bic.w	r3, r3, #3
 80034b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	f023 0302 	bic.w	r3, r3, #2
 80034c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	697a      	ldr	r2, [r7, #20]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4a2c      	ldr	r2, [pc, #176]	; (8003584 <TIM_OC1_SetConfig+0x10c>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d00f      	beq.n	80034f8 <TIM_OC1_SetConfig+0x80>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a2b      	ldr	r2, [pc, #172]	; (8003588 <TIM_OC1_SetConfig+0x110>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d00b      	beq.n	80034f8 <TIM_OC1_SetConfig+0x80>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a2a      	ldr	r2, [pc, #168]	; (800358c <TIM_OC1_SetConfig+0x114>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d007      	beq.n	80034f8 <TIM_OC1_SetConfig+0x80>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a29      	ldr	r2, [pc, #164]	; (8003590 <TIM_OC1_SetConfig+0x118>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d003      	beq.n	80034f8 <TIM_OC1_SetConfig+0x80>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a28      	ldr	r2, [pc, #160]	; (8003594 <TIM_OC1_SetConfig+0x11c>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d10c      	bne.n	8003512 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	f023 0308 	bic.w	r3, r3, #8
 80034fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	697a      	ldr	r2, [r7, #20]
 8003506:	4313      	orrs	r3, r2
 8003508:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	f023 0304 	bic.w	r3, r3, #4
 8003510:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a1b      	ldr	r2, [pc, #108]	; (8003584 <TIM_OC1_SetConfig+0x10c>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d00f      	beq.n	800353a <TIM_OC1_SetConfig+0xc2>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a1a      	ldr	r2, [pc, #104]	; (8003588 <TIM_OC1_SetConfig+0x110>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d00b      	beq.n	800353a <TIM_OC1_SetConfig+0xc2>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a19      	ldr	r2, [pc, #100]	; (800358c <TIM_OC1_SetConfig+0x114>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d007      	beq.n	800353a <TIM_OC1_SetConfig+0xc2>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a18      	ldr	r2, [pc, #96]	; (8003590 <TIM_OC1_SetConfig+0x118>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d003      	beq.n	800353a <TIM_OC1_SetConfig+0xc2>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a17      	ldr	r2, [pc, #92]	; (8003594 <TIM_OC1_SetConfig+0x11c>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d111      	bne.n	800355e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003540:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003548:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	4313      	orrs	r3, r2
 8003552:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	4313      	orrs	r3, r2
 800355c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	693a      	ldr	r2, [r7, #16]
 8003562:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	685a      	ldr	r2, [r3, #4]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	697a      	ldr	r2, [r7, #20]
 8003576:	621a      	str	r2, [r3, #32]
}
 8003578:	bf00      	nop
 800357a:	371c      	adds	r7, #28
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr
 8003584:	40012c00 	.word	0x40012c00
 8003588:	40013400 	.word	0x40013400
 800358c:	40014000 	.word	0x40014000
 8003590:	40014400 	.word	0x40014400
 8003594:	40014800 	.word	0x40014800

08003598 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003598:	b480      	push	{r7}
 800359a:	b087      	sub	sp, #28
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a1b      	ldr	r3, [r3, #32]
 80035a6:	f023 0210 	bic.w	r2, r3, #16
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a1b      	ldr	r3, [r3, #32]
 80035b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	021b      	lsls	r3, r3, #8
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	4313      	orrs	r3, r2
 80035de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	f023 0320 	bic.w	r3, r3, #32
 80035e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	011b      	lsls	r3, r3, #4
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a28      	ldr	r2, [pc, #160]	; (8003698 <TIM_OC2_SetConfig+0x100>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d003      	beq.n	8003604 <TIM_OC2_SetConfig+0x6c>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a27      	ldr	r2, [pc, #156]	; (800369c <TIM_OC2_SetConfig+0x104>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d10d      	bne.n	8003620 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800360a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	011b      	lsls	r3, r3, #4
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	4313      	orrs	r3, r2
 8003616:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800361e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4a1d      	ldr	r2, [pc, #116]	; (8003698 <TIM_OC2_SetConfig+0x100>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d00f      	beq.n	8003648 <TIM_OC2_SetConfig+0xb0>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4a1c      	ldr	r2, [pc, #112]	; (800369c <TIM_OC2_SetConfig+0x104>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d00b      	beq.n	8003648 <TIM_OC2_SetConfig+0xb0>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	4a1b      	ldr	r2, [pc, #108]	; (80036a0 <TIM_OC2_SetConfig+0x108>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d007      	beq.n	8003648 <TIM_OC2_SetConfig+0xb0>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4a1a      	ldr	r2, [pc, #104]	; (80036a4 <TIM_OC2_SetConfig+0x10c>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d003      	beq.n	8003648 <TIM_OC2_SetConfig+0xb0>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a19      	ldr	r2, [pc, #100]	; (80036a8 <TIM_OC2_SetConfig+0x110>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d113      	bne.n	8003670 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800364e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003656:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	695b      	ldr	r3, [r3, #20]
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	4313      	orrs	r3, r2
 8003662:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	4313      	orrs	r3, r2
 800366e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	621a      	str	r2, [r3, #32]
}
 800368a:	bf00      	nop
 800368c:	371c      	adds	r7, #28
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	40012c00 	.word	0x40012c00
 800369c:	40013400 	.word	0x40013400
 80036a0:	40014000 	.word	0x40014000
 80036a4:	40014400 	.word	0x40014400
 80036a8:	40014800 	.word	0x40014800

080036ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b087      	sub	sp, #28
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a1b      	ldr	r3, [r3, #32]
 80036ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	69db      	ldr	r3, [r3, #28]
 80036d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f023 0303 	bic.w	r3, r3, #3
 80036e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	021b      	lsls	r3, r3, #8
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	4313      	orrs	r3, r2
 8003704:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a27      	ldr	r2, [pc, #156]	; (80037a8 <TIM_OC3_SetConfig+0xfc>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d003      	beq.n	8003716 <TIM_OC3_SetConfig+0x6a>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a26      	ldr	r2, [pc, #152]	; (80037ac <TIM_OC3_SetConfig+0x100>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d10d      	bne.n	8003732 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800371c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	021b      	lsls	r3, r3, #8
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	4313      	orrs	r3, r2
 8003728:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003730:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a1c      	ldr	r2, [pc, #112]	; (80037a8 <TIM_OC3_SetConfig+0xfc>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d00f      	beq.n	800375a <TIM_OC3_SetConfig+0xae>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a1b      	ldr	r2, [pc, #108]	; (80037ac <TIM_OC3_SetConfig+0x100>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d00b      	beq.n	800375a <TIM_OC3_SetConfig+0xae>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a1a      	ldr	r2, [pc, #104]	; (80037b0 <TIM_OC3_SetConfig+0x104>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d007      	beq.n	800375a <TIM_OC3_SetConfig+0xae>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a19      	ldr	r2, [pc, #100]	; (80037b4 <TIM_OC3_SetConfig+0x108>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d003      	beq.n	800375a <TIM_OC3_SetConfig+0xae>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a18      	ldr	r2, [pc, #96]	; (80037b8 <TIM_OC3_SetConfig+0x10c>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d113      	bne.n	8003782 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003760:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003768:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	011b      	lsls	r3, r3, #4
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	4313      	orrs	r3, r2
 8003774:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	011b      	lsls	r3, r3, #4
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	4313      	orrs	r3, r2
 8003780:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	685a      	ldr	r2, [r3, #4]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	621a      	str	r2, [r3, #32]
}
 800379c:	bf00      	nop
 800379e:	371c      	adds	r7, #28
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr
 80037a8:	40012c00 	.word	0x40012c00
 80037ac:	40013400 	.word	0x40013400
 80037b0:	40014000 	.word	0x40014000
 80037b4:	40014400 	.word	0x40014400
 80037b8:	40014800 	.word	0x40014800

080037bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037bc:	b480      	push	{r7}
 80037be:	b087      	sub	sp, #28
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a1b      	ldr	r3, [r3, #32]
 80037ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a1b      	ldr	r3, [r3, #32]
 80037d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	69db      	ldr	r3, [r3, #28]
 80037e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	021b      	lsls	r3, r3, #8
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	4313      	orrs	r3, r2
 8003802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800380a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	031b      	lsls	r3, r3, #12
 8003812:	693a      	ldr	r2, [r7, #16]
 8003814:	4313      	orrs	r3, r2
 8003816:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a18      	ldr	r2, [pc, #96]	; (800387c <TIM_OC4_SetConfig+0xc0>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d00f      	beq.n	8003840 <TIM_OC4_SetConfig+0x84>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a17      	ldr	r2, [pc, #92]	; (8003880 <TIM_OC4_SetConfig+0xc4>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d00b      	beq.n	8003840 <TIM_OC4_SetConfig+0x84>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a16      	ldr	r2, [pc, #88]	; (8003884 <TIM_OC4_SetConfig+0xc8>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d007      	beq.n	8003840 <TIM_OC4_SetConfig+0x84>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a15      	ldr	r2, [pc, #84]	; (8003888 <TIM_OC4_SetConfig+0xcc>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d003      	beq.n	8003840 <TIM_OC4_SetConfig+0x84>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a14      	ldr	r2, [pc, #80]	; (800388c <TIM_OC4_SetConfig+0xd0>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d109      	bne.n	8003854 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003846:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	695b      	ldr	r3, [r3, #20]
 800384c:	019b      	lsls	r3, r3, #6
 800384e:	697a      	ldr	r2, [r7, #20]
 8003850:	4313      	orrs	r3, r2
 8003852:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685a      	ldr	r2, [r3, #4]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	621a      	str	r2, [r3, #32]
}
 800386e:	bf00      	nop
 8003870:	371c      	adds	r7, #28
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	40012c00 	.word	0x40012c00
 8003880:	40013400 	.word	0x40013400
 8003884:	40014000 	.word	0x40014000
 8003888:	40014400 	.word	0x40014400
 800388c:	40014800 	.word	0x40014800

08003890 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003890:	b480      	push	{r7}
 8003892:	b087      	sub	sp, #28
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80038d4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	041b      	lsls	r3, r3, #16
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	4313      	orrs	r3, r2
 80038e0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a17      	ldr	r2, [pc, #92]	; (8003944 <TIM_OC5_SetConfig+0xb4>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d00f      	beq.n	800390a <TIM_OC5_SetConfig+0x7a>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a16      	ldr	r2, [pc, #88]	; (8003948 <TIM_OC5_SetConfig+0xb8>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d00b      	beq.n	800390a <TIM_OC5_SetConfig+0x7a>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a15      	ldr	r2, [pc, #84]	; (800394c <TIM_OC5_SetConfig+0xbc>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d007      	beq.n	800390a <TIM_OC5_SetConfig+0x7a>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a14      	ldr	r2, [pc, #80]	; (8003950 <TIM_OC5_SetConfig+0xc0>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d003      	beq.n	800390a <TIM_OC5_SetConfig+0x7a>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a13      	ldr	r2, [pc, #76]	; (8003954 <TIM_OC5_SetConfig+0xc4>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d109      	bne.n	800391e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003910:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	021b      	lsls	r3, r3, #8
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	4313      	orrs	r3, r2
 800391c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	697a      	ldr	r2, [r7, #20]
 8003922:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	685a      	ldr	r2, [r3, #4]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	693a      	ldr	r2, [r7, #16]
 8003936:	621a      	str	r2, [r3, #32]
}
 8003938:	bf00      	nop
 800393a:	371c      	adds	r7, #28
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr
 8003944:	40012c00 	.word	0x40012c00
 8003948:	40013400 	.word	0x40013400
 800394c:	40014000 	.word	0x40014000
 8003950:	40014400 	.word	0x40014400
 8003954:	40014800 	.word	0x40014800

08003958 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003958:	b480      	push	{r7}
 800395a:	b087      	sub	sp, #28
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a1b      	ldr	r3, [r3, #32]
 8003972:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800397e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003986:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800398a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	021b      	lsls	r3, r3, #8
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	4313      	orrs	r3, r2
 8003996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800399e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	051b      	lsls	r3, r3, #20
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a18      	ldr	r2, [pc, #96]	; (8003a10 <TIM_OC6_SetConfig+0xb8>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d00f      	beq.n	80039d4 <TIM_OC6_SetConfig+0x7c>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a17      	ldr	r2, [pc, #92]	; (8003a14 <TIM_OC6_SetConfig+0xbc>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d00b      	beq.n	80039d4 <TIM_OC6_SetConfig+0x7c>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a16      	ldr	r2, [pc, #88]	; (8003a18 <TIM_OC6_SetConfig+0xc0>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d007      	beq.n	80039d4 <TIM_OC6_SetConfig+0x7c>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a15      	ldr	r2, [pc, #84]	; (8003a1c <TIM_OC6_SetConfig+0xc4>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d003      	beq.n	80039d4 <TIM_OC6_SetConfig+0x7c>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a14      	ldr	r2, [pc, #80]	; (8003a20 <TIM_OC6_SetConfig+0xc8>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d109      	bne.n	80039e8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	695b      	ldr	r3, [r3, #20]
 80039e0:	029b      	lsls	r3, r3, #10
 80039e2:	697a      	ldr	r2, [r7, #20]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	68fa      	ldr	r2, [r7, #12]
 80039f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685a      	ldr	r2, [r3, #4]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	621a      	str	r2, [r3, #32]
}
 8003a02:	bf00      	nop
 8003a04:	371c      	adds	r7, #28
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	40012c00 	.word	0x40012c00
 8003a14:	40013400 	.word	0x40013400
 8003a18:	40014000 	.word	0x40014000
 8003a1c:	40014400 	.word	0x40014400
 8003a20:	40014800 	.word	0x40014800

08003a24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b087      	sub	sp, #28
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6a1b      	ldr	r3, [r3, #32]
 8003a34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	f023 0201 	bic.w	r2, r3, #1
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	011b      	lsls	r3, r3, #4
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	f023 030a 	bic.w	r3, r3, #10
 8003a60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a62:	697a      	ldr	r2, [r7, #20]
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	621a      	str	r2, [r3, #32]
}
 8003a76:	bf00      	nop
 8003a78:	371c      	adds	r7, #28
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr

08003a82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a82:	b480      	push	{r7}
 8003a84:	b087      	sub	sp, #28
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	60f8      	str	r0, [r7, #12]
 8003a8a:	60b9      	str	r1, [r7, #8]
 8003a8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	f023 0210 	bic.w	r2, r3, #16
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6a1b      	ldr	r3, [r3, #32]
 8003aa4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003aac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	031b      	lsls	r3, r3, #12
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003abe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	011b      	lsls	r3, r3, #4
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	697a      	ldr	r2, [r7, #20]
 8003ace:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	621a      	str	r2, [r3, #32]
}
 8003ad6:	bf00      	nop
 8003ad8:	371c      	adds	r7, #28
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr

08003ae2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	b085      	sub	sp, #20
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
 8003aea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003af8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003afa:	683a      	ldr	r2, [r7, #0]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	f043 0307 	orr.w	r3, r3, #7
 8003b04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	609a      	str	r2, [r3, #8]
}
 8003b0c:	bf00      	nop
 8003b0e:	3714      	adds	r7, #20
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b087      	sub	sp, #28
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]
 8003b24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	021a      	lsls	r2, r3, #8
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	431a      	orrs	r2, r3
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	697a      	ldr	r2, [r7, #20]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	697a      	ldr	r2, [r7, #20]
 8003b4a:	609a      	str	r2, [r3, #8]
}
 8003b4c:	bf00      	nop
 8003b4e:	371c      	adds	r7, #28
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b087      	sub	sp, #28
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	f003 031f 	and.w	r3, r3, #31
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6a1a      	ldr	r2, [r3, #32]
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	43db      	mvns	r3, r3
 8003b7a:	401a      	ands	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6a1a      	ldr	r2, [r3, #32]
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	f003 031f 	and.w	r3, r3, #31
 8003b8a:	6879      	ldr	r1, [r7, #4]
 8003b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b90:	431a      	orrs	r2, r3
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	621a      	str	r2, [r3, #32]
}
 8003b96:	bf00      	nop
 8003b98:	371c      	adds	r7, #28
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
	...

08003ba4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d101      	bne.n	8003bbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bb8:	2302      	movs	r3, #2
 8003bba:	e068      	b.n	8003c8e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2202      	movs	r2, #2
 8003bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a2e      	ldr	r2, [pc, #184]	; (8003c9c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d004      	beq.n	8003bf0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a2d      	ldr	r2, [pc, #180]	; (8003ca0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d108      	bne.n	8003c02 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003bf6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c08:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a1e      	ldr	r2, [pc, #120]	; (8003c9c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d01d      	beq.n	8003c62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c2e:	d018      	beq.n	8003c62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a1b      	ldr	r2, [pc, #108]	; (8003ca4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d013      	beq.n	8003c62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a1a      	ldr	r2, [pc, #104]	; (8003ca8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d00e      	beq.n	8003c62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a18      	ldr	r2, [pc, #96]	; (8003cac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d009      	beq.n	8003c62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a13      	ldr	r2, [pc, #76]	; (8003ca0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d004      	beq.n	8003c62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a14      	ldr	r2, [pc, #80]	; (8003cb0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d10c      	bne.n	8003c7c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	68ba      	ldr	r2, [r7, #8]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68ba      	ldr	r2, [r7, #8]
 8003c7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3714      	adds	r7, #20
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	40012c00 	.word	0x40012c00
 8003ca0:	40013400 	.word	0x40013400
 8003ca4:	40000400 	.word	0x40000400
 8003ca8:	40000800 	.word	0x40000800
 8003cac:	40000c00 	.word	0x40000c00
 8003cb0:	40014000 	.word	0x40014000

08003cb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d101      	bne.n	8003cc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e042      	b.n	8003d4c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d106      	bne.n	8003cde <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f7fc fe2b 	bl	8000934 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2224      	movs	r2, #36	; 0x24
 8003ce2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f022 0201 	bic.w	r2, r2, #1
 8003cf4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 f998 	bl	800402c <UART_SetConfig>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d101      	bne.n	8003d06 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e022      	b.n	8003d4c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d002      	beq.n	8003d14 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 fc88 	bl	8004624 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	685a      	ldr	r2, [r3, #4]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	689a      	ldr	r2, [r3, #8]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f042 0201 	orr.w	r2, r2, #1
 8003d42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f000 fd0f 	bl	8004768 <UART_CheckIdleState>
 8003d4a:	4603      	mov	r3, r0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3708      	adds	r7, #8
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b08a      	sub	sp, #40	; 0x28
 8003d58:	af02      	add	r7, sp, #8
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	603b      	str	r3, [r7, #0]
 8003d60:	4613      	mov	r3, r2
 8003d62:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d6a:	2b20      	cmp	r3, #32
 8003d6c:	f040 8084 	bne.w	8003e78 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d002      	beq.n	8003d7c <HAL_UART_Transmit+0x28>
 8003d76:	88fb      	ldrh	r3, [r7, #6]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d101      	bne.n	8003d80 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e07c      	b.n	8003e7a <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d101      	bne.n	8003d8e <HAL_UART_Transmit+0x3a>
 8003d8a:	2302      	movs	r3, #2
 8003d8c:	e075      	b.n	8003e7a <HAL_UART_Transmit+0x126>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2221      	movs	r2, #33	; 0x21
 8003da2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003da6:	f7fc ffe9 	bl	8000d7c <HAL_GetTick>
 8003daa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	88fa      	ldrh	r2, [r7, #6]
 8003db0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	88fa      	ldrh	r2, [r7, #6]
 8003db8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dc4:	d108      	bne.n	8003dd8 <HAL_UART_Transmit+0x84>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d104      	bne.n	8003dd8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	61bb      	str	r3, [r7, #24]
 8003dd6:	e003      	b.n	8003de0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003de8:	e02d      	b.n	8003e46 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	9300      	str	r3, [sp, #0]
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	2200      	movs	r2, #0
 8003df2:	2180      	movs	r1, #128	; 0x80
 8003df4:	68f8      	ldr	r0, [r7, #12]
 8003df6:	f000 fd02 	bl	80047fe <UART_WaitOnFlagUntilTimeout>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d001      	beq.n	8003e04 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e03a      	b.n	8003e7a <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d10b      	bne.n	8003e22 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	881a      	ldrh	r2, [r3, #0]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e16:	b292      	uxth	r2, r2
 8003e18:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	3302      	adds	r3, #2
 8003e1e:	61bb      	str	r3, [r7, #24]
 8003e20:	e008      	b.n	8003e34 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	781a      	ldrb	r2, [r3, #0]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	b292      	uxth	r2, r2
 8003e2c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	3301      	adds	r3, #1
 8003e32:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	b29a      	uxth	r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1cb      	bne.n	8003dea <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	9300      	str	r3, [sp, #0]
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	2140      	movs	r1, #64	; 0x40
 8003e5c:	68f8      	ldr	r0, [r7, #12]
 8003e5e:	f000 fcce 	bl	80047fe <UART_WaitOnFlagUntilTimeout>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d001      	beq.n	8003e6c <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e006      	b.n	8003e7a <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2220      	movs	r2, #32
 8003e70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003e74:	2300      	movs	r3, #0
 8003e76:	e000      	b.n	8003e7a <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003e78:	2302      	movs	r3, #2
  }
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3720      	adds	r7, #32
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b08a      	sub	sp, #40	; 0x28
 8003e86:	af02      	add	r7, sp, #8
 8003e88:	60f8      	str	r0, [r7, #12]
 8003e8a:	60b9      	str	r1, [r7, #8]
 8003e8c:	603b      	str	r3, [r7, #0]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e98:	2b20      	cmp	r3, #32
 8003e9a:	f040 80c1 	bne.w	8004020 <HAL_UART_Receive+0x19e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d002      	beq.n	8003eaa <HAL_UART_Receive+0x28>
 8003ea4:	88fb      	ldrh	r3, [r7, #6]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d101      	bne.n	8003eae <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e0b9      	b.n	8004022 <HAL_UART_Receive+0x1a0>
    }

    __HAL_LOCK(huart);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d101      	bne.n	8003ebc <HAL_UART_Receive+0x3a>
 8003eb8:	2302      	movs	r3, #2
 8003eba:	e0b2      	b.n	8004022 <HAL_UART_Receive+0x1a0>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2222      	movs	r2, #34	; 0x22
 8003ed0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003eda:	f7fc ff4f 	bl	8000d7c <HAL_GetTick>
 8003ede:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	88fa      	ldrh	r2, [r7, #6]
 8003ee4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	88fa      	ldrh	r2, [r7, #6]
 8003eec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ef8:	d10e      	bne.n	8003f18 <HAL_UART_Receive+0x96>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d105      	bne.n	8003f0e <HAL_UART_Receive+0x8c>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003f08:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003f0c:	e02d      	b.n	8003f6a <HAL_UART_Receive+0xe8>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	22ff      	movs	r2, #255	; 0xff
 8003f12:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003f16:	e028      	b.n	8003f6a <HAL_UART_Receive+0xe8>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d10d      	bne.n	8003f3c <HAL_UART_Receive+0xba>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d104      	bne.n	8003f32 <HAL_UART_Receive+0xb0>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	22ff      	movs	r2, #255	; 0xff
 8003f2c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003f30:	e01b      	b.n	8003f6a <HAL_UART_Receive+0xe8>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	227f      	movs	r2, #127	; 0x7f
 8003f36:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003f3a:	e016      	b.n	8003f6a <HAL_UART_Receive+0xe8>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f44:	d10d      	bne.n	8003f62 <HAL_UART_Receive+0xe0>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d104      	bne.n	8003f58 <HAL_UART_Receive+0xd6>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	227f      	movs	r2, #127	; 0x7f
 8003f52:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003f56:	e008      	b.n	8003f6a <HAL_UART_Receive+0xe8>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	223f      	movs	r2, #63	; 0x3f
 8003f5c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003f60:	e003      	b.n	8003f6a <HAL_UART_Receive+0xe8>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003f70:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f7a:	d108      	bne.n	8003f8e <HAL_UART_Receive+0x10c>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d104      	bne.n	8003f8e <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8003f84:	2300      	movs	r3, #0
 8003f86:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	61bb      	str	r3, [r7, #24]
 8003f8c:	e003      	b.n	8003f96 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f92:	2300      	movs	r3, #0
 8003f94:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003f9e:	e033      	b.n	8004008 <HAL_UART_Receive+0x186>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	9300      	str	r3, [sp, #0]
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	2120      	movs	r1, #32
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	f000 fc27 	bl	80047fe <UART_WaitOnFlagUntilTimeout>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e033      	b.n	8004022 <HAL_UART_Receive+0x1a0>
      }
      if (pdata8bits == NULL)
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d10c      	bne.n	8003fda <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	8a7b      	ldrh	r3, [r7, #18]
 8003fca:	4013      	ands	r3, r2
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	3302      	adds	r3, #2
 8003fd6:	61bb      	str	r3, [r7, #24]
 8003fd8:	e00d      	b.n	8003ff6 <HAL_UART_Receive+0x174>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	b2da      	uxtb	r2, r3
 8003fe4:	8a7b      	ldrh	r3, [r7, #18]
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	4013      	ands	r3, r2
 8003fea:	b2da      	uxtb	r2, r3
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	3b01      	subs	r3, #1
 8004000:	b29a      	uxth	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800400e:	b29b      	uxth	r3, r3
 8004010:	2b00      	cmp	r3, #0
 8004012:	d1c5      	bne.n	8003fa0 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2220      	movs	r2, #32
 8004018:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800401c:	2300      	movs	r3, #0
 800401e:	e000      	b.n	8004022 <HAL_UART_Receive+0x1a0>
  }
  else
  {
    return HAL_BUSY;
 8004020:	2302      	movs	r3, #2
  }
}
 8004022:	4618      	mov	r0, r3
 8004024:	3720      	adds	r7, #32
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
	...

0800402c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800402c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004030:	b08c      	sub	sp, #48	; 0x30
 8004032:	af00      	add	r7, sp, #0
 8004034:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004036:	2300      	movs	r3, #0
 8004038:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	689a      	ldr	r2, [r3, #8]
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	431a      	orrs	r2, r3
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	431a      	orrs	r2, r3
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	69db      	ldr	r3, [r3, #28]
 8004050:	4313      	orrs	r3, r2
 8004052:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	4baa      	ldr	r3, [pc, #680]	; (8004304 <UART_SetConfig+0x2d8>)
 800405c:	4013      	ands	r3, r2
 800405e:	697a      	ldr	r2, [r7, #20]
 8004060:	6812      	ldr	r2, [r2, #0]
 8004062:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004064:	430b      	orrs	r3, r1
 8004066:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	68da      	ldr	r2, [r3, #12]
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	430a      	orrs	r2, r1
 800407c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a9f      	ldr	r2, [pc, #636]	; (8004308 <UART_SetConfig+0x2dc>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d004      	beq.n	8004098 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004094:	4313      	orrs	r3, r2
 8004096:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80040a2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	6812      	ldr	r2, [r2, #0]
 80040aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040ac:	430b      	orrs	r3, r1
 80040ae:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b6:	f023 010f 	bic.w	r1, r3, #15
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	430a      	orrs	r2, r1
 80040c4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a90      	ldr	r2, [pc, #576]	; (800430c <UART_SetConfig+0x2e0>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d125      	bne.n	800411c <UART_SetConfig+0xf0>
 80040d0:	4b8f      	ldr	r3, [pc, #572]	; (8004310 <UART_SetConfig+0x2e4>)
 80040d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d6:	f003 0303 	and.w	r3, r3, #3
 80040da:	2b03      	cmp	r3, #3
 80040dc:	d81a      	bhi.n	8004114 <UART_SetConfig+0xe8>
 80040de:	a201      	add	r2, pc, #4	; (adr r2, 80040e4 <UART_SetConfig+0xb8>)
 80040e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e4:	080040f5 	.word	0x080040f5
 80040e8:	08004105 	.word	0x08004105
 80040ec:	080040fd 	.word	0x080040fd
 80040f0:	0800410d 	.word	0x0800410d
 80040f4:	2301      	movs	r3, #1
 80040f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040fa:	e116      	b.n	800432a <UART_SetConfig+0x2fe>
 80040fc:	2302      	movs	r3, #2
 80040fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004102:	e112      	b.n	800432a <UART_SetConfig+0x2fe>
 8004104:	2304      	movs	r3, #4
 8004106:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800410a:	e10e      	b.n	800432a <UART_SetConfig+0x2fe>
 800410c:	2308      	movs	r3, #8
 800410e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004112:	e10a      	b.n	800432a <UART_SetConfig+0x2fe>
 8004114:	2310      	movs	r3, #16
 8004116:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800411a:	e106      	b.n	800432a <UART_SetConfig+0x2fe>
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a7c      	ldr	r2, [pc, #496]	; (8004314 <UART_SetConfig+0x2e8>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d138      	bne.n	8004198 <UART_SetConfig+0x16c>
 8004126:	4b7a      	ldr	r3, [pc, #488]	; (8004310 <UART_SetConfig+0x2e4>)
 8004128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800412c:	f003 030c 	and.w	r3, r3, #12
 8004130:	2b0c      	cmp	r3, #12
 8004132:	d82d      	bhi.n	8004190 <UART_SetConfig+0x164>
 8004134:	a201      	add	r2, pc, #4	; (adr r2, 800413c <UART_SetConfig+0x110>)
 8004136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800413a:	bf00      	nop
 800413c:	08004171 	.word	0x08004171
 8004140:	08004191 	.word	0x08004191
 8004144:	08004191 	.word	0x08004191
 8004148:	08004191 	.word	0x08004191
 800414c:	08004181 	.word	0x08004181
 8004150:	08004191 	.word	0x08004191
 8004154:	08004191 	.word	0x08004191
 8004158:	08004191 	.word	0x08004191
 800415c:	08004179 	.word	0x08004179
 8004160:	08004191 	.word	0x08004191
 8004164:	08004191 	.word	0x08004191
 8004168:	08004191 	.word	0x08004191
 800416c:	08004189 	.word	0x08004189
 8004170:	2300      	movs	r3, #0
 8004172:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004176:	e0d8      	b.n	800432a <UART_SetConfig+0x2fe>
 8004178:	2302      	movs	r3, #2
 800417a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800417e:	e0d4      	b.n	800432a <UART_SetConfig+0x2fe>
 8004180:	2304      	movs	r3, #4
 8004182:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004186:	e0d0      	b.n	800432a <UART_SetConfig+0x2fe>
 8004188:	2308      	movs	r3, #8
 800418a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800418e:	e0cc      	b.n	800432a <UART_SetConfig+0x2fe>
 8004190:	2310      	movs	r3, #16
 8004192:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004196:	e0c8      	b.n	800432a <UART_SetConfig+0x2fe>
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a5e      	ldr	r2, [pc, #376]	; (8004318 <UART_SetConfig+0x2ec>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d125      	bne.n	80041ee <UART_SetConfig+0x1c2>
 80041a2:	4b5b      	ldr	r3, [pc, #364]	; (8004310 <UART_SetConfig+0x2e4>)
 80041a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80041ac:	2b30      	cmp	r3, #48	; 0x30
 80041ae:	d016      	beq.n	80041de <UART_SetConfig+0x1b2>
 80041b0:	2b30      	cmp	r3, #48	; 0x30
 80041b2:	d818      	bhi.n	80041e6 <UART_SetConfig+0x1ba>
 80041b4:	2b20      	cmp	r3, #32
 80041b6:	d00a      	beq.n	80041ce <UART_SetConfig+0x1a2>
 80041b8:	2b20      	cmp	r3, #32
 80041ba:	d814      	bhi.n	80041e6 <UART_SetConfig+0x1ba>
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d002      	beq.n	80041c6 <UART_SetConfig+0x19a>
 80041c0:	2b10      	cmp	r3, #16
 80041c2:	d008      	beq.n	80041d6 <UART_SetConfig+0x1aa>
 80041c4:	e00f      	b.n	80041e6 <UART_SetConfig+0x1ba>
 80041c6:	2300      	movs	r3, #0
 80041c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041cc:	e0ad      	b.n	800432a <UART_SetConfig+0x2fe>
 80041ce:	2302      	movs	r3, #2
 80041d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041d4:	e0a9      	b.n	800432a <UART_SetConfig+0x2fe>
 80041d6:	2304      	movs	r3, #4
 80041d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041dc:	e0a5      	b.n	800432a <UART_SetConfig+0x2fe>
 80041de:	2308      	movs	r3, #8
 80041e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041e4:	e0a1      	b.n	800432a <UART_SetConfig+0x2fe>
 80041e6:	2310      	movs	r3, #16
 80041e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041ec:	e09d      	b.n	800432a <UART_SetConfig+0x2fe>
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a4a      	ldr	r2, [pc, #296]	; (800431c <UART_SetConfig+0x2f0>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d125      	bne.n	8004244 <UART_SetConfig+0x218>
 80041f8:	4b45      	ldr	r3, [pc, #276]	; (8004310 <UART_SetConfig+0x2e4>)
 80041fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041fe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004202:	2bc0      	cmp	r3, #192	; 0xc0
 8004204:	d016      	beq.n	8004234 <UART_SetConfig+0x208>
 8004206:	2bc0      	cmp	r3, #192	; 0xc0
 8004208:	d818      	bhi.n	800423c <UART_SetConfig+0x210>
 800420a:	2b80      	cmp	r3, #128	; 0x80
 800420c:	d00a      	beq.n	8004224 <UART_SetConfig+0x1f8>
 800420e:	2b80      	cmp	r3, #128	; 0x80
 8004210:	d814      	bhi.n	800423c <UART_SetConfig+0x210>
 8004212:	2b00      	cmp	r3, #0
 8004214:	d002      	beq.n	800421c <UART_SetConfig+0x1f0>
 8004216:	2b40      	cmp	r3, #64	; 0x40
 8004218:	d008      	beq.n	800422c <UART_SetConfig+0x200>
 800421a:	e00f      	b.n	800423c <UART_SetConfig+0x210>
 800421c:	2300      	movs	r3, #0
 800421e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004222:	e082      	b.n	800432a <UART_SetConfig+0x2fe>
 8004224:	2302      	movs	r3, #2
 8004226:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800422a:	e07e      	b.n	800432a <UART_SetConfig+0x2fe>
 800422c:	2304      	movs	r3, #4
 800422e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004232:	e07a      	b.n	800432a <UART_SetConfig+0x2fe>
 8004234:	2308      	movs	r3, #8
 8004236:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800423a:	e076      	b.n	800432a <UART_SetConfig+0x2fe>
 800423c:	2310      	movs	r3, #16
 800423e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004242:	e072      	b.n	800432a <UART_SetConfig+0x2fe>
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a35      	ldr	r2, [pc, #212]	; (8004320 <UART_SetConfig+0x2f4>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d12a      	bne.n	80042a4 <UART_SetConfig+0x278>
 800424e:	4b30      	ldr	r3, [pc, #192]	; (8004310 <UART_SetConfig+0x2e4>)
 8004250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004254:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004258:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800425c:	d01a      	beq.n	8004294 <UART_SetConfig+0x268>
 800425e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004262:	d81b      	bhi.n	800429c <UART_SetConfig+0x270>
 8004264:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004268:	d00c      	beq.n	8004284 <UART_SetConfig+0x258>
 800426a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800426e:	d815      	bhi.n	800429c <UART_SetConfig+0x270>
 8004270:	2b00      	cmp	r3, #0
 8004272:	d003      	beq.n	800427c <UART_SetConfig+0x250>
 8004274:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004278:	d008      	beq.n	800428c <UART_SetConfig+0x260>
 800427a:	e00f      	b.n	800429c <UART_SetConfig+0x270>
 800427c:	2300      	movs	r3, #0
 800427e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004282:	e052      	b.n	800432a <UART_SetConfig+0x2fe>
 8004284:	2302      	movs	r3, #2
 8004286:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800428a:	e04e      	b.n	800432a <UART_SetConfig+0x2fe>
 800428c:	2304      	movs	r3, #4
 800428e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004292:	e04a      	b.n	800432a <UART_SetConfig+0x2fe>
 8004294:	2308      	movs	r3, #8
 8004296:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800429a:	e046      	b.n	800432a <UART_SetConfig+0x2fe>
 800429c:	2310      	movs	r3, #16
 800429e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042a2:	e042      	b.n	800432a <UART_SetConfig+0x2fe>
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a17      	ldr	r2, [pc, #92]	; (8004308 <UART_SetConfig+0x2dc>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d13a      	bne.n	8004324 <UART_SetConfig+0x2f8>
 80042ae:	4b18      	ldr	r3, [pc, #96]	; (8004310 <UART_SetConfig+0x2e4>)
 80042b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80042b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042bc:	d01a      	beq.n	80042f4 <UART_SetConfig+0x2c8>
 80042be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042c2:	d81b      	bhi.n	80042fc <UART_SetConfig+0x2d0>
 80042c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042c8:	d00c      	beq.n	80042e4 <UART_SetConfig+0x2b8>
 80042ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042ce:	d815      	bhi.n	80042fc <UART_SetConfig+0x2d0>
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d003      	beq.n	80042dc <UART_SetConfig+0x2b0>
 80042d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042d8:	d008      	beq.n	80042ec <UART_SetConfig+0x2c0>
 80042da:	e00f      	b.n	80042fc <UART_SetConfig+0x2d0>
 80042dc:	2300      	movs	r3, #0
 80042de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042e2:	e022      	b.n	800432a <UART_SetConfig+0x2fe>
 80042e4:	2302      	movs	r3, #2
 80042e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042ea:	e01e      	b.n	800432a <UART_SetConfig+0x2fe>
 80042ec:	2304      	movs	r3, #4
 80042ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042f2:	e01a      	b.n	800432a <UART_SetConfig+0x2fe>
 80042f4:	2308      	movs	r3, #8
 80042f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042fa:	e016      	b.n	800432a <UART_SetConfig+0x2fe>
 80042fc:	2310      	movs	r3, #16
 80042fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004302:	e012      	b.n	800432a <UART_SetConfig+0x2fe>
 8004304:	cfff69f3 	.word	0xcfff69f3
 8004308:	40008000 	.word	0x40008000
 800430c:	40013800 	.word	0x40013800
 8004310:	40021000 	.word	0x40021000
 8004314:	40004400 	.word	0x40004400
 8004318:	40004800 	.word	0x40004800
 800431c:	40004c00 	.word	0x40004c00
 8004320:	40005000 	.word	0x40005000
 8004324:	2310      	movs	r3, #16
 8004326:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4aae      	ldr	r2, [pc, #696]	; (80045e8 <UART_SetConfig+0x5bc>)
 8004330:	4293      	cmp	r3, r2
 8004332:	f040 8097 	bne.w	8004464 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004336:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800433a:	2b08      	cmp	r3, #8
 800433c:	d823      	bhi.n	8004386 <UART_SetConfig+0x35a>
 800433e:	a201      	add	r2, pc, #4	; (adr r2, 8004344 <UART_SetConfig+0x318>)
 8004340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004344:	08004369 	.word	0x08004369
 8004348:	08004387 	.word	0x08004387
 800434c:	08004371 	.word	0x08004371
 8004350:	08004387 	.word	0x08004387
 8004354:	08004377 	.word	0x08004377
 8004358:	08004387 	.word	0x08004387
 800435c:	08004387 	.word	0x08004387
 8004360:	08004387 	.word	0x08004387
 8004364:	0800437f 	.word	0x0800437f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004368:	f7fd fe4c 	bl	8002004 <HAL_RCC_GetPCLK1Freq>
 800436c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800436e:	e010      	b.n	8004392 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004370:	4b9e      	ldr	r3, [pc, #632]	; (80045ec <UART_SetConfig+0x5c0>)
 8004372:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004374:	e00d      	b.n	8004392 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004376:	f7fd fdad 	bl	8001ed4 <HAL_RCC_GetSysClockFreq>
 800437a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800437c:	e009      	b.n	8004392 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800437e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004382:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004384:	e005      	b.n	8004392 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004386:	2300      	movs	r3, #0
 8004388:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004390:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004394:	2b00      	cmp	r3, #0
 8004396:	f000 8130 	beq.w	80045fa <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439e:	4a94      	ldr	r2, [pc, #592]	; (80045f0 <UART_SetConfig+0x5c4>)
 80043a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043a4:	461a      	mov	r2, r3
 80043a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80043ac:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	685a      	ldr	r2, [r3, #4]
 80043b2:	4613      	mov	r3, r2
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	4413      	add	r3, r2
 80043b8:	69ba      	ldr	r2, [r7, #24]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d305      	bcc.n	80043ca <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80043c4:	69ba      	ldr	r2, [r7, #24]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d903      	bls.n	80043d2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80043d0:	e113      	b.n	80045fa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d4:	2200      	movs	r2, #0
 80043d6:	60bb      	str	r3, [r7, #8]
 80043d8:	60fa      	str	r2, [r7, #12]
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043de:	4a84      	ldr	r2, [pc, #528]	; (80045f0 <UART_SetConfig+0x5c4>)
 80043e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	2200      	movs	r2, #0
 80043e8:	603b      	str	r3, [r7, #0]
 80043ea:	607a      	str	r2, [r7, #4]
 80043ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80043f4:	f7fb ff02 	bl	80001fc <__aeabi_uldivmod>
 80043f8:	4602      	mov	r2, r0
 80043fa:	460b      	mov	r3, r1
 80043fc:	4610      	mov	r0, r2
 80043fe:	4619      	mov	r1, r3
 8004400:	f04f 0200 	mov.w	r2, #0
 8004404:	f04f 0300 	mov.w	r3, #0
 8004408:	020b      	lsls	r3, r1, #8
 800440a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800440e:	0202      	lsls	r2, r0, #8
 8004410:	6979      	ldr	r1, [r7, #20]
 8004412:	6849      	ldr	r1, [r1, #4]
 8004414:	0849      	lsrs	r1, r1, #1
 8004416:	2000      	movs	r0, #0
 8004418:	460c      	mov	r4, r1
 800441a:	4605      	mov	r5, r0
 800441c:	eb12 0804 	adds.w	r8, r2, r4
 8004420:	eb43 0905 	adc.w	r9, r3, r5
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	469a      	mov	sl, r3
 800442c:	4693      	mov	fp, r2
 800442e:	4652      	mov	r2, sl
 8004430:	465b      	mov	r3, fp
 8004432:	4640      	mov	r0, r8
 8004434:	4649      	mov	r1, r9
 8004436:	f7fb fee1 	bl	80001fc <__aeabi_uldivmod>
 800443a:	4602      	mov	r2, r0
 800443c:	460b      	mov	r3, r1
 800443e:	4613      	mov	r3, r2
 8004440:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004442:	6a3b      	ldr	r3, [r7, #32]
 8004444:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004448:	d308      	bcc.n	800445c <UART_SetConfig+0x430>
 800444a:	6a3b      	ldr	r3, [r7, #32]
 800444c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004450:	d204      	bcs.n	800445c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	6a3a      	ldr	r2, [r7, #32]
 8004458:	60da      	str	r2, [r3, #12]
 800445a:	e0ce      	b.n	80045fa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004462:	e0ca      	b.n	80045fa <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	69db      	ldr	r3, [r3, #28]
 8004468:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800446c:	d166      	bne.n	800453c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800446e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004472:	2b08      	cmp	r3, #8
 8004474:	d827      	bhi.n	80044c6 <UART_SetConfig+0x49a>
 8004476:	a201      	add	r2, pc, #4	; (adr r2, 800447c <UART_SetConfig+0x450>)
 8004478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800447c:	080044a1 	.word	0x080044a1
 8004480:	080044a9 	.word	0x080044a9
 8004484:	080044b1 	.word	0x080044b1
 8004488:	080044c7 	.word	0x080044c7
 800448c:	080044b7 	.word	0x080044b7
 8004490:	080044c7 	.word	0x080044c7
 8004494:	080044c7 	.word	0x080044c7
 8004498:	080044c7 	.word	0x080044c7
 800449c:	080044bf 	.word	0x080044bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044a0:	f7fd fdb0 	bl	8002004 <HAL_RCC_GetPCLK1Freq>
 80044a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80044a6:	e014      	b.n	80044d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044a8:	f7fd fdc2 	bl	8002030 <HAL_RCC_GetPCLK2Freq>
 80044ac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80044ae:	e010      	b.n	80044d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044b0:	4b4e      	ldr	r3, [pc, #312]	; (80045ec <UART_SetConfig+0x5c0>)
 80044b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80044b4:	e00d      	b.n	80044d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044b6:	f7fd fd0d 	bl	8001ed4 <HAL_RCC_GetSysClockFreq>
 80044ba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80044bc:	e009      	b.n	80044d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80044c4:	e005      	b.n	80044d2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80044c6:	2300      	movs	r3, #0
 80044c8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80044d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f000 8090 	beq.w	80045fa <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044de:	4a44      	ldr	r2, [pc, #272]	; (80045f0 <UART_SetConfig+0x5c4>)
 80044e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044e4:	461a      	mov	r2, r3
 80044e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80044ec:	005a      	lsls	r2, r3, #1
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	085b      	lsrs	r3, r3, #1
 80044f4:	441a      	add	r2, r3
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80044fe:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004500:	6a3b      	ldr	r3, [r7, #32]
 8004502:	2b0f      	cmp	r3, #15
 8004504:	d916      	bls.n	8004534 <UART_SetConfig+0x508>
 8004506:	6a3b      	ldr	r3, [r7, #32]
 8004508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800450c:	d212      	bcs.n	8004534 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800450e:	6a3b      	ldr	r3, [r7, #32]
 8004510:	b29b      	uxth	r3, r3
 8004512:	f023 030f 	bic.w	r3, r3, #15
 8004516:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004518:	6a3b      	ldr	r3, [r7, #32]
 800451a:	085b      	lsrs	r3, r3, #1
 800451c:	b29b      	uxth	r3, r3
 800451e:	f003 0307 	and.w	r3, r3, #7
 8004522:	b29a      	uxth	r2, r3
 8004524:	8bfb      	ldrh	r3, [r7, #30]
 8004526:	4313      	orrs	r3, r2
 8004528:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	8bfa      	ldrh	r2, [r7, #30]
 8004530:	60da      	str	r2, [r3, #12]
 8004532:	e062      	b.n	80045fa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800453a:	e05e      	b.n	80045fa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800453c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004540:	2b08      	cmp	r3, #8
 8004542:	d828      	bhi.n	8004596 <UART_SetConfig+0x56a>
 8004544:	a201      	add	r2, pc, #4	; (adr r2, 800454c <UART_SetConfig+0x520>)
 8004546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800454a:	bf00      	nop
 800454c:	08004571 	.word	0x08004571
 8004550:	08004579 	.word	0x08004579
 8004554:	08004581 	.word	0x08004581
 8004558:	08004597 	.word	0x08004597
 800455c:	08004587 	.word	0x08004587
 8004560:	08004597 	.word	0x08004597
 8004564:	08004597 	.word	0x08004597
 8004568:	08004597 	.word	0x08004597
 800456c:	0800458f 	.word	0x0800458f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004570:	f7fd fd48 	bl	8002004 <HAL_RCC_GetPCLK1Freq>
 8004574:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004576:	e014      	b.n	80045a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004578:	f7fd fd5a 	bl	8002030 <HAL_RCC_GetPCLK2Freq>
 800457c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800457e:	e010      	b.n	80045a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004580:	4b1a      	ldr	r3, [pc, #104]	; (80045ec <UART_SetConfig+0x5c0>)
 8004582:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004584:	e00d      	b.n	80045a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004586:	f7fd fca5 	bl	8001ed4 <HAL_RCC_GetSysClockFreq>
 800458a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800458c:	e009      	b.n	80045a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800458e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004592:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004594:	e005      	b.n	80045a2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004596:	2300      	movs	r3, #0
 8004598:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80045a0:	bf00      	nop
    }

    if (pclk != 0U)
 80045a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d028      	beq.n	80045fa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ac:	4a10      	ldr	r2, [pc, #64]	; (80045f0 <UART_SetConfig+0x5c4>)
 80045ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045b2:	461a      	mov	r2, r3
 80045b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	085b      	lsrs	r3, r3, #1
 80045c0:	441a      	add	r2, r3
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ca:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045cc:	6a3b      	ldr	r3, [r7, #32]
 80045ce:	2b0f      	cmp	r3, #15
 80045d0:	d910      	bls.n	80045f4 <UART_SetConfig+0x5c8>
 80045d2:	6a3b      	ldr	r3, [r7, #32]
 80045d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045d8:	d20c      	bcs.n	80045f4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80045da:	6a3b      	ldr	r3, [r7, #32]
 80045dc:	b29a      	uxth	r2, r3
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	60da      	str	r2, [r3, #12]
 80045e4:	e009      	b.n	80045fa <UART_SetConfig+0x5ce>
 80045e6:	bf00      	nop
 80045e8:	40008000 	.word	0x40008000
 80045ec:	00f42400 	.word	0x00f42400
 80045f0:	080056ac 	.word	0x080056ac
      }
      else
      {
        ret = HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	2201      	movs	r2, #1
 80045fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	2201      	movs	r2, #1
 8004606:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	2200      	movs	r2, #0
 800460e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	2200      	movs	r2, #0
 8004614:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004616:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800461a:	4618      	mov	r0, r3
 800461c:	3730      	adds	r7, #48	; 0x30
 800461e:	46bd      	mov	sp, r7
 8004620:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004624 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004630:	f003 0301 	and.w	r3, r3, #1
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00a      	beq.n	800464e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	430a      	orrs	r2, r1
 800464c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00a      	beq.n	8004670 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	430a      	orrs	r2, r1
 800466e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004674:	f003 0304 	and.w	r3, r3, #4
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00a      	beq.n	8004692 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	430a      	orrs	r2, r1
 8004690:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004696:	f003 0308 	and.w	r3, r3, #8
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00a      	beq.n	80046b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	430a      	orrs	r2, r1
 80046b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b8:	f003 0310 	and.w	r3, r3, #16
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00a      	beq.n	80046d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	430a      	orrs	r2, r1
 80046d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046da:	f003 0320 	and.w	r3, r3, #32
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00a      	beq.n	80046f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	430a      	orrs	r2, r1
 80046f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004700:	2b00      	cmp	r3, #0
 8004702:	d01a      	beq.n	800473a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	430a      	orrs	r2, r1
 8004718:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800471e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004722:	d10a      	bne.n	800473a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	430a      	orrs	r2, r1
 8004738:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00a      	beq.n	800475c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	430a      	orrs	r2, r1
 800475a:	605a      	str	r2, [r3, #4]
  }
}
 800475c:	bf00      	nop
 800475e:	370c      	adds	r7, #12
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b086      	sub	sp, #24
 800476c:	af02      	add	r7, sp, #8
 800476e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004778:	f7fc fb00 	bl	8000d7c <HAL_GetTick>
 800477c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0308 	and.w	r3, r3, #8
 8004788:	2b08      	cmp	r3, #8
 800478a:	d10e      	bne.n	80047aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800478c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004790:	9300      	str	r3, [sp, #0]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2200      	movs	r2, #0
 8004796:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 f82f 	bl	80047fe <UART_WaitOnFlagUntilTimeout>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d001      	beq.n	80047aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e025      	b.n	80047f6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0304 	and.w	r3, r3, #4
 80047b4:	2b04      	cmp	r3, #4
 80047b6:	d10e      	bne.n	80047d6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047bc:	9300      	str	r3, [sp, #0]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 f819 	bl	80047fe <UART_WaitOnFlagUntilTimeout>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d001      	beq.n	80047d6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e00f      	b.n	80047f6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2220      	movs	r2, #32
 80047da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2220      	movs	r2, #32
 80047e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b09c      	sub	sp, #112	; 0x70
 8004802:	af00      	add	r7, sp, #0
 8004804:	60f8      	str	r0, [r7, #12]
 8004806:	60b9      	str	r1, [r7, #8]
 8004808:	603b      	str	r3, [r7, #0]
 800480a:	4613      	mov	r3, r2
 800480c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800480e:	e0a9      	b.n	8004964 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004810:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004812:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004816:	f000 80a5 	beq.w	8004964 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800481a:	f7fc faaf 	bl	8000d7c <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004826:	429a      	cmp	r2, r3
 8004828:	d302      	bcc.n	8004830 <UART_WaitOnFlagUntilTimeout+0x32>
 800482a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800482c:	2b00      	cmp	r3, #0
 800482e:	d140      	bne.n	80048b2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004836:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004838:	e853 3f00 	ldrex	r3, [r3]
 800483c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800483e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004840:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004844:	667b      	str	r3, [r7, #100]	; 0x64
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	461a      	mov	r2, r3
 800484c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800484e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004850:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004852:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004854:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004856:	e841 2300 	strex	r3, r2, [r1]
 800485a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800485c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800485e:	2b00      	cmp	r3, #0
 8004860:	d1e6      	bne.n	8004830 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	3308      	adds	r3, #8
 8004868:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800486c:	e853 3f00 	ldrex	r3, [r3]
 8004870:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004874:	f023 0301 	bic.w	r3, r3, #1
 8004878:	663b      	str	r3, [r7, #96]	; 0x60
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	3308      	adds	r3, #8
 8004880:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004882:	64ba      	str	r2, [r7, #72]	; 0x48
 8004884:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004886:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004888:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800488a:	e841 2300 	strex	r3, r2, [r1]
 800488e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004890:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1e5      	bne.n	8004862 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2220      	movs	r2, #32
 800489a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2220      	movs	r2, #32
 80048a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e069      	b.n	8004986 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0304 	and.w	r3, r3, #4
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d051      	beq.n	8004964 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	69db      	ldr	r3, [r3, #28]
 80048c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048ce:	d149      	bne.n	8004964 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048d8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e2:	e853 3f00 	ldrex	r3, [r3]
 80048e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	461a      	mov	r2, r3
 80048f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048f8:	637b      	str	r3, [r7, #52]	; 0x34
 80048fa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004900:	e841 2300 	strex	r3, r2, [r1]
 8004904:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004908:	2b00      	cmp	r3, #0
 800490a:	d1e6      	bne.n	80048da <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	3308      	adds	r3, #8
 8004912:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	e853 3f00 	ldrex	r3, [r3]
 800491a:	613b      	str	r3, [r7, #16]
   return(result);
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	f023 0301 	bic.w	r3, r3, #1
 8004922:	66bb      	str	r3, [r7, #104]	; 0x68
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	3308      	adds	r3, #8
 800492a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800492c:	623a      	str	r2, [r7, #32]
 800492e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004930:	69f9      	ldr	r1, [r7, #28]
 8004932:	6a3a      	ldr	r2, [r7, #32]
 8004934:	e841 2300 	strex	r3, r2, [r1]
 8004938:	61bb      	str	r3, [r7, #24]
   return(result);
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d1e5      	bne.n	800490c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2220      	movs	r2, #32
 8004944:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2220      	movs	r2, #32
 800494c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2220      	movs	r2, #32
 8004954:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2200      	movs	r2, #0
 800495c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	e010      	b.n	8004986 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	69da      	ldr	r2, [r3, #28]
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	4013      	ands	r3, r2
 800496e:	68ba      	ldr	r2, [r7, #8]
 8004970:	429a      	cmp	r2, r3
 8004972:	bf0c      	ite	eq
 8004974:	2301      	moveq	r3, #1
 8004976:	2300      	movne	r3, #0
 8004978:	b2db      	uxtb	r3, r3
 800497a:	461a      	mov	r2, r3
 800497c:	79fb      	ldrb	r3, [r7, #7]
 800497e:	429a      	cmp	r2, r3
 8004980:	f43f af46 	beq.w	8004810 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3770      	adds	r7, #112	; 0x70
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}

0800498e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800498e:	b480      	push	{r7}
 8004990:	b085      	sub	sp, #20
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800499c:	2b01      	cmp	r3, #1
 800499e:	d101      	bne.n	80049a4 <HAL_UARTEx_DisableFifoMode+0x16>
 80049a0:	2302      	movs	r3, #2
 80049a2:	e027      	b.n	80049f4 <HAL_UARTEx_DisableFifoMode+0x66>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2224      	movs	r2, #36	; 0x24
 80049b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f022 0201 	bic.w	r2, r2, #1
 80049ca:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80049d2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2220      	movs	r2, #32
 80049e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3714      	adds	r7, #20
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d101      	bne.n	8004a18 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004a14:	2302      	movs	r3, #2
 8004a16:	e02d      	b.n	8004a74 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2224      	movs	r2, #36	; 0x24
 8004a24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f022 0201 	bic.w	r2, r2, #1
 8004a3e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	683a      	ldr	r2, [r7, #0]
 8004a50:	430a      	orrs	r2, r1
 8004a52:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f000 f84f 	bl	8004af8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2220      	movs	r2, #32
 8004a66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3710      	adds	r7, #16
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d101      	bne.n	8004a94 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004a90:	2302      	movs	r3, #2
 8004a92:	e02d      	b.n	8004af0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2224      	movs	r2, #36	; 0x24
 8004aa0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f022 0201 	bic.w	r2, r2, #1
 8004aba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	683a      	ldr	r2, [r7, #0]
 8004acc:	430a      	orrs	r2, r1
 8004ace:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f000 f811 	bl	8004af8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3710      	adds	r7, #16
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b085      	sub	sp, #20
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d108      	bne.n	8004b1a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004b18:	e031      	b.n	8004b7e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004b1a:	2308      	movs	r3, #8
 8004b1c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004b1e:	2308      	movs	r3, #8
 8004b20:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	0e5b      	lsrs	r3, r3, #25
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	f003 0307 	and.w	r3, r3, #7
 8004b30:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	0f5b      	lsrs	r3, r3, #29
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	f003 0307 	and.w	r3, r3, #7
 8004b40:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004b42:	7bbb      	ldrb	r3, [r7, #14]
 8004b44:	7b3a      	ldrb	r2, [r7, #12]
 8004b46:	4911      	ldr	r1, [pc, #68]	; (8004b8c <UARTEx_SetNbDataToProcess+0x94>)
 8004b48:	5c8a      	ldrb	r2, [r1, r2]
 8004b4a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004b4e:	7b3a      	ldrb	r2, [r7, #12]
 8004b50:	490f      	ldr	r1, [pc, #60]	; (8004b90 <UARTEx_SetNbDataToProcess+0x98>)
 8004b52:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004b54:	fb93 f3f2 	sdiv	r3, r3, r2
 8004b58:	b29a      	uxth	r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004b60:	7bfb      	ldrb	r3, [r7, #15]
 8004b62:	7b7a      	ldrb	r2, [r7, #13]
 8004b64:	4909      	ldr	r1, [pc, #36]	; (8004b8c <UARTEx_SetNbDataToProcess+0x94>)
 8004b66:	5c8a      	ldrb	r2, [r1, r2]
 8004b68:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004b6c:	7b7a      	ldrb	r2, [r7, #13]
 8004b6e:	4908      	ldr	r1, [pc, #32]	; (8004b90 <UARTEx_SetNbDataToProcess+0x98>)
 8004b70:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004b72:	fb93 f3f2 	sdiv	r3, r3, r2
 8004b76:	b29a      	uxth	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004b7e:	bf00      	nop
 8004b80:	3714      	adds	r7, #20
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	080056c4 	.word	0x080056c4
 8004b90:	080056cc 	.word	0x080056cc

08004b94 <__errno>:
 8004b94:	4b01      	ldr	r3, [pc, #4]	; (8004b9c <__errno+0x8>)
 8004b96:	6818      	ldr	r0, [r3, #0]
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	2000000c 	.word	0x2000000c

08004ba0 <__libc_init_array>:
 8004ba0:	b570      	push	{r4, r5, r6, lr}
 8004ba2:	4d0d      	ldr	r5, [pc, #52]	; (8004bd8 <__libc_init_array+0x38>)
 8004ba4:	4c0d      	ldr	r4, [pc, #52]	; (8004bdc <__libc_init_array+0x3c>)
 8004ba6:	1b64      	subs	r4, r4, r5
 8004ba8:	10a4      	asrs	r4, r4, #2
 8004baa:	2600      	movs	r6, #0
 8004bac:	42a6      	cmp	r6, r4
 8004bae:	d109      	bne.n	8004bc4 <__libc_init_array+0x24>
 8004bb0:	4d0b      	ldr	r5, [pc, #44]	; (8004be0 <__libc_init_array+0x40>)
 8004bb2:	4c0c      	ldr	r4, [pc, #48]	; (8004be4 <__libc_init_array+0x44>)
 8004bb4:	f000 fd1e 	bl	80055f4 <_init>
 8004bb8:	1b64      	subs	r4, r4, r5
 8004bba:	10a4      	asrs	r4, r4, #2
 8004bbc:	2600      	movs	r6, #0
 8004bbe:	42a6      	cmp	r6, r4
 8004bc0:	d105      	bne.n	8004bce <__libc_init_array+0x2e>
 8004bc2:	bd70      	pop	{r4, r5, r6, pc}
 8004bc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bc8:	4798      	blx	r3
 8004bca:	3601      	adds	r6, #1
 8004bcc:	e7ee      	b.n	8004bac <__libc_init_array+0xc>
 8004bce:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bd2:	4798      	blx	r3
 8004bd4:	3601      	adds	r6, #1
 8004bd6:	e7f2      	b.n	8004bbe <__libc_init_array+0x1e>
 8004bd8:	08005740 	.word	0x08005740
 8004bdc:	08005740 	.word	0x08005740
 8004be0:	08005740 	.word	0x08005740
 8004be4:	08005744 	.word	0x08005744

08004be8 <memset>:
 8004be8:	4402      	add	r2, r0
 8004bea:	4603      	mov	r3, r0
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d100      	bne.n	8004bf2 <memset+0xa>
 8004bf0:	4770      	bx	lr
 8004bf2:	f803 1b01 	strb.w	r1, [r3], #1
 8004bf6:	e7f9      	b.n	8004bec <memset+0x4>

08004bf8 <_puts_r>:
 8004bf8:	b570      	push	{r4, r5, r6, lr}
 8004bfa:	460e      	mov	r6, r1
 8004bfc:	4605      	mov	r5, r0
 8004bfe:	b118      	cbz	r0, 8004c08 <_puts_r+0x10>
 8004c00:	6983      	ldr	r3, [r0, #24]
 8004c02:	b90b      	cbnz	r3, 8004c08 <_puts_r+0x10>
 8004c04:	f000 fa48 	bl	8005098 <__sinit>
 8004c08:	69ab      	ldr	r3, [r5, #24]
 8004c0a:	68ac      	ldr	r4, [r5, #8]
 8004c0c:	b913      	cbnz	r3, 8004c14 <_puts_r+0x1c>
 8004c0e:	4628      	mov	r0, r5
 8004c10:	f000 fa42 	bl	8005098 <__sinit>
 8004c14:	4b2c      	ldr	r3, [pc, #176]	; (8004cc8 <_puts_r+0xd0>)
 8004c16:	429c      	cmp	r4, r3
 8004c18:	d120      	bne.n	8004c5c <_puts_r+0x64>
 8004c1a:	686c      	ldr	r4, [r5, #4]
 8004c1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c1e:	07db      	lsls	r3, r3, #31
 8004c20:	d405      	bmi.n	8004c2e <_puts_r+0x36>
 8004c22:	89a3      	ldrh	r3, [r4, #12]
 8004c24:	0598      	lsls	r0, r3, #22
 8004c26:	d402      	bmi.n	8004c2e <_puts_r+0x36>
 8004c28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c2a:	f000 fad3 	bl	80051d4 <__retarget_lock_acquire_recursive>
 8004c2e:	89a3      	ldrh	r3, [r4, #12]
 8004c30:	0719      	lsls	r1, r3, #28
 8004c32:	d51d      	bpl.n	8004c70 <_puts_r+0x78>
 8004c34:	6923      	ldr	r3, [r4, #16]
 8004c36:	b1db      	cbz	r3, 8004c70 <_puts_r+0x78>
 8004c38:	3e01      	subs	r6, #1
 8004c3a:	68a3      	ldr	r3, [r4, #8]
 8004c3c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004c40:	3b01      	subs	r3, #1
 8004c42:	60a3      	str	r3, [r4, #8]
 8004c44:	bb39      	cbnz	r1, 8004c96 <_puts_r+0x9e>
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	da38      	bge.n	8004cbc <_puts_r+0xc4>
 8004c4a:	4622      	mov	r2, r4
 8004c4c:	210a      	movs	r1, #10
 8004c4e:	4628      	mov	r0, r5
 8004c50:	f000 f848 	bl	8004ce4 <__swbuf_r>
 8004c54:	3001      	adds	r0, #1
 8004c56:	d011      	beq.n	8004c7c <_puts_r+0x84>
 8004c58:	250a      	movs	r5, #10
 8004c5a:	e011      	b.n	8004c80 <_puts_r+0x88>
 8004c5c:	4b1b      	ldr	r3, [pc, #108]	; (8004ccc <_puts_r+0xd4>)
 8004c5e:	429c      	cmp	r4, r3
 8004c60:	d101      	bne.n	8004c66 <_puts_r+0x6e>
 8004c62:	68ac      	ldr	r4, [r5, #8]
 8004c64:	e7da      	b.n	8004c1c <_puts_r+0x24>
 8004c66:	4b1a      	ldr	r3, [pc, #104]	; (8004cd0 <_puts_r+0xd8>)
 8004c68:	429c      	cmp	r4, r3
 8004c6a:	bf08      	it	eq
 8004c6c:	68ec      	ldreq	r4, [r5, #12]
 8004c6e:	e7d5      	b.n	8004c1c <_puts_r+0x24>
 8004c70:	4621      	mov	r1, r4
 8004c72:	4628      	mov	r0, r5
 8004c74:	f000 f888 	bl	8004d88 <__swsetup_r>
 8004c78:	2800      	cmp	r0, #0
 8004c7a:	d0dd      	beq.n	8004c38 <_puts_r+0x40>
 8004c7c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004c80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c82:	07da      	lsls	r2, r3, #31
 8004c84:	d405      	bmi.n	8004c92 <_puts_r+0x9a>
 8004c86:	89a3      	ldrh	r3, [r4, #12]
 8004c88:	059b      	lsls	r3, r3, #22
 8004c8a:	d402      	bmi.n	8004c92 <_puts_r+0x9a>
 8004c8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c8e:	f000 faa2 	bl	80051d6 <__retarget_lock_release_recursive>
 8004c92:	4628      	mov	r0, r5
 8004c94:	bd70      	pop	{r4, r5, r6, pc}
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	da04      	bge.n	8004ca4 <_puts_r+0xac>
 8004c9a:	69a2      	ldr	r2, [r4, #24]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	dc06      	bgt.n	8004cae <_puts_r+0xb6>
 8004ca0:	290a      	cmp	r1, #10
 8004ca2:	d004      	beq.n	8004cae <_puts_r+0xb6>
 8004ca4:	6823      	ldr	r3, [r4, #0]
 8004ca6:	1c5a      	adds	r2, r3, #1
 8004ca8:	6022      	str	r2, [r4, #0]
 8004caa:	7019      	strb	r1, [r3, #0]
 8004cac:	e7c5      	b.n	8004c3a <_puts_r+0x42>
 8004cae:	4622      	mov	r2, r4
 8004cb0:	4628      	mov	r0, r5
 8004cb2:	f000 f817 	bl	8004ce4 <__swbuf_r>
 8004cb6:	3001      	adds	r0, #1
 8004cb8:	d1bf      	bne.n	8004c3a <_puts_r+0x42>
 8004cba:	e7df      	b.n	8004c7c <_puts_r+0x84>
 8004cbc:	6823      	ldr	r3, [r4, #0]
 8004cbe:	250a      	movs	r5, #10
 8004cc0:	1c5a      	adds	r2, r3, #1
 8004cc2:	6022      	str	r2, [r4, #0]
 8004cc4:	701d      	strb	r5, [r3, #0]
 8004cc6:	e7db      	b.n	8004c80 <_puts_r+0x88>
 8004cc8:	080056f8 	.word	0x080056f8
 8004ccc:	08005718 	.word	0x08005718
 8004cd0:	080056d8 	.word	0x080056d8

08004cd4 <puts>:
 8004cd4:	4b02      	ldr	r3, [pc, #8]	; (8004ce0 <puts+0xc>)
 8004cd6:	4601      	mov	r1, r0
 8004cd8:	6818      	ldr	r0, [r3, #0]
 8004cda:	f7ff bf8d 	b.w	8004bf8 <_puts_r>
 8004cde:	bf00      	nop
 8004ce0:	2000000c 	.word	0x2000000c

08004ce4 <__swbuf_r>:
 8004ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ce6:	460e      	mov	r6, r1
 8004ce8:	4614      	mov	r4, r2
 8004cea:	4605      	mov	r5, r0
 8004cec:	b118      	cbz	r0, 8004cf6 <__swbuf_r+0x12>
 8004cee:	6983      	ldr	r3, [r0, #24]
 8004cf0:	b90b      	cbnz	r3, 8004cf6 <__swbuf_r+0x12>
 8004cf2:	f000 f9d1 	bl	8005098 <__sinit>
 8004cf6:	4b21      	ldr	r3, [pc, #132]	; (8004d7c <__swbuf_r+0x98>)
 8004cf8:	429c      	cmp	r4, r3
 8004cfa:	d12b      	bne.n	8004d54 <__swbuf_r+0x70>
 8004cfc:	686c      	ldr	r4, [r5, #4]
 8004cfe:	69a3      	ldr	r3, [r4, #24]
 8004d00:	60a3      	str	r3, [r4, #8]
 8004d02:	89a3      	ldrh	r3, [r4, #12]
 8004d04:	071a      	lsls	r2, r3, #28
 8004d06:	d52f      	bpl.n	8004d68 <__swbuf_r+0x84>
 8004d08:	6923      	ldr	r3, [r4, #16]
 8004d0a:	b36b      	cbz	r3, 8004d68 <__swbuf_r+0x84>
 8004d0c:	6923      	ldr	r3, [r4, #16]
 8004d0e:	6820      	ldr	r0, [r4, #0]
 8004d10:	1ac0      	subs	r0, r0, r3
 8004d12:	6963      	ldr	r3, [r4, #20]
 8004d14:	b2f6      	uxtb	r6, r6
 8004d16:	4283      	cmp	r3, r0
 8004d18:	4637      	mov	r7, r6
 8004d1a:	dc04      	bgt.n	8004d26 <__swbuf_r+0x42>
 8004d1c:	4621      	mov	r1, r4
 8004d1e:	4628      	mov	r0, r5
 8004d20:	f000 f926 	bl	8004f70 <_fflush_r>
 8004d24:	bb30      	cbnz	r0, 8004d74 <__swbuf_r+0x90>
 8004d26:	68a3      	ldr	r3, [r4, #8]
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	60a3      	str	r3, [r4, #8]
 8004d2c:	6823      	ldr	r3, [r4, #0]
 8004d2e:	1c5a      	adds	r2, r3, #1
 8004d30:	6022      	str	r2, [r4, #0]
 8004d32:	701e      	strb	r6, [r3, #0]
 8004d34:	6963      	ldr	r3, [r4, #20]
 8004d36:	3001      	adds	r0, #1
 8004d38:	4283      	cmp	r3, r0
 8004d3a:	d004      	beq.n	8004d46 <__swbuf_r+0x62>
 8004d3c:	89a3      	ldrh	r3, [r4, #12]
 8004d3e:	07db      	lsls	r3, r3, #31
 8004d40:	d506      	bpl.n	8004d50 <__swbuf_r+0x6c>
 8004d42:	2e0a      	cmp	r6, #10
 8004d44:	d104      	bne.n	8004d50 <__swbuf_r+0x6c>
 8004d46:	4621      	mov	r1, r4
 8004d48:	4628      	mov	r0, r5
 8004d4a:	f000 f911 	bl	8004f70 <_fflush_r>
 8004d4e:	b988      	cbnz	r0, 8004d74 <__swbuf_r+0x90>
 8004d50:	4638      	mov	r0, r7
 8004d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d54:	4b0a      	ldr	r3, [pc, #40]	; (8004d80 <__swbuf_r+0x9c>)
 8004d56:	429c      	cmp	r4, r3
 8004d58:	d101      	bne.n	8004d5e <__swbuf_r+0x7a>
 8004d5a:	68ac      	ldr	r4, [r5, #8]
 8004d5c:	e7cf      	b.n	8004cfe <__swbuf_r+0x1a>
 8004d5e:	4b09      	ldr	r3, [pc, #36]	; (8004d84 <__swbuf_r+0xa0>)
 8004d60:	429c      	cmp	r4, r3
 8004d62:	bf08      	it	eq
 8004d64:	68ec      	ldreq	r4, [r5, #12]
 8004d66:	e7ca      	b.n	8004cfe <__swbuf_r+0x1a>
 8004d68:	4621      	mov	r1, r4
 8004d6a:	4628      	mov	r0, r5
 8004d6c:	f000 f80c 	bl	8004d88 <__swsetup_r>
 8004d70:	2800      	cmp	r0, #0
 8004d72:	d0cb      	beq.n	8004d0c <__swbuf_r+0x28>
 8004d74:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004d78:	e7ea      	b.n	8004d50 <__swbuf_r+0x6c>
 8004d7a:	bf00      	nop
 8004d7c:	080056f8 	.word	0x080056f8
 8004d80:	08005718 	.word	0x08005718
 8004d84:	080056d8 	.word	0x080056d8

08004d88 <__swsetup_r>:
 8004d88:	4b32      	ldr	r3, [pc, #200]	; (8004e54 <__swsetup_r+0xcc>)
 8004d8a:	b570      	push	{r4, r5, r6, lr}
 8004d8c:	681d      	ldr	r5, [r3, #0]
 8004d8e:	4606      	mov	r6, r0
 8004d90:	460c      	mov	r4, r1
 8004d92:	b125      	cbz	r5, 8004d9e <__swsetup_r+0x16>
 8004d94:	69ab      	ldr	r3, [r5, #24]
 8004d96:	b913      	cbnz	r3, 8004d9e <__swsetup_r+0x16>
 8004d98:	4628      	mov	r0, r5
 8004d9a:	f000 f97d 	bl	8005098 <__sinit>
 8004d9e:	4b2e      	ldr	r3, [pc, #184]	; (8004e58 <__swsetup_r+0xd0>)
 8004da0:	429c      	cmp	r4, r3
 8004da2:	d10f      	bne.n	8004dc4 <__swsetup_r+0x3c>
 8004da4:	686c      	ldr	r4, [r5, #4]
 8004da6:	89a3      	ldrh	r3, [r4, #12]
 8004da8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004dac:	0719      	lsls	r1, r3, #28
 8004dae:	d42c      	bmi.n	8004e0a <__swsetup_r+0x82>
 8004db0:	06dd      	lsls	r5, r3, #27
 8004db2:	d411      	bmi.n	8004dd8 <__swsetup_r+0x50>
 8004db4:	2309      	movs	r3, #9
 8004db6:	6033      	str	r3, [r6, #0]
 8004db8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004dbc:	81a3      	strh	r3, [r4, #12]
 8004dbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004dc2:	e03e      	b.n	8004e42 <__swsetup_r+0xba>
 8004dc4:	4b25      	ldr	r3, [pc, #148]	; (8004e5c <__swsetup_r+0xd4>)
 8004dc6:	429c      	cmp	r4, r3
 8004dc8:	d101      	bne.n	8004dce <__swsetup_r+0x46>
 8004dca:	68ac      	ldr	r4, [r5, #8]
 8004dcc:	e7eb      	b.n	8004da6 <__swsetup_r+0x1e>
 8004dce:	4b24      	ldr	r3, [pc, #144]	; (8004e60 <__swsetup_r+0xd8>)
 8004dd0:	429c      	cmp	r4, r3
 8004dd2:	bf08      	it	eq
 8004dd4:	68ec      	ldreq	r4, [r5, #12]
 8004dd6:	e7e6      	b.n	8004da6 <__swsetup_r+0x1e>
 8004dd8:	0758      	lsls	r0, r3, #29
 8004dda:	d512      	bpl.n	8004e02 <__swsetup_r+0x7a>
 8004ddc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004dde:	b141      	cbz	r1, 8004df2 <__swsetup_r+0x6a>
 8004de0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004de4:	4299      	cmp	r1, r3
 8004de6:	d002      	beq.n	8004dee <__swsetup_r+0x66>
 8004de8:	4630      	mov	r0, r6
 8004dea:	f000 fa5b 	bl	80052a4 <_free_r>
 8004dee:	2300      	movs	r3, #0
 8004df0:	6363      	str	r3, [r4, #52]	; 0x34
 8004df2:	89a3      	ldrh	r3, [r4, #12]
 8004df4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004df8:	81a3      	strh	r3, [r4, #12]
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	6063      	str	r3, [r4, #4]
 8004dfe:	6923      	ldr	r3, [r4, #16]
 8004e00:	6023      	str	r3, [r4, #0]
 8004e02:	89a3      	ldrh	r3, [r4, #12]
 8004e04:	f043 0308 	orr.w	r3, r3, #8
 8004e08:	81a3      	strh	r3, [r4, #12]
 8004e0a:	6923      	ldr	r3, [r4, #16]
 8004e0c:	b94b      	cbnz	r3, 8004e22 <__swsetup_r+0x9a>
 8004e0e:	89a3      	ldrh	r3, [r4, #12]
 8004e10:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004e14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e18:	d003      	beq.n	8004e22 <__swsetup_r+0x9a>
 8004e1a:	4621      	mov	r1, r4
 8004e1c:	4630      	mov	r0, r6
 8004e1e:	f000 fa01 	bl	8005224 <__smakebuf_r>
 8004e22:	89a0      	ldrh	r0, [r4, #12]
 8004e24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e28:	f010 0301 	ands.w	r3, r0, #1
 8004e2c:	d00a      	beq.n	8004e44 <__swsetup_r+0xbc>
 8004e2e:	2300      	movs	r3, #0
 8004e30:	60a3      	str	r3, [r4, #8]
 8004e32:	6963      	ldr	r3, [r4, #20]
 8004e34:	425b      	negs	r3, r3
 8004e36:	61a3      	str	r3, [r4, #24]
 8004e38:	6923      	ldr	r3, [r4, #16]
 8004e3a:	b943      	cbnz	r3, 8004e4e <__swsetup_r+0xc6>
 8004e3c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004e40:	d1ba      	bne.n	8004db8 <__swsetup_r+0x30>
 8004e42:	bd70      	pop	{r4, r5, r6, pc}
 8004e44:	0781      	lsls	r1, r0, #30
 8004e46:	bf58      	it	pl
 8004e48:	6963      	ldrpl	r3, [r4, #20]
 8004e4a:	60a3      	str	r3, [r4, #8]
 8004e4c:	e7f4      	b.n	8004e38 <__swsetup_r+0xb0>
 8004e4e:	2000      	movs	r0, #0
 8004e50:	e7f7      	b.n	8004e42 <__swsetup_r+0xba>
 8004e52:	bf00      	nop
 8004e54:	2000000c 	.word	0x2000000c
 8004e58:	080056f8 	.word	0x080056f8
 8004e5c:	08005718 	.word	0x08005718
 8004e60:	080056d8 	.word	0x080056d8

08004e64 <__sflush_r>:
 8004e64:	898a      	ldrh	r2, [r1, #12]
 8004e66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e6a:	4605      	mov	r5, r0
 8004e6c:	0710      	lsls	r0, r2, #28
 8004e6e:	460c      	mov	r4, r1
 8004e70:	d458      	bmi.n	8004f24 <__sflush_r+0xc0>
 8004e72:	684b      	ldr	r3, [r1, #4]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	dc05      	bgt.n	8004e84 <__sflush_r+0x20>
 8004e78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	dc02      	bgt.n	8004e84 <__sflush_r+0x20>
 8004e7e:	2000      	movs	r0, #0
 8004e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e86:	2e00      	cmp	r6, #0
 8004e88:	d0f9      	beq.n	8004e7e <__sflush_r+0x1a>
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004e90:	682f      	ldr	r7, [r5, #0]
 8004e92:	602b      	str	r3, [r5, #0]
 8004e94:	d032      	beq.n	8004efc <__sflush_r+0x98>
 8004e96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004e98:	89a3      	ldrh	r3, [r4, #12]
 8004e9a:	075a      	lsls	r2, r3, #29
 8004e9c:	d505      	bpl.n	8004eaa <__sflush_r+0x46>
 8004e9e:	6863      	ldr	r3, [r4, #4]
 8004ea0:	1ac0      	subs	r0, r0, r3
 8004ea2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004ea4:	b10b      	cbz	r3, 8004eaa <__sflush_r+0x46>
 8004ea6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ea8:	1ac0      	subs	r0, r0, r3
 8004eaa:	2300      	movs	r3, #0
 8004eac:	4602      	mov	r2, r0
 8004eae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004eb0:	6a21      	ldr	r1, [r4, #32]
 8004eb2:	4628      	mov	r0, r5
 8004eb4:	47b0      	blx	r6
 8004eb6:	1c43      	adds	r3, r0, #1
 8004eb8:	89a3      	ldrh	r3, [r4, #12]
 8004eba:	d106      	bne.n	8004eca <__sflush_r+0x66>
 8004ebc:	6829      	ldr	r1, [r5, #0]
 8004ebe:	291d      	cmp	r1, #29
 8004ec0:	d82c      	bhi.n	8004f1c <__sflush_r+0xb8>
 8004ec2:	4a2a      	ldr	r2, [pc, #168]	; (8004f6c <__sflush_r+0x108>)
 8004ec4:	40ca      	lsrs	r2, r1
 8004ec6:	07d6      	lsls	r6, r2, #31
 8004ec8:	d528      	bpl.n	8004f1c <__sflush_r+0xb8>
 8004eca:	2200      	movs	r2, #0
 8004ecc:	6062      	str	r2, [r4, #4]
 8004ece:	04d9      	lsls	r1, r3, #19
 8004ed0:	6922      	ldr	r2, [r4, #16]
 8004ed2:	6022      	str	r2, [r4, #0]
 8004ed4:	d504      	bpl.n	8004ee0 <__sflush_r+0x7c>
 8004ed6:	1c42      	adds	r2, r0, #1
 8004ed8:	d101      	bne.n	8004ede <__sflush_r+0x7a>
 8004eda:	682b      	ldr	r3, [r5, #0]
 8004edc:	b903      	cbnz	r3, 8004ee0 <__sflush_r+0x7c>
 8004ede:	6560      	str	r0, [r4, #84]	; 0x54
 8004ee0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ee2:	602f      	str	r7, [r5, #0]
 8004ee4:	2900      	cmp	r1, #0
 8004ee6:	d0ca      	beq.n	8004e7e <__sflush_r+0x1a>
 8004ee8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004eec:	4299      	cmp	r1, r3
 8004eee:	d002      	beq.n	8004ef6 <__sflush_r+0x92>
 8004ef0:	4628      	mov	r0, r5
 8004ef2:	f000 f9d7 	bl	80052a4 <_free_r>
 8004ef6:	2000      	movs	r0, #0
 8004ef8:	6360      	str	r0, [r4, #52]	; 0x34
 8004efa:	e7c1      	b.n	8004e80 <__sflush_r+0x1c>
 8004efc:	6a21      	ldr	r1, [r4, #32]
 8004efe:	2301      	movs	r3, #1
 8004f00:	4628      	mov	r0, r5
 8004f02:	47b0      	blx	r6
 8004f04:	1c41      	adds	r1, r0, #1
 8004f06:	d1c7      	bne.n	8004e98 <__sflush_r+0x34>
 8004f08:	682b      	ldr	r3, [r5, #0]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d0c4      	beq.n	8004e98 <__sflush_r+0x34>
 8004f0e:	2b1d      	cmp	r3, #29
 8004f10:	d001      	beq.n	8004f16 <__sflush_r+0xb2>
 8004f12:	2b16      	cmp	r3, #22
 8004f14:	d101      	bne.n	8004f1a <__sflush_r+0xb6>
 8004f16:	602f      	str	r7, [r5, #0]
 8004f18:	e7b1      	b.n	8004e7e <__sflush_r+0x1a>
 8004f1a:	89a3      	ldrh	r3, [r4, #12]
 8004f1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f20:	81a3      	strh	r3, [r4, #12]
 8004f22:	e7ad      	b.n	8004e80 <__sflush_r+0x1c>
 8004f24:	690f      	ldr	r7, [r1, #16]
 8004f26:	2f00      	cmp	r7, #0
 8004f28:	d0a9      	beq.n	8004e7e <__sflush_r+0x1a>
 8004f2a:	0793      	lsls	r3, r2, #30
 8004f2c:	680e      	ldr	r6, [r1, #0]
 8004f2e:	bf08      	it	eq
 8004f30:	694b      	ldreq	r3, [r1, #20]
 8004f32:	600f      	str	r7, [r1, #0]
 8004f34:	bf18      	it	ne
 8004f36:	2300      	movne	r3, #0
 8004f38:	eba6 0807 	sub.w	r8, r6, r7
 8004f3c:	608b      	str	r3, [r1, #8]
 8004f3e:	f1b8 0f00 	cmp.w	r8, #0
 8004f42:	dd9c      	ble.n	8004e7e <__sflush_r+0x1a>
 8004f44:	6a21      	ldr	r1, [r4, #32]
 8004f46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004f48:	4643      	mov	r3, r8
 8004f4a:	463a      	mov	r2, r7
 8004f4c:	4628      	mov	r0, r5
 8004f4e:	47b0      	blx	r6
 8004f50:	2800      	cmp	r0, #0
 8004f52:	dc06      	bgt.n	8004f62 <__sflush_r+0xfe>
 8004f54:	89a3      	ldrh	r3, [r4, #12]
 8004f56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f5a:	81a3      	strh	r3, [r4, #12]
 8004f5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f60:	e78e      	b.n	8004e80 <__sflush_r+0x1c>
 8004f62:	4407      	add	r7, r0
 8004f64:	eba8 0800 	sub.w	r8, r8, r0
 8004f68:	e7e9      	b.n	8004f3e <__sflush_r+0xda>
 8004f6a:	bf00      	nop
 8004f6c:	20400001 	.word	0x20400001

08004f70 <_fflush_r>:
 8004f70:	b538      	push	{r3, r4, r5, lr}
 8004f72:	690b      	ldr	r3, [r1, #16]
 8004f74:	4605      	mov	r5, r0
 8004f76:	460c      	mov	r4, r1
 8004f78:	b913      	cbnz	r3, 8004f80 <_fflush_r+0x10>
 8004f7a:	2500      	movs	r5, #0
 8004f7c:	4628      	mov	r0, r5
 8004f7e:	bd38      	pop	{r3, r4, r5, pc}
 8004f80:	b118      	cbz	r0, 8004f8a <_fflush_r+0x1a>
 8004f82:	6983      	ldr	r3, [r0, #24]
 8004f84:	b90b      	cbnz	r3, 8004f8a <_fflush_r+0x1a>
 8004f86:	f000 f887 	bl	8005098 <__sinit>
 8004f8a:	4b14      	ldr	r3, [pc, #80]	; (8004fdc <_fflush_r+0x6c>)
 8004f8c:	429c      	cmp	r4, r3
 8004f8e:	d11b      	bne.n	8004fc8 <_fflush_r+0x58>
 8004f90:	686c      	ldr	r4, [r5, #4]
 8004f92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d0ef      	beq.n	8004f7a <_fflush_r+0xa>
 8004f9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004f9c:	07d0      	lsls	r0, r2, #31
 8004f9e:	d404      	bmi.n	8004faa <_fflush_r+0x3a>
 8004fa0:	0599      	lsls	r1, r3, #22
 8004fa2:	d402      	bmi.n	8004faa <_fflush_r+0x3a>
 8004fa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fa6:	f000 f915 	bl	80051d4 <__retarget_lock_acquire_recursive>
 8004faa:	4628      	mov	r0, r5
 8004fac:	4621      	mov	r1, r4
 8004fae:	f7ff ff59 	bl	8004e64 <__sflush_r>
 8004fb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004fb4:	07da      	lsls	r2, r3, #31
 8004fb6:	4605      	mov	r5, r0
 8004fb8:	d4e0      	bmi.n	8004f7c <_fflush_r+0xc>
 8004fba:	89a3      	ldrh	r3, [r4, #12]
 8004fbc:	059b      	lsls	r3, r3, #22
 8004fbe:	d4dd      	bmi.n	8004f7c <_fflush_r+0xc>
 8004fc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fc2:	f000 f908 	bl	80051d6 <__retarget_lock_release_recursive>
 8004fc6:	e7d9      	b.n	8004f7c <_fflush_r+0xc>
 8004fc8:	4b05      	ldr	r3, [pc, #20]	; (8004fe0 <_fflush_r+0x70>)
 8004fca:	429c      	cmp	r4, r3
 8004fcc:	d101      	bne.n	8004fd2 <_fflush_r+0x62>
 8004fce:	68ac      	ldr	r4, [r5, #8]
 8004fd0:	e7df      	b.n	8004f92 <_fflush_r+0x22>
 8004fd2:	4b04      	ldr	r3, [pc, #16]	; (8004fe4 <_fflush_r+0x74>)
 8004fd4:	429c      	cmp	r4, r3
 8004fd6:	bf08      	it	eq
 8004fd8:	68ec      	ldreq	r4, [r5, #12]
 8004fda:	e7da      	b.n	8004f92 <_fflush_r+0x22>
 8004fdc:	080056f8 	.word	0x080056f8
 8004fe0:	08005718 	.word	0x08005718
 8004fe4:	080056d8 	.word	0x080056d8

08004fe8 <std>:
 8004fe8:	2300      	movs	r3, #0
 8004fea:	b510      	push	{r4, lr}
 8004fec:	4604      	mov	r4, r0
 8004fee:	e9c0 3300 	strd	r3, r3, [r0]
 8004ff2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004ff6:	6083      	str	r3, [r0, #8]
 8004ff8:	8181      	strh	r1, [r0, #12]
 8004ffa:	6643      	str	r3, [r0, #100]	; 0x64
 8004ffc:	81c2      	strh	r2, [r0, #14]
 8004ffe:	6183      	str	r3, [r0, #24]
 8005000:	4619      	mov	r1, r3
 8005002:	2208      	movs	r2, #8
 8005004:	305c      	adds	r0, #92	; 0x5c
 8005006:	f7ff fdef 	bl	8004be8 <memset>
 800500a:	4b05      	ldr	r3, [pc, #20]	; (8005020 <std+0x38>)
 800500c:	6263      	str	r3, [r4, #36]	; 0x24
 800500e:	4b05      	ldr	r3, [pc, #20]	; (8005024 <std+0x3c>)
 8005010:	62a3      	str	r3, [r4, #40]	; 0x28
 8005012:	4b05      	ldr	r3, [pc, #20]	; (8005028 <std+0x40>)
 8005014:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005016:	4b05      	ldr	r3, [pc, #20]	; (800502c <std+0x44>)
 8005018:	6224      	str	r4, [r4, #32]
 800501a:	6323      	str	r3, [r4, #48]	; 0x30
 800501c:	bd10      	pop	{r4, pc}
 800501e:	bf00      	nop
 8005020:	08005485 	.word	0x08005485
 8005024:	080054a7 	.word	0x080054a7
 8005028:	080054df 	.word	0x080054df
 800502c:	08005503 	.word	0x08005503

08005030 <_cleanup_r>:
 8005030:	4901      	ldr	r1, [pc, #4]	; (8005038 <_cleanup_r+0x8>)
 8005032:	f000 b8af 	b.w	8005194 <_fwalk_reent>
 8005036:	bf00      	nop
 8005038:	08004f71 	.word	0x08004f71

0800503c <__sfmoreglue>:
 800503c:	b570      	push	{r4, r5, r6, lr}
 800503e:	2268      	movs	r2, #104	; 0x68
 8005040:	1e4d      	subs	r5, r1, #1
 8005042:	4355      	muls	r5, r2
 8005044:	460e      	mov	r6, r1
 8005046:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800504a:	f000 f997 	bl	800537c <_malloc_r>
 800504e:	4604      	mov	r4, r0
 8005050:	b140      	cbz	r0, 8005064 <__sfmoreglue+0x28>
 8005052:	2100      	movs	r1, #0
 8005054:	e9c0 1600 	strd	r1, r6, [r0]
 8005058:	300c      	adds	r0, #12
 800505a:	60a0      	str	r0, [r4, #8]
 800505c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005060:	f7ff fdc2 	bl	8004be8 <memset>
 8005064:	4620      	mov	r0, r4
 8005066:	bd70      	pop	{r4, r5, r6, pc}

08005068 <__sfp_lock_acquire>:
 8005068:	4801      	ldr	r0, [pc, #4]	; (8005070 <__sfp_lock_acquire+0x8>)
 800506a:	f000 b8b3 	b.w	80051d4 <__retarget_lock_acquire_recursive>
 800506e:	bf00      	nop
 8005070:	20000175 	.word	0x20000175

08005074 <__sfp_lock_release>:
 8005074:	4801      	ldr	r0, [pc, #4]	; (800507c <__sfp_lock_release+0x8>)
 8005076:	f000 b8ae 	b.w	80051d6 <__retarget_lock_release_recursive>
 800507a:	bf00      	nop
 800507c:	20000175 	.word	0x20000175

08005080 <__sinit_lock_acquire>:
 8005080:	4801      	ldr	r0, [pc, #4]	; (8005088 <__sinit_lock_acquire+0x8>)
 8005082:	f000 b8a7 	b.w	80051d4 <__retarget_lock_acquire_recursive>
 8005086:	bf00      	nop
 8005088:	20000176 	.word	0x20000176

0800508c <__sinit_lock_release>:
 800508c:	4801      	ldr	r0, [pc, #4]	; (8005094 <__sinit_lock_release+0x8>)
 800508e:	f000 b8a2 	b.w	80051d6 <__retarget_lock_release_recursive>
 8005092:	bf00      	nop
 8005094:	20000176 	.word	0x20000176

08005098 <__sinit>:
 8005098:	b510      	push	{r4, lr}
 800509a:	4604      	mov	r4, r0
 800509c:	f7ff fff0 	bl	8005080 <__sinit_lock_acquire>
 80050a0:	69a3      	ldr	r3, [r4, #24]
 80050a2:	b11b      	cbz	r3, 80050ac <__sinit+0x14>
 80050a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050a8:	f7ff bff0 	b.w	800508c <__sinit_lock_release>
 80050ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80050b0:	6523      	str	r3, [r4, #80]	; 0x50
 80050b2:	4b13      	ldr	r3, [pc, #76]	; (8005100 <__sinit+0x68>)
 80050b4:	4a13      	ldr	r2, [pc, #76]	; (8005104 <__sinit+0x6c>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80050ba:	42a3      	cmp	r3, r4
 80050bc:	bf04      	itt	eq
 80050be:	2301      	moveq	r3, #1
 80050c0:	61a3      	streq	r3, [r4, #24]
 80050c2:	4620      	mov	r0, r4
 80050c4:	f000 f820 	bl	8005108 <__sfp>
 80050c8:	6060      	str	r0, [r4, #4]
 80050ca:	4620      	mov	r0, r4
 80050cc:	f000 f81c 	bl	8005108 <__sfp>
 80050d0:	60a0      	str	r0, [r4, #8]
 80050d2:	4620      	mov	r0, r4
 80050d4:	f000 f818 	bl	8005108 <__sfp>
 80050d8:	2200      	movs	r2, #0
 80050da:	60e0      	str	r0, [r4, #12]
 80050dc:	2104      	movs	r1, #4
 80050de:	6860      	ldr	r0, [r4, #4]
 80050e0:	f7ff ff82 	bl	8004fe8 <std>
 80050e4:	68a0      	ldr	r0, [r4, #8]
 80050e6:	2201      	movs	r2, #1
 80050e8:	2109      	movs	r1, #9
 80050ea:	f7ff ff7d 	bl	8004fe8 <std>
 80050ee:	68e0      	ldr	r0, [r4, #12]
 80050f0:	2202      	movs	r2, #2
 80050f2:	2112      	movs	r1, #18
 80050f4:	f7ff ff78 	bl	8004fe8 <std>
 80050f8:	2301      	movs	r3, #1
 80050fa:	61a3      	str	r3, [r4, #24]
 80050fc:	e7d2      	b.n	80050a4 <__sinit+0xc>
 80050fe:	bf00      	nop
 8005100:	080056d4 	.word	0x080056d4
 8005104:	08005031 	.word	0x08005031

08005108 <__sfp>:
 8005108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800510a:	4607      	mov	r7, r0
 800510c:	f7ff ffac 	bl	8005068 <__sfp_lock_acquire>
 8005110:	4b1e      	ldr	r3, [pc, #120]	; (800518c <__sfp+0x84>)
 8005112:	681e      	ldr	r6, [r3, #0]
 8005114:	69b3      	ldr	r3, [r6, #24]
 8005116:	b913      	cbnz	r3, 800511e <__sfp+0x16>
 8005118:	4630      	mov	r0, r6
 800511a:	f7ff ffbd 	bl	8005098 <__sinit>
 800511e:	3648      	adds	r6, #72	; 0x48
 8005120:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005124:	3b01      	subs	r3, #1
 8005126:	d503      	bpl.n	8005130 <__sfp+0x28>
 8005128:	6833      	ldr	r3, [r6, #0]
 800512a:	b30b      	cbz	r3, 8005170 <__sfp+0x68>
 800512c:	6836      	ldr	r6, [r6, #0]
 800512e:	e7f7      	b.n	8005120 <__sfp+0x18>
 8005130:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005134:	b9d5      	cbnz	r5, 800516c <__sfp+0x64>
 8005136:	4b16      	ldr	r3, [pc, #88]	; (8005190 <__sfp+0x88>)
 8005138:	60e3      	str	r3, [r4, #12]
 800513a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800513e:	6665      	str	r5, [r4, #100]	; 0x64
 8005140:	f000 f847 	bl	80051d2 <__retarget_lock_init_recursive>
 8005144:	f7ff ff96 	bl	8005074 <__sfp_lock_release>
 8005148:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800514c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005150:	6025      	str	r5, [r4, #0]
 8005152:	61a5      	str	r5, [r4, #24]
 8005154:	2208      	movs	r2, #8
 8005156:	4629      	mov	r1, r5
 8005158:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800515c:	f7ff fd44 	bl	8004be8 <memset>
 8005160:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005164:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005168:	4620      	mov	r0, r4
 800516a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800516c:	3468      	adds	r4, #104	; 0x68
 800516e:	e7d9      	b.n	8005124 <__sfp+0x1c>
 8005170:	2104      	movs	r1, #4
 8005172:	4638      	mov	r0, r7
 8005174:	f7ff ff62 	bl	800503c <__sfmoreglue>
 8005178:	4604      	mov	r4, r0
 800517a:	6030      	str	r0, [r6, #0]
 800517c:	2800      	cmp	r0, #0
 800517e:	d1d5      	bne.n	800512c <__sfp+0x24>
 8005180:	f7ff ff78 	bl	8005074 <__sfp_lock_release>
 8005184:	230c      	movs	r3, #12
 8005186:	603b      	str	r3, [r7, #0]
 8005188:	e7ee      	b.n	8005168 <__sfp+0x60>
 800518a:	bf00      	nop
 800518c:	080056d4 	.word	0x080056d4
 8005190:	ffff0001 	.word	0xffff0001

08005194 <_fwalk_reent>:
 8005194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005198:	4606      	mov	r6, r0
 800519a:	4688      	mov	r8, r1
 800519c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80051a0:	2700      	movs	r7, #0
 80051a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80051a6:	f1b9 0901 	subs.w	r9, r9, #1
 80051aa:	d505      	bpl.n	80051b8 <_fwalk_reent+0x24>
 80051ac:	6824      	ldr	r4, [r4, #0]
 80051ae:	2c00      	cmp	r4, #0
 80051b0:	d1f7      	bne.n	80051a2 <_fwalk_reent+0xe>
 80051b2:	4638      	mov	r0, r7
 80051b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051b8:	89ab      	ldrh	r3, [r5, #12]
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d907      	bls.n	80051ce <_fwalk_reent+0x3a>
 80051be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80051c2:	3301      	adds	r3, #1
 80051c4:	d003      	beq.n	80051ce <_fwalk_reent+0x3a>
 80051c6:	4629      	mov	r1, r5
 80051c8:	4630      	mov	r0, r6
 80051ca:	47c0      	blx	r8
 80051cc:	4307      	orrs	r7, r0
 80051ce:	3568      	adds	r5, #104	; 0x68
 80051d0:	e7e9      	b.n	80051a6 <_fwalk_reent+0x12>

080051d2 <__retarget_lock_init_recursive>:
 80051d2:	4770      	bx	lr

080051d4 <__retarget_lock_acquire_recursive>:
 80051d4:	4770      	bx	lr

080051d6 <__retarget_lock_release_recursive>:
 80051d6:	4770      	bx	lr

080051d8 <__swhatbuf_r>:
 80051d8:	b570      	push	{r4, r5, r6, lr}
 80051da:	460e      	mov	r6, r1
 80051dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051e0:	2900      	cmp	r1, #0
 80051e2:	b096      	sub	sp, #88	; 0x58
 80051e4:	4614      	mov	r4, r2
 80051e6:	461d      	mov	r5, r3
 80051e8:	da08      	bge.n	80051fc <__swhatbuf_r+0x24>
 80051ea:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80051ee:	2200      	movs	r2, #0
 80051f0:	602a      	str	r2, [r5, #0]
 80051f2:	061a      	lsls	r2, r3, #24
 80051f4:	d410      	bmi.n	8005218 <__swhatbuf_r+0x40>
 80051f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051fa:	e00e      	b.n	800521a <__swhatbuf_r+0x42>
 80051fc:	466a      	mov	r2, sp
 80051fe:	f000 f9a7 	bl	8005550 <_fstat_r>
 8005202:	2800      	cmp	r0, #0
 8005204:	dbf1      	blt.n	80051ea <__swhatbuf_r+0x12>
 8005206:	9a01      	ldr	r2, [sp, #4]
 8005208:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800520c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005210:	425a      	negs	r2, r3
 8005212:	415a      	adcs	r2, r3
 8005214:	602a      	str	r2, [r5, #0]
 8005216:	e7ee      	b.n	80051f6 <__swhatbuf_r+0x1e>
 8005218:	2340      	movs	r3, #64	; 0x40
 800521a:	2000      	movs	r0, #0
 800521c:	6023      	str	r3, [r4, #0]
 800521e:	b016      	add	sp, #88	; 0x58
 8005220:	bd70      	pop	{r4, r5, r6, pc}
	...

08005224 <__smakebuf_r>:
 8005224:	898b      	ldrh	r3, [r1, #12]
 8005226:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005228:	079d      	lsls	r5, r3, #30
 800522a:	4606      	mov	r6, r0
 800522c:	460c      	mov	r4, r1
 800522e:	d507      	bpl.n	8005240 <__smakebuf_r+0x1c>
 8005230:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005234:	6023      	str	r3, [r4, #0]
 8005236:	6123      	str	r3, [r4, #16]
 8005238:	2301      	movs	r3, #1
 800523a:	6163      	str	r3, [r4, #20]
 800523c:	b002      	add	sp, #8
 800523e:	bd70      	pop	{r4, r5, r6, pc}
 8005240:	ab01      	add	r3, sp, #4
 8005242:	466a      	mov	r2, sp
 8005244:	f7ff ffc8 	bl	80051d8 <__swhatbuf_r>
 8005248:	9900      	ldr	r1, [sp, #0]
 800524a:	4605      	mov	r5, r0
 800524c:	4630      	mov	r0, r6
 800524e:	f000 f895 	bl	800537c <_malloc_r>
 8005252:	b948      	cbnz	r0, 8005268 <__smakebuf_r+0x44>
 8005254:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005258:	059a      	lsls	r2, r3, #22
 800525a:	d4ef      	bmi.n	800523c <__smakebuf_r+0x18>
 800525c:	f023 0303 	bic.w	r3, r3, #3
 8005260:	f043 0302 	orr.w	r3, r3, #2
 8005264:	81a3      	strh	r3, [r4, #12]
 8005266:	e7e3      	b.n	8005230 <__smakebuf_r+0xc>
 8005268:	4b0d      	ldr	r3, [pc, #52]	; (80052a0 <__smakebuf_r+0x7c>)
 800526a:	62b3      	str	r3, [r6, #40]	; 0x28
 800526c:	89a3      	ldrh	r3, [r4, #12]
 800526e:	6020      	str	r0, [r4, #0]
 8005270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005274:	81a3      	strh	r3, [r4, #12]
 8005276:	9b00      	ldr	r3, [sp, #0]
 8005278:	6163      	str	r3, [r4, #20]
 800527a:	9b01      	ldr	r3, [sp, #4]
 800527c:	6120      	str	r0, [r4, #16]
 800527e:	b15b      	cbz	r3, 8005298 <__smakebuf_r+0x74>
 8005280:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005284:	4630      	mov	r0, r6
 8005286:	f000 f975 	bl	8005574 <_isatty_r>
 800528a:	b128      	cbz	r0, 8005298 <__smakebuf_r+0x74>
 800528c:	89a3      	ldrh	r3, [r4, #12]
 800528e:	f023 0303 	bic.w	r3, r3, #3
 8005292:	f043 0301 	orr.w	r3, r3, #1
 8005296:	81a3      	strh	r3, [r4, #12]
 8005298:	89a0      	ldrh	r0, [r4, #12]
 800529a:	4305      	orrs	r5, r0
 800529c:	81a5      	strh	r5, [r4, #12]
 800529e:	e7cd      	b.n	800523c <__smakebuf_r+0x18>
 80052a0:	08005031 	.word	0x08005031

080052a4 <_free_r>:
 80052a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80052a6:	2900      	cmp	r1, #0
 80052a8:	d044      	beq.n	8005334 <_free_r+0x90>
 80052aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052ae:	9001      	str	r0, [sp, #4]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f1a1 0404 	sub.w	r4, r1, #4
 80052b6:	bfb8      	it	lt
 80052b8:	18e4      	addlt	r4, r4, r3
 80052ba:	f000 f97d 	bl	80055b8 <__malloc_lock>
 80052be:	4a1e      	ldr	r2, [pc, #120]	; (8005338 <_free_r+0x94>)
 80052c0:	9801      	ldr	r0, [sp, #4]
 80052c2:	6813      	ldr	r3, [r2, #0]
 80052c4:	b933      	cbnz	r3, 80052d4 <_free_r+0x30>
 80052c6:	6063      	str	r3, [r4, #4]
 80052c8:	6014      	str	r4, [r2, #0]
 80052ca:	b003      	add	sp, #12
 80052cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80052d0:	f000 b978 	b.w	80055c4 <__malloc_unlock>
 80052d4:	42a3      	cmp	r3, r4
 80052d6:	d908      	bls.n	80052ea <_free_r+0x46>
 80052d8:	6825      	ldr	r5, [r4, #0]
 80052da:	1961      	adds	r1, r4, r5
 80052dc:	428b      	cmp	r3, r1
 80052de:	bf01      	itttt	eq
 80052e0:	6819      	ldreq	r1, [r3, #0]
 80052e2:	685b      	ldreq	r3, [r3, #4]
 80052e4:	1949      	addeq	r1, r1, r5
 80052e6:	6021      	streq	r1, [r4, #0]
 80052e8:	e7ed      	b.n	80052c6 <_free_r+0x22>
 80052ea:	461a      	mov	r2, r3
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	b10b      	cbz	r3, 80052f4 <_free_r+0x50>
 80052f0:	42a3      	cmp	r3, r4
 80052f2:	d9fa      	bls.n	80052ea <_free_r+0x46>
 80052f4:	6811      	ldr	r1, [r2, #0]
 80052f6:	1855      	adds	r5, r2, r1
 80052f8:	42a5      	cmp	r5, r4
 80052fa:	d10b      	bne.n	8005314 <_free_r+0x70>
 80052fc:	6824      	ldr	r4, [r4, #0]
 80052fe:	4421      	add	r1, r4
 8005300:	1854      	adds	r4, r2, r1
 8005302:	42a3      	cmp	r3, r4
 8005304:	6011      	str	r1, [r2, #0]
 8005306:	d1e0      	bne.n	80052ca <_free_r+0x26>
 8005308:	681c      	ldr	r4, [r3, #0]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	6053      	str	r3, [r2, #4]
 800530e:	4421      	add	r1, r4
 8005310:	6011      	str	r1, [r2, #0]
 8005312:	e7da      	b.n	80052ca <_free_r+0x26>
 8005314:	d902      	bls.n	800531c <_free_r+0x78>
 8005316:	230c      	movs	r3, #12
 8005318:	6003      	str	r3, [r0, #0]
 800531a:	e7d6      	b.n	80052ca <_free_r+0x26>
 800531c:	6825      	ldr	r5, [r4, #0]
 800531e:	1961      	adds	r1, r4, r5
 8005320:	428b      	cmp	r3, r1
 8005322:	bf04      	itt	eq
 8005324:	6819      	ldreq	r1, [r3, #0]
 8005326:	685b      	ldreq	r3, [r3, #4]
 8005328:	6063      	str	r3, [r4, #4]
 800532a:	bf04      	itt	eq
 800532c:	1949      	addeq	r1, r1, r5
 800532e:	6021      	streq	r1, [r4, #0]
 8005330:	6054      	str	r4, [r2, #4]
 8005332:	e7ca      	b.n	80052ca <_free_r+0x26>
 8005334:	b003      	add	sp, #12
 8005336:	bd30      	pop	{r4, r5, pc}
 8005338:	20000178 	.word	0x20000178

0800533c <sbrk_aligned>:
 800533c:	b570      	push	{r4, r5, r6, lr}
 800533e:	4e0e      	ldr	r6, [pc, #56]	; (8005378 <sbrk_aligned+0x3c>)
 8005340:	460c      	mov	r4, r1
 8005342:	6831      	ldr	r1, [r6, #0]
 8005344:	4605      	mov	r5, r0
 8005346:	b911      	cbnz	r1, 800534e <sbrk_aligned+0x12>
 8005348:	f000 f88c 	bl	8005464 <_sbrk_r>
 800534c:	6030      	str	r0, [r6, #0]
 800534e:	4621      	mov	r1, r4
 8005350:	4628      	mov	r0, r5
 8005352:	f000 f887 	bl	8005464 <_sbrk_r>
 8005356:	1c43      	adds	r3, r0, #1
 8005358:	d00a      	beq.n	8005370 <sbrk_aligned+0x34>
 800535a:	1cc4      	adds	r4, r0, #3
 800535c:	f024 0403 	bic.w	r4, r4, #3
 8005360:	42a0      	cmp	r0, r4
 8005362:	d007      	beq.n	8005374 <sbrk_aligned+0x38>
 8005364:	1a21      	subs	r1, r4, r0
 8005366:	4628      	mov	r0, r5
 8005368:	f000 f87c 	bl	8005464 <_sbrk_r>
 800536c:	3001      	adds	r0, #1
 800536e:	d101      	bne.n	8005374 <sbrk_aligned+0x38>
 8005370:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005374:	4620      	mov	r0, r4
 8005376:	bd70      	pop	{r4, r5, r6, pc}
 8005378:	2000017c 	.word	0x2000017c

0800537c <_malloc_r>:
 800537c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005380:	1ccd      	adds	r5, r1, #3
 8005382:	f025 0503 	bic.w	r5, r5, #3
 8005386:	3508      	adds	r5, #8
 8005388:	2d0c      	cmp	r5, #12
 800538a:	bf38      	it	cc
 800538c:	250c      	movcc	r5, #12
 800538e:	2d00      	cmp	r5, #0
 8005390:	4607      	mov	r7, r0
 8005392:	db01      	blt.n	8005398 <_malloc_r+0x1c>
 8005394:	42a9      	cmp	r1, r5
 8005396:	d905      	bls.n	80053a4 <_malloc_r+0x28>
 8005398:	230c      	movs	r3, #12
 800539a:	603b      	str	r3, [r7, #0]
 800539c:	2600      	movs	r6, #0
 800539e:	4630      	mov	r0, r6
 80053a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053a4:	4e2e      	ldr	r6, [pc, #184]	; (8005460 <_malloc_r+0xe4>)
 80053a6:	f000 f907 	bl	80055b8 <__malloc_lock>
 80053aa:	6833      	ldr	r3, [r6, #0]
 80053ac:	461c      	mov	r4, r3
 80053ae:	bb34      	cbnz	r4, 80053fe <_malloc_r+0x82>
 80053b0:	4629      	mov	r1, r5
 80053b2:	4638      	mov	r0, r7
 80053b4:	f7ff ffc2 	bl	800533c <sbrk_aligned>
 80053b8:	1c43      	adds	r3, r0, #1
 80053ba:	4604      	mov	r4, r0
 80053bc:	d14d      	bne.n	800545a <_malloc_r+0xde>
 80053be:	6834      	ldr	r4, [r6, #0]
 80053c0:	4626      	mov	r6, r4
 80053c2:	2e00      	cmp	r6, #0
 80053c4:	d140      	bne.n	8005448 <_malloc_r+0xcc>
 80053c6:	6823      	ldr	r3, [r4, #0]
 80053c8:	4631      	mov	r1, r6
 80053ca:	4638      	mov	r0, r7
 80053cc:	eb04 0803 	add.w	r8, r4, r3
 80053d0:	f000 f848 	bl	8005464 <_sbrk_r>
 80053d4:	4580      	cmp	r8, r0
 80053d6:	d13a      	bne.n	800544e <_malloc_r+0xd2>
 80053d8:	6821      	ldr	r1, [r4, #0]
 80053da:	3503      	adds	r5, #3
 80053dc:	1a6d      	subs	r5, r5, r1
 80053de:	f025 0503 	bic.w	r5, r5, #3
 80053e2:	3508      	adds	r5, #8
 80053e4:	2d0c      	cmp	r5, #12
 80053e6:	bf38      	it	cc
 80053e8:	250c      	movcc	r5, #12
 80053ea:	4629      	mov	r1, r5
 80053ec:	4638      	mov	r0, r7
 80053ee:	f7ff ffa5 	bl	800533c <sbrk_aligned>
 80053f2:	3001      	adds	r0, #1
 80053f4:	d02b      	beq.n	800544e <_malloc_r+0xd2>
 80053f6:	6823      	ldr	r3, [r4, #0]
 80053f8:	442b      	add	r3, r5
 80053fa:	6023      	str	r3, [r4, #0]
 80053fc:	e00e      	b.n	800541c <_malloc_r+0xa0>
 80053fe:	6822      	ldr	r2, [r4, #0]
 8005400:	1b52      	subs	r2, r2, r5
 8005402:	d41e      	bmi.n	8005442 <_malloc_r+0xc6>
 8005404:	2a0b      	cmp	r2, #11
 8005406:	d916      	bls.n	8005436 <_malloc_r+0xba>
 8005408:	1961      	adds	r1, r4, r5
 800540a:	42a3      	cmp	r3, r4
 800540c:	6025      	str	r5, [r4, #0]
 800540e:	bf18      	it	ne
 8005410:	6059      	strne	r1, [r3, #4]
 8005412:	6863      	ldr	r3, [r4, #4]
 8005414:	bf08      	it	eq
 8005416:	6031      	streq	r1, [r6, #0]
 8005418:	5162      	str	r2, [r4, r5]
 800541a:	604b      	str	r3, [r1, #4]
 800541c:	4638      	mov	r0, r7
 800541e:	f104 060b 	add.w	r6, r4, #11
 8005422:	f000 f8cf 	bl	80055c4 <__malloc_unlock>
 8005426:	f026 0607 	bic.w	r6, r6, #7
 800542a:	1d23      	adds	r3, r4, #4
 800542c:	1af2      	subs	r2, r6, r3
 800542e:	d0b6      	beq.n	800539e <_malloc_r+0x22>
 8005430:	1b9b      	subs	r3, r3, r6
 8005432:	50a3      	str	r3, [r4, r2]
 8005434:	e7b3      	b.n	800539e <_malloc_r+0x22>
 8005436:	6862      	ldr	r2, [r4, #4]
 8005438:	42a3      	cmp	r3, r4
 800543a:	bf0c      	ite	eq
 800543c:	6032      	streq	r2, [r6, #0]
 800543e:	605a      	strne	r2, [r3, #4]
 8005440:	e7ec      	b.n	800541c <_malloc_r+0xa0>
 8005442:	4623      	mov	r3, r4
 8005444:	6864      	ldr	r4, [r4, #4]
 8005446:	e7b2      	b.n	80053ae <_malloc_r+0x32>
 8005448:	4634      	mov	r4, r6
 800544a:	6876      	ldr	r6, [r6, #4]
 800544c:	e7b9      	b.n	80053c2 <_malloc_r+0x46>
 800544e:	230c      	movs	r3, #12
 8005450:	603b      	str	r3, [r7, #0]
 8005452:	4638      	mov	r0, r7
 8005454:	f000 f8b6 	bl	80055c4 <__malloc_unlock>
 8005458:	e7a1      	b.n	800539e <_malloc_r+0x22>
 800545a:	6025      	str	r5, [r4, #0]
 800545c:	e7de      	b.n	800541c <_malloc_r+0xa0>
 800545e:	bf00      	nop
 8005460:	20000178 	.word	0x20000178

08005464 <_sbrk_r>:
 8005464:	b538      	push	{r3, r4, r5, lr}
 8005466:	4d06      	ldr	r5, [pc, #24]	; (8005480 <_sbrk_r+0x1c>)
 8005468:	2300      	movs	r3, #0
 800546a:	4604      	mov	r4, r0
 800546c:	4608      	mov	r0, r1
 800546e:	602b      	str	r3, [r5, #0]
 8005470:	f7fb fbaa 	bl	8000bc8 <_sbrk>
 8005474:	1c43      	adds	r3, r0, #1
 8005476:	d102      	bne.n	800547e <_sbrk_r+0x1a>
 8005478:	682b      	ldr	r3, [r5, #0]
 800547a:	b103      	cbz	r3, 800547e <_sbrk_r+0x1a>
 800547c:	6023      	str	r3, [r4, #0]
 800547e:	bd38      	pop	{r3, r4, r5, pc}
 8005480:	20000180 	.word	0x20000180

08005484 <__sread>:
 8005484:	b510      	push	{r4, lr}
 8005486:	460c      	mov	r4, r1
 8005488:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800548c:	f000 f8a0 	bl	80055d0 <_read_r>
 8005490:	2800      	cmp	r0, #0
 8005492:	bfab      	itete	ge
 8005494:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005496:	89a3      	ldrhlt	r3, [r4, #12]
 8005498:	181b      	addge	r3, r3, r0
 800549a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800549e:	bfac      	ite	ge
 80054a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80054a2:	81a3      	strhlt	r3, [r4, #12]
 80054a4:	bd10      	pop	{r4, pc}

080054a6 <__swrite>:
 80054a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054aa:	461f      	mov	r7, r3
 80054ac:	898b      	ldrh	r3, [r1, #12]
 80054ae:	05db      	lsls	r3, r3, #23
 80054b0:	4605      	mov	r5, r0
 80054b2:	460c      	mov	r4, r1
 80054b4:	4616      	mov	r6, r2
 80054b6:	d505      	bpl.n	80054c4 <__swrite+0x1e>
 80054b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054bc:	2302      	movs	r3, #2
 80054be:	2200      	movs	r2, #0
 80054c0:	f000 f868 	bl	8005594 <_lseek_r>
 80054c4:	89a3      	ldrh	r3, [r4, #12]
 80054c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054ce:	81a3      	strh	r3, [r4, #12]
 80054d0:	4632      	mov	r2, r6
 80054d2:	463b      	mov	r3, r7
 80054d4:	4628      	mov	r0, r5
 80054d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054da:	f000 b817 	b.w	800550c <_write_r>

080054de <__sseek>:
 80054de:	b510      	push	{r4, lr}
 80054e0:	460c      	mov	r4, r1
 80054e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054e6:	f000 f855 	bl	8005594 <_lseek_r>
 80054ea:	1c43      	adds	r3, r0, #1
 80054ec:	89a3      	ldrh	r3, [r4, #12]
 80054ee:	bf15      	itete	ne
 80054f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80054f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80054f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80054fa:	81a3      	strheq	r3, [r4, #12]
 80054fc:	bf18      	it	ne
 80054fe:	81a3      	strhne	r3, [r4, #12]
 8005500:	bd10      	pop	{r4, pc}

08005502 <__sclose>:
 8005502:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005506:	f000 b813 	b.w	8005530 <_close_r>
	...

0800550c <_write_r>:
 800550c:	b538      	push	{r3, r4, r5, lr}
 800550e:	4d07      	ldr	r5, [pc, #28]	; (800552c <_write_r+0x20>)
 8005510:	4604      	mov	r4, r0
 8005512:	4608      	mov	r0, r1
 8005514:	4611      	mov	r1, r2
 8005516:	2200      	movs	r2, #0
 8005518:	602a      	str	r2, [r5, #0]
 800551a:	461a      	mov	r2, r3
 800551c:	f7fb fb0a 	bl	8000b34 <_write>
 8005520:	1c43      	adds	r3, r0, #1
 8005522:	d102      	bne.n	800552a <_write_r+0x1e>
 8005524:	682b      	ldr	r3, [r5, #0]
 8005526:	b103      	cbz	r3, 800552a <_write_r+0x1e>
 8005528:	6023      	str	r3, [r4, #0]
 800552a:	bd38      	pop	{r3, r4, r5, pc}
 800552c:	20000180 	.word	0x20000180

08005530 <_close_r>:
 8005530:	b538      	push	{r3, r4, r5, lr}
 8005532:	4d06      	ldr	r5, [pc, #24]	; (800554c <_close_r+0x1c>)
 8005534:	2300      	movs	r3, #0
 8005536:	4604      	mov	r4, r0
 8005538:	4608      	mov	r0, r1
 800553a:	602b      	str	r3, [r5, #0]
 800553c:	f7fb fb10 	bl	8000b60 <_close>
 8005540:	1c43      	adds	r3, r0, #1
 8005542:	d102      	bne.n	800554a <_close_r+0x1a>
 8005544:	682b      	ldr	r3, [r5, #0]
 8005546:	b103      	cbz	r3, 800554a <_close_r+0x1a>
 8005548:	6023      	str	r3, [r4, #0]
 800554a:	bd38      	pop	{r3, r4, r5, pc}
 800554c:	20000180 	.word	0x20000180

08005550 <_fstat_r>:
 8005550:	b538      	push	{r3, r4, r5, lr}
 8005552:	4d07      	ldr	r5, [pc, #28]	; (8005570 <_fstat_r+0x20>)
 8005554:	2300      	movs	r3, #0
 8005556:	4604      	mov	r4, r0
 8005558:	4608      	mov	r0, r1
 800555a:	4611      	mov	r1, r2
 800555c:	602b      	str	r3, [r5, #0]
 800555e:	f7fb fb0b 	bl	8000b78 <_fstat>
 8005562:	1c43      	adds	r3, r0, #1
 8005564:	d102      	bne.n	800556c <_fstat_r+0x1c>
 8005566:	682b      	ldr	r3, [r5, #0]
 8005568:	b103      	cbz	r3, 800556c <_fstat_r+0x1c>
 800556a:	6023      	str	r3, [r4, #0]
 800556c:	bd38      	pop	{r3, r4, r5, pc}
 800556e:	bf00      	nop
 8005570:	20000180 	.word	0x20000180

08005574 <_isatty_r>:
 8005574:	b538      	push	{r3, r4, r5, lr}
 8005576:	4d06      	ldr	r5, [pc, #24]	; (8005590 <_isatty_r+0x1c>)
 8005578:	2300      	movs	r3, #0
 800557a:	4604      	mov	r4, r0
 800557c:	4608      	mov	r0, r1
 800557e:	602b      	str	r3, [r5, #0]
 8005580:	f7fb fb0a 	bl	8000b98 <_isatty>
 8005584:	1c43      	adds	r3, r0, #1
 8005586:	d102      	bne.n	800558e <_isatty_r+0x1a>
 8005588:	682b      	ldr	r3, [r5, #0]
 800558a:	b103      	cbz	r3, 800558e <_isatty_r+0x1a>
 800558c:	6023      	str	r3, [r4, #0]
 800558e:	bd38      	pop	{r3, r4, r5, pc}
 8005590:	20000180 	.word	0x20000180

08005594 <_lseek_r>:
 8005594:	b538      	push	{r3, r4, r5, lr}
 8005596:	4d07      	ldr	r5, [pc, #28]	; (80055b4 <_lseek_r+0x20>)
 8005598:	4604      	mov	r4, r0
 800559a:	4608      	mov	r0, r1
 800559c:	4611      	mov	r1, r2
 800559e:	2200      	movs	r2, #0
 80055a0:	602a      	str	r2, [r5, #0]
 80055a2:	461a      	mov	r2, r3
 80055a4:	f7fb fb03 	bl	8000bae <_lseek>
 80055a8:	1c43      	adds	r3, r0, #1
 80055aa:	d102      	bne.n	80055b2 <_lseek_r+0x1e>
 80055ac:	682b      	ldr	r3, [r5, #0]
 80055ae:	b103      	cbz	r3, 80055b2 <_lseek_r+0x1e>
 80055b0:	6023      	str	r3, [r4, #0]
 80055b2:	bd38      	pop	{r3, r4, r5, pc}
 80055b4:	20000180 	.word	0x20000180

080055b8 <__malloc_lock>:
 80055b8:	4801      	ldr	r0, [pc, #4]	; (80055c0 <__malloc_lock+0x8>)
 80055ba:	f7ff be0b 	b.w	80051d4 <__retarget_lock_acquire_recursive>
 80055be:	bf00      	nop
 80055c0:	20000174 	.word	0x20000174

080055c4 <__malloc_unlock>:
 80055c4:	4801      	ldr	r0, [pc, #4]	; (80055cc <__malloc_unlock+0x8>)
 80055c6:	f7ff be06 	b.w	80051d6 <__retarget_lock_release_recursive>
 80055ca:	bf00      	nop
 80055cc:	20000174 	.word	0x20000174

080055d0 <_read_r>:
 80055d0:	b538      	push	{r3, r4, r5, lr}
 80055d2:	4d07      	ldr	r5, [pc, #28]	; (80055f0 <_read_r+0x20>)
 80055d4:	4604      	mov	r4, r0
 80055d6:	4608      	mov	r0, r1
 80055d8:	4611      	mov	r1, r2
 80055da:	2200      	movs	r2, #0
 80055dc:	602a      	str	r2, [r5, #0]
 80055de:	461a      	mov	r2, r3
 80055e0:	f7fb fa8a 	bl	8000af8 <_read>
 80055e4:	1c43      	adds	r3, r0, #1
 80055e6:	d102      	bne.n	80055ee <_read_r+0x1e>
 80055e8:	682b      	ldr	r3, [r5, #0]
 80055ea:	b103      	cbz	r3, 80055ee <_read_r+0x1e>
 80055ec:	6023      	str	r3, [r4, #0]
 80055ee:	bd38      	pop	{r3, r4, r5, pc}
 80055f0:	20000180 	.word	0x20000180

080055f4 <_init>:
 80055f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055f6:	bf00      	nop
 80055f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055fa:	bc08      	pop	{r3}
 80055fc:	469e      	mov	lr, r3
 80055fe:	4770      	bx	lr

08005600 <_fini>:
 8005600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005602:	bf00      	nop
 8005604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005606:	bc08      	pop	{r3}
 8005608:	469e      	mov	lr, r3
 800560a:	4770      	bx	lr
