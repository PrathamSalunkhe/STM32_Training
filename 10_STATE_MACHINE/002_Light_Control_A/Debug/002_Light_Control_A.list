
002_Light_Control_A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004058  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004214  08004214  00014214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004284  08004284  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004284  08004284  00014284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800428c  0800428c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800428c  0800428c  0001428c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004290  08004290  00014290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004294  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  2000000c  080042a0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  080042a0  00020158  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012744  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002099  00000000  00000000  00032780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f80  00000000  00000000  00034820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ec8  00000000  00000000  000357a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a1da  00000000  00000000  00036668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011bb3  00000000  00000000  00060842  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107ad6  00000000  00000000  000723f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00179ecb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000418c  00000000  00000000  00179f1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080041fc 	.word	0x080041fc

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	080041fc 	.word	0x080041fc

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <light_state_machine>:
/* state machine function
 *
 * outer switch case is for state transition
 * inner switch case is for event transition  */
void light_state_machine(uint8_t event)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	4603      	mov	r3, r0
 8000508:	71fb      	strb	r3, [r7, #7]
	switch (curr_state) {
 800050a:	4b66      	ldr	r3, [pc, #408]	; (80006a4 <light_state_machine+0x1a4>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	2b03      	cmp	r3, #3
 8000510:	f200 80c4 	bhi.w	800069c <light_state_machine+0x19c>
 8000514:	a201      	add	r2, pc, #4	; (adr r2, 800051c <light_state_machine+0x1c>)
 8000516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800051a:	bf00      	nop
 800051c:	0800052d 	.word	0x0800052d
 8000520:	08000585 	.word	0x08000585
 8000524:	080005e1 	.word	0x080005e1
 8000528:	08000637 	.word	0x08000637
		case LIGHTS_OFF:{
			switch (event) {
 800052c:	79fb      	ldrb	r3, [r7, #7]
 800052e:	2b03      	cmp	r3, #3
 8000530:	d01d      	beq.n	800056e <light_state_machine+0x6e>
 8000532:	2b03      	cmp	r3, #3
 8000534:	f300 80ab 	bgt.w	800068e <light_state_machine+0x18e>
 8000538:	2b00      	cmp	r3, #0
 800053a:	d002      	beq.n	8000542 <light_state_machine+0x42>
 800053c:	2b01      	cmp	r3, #1
 800053e:	d00a      	beq.n	8000556 <light_state_machine+0x56>
					HAL_TIM_Base_Start_IT(&htim17);		//start the timer for led scrolling
					HAL_TIM_Base_Stop_IT(&htim16);		//stop the timer
					break;
				}
			}
			break;
 8000540:	e0a5      	b.n	800068e <light_state_machine+0x18e>
					curr_state = LIGHT_BLINK;			//change the current state
 8000542:	4b58      	ldr	r3, [pc, #352]	; (80006a4 <light_state_machine+0x1a4>)
 8000544:	2201      	movs	r2, #1
 8000546:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Start_IT(&htim16);		//start timer for led blinking
 8000548:	4857      	ldr	r0, [pc, #348]	; (80006a8 <light_state_machine+0x1a8>)
 800054a:	f002 fcb5 	bl	8002eb8 <HAL_TIM_Base_Start_IT>
					HAL_TIM_Base_Stop_IT(&htim17);		//stop the timer
 800054e:	4857      	ldr	r0, [pc, #348]	; (80006ac <light_state_machine+0x1ac>)
 8000550:	f002 fd22 	bl	8002f98 <HAL_TIM_Base_Stop_IT>
					break;
 8000554:	e015      	b.n	8000582 <light_state_machine+0x82>
					lights_on();
 8000556:	f000 f8c1 	bl	80006dc <lights_on>
					curr_state = LIGHTS_ON;				//change the current state
 800055a:	4b52      	ldr	r3, [pc, #328]	; (80006a4 <light_state_machine+0x1a4>)
 800055c:	2202      	movs	r2, #2
 800055e:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Stop_IT(&htim16);		//stop the timer
 8000560:	4851      	ldr	r0, [pc, #324]	; (80006a8 <light_state_machine+0x1a8>)
 8000562:	f002 fd19 	bl	8002f98 <HAL_TIM_Base_Stop_IT>
					HAL_TIM_Base_Stop_IT(&htim17);		//stop the timer
 8000566:	4851      	ldr	r0, [pc, #324]	; (80006ac <light_state_machine+0x1ac>)
 8000568:	f002 fd16 	bl	8002f98 <HAL_TIM_Base_Stop_IT>
					break;
 800056c:	e009      	b.n	8000582 <light_state_machine+0x82>
					curr_state = LIGHTS_SCROLL;
 800056e:	4b4d      	ldr	r3, [pc, #308]	; (80006a4 <light_state_machine+0x1a4>)
 8000570:	2203      	movs	r2, #3
 8000572:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Start_IT(&htim17);		//start the timer for led scrolling
 8000574:	484d      	ldr	r0, [pc, #308]	; (80006ac <light_state_machine+0x1ac>)
 8000576:	f002 fc9f 	bl	8002eb8 <HAL_TIM_Base_Start_IT>
					HAL_TIM_Base_Stop_IT(&htim16);		//stop the timer
 800057a:	484b      	ldr	r0, [pc, #300]	; (80006a8 <light_state_machine+0x1a8>)
 800057c:	f002 fd0c 	bl	8002f98 <HAL_TIM_Base_Stop_IT>
					break;
 8000580:	bf00      	nop
			break;
 8000582:	e084      	b.n	800068e <light_state_machine+0x18e>
		}

		case LIGHT_BLINK:{
			switch (event) {
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	2b03      	cmp	r3, #3
 8000588:	d01f      	beq.n	80005ca <light_state_machine+0xca>
 800058a:	2b03      	cmp	r3, #3
 800058c:	f300 8081 	bgt.w	8000692 <light_state_machine+0x192>
 8000590:	2b01      	cmp	r3, #1
 8000592:	d002      	beq.n	800059a <light_state_machine+0x9a>
 8000594:	2b02      	cmp	r3, #2
 8000596:	d00c      	beq.n	80005b2 <light_state_machine+0xb2>
					HAL_TIM_Base_Start_IT(&htim17);		//start the timer for led scrolling
					HAL_TIM_Base_Stop_IT(&htim16);		//stop the timer
					break;
				}
			}
			break;
 8000598:	e07b      	b.n	8000692 <light_state_machine+0x192>
					lights_on();
 800059a:	f000 f89f 	bl	80006dc <lights_on>
					curr_state = LIGHTS_ON;				//change the current state
 800059e:	4b41      	ldr	r3, [pc, #260]	; (80006a4 <light_state_machine+0x1a4>)
 80005a0:	2202      	movs	r2, #2
 80005a2:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Stop_IT(&htim16);		//stop the timer
 80005a4:	4840      	ldr	r0, [pc, #256]	; (80006a8 <light_state_machine+0x1a8>)
 80005a6:	f002 fcf7 	bl	8002f98 <HAL_TIM_Base_Stop_IT>
					HAL_TIM_Base_Stop_IT(&htim17);		//stop the timer
 80005aa:	4840      	ldr	r0, [pc, #256]	; (80006ac <light_state_machine+0x1ac>)
 80005ac:	f002 fcf4 	bl	8002f98 <HAL_TIM_Base_Stop_IT>
					break;
 80005b0:	e015      	b.n	80005de <light_state_machine+0xde>
					lights_off();
 80005b2:	f000 f8ab 	bl	800070c <lights_off>
					curr_state = LIGHTS_OFF;			//change the current state
 80005b6:	4b3b      	ldr	r3, [pc, #236]	; (80006a4 <light_state_machine+0x1a4>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Stop_IT(&htim16);		//stop the timer
 80005bc:	483a      	ldr	r0, [pc, #232]	; (80006a8 <light_state_machine+0x1a8>)
 80005be:	f002 fceb 	bl	8002f98 <HAL_TIM_Base_Stop_IT>
					HAL_TIM_Base_Stop_IT(&htim17);		//stop the timer
 80005c2:	483a      	ldr	r0, [pc, #232]	; (80006ac <light_state_machine+0x1ac>)
 80005c4:	f002 fce8 	bl	8002f98 <HAL_TIM_Base_Stop_IT>
					break;
 80005c8:	e009      	b.n	80005de <light_state_machine+0xde>
					curr_state = LIGHTS_SCROLL;
 80005ca:	4b36      	ldr	r3, [pc, #216]	; (80006a4 <light_state_machine+0x1a4>)
 80005cc:	2203      	movs	r2, #3
 80005ce:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Start_IT(&htim17);		//start the timer for led scrolling
 80005d0:	4836      	ldr	r0, [pc, #216]	; (80006ac <light_state_machine+0x1ac>)
 80005d2:	f002 fc71 	bl	8002eb8 <HAL_TIM_Base_Start_IT>
					HAL_TIM_Base_Stop_IT(&htim16);		//stop the timer
 80005d6:	4834      	ldr	r0, [pc, #208]	; (80006a8 <light_state_machine+0x1a8>)
 80005d8:	f002 fcde 	bl	8002f98 <HAL_TIM_Base_Stop_IT>
					break;
 80005dc:	bf00      	nop
			break;
 80005de:	e058      	b.n	8000692 <light_state_machine+0x192>
		}

		case LIGHTS_ON:{
			switch (event) {
 80005e0:	79fb      	ldrb	r3, [r7, #7]
 80005e2:	2b03      	cmp	r3, #3
 80005e4:	d01c      	beq.n	8000620 <light_state_machine+0x120>
 80005e6:	2b03      	cmp	r3, #3
 80005e8:	dc55      	bgt.n	8000696 <light_state_machine+0x196>
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d002      	beq.n	80005f4 <light_state_machine+0xf4>
 80005ee:	2b02      	cmp	r3, #2
 80005f0:	d00a      	beq.n	8000608 <light_state_machine+0x108>
					HAL_TIM_Base_Start_IT(&htim17);		//start the timer for led scrolling
					HAL_TIM_Base_Stop_IT(&htim16);		//stop the timer
					break;
				}
			}
			break;
 80005f2:	e050      	b.n	8000696 <light_state_machine+0x196>
					curr_state = LIGHT_BLINK;			//change the current state
 80005f4:	4b2b      	ldr	r3, [pc, #172]	; (80006a4 <light_state_machine+0x1a4>)
 80005f6:	2201      	movs	r2, #1
 80005f8:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Start_IT(&htim16);		//start timer for led blinking
 80005fa:	482b      	ldr	r0, [pc, #172]	; (80006a8 <light_state_machine+0x1a8>)
 80005fc:	f002 fc5c 	bl	8002eb8 <HAL_TIM_Base_Start_IT>
					HAL_TIM_Base_Stop_IT(&htim17);		//stop the timer
 8000600:	482a      	ldr	r0, [pc, #168]	; (80006ac <light_state_machine+0x1ac>)
 8000602:	f002 fcc9 	bl	8002f98 <HAL_TIM_Base_Stop_IT>
					break;
 8000606:	e015      	b.n	8000634 <light_state_machine+0x134>
					lights_off();
 8000608:	f000 f880 	bl	800070c <lights_off>
					curr_state = LIGHTS_OFF;			//change the current state
 800060c:	4b25      	ldr	r3, [pc, #148]	; (80006a4 <light_state_machine+0x1a4>)
 800060e:	2200      	movs	r2, #0
 8000610:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Stop_IT(&htim17);		//stop the timer
 8000612:	4826      	ldr	r0, [pc, #152]	; (80006ac <light_state_machine+0x1ac>)
 8000614:	f002 fcc0 	bl	8002f98 <HAL_TIM_Base_Stop_IT>
					HAL_TIM_Base_Stop_IT(&htim16);		//stop the timer
 8000618:	4823      	ldr	r0, [pc, #140]	; (80006a8 <light_state_machine+0x1a8>)
 800061a:	f002 fcbd 	bl	8002f98 <HAL_TIM_Base_Stop_IT>
					break;
 800061e:	e009      	b.n	8000634 <light_state_machine+0x134>
					curr_state = LIGHTS_SCROLL;
 8000620:	4b20      	ldr	r3, [pc, #128]	; (80006a4 <light_state_machine+0x1a4>)
 8000622:	2203      	movs	r2, #3
 8000624:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Start_IT(&htim17);		//start the timer for led scrolling
 8000626:	4821      	ldr	r0, [pc, #132]	; (80006ac <light_state_machine+0x1ac>)
 8000628:	f002 fc46 	bl	8002eb8 <HAL_TIM_Base_Start_IT>
					HAL_TIM_Base_Stop_IT(&htim16);		//stop the timer
 800062c:	481e      	ldr	r0, [pc, #120]	; (80006a8 <light_state_machine+0x1a8>)
 800062e:	f002 fcb3 	bl	8002f98 <HAL_TIM_Base_Stop_IT>
					break;
 8000632:	bf00      	nop
			break;
 8000634:	e02f      	b.n	8000696 <light_state_machine+0x196>
		}

		case LIGHTS_SCROLL:{
			switch (event) {
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	2b02      	cmp	r3, #2
 800063a:	d011      	beq.n	8000660 <light_state_machine+0x160>
 800063c:	2b02      	cmp	r3, #2
 800063e:	dc2c      	bgt.n	800069a <light_state_machine+0x19a>
 8000640:	2b00      	cmp	r3, #0
 8000642:	d019      	beq.n	8000678 <light_state_machine+0x178>
 8000644:	2b01      	cmp	r3, #1
 8000646:	d128      	bne.n	800069a <light_state_machine+0x19a>
				case ON:{
					lights_on();
 8000648:	f000 f848 	bl	80006dc <lights_on>
					curr_state = LIGHTS_ON;				//change the current state
 800064c:	4b15      	ldr	r3, [pc, #84]	; (80006a4 <light_state_machine+0x1a4>)
 800064e:	2202      	movs	r2, #2
 8000650:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Stop_IT(&htim16);		//stop the timer
 8000652:	4815      	ldr	r0, [pc, #84]	; (80006a8 <light_state_machine+0x1a8>)
 8000654:	f002 fca0 	bl	8002f98 <HAL_TIM_Base_Stop_IT>
					HAL_TIM_Base_Stop_IT(&htim17);		//stop the timer
 8000658:	4814      	ldr	r0, [pc, #80]	; (80006ac <light_state_machine+0x1ac>)
 800065a:	f002 fc9d 	bl	8002f98 <HAL_TIM_Base_Stop_IT>
					break;
 800065e:	e015      	b.n	800068c <light_state_machine+0x18c>
				}
				case OFF:{
					lights_off();
 8000660:	f000 f854 	bl	800070c <lights_off>
					curr_state = LIGHTS_OFF;			//change the current state
 8000664:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <light_state_machine+0x1a4>)
 8000666:	2200      	movs	r2, #0
 8000668:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Stop_IT(&htim16);		//stop the timer
 800066a:	480f      	ldr	r0, [pc, #60]	; (80006a8 <light_state_machine+0x1a8>)
 800066c:	f002 fc94 	bl	8002f98 <HAL_TIM_Base_Stop_IT>
					HAL_TIM_Base_Stop_IT(&htim17);		//stop the timer
 8000670:	480e      	ldr	r0, [pc, #56]	; (80006ac <light_state_machine+0x1ac>)
 8000672:	f002 fc91 	bl	8002f98 <HAL_TIM_Base_Stop_IT>
					break;
 8000676:	e009      	b.n	800068c <light_state_machine+0x18c>
				}
				case BLINK:{
					curr_state = LIGHT_BLINK;			//change the current state
 8000678:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <light_state_machine+0x1a4>)
 800067a:	2201      	movs	r2, #1
 800067c:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Start_IT(&htim16);		//start timer for led blinking
 800067e:	480a      	ldr	r0, [pc, #40]	; (80006a8 <light_state_machine+0x1a8>)
 8000680:	f002 fc1a 	bl	8002eb8 <HAL_TIM_Base_Start_IT>
					HAL_TIM_Base_Stop_IT(&htim17);		//stop the timer
 8000684:	4809      	ldr	r0, [pc, #36]	; (80006ac <light_state_machine+0x1ac>)
 8000686:	f002 fc87 	bl	8002f98 <HAL_TIM_Base_Stop_IT>
					break;
 800068a:	bf00      	nop
				}
			}
			break;
 800068c:	e005      	b.n	800069a <light_state_machine+0x19a>
			break;
 800068e:	bf00      	nop
 8000690:	e004      	b.n	800069c <light_state_machine+0x19c>
			break;
 8000692:	bf00      	nop
 8000694:	e002      	b.n	800069c <light_state_machine+0x19c>
			break;
 8000696:	bf00      	nop
 8000698:	e000      	b.n	800069c <light_state_machine+0x19c>
			break;
 800069a:	bf00      	nop
		}
	}
}
 800069c:	bf00      	nop
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000150 	.word	0x20000150
 80006a8:	200000b8 	.word	0x200000b8
 80006ac:	20000104 	.word	0x20000104

080006b0 <lights_blink>:

/* led blinking function */
void lights_blink()
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(BSP_USER_LED_1_GPIO_Port, BSP_USER_LED_1_Pin);
 80006b4:	2180      	movs	r1, #128	; 0x80
 80006b6:	4807      	ldr	r0, [pc, #28]	; (80006d4 <lights_blink+0x24>)
 80006b8:	f000 fec8 	bl	800144c <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(BSP_USER_LED_2_GPIO_Port, BSP_USER_LED_2_Pin);
 80006bc:	2180      	movs	r1, #128	; 0x80
 80006be:	4806      	ldr	r0, [pc, #24]	; (80006d8 <lights_blink+0x28>)
 80006c0:	f000 fec4 	bl	800144c <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(BSP_USER_LED_3_GPIO_Port, BSP_USER_LED_3_Pin);
 80006c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006c8:	4803      	ldr	r0, [pc, #12]	; (80006d8 <lights_blink+0x28>)
 80006ca:	f000 febf 	bl	800144c <HAL_GPIO_TogglePin>
}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	48000800 	.word	0x48000800
 80006d8:	48000400 	.word	0x48000400

080006dc <lights_on>:

/* function for turning leds on */
void lights_on()
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BSP_USER_LED_1_GPIO_Port, BSP_USER_LED_1_Pin,
 80006e0:	2201      	movs	r2, #1
 80006e2:	2180      	movs	r1, #128	; 0x80
 80006e4:	4807      	ldr	r0, [pc, #28]	; (8000704 <lights_on+0x28>)
 80006e6:	f000 fe99 	bl	800141c <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
	HAL_GPIO_WritePin(BSP_USER_LED_2_GPIO_Port, BSP_USER_LED_2_Pin,
 80006ea:	2201      	movs	r2, #1
 80006ec:	2180      	movs	r1, #128	; 0x80
 80006ee:	4806      	ldr	r0, [pc, #24]	; (8000708 <lights_on+0x2c>)
 80006f0:	f000 fe94 	bl	800141c <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
	HAL_GPIO_WritePin(BSP_USER_LED_3_GPIO_Port, BSP_USER_LED_3_Pin,
 80006f4:	2201      	movs	r2, #1
 80006f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006fa:	4803      	ldr	r0, [pc, #12]	; (8000708 <lights_on+0x2c>)
 80006fc:	f000 fe8e 	bl	800141c <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}
 8000704:	48000800 	.word	0x48000800
 8000708:	48000400 	.word	0x48000400

0800070c <lights_off>:

/* function for turning leds off */
void lights_off()
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BSP_USER_LED_1_GPIO_Port, BSP_USER_LED_1_Pin,
 8000710:	2200      	movs	r2, #0
 8000712:	2180      	movs	r1, #128	; 0x80
 8000714:	4807      	ldr	r0, [pc, #28]	; (8000734 <lights_off+0x28>)
 8000716:	f000 fe81 	bl	800141c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(BSP_USER_LED_2_GPIO_Port, BSP_USER_LED_2_Pin,
 800071a:	2200      	movs	r2, #0
 800071c:	2180      	movs	r1, #128	; 0x80
 800071e:	4806      	ldr	r0, [pc, #24]	; (8000738 <lights_off+0x2c>)
 8000720:	f000 fe7c 	bl	800141c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(BSP_USER_LED_3_GPIO_Port, BSP_USER_LED_3_Pin,
 8000724:	2200      	movs	r2, #0
 8000726:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800072a:	4803      	ldr	r0, [pc, #12]	; (8000738 <lights_off+0x2c>)
 800072c:	f000 fe76 	bl	800141c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	48000800 	.word	0x48000800
 8000738:	48000400 	.word	0x48000400

0800073c <lights_scroll>:

void lights_scroll()
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BSP_USER_LED_1_GPIO_Port, BSP_USER_LED_1_Pin,
 8000740:	2200      	movs	r2, #0
 8000742:	2180      	movs	r1, #128	; 0x80
 8000744:	481e      	ldr	r0, [pc, #120]	; (80007c0 <lights_scroll+0x84>)
 8000746:	f000 fe69 	bl	800141c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(BSP_USER_LED_2_GPIO_Port, BSP_USER_LED_2_Pin,
 800074a:	2200      	movs	r2, #0
 800074c:	2180      	movs	r1, #128	; 0x80
 800074e:	481d      	ldr	r0, [pc, #116]	; (80007c4 <lights_scroll+0x88>)
 8000750:	f000 fe64 	bl	800141c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(BSP_USER_LED_3_GPIO_Port, BSP_USER_LED_3_Pin,
 8000754:	2200      	movs	r2, #0
 8000756:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800075a:	481a      	ldr	r0, [pc, #104]	; (80007c4 <lights_scroll+0x88>)
 800075c:	f000 fe5e 	bl	800141c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	switch (led_index) {
 8000760:	4b19      	ldr	r3, [pc, #100]	; (80007c8 <lights_scroll+0x8c>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	2b02      	cmp	r3, #2
 8000766:	d012      	beq.n	800078e <lights_scroll+0x52>
 8000768:	2b02      	cmp	r3, #2
 800076a:	dc17      	bgt.n	800079c <lights_scroll+0x60>
 800076c:	2b00      	cmp	r3, #0
 800076e:	d002      	beq.n	8000776 <lights_scroll+0x3a>
 8000770:	2b01      	cmp	r3, #1
 8000772:	d006      	beq.n	8000782 <lights_scroll+0x46>
 8000774:	e012      	b.n	800079c <lights_scroll+0x60>
	case 0:
		HAL_GPIO_WritePin(BSP_USER_LED_1_GPIO_Port, BSP_USER_LED_1_Pin,
 8000776:	2201      	movs	r2, #1
 8000778:	2180      	movs	r1, #128	; 0x80
 800077a:	4811      	ldr	r0, [pc, #68]	; (80007c0 <lights_scroll+0x84>)
 800077c:	f000 fe4e 	bl	800141c <HAL_GPIO_WritePin>
				GPIO_PIN_SET);  // Turn on LED1
		break;
 8000780:	e00c      	b.n	800079c <lights_scroll+0x60>
	case 1:
		HAL_GPIO_WritePin(BSP_USER_LED_2_GPIO_Port, BSP_USER_LED_2_Pin,
 8000782:	2201      	movs	r2, #1
 8000784:	2180      	movs	r1, #128	; 0x80
 8000786:	480f      	ldr	r0, [pc, #60]	; (80007c4 <lights_scroll+0x88>)
 8000788:	f000 fe48 	bl	800141c <HAL_GPIO_WritePin>
				GPIO_PIN_SET); // Turn on LED2
		break;
 800078c:	e006      	b.n	800079c <lights_scroll+0x60>
	case 2:
		HAL_GPIO_WritePin(BSP_USER_LED_3_GPIO_Port, BSP_USER_LED_3_Pin,
 800078e:	2201      	movs	r2, #1
 8000790:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000794:	480b      	ldr	r0, [pc, #44]	; (80007c4 <lights_scroll+0x88>)
 8000796:	f000 fe41 	bl	800141c <HAL_GPIO_WritePin>
				GPIO_PIN_SET);  // Turn on LED3
		break;
 800079a:	bf00      	nop
	}

	led_index = (led_index + 1) % 3;  // Move to the next LED
 800079c:	4b0a      	ldr	r3, [pc, #40]	; (80007c8 <lights_scroll+0x8c>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	1c5a      	adds	r2, r3, #1
 80007a2:	4b0a      	ldr	r3, [pc, #40]	; (80007cc <lights_scroll+0x90>)
 80007a4:	fb83 3102 	smull	r3, r1, r3, r2
 80007a8:	17d3      	asrs	r3, r2, #31
 80007aa:	1ac9      	subs	r1, r1, r3
 80007ac:	460b      	mov	r3, r1
 80007ae:	005b      	lsls	r3, r3, #1
 80007b0:	440b      	add	r3, r1
 80007b2:	1ad1      	subs	r1, r2, r3
 80007b4:	b2ca      	uxtb	r2, r1
 80007b6:	4b04      	ldr	r3, [pc, #16]	; (80007c8 <lights_scroll+0x8c>)
 80007b8:	701a      	strb	r2, [r3, #0]

}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	48000800 	.word	0x48000800
 80007c4:	48000400 	.word	0x48000400
 80007c8:	20000151 	.word	0x20000151
 80007cc:	55555556 	.word	0x55555556

080007d0 <HAL_TIM_PeriodElapsedCallback>:

/* this function wll call after every 1 second due to which leds can blink continuously */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM16)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a0c      	ldr	r2, [pc, #48]	; (8000810 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d106      	bne.n	80007f0 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		if (curr_state == LIGHT_BLINK)
 80007e2:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d10d      	bne.n	8000806 <HAL_TIM_PeriodElapsedCallback+0x36>
		{
			lights_blink();
 80007ea:	f7ff ff61 	bl	80006b0 <lights_blink>
		if(curr_state == LIGHTS_SCROLL)
		{
			lights_scroll();
		}
	}
}
 80007ee:	e00a      	b.n	8000806 <HAL_TIM_PeriodElapsedCallback+0x36>
	else if(htim->Instance == TIM17)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a08      	ldr	r2, [pc, #32]	; (8000818 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d105      	bne.n	8000806 <HAL_TIM_PeriodElapsedCallback+0x36>
		if(curr_state == LIGHTS_SCROLL)
 80007fa:	4b06      	ldr	r3, [pc, #24]	; (8000814 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	2b03      	cmp	r3, #3
 8000800:	d101      	bne.n	8000806 <HAL_TIM_PeriodElapsedCallback+0x36>
			lights_scroll();
 8000802:	f7ff ff9b 	bl	800073c <lights_scroll>
}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40014400 	.word	0x40014400
 8000814:	20000150 	.word	0x20000150
 8000818:	40014800 	.word	0x40014800

0800081c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000820:	f000 fae3 	bl	8000dea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000824:	f000 f840 	bl	80008a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000828:	f000 f92a 	bl	8000a80 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800082c:	f000 f88e 	bl	800094c <MX_LPUART1_UART_Init>
  MX_TIM16_Init();
 8000830:	f000 f8d8 	bl	80009e4 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000834:	f000 f8fe 	bl	8000a34 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim16);
 8000838:	4817      	ldr	r0, [pc, #92]	; (8000898 <main+0x7c>)
 800083a:	f002 fb3d 	bl	8002eb8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim17);
 800083e:	4817      	ldr	r0, [pc, #92]	; (800089c <main+0x80>)
 8000840:	f002 fb3a 	bl	8002eb8 <HAL_TIM_Base_Start_IT>

    /* USER CODE BEGIN 3 */

	  /* event dispatcher using uart
	   * receive the command through uart due to which respective event will generate */
	  if(HAL_UART_Receive(&hlpuart1, &rx_buffer, 1, HAL_MAX_DELAY) == HAL_OK)
 8000844:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000848:	2201      	movs	r2, #1
 800084a:	4915      	ldr	r1, [pc, #84]	; (80008a0 <main+0x84>)
 800084c:	4815      	ldr	r0, [pc, #84]	; (80008a4 <main+0x88>)
 800084e:	f002 fe21 	bl	8003494 <HAL_UART_Receive>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d1f5      	bne.n	8000844 <main+0x28>
	  {
//		  rx_data = rx_buffer;
//		  printf("received data is: %d\r\n", rx_data);


		  if(rx_buffer == 'b')
 8000858:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <main+0x84>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	2b62      	cmp	r3, #98	; 0x62
 800085e:	d103      	bne.n	8000868 <main+0x4c>
		  {
			  light_state_machine(BLINK);
 8000860:	2000      	movs	r0, #0
 8000862:	f7ff fe4d 	bl	8000500 <light_state_machine>
 8000866:	e7ed      	b.n	8000844 <main+0x28>
		  }
		  else if(rx_buffer == 'o')
 8000868:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <main+0x84>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b6f      	cmp	r3, #111	; 0x6f
 800086e:	d103      	bne.n	8000878 <main+0x5c>
		  {
			  light_state_machine(ON);
 8000870:	2001      	movs	r0, #1
 8000872:	f7ff fe45 	bl	8000500 <light_state_machine>
 8000876:	e7e5      	b.n	8000844 <main+0x28>
		  }
		  else if(rx_buffer == 's')
 8000878:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <main+0x84>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	2b73      	cmp	r3, #115	; 0x73
 800087e:	d103      	bne.n	8000888 <main+0x6c>
		  {
			  light_state_machine(SCROLL);
 8000880:	2003      	movs	r0, #3
 8000882:	f7ff fe3d 	bl	8000500 <light_state_machine>
 8000886:	e7dd      	b.n	8000844 <main+0x28>
		  }
		  else if(rx_buffer == 'f')
 8000888:	4b05      	ldr	r3, [pc, #20]	; (80008a0 <main+0x84>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	2b66      	cmp	r3, #102	; 0x66
 800088e:	d1d9      	bne.n	8000844 <main+0x28>
		  {
			  light_state_machine(OFF);
 8000890:	2002      	movs	r0, #2
 8000892:	f7ff fe35 	bl	8000500 <light_state_machine>
	  if(HAL_UART_Receive(&hlpuart1, &rx_buffer, 1, HAL_MAX_DELAY) == HAL_OK)
 8000896:	e7d5      	b.n	8000844 <main+0x28>
 8000898:	200000b8 	.word	0x200000b8
 800089c:	20000104 	.word	0x20000104
 80008a0:	20000152 	.word	0x20000152
 80008a4:	20000028 	.word	0x20000028

080008a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b096      	sub	sp, #88	; 0x58
 80008ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ae:	f107 0314 	add.w	r3, r7, #20
 80008b2:	2244      	movs	r2, #68	; 0x44
 80008b4:	2100      	movs	r1, #0
 80008b6:	4618      	mov	r0, r3
 80008b8:	f003 fc98 	bl	80041ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008bc:	463b      	mov	r3, r7
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
 80008c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008ca:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008ce:	f000 fdf7 	bl	80014c0 <HAL_PWREx_ControlVoltageScaling>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80008d8:	f000 f942 	bl	8000b60 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008dc:	2302      	movs	r3, #2
 80008de:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008e4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008e6:	2340      	movs	r3, #64	; 0x40
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ea:	2302      	movs	r3, #2
 80008ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008ee:	2302      	movs	r3, #2
 80008f0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008f2:	2301      	movs	r3, #1
 80008f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 80008f6:	2308      	movs	r3, #8
 80008f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008fa:	2302      	movs	r3, #2
 80008fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008fe:	2302      	movs	r3, #2
 8000900:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000902:	2302      	movs	r3, #2
 8000904:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	4618      	mov	r0, r3
 800090c:	f000 fe8c 	bl	8001628 <HAL_RCC_OscConfig>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000916:	f000 f923 	bl	8000b60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800091a:	230f      	movs	r3, #15
 800091c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800091e:	2303      	movs	r3, #3
 8000920:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000922:	2300      	movs	r3, #0
 8000924:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000926:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800092a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800092c:	2300      	movs	r3, #0
 800092e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000930:	463b      	mov	r3, r7
 8000932:	2103      	movs	r1, #3
 8000934:	4618      	mov	r0, r3
 8000936:	f001 fa91 	bl	8001e5c <HAL_RCC_ClockConfig>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000940:	f000 f90e 	bl	8000b60 <Error_Handler>
  }
}
 8000944:	bf00      	nop
 8000946:	3758      	adds	r7, #88	; 0x58
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000950:	4b22      	ldr	r3, [pc, #136]	; (80009dc <MX_LPUART1_UART_Init+0x90>)
 8000952:	4a23      	ldr	r2, [pc, #140]	; (80009e0 <MX_LPUART1_UART_Init+0x94>)
 8000954:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000956:	4b21      	ldr	r3, [pc, #132]	; (80009dc <MX_LPUART1_UART_Init+0x90>)
 8000958:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800095c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800095e:	4b1f      	ldr	r3, [pc, #124]	; (80009dc <MX_LPUART1_UART_Init+0x90>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000964:	4b1d      	ldr	r3, [pc, #116]	; (80009dc <MX_LPUART1_UART_Init+0x90>)
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800096a:	4b1c      	ldr	r3, [pc, #112]	; (80009dc <MX_LPUART1_UART_Init+0x90>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000970:	4b1a      	ldr	r3, [pc, #104]	; (80009dc <MX_LPUART1_UART_Init+0x90>)
 8000972:	220c      	movs	r2, #12
 8000974:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000976:	4b19      	ldr	r3, [pc, #100]	; (80009dc <MX_LPUART1_UART_Init+0x90>)
 8000978:	2200      	movs	r2, #0
 800097a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800097c:	4b17      	ldr	r3, [pc, #92]	; (80009dc <MX_LPUART1_UART_Init+0x90>)
 800097e:	2200      	movs	r2, #0
 8000980:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000982:	4b16      	ldr	r3, [pc, #88]	; (80009dc <MX_LPUART1_UART_Init+0x90>)
 8000984:	2200      	movs	r2, #0
 8000986:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000988:	4b14      	ldr	r3, [pc, #80]	; (80009dc <MX_LPUART1_UART_Init+0x90>)
 800098a:	2200      	movs	r2, #0
 800098c:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800098e:	4b13      	ldr	r3, [pc, #76]	; (80009dc <MX_LPUART1_UART_Init+0x90>)
 8000990:	2200      	movs	r2, #0
 8000992:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000994:	4811      	ldr	r0, [pc, #68]	; (80009dc <MX_LPUART1_UART_Init+0x90>)
 8000996:	f002 fd2d 	bl	80033f4 <HAL_UART_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80009a0:	f000 f8de 	bl	8000b60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009a4:	2100      	movs	r1, #0
 80009a6:	480d      	ldr	r0, [pc, #52]	; (80009dc <MX_LPUART1_UART_Init+0x90>)
 80009a8:	f003 fb32 	bl	8004010 <HAL_UARTEx_SetTxFifoThreshold>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80009b2:	f000 f8d5 	bl	8000b60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009b6:	2100      	movs	r1, #0
 80009b8:	4808      	ldr	r0, [pc, #32]	; (80009dc <MX_LPUART1_UART_Init+0x90>)
 80009ba:	f003 fb67 	bl	800408c <HAL_UARTEx_SetRxFifoThreshold>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80009c4:	f000 f8cc 	bl	8000b60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80009c8:	4804      	ldr	r0, [pc, #16]	; (80009dc <MX_LPUART1_UART_Init+0x90>)
 80009ca:	f003 fae8 	bl	8003f9e <HAL_UARTEx_DisableFifoMode>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80009d4:	f000 f8c4 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20000028 	.word	0x20000028
 80009e0:	40008000 	.word	0x40008000

080009e4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80009e8:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <MX_TIM16_Init+0x48>)
 80009ea:	4a11      	ldr	r2, [pc, #68]	; (8000a30 <MX_TIM16_Init+0x4c>)
 80009ec:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 64000-1;
 80009ee:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <MX_TIM16_Init+0x48>)
 80009f0:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80009f4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f6:	4b0d      	ldr	r3, [pc, #52]	; (8000a2c <MX_TIM16_Init+0x48>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 500-1;
 80009fc:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <MX_TIM16_Init+0x48>)
 80009fe:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000a02:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a04:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <MX_TIM16_Init+0x48>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000a0a:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <MX_TIM16_Init+0x48>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a10:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <MX_TIM16_Init+0x48>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000a16:	4805      	ldr	r0, [pc, #20]	; (8000a2c <MX_TIM16_Init+0x48>)
 8000a18:	f002 f9f6 	bl	8002e08 <HAL_TIM_Base_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8000a22:	f000 f89d 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	200000b8 	.word	0x200000b8
 8000a30:	40014400 	.word	0x40014400

08000a34 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000a38:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <MX_TIM17_Init+0x44>)
 8000a3a:	4a10      	ldr	r2, [pc, #64]	; (8000a7c <MX_TIM17_Init+0x48>)
 8000a3c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 64000-1;
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <MX_TIM17_Init+0x44>)
 8000a40:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000a44:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a46:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <MX_TIM17_Init+0x44>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 200-1;
 8000a4c:	4b0a      	ldr	r3, [pc, #40]	; (8000a78 <MX_TIM17_Init+0x44>)
 8000a4e:	22c7      	movs	r2, #199	; 0xc7
 8000a50:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a52:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <MX_TIM17_Init+0x44>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000a58:	4b07      	ldr	r3, [pc, #28]	; (8000a78 <MX_TIM17_Init+0x44>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a5e:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <MX_TIM17_Init+0x44>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000a64:	4804      	ldr	r0, [pc, #16]	; (8000a78 <MX_TIM17_Init+0x44>)
 8000a66:	f002 f9cf 	bl	8002e08 <HAL_TIM_Base_Init>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8000a70:	f000 f876 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20000104 	.word	0x20000104
 8000a7c:	40014800 	.word	0x40014800

08000a80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b088      	sub	sp, #32
 8000a84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a86:	f107 030c 	add.w	r3, r7, #12
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
 8000a90:	609a      	str	r2, [r3, #8]
 8000a92:	60da      	str	r2, [r3, #12]
 8000a94:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a96:	4b2f      	ldr	r3, [pc, #188]	; (8000b54 <MX_GPIO_Init+0xd4>)
 8000a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9a:	4a2e      	ldr	r2, [pc, #184]	; (8000b54 <MX_GPIO_Init+0xd4>)
 8000a9c:	f043 0304 	orr.w	r3, r3, #4
 8000aa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aa2:	4b2c      	ldr	r3, [pc, #176]	; (8000b54 <MX_GPIO_Init+0xd4>)
 8000aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa6:	f003 0304 	and.w	r3, r3, #4
 8000aaa:	60bb      	str	r3, [r7, #8]
 8000aac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aae:	4b29      	ldr	r3, [pc, #164]	; (8000b54 <MX_GPIO_Init+0xd4>)
 8000ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab2:	4a28      	ldr	r2, [pc, #160]	; (8000b54 <MX_GPIO_Init+0xd4>)
 8000ab4:	f043 0302 	orr.w	r3, r3, #2
 8000ab8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aba:	4b26      	ldr	r3, [pc, #152]	; (8000b54 <MX_GPIO_Init+0xd4>)
 8000abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000abe:	f003 0302 	and.w	r3, r3, #2
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ac6:	4b23      	ldr	r3, [pc, #140]	; (8000b54 <MX_GPIO_Init+0xd4>)
 8000ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aca:	4a22      	ldr	r2, [pc, #136]	; (8000b54 <MX_GPIO_Init+0xd4>)
 8000acc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ad0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ad2:	4b20      	ldr	r3, [pc, #128]	; (8000b54 <MX_GPIO_Init+0xd4>)
 8000ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ada:	603b      	str	r3, [r7, #0]
 8000adc:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 8000ade:	f000 fd93 	bl	8001608 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BSP_USER_LED_3_Pin|BSP_USER_LED_2_Pin, GPIO_PIN_RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000ae8:	481b      	ldr	r0, [pc, #108]	; (8000b58 <MX_GPIO_Init+0xd8>)
 8000aea:	f000 fc97 	bl	800141c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BSP_USER_LED_1_GPIO_Port, BSP_USER_LED_1_Pin, GPIO_PIN_RESET);
 8000aee:	2200      	movs	r2, #0
 8000af0:	2180      	movs	r1, #128	; 0x80
 8000af2:	481a      	ldr	r0, [pc, #104]	; (8000b5c <MX_GPIO_Init+0xdc>)
 8000af4:	f000 fc92 	bl	800141c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BSP_USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = BSP_USER_BUTTON_Pin;
 8000af8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000afc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000afe:	2300      	movs	r3, #0
 8000b00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b02:	2302      	movs	r3, #2
 8000b04:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BSP_USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000b06:	f107 030c 	add.w	r3, r7, #12
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4813      	ldr	r0, [pc, #76]	; (8000b5c <MX_GPIO_Init+0xdc>)
 8000b0e:	f000 faf3 	bl	80010f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BSP_USER_LED_3_Pin BSP_USER_LED_2_Pin */
  GPIO_InitStruct.Pin = BSP_USER_LED_3_Pin|BSP_USER_LED_2_Pin;
 8000b12:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000b16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b24:	f107 030c 	add.w	r3, r7, #12
 8000b28:	4619      	mov	r1, r3
 8000b2a:	480b      	ldr	r0, [pc, #44]	; (8000b58 <MX_GPIO_Init+0xd8>)
 8000b2c:	f000 fae4 	bl	80010f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BSP_USER_LED_1_Pin */
  GPIO_InitStruct.Pin = BSP_USER_LED_1_Pin;
 8000b30:	2380      	movs	r3, #128	; 0x80
 8000b32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b34:	2301      	movs	r3, #1
 8000b36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BSP_USER_LED_1_GPIO_Port, &GPIO_InitStruct);
 8000b40:	f107 030c 	add.w	r3, r7, #12
 8000b44:	4619      	mov	r1, r3
 8000b46:	4805      	ldr	r0, [pc, #20]	; (8000b5c <MX_GPIO_Init+0xdc>)
 8000b48:	f000 fad6 	bl	80010f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b4c:	bf00      	nop
 8000b4e:	3720      	adds	r7, #32
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40021000 	.word	0x40021000
 8000b58:	48000400 	.word	0x48000400
 8000b5c:	48000800 	.word	0x48000800

08000b60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b64:	b672      	cpsid	i
}
 8000b66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <Error_Handler+0x8>
	...

08000b6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b72:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <HAL_MspInit+0x44>)
 8000b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b76:	4a0e      	ldr	r2, [pc, #56]	; (8000bb0 <HAL_MspInit+0x44>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b7e:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <HAL_MspInit+0x44>)
 8000b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8a:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <HAL_MspInit+0x44>)
 8000b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b8e:	4a08      	ldr	r2, [pc, #32]	; (8000bb0 <HAL_MspInit+0x44>)
 8000b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b94:	6593      	str	r3, [r2, #88]	; 0x58
 8000b96:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <HAL_MspInit+0x44>)
 8000b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b9e:	603b      	str	r3, [r7, #0]
 8000ba0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	40021000 	.word	0x40021000

08000bb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b0ae      	sub	sp, #184	; 0xb8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bcc:	f107 0310 	add.w	r3, r7, #16
 8000bd0:	2294      	movs	r2, #148	; 0x94
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f003 fb09 	bl	80041ec <memset>
  if(huart->Instance==LPUART1)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a22      	ldr	r2, [pc, #136]	; (8000c68 <HAL_UART_MspInit+0xb4>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d13d      	bne.n	8000c60 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000be4:	2320      	movs	r3, #32
 8000be6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000be8:	2300      	movs	r3, #0
 8000bea:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bec:	f107 0310 	add.w	r3, r7, #16
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f001 fbf1 	bl	80023d8 <HAL_RCCEx_PeriphCLKConfig>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000bfc:	f7ff ffb0 	bl	8000b60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000c00:	4b1a      	ldr	r3, [pc, #104]	; (8000c6c <HAL_UART_MspInit+0xb8>)
 8000c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c04:	4a19      	ldr	r2, [pc, #100]	; (8000c6c <HAL_UART_MspInit+0xb8>)
 8000c06:	f043 0301 	orr.w	r3, r3, #1
 8000c0a:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000c0c:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <HAL_UART_MspInit+0xb8>)
 8000c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c10:	f003 0301 	and.w	r3, r3, #1
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c18:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <HAL_UART_MspInit+0xb8>)
 8000c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1c:	4a13      	ldr	r2, [pc, #76]	; (8000c6c <HAL_UART_MspInit+0xb8>)
 8000c1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c24:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <HAL_UART_MspInit+0xb8>)
 8000c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c2c:	60bb      	str	r3, [r7, #8]
 8000c2e:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000c30:	f000 fcea 	bl	8001608 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = BSP_DEBUG_UART_TX_Pin|BSP_DEBUG_UART_RX_Pin;
 8000c34:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000c38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000c4e:	2308      	movs	r3, #8
 8000c50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c54:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4805      	ldr	r0, [pc, #20]	; (8000c70 <HAL_UART_MspInit+0xbc>)
 8000c5c:	f000 fa4c 	bl	80010f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000c60:	bf00      	nop
 8000c62:	37b8      	adds	r7, #184	; 0xb8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	40008000 	.word	0x40008000
 8000c6c:	40021000 	.word	0x40021000
 8000c70:	48001800 	.word	0x48001800

08000c74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a1a      	ldr	r2, [pc, #104]	; (8000cec <HAL_TIM_Base_MspInit+0x78>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d114      	bne.n	8000cb0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000c86:	4b1a      	ldr	r3, [pc, #104]	; (8000cf0 <HAL_TIM_Base_MspInit+0x7c>)
 8000c88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c8a:	4a19      	ldr	r2, [pc, #100]	; (8000cf0 <HAL_TIM_Base_MspInit+0x7c>)
 8000c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c90:	6613      	str	r3, [r2, #96]	; 0x60
 8000c92:	4b17      	ldr	r3, [pc, #92]	; (8000cf0 <HAL_TIM_Base_MspInit+0x7c>)
 8000c94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	2019      	movs	r0, #25
 8000ca4:	f000 f9f1 	bl	800108a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000ca8:	2019      	movs	r0, #25
 8000caa:	f000 fa0a 	bl	80010c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000cae:	e018      	b.n	8000ce2 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM17)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a0f      	ldr	r2, [pc, #60]	; (8000cf4 <HAL_TIM_Base_MspInit+0x80>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d113      	bne.n	8000ce2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000cba:	4b0d      	ldr	r3, [pc, #52]	; (8000cf0 <HAL_TIM_Base_MspInit+0x7c>)
 8000cbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cbe:	4a0c      	ldr	r2, [pc, #48]	; (8000cf0 <HAL_TIM_Base_MspInit+0x7c>)
 8000cc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cc4:	6613      	str	r3, [r2, #96]	; 0x60
 8000cc6:	4b0a      	ldr	r3, [pc, #40]	; (8000cf0 <HAL_TIM_Base_MspInit+0x7c>)
 8000cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cce:	60bb      	str	r3, [r7, #8]
 8000cd0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	201a      	movs	r0, #26
 8000cd8:	f000 f9d7 	bl	800108a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000cdc:	201a      	movs	r0, #26
 8000cde:	f000 f9f0 	bl	80010c2 <HAL_NVIC_EnableIRQ>
}
 8000ce2:	bf00      	nop
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40014400 	.word	0x40014400
 8000cf0:	40021000 	.word	0x40021000
 8000cf4:	40014800 	.word	0x40014800

08000cf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <NMI_Handler+0x4>

08000cfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d02:	e7fe      	b.n	8000d02 <HardFault_Handler+0x4>

08000d04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <MemManage_Handler+0x4>

08000d0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d0e:	e7fe      	b.n	8000d0e <BusFault_Handler+0x4>

08000d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <UsageFault_Handler+0x4>

08000d16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr

08000d32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d44:	f000 f8a6 	bl	8000e94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000d50:	4802      	ldr	r0, [pc, #8]	; (8000d5c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000d52:	f002 f950 	bl	8002ff6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	200000b8 	.word	0x200000b8

08000d60 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000d64:	4802      	ldr	r0, [pc, #8]	; (8000d70 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000d66:	f002 f946 	bl	8002ff6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000104 	.word	0x20000104

08000d74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <SystemInit+0x20>)
 8000d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d7e:	4a05      	ldr	r2, [pc, #20]	; (8000d94 <SystemInit+0x20>)
 8000d80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dd0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d9c:	f7ff ffea 	bl	8000d74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000da0:	480c      	ldr	r0, [pc, #48]	; (8000dd4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000da2:	490d      	ldr	r1, [pc, #52]	; (8000dd8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000da4:	4a0d      	ldr	r2, [pc, #52]	; (8000ddc <LoopForever+0xe>)
  movs r3, #0
 8000da6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da8:	e002      	b.n	8000db0 <LoopCopyDataInit>

08000daa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000daa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dae:	3304      	adds	r3, #4

08000db0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000db2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db4:	d3f9      	bcc.n	8000daa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000db6:	4a0a      	ldr	r2, [pc, #40]	; (8000de0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000db8:	4c0a      	ldr	r4, [pc, #40]	; (8000de4 <LoopForever+0x16>)
  movs r3, #0
 8000dba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dbc:	e001      	b.n	8000dc2 <LoopFillZerobss>

08000dbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc0:	3204      	adds	r2, #4

08000dc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc4:	d3fb      	bcc.n	8000dbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dc6:	f003 f9ed 	bl	80041a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dca:	f7ff fd27 	bl	800081c <main>

08000dce <LoopForever>:

LoopForever:
    b LoopForever
 8000dce:	e7fe      	b.n	8000dce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000dd0:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000dd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ddc:	08004294 	.word	0x08004294
  ldr r2, =_sbss
 8000de0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000de4:	20000158 	.word	0x20000158

08000de8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000de8:	e7fe      	b.n	8000de8 <ADC1_IRQHandler>

08000dea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b082      	sub	sp, #8
 8000dee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000df0:	2300      	movs	r3, #0
 8000df2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df4:	2003      	movs	r0, #3
 8000df6:	f000 f93d 	bl	8001074 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	f000 f80e 	bl	8000e1c <HAL_InitTick>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d002      	beq.n	8000e0c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	71fb      	strb	r3, [r7, #7]
 8000e0a:	e001      	b.n	8000e10 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e0c:	f7ff feae 	bl	8000b6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e10:	79fb      	ldrb	r3, [r7, #7]
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
	...

08000e1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e24:	2300      	movs	r3, #0
 8000e26:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e28:	4b17      	ldr	r3, [pc, #92]	; (8000e88 <HAL_InitTick+0x6c>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d023      	beq.n	8000e78 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e30:	4b16      	ldr	r3, [pc, #88]	; (8000e8c <HAL_InitTick+0x70>)
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <HAL_InitTick+0x6c>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	4619      	mov	r1, r3
 8000e3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e46:	4618      	mov	r0, r3
 8000e48:	f000 f949 	bl	80010de <HAL_SYSTICK_Config>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d10f      	bne.n	8000e72 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2b0f      	cmp	r3, #15
 8000e56:	d809      	bhi.n	8000e6c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	6879      	ldr	r1, [r7, #4]
 8000e5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e60:	f000 f913 	bl	800108a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e64:	4a0a      	ldr	r2, [pc, #40]	; (8000e90 <HAL_InitTick+0x74>)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6013      	str	r3, [r2, #0]
 8000e6a:	e007      	b.n	8000e7c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	73fb      	strb	r3, [r7, #15]
 8000e70:	e004      	b.n	8000e7c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	73fb      	strb	r3, [r7, #15]
 8000e76:	e001      	b.n	8000e7c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000008 	.word	0x20000008
 8000e8c:	20000000 	.word	0x20000000
 8000e90:	20000004 	.word	0x20000004

08000e94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <HAL_IncTick+0x20>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <HAL_IncTick+0x24>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	4a04      	ldr	r2, [pc, #16]	; (8000eb8 <HAL_IncTick+0x24>)
 8000ea6:	6013      	str	r3, [r2, #0]
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	20000008 	.word	0x20000008
 8000eb8:	20000154 	.word	0x20000154

08000ebc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec0:	4b03      	ldr	r3, [pc, #12]	; (8000ed0 <HAL_GetTick+0x14>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	20000154 	.word	0x20000154

08000ed4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eea:	68ba      	ldr	r2, [r7, #8]
 8000eec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000efc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f06:	4a04      	ldr	r2, [pc, #16]	; (8000f18 <__NVIC_SetPriorityGrouping+0x44>)
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	60d3      	str	r3, [r2, #12]
}
 8000f0c:	bf00      	nop
 8000f0e:	3714      	adds	r7, #20
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f20:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <__NVIC_GetPriorityGrouping+0x18>)
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	0a1b      	lsrs	r3, r3, #8
 8000f26:	f003 0307 	and.w	r3, r3, #7
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	db0b      	blt.n	8000f62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	f003 021f 	and.w	r2, r3, #31
 8000f50:	4907      	ldr	r1, [pc, #28]	; (8000f70 <__NVIC_EnableIRQ+0x38>)
 8000f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f56:	095b      	lsrs	r3, r3, #5
 8000f58:	2001      	movs	r0, #1
 8000f5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f62:	bf00      	nop
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	e000e100 	.word	0xe000e100

08000f74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	6039      	str	r1, [r7, #0]
 8000f7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	db0a      	blt.n	8000f9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	490c      	ldr	r1, [pc, #48]	; (8000fc0 <__NVIC_SetPriority+0x4c>)
 8000f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f92:	0112      	lsls	r2, r2, #4
 8000f94:	b2d2      	uxtb	r2, r2
 8000f96:	440b      	add	r3, r1
 8000f98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f9c:	e00a      	b.n	8000fb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	4908      	ldr	r1, [pc, #32]	; (8000fc4 <__NVIC_SetPriority+0x50>)
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	f003 030f 	and.w	r3, r3, #15
 8000faa:	3b04      	subs	r3, #4
 8000fac:	0112      	lsls	r2, r2, #4
 8000fae:	b2d2      	uxtb	r2, r2
 8000fb0:	440b      	add	r3, r1
 8000fb2:	761a      	strb	r2, [r3, #24]
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	e000e100 	.word	0xe000e100
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b089      	sub	sp, #36	; 0x24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	f1c3 0307 	rsb	r3, r3, #7
 8000fe2:	2b04      	cmp	r3, #4
 8000fe4:	bf28      	it	cs
 8000fe6:	2304      	movcs	r3, #4
 8000fe8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	3304      	adds	r3, #4
 8000fee:	2b06      	cmp	r3, #6
 8000ff0:	d902      	bls.n	8000ff8 <NVIC_EncodePriority+0x30>
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3b03      	subs	r3, #3
 8000ff6:	e000      	b.n	8000ffa <NVIC_EncodePriority+0x32>
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ffc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43da      	mvns	r2, r3
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	401a      	ands	r2, r3
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001010:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	fa01 f303 	lsl.w	r3, r1, r3
 800101a:	43d9      	mvns	r1, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001020:	4313      	orrs	r3, r2
         );
}
 8001022:	4618      	mov	r0, r3
 8001024:	3724      	adds	r7, #36	; 0x24
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
	...

08001030 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3b01      	subs	r3, #1
 800103c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001040:	d301      	bcc.n	8001046 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001042:	2301      	movs	r3, #1
 8001044:	e00f      	b.n	8001066 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001046:	4a0a      	ldr	r2, [pc, #40]	; (8001070 <SysTick_Config+0x40>)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3b01      	subs	r3, #1
 800104c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800104e:	210f      	movs	r1, #15
 8001050:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001054:	f7ff ff8e 	bl	8000f74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001058:	4b05      	ldr	r3, [pc, #20]	; (8001070 <SysTick_Config+0x40>)
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800105e:	4b04      	ldr	r3, [pc, #16]	; (8001070 <SysTick_Config+0x40>)
 8001060:	2207      	movs	r2, #7
 8001062:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	e000e010 	.word	0xe000e010

08001074 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff ff29 	bl	8000ed4 <__NVIC_SetPriorityGrouping>
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b086      	sub	sp, #24
 800108e:	af00      	add	r7, sp, #0
 8001090:	4603      	mov	r3, r0
 8001092:	60b9      	str	r1, [r7, #8]
 8001094:	607a      	str	r2, [r7, #4]
 8001096:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800109c:	f7ff ff3e 	bl	8000f1c <__NVIC_GetPriorityGrouping>
 80010a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	68b9      	ldr	r1, [r7, #8]
 80010a6:	6978      	ldr	r0, [r7, #20]
 80010a8:	f7ff ff8e 	bl	8000fc8 <NVIC_EncodePriority>
 80010ac:	4602      	mov	r2, r0
 80010ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010b2:	4611      	mov	r1, r2
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff5d 	bl	8000f74 <__NVIC_SetPriority>
}
 80010ba:	bf00      	nop
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	4603      	mov	r3, r0
 80010ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff31 	bl	8000f38 <__NVIC_EnableIRQ>
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff ffa2 	bl	8001030 <SysTick_Config>
 80010ec:	4603      	mov	r3, r0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
	...

080010f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b087      	sub	sp, #28
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001102:	2300      	movs	r3, #0
 8001104:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001106:	e166      	b.n	80013d6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	2101      	movs	r1, #1
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	fa01 f303 	lsl.w	r3, r1, r3
 8001114:	4013      	ands	r3, r2
 8001116:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	2b00      	cmp	r3, #0
 800111c:	f000 8158 	beq.w	80013d0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 0303 	and.w	r3, r3, #3
 8001128:	2b01      	cmp	r3, #1
 800112a:	d005      	beq.n	8001138 <HAL_GPIO_Init+0x40>
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 0303 	and.w	r3, r3, #3
 8001134:	2b02      	cmp	r3, #2
 8001136:	d130      	bne.n	800119a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	2203      	movs	r2, #3
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	4013      	ands	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	68da      	ldr	r2, [r3, #12]
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	4313      	orrs	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800116e:	2201      	movs	r2, #1
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	43db      	mvns	r3, r3
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	4013      	ands	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	091b      	lsrs	r3, r3, #4
 8001184:	f003 0201 	and.w	r2, r3, #1
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	4313      	orrs	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f003 0303 	and.w	r3, r3, #3
 80011a2:	2b03      	cmp	r3, #3
 80011a4:	d017      	beq.n	80011d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	68db      	ldr	r3, [r3, #12]
 80011aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	2203      	movs	r2, #3
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	43db      	mvns	r3, r3
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	4013      	ands	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	689a      	ldr	r2, [r3, #8]
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f003 0303 	and.w	r3, r3, #3
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d123      	bne.n	800122a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	08da      	lsrs	r2, r3, #3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	3208      	adds	r2, #8
 80011ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	f003 0307 	and.w	r3, r3, #7
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	220f      	movs	r2, #15
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43db      	mvns	r3, r3
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	4013      	ands	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	691a      	ldr	r2, [r3, #16]
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	f003 0307 	and.w	r3, r3, #7
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	4313      	orrs	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	08da      	lsrs	r2, r3, #3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3208      	adds	r2, #8
 8001224:	6939      	ldr	r1, [r7, #16]
 8001226:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	2203      	movs	r2, #3
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	43db      	mvns	r3, r3
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	4013      	ands	r3, r2
 8001240:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f003 0203 	and.w	r2, r3, #3
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	4313      	orrs	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001266:	2b00      	cmp	r3, #0
 8001268:	f000 80b2 	beq.w	80013d0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126c:	4b61      	ldr	r3, [pc, #388]	; (80013f4 <HAL_GPIO_Init+0x2fc>)
 800126e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001270:	4a60      	ldr	r2, [pc, #384]	; (80013f4 <HAL_GPIO_Init+0x2fc>)
 8001272:	f043 0301 	orr.w	r3, r3, #1
 8001276:	6613      	str	r3, [r2, #96]	; 0x60
 8001278:	4b5e      	ldr	r3, [pc, #376]	; (80013f4 <HAL_GPIO_Init+0x2fc>)
 800127a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800127c:	f003 0301 	and.w	r3, r3, #1
 8001280:	60bb      	str	r3, [r7, #8]
 8001282:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001284:	4a5c      	ldr	r2, [pc, #368]	; (80013f8 <HAL_GPIO_Init+0x300>)
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	089b      	lsrs	r3, r3, #2
 800128a:	3302      	adds	r3, #2
 800128c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001290:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	f003 0303 	and.w	r3, r3, #3
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	220f      	movs	r2, #15
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	43db      	mvns	r3, r3
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	4013      	ands	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012ae:	d02b      	beq.n	8001308 <HAL_GPIO_Init+0x210>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	4a52      	ldr	r2, [pc, #328]	; (80013fc <HAL_GPIO_Init+0x304>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d025      	beq.n	8001304 <HAL_GPIO_Init+0x20c>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4a51      	ldr	r2, [pc, #324]	; (8001400 <HAL_GPIO_Init+0x308>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d01f      	beq.n	8001300 <HAL_GPIO_Init+0x208>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4a50      	ldr	r2, [pc, #320]	; (8001404 <HAL_GPIO_Init+0x30c>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d019      	beq.n	80012fc <HAL_GPIO_Init+0x204>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4a4f      	ldr	r2, [pc, #316]	; (8001408 <HAL_GPIO_Init+0x310>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d013      	beq.n	80012f8 <HAL_GPIO_Init+0x200>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4a4e      	ldr	r2, [pc, #312]	; (800140c <HAL_GPIO_Init+0x314>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d00d      	beq.n	80012f4 <HAL_GPIO_Init+0x1fc>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a4d      	ldr	r2, [pc, #308]	; (8001410 <HAL_GPIO_Init+0x318>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d007      	beq.n	80012f0 <HAL_GPIO_Init+0x1f8>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4a4c      	ldr	r2, [pc, #304]	; (8001414 <HAL_GPIO_Init+0x31c>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d101      	bne.n	80012ec <HAL_GPIO_Init+0x1f4>
 80012e8:	2307      	movs	r3, #7
 80012ea:	e00e      	b.n	800130a <HAL_GPIO_Init+0x212>
 80012ec:	2308      	movs	r3, #8
 80012ee:	e00c      	b.n	800130a <HAL_GPIO_Init+0x212>
 80012f0:	2306      	movs	r3, #6
 80012f2:	e00a      	b.n	800130a <HAL_GPIO_Init+0x212>
 80012f4:	2305      	movs	r3, #5
 80012f6:	e008      	b.n	800130a <HAL_GPIO_Init+0x212>
 80012f8:	2304      	movs	r3, #4
 80012fa:	e006      	b.n	800130a <HAL_GPIO_Init+0x212>
 80012fc:	2303      	movs	r3, #3
 80012fe:	e004      	b.n	800130a <HAL_GPIO_Init+0x212>
 8001300:	2302      	movs	r3, #2
 8001302:	e002      	b.n	800130a <HAL_GPIO_Init+0x212>
 8001304:	2301      	movs	r3, #1
 8001306:	e000      	b.n	800130a <HAL_GPIO_Init+0x212>
 8001308:	2300      	movs	r3, #0
 800130a:	697a      	ldr	r2, [r7, #20]
 800130c:	f002 0203 	and.w	r2, r2, #3
 8001310:	0092      	lsls	r2, r2, #2
 8001312:	4093      	lsls	r3, r2
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	4313      	orrs	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800131a:	4937      	ldr	r1, [pc, #220]	; (80013f8 <HAL_GPIO_Init+0x300>)
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	089b      	lsrs	r3, r3, #2
 8001320:	3302      	adds	r3, #2
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001328:	4b3b      	ldr	r3, [pc, #236]	; (8001418 <HAL_GPIO_Init+0x320>)
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	43db      	mvns	r3, r3
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	4013      	ands	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d003      	beq.n	800134c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	4313      	orrs	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800134c:	4a32      	ldr	r2, [pc, #200]	; (8001418 <HAL_GPIO_Init+0x320>)
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001352:	4b31      	ldr	r3, [pc, #196]	; (8001418 <HAL_GPIO_Init+0x320>)
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	43db      	mvns	r3, r3
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	4013      	ands	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d003      	beq.n	8001376 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	4313      	orrs	r3, r2
 8001374:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001376:	4a28      	ldr	r2, [pc, #160]	; (8001418 <HAL_GPIO_Init+0x320>)
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800137c:	4b26      	ldr	r3, [pc, #152]	; (8001418 <HAL_GPIO_Init+0x320>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	43db      	mvns	r3, r3
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	4013      	ands	r3, r2
 800138a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d003      	beq.n	80013a0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	4313      	orrs	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013a0:	4a1d      	ldr	r2, [pc, #116]	; (8001418 <HAL_GPIO_Init+0x320>)
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80013a6:	4b1c      	ldr	r3, [pc, #112]	; (8001418 <HAL_GPIO_Init+0x320>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	43db      	mvns	r3, r3
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	4013      	ands	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013ca:	4a13      	ldr	r2, [pc, #76]	; (8001418 <HAL_GPIO_Init+0x320>)
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	3301      	adds	r3, #1
 80013d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	fa22 f303 	lsr.w	r3, r2, r3
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	f47f ae91 	bne.w	8001108 <HAL_GPIO_Init+0x10>
  }
}
 80013e6:	bf00      	nop
 80013e8:	bf00      	nop
 80013ea:	371c      	adds	r7, #28
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	40021000 	.word	0x40021000
 80013f8:	40010000 	.word	0x40010000
 80013fc:	48000400 	.word	0x48000400
 8001400:	48000800 	.word	0x48000800
 8001404:	48000c00 	.word	0x48000c00
 8001408:	48001000 	.word	0x48001000
 800140c:	48001400 	.word	0x48001400
 8001410:	48001800 	.word	0x48001800
 8001414:	48001c00 	.word	0x48001c00
 8001418:	40010400 	.word	0x40010400

0800141c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	460b      	mov	r3, r1
 8001426:	807b      	strh	r3, [r7, #2]
 8001428:	4613      	mov	r3, r2
 800142a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800142c:	787b      	ldrb	r3, [r7, #1]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d003      	beq.n	800143a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001432:	887a      	ldrh	r2, [r7, #2]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001438:	e002      	b.n	8001440 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800143a:	887a      	ldrh	r2, [r7, #2]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	460b      	mov	r3, r1
 8001456:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	695b      	ldr	r3, [r3, #20]
 800145c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800145e:	887a      	ldrh	r2, [r7, #2]
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	4013      	ands	r3, r2
 8001464:	041a      	lsls	r2, r3, #16
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	43d9      	mvns	r1, r3
 800146a:	887b      	ldrh	r3, [r7, #2]
 800146c:	400b      	ands	r3, r1
 800146e:	431a      	orrs	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	619a      	str	r2, [r3, #24]
}
 8001474:	bf00      	nop
 8001476:	3714      	adds	r7, #20
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001484:	4b0d      	ldr	r3, [pc, #52]	; (80014bc <HAL_PWREx_GetVoltageRange+0x3c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800148c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001490:	d102      	bne.n	8001498 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001492:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001496:	e00b      	b.n	80014b0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001498:	4b08      	ldr	r3, [pc, #32]	; (80014bc <HAL_PWREx_GetVoltageRange+0x3c>)
 800149a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800149e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014a6:	d102      	bne.n	80014ae <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80014a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014ac:	e000      	b.n	80014b0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80014ae:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	40007000 	.word	0x40007000

080014c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d141      	bne.n	8001552 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80014ce:	4b4b      	ldr	r3, [pc, #300]	; (80015fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014da:	d131      	bne.n	8001540 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014dc:	4b47      	ldr	r3, [pc, #284]	; (80015fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014e2:	4a46      	ldr	r2, [pc, #280]	; (80015fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014ec:	4b43      	ldr	r3, [pc, #268]	; (80015fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014f4:	4a41      	ldr	r2, [pc, #260]	; (80015fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80014fc:	4b40      	ldr	r3, [pc, #256]	; (8001600 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2232      	movs	r2, #50	; 0x32
 8001502:	fb02 f303 	mul.w	r3, r2, r3
 8001506:	4a3f      	ldr	r2, [pc, #252]	; (8001604 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001508:	fba2 2303 	umull	r2, r3, r2, r3
 800150c:	0c9b      	lsrs	r3, r3, #18
 800150e:	3301      	adds	r3, #1
 8001510:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001512:	e002      	b.n	800151a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	3b01      	subs	r3, #1
 8001518:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800151a:	4b38      	ldr	r3, [pc, #224]	; (80015fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800151c:	695b      	ldr	r3, [r3, #20]
 800151e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001522:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001526:	d102      	bne.n	800152e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d1f2      	bne.n	8001514 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800152e:	4b33      	ldr	r3, [pc, #204]	; (80015fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001530:	695b      	ldr	r3, [r3, #20]
 8001532:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001536:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800153a:	d158      	bne.n	80015ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e057      	b.n	80015f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001540:	4b2e      	ldr	r3, [pc, #184]	; (80015fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001542:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001546:	4a2d      	ldr	r2, [pc, #180]	; (80015fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001548:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800154c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001550:	e04d      	b.n	80015ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001558:	d141      	bne.n	80015de <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800155a:	4b28      	ldr	r3, [pc, #160]	; (80015fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001562:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001566:	d131      	bne.n	80015cc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001568:	4b24      	ldr	r3, [pc, #144]	; (80015fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800156a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800156e:	4a23      	ldr	r2, [pc, #140]	; (80015fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001574:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001578:	4b20      	ldr	r3, [pc, #128]	; (80015fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001580:	4a1e      	ldr	r2, [pc, #120]	; (80015fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001582:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001586:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001588:	4b1d      	ldr	r3, [pc, #116]	; (8001600 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2232      	movs	r2, #50	; 0x32
 800158e:	fb02 f303 	mul.w	r3, r2, r3
 8001592:	4a1c      	ldr	r2, [pc, #112]	; (8001604 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001594:	fba2 2303 	umull	r2, r3, r2, r3
 8001598:	0c9b      	lsrs	r3, r3, #18
 800159a:	3301      	adds	r3, #1
 800159c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800159e:	e002      	b.n	80015a6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	3b01      	subs	r3, #1
 80015a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015a6:	4b15      	ldr	r3, [pc, #84]	; (80015fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015a8:	695b      	ldr	r3, [r3, #20]
 80015aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015b2:	d102      	bne.n	80015ba <HAL_PWREx_ControlVoltageScaling+0xfa>
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1f2      	bne.n	80015a0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015ba:	4b10      	ldr	r3, [pc, #64]	; (80015fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015bc:	695b      	ldr	r3, [r3, #20]
 80015be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015c6:	d112      	bne.n	80015ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e011      	b.n	80015f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015cc:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015d2:	4a0a      	ldr	r2, [pc, #40]	; (80015fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80015dc:	e007      	b.n	80015ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80015de:	4b07      	ldr	r3, [pc, #28]	; (80015fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015e6:	4a05      	ldr	r2, [pc, #20]	; (80015fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015ec:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80015ee:	2300      	movs	r3, #0
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3714      	adds	r7, #20
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	40007000 	.word	0x40007000
 8001600:	20000000 	.word	0x20000000
 8001604:	431bde83 	.word	0x431bde83

08001608 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800160c:	4b05      	ldr	r3, [pc, #20]	; (8001624 <HAL_PWREx_EnableVddIO2+0x1c>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	4a04      	ldr	r2, [pc, #16]	; (8001624 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001612:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001616:	6053      	str	r3, [r2, #4]
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	40007000 	.word	0x40007000

08001628 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b088      	sub	sp, #32
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d102      	bne.n	800163c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	f000 bc08 	b.w	8001e4c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800163c:	4b96      	ldr	r3, [pc, #600]	; (8001898 <HAL_RCC_OscConfig+0x270>)
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	f003 030c 	and.w	r3, r3, #12
 8001644:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001646:	4b94      	ldr	r3, [pc, #592]	; (8001898 <HAL_RCC_OscConfig+0x270>)
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	f003 0303 	and.w	r3, r3, #3
 800164e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0310 	and.w	r3, r3, #16
 8001658:	2b00      	cmp	r3, #0
 800165a:	f000 80e4 	beq.w	8001826 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d007      	beq.n	8001674 <HAL_RCC_OscConfig+0x4c>
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	2b0c      	cmp	r3, #12
 8001668:	f040 808b 	bne.w	8001782 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	2b01      	cmp	r3, #1
 8001670:	f040 8087 	bne.w	8001782 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001674:	4b88      	ldr	r3, [pc, #544]	; (8001898 <HAL_RCC_OscConfig+0x270>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d005      	beq.n	800168c <HAL_RCC_OscConfig+0x64>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d101      	bne.n	800168c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e3df      	b.n	8001e4c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a1a      	ldr	r2, [r3, #32]
 8001690:	4b81      	ldr	r3, [pc, #516]	; (8001898 <HAL_RCC_OscConfig+0x270>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0308 	and.w	r3, r3, #8
 8001698:	2b00      	cmp	r3, #0
 800169a:	d004      	beq.n	80016a6 <HAL_RCC_OscConfig+0x7e>
 800169c:	4b7e      	ldr	r3, [pc, #504]	; (8001898 <HAL_RCC_OscConfig+0x270>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016a4:	e005      	b.n	80016b2 <HAL_RCC_OscConfig+0x8a>
 80016a6:	4b7c      	ldr	r3, [pc, #496]	; (8001898 <HAL_RCC_OscConfig+0x270>)
 80016a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016ac:	091b      	lsrs	r3, r3, #4
 80016ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d223      	bcs.n	80016fe <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a1b      	ldr	r3, [r3, #32]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f000 fdcc 	bl	8002258 <RCC_SetFlashLatencyFromMSIRange>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e3c0      	b.n	8001e4c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016ca:	4b73      	ldr	r3, [pc, #460]	; (8001898 <HAL_RCC_OscConfig+0x270>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a72      	ldr	r2, [pc, #456]	; (8001898 <HAL_RCC_OscConfig+0x270>)
 80016d0:	f043 0308 	orr.w	r3, r3, #8
 80016d4:	6013      	str	r3, [r2, #0]
 80016d6:	4b70      	ldr	r3, [pc, #448]	; (8001898 <HAL_RCC_OscConfig+0x270>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a1b      	ldr	r3, [r3, #32]
 80016e2:	496d      	ldr	r1, [pc, #436]	; (8001898 <HAL_RCC_OscConfig+0x270>)
 80016e4:	4313      	orrs	r3, r2
 80016e6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016e8:	4b6b      	ldr	r3, [pc, #428]	; (8001898 <HAL_RCC_OscConfig+0x270>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	69db      	ldr	r3, [r3, #28]
 80016f4:	021b      	lsls	r3, r3, #8
 80016f6:	4968      	ldr	r1, [pc, #416]	; (8001898 <HAL_RCC_OscConfig+0x270>)
 80016f8:	4313      	orrs	r3, r2
 80016fa:	604b      	str	r3, [r1, #4]
 80016fc:	e025      	b.n	800174a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016fe:	4b66      	ldr	r3, [pc, #408]	; (8001898 <HAL_RCC_OscConfig+0x270>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a65      	ldr	r2, [pc, #404]	; (8001898 <HAL_RCC_OscConfig+0x270>)
 8001704:	f043 0308 	orr.w	r3, r3, #8
 8001708:	6013      	str	r3, [r2, #0]
 800170a:	4b63      	ldr	r3, [pc, #396]	; (8001898 <HAL_RCC_OscConfig+0x270>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a1b      	ldr	r3, [r3, #32]
 8001716:	4960      	ldr	r1, [pc, #384]	; (8001898 <HAL_RCC_OscConfig+0x270>)
 8001718:	4313      	orrs	r3, r2
 800171a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800171c:	4b5e      	ldr	r3, [pc, #376]	; (8001898 <HAL_RCC_OscConfig+0x270>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	69db      	ldr	r3, [r3, #28]
 8001728:	021b      	lsls	r3, r3, #8
 800172a:	495b      	ldr	r1, [pc, #364]	; (8001898 <HAL_RCC_OscConfig+0x270>)
 800172c:	4313      	orrs	r3, r2
 800172e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d109      	bne.n	800174a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a1b      	ldr	r3, [r3, #32]
 800173a:	4618      	mov	r0, r3
 800173c:	f000 fd8c 	bl	8002258 <RCC_SetFlashLatencyFromMSIRange>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e380      	b.n	8001e4c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800174a:	f000 fcc1 	bl	80020d0 <HAL_RCC_GetSysClockFreq>
 800174e:	4602      	mov	r2, r0
 8001750:	4b51      	ldr	r3, [pc, #324]	; (8001898 <HAL_RCC_OscConfig+0x270>)
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	091b      	lsrs	r3, r3, #4
 8001756:	f003 030f 	and.w	r3, r3, #15
 800175a:	4950      	ldr	r1, [pc, #320]	; (800189c <HAL_RCC_OscConfig+0x274>)
 800175c:	5ccb      	ldrb	r3, [r1, r3]
 800175e:	f003 031f 	and.w	r3, r3, #31
 8001762:	fa22 f303 	lsr.w	r3, r2, r3
 8001766:	4a4e      	ldr	r2, [pc, #312]	; (80018a0 <HAL_RCC_OscConfig+0x278>)
 8001768:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800176a:	4b4e      	ldr	r3, [pc, #312]	; (80018a4 <HAL_RCC_OscConfig+0x27c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff fb54 	bl	8000e1c <HAL_InitTick>
 8001774:	4603      	mov	r3, r0
 8001776:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001778:	7bfb      	ldrb	r3, [r7, #15]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d052      	beq.n	8001824 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800177e:	7bfb      	ldrb	r3, [r7, #15]
 8001780:	e364      	b.n	8001e4c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d032      	beq.n	80017f0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800178a:	4b43      	ldr	r3, [pc, #268]	; (8001898 <HAL_RCC_OscConfig+0x270>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a42      	ldr	r2, [pc, #264]	; (8001898 <HAL_RCC_OscConfig+0x270>)
 8001790:	f043 0301 	orr.w	r3, r3, #1
 8001794:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001796:	f7ff fb91 	bl	8000ebc <HAL_GetTick>
 800179a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800179c:	e008      	b.n	80017b0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800179e:	f7ff fb8d 	bl	8000ebc <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e34d      	b.n	8001e4c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017b0:	4b39      	ldr	r3, [pc, #228]	; (8001898 <HAL_RCC_OscConfig+0x270>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d0f0      	beq.n	800179e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017bc:	4b36      	ldr	r3, [pc, #216]	; (8001898 <HAL_RCC_OscConfig+0x270>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a35      	ldr	r2, [pc, #212]	; (8001898 <HAL_RCC_OscConfig+0x270>)
 80017c2:	f043 0308 	orr.w	r3, r3, #8
 80017c6:	6013      	str	r3, [r2, #0]
 80017c8:	4b33      	ldr	r3, [pc, #204]	; (8001898 <HAL_RCC_OscConfig+0x270>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a1b      	ldr	r3, [r3, #32]
 80017d4:	4930      	ldr	r1, [pc, #192]	; (8001898 <HAL_RCC_OscConfig+0x270>)
 80017d6:	4313      	orrs	r3, r2
 80017d8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017da:	4b2f      	ldr	r3, [pc, #188]	; (8001898 <HAL_RCC_OscConfig+0x270>)
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	021b      	lsls	r3, r3, #8
 80017e8:	492b      	ldr	r1, [pc, #172]	; (8001898 <HAL_RCC_OscConfig+0x270>)
 80017ea:	4313      	orrs	r3, r2
 80017ec:	604b      	str	r3, [r1, #4]
 80017ee:	e01a      	b.n	8001826 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80017f0:	4b29      	ldr	r3, [pc, #164]	; (8001898 <HAL_RCC_OscConfig+0x270>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a28      	ldr	r2, [pc, #160]	; (8001898 <HAL_RCC_OscConfig+0x270>)
 80017f6:	f023 0301 	bic.w	r3, r3, #1
 80017fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017fc:	f7ff fb5e 	bl	8000ebc <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001804:	f7ff fb5a 	bl	8000ebc <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e31a      	b.n	8001e4c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001816:	4b20      	ldr	r3, [pc, #128]	; (8001898 <HAL_RCC_OscConfig+0x270>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1f0      	bne.n	8001804 <HAL_RCC_OscConfig+0x1dc>
 8001822:	e000      	b.n	8001826 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001824:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	2b00      	cmp	r3, #0
 8001830:	d073      	beq.n	800191a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	2b08      	cmp	r3, #8
 8001836:	d005      	beq.n	8001844 <HAL_RCC_OscConfig+0x21c>
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	2b0c      	cmp	r3, #12
 800183c:	d10e      	bne.n	800185c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	2b03      	cmp	r3, #3
 8001842:	d10b      	bne.n	800185c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001844:	4b14      	ldr	r3, [pc, #80]	; (8001898 <HAL_RCC_OscConfig+0x270>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d063      	beq.n	8001918 <HAL_RCC_OscConfig+0x2f0>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d15f      	bne.n	8001918 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e2f7      	b.n	8001e4c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001864:	d106      	bne.n	8001874 <HAL_RCC_OscConfig+0x24c>
 8001866:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <HAL_RCC_OscConfig+0x270>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a0b      	ldr	r2, [pc, #44]	; (8001898 <HAL_RCC_OscConfig+0x270>)
 800186c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001870:	6013      	str	r3, [r2, #0]
 8001872:	e025      	b.n	80018c0 <HAL_RCC_OscConfig+0x298>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800187c:	d114      	bne.n	80018a8 <HAL_RCC_OscConfig+0x280>
 800187e:	4b06      	ldr	r3, [pc, #24]	; (8001898 <HAL_RCC_OscConfig+0x270>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a05      	ldr	r2, [pc, #20]	; (8001898 <HAL_RCC_OscConfig+0x270>)
 8001884:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001888:	6013      	str	r3, [r2, #0]
 800188a:	4b03      	ldr	r3, [pc, #12]	; (8001898 <HAL_RCC_OscConfig+0x270>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a02      	ldr	r2, [pc, #8]	; (8001898 <HAL_RCC_OscConfig+0x270>)
 8001890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001894:	6013      	str	r3, [r2, #0]
 8001896:	e013      	b.n	80018c0 <HAL_RCC_OscConfig+0x298>
 8001898:	40021000 	.word	0x40021000
 800189c:	08004214 	.word	0x08004214
 80018a0:	20000000 	.word	0x20000000
 80018a4:	20000004 	.word	0x20000004
 80018a8:	4ba0      	ldr	r3, [pc, #640]	; (8001b2c <HAL_RCC_OscConfig+0x504>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a9f      	ldr	r2, [pc, #636]	; (8001b2c <HAL_RCC_OscConfig+0x504>)
 80018ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018b2:	6013      	str	r3, [r2, #0]
 80018b4:	4b9d      	ldr	r3, [pc, #628]	; (8001b2c <HAL_RCC_OscConfig+0x504>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a9c      	ldr	r2, [pc, #624]	; (8001b2c <HAL_RCC_OscConfig+0x504>)
 80018ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d013      	beq.n	80018f0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c8:	f7ff faf8 	bl	8000ebc <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018d0:	f7ff faf4 	bl	8000ebc <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b64      	cmp	r3, #100	; 0x64
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e2b4      	b.n	8001e4c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018e2:	4b92      	ldr	r3, [pc, #584]	; (8001b2c <HAL_RCC_OscConfig+0x504>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d0f0      	beq.n	80018d0 <HAL_RCC_OscConfig+0x2a8>
 80018ee:	e014      	b.n	800191a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f0:	f7ff fae4 	bl	8000ebc <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018f8:	f7ff fae0 	bl	8000ebc <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b64      	cmp	r3, #100	; 0x64
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e2a0      	b.n	8001e4c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800190a:	4b88      	ldr	r3, [pc, #544]	; (8001b2c <HAL_RCC_OscConfig+0x504>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1f0      	bne.n	80018f8 <HAL_RCC_OscConfig+0x2d0>
 8001916:	e000      	b.n	800191a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001918:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d060      	beq.n	80019e8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	2b04      	cmp	r3, #4
 800192a:	d005      	beq.n	8001938 <HAL_RCC_OscConfig+0x310>
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	2b0c      	cmp	r3, #12
 8001930:	d119      	bne.n	8001966 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	2b02      	cmp	r3, #2
 8001936:	d116      	bne.n	8001966 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001938:	4b7c      	ldr	r3, [pc, #496]	; (8001b2c <HAL_RCC_OscConfig+0x504>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001940:	2b00      	cmp	r3, #0
 8001942:	d005      	beq.n	8001950 <HAL_RCC_OscConfig+0x328>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d101      	bne.n	8001950 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e27d      	b.n	8001e4c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001950:	4b76      	ldr	r3, [pc, #472]	; (8001b2c <HAL_RCC_OscConfig+0x504>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	691b      	ldr	r3, [r3, #16]
 800195c:	061b      	lsls	r3, r3, #24
 800195e:	4973      	ldr	r1, [pc, #460]	; (8001b2c <HAL_RCC_OscConfig+0x504>)
 8001960:	4313      	orrs	r3, r2
 8001962:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001964:	e040      	b.n	80019e8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d023      	beq.n	80019b6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800196e:	4b6f      	ldr	r3, [pc, #444]	; (8001b2c <HAL_RCC_OscConfig+0x504>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a6e      	ldr	r2, [pc, #440]	; (8001b2c <HAL_RCC_OscConfig+0x504>)
 8001974:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001978:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800197a:	f7ff fa9f 	bl	8000ebc <HAL_GetTick>
 800197e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001980:	e008      	b.n	8001994 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001982:	f7ff fa9b 	bl	8000ebc <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	2b02      	cmp	r3, #2
 800198e:	d901      	bls.n	8001994 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e25b      	b.n	8001e4c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001994:	4b65      	ldr	r3, [pc, #404]	; (8001b2c <HAL_RCC_OscConfig+0x504>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800199c:	2b00      	cmp	r3, #0
 800199e:	d0f0      	beq.n	8001982 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a0:	4b62      	ldr	r3, [pc, #392]	; (8001b2c <HAL_RCC_OscConfig+0x504>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	691b      	ldr	r3, [r3, #16]
 80019ac:	061b      	lsls	r3, r3, #24
 80019ae:	495f      	ldr	r1, [pc, #380]	; (8001b2c <HAL_RCC_OscConfig+0x504>)
 80019b0:	4313      	orrs	r3, r2
 80019b2:	604b      	str	r3, [r1, #4]
 80019b4:	e018      	b.n	80019e8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019b6:	4b5d      	ldr	r3, [pc, #372]	; (8001b2c <HAL_RCC_OscConfig+0x504>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a5c      	ldr	r2, [pc, #368]	; (8001b2c <HAL_RCC_OscConfig+0x504>)
 80019bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c2:	f7ff fa7b 	bl	8000ebc <HAL_GetTick>
 80019c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019c8:	e008      	b.n	80019dc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ca:	f7ff fa77 	bl	8000ebc <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e237      	b.n	8001e4c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019dc:	4b53      	ldr	r3, [pc, #332]	; (8001b2c <HAL_RCC_OscConfig+0x504>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d1f0      	bne.n	80019ca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0308 	and.w	r3, r3, #8
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d03c      	beq.n	8001a6e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	695b      	ldr	r3, [r3, #20]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d01c      	beq.n	8001a36 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019fc:	4b4b      	ldr	r3, [pc, #300]	; (8001b2c <HAL_RCC_OscConfig+0x504>)
 80019fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a02:	4a4a      	ldr	r2, [pc, #296]	; (8001b2c <HAL_RCC_OscConfig+0x504>)
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a0c:	f7ff fa56 	bl	8000ebc <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a14:	f7ff fa52 	bl	8000ebc <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e212      	b.n	8001e4c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a26:	4b41      	ldr	r3, [pc, #260]	; (8001b2c <HAL_RCC_OscConfig+0x504>)
 8001a28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d0ef      	beq.n	8001a14 <HAL_RCC_OscConfig+0x3ec>
 8001a34:	e01b      	b.n	8001a6e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a36:	4b3d      	ldr	r3, [pc, #244]	; (8001b2c <HAL_RCC_OscConfig+0x504>)
 8001a38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a3c:	4a3b      	ldr	r2, [pc, #236]	; (8001b2c <HAL_RCC_OscConfig+0x504>)
 8001a3e:	f023 0301 	bic.w	r3, r3, #1
 8001a42:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a46:	f7ff fa39 	bl	8000ebc <HAL_GetTick>
 8001a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a4c:	e008      	b.n	8001a60 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a4e:	f7ff fa35 	bl	8000ebc <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d901      	bls.n	8001a60 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e1f5      	b.n	8001e4c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a60:	4b32      	ldr	r3, [pc, #200]	; (8001b2c <HAL_RCC_OscConfig+0x504>)
 8001a62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1ef      	bne.n	8001a4e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0304 	and.w	r3, r3, #4
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	f000 80a6 	beq.w	8001bc8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a80:	4b2a      	ldr	r3, [pc, #168]	; (8001b2c <HAL_RCC_OscConfig+0x504>)
 8001a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d10d      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a8c:	4b27      	ldr	r3, [pc, #156]	; (8001b2c <HAL_RCC_OscConfig+0x504>)
 8001a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a90:	4a26      	ldr	r2, [pc, #152]	; (8001b2c <HAL_RCC_OscConfig+0x504>)
 8001a92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a96:	6593      	str	r3, [r2, #88]	; 0x58
 8001a98:	4b24      	ldr	r3, [pc, #144]	; (8001b2c <HAL_RCC_OscConfig+0x504>)
 8001a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa0:	60bb      	str	r3, [r7, #8]
 8001aa2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001aa8:	4b21      	ldr	r3, [pc, #132]	; (8001b30 <HAL_RCC_OscConfig+0x508>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d118      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ab4:	4b1e      	ldr	r3, [pc, #120]	; (8001b30 <HAL_RCC_OscConfig+0x508>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a1d      	ldr	r2, [pc, #116]	; (8001b30 <HAL_RCC_OscConfig+0x508>)
 8001aba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001abe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ac0:	f7ff f9fc 	bl	8000ebc <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ac6:	e008      	b.n	8001ada <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ac8:	f7ff f9f8 	bl	8000ebc <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e1b8      	b.n	8001e4c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ada:	4b15      	ldr	r3, [pc, #84]	; (8001b30 <HAL_RCC_OscConfig+0x508>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d0f0      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d108      	bne.n	8001b00 <HAL_RCC_OscConfig+0x4d8>
 8001aee:	4b0f      	ldr	r3, [pc, #60]	; (8001b2c <HAL_RCC_OscConfig+0x504>)
 8001af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001af4:	4a0d      	ldr	r2, [pc, #52]	; (8001b2c <HAL_RCC_OscConfig+0x504>)
 8001af6:	f043 0301 	orr.w	r3, r3, #1
 8001afa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001afe:	e029      	b.n	8001b54 <HAL_RCC_OscConfig+0x52c>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	2b05      	cmp	r3, #5
 8001b06:	d115      	bne.n	8001b34 <HAL_RCC_OscConfig+0x50c>
 8001b08:	4b08      	ldr	r3, [pc, #32]	; (8001b2c <HAL_RCC_OscConfig+0x504>)
 8001b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b0e:	4a07      	ldr	r2, [pc, #28]	; (8001b2c <HAL_RCC_OscConfig+0x504>)
 8001b10:	f043 0304 	orr.w	r3, r3, #4
 8001b14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b18:	4b04      	ldr	r3, [pc, #16]	; (8001b2c <HAL_RCC_OscConfig+0x504>)
 8001b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b1e:	4a03      	ldr	r2, [pc, #12]	; (8001b2c <HAL_RCC_OscConfig+0x504>)
 8001b20:	f043 0301 	orr.w	r3, r3, #1
 8001b24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b28:	e014      	b.n	8001b54 <HAL_RCC_OscConfig+0x52c>
 8001b2a:	bf00      	nop
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	40007000 	.word	0x40007000
 8001b34:	4b9d      	ldr	r3, [pc, #628]	; (8001dac <HAL_RCC_OscConfig+0x784>)
 8001b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b3a:	4a9c      	ldr	r2, [pc, #624]	; (8001dac <HAL_RCC_OscConfig+0x784>)
 8001b3c:	f023 0301 	bic.w	r3, r3, #1
 8001b40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b44:	4b99      	ldr	r3, [pc, #612]	; (8001dac <HAL_RCC_OscConfig+0x784>)
 8001b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b4a:	4a98      	ldr	r2, [pc, #608]	; (8001dac <HAL_RCC_OscConfig+0x784>)
 8001b4c:	f023 0304 	bic.w	r3, r3, #4
 8001b50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d016      	beq.n	8001b8a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b5c:	f7ff f9ae 	bl	8000ebc <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b62:	e00a      	b.n	8001b7a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b64:	f7ff f9aa 	bl	8000ebc <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e168      	b.n	8001e4c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b7a:	4b8c      	ldr	r3, [pc, #560]	; (8001dac <HAL_RCC_OscConfig+0x784>)
 8001b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d0ed      	beq.n	8001b64 <HAL_RCC_OscConfig+0x53c>
 8001b88:	e015      	b.n	8001bb6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b8a:	f7ff f997 	bl	8000ebc <HAL_GetTick>
 8001b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b90:	e00a      	b.n	8001ba8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b92:	f7ff f993 	bl	8000ebc <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d901      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e151      	b.n	8001e4c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ba8:	4b80      	ldr	r3, [pc, #512]	; (8001dac <HAL_RCC_OscConfig+0x784>)
 8001baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1ed      	bne.n	8001b92 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bb6:	7ffb      	ldrb	r3, [r7, #31]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d105      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bbc:	4b7b      	ldr	r3, [pc, #492]	; (8001dac <HAL_RCC_OscConfig+0x784>)
 8001bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc0:	4a7a      	ldr	r2, [pc, #488]	; (8001dac <HAL_RCC_OscConfig+0x784>)
 8001bc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bc6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0320 	and.w	r3, r3, #32
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d03c      	beq.n	8001c4e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d01c      	beq.n	8001c16 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001bdc:	4b73      	ldr	r3, [pc, #460]	; (8001dac <HAL_RCC_OscConfig+0x784>)
 8001bde:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001be2:	4a72      	ldr	r2, [pc, #456]	; (8001dac <HAL_RCC_OscConfig+0x784>)
 8001be4:	f043 0301 	orr.w	r3, r3, #1
 8001be8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bec:	f7ff f966 	bl	8000ebc <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001bf2:	e008      	b.n	8001c06 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bf4:	f7ff f962 	bl	8000ebc <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e122      	b.n	8001e4c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c06:	4b69      	ldr	r3, [pc, #420]	; (8001dac <HAL_RCC_OscConfig+0x784>)
 8001c08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c0c:	f003 0302 	and.w	r3, r3, #2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d0ef      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x5cc>
 8001c14:	e01b      	b.n	8001c4e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c16:	4b65      	ldr	r3, [pc, #404]	; (8001dac <HAL_RCC_OscConfig+0x784>)
 8001c18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c1c:	4a63      	ldr	r2, [pc, #396]	; (8001dac <HAL_RCC_OscConfig+0x784>)
 8001c1e:	f023 0301 	bic.w	r3, r3, #1
 8001c22:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c26:	f7ff f949 	bl	8000ebc <HAL_GetTick>
 8001c2a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c2c:	e008      	b.n	8001c40 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c2e:	f7ff f945 	bl	8000ebc <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e105      	b.n	8001e4c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c40:	4b5a      	ldr	r3, [pc, #360]	; (8001dac <HAL_RCC_OscConfig+0x784>)
 8001c42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1ef      	bne.n	8001c2e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f000 80f9 	beq.w	8001e4a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	f040 80cf 	bne.w	8001e00 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c62:	4b52      	ldr	r3, [pc, #328]	; (8001dac <HAL_RCC_OscConfig+0x784>)
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	f003 0203 	and.w	r2, r3, #3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d12c      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c80:	3b01      	subs	r3, #1
 8001c82:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d123      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c92:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d11b      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ca2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d113      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cb2:	085b      	lsrs	r3, r3, #1
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d109      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	085b      	lsrs	r3, r3, #1
 8001cc8:	3b01      	subs	r3, #1
 8001cca:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d071      	beq.n	8001db4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	2b0c      	cmp	r3, #12
 8001cd4:	d068      	beq.n	8001da8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001cd6:	4b35      	ldr	r3, [pc, #212]	; (8001dac <HAL_RCC_OscConfig+0x784>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d105      	bne.n	8001cee <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001ce2:	4b32      	ldr	r3, [pc, #200]	; (8001dac <HAL_RCC_OscConfig+0x784>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e0ac      	b.n	8001e4c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001cf2:	4b2e      	ldr	r3, [pc, #184]	; (8001dac <HAL_RCC_OscConfig+0x784>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a2d      	ldr	r2, [pc, #180]	; (8001dac <HAL_RCC_OscConfig+0x784>)
 8001cf8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cfc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001cfe:	f7ff f8dd 	bl	8000ebc <HAL_GetTick>
 8001d02:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d04:	e008      	b.n	8001d18 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d06:	f7ff f8d9 	bl	8000ebc <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e099      	b.n	8001e4c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d18:	4b24      	ldr	r3, [pc, #144]	; (8001dac <HAL_RCC_OscConfig+0x784>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d1f0      	bne.n	8001d06 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d24:	4b21      	ldr	r3, [pc, #132]	; (8001dac <HAL_RCC_OscConfig+0x784>)
 8001d26:	68da      	ldr	r2, [r3, #12]
 8001d28:	4b21      	ldr	r3, [pc, #132]	; (8001db0 <HAL_RCC_OscConfig+0x788>)
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d34:	3a01      	subs	r2, #1
 8001d36:	0112      	lsls	r2, r2, #4
 8001d38:	4311      	orrs	r1, r2
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d3e:	0212      	lsls	r2, r2, #8
 8001d40:	4311      	orrs	r1, r2
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d46:	0852      	lsrs	r2, r2, #1
 8001d48:	3a01      	subs	r2, #1
 8001d4a:	0552      	lsls	r2, r2, #21
 8001d4c:	4311      	orrs	r1, r2
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d52:	0852      	lsrs	r2, r2, #1
 8001d54:	3a01      	subs	r2, #1
 8001d56:	0652      	lsls	r2, r2, #25
 8001d58:	4311      	orrs	r1, r2
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d5e:	06d2      	lsls	r2, r2, #27
 8001d60:	430a      	orrs	r2, r1
 8001d62:	4912      	ldr	r1, [pc, #72]	; (8001dac <HAL_RCC_OscConfig+0x784>)
 8001d64:	4313      	orrs	r3, r2
 8001d66:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d68:	4b10      	ldr	r3, [pc, #64]	; (8001dac <HAL_RCC_OscConfig+0x784>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a0f      	ldr	r2, [pc, #60]	; (8001dac <HAL_RCC_OscConfig+0x784>)
 8001d6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d72:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d74:	4b0d      	ldr	r3, [pc, #52]	; (8001dac <HAL_RCC_OscConfig+0x784>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	4a0c      	ldr	r2, [pc, #48]	; (8001dac <HAL_RCC_OscConfig+0x784>)
 8001d7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d7e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d80:	f7ff f89c 	bl	8000ebc <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d88:	f7ff f898 	bl	8000ebc <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e058      	b.n	8001e4c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d9a:	4b04      	ldr	r3, [pc, #16]	; (8001dac <HAL_RCC_OscConfig+0x784>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d0f0      	beq.n	8001d88 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001da6:	e050      	b.n	8001e4a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e04f      	b.n	8001e4c <HAL_RCC_OscConfig+0x824>
 8001dac:	40021000 	.word	0x40021000
 8001db0:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001db4:	4b27      	ldr	r3, [pc, #156]	; (8001e54 <HAL_RCC_OscConfig+0x82c>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d144      	bne.n	8001e4a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001dc0:	4b24      	ldr	r3, [pc, #144]	; (8001e54 <HAL_RCC_OscConfig+0x82c>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a23      	ldr	r2, [pc, #140]	; (8001e54 <HAL_RCC_OscConfig+0x82c>)
 8001dc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001dcc:	4b21      	ldr	r3, [pc, #132]	; (8001e54 <HAL_RCC_OscConfig+0x82c>)
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	4a20      	ldr	r2, [pc, #128]	; (8001e54 <HAL_RCC_OscConfig+0x82c>)
 8001dd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dd6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001dd8:	f7ff f870 	bl	8000ebc <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001de0:	f7ff f86c 	bl	8000ebc <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e02c      	b.n	8001e4c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001df2:	4b18      	ldr	r3, [pc, #96]	; (8001e54 <HAL_RCC_OscConfig+0x82c>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d0f0      	beq.n	8001de0 <HAL_RCC_OscConfig+0x7b8>
 8001dfe:	e024      	b.n	8001e4a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	2b0c      	cmp	r3, #12
 8001e04:	d01f      	beq.n	8001e46 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e06:	4b13      	ldr	r3, [pc, #76]	; (8001e54 <HAL_RCC_OscConfig+0x82c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a12      	ldr	r2, [pc, #72]	; (8001e54 <HAL_RCC_OscConfig+0x82c>)
 8001e0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e12:	f7ff f853 	bl	8000ebc <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e18:	e008      	b.n	8001e2c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e1a:	f7ff f84f 	bl	8000ebc <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e00f      	b.n	8001e4c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e2c:	4b09      	ldr	r3, [pc, #36]	; (8001e54 <HAL_RCC_OscConfig+0x82c>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d1f0      	bne.n	8001e1a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001e38:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <HAL_RCC_OscConfig+0x82c>)
 8001e3a:	68da      	ldr	r2, [r3, #12]
 8001e3c:	4905      	ldr	r1, [pc, #20]	; (8001e54 <HAL_RCC_OscConfig+0x82c>)
 8001e3e:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <HAL_RCC_OscConfig+0x830>)
 8001e40:	4013      	ands	r3, r2
 8001e42:	60cb      	str	r3, [r1, #12]
 8001e44:	e001      	b.n	8001e4a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e000      	b.n	8001e4c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3720      	adds	r7, #32
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40021000 	.word	0x40021000
 8001e58:	feeefffc 	.word	0xfeeefffc

08001e5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001e66:	2300      	movs	r3, #0
 8001e68:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d101      	bne.n	8001e74 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e11d      	b.n	80020b0 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e74:	4b90      	ldr	r3, [pc, #576]	; (80020b8 <HAL_RCC_ClockConfig+0x25c>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 030f 	and.w	r3, r3, #15
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d910      	bls.n	8001ea4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e82:	4b8d      	ldr	r3, [pc, #564]	; (80020b8 <HAL_RCC_ClockConfig+0x25c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f023 020f 	bic.w	r2, r3, #15
 8001e8a:	498b      	ldr	r1, [pc, #556]	; (80020b8 <HAL_RCC_ClockConfig+0x25c>)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e92:	4b89      	ldr	r3, [pc, #548]	; (80020b8 <HAL_RCC_ClockConfig+0x25c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 030f 	and.w	r3, r3, #15
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d001      	beq.n	8001ea4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e105      	b.n	80020b0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0302 	and.w	r3, r3, #2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d010      	beq.n	8001ed2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689a      	ldr	r2, [r3, #8]
 8001eb4:	4b81      	ldr	r3, [pc, #516]	; (80020bc <HAL_RCC_ClockConfig+0x260>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d908      	bls.n	8001ed2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ec0:	4b7e      	ldr	r3, [pc, #504]	; (80020bc <HAL_RCC_ClockConfig+0x260>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	497b      	ldr	r1, [pc, #492]	; (80020bc <HAL_RCC_ClockConfig+0x260>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d079      	beq.n	8001fd2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	2b03      	cmp	r3, #3
 8001ee4:	d11e      	bne.n	8001f24 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ee6:	4b75      	ldr	r3, [pc, #468]	; (80020bc <HAL_RCC_ClockConfig+0x260>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d101      	bne.n	8001ef6 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e0dc      	b.n	80020b0 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001ef6:	f000 fa09 	bl	800230c <RCC_GetSysClockFreqFromPLLSource>
 8001efa:	4603      	mov	r3, r0
 8001efc:	4a70      	ldr	r2, [pc, #448]	; (80020c0 <HAL_RCC_ClockConfig+0x264>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d946      	bls.n	8001f90 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001f02:	4b6e      	ldr	r3, [pc, #440]	; (80020bc <HAL_RCC_ClockConfig+0x260>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d140      	bne.n	8001f90 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f0e:	4b6b      	ldr	r3, [pc, #428]	; (80020bc <HAL_RCC_ClockConfig+0x260>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f16:	4a69      	ldr	r2, [pc, #420]	; (80020bc <HAL_RCC_ClockConfig+0x260>)
 8001f18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f1c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001f1e:	2380      	movs	r3, #128	; 0x80
 8001f20:	617b      	str	r3, [r7, #20]
 8001f22:	e035      	b.n	8001f90 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d107      	bne.n	8001f3c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f2c:	4b63      	ldr	r3, [pc, #396]	; (80020bc <HAL_RCC_ClockConfig+0x260>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d115      	bne.n	8001f64 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e0b9      	b.n	80020b0 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d107      	bne.n	8001f54 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f44:	4b5d      	ldr	r3, [pc, #372]	; (80020bc <HAL_RCC_ClockConfig+0x260>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0302 	and.w	r3, r3, #2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d109      	bne.n	8001f64 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e0ad      	b.n	80020b0 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f54:	4b59      	ldr	r3, [pc, #356]	; (80020bc <HAL_RCC_ClockConfig+0x260>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d101      	bne.n	8001f64 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e0a5      	b.n	80020b0 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001f64:	f000 f8b4 	bl	80020d0 <HAL_RCC_GetSysClockFreq>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	4a55      	ldr	r2, [pc, #340]	; (80020c0 <HAL_RCC_ClockConfig+0x264>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d90f      	bls.n	8001f90 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001f70:	4b52      	ldr	r3, [pc, #328]	; (80020bc <HAL_RCC_ClockConfig+0x260>)
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d109      	bne.n	8001f90 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f7c:	4b4f      	ldr	r3, [pc, #316]	; (80020bc <HAL_RCC_ClockConfig+0x260>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f84:	4a4d      	ldr	r2, [pc, #308]	; (80020bc <HAL_RCC_ClockConfig+0x260>)
 8001f86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f8a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001f8c:	2380      	movs	r3, #128	; 0x80
 8001f8e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f90:	4b4a      	ldr	r3, [pc, #296]	; (80020bc <HAL_RCC_ClockConfig+0x260>)
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f023 0203 	bic.w	r2, r3, #3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	4947      	ldr	r1, [pc, #284]	; (80020bc <HAL_RCC_ClockConfig+0x260>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fa2:	f7fe ff8b 	bl	8000ebc <HAL_GetTick>
 8001fa6:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fa8:	e00a      	b.n	8001fc0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001faa:	f7fe ff87 	bl	8000ebc <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e077      	b.n	80020b0 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fc0:	4b3e      	ldr	r3, [pc, #248]	; (80020bc <HAL_RCC_ClockConfig+0x260>)
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f003 020c 	and.w	r2, r3, #12
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d1eb      	bne.n	8001faa <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	2b80      	cmp	r3, #128	; 0x80
 8001fd6:	d105      	bne.n	8001fe4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001fd8:	4b38      	ldr	r3, [pc, #224]	; (80020bc <HAL_RCC_ClockConfig+0x260>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	4a37      	ldr	r2, [pc, #220]	; (80020bc <HAL_RCC_ClockConfig+0x260>)
 8001fde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fe2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d010      	beq.n	8002012 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	4b31      	ldr	r3, [pc, #196]	; (80020bc <HAL_RCC_ClockConfig+0x260>)
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d208      	bcs.n	8002012 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002000:	4b2e      	ldr	r3, [pc, #184]	; (80020bc <HAL_RCC_ClockConfig+0x260>)
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	492b      	ldr	r1, [pc, #172]	; (80020bc <HAL_RCC_ClockConfig+0x260>)
 800200e:	4313      	orrs	r3, r2
 8002010:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002012:	4b29      	ldr	r3, [pc, #164]	; (80020b8 <HAL_RCC_ClockConfig+0x25c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	429a      	cmp	r2, r3
 800201e:	d210      	bcs.n	8002042 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002020:	4b25      	ldr	r3, [pc, #148]	; (80020b8 <HAL_RCC_ClockConfig+0x25c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f023 020f 	bic.w	r2, r3, #15
 8002028:	4923      	ldr	r1, [pc, #140]	; (80020b8 <HAL_RCC_ClockConfig+0x25c>)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	4313      	orrs	r3, r2
 800202e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002030:	4b21      	ldr	r3, [pc, #132]	; (80020b8 <HAL_RCC_ClockConfig+0x25c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 030f 	and.w	r3, r3, #15
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	429a      	cmp	r2, r3
 800203c:	d001      	beq.n	8002042 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e036      	b.n	80020b0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0304 	and.w	r3, r3, #4
 800204a:	2b00      	cmp	r3, #0
 800204c:	d008      	beq.n	8002060 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800204e:	4b1b      	ldr	r3, [pc, #108]	; (80020bc <HAL_RCC_ClockConfig+0x260>)
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	4918      	ldr	r1, [pc, #96]	; (80020bc <HAL_RCC_ClockConfig+0x260>)
 800205c:	4313      	orrs	r3, r2
 800205e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0308 	and.w	r3, r3, #8
 8002068:	2b00      	cmp	r3, #0
 800206a:	d009      	beq.n	8002080 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800206c:	4b13      	ldr	r3, [pc, #76]	; (80020bc <HAL_RCC_ClockConfig+0x260>)
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	4910      	ldr	r1, [pc, #64]	; (80020bc <HAL_RCC_ClockConfig+0x260>)
 800207c:	4313      	orrs	r3, r2
 800207e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002080:	f000 f826 	bl	80020d0 <HAL_RCC_GetSysClockFreq>
 8002084:	4602      	mov	r2, r0
 8002086:	4b0d      	ldr	r3, [pc, #52]	; (80020bc <HAL_RCC_ClockConfig+0x260>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	091b      	lsrs	r3, r3, #4
 800208c:	f003 030f 	and.w	r3, r3, #15
 8002090:	490c      	ldr	r1, [pc, #48]	; (80020c4 <HAL_RCC_ClockConfig+0x268>)
 8002092:	5ccb      	ldrb	r3, [r1, r3]
 8002094:	f003 031f 	and.w	r3, r3, #31
 8002098:	fa22 f303 	lsr.w	r3, r2, r3
 800209c:	4a0a      	ldr	r2, [pc, #40]	; (80020c8 <HAL_RCC_ClockConfig+0x26c>)
 800209e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80020a0:	4b0a      	ldr	r3, [pc, #40]	; (80020cc <HAL_RCC_ClockConfig+0x270>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7fe feb9 	bl	8000e1c <HAL_InitTick>
 80020aa:	4603      	mov	r3, r0
 80020ac:	73fb      	strb	r3, [r7, #15]

  return status;
 80020ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3718      	adds	r7, #24
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40022000 	.word	0x40022000
 80020bc:	40021000 	.word	0x40021000
 80020c0:	04c4b400 	.word	0x04c4b400
 80020c4:	08004214 	.word	0x08004214
 80020c8:	20000000 	.word	0x20000000
 80020cc:	20000004 	.word	0x20000004

080020d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b089      	sub	sp, #36	; 0x24
 80020d4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80020d6:	2300      	movs	r3, #0
 80020d8:	61fb      	str	r3, [r7, #28]
 80020da:	2300      	movs	r3, #0
 80020dc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020de:	4b3e      	ldr	r3, [pc, #248]	; (80021d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f003 030c 	and.w	r3, r3, #12
 80020e6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020e8:	4b3b      	ldr	r3, [pc, #236]	; (80021d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	f003 0303 	and.w	r3, r3, #3
 80020f0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d005      	beq.n	8002104 <HAL_RCC_GetSysClockFreq+0x34>
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	2b0c      	cmp	r3, #12
 80020fc:	d121      	bne.n	8002142 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d11e      	bne.n	8002142 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002104:	4b34      	ldr	r3, [pc, #208]	; (80021d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0308 	and.w	r3, r3, #8
 800210c:	2b00      	cmp	r3, #0
 800210e:	d107      	bne.n	8002120 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002110:	4b31      	ldr	r3, [pc, #196]	; (80021d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002112:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002116:	0a1b      	lsrs	r3, r3, #8
 8002118:	f003 030f 	and.w	r3, r3, #15
 800211c:	61fb      	str	r3, [r7, #28]
 800211e:	e005      	b.n	800212c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002120:	4b2d      	ldr	r3, [pc, #180]	; (80021d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	091b      	lsrs	r3, r3, #4
 8002126:	f003 030f 	and.w	r3, r3, #15
 800212a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800212c:	4a2b      	ldr	r2, [pc, #172]	; (80021dc <HAL_RCC_GetSysClockFreq+0x10c>)
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002134:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d10d      	bne.n	8002158 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002140:	e00a      	b.n	8002158 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	2b04      	cmp	r3, #4
 8002146:	d102      	bne.n	800214e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002148:	4b25      	ldr	r3, [pc, #148]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x110>)
 800214a:	61bb      	str	r3, [r7, #24]
 800214c:	e004      	b.n	8002158 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	2b08      	cmp	r3, #8
 8002152:	d101      	bne.n	8002158 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002154:	4b23      	ldr	r3, [pc, #140]	; (80021e4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002156:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	2b0c      	cmp	r3, #12
 800215c:	d134      	bne.n	80021c8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800215e:	4b1e      	ldr	r3, [pc, #120]	; (80021d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	f003 0303 	and.w	r3, r3, #3
 8002166:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	2b02      	cmp	r3, #2
 800216c:	d003      	beq.n	8002176 <HAL_RCC_GetSysClockFreq+0xa6>
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	2b03      	cmp	r3, #3
 8002172:	d003      	beq.n	800217c <HAL_RCC_GetSysClockFreq+0xac>
 8002174:	e005      	b.n	8002182 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002176:	4b1a      	ldr	r3, [pc, #104]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002178:	617b      	str	r3, [r7, #20]
      break;
 800217a:	e005      	b.n	8002188 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800217c:	4b19      	ldr	r3, [pc, #100]	; (80021e4 <HAL_RCC_GetSysClockFreq+0x114>)
 800217e:	617b      	str	r3, [r7, #20]
      break;
 8002180:	e002      	b.n	8002188 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	617b      	str	r3, [r7, #20]
      break;
 8002186:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002188:	4b13      	ldr	r3, [pc, #76]	; (80021d8 <HAL_RCC_GetSysClockFreq+0x108>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	091b      	lsrs	r3, r3, #4
 800218e:	f003 030f 	and.w	r3, r3, #15
 8002192:	3301      	adds	r3, #1
 8002194:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002196:	4b10      	ldr	r3, [pc, #64]	; (80021d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	0a1b      	lsrs	r3, r3, #8
 800219c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021a0:	697a      	ldr	r2, [r7, #20]
 80021a2:	fb03 f202 	mul.w	r2, r3, r2
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021ae:	4b0a      	ldr	r3, [pc, #40]	; (80021d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	0e5b      	lsrs	r3, r3, #25
 80021b4:	f003 0303 	and.w	r3, r3, #3
 80021b8:	3301      	adds	r3, #1
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80021c8:	69bb      	ldr	r3, [r7, #24]
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3724      	adds	r7, #36	; 0x24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	40021000 	.word	0x40021000
 80021dc:	0800422c 	.word	0x0800422c
 80021e0:	00f42400 	.word	0x00f42400
 80021e4:	007a1200 	.word	0x007a1200

080021e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021ec:	4b03      	ldr	r3, [pc, #12]	; (80021fc <HAL_RCC_GetHCLKFreq+0x14>)
 80021ee:	681b      	ldr	r3, [r3, #0]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	20000000 	.word	0x20000000

08002200 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002204:	f7ff fff0 	bl	80021e8 <HAL_RCC_GetHCLKFreq>
 8002208:	4602      	mov	r2, r0
 800220a:	4b06      	ldr	r3, [pc, #24]	; (8002224 <HAL_RCC_GetPCLK1Freq+0x24>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	0a1b      	lsrs	r3, r3, #8
 8002210:	f003 0307 	and.w	r3, r3, #7
 8002214:	4904      	ldr	r1, [pc, #16]	; (8002228 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002216:	5ccb      	ldrb	r3, [r1, r3]
 8002218:	f003 031f 	and.w	r3, r3, #31
 800221c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002220:	4618      	mov	r0, r3
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40021000 	.word	0x40021000
 8002228:	08004224 	.word	0x08004224

0800222c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002230:	f7ff ffda 	bl	80021e8 <HAL_RCC_GetHCLKFreq>
 8002234:	4602      	mov	r2, r0
 8002236:	4b06      	ldr	r3, [pc, #24]	; (8002250 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	0adb      	lsrs	r3, r3, #11
 800223c:	f003 0307 	and.w	r3, r3, #7
 8002240:	4904      	ldr	r1, [pc, #16]	; (8002254 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002242:	5ccb      	ldrb	r3, [r1, r3]
 8002244:	f003 031f 	and.w	r3, r3, #31
 8002248:	fa22 f303 	lsr.w	r3, r2, r3
}
 800224c:	4618      	mov	r0, r3
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40021000 	.word	0x40021000
 8002254:	08004224 	.word	0x08004224

08002258 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002260:	2300      	movs	r3, #0
 8002262:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002264:	4b27      	ldr	r3, [pc, #156]	; (8002304 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d003      	beq.n	8002278 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002270:	f7ff f906 	bl	8001480 <HAL_PWREx_GetVoltageRange>
 8002274:	6178      	str	r0, [r7, #20]
 8002276:	e014      	b.n	80022a2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002278:	4b22      	ldr	r3, [pc, #136]	; (8002304 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800227a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800227c:	4a21      	ldr	r2, [pc, #132]	; (8002304 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800227e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002282:	6593      	str	r3, [r2, #88]	; 0x58
 8002284:	4b1f      	ldr	r3, [pc, #124]	; (8002304 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228c:	60fb      	str	r3, [r7, #12]
 800228e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002290:	f7ff f8f6 	bl	8001480 <HAL_PWREx_GetVoltageRange>
 8002294:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002296:	4b1b      	ldr	r3, [pc, #108]	; (8002304 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800229a:	4a1a      	ldr	r2, [pc, #104]	; (8002304 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800229c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022a0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022a8:	d10b      	bne.n	80022c2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2b80      	cmp	r3, #128	; 0x80
 80022ae:	d913      	bls.n	80022d8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2ba0      	cmp	r3, #160	; 0xa0
 80022b4:	d902      	bls.n	80022bc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022b6:	2302      	movs	r3, #2
 80022b8:	613b      	str	r3, [r7, #16]
 80022ba:	e00d      	b.n	80022d8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022bc:	2301      	movs	r3, #1
 80022be:	613b      	str	r3, [r7, #16]
 80022c0:	e00a      	b.n	80022d8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2b7f      	cmp	r3, #127	; 0x7f
 80022c6:	d902      	bls.n	80022ce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80022c8:	2302      	movs	r3, #2
 80022ca:	613b      	str	r3, [r7, #16]
 80022cc:	e004      	b.n	80022d8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2b70      	cmp	r3, #112	; 0x70
 80022d2:	d101      	bne.n	80022d8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022d4:	2301      	movs	r3, #1
 80022d6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80022d8:	4b0b      	ldr	r3, [pc, #44]	; (8002308 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f023 020f 	bic.w	r2, r3, #15
 80022e0:	4909      	ldr	r1, [pc, #36]	; (8002308 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80022e8:	4b07      	ldr	r3, [pc, #28]	; (8002308 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 030f 	and.w	r3, r3, #15
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d001      	beq.n	80022fa <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e000      	b.n	80022fc <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3718      	adds	r7, #24
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	40021000 	.word	0x40021000
 8002308:	40022000 	.word	0x40022000

0800230c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800230c:	b480      	push	{r7}
 800230e:	b087      	sub	sp, #28
 8002310:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002312:	4b2d      	ldr	r3, [pc, #180]	; (80023c8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	f003 0303 	and.w	r3, r3, #3
 800231a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2b03      	cmp	r3, #3
 8002320:	d00b      	beq.n	800233a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2b03      	cmp	r3, #3
 8002326:	d825      	bhi.n	8002374 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d008      	beq.n	8002340 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2b02      	cmp	r3, #2
 8002332:	d11f      	bne.n	8002374 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002334:	4b25      	ldr	r3, [pc, #148]	; (80023cc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002336:	613b      	str	r3, [r7, #16]
    break;
 8002338:	e01f      	b.n	800237a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800233a:	4b25      	ldr	r3, [pc, #148]	; (80023d0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800233c:	613b      	str	r3, [r7, #16]
    break;
 800233e:	e01c      	b.n	800237a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002340:	4b21      	ldr	r3, [pc, #132]	; (80023c8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0308 	and.w	r3, r3, #8
 8002348:	2b00      	cmp	r3, #0
 800234a:	d107      	bne.n	800235c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800234c:	4b1e      	ldr	r3, [pc, #120]	; (80023c8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800234e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002352:	0a1b      	lsrs	r3, r3, #8
 8002354:	f003 030f 	and.w	r3, r3, #15
 8002358:	617b      	str	r3, [r7, #20]
 800235a:	e005      	b.n	8002368 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800235c:	4b1a      	ldr	r3, [pc, #104]	; (80023c8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	091b      	lsrs	r3, r3, #4
 8002362:	f003 030f 	and.w	r3, r3, #15
 8002366:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002368:	4a1a      	ldr	r2, [pc, #104]	; (80023d4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002370:	613b      	str	r3, [r7, #16]
    break;
 8002372:	e002      	b.n	800237a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002374:	2300      	movs	r3, #0
 8002376:	613b      	str	r3, [r7, #16]
    break;
 8002378:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800237a:	4b13      	ldr	r3, [pc, #76]	; (80023c8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	091b      	lsrs	r3, r3, #4
 8002380:	f003 030f 	and.w	r3, r3, #15
 8002384:	3301      	adds	r3, #1
 8002386:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002388:	4b0f      	ldr	r3, [pc, #60]	; (80023c8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	0a1b      	lsrs	r3, r3, #8
 800238e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	fb03 f202 	mul.w	r2, r3, r2
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	fbb2 f3f3 	udiv	r3, r2, r3
 800239e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80023a0:	4b09      	ldr	r3, [pc, #36]	; (80023c8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	0e5b      	lsrs	r3, r3, #25
 80023a6:	f003 0303 	and.w	r3, r3, #3
 80023aa:	3301      	adds	r3, #1
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80023ba:	683b      	ldr	r3, [r7, #0]
}
 80023bc:	4618      	mov	r0, r3
 80023be:	371c      	adds	r7, #28
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr
 80023c8:	40021000 	.word	0x40021000
 80023cc:	00f42400 	.word	0x00f42400
 80023d0:	007a1200 	.word	0x007a1200
 80023d4:	0800422c 	.word	0x0800422c

080023d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023e0:	2300      	movs	r3, #0
 80023e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023e4:	2300      	movs	r3, #0
 80023e6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d040      	beq.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023f8:	2b80      	cmp	r3, #128	; 0x80
 80023fa:	d02a      	beq.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80023fc:	2b80      	cmp	r3, #128	; 0x80
 80023fe:	d825      	bhi.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002400:	2b60      	cmp	r3, #96	; 0x60
 8002402:	d026      	beq.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002404:	2b60      	cmp	r3, #96	; 0x60
 8002406:	d821      	bhi.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002408:	2b40      	cmp	r3, #64	; 0x40
 800240a:	d006      	beq.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800240c:	2b40      	cmp	r3, #64	; 0x40
 800240e:	d81d      	bhi.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002410:	2b00      	cmp	r3, #0
 8002412:	d009      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002414:	2b20      	cmp	r3, #32
 8002416:	d010      	beq.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002418:	e018      	b.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800241a:	4b89      	ldr	r3, [pc, #548]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	4a88      	ldr	r2, [pc, #544]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002424:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002426:	e015      	b.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	3304      	adds	r3, #4
 800242c:	2100      	movs	r1, #0
 800242e:	4618      	mov	r0, r3
 8002430:	f000 fb02 	bl	8002a38 <RCCEx_PLLSAI1_Config>
 8002434:	4603      	mov	r3, r0
 8002436:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002438:	e00c      	b.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	3320      	adds	r3, #32
 800243e:	2100      	movs	r1, #0
 8002440:	4618      	mov	r0, r3
 8002442:	f000 fbed 	bl	8002c20 <RCCEx_PLLSAI2_Config>
 8002446:	4603      	mov	r3, r0
 8002448:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800244a:	e003      	b.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	74fb      	strb	r3, [r7, #19]
      break;
 8002450:	e000      	b.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002452:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002454:	7cfb      	ldrb	r3, [r7, #19]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d10b      	bne.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800245a:	4b79      	ldr	r3, [pc, #484]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800245c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002460:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002468:	4975      	ldr	r1, [pc, #468]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800246a:	4313      	orrs	r3, r2
 800246c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002470:	e001      	b.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002472:	7cfb      	ldrb	r3, [r7, #19]
 8002474:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d047      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002486:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800248a:	d030      	beq.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x116>
 800248c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002490:	d82a      	bhi.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002492:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002496:	d02a      	beq.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002498:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800249c:	d824      	bhi.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800249e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024a2:	d008      	beq.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80024a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024a8:	d81e      	bhi.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d00a      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80024ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024b2:	d010      	beq.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80024b4:	e018      	b.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80024b6:	4b62      	ldr	r3, [pc, #392]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	4a61      	ldr	r2, [pc, #388]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80024bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024c2:	e015      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	3304      	adds	r3, #4
 80024c8:	2100      	movs	r1, #0
 80024ca:	4618      	mov	r0, r3
 80024cc:	f000 fab4 	bl	8002a38 <RCCEx_PLLSAI1_Config>
 80024d0:	4603      	mov	r3, r0
 80024d2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024d4:	e00c      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	3320      	adds	r3, #32
 80024da:	2100      	movs	r1, #0
 80024dc:	4618      	mov	r0, r3
 80024de:	f000 fb9f 	bl	8002c20 <RCCEx_PLLSAI2_Config>
 80024e2:	4603      	mov	r3, r0
 80024e4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024e6:	e003      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	74fb      	strb	r3, [r7, #19]
      break;
 80024ec:	e000      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80024ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024f0:	7cfb      	ldrb	r3, [r7, #19]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d10b      	bne.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80024f6:	4b52      	ldr	r3, [pc, #328]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80024f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80024fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002504:	494e      	ldr	r1, [pc, #312]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002506:	4313      	orrs	r3, r2
 8002508:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800250c:	e001      	b.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800250e:	7cfb      	ldrb	r3, [r7, #19]
 8002510:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251a:	2b00      	cmp	r3, #0
 800251c:	f000 809f 	beq.w	800265e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002520:	2300      	movs	r3, #0
 8002522:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002524:	4b46      	ldr	r3, [pc, #280]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d101      	bne.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002530:	2301      	movs	r3, #1
 8002532:	e000      	b.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002534:	2300      	movs	r3, #0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00d      	beq.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800253a:	4b41      	ldr	r3, [pc, #260]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800253c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800253e:	4a40      	ldr	r2, [pc, #256]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002544:	6593      	str	r3, [r2, #88]	; 0x58
 8002546:	4b3e      	ldr	r3, [pc, #248]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800254a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254e:	60bb      	str	r3, [r7, #8]
 8002550:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002552:	2301      	movs	r3, #1
 8002554:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002556:	4b3b      	ldr	r3, [pc, #236]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a3a      	ldr	r2, [pc, #232]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800255c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002560:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002562:	f7fe fcab 	bl	8000ebc <HAL_GetTick>
 8002566:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002568:	e009      	b.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800256a:	f7fe fca7 	bl	8000ebc <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d902      	bls.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	74fb      	strb	r3, [r7, #19]
        break;
 800257c:	e005      	b.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800257e:	4b31      	ldr	r3, [pc, #196]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002586:	2b00      	cmp	r3, #0
 8002588:	d0ef      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800258a:	7cfb      	ldrb	r3, [r7, #19]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d15b      	bne.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002590:	4b2b      	ldr	r3, [pc, #172]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002596:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800259a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d01f      	beq.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a8:	697a      	ldr	r2, [r7, #20]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d019      	beq.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80025ae:	4b24      	ldr	r3, [pc, #144]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025b8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80025ba:	4b21      	ldr	r3, [pc, #132]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025c0:	4a1f      	ldr	r2, [pc, #124]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80025ca:	4b1d      	ldr	r3, [pc, #116]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d0:	4a1b      	ldr	r2, [pc, #108]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80025da:	4a19      	ldr	r2, [pc, #100]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d016      	beq.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ec:	f7fe fc66 	bl	8000ebc <HAL_GetTick>
 80025f0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025f2:	e00b      	b.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025f4:	f7fe fc62 	bl	8000ebc <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002602:	4293      	cmp	r3, r2
 8002604:	d902      	bls.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	74fb      	strb	r3, [r7, #19]
            break;
 800260a:	e006      	b.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800260c:	4b0c      	ldr	r3, [pc, #48]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800260e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d0ec      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800261a:	7cfb      	ldrb	r3, [r7, #19]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d10c      	bne.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002620:	4b07      	ldr	r3, [pc, #28]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002626:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002630:	4903      	ldr	r1, [pc, #12]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002632:	4313      	orrs	r3, r2
 8002634:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002638:	e008      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800263a:	7cfb      	ldrb	r3, [r7, #19]
 800263c:	74bb      	strb	r3, [r7, #18]
 800263e:	e005      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002640:	40021000 	.word	0x40021000
 8002644:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002648:	7cfb      	ldrb	r3, [r7, #19]
 800264a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800264c:	7c7b      	ldrb	r3, [r7, #17]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d105      	bne.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002652:	4ba0      	ldr	r3, [pc, #640]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002656:	4a9f      	ldr	r2, [pc, #636]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002658:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800265c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00a      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800266a:	4b9a      	ldr	r3, [pc, #616]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800266c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002670:	f023 0203 	bic.w	r2, r3, #3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002678:	4996      	ldr	r1, [pc, #600]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800267a:	4313      	orrs	r3, r2
 800267c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d00a      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800268c:	4b91      	ldr	r3, [pc, #580]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800268e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002692:	f023 020c 	bic.w	r2, r3, #12
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269a:	498e      	ldr	r1, [pc, #568]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800269c:	4313      	orrs	r3, r2
 800269e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0304 	and.w	r3, r3, #4
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00a      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026ae:	4b89      	ldr	r3, [pc, #548]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026bc:	4985      	ldr	r1, [pc, #532]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0308 	and.w	r3, r3, #8
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d00a      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026d0:	4b80      	ldr	r3, [pc, #512]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026de:	497d      	ldr	r1, [pc, #500]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0310 	and.w	r3, r3, #16
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00a      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80026f2:	4b78      	ldr	r3, [pc, #480]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002700:	4974      	ldr	r1, [pc, #464]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002702:	4313      	orrs	r3, r2
 8002704:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0320 	and.w	r3, r3, #32
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00a      	beq.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002714:	4b6f      	ldr	r3, [pc, #444]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800271a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002722:	496c      	ldr	r1, [pc, #432]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002724:	4313      	orrs	r3, r2
 8002726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00a      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002736:	4b67      	ldr	r3, [pc, #412]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800273c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002744:	4963      	ldr	r1, [pc, #396]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002746:	4313      	orrs	r3, r2
 8002748:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002754:	2b00      	cmp	r3, #0
 8002756:	d00a      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002758:	4b5e      	ldr	r3, [pc, #376]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800275a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800275e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002766:	495b      	ldr	r1, [pc, #364]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002768:	4313      	orrs	r3, r2
 800276a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00a      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800277a:	4b56      	ldr	r3, [pc, #344]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800277c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002780:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002788:	4952      	ldr	r1, [pc, #328]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800278a:	4313      	orrs	r3, r2
 800278c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002798:	2b00      	cmp	r3, #0
 800279a:	d00a      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800279c:	4b4d      	ldr	r3, [pc, #308]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800279e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027aa:	494a      	ldr	r1, [pc, #296]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00a      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027be:	4b45      	ldr	r3, [pc, #276]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027cc:	4941      	ldr	r1, [pc, #260]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d00a      	beq.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80027e0:	4b3c      	ldr	r3, [pc, #240]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80027e6:	f023 0203 	bic.w	r2, r3, #3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ee:	4939      	ldr	r1, [pc, #228]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d028      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002802:	4b34      	ldr	r3, [pc, #208]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002808:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002810:	4930      	ldr	r1, [pc, #192]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002812:	4313      	orrs	r3, r2
 8002814:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800281c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002820:	d106      	bne.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002822:	4b2c      	ldr	r3, [pc, #176]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	4a2b      	ldr	r2, [pc, #172]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002828:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800282c:	60d3      	str	r3, [r2, #12]
 800282e:	e011      	b.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002834:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002838:	d10c      	bne.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	3304      	adds	r3, #4
 800283e:	2101      	movs	r1, #1
 8002840:	4618      	mov	r0, r3
 8002842:	f000 f8f9 	bl	8002a38 <RCCEx_PLLSAI1_Config>
 8002846:	4603      	mov	r3, r0
 8002848:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800284a:	7cfb      	ldrb	r3, [r7, #19]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8002850:	7cfb      	ldrb	r3, [r7, #19]
 8002852:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d04d      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002864:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002868:	d108      	bne.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800286a:	4b1a      	ldr	r3, [pc, #104]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800286c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002870:	4a18      	ldr	r2, [pc, #96]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002872:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002876:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800287a:	e012      	b.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800287c:	4b15      	ldr	r3, [pc, #84]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800287e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002882:	4a14      	ldr	r2, [pc, #80]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002884:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002888:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800288c:	4b11      	ldr	r3, [pc, #68]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800288e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002892:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800289a:	490e      	ldr	r1, [pc, #56]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800289c:	4313      	orrs	r3, r2
 800289e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028aa:	d106      	bne.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028ac:	4b09      	ldr	r3, [pc, #36]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	4a08      	ldr	r2, [pc, #32]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028b6:	60d3      	str	r3, [r2, #12]
 80028b8:	e020      	b.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028c2:	d109      	bne.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80028c4:	4b03      	ldr	r3, [pc, #12]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	4a02      	ldr	r2, [pc, #8]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ce:	60d3      	str	r3, [r2, #12]
 80028d0:	e014      	b.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x524>
 80028d2:	bf00      	nop
 80028d4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028e0:	d10c      	bne.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	3304      	adds	r3, #4
 80028e6:	2101      	movs	r1, #1
 80028e8:	4618      	mov	r0, r3
 80028ea:	f000 f8a5 	bl	8002a38 <RCCEx_PLLSAI1_Config>
 80028ee:	4603      	mov	r3, r0
 80028f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028f2:	7cfb      	ldrb	r3, [r7, #19]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80028f8:	7cfb      	ldrb	r3, [r7, #19]
 80028fa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d028      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002908:	4b4a      	ldr	r3, [pc, #296]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800290a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800290e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002916:	4947      	ldr	r1, [pc, #284]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002918:	4313      	orrs	r3, r2
 800291a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002922:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002926:	d106      	bne.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002928:	4b42      	ldr	r3, [pc, #264]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	4a41      	ldr	r2, [pc, #260]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800292e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002932:	60d3      	str	r3, [r2, #12]
 8002934:	e011      	b.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800293a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800293e:	d10c      	bne.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3304      	adds	r3, #4
 8002944:	2101      	movs	r1, #1
 8002946:	4618      	mov	r0, r3
 8002948:	f000 f876 	bl	8002a38 <RCCEx_PLLSAI1_Config>
 800294c:	4603      	mov	r3, r0
 800294e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002950:	7cfb      	ldrb	r3, [r7, #19]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8002956:	7cfb      	ldrb	r3, [r7, #19]
 8002958:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d01e      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002966:	4b33      	ldr	r3, [pc, #204]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800296c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002976:	492f      	ldr	r1, [pc, #188]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002978:	4313      	orrs	r3, r2
 800297a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002984:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002988:	d10c      	bne.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	3304      	adds	r3, #4
 800298e:	2102      	movs	r1, #2
 8002990:	4618      	mov	r0, r3
 8002992:	f000 f851 	bl	8002a38 <RCCEx_PLLSAI1_Config>
 8002996:	4603      	mov	r3, r0
 8002998:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800299a:	7cfb      	ldrb	r3, [r7, #19]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80029a0:	7cfb      	ldrb	r3, [r7, #19]
 80029a2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d00b      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80029b0:	4b20      	ldr	r3, [pc, #128]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80029b6:	f023 0204 	bic.w	r2, r3, #4
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029c0:	491c      	ldr	r1, [pc, #112]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d00b      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80029d4:	4b17      	ldr	r3, [pc, #92]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80029da:	f023 0218 	bic.w	r2, r3, #24
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e4:	4913      	ldr	r1, [pc, #76]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d017      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80029f8:	4b0e      	ldr	r3, [pc, #56]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80029fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a08:	490a      	ldr	r1, [pc, #40]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a1a:	d105      	bne.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a1c:	4b05      	ldr	r3, [pc, #20]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	4a04      	ldr	r2, [pc, #16]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a26:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002a28:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3718      	adds	r7, #24
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	40021000 	.word	0x40021000

08002a38 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a42:	2300      	movs	r3, #0
 8002a44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a46:	4b72      	ldr	r3, [pc, #456]	; (8002c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	f003 0303 	and.w	r3, r3, #3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00e      	beq.n	8002a70 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002a52:	4b6f      	ldr	r3, [pc, #444]	; (8002c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	f003 0203 	and.w	r2, r3, #3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d103      	bne.n	8002a6a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
       ||
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d142      	bne.n	8002af0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	73fb      	strb	r3, [r7, #15]
 8002a6e:	e03f      	b.n	8002af0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2b03      	cmp	r3, #3
 8002a76:	d018      	beq.n	8002aaa <RCCEx_PLLSAI1_Config+0x72>
 8002a78:	2b03      	cmp	r3, #3
 8002a7a:	d825      	bhi.n	8002ac8 <RCCEx_PLLSAI1_Config+0x90>
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d002      	beq.n	8002a86 <RCCEx_PLLSAI1_Config+0x4e>
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d009      	beq.n	8002a98 <RCCEx_PLLSAI1_Config+0x60>
 8002a84:	e020      	b.n	8002ac8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a86:	4b62      	ldr	r3, [pc, #392]	; (8002c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d11d      	bne.n	8002ace <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a96:	e01a      	b.n	8002ace <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a98:	4b5d      	ldr	r3, [pc, #372]	; (8002c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d116      	bne.n	8002ad2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002aa8:	e013      	b.n	8002ad2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002aaa:	4b59      	ldr	r3, [pc, #356]	; (8002c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d10f      	bne.n	8002ad6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ab6:	4b56      	ldr	r3, [pc, #344]	; (8002c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d109      	bne.n	8002ad6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ac6:	e006      	b.n	8002ad6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	73fb      	strb	r3, [r7, #15]
      break;
 8002acc:	e004      	b.n	8002ad8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002ace:	bf00      	nop
 8002ad0:	e002      	b.n	8002ad8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002ad2:	bf00      	nop
 8002ad4:	e000      	b.n	8002ad8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002ad6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ad8:	7bfb      	ldrb	r3, [r7, #15]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d108      	bne.n	8002af0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8002ade:	4b4c      	ldr	r3, [pc, #304]	; (8002c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	f023 0203 	bic.w	r2, r3, #3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4949      	ldr	r1, [pc, #292]	; (8002c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002af0:	7bfb      	ldrb	r3, [r7, #15]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f040 8086 	bne.w	8002c04 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002af8:	4b45      	ldr	r3, [pc, #276]	; (8002c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a44      	ldr	r2, [pc, #272]	; (8002c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002afe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b04:	f7fe f9da 	bl	8000ebc <HAL_GetTick>
 8002b08:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b0a:	e009      	b.n	8002b20 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b0c:	f7fe f9d6 	bl	8000ebc <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d902      	bls.n	8002b20 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	73fb      	strb	r3, [r7, #15]
        break;
 8002b1e:	e005      	b.n	8002b2c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b20:	4b3b      	ldr	r3, [pc, #236]	; (8002c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1ef      	bne.n	8002b0c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002b2c:	7bfb      	ldrb	r3, [r7, #15]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d168      	bne.n	8002c04 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d113      	bne.n	8002b60 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b38:	4b35      	ldr	r3, [pc, #212]	; (8002c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b3a:	691a      	ldr	r2, [r3, #16]
 8002b3c:	4b35      	ldr	r3, [pc, #212]	; (8002c14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b3e:	4013      	ands	r3, r2
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	6892      	ldr	r2, [r2, #8]
 8002b44:	0211      	lsls	r1, r2, #8
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	68d2      	ldr	r2, [r2, #12]
 8002b4a:	06d2      	lsls	r2, r2, #27
 8002b4c:	4311      	orrs	r1, r2
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	6852      	ldr	r2, [r2, #4]
 8002b52:	3a01      	subs	r2, #1
 8002b54:	0112      	lsls	r2, r2, #4
 8002b56:	430a      	orrs	r2, r1
 8002b58:	492d      	ldr	r1, [pc, #180]	; (8002c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	610b      	str	r3, [r1, #16]
 8002b5e:	e02d      	b.n	8002bbc <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d115      	bne.n	8002b92 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b66:	4b2a      	ldr	r3, [pc, #168]	; (8002c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b68:	691a      	ldr	r2, [r3, #16]
 8002b6a:	4b2b      	ldr	r3, [pc, #172]	; (8002c18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	6892      	ldr	r2, [r2, #8]
 8002b72:	0211      	lsls	r1, r2, #8
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	6912      	ldr	r2, [r2, #16]
 8002b78:	0852      	lsrs	r2, r2, #1
 8002b7a:	3a01      	subs	r2, #1
 8002b7c:	0552      	lsls	r2, r2, #21
 8002b7e:	4311      	orrs	r1, r2
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	6852      	ldr	r2, [r2, #4]
 8002b84:	3a01      	subs	r2, #1
 8002b86:	0112      	lsls	r2, r2, #4
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	4921      	ldr	r1, [pc, #132]	; (8002c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	610b      	str	r3, [r1, #16]
 8002b90:	e014      	b.n	8002bbc <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b92:	4b1f      	ldr	r3, [pc, #124]	; (8002c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b94:	691a      	ldr	r2, [r3, #16]
 8002b96:	4b21      	ldr	r3, [pc, #132]	; (8002c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b98:	4013      	ands	r3, r2
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	6892      	ldr	r2, [r2, #8]
 8002b9e:	0211      	lsls	r1, r2, #8
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	6952      	ldr	r2, [r2, #20]
 8002ba4:	0852      	lsrs	r2, r2, #1
 8002ba6:	3a01      	subs	r2, #1
 8002ba8:	0652      	lsls	r2, r2, #25
 8002baa:	4311      	orrs	r1, r2
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	6852      	ldr	r2, [r2, #4]
 8002bb0:	3a01      	subs	r2, #1
 8002bb2:	0112      	lsls	r2, r2, #4
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	4916      	ldr	r1, [pc, #88]	; (8002c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002bbc:	4b14      	ldr	r3, [pc, #80]	; (8002c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a13      	ldr	r2, [pc, #76]	; (8002c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002bc2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002bc6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc8:	f7fe f978 	bl	8000ebc <HAL_GetTick>
 8002bcc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002bce:	e009      	b.n	8002be4 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002bd0:	f7fe f974 	bl	8000ebc <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d902      	bls.n	8002be4 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	73fb      	strb	r3, [r7, #15]
          break;
 8002be2:	e005      	b.n	8002bf0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002be4:	4b0a      	ldr	r3, [pc, #40]	; (8002c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d0ef      	beq.n	8002bd0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002bf0:	7bfb      	ldrb	r3, [r7, #15]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d106      	bne.n	8002c04 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002bf6:	4b06      	ldr	r3, [pc, #24]	; (8002c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002bf8:	691a      	ldr	r2, [r3, #16]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	4904      	ldr	r1, [pc, #16]	; (8002c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	40021000 	.word	0x40021000
 8002c14:	07ff800f 	.word	0x07ff800f
 8002c18:	ff9f800f 	.word	0xff9f800f
 8002c1c:	f9ff800f 	.word	0xf9ff800f

08002c20 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c2e:	4b72      	ldr	r3, [pc, #456]	; (8002df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	f003 0303 	and.w	r3, r3, #3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00e      	beq.n	8002c58 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002c3a:	4b6f      	ldr	r3, [pc, #444]	; (8002df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	f003 0203 	and.w	r2, r3, #3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d103      	bne.n	8002c52 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
       ||
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d142      	bne.n	8002cd8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	73fb      	strb	r3, [r7, #15]
 8002c56:	e03f      	b.n	8002cd8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2b03      	cmp	r3, #3
 8002c5e:	d018      	beq.n	8002c92 <RCCEx_PLLSAI2_Config+0x72>
 8002c60:	2b03      	cmp	r3, #3
 8002c62:	d825      	bhi.n	8002cb0 <RCCEx_PLLSAI2_Config+0x90>
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d002      	beq.n	8002c6e <RCCEx_PLLSAI2_Config+0x4e>
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d009      	beq.n	8002c80 <RCCEx_PLLSAI2_Config+0x60>
 8002c6c:	e020      	b.n	8002cb0 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c6e:	4b62      	ldr	r3, [pc, #392]	; (8002df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d11d      	bne.n	8002cb6 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c7e:	e01a      	b.n	8002cb6 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c80:	4b5d      	ldr	r3, [pc, #372]	; (8002df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d116      	bne.n	8002cba <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c90:	e013      	b.n	8002cba <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c92:	4b59      	ldr	r3, [pc, #356]	; (8002df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d10f      	bne.n	8002cbe <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c9e:	4b56      	ldr	r3, [pc, #344]	; (8002df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d109      	bne.n	8002cbe <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002cae:	e006      	b.n	8002cbe <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	73fb      	strb	r3, [r7, #15]
      break;
 8002cb4:	e004      	b.n	8002cc0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002cb6:	bf00      	nop
 8002cb8:	e002      	b.n	8002cc0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002cba:	bf00      	nop
 8002cbc:	e000      	b.n	8002cc0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002cbe:	bf00      	nop
    }

    if(status == HAL_OK)
 8002cc0:	7bfb      	ldrb	r3, [r7, #15]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d108      	bne.n	8002cd8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8002cc6:	4b4c      	ldr	r3, [pc, #304]	; (8002df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	f023 0203 	bic.w	r2, r3, #3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4949      	ldr	r1, [pc, #292]	; (8002df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002cd8:	7bfb      	ldrb	r3, [r7, #15]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f040 8086 	bne.w	8002dec <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002ce0:	4b45      	ldr	r3, [pc, #276]	; (8002df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a44      	ldr	r2, [pc, #272]	; (8002df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ce6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cec:	f7fe f8e6 	bl	8000ebc <HAL_GetTick>
 8002cf0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002cf2:	e009      	b.n	8002d08 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002cf4:	f7fe f8e2 	bl	8000ebc <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d902      	bls.n	8002d08 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	73fb      	strb	r3, [r7, #15]
        break;
 8002d06:	e005      	b.n	8002d14 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d08:	4b3b      	ldr	r3, [pc, #236]	; (8002df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1ef      	bne.n	8002cf4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002d14:	7bfb      	ldrb	r3, [r7, #15]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d168      	bne.n	8002dec <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d113      	bne.n	8002d48 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d20:	4b35      	ldr	r3, [pc, #212]	; (8002df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d22:	695a      	ldr	r2, [r3, #20]
 8002d24:	4b35      	ldr	r3, [pc, #212]	; (8002dfc <RCCEx_PLLSAI2_Config+0x1dc>)
 8002d26:	4013      	ands	r3, r2
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	6892      	ldr	r2, [r2, #8]
 8002d2c:	0211      	lsls	r1, r2, #8
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	68d2      	ldr	r2, [r2, #12]
 8002d32:	06d2      	lsls	r2, r2, #27
 8002d34:	4311      	orrs	r1, r2
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	6852      	ldr	r2, [r2, #4]
 8002d3a:	3a01      	subs	r2, #1
 8002d3c:	0112      	lsls	r2, r2, #4
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	492d      	ldr	r1, [pc, #180]	; (8002df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	614b      	str	r3, [r1, #20]
 8002d46:	e02d      	b.n	8002da4 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d115      	bne.n	8002d7a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d4e:	4b2a      	ldr	r3, [pc, #168]	; (8002df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d50:	695a      	ldr	r2, [r3, #20]
 8002d52:	4b2b      	ldr	r3, [pc, #172]	; (8002e00 <RCCEx_PLLSAI2_Config+0x1e0>)
 8002d54:	4013      	ands	r3, r2
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	6892      	ldr	r2, [r2, #8]
 8002d5a:	0211      	lsls	r1, r2, #8
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	6912      	ldr	r2, [r2, #16]
 8002d60:	0852      	lsrs	r2, r2, #1
 8002d62:	3a01      	subs	r2, #1
 8002d64:	0552      	lsls	r2, r2, #21
 8002d66:	4311      	orrs	r1, r2
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	6852      	ldr	r2, [r2, #4]
 8002d6c:	3a01      	subs	r2, #1
 8002d6e:	0112      	lsls	r2, r2, #4
 8002d70:	430a      	orrs	r2, r1
 8002d72:	4921      	ldr	r1, [pc, #132]	; (8002df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	614b      	str	r3, [r1, #20]
 8002d78:	e014      	b.n	8002da4 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d7a:	4b1f      	ldr	r3, [pc, #124]	; (8002df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d7c:	695a      	ldr	r2, [r3, #20]
 8002d7e:	4b21      	ldr	r3, [pc, #132]	; (8002e04 <RCCEx_PLLSAI2_Config+0x1e4>)
 8002d80:	4013      	ands	r3, r2
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	6892      	ldr	r2, [r2, #8]
 8002d86:	0211      	lsls	r1, r2, #8
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	6952      	ldr	r2, [r2, #20]
 8002d8c:	0852      	lsrs	r2, r2, #1
 8002d8e:	3a01      	subs	r2, #1
 8002d90:	0652      	lsls	r2, r2, #25
 8002d92:	4311      	orrs	r1, r2
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	6852      	ldr	r2, [r2, #4]
 8002d98:	3a01      	subs	r2, #1
 8002d9a:	0112      	lsls	r2, r2, #4
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	4916      	ldr	r1, [pc, #88]	; (8002df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002da4:	4b14      	ldr	r3, [pc, #80]	; (8002df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a13      	ldr	r2, [pc, #76]	; (8002df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002daa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db0:	f7fe f884 	bl	8000ebc <HAL_GetTick>
 8002db4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002db6:	e009      	b.n	8002dcc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002db8:	f7fe f880 	bl	8000ebc <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d902      	bls.n	8002dcc <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	73fb      	strb	r3, [r7, #15]
          break;
 8002dca:	e005      	b.n	8002dd8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002dcc:	4b0a      	ldr	r3, [pc, #40]	; (8002df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d0ef      	beq.n	8002db8 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002dd8:	7bfb      	ldrb	r3, [r7, #15]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d106      	bne.n	8002dec <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002dde:	4b06      	ldr	r3, [pc, #24]	; (8002df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002de0:	695a      	ldr	r2, [r3, #20]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	4904      	ldr	r1, [pc, #16]	; (8002df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	07ff800f 	.word	0x07ff800f
 8002e00:	ff9f800f 	.word	0xff9f800f
 8002e04:	f9ff800f 	.word	0xf9ff800f

08002e08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e049      	b.n	8002eae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d106      	bne.n	8002e34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f7fd ff20 	bl	8000c74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2202      	movs	r2, #2
 8002e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	3304      	adds	r3, #4
 8002e44:	4619      	mov	r1, r3
 8002e46:	4610      	mov	r0, r2
 8002e48:	f000 fa1c 	bl	8003284 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
	...

08002eb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d001      	beq.n	8002ed0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e04f      	b.n	8002f70 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68da      	ldr	r2, [r3, #12]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f042 0201 	orr.w	r2, r2, #1
 8002ee6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a23      	ldr	r2, [pc, #140]	; (8002f7c <HAL_TIM_Base_Start_IT+0xc4>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d01d      	beq.n	8002f2e <HAL_TIM_Base_Start_IT+0x76>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002efa:	d018      	beq.n	8002f2e <HAL_TIM_Base_Start_IT+0x76>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a1f      	ldr	r2, [pc, #124]	; (8002f80 <HAL_TIM_Base_Start_IT+0xc8>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d013      	beq.n	8002f2e <HAL_TIM_Base_Start_IT+0x76>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a1e      	ldr	r2, [pc, #120]	; (8002f84 <HAL_TIM_Base_Start_IT+0xcc>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d00e      	beq.n	8002f2e <HAL_TIM_Base_Start_IT+0x76>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a1c      	ldr	r2, [pc, #112]	; (8002f88 <HAL_TIM_Base_Start_IT+0xd0>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d009      	beq.n	8002f2e <HAL_TIM_Base_Start_IT+0x76>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a1b      	ldr	r2, [pc, #108]	; (8002f8c <HAL_TIM_Base_Start_IT+0xd4>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d004      	beq.n	8002f2e <HAL_TIM_Base_Start_IT+0x76>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a19      	ldr	r2, [pc, #100]	; (8002f90 <HAL_TIM_Base_Start_IT+0xd8>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d115      	bne.n	8002f5a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	689a      	ldr	r2, [r3, #8]
 8002f34:	4b17      	ldr	r3, [pc, #92]	; (8002f94 <HAL_TIM_Base_Start_IT+0xdc>)
 8002f36:	4013      	ands	r3, r2
 8002f38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2b06      	cmp	r3, #6
 8002f3e:	d015      	beq.n	8002f6c <HAL_TIM_Base_Start_IT+0xb4>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f46:	d011      	beq.n	8002f6c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f042 0201 	orr.w	r2, r2, #1
 8002f56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f58:	e008      	b.n	8002f6c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f042 0201 	orr.w	r2, r2, #1
 8002f68:	601a      	str	r2, [r3, #0]
 8002f6a:	e000      	b.n	8002f6e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f6c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3714      	adds	r7, #20
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr
 8002f7c:	40012c00 	.word	0x40012c00
 8002f80:	40000400 	.word	0x40000400
 8002f84:	40000800 	.word	0x40000800
 8002f88:	40000c00 	.word	0x40000c00
 8002f8c:	40013400 	.word	0x40013400
 8002f90:	40014000 	.word	0x40014000
 8002f94:	00010007 	.word	0x00010007

08002f98 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68da      	ldr	r2, [r3, #12]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f022 0201 	bic.w	r2, r2, #1
 8002fae:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6a1a      	ldr	r2, [r3, #32]
 8002fb6:	f241 1311 	movw	r3, #4369	; 0x1111
 8002fba:	4013      	ands	r3, r2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d10f      	bne.n	8002fe0 <HAL_TIM_Base_Stop_IT+0x48>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6a1a      	ldr	r2, [r3, #32]
 8002fc6:	f240 4344 	movw	r3, #1092	; 0x444
 8002fca:	4013      	ands	r3, r2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d107      	bne.n	8002fe0 <HAL_TIM_Base_Stop_IT+0x48>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f022 0201 	bic.w	r2, r2, #1
 8002fde:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	370c      	adds	r7, #12
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr

08002ff6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b082      	sub	sp, #8
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b02      	cmp	r3, #2
 800300a:	d122      	bne.n	8003052 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b02      	cmp	r3, #2
 8003018:	d11b      	bne.n	8003052 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f06f 0202 	mvn.w	r2, #2
 8003022:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	f003 0303 	and.w	r3, r3, #3
 8003034:	2b00      	cmp	r3, #0
 8003036:	d003      	beq.n	8003040 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f000 f905 	bl	8003248 <HAL_TIM_IC_CaptureCallback>
 800303e:	e005      	b.n	800304c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 f8f7 	bl	8003234 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 f908 	bl	800325c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	f003 0304 	and.w	r3, r3, #4
 800305c:	2b04      	cmp	r3, #4
 800305e:	d122      	bne.n	80030a6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	f003 0304 	and.w	r3, r3, #4
 800306a:	2b04      	cmp	r3, #4
 800306c:	d11b      	bne.n	80030a6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f06f 0204 	mvn.w	r2, #4
 8003076:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2202      	movs	r2, #2
 800307c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003088:	2b00      	cmp	r3, #0
 800308a:	d003      	beq.n	8003094 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 f8db 	bl	8003248 <HAL_TIM_IC_CaptureCallback>
 8003092:	e005      	b.n	80030a0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 f8cd 	bl	8003234 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 f8de 	bl	800325c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	f003 0308 	and.w	r3, r3, #8
 80030b0:	2b08      	cmp	r3, #8
 80030b2:	d122      	bne.n	80030fa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	f003 0308 	and.w	r3, r3, #8
 80030be:	2b08      	cmp	r3, #8
 80030c0:	d11b      	bne.n	80030fa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f06f 0208 	mvn.w	r2, #8
 80030ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2204      	movs	r2, #4
 80030d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	69db      	ldr	r3, [r3, #28]
 80030d8:	f003 0303 	and.w	r3, r3, #3
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d003      	beq.n	80030e8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f000 f8b1 	bl	8003248 <HAL_TIM_IC_CaptureCallback>
 80030e6:	e005      	b.n	80030f4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f000 f8a3 	bl	8003234 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 f8b4 	bl	800325c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	f003 0310 	and.w	r3, r3, #16
 8003104:	2b10      	cmp	r3, #16
 8003106:	d122      	bne.n	800314e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	f003 0310 	and.w	r3, r3, #16
 8003112:	2b10      	cmp	r3, #16
 8003114:	d11b      	bne.n	800314e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f06f 0210 	mvn.w	r2, #16
 800311e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2208      	movs	r2, #8
 8003124:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	69db      	ldr	r3, [r3, #28]
 800312c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003130:	2b00      	cmp	r3, #0
 8003132:	d003      	beq.n	800313c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 f887 	bl	8003248 <HAL_TIM_IC_CaptureCallback>
 800313a:	e005      	b.n	8003148 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f000 f879 	bl	8003234 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 f88a 	bl	800325c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	2b01      	cmp	r3, #1
 800315a:	d10e      	bne.n	800317a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b01      	cmp	r3, #1
 8003168:	d107      	bne.n	800317a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f06f 0201 	mvn.w	r2, #1
 8003172:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f7fd fb2b 	bl	80007d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	691b      	ldr	r3, [r3, #16]
 8003180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003184:	2b80      	cmp	r3, #128	; 0x80
 8003186:	d10e      	bne.n	80031a6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003192:	2b80      	cmp	r3, #128	; 0x80
 8003194:	d107      	bne.n	80031a6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800319e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f000 f913 	bl	80033cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031b4:	d10e      	bne.n	80031d4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031c0:	2b80      	cmp	r3, #128	; 0x80
 80031c2:	d107      	bne.n	80031d4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80031cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 f906 	bl	80033e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031de:	2b40      	cmp	r3, #64	; 0x40
 80031e0:	d10e      	bne.n	8003200 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ec:	2b40      	cmp	r3, #64	; 0x40
 80031ee:	d107      	bne.n	8003200 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 f838 	bl	8003270 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	f003 0320 	and.w	r3, r3, #32
 800320a:	2b20      	cmp	r3, #32
 800320c:	d10e      	bne.n	800322c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	f003 0320 	and.w	r3, r3, #32
 8003218:	2b20      	cmp	r3, #32
 800321a:	d107      	bne.n	800322c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f06f 0220 	mvn.w	r2, #32
 8003224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 f8c6 	bl	80033b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800322c:	bf00      	nop
 800322e:	3708      	adds	r7, #8
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800323c:	bf00      	nop
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003250:	bf00      	nop
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003278:	bf00      	nop
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003284:	b480      	push	{r7}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a40      	ldr	r2, [pc, #256]	; (8003398 <TIM_Base_SetConfig+0x114>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d013      	beq.n	80032c4 <TIM_Base_SetConfig+0x40>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032a2:	d00f      	beq.n	80032c4 <TIM_Base_SetConfig+0x40>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a3d      	ldr	r2, [pc, #244]	; (800339c <TIM_Base_SetConfig+0x118>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d00b      	beq.n	80032c4 <TIM_Base_SetConfig+0x40>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a3c      	ldr	r2, [pc, #240]	; (80033a0 <TIM_Base_SetConfig+0x11c>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d007      	beq.n	80032c4 <TIM_Base_SetConfig+0x40>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a3b      	ldr	r2, [pc, #236]	; (80033a4 <TIM_Base_SetConfig+0x120>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d003      	beq.n	80032c4 <TIM_Base_SetConfig+0x40>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a3a      	ldr	r2, [pc, #232]	; (80033a8 <TIM_Base_SetConfig+0x124>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d108      	bne.n	80032d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a2f      	ldr	r2, [pc, #188]	; (8003398 <TIM_Base_SetConfig+0x114>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d01f      	beq.n	800331e <TIM_Base_SetConfig+0x9a>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032e4:	d01b      	beq.n	800331e <TIM_Base_SetConfig+0x9a>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a2c      	ldr	r2, [pc, #176]	; (800339c <TIM_Base_SetConfig+0x118>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d017      	beq.n	800331e <TIM_Base_SetConfig+0x9a>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a2b      	ldr	r2, [pc, #172]	; (80033a0 <TIM_Base_SetConfig+0x11c>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d013      	beq.n	800331e <TIM_Base_SetConfig+0x9a>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a2a      	ldr	r2, [pc, #168]	; (80033a4 <TIM_Base_SetConfig+0x120>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d00f      	beq.n	800331e <TIM_Base_SetConfig+0x9a>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a29      	ldr	r2, [pc, #164]	; (80033a8 <TIM_Base_SetConfig+0x124>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d00b      	beq.n	800331e <TIM_Base_SetConfig+0x9a>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a28      	ldr	r2, [pc, #160]	; (80033ac <TIM_Base_SetConfig+0x128>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d007      	beq.n	800331e <TIM_Base_SetConfig+0x9a>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a27      	ldr	r2, [pc, #156]	; (80033b0 <TIM_Base_SetConfig+0x12c>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d003      	beq.n	800331e <TIM_Base_SetConfig+0x9a>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a26      	ldr	r2, [pc, #152]	; (80033b4 <TIM_Base_SetConfig+0x130>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d108      	bne.n	8003330 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003324:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	4313      	orrs	r3, r2
 800332e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	4313      	orrs	r3, r2
 800333c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	689a      	ldr	r2, [r3, #8]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a10      	ldr	r2, [pc, #64]	; (8003398 <TIM_Base_SetConfig+0x114>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d00f      	beq.n	800337c <TIM_Base_SetConfig+0xf8>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a12      	ldr	r2, [pc, #72]	; (80033a8 <TIM_Base_SetConfig+0x124>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d00b      	beq.n	800337c <TIM_Base_SetConfig+0xf8>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a11      	ldr	r2, [pc, #68]	; (80033ac <TIM_Base_SetConfig+0x128>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d007      	beq.n	800337c <TIM_Base_SetConfig+0xf8>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a10      	ldr	r2, [pc, #64]	; (80033b0 <TIM_Base_SetConfig+0x12c>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d003      	beq.n	800337c <TIM_Base_SetConfig+0xf8>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a0f      	ldr	r2, [pc, #60]	; (80033b4 <TIM_Base_SetConfig+0x130>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d103      	bne.n	8003384 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	691a      	ldr	r2, [r3, #16]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	615a      	str	r2, [r3, #20]
}
 800338a:	bf00      	nop
 800338c:	3714      	adds	r7, #20
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	40012c00 	.word	0x40012c00
 800339c:	40000400 	.word	0x40000400
 80033a0:	40000800 	.word	0x40000800
 80033a4:	40000c00 	.word	0x40000c00
 80033a8:	40013400 	.word	0x40013400
 80033ac:	40014000 	.word	0x40014000
 80033b0:	40014400 	.word	0x40014400
 80033b4:	40014800 	.word	0x40014800

080033b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033c0:	bf00      	nop
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e042      	b.n	800348c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800340c:	2b00      	cmp	r3, #0
 800340e:	d106      	bne.n	800341e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f7fd fbcb 	bl	8000bb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2224      	movs	r2, #36	; 0x24
 8003422:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f022 0201 	bic.w	r2, r2, #1
 8003434:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 f900 	bl	800363c <UART_SetConfig>
 800343c:	4603      	mov	r3, r0
 800343e:	2b01      	cmp	r3, #1
 8003440:	d101      	bne.n	8003446 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e022      	b.n	800348c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344a:	2b00      	cmp	r3, #0
 800344c:	d002      	beq.n	8003454 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 fbf0 	bl	8003c34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	685a      	ldr	r2, [r3, #4]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003462:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689a      	ldr	r2, [r3, #8]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003472:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f042 0201 	orr.w	r2, r2, #1
 8003482:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 fc77 	bl	8003d78 <UART_CheckIdleState>
 800348a:	4603      	mov	r3, r0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3708      	adds	r7, #8
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b08a      	sub	sp, #40	; 0x28
 8003498:	af02      	add	r7, sp, #8
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	603b      	str	r3, [r7, #0]
 80034a0:	4613      	mov	r3, r2
 80034a2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034aa:	2b20      	cmp	r3, #32
 80034ac:	f040 80c1 	bne.w	8003632 <HAL_UART_Receive+0x19e>
  {
    if ((pData == NULL) || (Size == 0U))
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d002      	beq.n	80034bc <HAL_UART_Receive+0x28>
 80034b6:	88fb      	ldrh	r3, [r7, #6]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d101      	bne.n	80034c0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e0b9      	b.n	8003634 <HAL_UART_Receive+0x1a0>
    }

    __HAL_LOCK(huart);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d101      	bne.n	80034ce <HAL_UART_Receive+0x3a>
 80034ca:	2302      	movs	r3, #2
 80034cc:	e0b2      	b.n	8003634 <HAL_UART_Receive+0x1a0>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2201      	movs	r2, #1
 80034d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2222      	movs	r2, #34	; 0x22
 80034e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034ec:	f7fd fce6 	bl	8000ebc <HAL_GetTick>
 80034f0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	88fa      	ldrh	r2, [r7, #6]
 80034f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	88fa      	ldrh	r2, [r7, #6]
 80034fe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800350a:	d10e      	bne.n	800352a <HAL_UART_Receive+0x96>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d105      	bne.n	8003520 <HAL_UART_Receive+0x8c>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f240 12ff 	movw	r2, #511	; 0x1ff
 800351a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800351e:	e02d      	b.n	800357c <HAL_UART_Receive+0xe8>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	22ff      	movs	r2, #255	; 0xff
 8003524:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003528:	e028      	b.n	800357c <HAL_UART_Receive+0xe8>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d10d      	bne.n	800354e <HAL_UART_Receive+0xba>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d104      	bne.n	8003544 <HAL_UART_Receive+0xb0>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	22ff      	movs	r2, #255	; 0xff
 800353e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003542:	e01b      	b.n	800357c <HAL_UART_Receive+0xe8>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	227f      	movs	r2, #127	; 0x7f
 8003548:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800354c:	e016      	b.n	800357c <HAL_UART_Receive+0xe8>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003556:	d10d      	bne.n	8003574 <HAL_UART_Receive+0xe0>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d104      	bne.n	800356a <HAL_UART_Receive+0xd6>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	227f      	movs	r2, #127	; 0x7f
 8003564:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003568:	e008      	b.n	800357c <HAL_UART_Receive+0xe8>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	223f      	movs	r2, #63	; 0x3f
 800356e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003572:	e003      	b.n	800357c <HAL_UART_Receive+0xe8>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003582:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800358c:	d108      	bne.n	80035a0 <HAL_UART_Receive+0x10c>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d104      	bne.n	80035a0 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8003596:	2300      	movs	r3, #0
 8003598:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	61bb      	str	r3, [r7, #24]
 800359e:	e003      	b.n	80035a8 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035a4:	2300      	movs	r3, #0
 80035a6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80035b0:	e033      	b.n	800361a <HAL_UART_Receive+0x186>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	9300      	str	r3, [sp, #0]
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	2200      	movs	r2, #0
 80035ba:	2120      	movs	r1, #32
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f000 fc26 	bl	8003e0e <UART_WaitOnFlagUntilTimeout>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d001      	beq.n	80035cc <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e033      	b.n	8003634 <HAL_UART_Receive+0x1a0>
      }
      if (pdata8bits == NULL)
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d10c      	bne.n	80035ec <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80035d8:	b29a      	uxth	r2, r3
 80035da:	8a7b      	ldrh	r3, [r7, #18]
 80035dc:	4013      	ands	r3, r2
 80035de:	b29a      	uxth	r2, r3
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	3302      	adds	r3, #2
 80035e8:	61bb      	str	r3, [r7, #24]
 80035ea:	e00d      	b.n	8003608 <HAL_UART_Receive+0x174>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	b2da      	uxtb	r2, r3
 80035f6:	8a7b      	ldrh	r3, [r7, #18]
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	4013      	ands	r3, r2
 80035fc:	b2da      	uxtb	r2, r3
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	3301      	adds	r3, #1
 8003606:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800360e:	b29b      	uxth	r3, r3
 8003610:	3b01      	subs	r3, #1
 8003612:	b29a      	uxth	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003620:	b29b      	uxth	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1c5      	bne.n	80035b2 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2220      	movs	r2, #32
 800362a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800362e:	2300      	movs	r3, #0
 8003630:	e000      	b.n	8003634 <HAL_UART_Receive+0x1a0>
  }
  else
  {
    return HAL_BUSY;
 8003632:	2302      	movs	r3, #2
  }
}
 8003634:	4618      	mov	r0, r3
 8003636:	3720      	adds	r7, #32
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800363c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003640:	b08c      	sub	sp, #48	; 0x30
 8003642:	af00      	add	r7, sp, #0
 8003644:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003646:	2300      	movs	r3, #0
 8003648:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	689a      	ldr	r2, [r3, #8]
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	431a      	orrs	r2, r3
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	431a      	orrs	r2, r3
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	69db      	ldr	r3, [r3, #28]
 8003660:	4313      	orrs	r3, r2
 8003662:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	4baa      	ldr	r3, [pc, #680]	; (8003914 <UART_SetConfig+0x2d8>)
 800366c:	4013      	ands	r3, r2
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	6812      	ldr	r2, [r2, #0]
 8003672:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003674:	430b      	orrs	r3, r1
 8003676:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	68da      	ldr	r2, [r3, #12]
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	430a      	orrs	r2, r1
 800368c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a9f      	ldr	r2, [pc, #636]	; (8003918 <UART_SetConfig+0x2dc>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d004      	beq.n	80036a8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036a4:	4313      	orrs	r3, r2
 80036a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80036b2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	6812      	ldr	r2, [r2, #0]
 80036ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80036bc:	430b      	orrs	r3, r1
 80036be:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c6:	f023 010f 	bic.w	r1, r3, #15
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a90      	ldr	r2, [pc, #576]	; (800391c <UART_SetConfig+0x2e0>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d125      	bne.n	800372c <UART_SetConfig+0xf0>
 80036e0:	4b8f      	ldr	r3, [pc, #572]	; (8003920 <UART_SetConfig+0x2e4>)
 80036e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e6:	f003 0303 	and.w	r3, r3, #3
 80036ea:	2b03      	cmp	r3, #3
 80036ec:	d81a      	bhi.n	8003724 <UART_SetConfig+0xe8>
 80036ee:	a201      	add	r2, pc, #4	; (adr r2, 80036f4 <UART_SetConfig+0xb8>)
 80036f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f4:	08003705 	.word	0x08003705
 80036f8:	08003715 	.word	0x08003715
 80036fc:	0800370d 	.word	0x0800370d
 8003700:	0800371d 	.word	0x0800371d
 8003704:	2301      	movs	r3, #1
 8003706:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800370a:	e116      	b.n	800393a <UART_SetConfig+0x2fe>
 800370c:	2302      	movs	r3, #2
 800370e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003712:	e112      	b.n	800393a <UART_SetConfig+0x2fe>
 8003714:	2304      	movs	r3, #4
 8003716:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800371a:	e10e      	b.n	800393a <UART_SetConfig+0x2fe>
 800371c:	2308      	movs	r3, #8
 800371e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003722:	e10a      	b.n	800393a <UART_SetConfig+0x2fe>
 8003724:	2310      	movs	r3, #16
 8003726:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800372a:	e106      	b.n	800393a <UART_SetConfig+0x2fe>
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a7c      	ldr	r2, [pc, #496]	; (8003924 <UART_SetConfig+0x2e8>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d138      	bne.n	80037a8 <UART_SetConfig+0x16c>
 8003736:	4b7a      	ldr	r3, [pc, #488]	; (8003920 <UART_SetConfig+0x2e4>)
 8003738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800373c:	f003 030c 	and.w	r3, r3, #12
 8003740:	2b0c      	cmp	r3, #12
 8003742:	d82d      	bhi.n	80037a0 <UART_SetConfig+0x164>
 8003744:	a201      	add	r2, pc, #4	; (adr r2, 800374c <UART_SetConfig+0x110>)
 8003746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800374a:	bf00      	nop
 800374c:	08003781 	.word	0x08003781
 8003750:	080037a1 	.word	0x080037a1
 8003754:	080037a1 	.word	0x080037a1
 8003758:	080037a1 	.word	0x080037a1
 800375c:	08003791 	.word	0x08003791
 8003760:	080037a1 	.word	0x080037a1
 8003764:	080037a1 	.word	0x080037a1
 8003768:	080037a1 	.word	0x080037a1
 800376c:	08003789 	.word	0x08003789
 8003770:	080037a1 	.word	0x080037a1
 8003774:	080037a1 	.word	0x080037a1
 8003778:	080037a1 	.word	0x080037a1
 800377c:	08003799 	.word	0x08003799
 8003780:	2300      	movs	r3, #0
 8003782:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003786:	e0d8      	b.n	800393a <UART_SetConfig+0x2fe>
 8003788:	2302      	movs	r3, #2
 800378a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800378e:	e0d4      	b.n	800393a <UART_SetConfig+0x2fe>
 8003790:	2304      	movs	r3, #4
 8003792:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003796:	e0d0      	b.n	800393a <UART_SetConfig+0x2fe>
 8003798:	2308      	movs	r3, #8
 800379a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800379e:	e0cc      	b.n	800393a <UART_SetConfig+0x2fe>
 80037a0:	2310      	movs	r3, #16
 80037a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037a6:	e0c8      	b.n	800393a <UART_SetConfig+0x2fe>
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a5e      	ldr	r2, [pc, #376]	; (8003928 <UART_SetConfig+0x2ec>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d125      	bne.n	80037fe <UART_SetConfig+0x1c2>
 80037b2:	4b5b      	ldr	r3, [pc, #364]	; (8003920 <UART_SetConfig+0x2e4>)
 80037b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80037bc:	2b30      	cmp	r3, #48	; 0x30
 80037be:	d016      	beq.n	80037ee <UART_SetConfig+0x1b2>
 80037c0:	2b30      	cmp	r3, #48	; 0x30
 80037c2:	d818      	bhi.n	80037f6 <UART_SetConfig+0x1ba>
 80037c4:	2b20      	cmp	r3, #32
 80037c6:	d00a      	beq.n	80037de <UART_SetConfig+0x1a2>
 80037c8:	2b20      	cmp	r3, #32
 80037ca:	d814      	bhi.n	80037f6 <UART_SetConfig+0x1ba>
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d002      	beq.n	80037d6 <UART_SetConfig+0x19a>
 80037d0:	2b10      	cmp	r3, #16
 80037d2:	d008      	beq.n	80037e6 <UART_SetConfig+0x1aa>
 80037d4:	e00f      	b.n	80037f6 <UART_SetConfig+0x1ba>
 80037d6:	2300      	movs	r3, #0
 80037d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037dc:	e0ad      	b.n	800393a <UART_SetConfig+0x2fe>
 80037de:	2302      	movs	r3, #2
 80037e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037e4:	e0a9      	b.n	800393a <UART_SetConfig+0x2fe>
 80037e6:	2304      	movs	r3, #4
 80037e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037ec:	e0a5      	b.n	800393a <UART_SetConfig+0x2fe>
 80037ee:	2308      	movs	r3, #8
 80037f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037f4:	e0a1      	b.n	800393a <UART_SetConfig+0x2fe>
 80037f6:	2310      	movs	r3, #16
 80037f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037fc:	e09d      	b.n	800393a <UART_SetConfig+0x2fe>
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a4a      	ldr	r2, [pc, #296]	; (800392c <UART_SetConfig+0x2f0>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d125      	bne.n	8003854 <UART_SetConfig+0x218>
 8003808:	4b45      	ldr	r3, [pc, #276]	; (8003920 <UART_SetConfig+0x2e4>)
 800380a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003812:	2bc0      	cmp	r3, #192	; 0xc0
 8003814:	d016      	beq.n	8003844 <UART_SetConfig+0x208>
 8003816:	2bc0      	cmp	r3, #192	; 0xc0
 8003818:	d818      	bhi.n	800384c <UART_SetConfig+0x210>
 800381a:	2b80      	cmp	r3, #128	; 0x80
 800381c:	d00a      	beq.n	8003834 <UART_SetConfig+0x1f8>
 800381e:	2b80      	cmp	r3, #128	; 0x80
 8003820:	d814      	bhi.n	800384c <UART_SetConfig+0x210>
 8003822:	2b00      	cmp	r3, #0
 8003824:	d002      	beq.n	800382c <UART_SetConfig+0x1f0>
 8003826:	2b40      	cmp	r3, #64	; 0x40
 8003828:	d008      	beq.n	800383c <UART_SetConfig+0x200>
 800382a:	e00f      	b.n	800384c <UART_SetConfig+0x210>
 800382c:	2300      	movs	r3, #0
 800382e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003832:	e082      	b.n	800393a <UART_SetConfig+0x2fe>
 8003834:	2302      	movs	r3, #2
 8003836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800383a:	e07e      	b.n	800393a <UART_SetConfig+0x2fe>
 800383c:	2304      	movs	r3, #4
 800383e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003842:	e07a      	b.n	800393a <UART_SetConfig+0x2fe>
 8003844:	2308      	movs	r3, #8
 8003846:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800384a:	e076      	b.n	800393a <UART_SetConfig+0x2fe>
 800384c:	2310      	movs	r3, #16
 800384e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003852:	e072      	b.n	800393a <UART_SetConfig+0x2fe>
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a35      	ldr	r2, [pc, #212]	; (8003930 <UART_SetConfig+0x2f4>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d12a      	bne.n	80038b4 <UART_SetConfig+0x278>
 800385e:	4b30      	ldr	r3, [pc, #192]	; (8003920 <UART_SetConfig+0x2e4>)
 8003860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003864:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003868:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800386c:	d01a      	beq.n	80038a4 <UART_SetConfig+0x268>
 800386e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003872:	d81b      	bhi.n	80038ac <UART_SetConfig+0x270>
 8003874:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003878:	d00c      	beq.n	8003894 <UART_SetConfig+0x258>
 800387a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800387e:	d815      	bhi.n	80038ac <UART_SetConfig+0x270>
 8003880:	2b00      	cmp	r3, #0
 8003882:	d003      	beq.n	800388c <UART_SetConfig+0x250>
 8003884:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003888:	d008      	beq.n	800389c <UART_SetConfig+0x260>
 800388a:	e00f      	b.n	80038ac <UART_SetConfig+0x270>
 800388c:	2300      	movs	r3, #0
 800388e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003892:	e052      	b.n	800393a <UART_SetConfig+0x2fe>
 8003894:	2302      	movs	r3, #2
 8003896:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800389a:	e04e      	b.n	800393a <UART_SetConfig+0x2fe>
 800389c:	2304      	movs	r3, #4
 800389e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038a2:	e04a      	b.n	800393a <UART_SetConfig+0x2fe>
 80038a4:	2308      	movs	r3, #8
 80038a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038aa:	e046      	b.n	800393a <UART_SetConfig+0x2fe>
 80038ac:	2310      	movs	r3, #16
 80038ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038b2:	e042      	b.n	800393a <UART_SetConfig+0x2fe>
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a17      	ldr	r2, [pc, #92]	; (8003918 <UART_SetConfig+0x2dc>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d13a      	bne.n	8003934 <UART_SetConfig+0x2f8>
 80038be:	4b18      	ldr	r3, [pc, #96]	; (8003920 <UART_SetConfig+0x2e4>)
 80038c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80038c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038cc:	d01a      	beq.n	8003904 <UART_SetConfig+0x2c8>
 80038ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038d2:	d81b      	bhi.n	800390c <UART_SetConfig+0x2d0>
 80038d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038d8:	d00c      	beq.n	80038f4 <UART_SetConfig+0x2b8>
 80038da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038de:	d815      	bhi.n	800390c <UART_SetConfig+0x2d0>
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d003      	beq.n	80038ec <UART_SetConfig+0x2b0>
 80038e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038e8:	d008      	beq.n	80038fc <UART_SetConfig+0x2c0>
 80038ea:	e00f      	b.n	800390c <UART_SetConfig+0x2d0>
 80038ec:	2300      	movs	r3, #0
 80038ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038f2:	e022      	b.n	800393a <UART_SetConfig+0x2fe>
 80038f4:	2302      	movs	r3, #2
 80038f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038fa:	e01e      	b.n	800393a <UART_SetConfig+0x2fe>
 80038fc:	2304      	movs	r3, #4
 80038fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003902:	e01a      	b.n	800393a <UART_SetConfig+0x2fe>
 8003904:	2308      	movs	r3, #8
 8003906:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800390a:	e016      	b.n	800393a <UART_SetConfig+0x2fe>
 800390c:	2310      	movs	r3, #16
 800390e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003912:	e012      	b.n	800393a <UART_SetConfig+0x2fe>
 8003914:	cfff69f3 	.word	0xcfff69f3
 8003918:	40008000 	.word	0x40008000
 800391c:	40013800 	.word	0x40013800
 8003920:	40021000 	.word	0x40021000
 8003924:	40004400 	.word	0x40004400
 8003928:	40004800 	.word	0x40004800
 800392c:	40004c00 	.word	0x40004c00
 8003930:	40005000 	.word	0x40005000
 8003934:	2310      	movs	r3, #16
 8003936:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4aae      	ldr	r2, [pc, #696]	; (8003bf8 <UART_SetConfig+0x5bc>)
 8003940:	4293      	cmp	r3, r2
 8003942:	f040 8097 	bne.w	8003a74 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003946:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800394a:	2b08      	cmp	r3, #8
 800394c:	d823      	bhi.n	8003996 <UART_SetConfig+0x35a>
 800394e:	a201      	add	r2, pc, #4	; (adr r2, 8003954 <UART_SetConfig+0x318>)
 8003950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003954:	08003979 	.word	0x08003979
 8003958:	08003997 	.word	0x08003997
 800395c:	08003981 	.word	0x08003981
 8003960:	08003997 	.word	0x08003997
 8003964:	08003987 	.word	0x08003987
 8003968:	08003997 	.word	0x08003997
 800396c:	08003997 	.word	0x08003997
 8003970:	08003997 	.word	0x08003997
 8003974:	0800398f 	.word	0x0800398f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003978:	f7fe fc42 	bl	8002200 <HAL_RCC_GetPCLK1Freq>
 800397c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800397e:	e010      	b.n	80039a2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003980:	4b9e      	ldr	r3, [pc, #632]	; (8003bfc <UART_SetConfig+0x5c0>)
 8003982:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003984:	e00d      	b.n	80039a2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003986:	f7fe fba3 	bl	80020d0 <HAL_RCC_GetSysClockFreq>
 800398a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800398c:	e009      	b.n	80039a2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800398e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003992:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003994:	e005      	b.n	80039a2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003996:	2300      	movs	r3, #0
 8003998:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80039a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80039a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f000 8130 	beq.w	8003c0a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ae:	4a94      	ldr	r2, [pc, #592]	; (8003c00 <UART_SetConfig+0x5c4>)
 80039b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039b4:	461a      	mov	r2, r3
 80039b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80039bc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	685a      	ldr	r2, [r3, #4]
 80039c2:	4613      	mov	r3, r2
 80039c4:	005b      	lsls	r3, r3, #1
 80039c6:	4413      	add	r3, r2
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d305      	bcc.n	80039da <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80039d4:	69ba      	ldr	r2, [r7, #24]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d903      	bls.n	80039e2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80039e0:	e113      	b.n	8003c0a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80039e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e4:	2200      	movs	r2, #0
 80039e6:	60bb      	str	r3, [r7, #8]
 80039e8:	60fa      	str	r2, [r7, #12]
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ee:	4a84      	ldr	r2, [pc, #528]	; (8003c00 <UART_SetConfig+0x5c4>)
 80039f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	2200      	movs	r2, #0
 80039f8:	603b      	str	r3, [r7, #0]
 80039fa:	607a      	str	r2, [r7, #4]
 80039fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a00:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003a04:	f7fc fbfa 	bl	80001fc <__aeabi_uldivmod>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	4610      	mov	r0, r2
 8003a0e:	4619      	mov	r1, r3
 8003a10:	f04f 0200 	mov.w	r2, #0
 8003a14:	f04f 0300 	mov.w	r3, #0
 8003a18:	020b      	lsls	r3, r1, #8
 8003a1a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003a1e:	0202      	lsls	r2, r0, #8
 8003a20:	6979      	ldr	r1, [r7, #20]
 8003a22:	6849      	ldr	r1, [r1, #4]
 8003a24:	0849      	lsrs	r1, r1, #1
 8003a26:	2000      	movs	r0, #0
 8003a28:	460c      	mov	r4, r1
 8003a2a:	4605      	mov	r5, r0
 8003a2c:	eb12 0804 	adds.w	r8, r2, r4
 8003a30:	eb43 0905 	adc.w	r9, r3, r5
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	469a      	mov	sl, r3
 8003a3c:	4693      	mov	fp, r2
 8003a3e:	4652      	mov	r2, sl
 8003a40:	465b      	mov	r3, fp
 8003a42:	4640      	mov	r0, r8
 8003a44:	4649      	mov	r1, r9
 8003a46:	f7fc fbd9 	bl	80001fc <__aeabi_uldivmod>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	4613      	mov	r3, r2
 8003a50:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003a52:	6a3b      	ldr	r3, [r7, #32]
 8003a54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a58:	d308      	bcc.n	8003a6c <UART_SetConfig+0x430>
 8003a5a:	6a3b      	ldr	r3, [r7, #32]
 8003a5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a60:	d204      	bcs.n	8003a6c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	6a3a      	ldr	r2, [r7, #32]
 8003a68:	60da      	str	r2, [r3, #12]
 8003a6a:	e0ce      	b.n	8003c0a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003a72:	e0ca      	b.n	8003c0a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	69db      	ldr	r3, [r3, #28]
 8003a78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a7c:	d166      	bne.n	8003b4c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003a7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003a82:	2b08      	cmp	r3, #8
 8003a84:	d827      	bhi.n	8003ad6 <UART_SetConfig+0x49a>
 8003a86:	a201      	add	r2, pc, #4	; (adr r2, 8003a8c <UART_SetConfig+0x450>)
 8003a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a8c:	08003ab1 	.word	0x08003ab1
 8003a90:	08003ab9 	.word	0x08003ab9
 8003a94:	08003ac1 	.word	0x08003ac1
 8003a98:	08003ad7 	.word	0x08003ad7
 8003a9c:	08003ac7 	.word	0x08003ac7
 8003aa0:	08003ad7 	.word	0x08003ad7
 8003aa4:	08003ad7 	.word	0x08003ad7
 8003aa8:	08003ad7 	.word	0x08003ad7
 8003aac:	08003acf 	.word	0x08003acf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ab0:	f7fe fba6 	bl	8002200 <HAL_RCC_GetPCLK1Freq>
 8003ab4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003ab6:	e014      	b.n	8003ae2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ab8:	f7fe fbb8 	bl	800222c <HAL_RCC_GetPCLK2Freq>
 8003abc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003abe:	e010      	b.n	8003ae2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ac0:	4b4e      	ldr	r3, [pc, #312]	; (8003bfc <UART_SetConfig+0x5c0>)
 8003ac2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ac4:	e00d      	b.n	8003ae2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ac6:	f7fe fb03 	bl	80020d0 <HAL_RCC_GetSysClockFreq>
 8003aca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003acc:	e009      	b.n	8003ae2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ace:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ad2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ad4:	e005      	b.n	8003ae2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003ae0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f000 8090 	beq.w	8003c0a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aee:	4a44      	ldr	r2, [pc, #272]	; (8003c00 <UART_SetConfig+0x5c4>)
 8003af0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003af4:	461a      	mov	r2, r3
 8003af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af8:	fbb3 f3f2 	udiv	r3, r3, r2
 8003afc:	005a      	lsls	r2, r3, #1
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	085b      	lsrs	r3, r3, #1
 8003b04:	441a      	add	r2, r3
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b0e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b10:	6a3b      	ldr	r3, [r7, #32]
 8003b12:	2b0f      	cmp	r3, #15
 8003b14:	d916      	bls.n	8003b44 <UART_SetConfig+0x508>
 8003b16:	6a3b      	ldr	r3, [r7, #32]
 8003b18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b1c:	d212      	bcs.n	8003b44 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b1e:	6a3b      	ldr	r3, [r7, #32]
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	f023 030f 	bic.w	r3, r3, #15
 8003b26:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b28:	6a3b      	ldr	r3, [r7, #32]
 8003b2a:	085b      	lsrs	r3, r3, #1
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	f003 0307 	and.w	r3, r3, #7
 8003b32:	b29a      	uxth	r2, r3
 8003b34:	8bfb      	ldrh	r3, [r7, #30]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	8bfa      	ldrh	r2, [r7, #30]
 8003b40:	60da      	str	r2, [r3, #12]
 8003b42:	e062      	b.n	8003c0a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003b4a:	e05e      	b.n	8003c0a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b4c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b50:	2b08      	cmp	r3, #8
 8003b52:	d828      	bhi.n	8003ba6 <UART_SetConfig+0x56a>
 8003b54:	a201      	add	r2, pc, #4	; (adr r2, 8003b5c <UART_SetConfig+0x520>)
 8003b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b5a:	bf00      	nop
 8003b5c:	08003b81 	.word	0x08003b81
 8003b60:	08003b89 	.word	0x08003b89
 8003b64:	08003b91 	.word	0x08003b91
 8003b68:	08003ba7 	.word	0x08003ba7
 8003b6c:	08003b97 	.word	0x08003b97
 8003b70:	08003ba7 	.word	0x08003ba7
 8003b74:	08003ba7 	.word	0x08003ba7
 8003b78:	08003ba7 	.word	0x08003ba7
 8003b7c:	08003b9f 	.word	0x08003b9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b80:	f7fe fb3e 	bl	8002200 <HAL_RCC_GetPCLK1Freq>
 8003b84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b86:	e014      	b.n	8003bb2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b88:	f7fe fb50 	bl	800222c <HAL_RCC_GetPCLK2Freq>
 8003b8c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b8e:	e010      	b.n	8003bb2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b90:	4b1a      	ldr	r3, [pc, #104]	; (8003bfc <UART_SetConfig+0x5c0>)
 8003b92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003b94:	e00d      	b.n	8003bb2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b96:	f7fe fa9b 	bl	80020d0 <HAL_RCC_GetSysClockFreq>
 8003b9a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b9c:	e009      	b.n	8003bb2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ba2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ba4:	e005      	b.n	8003bb2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003bb0:	bf00      	nop
    }

    if (pclk != 0U)
 8003bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d028      	beq.n	8003c0a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbc:	4a10      	ldr	r2, [pc, #64]	; (8003c00 <UART_SetConfig+0x5c4>)
 8003bbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc6:	fbb3 f2f2 	udiv	r2, r3, r2
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	085b      	lsrs	r3, r3, #1
 8003bd0:	441a      	add	r2, r3
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bda:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bdc:	6a3b      	ldr	r3, [r7, #32]
 8003bde:	2b0f      	cmp	r3, #15
 8003be0:	d910      	bls.n	8003c04 <UART_SetConfig+0x5c8>
 8003be2:	6a3b      	ldr	r3, [r7, #32]
 8003be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003be8:	d20c      	bcs.n	8003c04 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003bea:	6a3b      	ldr	r3, [r7, #32]
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	60da      	str	r2, [r3, #12]
 8003bf4:	e009      	b.n	8003c0a <UART_SetConfig+0x5ce>
 8003bf6:	bf00      	nop
 8003bf8:	40008000 	.word	0x40008000
 8003bfc:	00f42400 	.word	0x00f42400
 8003c00:	0800425c 	.word	0x0800425c
      }
      else
      {
        ret = HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	2200      	movs	r2, #0
 8003c24:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003c26:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3730      	adds	r7, #48	; 0x30
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003c34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d00a      	beq.n	8003c5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00a      	beq.n	8003c80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c84:	f003 0304 	and.w	r3, r3, #4
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00a      	beq.n	8003ca2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	430a      	orrs	r2, r1
 8003ca0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca6:	f003 0308 	and.w	r3, r3, #8
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00a      	beq.n	8003cc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc8:	f003 0310 	and.w	r3, r3, #16
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00a      	beq.n	8003ce6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cea:	f003 0320 	and.w	r3, r3, #32
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00a      	beq.n	8003d08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	430a      	orrs	r2, r1
 8003d06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d01a      	beq.n	8003d4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	430a      	orrs	r2, r1
 8003d28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d32:	d10a      	bne.n	8003d4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	430a      	orrs	r2, r1
 8003d48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00a      	beq.n	8003d6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	605a      	str	r2, [r3, #4]
  }
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b086      	sub	sp, #24
 8003d7c:	af02      	add	r7, sp, #8
 8003d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d88:	f7fd f898 	bl	8000ebc <HAL_GetTick>
 8003d8c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0308 	and.w	r3, r3, #8
 8003d98:	2b08      	cmp	r3, #8
 8003d9a:	d10e      	bne.n	8003dba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 f82f 	bl	8003e0e <UART_WaitOnFlagUntilTimeout>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e025      	b.n	8003e06 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0304 	and.w	r3, r3, #4
 8003dc4:	2b04      	cmp	r3, #4
 8003dc6:	d10e      	bne.n	8003de6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003dc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003dcc:	9300      	str	r3, [sp, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 f819 	bl	8003e0e <UART_WaitOnFlagUntilTimeout>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d001      	beq.n	8003de6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e00f      	b.n	8003e06 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2220      	movs	r2, #32
 8003dea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2220      	movs	r2, #32
 8003df2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	b09c      	sub	sp, #112	; 0x70
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	60f8      	str	r0, [r7, #12]
 8003e16:	60b9      	str	r1, [r7, #8]
 8003e18:	603b      	str	r3, [r7, #0]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e1e:	e0a9      	b.n	8003f74 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e26:	f000 80a5 	beq.w	8003f74 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e2a:	f7fd f847 	bl	8000ebc <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d302      	bcc.n	8003e40 <UART_WaitOnFlagUntilTimeout+0x32>
 8003e3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d140      	bne.n	8003ec2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e48:	e853 3f00 	ldrex	r3, [r3]
 8003e4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003e4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e50:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e54:	667b      	str	r3, [r7, #100]	; 0x64
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e60:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e62:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003e64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003e66:	e841 2300 	strex	r3, r2, [r1]
 8003e6a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003e6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1e6      	bne.n	8003e40 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	3308      	adds	r3, #8
 8003e78:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e7c:	e853 3f00 	ldrex	r3, [r3]
 8003e80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e84:	f023 0301 	bic.w	r3, r3, #1
 8003e88:	663b      	str	r3, [r7, #96]	; 0x60
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	3308      	adds	r3, #8
 8003e90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003e92:	64ba      	str	r2, [r7, #72]	; 0x48
 8003e94:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003e98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e9a:	e841 2300 	strex	r3, r2, [r1]
 8003e9e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003ea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1e5      	bne.n	8003e72 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2220      	movs	r2, #32
 8003eaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2220      	movs	r2, #32
 8003eb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e069      	b.n	8003f96 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0304 	and.w	r3, r3, #4
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d051      	beq.n	8003f74 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	69db      	ldr	r3, [r3, #28]
 8003ed6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003eda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ede:	d149      	bne.n	8003f74 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ee8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef2:	e853 3f00 	ldrex	r3, [r3]
 8003ef6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003efe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	461a      	mov	r2, r3
 8003f06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f08:	637b      	str	r3, [r7, #52]	; 0x34
 8003f0a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f10:	e841 2300 	strex	r3, r2, [r1]
 8003f14:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1e6      	bne.n	8003eea <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	3308      	adds	r3, #8
 8003f22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	e853 3f00 	ldrex	r3, [r3]
 8003f2a:	613b      	str	r3, [r7, #16]
   return(result);
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	f023 0301 	bic.w	r3, r3, #1
 8003f32:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	3308      	adds	r3, #8
 8003f3a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003f3c:	623a      	str	r2, [r7, #32]
 8003f3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f40:	69f9      	ldr	r1, [r7, #28]
 8003f42:	6a3a      	ldr	r2, [r7, #32]
 8003f44:	e841 2300 	strex	r3, r2, [r1]
 8003f48:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d1e5      	bne.n	8003f1c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2220      	movs	r2, #32
 8003f54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2220      	movs	r2, #32
 8003f5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2220      	movs	r2, #32
 8003f64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e010      	b.n	8003f96 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	69da      	ldr	r2, [r3, #28]
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	68ba      	ldr	r2, [r7, #8]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	bf0c      	ite	eq
 8003f84:	2301      	moveq	r3, #1
 8003f86:	2300      	movne	r3, #0
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	79fb      	ldrb	r3, [r7, #7]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	f43f af46 	beq.w	8003e20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3770      	adds	r7, #112	; 0x70
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b085      	sub	sp, #20
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d101      	bne.n	8003fb4 <HAL_UARTEx_DisableFifoMode+0x16>
 8003fb0:	2302      	movs	r3, #2
 8003fb2:	e027      	b.n	8004004 <HAL_UARTEx_DisableFifoMode+0x66>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2224      	movs	r2, #36	; 0x24
 8003fc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f022 0201 	bic.w	r2, r2, #1
 8003fda:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003fe2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2220      	movs	r2, #32
 8003ff6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004002:	2300      	movs	r3, #0
}
 8004004:	4618      	mov	r0, r3
 8004006:	3714      	adds	r7, #20
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004020:	2b01      	cmp	r3, #1
 8004022:	d101      	bne.n	8004028 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004024:	2302      	movs	r3, #2
 8004026:	e02d      	b.n	8004084 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2224      	movs	r2, #36	; 0x24
 8004034:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f022 0201 	bic.w	r2, r2, #1
 800404e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	683a      	ldr	r2, [r7, #0]
 8004060:	430a      	orrs	r2, r1
 8004062:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 f84f 	bl	8004108 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2220      	movs	r2, #32
 8004076:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004082:	2300      	movs	r3, #0
}
 8004084:	4618      	mov	r0, r3
 8004086:	3710      	adds	r7, #16
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800409c:	2b01      	cmp	r3, #1
 800409e:	d101      	bne.n	80040a4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80040a0:	2302      	movs	r3, #2
 80040a2:	e02d      	b.n	8004100 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2224      	movs	r2, #36	; 0x24
 80040b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f022 0201 	bic.w	r2, r2, #1
 80040ca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	683a      	ldr	r2, [r7, #0]
 80040dc:	430a      	orrs	r2, r1
 80040de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 f811 	bl	8004108 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2220      	movs	r2, #32
 80040f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	3710      	adds	r7, #16
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004108:	b480      	push	{r7}
 800410a:	b085      	sub	sp, #20
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004114:	2b00      	cmp	r3, #0
 8004116:	d108      	bne.n	800412a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004128:	e031      	b.n	800418e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800412a:	2308      	movs	r3, #8
 800412c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800412e:	2308      	movs	r3, #8
 8004130:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	0e5b      	lsrs	r3, r3, #25
 800413a:	b2db      	uxtb	r3, r3
 800413c:	f003 0307 	and.w	r3, r3, #7
 8004140:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	0f5b      	lsrs	r3, r3, #29
 800414a:	b2db      	uxtb	r3, r3
 800414c:	f003 0307 	and.w	r3, r3, #7
 8004150:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004152:	7bbb      	ldrb	r3, [r7, #14]
 8004154:	7b3a      	ldrb	r2, [r7, #12]
 8004156:	4911      	ldr	r1, [pc, #68]	; (800419c <UARTEx_SetNbDataToProcess+0x94>)
 8004158:	5c8a      	ldrb	r2, [r1, r2]
 800415a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800415e:	7b3a      	ldrb	r2, [r7, #12]
 8004160:	490f      	ldr	r1, [pc, #60]	; (80041a0 <UARTEx_SetNbDataToProcess+0x98>)
 8004162:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004164:	fb93 f3f2 	sdiv	r3, r3, r2
 8004168:	b29a      	uxth	r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004170:	7bfb      	ldrb	r3, [r7, #15]
 8004172:	7b7a      	ldrb	r2, [r7, #13]
 8004174:	4909      	ldr	r1, [pc, #36]	; (800419c <UARTEx_SetNbDataToProcess+0x94>)
 8004176:	5c8a      	ldrb	r2, [r1, r2]
 8004178:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800417c:	7b7a      	ldrb	r2, [r7, #13]
 800417e:	4908      	ldr	r1, [pc, #32]	; (80041a0 <UARTEx_SetNbDataToProcess+0x98>)
 8004180:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004182:	fb93 f3f2 	sdiv	r3, r3, r2
 8004186:	b29a      	uxth	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800418e:	bf00      	nop
 8004190:	3714      	adds	r7, #20
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	08004274 	.word	0x08004274
 80041a0:	0800427c 	.word	0x0800427c

080041a4 <__libc_init_array>:
 80041a4:	b570      	push	{r4, r5, r6, lr}
 80041a6:	4d0d      	ldr	r5, [pc, #52]	; (80041dc <__libc_init_array+0x38>)
 80041a8:	4c0d      	ldr	r4, [pc, #52]	; (80041e0 <__libc_init_array+0x3c>)
 80041aa:	1b64      	subs	r4, r4, r5
 80041ac:	10a4      	asrs	r4, r4, #2
 80041ae:	2600      	movs	r6, #0
 80041b0:	42a6      	cmp	r6, r4
 80041b2:	d109      	bne.n	80041c8 <__libc_init_array+0x24>
 80041b4:	4d0b      	ldr	r5, [pc, #44]	; (80041e4 <__libc_init_array+0x40>)
 80041b6:	4c0c      	ldr	r4, [pc, #48]	; (80041e8 <__libc_init_array+0x44>)
 80041b8:	f000 f820 	bl	80041fc <_init>
 80041bc:	1b64      	subs	r4, r4, r5
 80041be:	10a4      	asrs	r4, r4, #2
 80041c0:	2600      	movs	r6, #0
 80041c2:	42a6      	cmp	r6, r4
 80041c4:	d105      	bne.n	80041d2 <__libc_init_array+0x2e>
 80041c6:	bd70      	pop	{r4, r5, r6, pc}
 80041c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80041cc:	4798      	blx	r3
 80041ce:	3601      	adds	r6, #1
 80041d0:	e7ee      	b.n	80041b0 <__libc_init_array+0xc>
 80041d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80041d6:	4798      	blx	r3
 80041d8:	3601      	adds	r6, #1
 80041da:	e7f2      	b.n	80041c2 <__libc_init_array+0x1e>
 80041dc:	0800428c 	.word	0x0800428c
 80041e0:	0800428c 	.word	0x0800428c
 80041e4:	0800428c 	.word	0x0800428c
 80041e8:	08004290 	.word	0x08004290

080041ec <memset>:
 80041ec:	4402      	add	r2, r0
 80041ee:	4603      	mov	r3, r0
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d100      	bne.n	80041f6 <memset+0xa>
 80041f4:	4770      	bx	lr
 80041f6:	f803 1b01 	strb.w	r1, [r3], #1
 80041fa:	e7f9      	b.n	80041f0 <memset+0x4>

080041fc <_init>:
 80041fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041fe:	bf00      	nop
 8004200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004202:	bc08      	pop	{r3}
 8004204:	469e      	mov	lr, r3
 8004206:	4770      	bx	lr

08004208 <_fini>:
 8004208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800420a:	bf00      	nop
 800420c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800420e:	bc08      	pop	{r3}
 8004210:	469e      	mov	lr, r3
 8004212:	4770      	bx	lr
