
002_ProTimer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005730  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  080058f0  080058f0  000158f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a38  08005a38  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005a38  08005a38  00015a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a40  08005a40  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a40  08005a40  00015a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a44  08005a44  00015a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005a48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  20000070  08005ab8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001a4  08005ab8  000201a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000138b0  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000242c  00000000  00000000  00033950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001070  00000000  00000000  00035d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f98  00000000  00000000  00036df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b16e  00000000  00000000  00037d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012c7c  00000000  00000000  00062ef6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00109362  00000000  00000000  00075b72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017eed4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f08  00000000  00000000  0017ef24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000070 	.word	0x20000070
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080058d8 	.word	0x080058d8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000074 	.word	0x20000074
 80001fc:	080058d8 	.word	0x080058d8

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <protimer_init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void protimer_init(protimer_t *mobj)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
    event_t ee;
    ee.sig = ENTRY;
 80005ac:	2305      	movs	r3, #5
 80005ae:	733b      	strb	r3, [r7, #12]
    mobj->active_state = IDLE;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	2200      	movs	r2, #0
 80005b4:	731a      	strb	r2, [r3, #12]
    mobj->pro_time = 0;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	2200      	movs	r2, #0
 80005ba:	609a      	str	r2, [r3, #8]
    protimer_state_machine(mobj,&ee);
 80005bc:	f107 030c 	add.w	r3, r7, #12
 80005c0:	4619      	mov	r1, r3
 80005c2:	6878      	ldr	r0, [r7, #4]
 80005c4:	f000 f804 	bl	80005d0 <protimer_state_machine>
}
 80005c8:	bf00      	nop
 80005ca:	3710      	adds	r7, #16
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <protimer_state_machine>:

event_status_t protimer_state_machine(protimer_t *const mobj, event_t const *const e)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	6039      	str	r1, [r7, #0]
	switch (mobj->active_state) {
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	7b1b      	ldrb	r3, [r3, #12]
 80005de:	2b04      	cmp	r3, #4
 80005e0:	d82a      	bhi.n	8000638 <protimer_state_machine+0x68>
 80005e2:	a201      	add	r2, pc, #4	; (adr r2, 80005e8 <protimer_state_machine+0x18>)
 80005e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005e8:	080005fd 	.word	0x080005fd
 80005ec:	08000609 	.word	0x08000609
 80005f0:	08000615 	.word	0x08000615
 80005f4:	08000621 	.word	0x08000621
 80005f8:	0800062d 	.word	0x0800062d
		case IDLE:{
			return protimer_state_handler_IDLE(mobj, e);
 80005fc:	6839      	ldr	r1, [r7, #0]
 80005fe:	6878      	ldr	r0, [r7, #4]
 8000600:	f000 f820 	bl	8000644 <protimer_state_handler_IDLE>
 8000604:	4603      	mov	r3, r0
 8000606:	e018      	b.n	800063a <protimer_state_machine+0x6a>
		}

		case TIME_SET:{
			return protimer_state_handler_TIME_SET(mobj, e);
 8000608:	6839      	ldr	r1, [r7, #0]
 800060a:	6878      	ldr	r0, [r7, #4]
 800060c:	f000 f866 	bl	80006dc <protimer_state_handler_TIME_SET>
 8000610:	4603      	mov	r3, r0
 8000612:	e012      	b.n	800063a <protimer_state_machine+0x6a>
		}

		case COUNTDOWN:{
			return protimer_state_handler_COUNTDOWN(mobj, e);
 8000614:	6839      	ldr	r1, [r7, #0]
 8000616:	6878      	ldr	r0, [r7, #4]
 8000618:	f000 f8ba 	bl	8000790 <protimer_state_handler_COUNTDOWN>
 800061c:	4603      	mov	r3, r0
 800061e:	e00c      	b.n	800063a <protimer_state_machine+0x6a>
		}

		case PAUSE:{
			return protimer_state_handler_PAUSE(mobj, e);
 8000620:	6839      	ldr	r1, [r7, #0]
 8000622:	6878      	ldr	r0, [r7, #4]
 8000624:	f000 f908 	bl	8000838 <protimer_state_handler_PAUSE>
 8000628:	4603      	mov	r3, r0
 800062a:	e006      	b.n	800063a <protimer_state_machine+0x6a>
		}

		case STAT:{
			return protimer_state_handler_STAT(mobj, e);
 800062c:	6839      	ldr	r1, [r7, #0]
 800062e:	6878      	ldr	r0, [r7, #4]
 8000630:	f000 f952 	bl	80008d8 <protimer_state_handler_STAT>
 8000634:	4603      	mov	r3, r0
 8000636:	e000      	b.n	800063a <protimer_state_machine+0x6a>
		}
	}
	return EVENT_IGNORED;
 8000638:	2301      	movs	r3, #1
}
 800063a:	4618      	mov	r0, r3
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop

08000644 <protimer_state_handler_IDLE>:

static event_status_t protimer_state_handler_IDLE(protimer_t *const mobj, event_t const *const e)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	6039      	str	r1, [r7, #0]
	switch (e->sig) {
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	2b06      	cmp	r3, #6
 8000654:	d83a      	bhi.n	80006cc <protimer_state_handler_IDLE+0x88>
 8000656:	a201      	add	r2, pc, #4	; (adr r2, 800065c <protimer_state_handler_IDLE+0x18>)
 8000658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800065c:	0800069d 	.word	0x0800069d
 8000660:	080006cd 	.word	0x080006cd
 8000664:	080006bd 	.word	0x080006bd
 8000668:	080006b3 	.word	0x080006b3
 800066c:	080006cd 	.word	0x080006cd
 8000670:	08000679 	.word	0x08000679
 8000674:	08000695 	.word	0x08000695
		case ENTRY:{
			mobj->curr_time = 0;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
			mobj->elapsed_time = 0;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	2200      	movs	r2, #0
 8000682:	605a      	str	r2, [r3, #4]
			display_time(0);
 8000684:	2000      	movs	r0, #0
 8000686:	f000 f95f 	bl	8000948 <display_time>
			display_message("Set Time");
 800068a:	4813      	ldr	r0, [pc, #76]	; (80006d8 <protimer_state_handler_IDLE+0x94>)
 800068c:	f000 f98a 	bl	80009a4 <display_message>
			return EVENT_HANDLED;
 8000690:	2300      	movs	r3, #0
 8000692:	e01c      	b.n	80006ce <protimer_state_handler_IDLE+0x8a>
		}

		case EXIT:{
			display_clear();
 8000694:	f000 f994 	bl	80009c0 <display_clear>
			return EVENT_HANDLED;
 8000698:	2300      	movs	r3, #0
 800069a:	e018      	b.n	80006ce <protimer_state_handler_IDLE+0x8a>
		}

		case INC_TIME:{
			mobj->curr_time += 60;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	601a      	str	r2, [r3, #0]
			mobj->active_state = TIME_SET;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2201      	movs	r2, #1
 80006ac:	731a      	strb	r2, [r3, #12]
			return EVENT_TRANSITION;
 80006ae:	2302      	movs	r3, #2
 80006b0:	e00d      	b.n	80006ce <protimer_state_handler_IDLE+0x8a>
		}

		case START_PAUSE:{
			mobj->active_state = STAT;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	2204      	movs	r2, #4
 80006b6:	731a      	strb	r2, [r3, #12]
			return EVENT_TRANSITION;
 80006b8:	2302      	movs	r3, #2
 80006ba:	e008      	b.n	80006ce <protimer_state_handler_IDLE+0x8a>
		}

		case TIME_TICK:{
			if(((protimer_tick_event_t *)(e))->ss == 5)
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	785b      	ldrb	r3, [r3, #1]
 80006c0:	2b05      	cmp	r3, #5
 80006c2:	d101      	bne.n	80006c8 <protimer_state_handler_IDLE+0x84>
			{
//				do_beep();
				return EVENT_HANDLED;
 80006c4:	2300      	movs	r3, #0
 80006c6:	e002      	b.n	80006ce <protimer_state_handler_IDLE+0x8a>
			}
			return EVENT_IGNORED;
 80006c8:	2301      	movs	r3, #1
 80006ca:	e000      	b.n	80006ce <protimer_state_handler_IDLE+0x8a>
		}
	}
	return EVENT_IGNORED;
 80006cc:	2301      	movs	r3, #1
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	080058f0 	.word	0x080058f0

080006dc <protimer_state_handler_TIME_SET>:

static event_status_t protimer_state_handler_TIME_SET(protimer_t *const mobj, event_t const *const e){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	6039      	str	r1, [r7, #0]
    switch(e->sig){
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b06      	cmp	r3, #6
 80006ec:	d84b      	bhi.n	8000786 <protimer_state_handler_TIME_SET+0xaa>
 80006ee:	a201      	add	r2, pc, #4	; (adr r2, 80006f4 <protimer_state_handler_TIME_SET+0x18>)
 80006f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f4:	08000727 	.word	0x08000727
 80006f8:	08000741 	.word	0x08000741
 80006fc:	08000787 	.word	0x08000787
 8000700:	08000771 	.word	0x08000771
 8000704:	08000767 	.word	0x08000767
 8000708:	08000711 	.word	0x08000711
 800070c:	0800071f 	.word	0x0800071f
        case ENTRY:{
            display_time(mobj->curr_time);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4618      	mov	r0, r3
 8000716:	f000 f917 	bl	8000948 <display_time>
            return EVENT_HANDLED;
 800071a:	2300      	movs	r3, #0
 800071c:	e034      	b.n	8000788 <protimer_state_handler_TIME_SET+0xac>
        }
        case EXIT:{
            display_clear();
 800071e:	f000 f94f 	bl	80009c0 <display_clear>
            return EVENT_HANDLED;
 8000722:	2300      	movs	r3, #0
 8000724:	e030      	b.n	8000788 <protimer_state_handler_TIME_SET+0xac>
        }
        case INC_TIME:{
            mobj->curr_time += 60;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	601a      	str	r2, [r3, #0]
            display_time(mobj->curr_time);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4618      	mov	r0, r3
 8000738:	f000 f906 	bl	8000948 <display_time>
            return EVENT_HANDLED;
 800073c:	2300      	movs	r3, #0
 800073e:	e023      	b.n	8000788 <protimer_state_handler_TIME_SET+0xac>
        }
        case DEC_TIME:{
            if(mobj->curr_time >=60){
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	2b3b      	cmp	r3, #59	; 0x3b
 8000746:	d90c      	bls.n	8000762 <protimer_state_handler_TIME_SET+0x86>
                mobj->curr_time -= 60;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f1a3 023c 	sub.w	r2, r3, #60	; 0x3c
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	601a      	str	r2, [r3, #0]
                display_time(mobj->curr_time);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4618      	mov	r0, r3
 800075a:	f000 f8f5 	bl	8000948 <display_time>
                return EVENT_HANDLED;
 800075e:	2300      	movs	r3, #0
 8000760:	e012      	b.n	8000788 <protimer_state_handler_TIME_SET+0xac>
            }
            return EVENT_IGNORED;
 8000762:	2301      	movs	r3, #1
 8000764:	e010      	b.n	8000788 <protimer_state_handler_TIME_SET+0xac>
        }
        case ABRT:{
            mobj->active_state = IDLE;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	2200      	movs	r2, #0
 800076a:	731a      	strb	r2, [r3, #12]
            return EVENT_TRANSITION;
 800076c:	2302      	movs	r3, #2
 800076e:	e00b      	b.n	8000788 <protimer_state_handler_TIME_SET+0xac>
        }
        case START_PAUSE:{
            if(mobj->curr_time >=60){
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	2b3b      	cmp	r3, #59	; 0x3b
 8000776:	d904      	bls.n	8000782 <protimer_state_handler_TIME_SET+0xa6>
                mobj->active_state = COUNTDOWN;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2202      	movs	r2, #2
 800077c:	731a      	strb	r2, [r3, #12]
                return EVENT_TRANSITION;
 800077e:	2302      	movs	r3, #2
 8000780:	e002      	b.n	8000788 <protimer_state_handler_TIME_SET+0xac>
            }
            return EVENT_IGNORED;
 8000782:	2301      	movs	r3, #1
 8000784:	e000      	b.n	8000788 <protimer_state_handler_TIME_SET+0xac>
        }
    }

    return EVENT_IGNORED;
 8000786:	2301      	movs	r3, #1
}
 8000788:	4618      	mov	r0, r3
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}

08000790 <protimer_state_handler_COUNTDOWN>:

static event_status_t protimer_state_handler_COUNTDOWN(protimer_t *const mobj, event_t const *const e){
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	6039      	str	r1, [r7, #0]
    switch(e->sig){
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	3b02      	subs	r3, #2
 80007a0:	2b04      	cmp	r3, #4
 80007a2:	d843      	bhi.n	800082c <protimer_state_handler_COUNTDOWN+0x9c>
 80007a4:	a201      	add	r2, pc, #4	; (adr r2, 80007ac <protimer_state_handler_COUNTDOWN+0x1c>)
 80007a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007aa:	bf00      	nop
 80007ac:	080007d9 	.word	0x080007d9
 80007b0:	08000819 	.word	0x08000819
 80007b4:	08000823 	.word	0x08000823
 80007b8:	0800082d 	.word	0x0800082d
 80007bc:	080007c1 	.word	0x080007c1
        case EXIT:{
            mobj->pro_time += mobj->elapsed_time;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	689a      	ldr	r2, [r3, #8]
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	685b      	ldr	r3, [r3, #4]
 80007c8:	441a      	add	r2, r3
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	609a      	str	r2, [r3, #8]
            mobj->elapsed_time = 0;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2200      	movs	r2, #0
 80007d2:	605a      	str	r2, [r3, #4]
            return EVENT_HANDLED;
 80007d4:	2300      	movs	r3, #0
 80007d6:	e02a      	b.n	800082e <protimer_state_handler_COUNTDOWN+0x9e>
        }

        case TIME_TICK:{
            if(((protimer_tick_event_t*)(e))->ss == 10){
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	785b      	ldrb	r3, [r3, #1]
 80007dc:	2b0a      	cmp	r3, #10
 80007de:	d119      	bne.n	8000814 <protimer_state_handler_COUNTDOWN+0x84>
                --mobj->curr_time;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	1e5a      	subs	r2, r3, #1
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	601a      	str	r2, [r3, #0]
                ++mobj->elapsed_time;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	685b      	ldr	r3, [r3, #4]
 80007ee:	1c5a      	adds	r2, r3, #1
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	605a      	str	r2, [r3, #4]
                display_time(mobj->curr_time);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4618      	mov	r0, r3
 80007fa:	f000 f8a5 	bl	8000948 <display_time>
                if(!mobj->curr_time){
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d104      	bne.n	8000810 <protimer_state_handler_COUNTDOWN+0x80>
                    mobj->active_state = IDLE;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	2200      	movs	r2, #0
 800080a:	731a      	strb	r2, [r3, #12]
                    return EVENT_TRANSITION;
 800080c:	2302      	movs	r3, #2
 800080e:	e00e      	b.n	800082e <protimer_state_handler_COUNTDOWN+0x9e>
                }
                return EVENT_HANDLED;
 8000810:	2300      	movs	r3, #0
 8000812:	e00c      	b.n	800082e <protimer_state_handler_COUNTDOWN+0x9e>
            }
            return EVENT_IGNORED;
 8000814:	2301      	movs	r3, #1
 8000816:	e00a      	b.n	800082e <protimer_state_handler_COUNTDOWN+0x9e>
        }
        case START_PAUSE:{
            mobj->active_state = PAUSE;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2203      	movs	r2, #3
 800081c:	731a      	strb	r2, [r3, #12]
            return EVENT_TRANSITION;
 800081e:	2302      	movs	r3, #2
 8000820:	e005      	b.n	800082e <protimer_state_handler_COUNTDOWN+0x9e>
        }
        case ABRT:{
            mobj->active_state = IDLE;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	2200      	movs	r2, #0
 8000826:	731a      	strb	r2, [r3, #12]
            return EVENT_TRANSITION;
 8000828:	2302      	movs	r3, #2
 800082a:	e000      	b.n	800082e <protimer_state_handler_COUNTDOWN+0x9e>
        }
    }
    return EVENT_IGNORED;
 800082c:	2301      	movs	r3, #1
}
 800082e:	4618      	mov	r0, r3
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop

08000838 <protimer_state_handler_PAUSE>:


static event_status_t protimer_state_handler_PAUSE(protimer_t *const mobj, event_t const *const e){
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]
    switch(e->sig){
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	2b06      	cmp	r3, #6
 8000848:	d83f      	bhi.n	80008ca <protimer_state_handler_PAUSE+0x92>
 800084a:	a201      	add	r2, pc, #4	; (adr r2, 8000850 <protimer_state_handler_PAUSE+0x18>)
 800084c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000850:	0800087f 	.word	0x0800087f
 8000854:	08000895 	.word	0x08000895
 8000858:	080008cb 	.word	0x080008cb
 800085c:	080008b7 	.word	0x080008b7
 8000860:	080008c1 	.word	0x080008c1
 8000864:	0800086d 	.word	0x0800086d
 8000868:	08000877 	.word	0x08000877
        case ENTRY:{
            display_message("Paused");
 800086c:	4819      	ldr	r0, [pc, #100]	; (80008d4 <protimer_state_handler_PAUSE+0x9c>)
 800086e:	f000 f899 	bl	80009a4 <display_message>
            return EVENT_HANDLED;
 8000872:	2300      	movs	r3, #0
 8000874:	e02a      	b.n	80008cc <protimer_state_handler_PAUSE+0x94>
        }
        case EXIT:{
            display_clear();
 8000876:	f000 f8a3 	bl	80009c0 <display_clear>
            return EVENT_HANDLED;
 800087a:	2300      	movs	r3, #0
 800087c:	e026      	b.n	80008cc <protimer_state_handler_PAUSE+0x94>
        }
        case INC_TIME:{
            mobj->curr_time += 60;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	601a      	str	r2, [r3, #0]
            mobj->active_state = TIME_SET;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2201      	movs	r2, #1
 800088e:	731a      	strb	r2, [r3, #12]
            return EVENT_TRANSITION;
 8000890:	2302      	movs	r3, #2
 8000892:	e01b      	b.n	80008cc <protimer_state_handler_PAUSE+0x94>
        }
        case DEC_TIME:{
            if(mobj->curr_time >= 60){
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2b3b      	cmp	r3, #59	; 0x3b
 800089a:	d90a      	bls.n	80008b2 <protimer_state_handler_PAUSE+0x7a>
                mobj->curr_time -= 60;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f1a3 023c 	sub.w	r2, r3, #60	; 0x3c
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	601a      	str	r2, [r3, #0]
                mobj->active_state = TIME_SET;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2201      	movs	r2, #1
 80008ac:	731a      	strb	r2, [r3, #12]
                return EVENT_TRANSITION;
 80008ae:	2302      	movs	r3, #2
 80008b0:	e00c      	b.n	80008cc <protimer_state_handler_PAUSE+0x94>
            }
            return EVENT_IGNORED;
 80008b2:	2301      	movs	r3, #1
 80008b4:	e00a      	b.n	80008cc <protimer_state_handler_PAUSE+0x94>
        }
        case START_PAUSE:{
            mobj->active_state = COUNTDOWN;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	2202      	movs	r2, #2
 80008ba:	731a      	strb	r2, [r3, #12]
            return EVENT_TRANSITION;
 80008bc:	2302      	movs	r3, #2
 80008be:	e005      	b.n	80008cc <protimer_state_handler_PAUSE+0x94>
        }
        case ABRT:{
            mobj->active_state = IDLE;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2200      	movs	r2, #0
 80008c4:	731a      	strb	r2, [r3, #12]
            return EVENT_TRANSITION;
 80008c6:	2302      	movs	r3, #2
 80008c8:	e000      	b.n	80008cc <protimer_state_handler_PAUSE+0x94>
        }
    }
    return EVENT_IGNORED;
 80008ca:	2301      	movs	r3, #1
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3708      	adds	r7, #8
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	080058fc 	.word	0x080058fc

080008d8 <protimer_state_handler_STAT>:

static event_status_t protimer_state_handler_STAT(protimer_t *const mobj, event_t const *const e){
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
 80008e0:	6039      	str	r1, [r7, #0]
    static uint8_t tick_count;

    switch(e->sig){
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	2b06      	cmp	r3, #6
 80008e8:	d00f      	beq.n	800090a <protimer_state_handler_STAT+0x32>
 80008ea:	2b06      	cmp	r3, #6
 80008ec:	dc23      	bgt.n	8000936 <protimer_state_handler_STAT+0x5e>
 80008ee:	2b02      	cmp	r3, #2
 80008f0:	d00f      	beq.n	8000912 <protimer_state_handler_STAT+0x3a>
 80008f2:	2b05      	cmp	r3, #5
 80008f4:	d11f      	bne.n	8000936 <protimer_state_handler_STAT+0x5e>
        case ENTRY:{
            display_time(mobj->pro_time);
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	689b      	ldr	r3, [r3, #8]
 80008fa:	4618      	mov	r0, r3
 80008fc:	f000 f824 	bl	8000948 <display_time>
            display_message("Productive time");
 8000900:	480f      	ldr	r0, [pc, #60]	; (8000940 <protimer_state_handler_STAT+0x68>)
 8000902:	f000 f84f 	bl	80009a4 <display_message>
            return EVENT_HANDLED;
 8000906:	2300      	movs	r3, #0
 8000908:	e016      	b.n	8000938 <protimer_state_handler_STAT+0x60>
        }
        case EXIT:{
            display_clear();
 800090a:	f000 f859 	bl	80009c0 <display_clear>
            return EVENT_HANDLED;
 800090e:	2300      	movs	r3, #0
 8000910:	e012      	b.n	8000938 <protimer_state_handler_STAT+0x60>
        }
        case TIME_TICK:{
            if(++tick_count == 30){
 8000912:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <protimer_state_handler_STAT+0x6c>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	3301      	adds	r3, #1
 8000918:	b2da      	uxtb	r2, r3
 800091a:	4b0a      	ldr	r3, [pc, #40]	; (8000944 <protimer_state_handler_STAT+0x6c>)
 800091c:	701a      	strb	r2, [r3, #0]
 800091e:	4b09      	ldr	r3, [pc, #36]	; (8000944 <protimer_state_handler_STAT+0x6c>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	2b1e      	cmp	r3, #30
 8000924:	d107      	bne.n	8000936 <protimer_state_handler_STAT+0x5e>
                tick_count = 0;
 8000926:	4b07      	ldr	r3, [pc, #28]	; (8000944 <protimer_state_handler_STAT+0x6c>)
 8000928:	2200      	movs	r2, #0
 800092a:	701a      	strb	r2, [r3, #0]
                mobj->active_state = IDLE;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2200      	movs	r2, #0
 8000930:	731a      	strb	r2, [r3, #12]
                return EVENT_TRANSITION;
 8000932:	2302      	movs	r3, #2
 8000934:	e000      	b.n	8000938 <protimer_state_handler_STAT+0x60>
            }
        }
    }
    return EVENT_IGNORED;
 8000936:	2301      	movs	r3, #1
}
 8000938:	4618      	mov	r0, r3
 800093a:	3708      	adds	r7, #8
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	08005904 	.word	0x08005904
 8000944:	2000018a 	.word	0x2000018a

08000948 <display_time>:

//////////////////////////helper functions//////////////////////////
static void display_time(uint32_t time){
 8000948:	b580      	push	{r7, lr}
 800094a:	b086      	sub	sp, #24
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  char buf[7];

  uint16_t m = time / 60;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	4a11      	ldr	r2, [pc, #68]	; (8000998 <display_time+0x50>)
 8000954:	fba2 2303 	umull	r2, r3, r2, r3
 8000958:	095b      	lsrs	r3, r3, #5
 800095a:	82fb      	strh	r3, [r7, #22]
  uint8_t s = time % 60;
 800095c:	6879      	ldr	r1, [r7, #4]
 800095e:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <display_time+0x50>)
 8000960:	fba3 2301 	umull	r2, r3, r3, r1
 8000964:	095a      	lsrs	r2, r3, #5
 8000966:	4613      	mov	r3, r2
 8000968:	011b      	lsls	r3, r3, #4
 800096a:	1a9b      	subs	r3, r3, r2
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	1aca      	subs	r2, r1, r3
 8000970:	4613      	mov	r3, r2
 8000972:	757b      	strb	r3, [r7, #21]
  sprintf(buf,"%03d:%02d",m,s);
 8000974:	8afa      	ldrh	r2, [r7, #22]
 8000976:	7d7b      	ldrb	r3, [r7, #21]
 8000978:	f107 000c 	add.w	r0, r7, #12
 800097c:	4907      	ldr	r1, [pc, #28]	; (800099c <display_time+0x54>)
 800097e:	f003 fe59 	bl	8004634 <siprintf>

  printf("%s\r\n", buf);
 8000982:	f107 030c 	add.w	r3, r7, #12
 8000986:	4619      	mov	r1, r3
 8000988:	4805      	ldr	r0, [pc, #20]	; (80009a0 <display_time+0x58>)
 800098a:	f003 fdc5 	bl	8004518 <iprintf>
}
 800098e:	bf00      	nop
 8000990:	3718      	adds	r7, #24
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	88888889 	.word	0x88888889
 800099c:	08005914 	.word	0x08005914
 80009a0:	08005920 	.word	0x08005920

080009a4 <display_message>:

static void display_message(char *string){
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	printf("%s\r\n", string);
 80009ac:	6879      	ldr	r1, [r7, #4]
 80009ae:	4803      	ldr	r0, [pc, #12]	; (80009bc <display_message+0x18>)
 80009b0:	f003 fdb2 	bl	8004518 <iprintf>
}
 80009b4:	bf00      	nop
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	08005920 	.word	0x08005920

080009c0 <display_clear>:

static void display_clear(void){
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
    printf("clear\r\n");
 80009c4:	4802      	ldr	r0, [pc, #8]	; (80009d0 <display_clear+0x10>)
 80009c6:	f003 fe2d 	bl	8004624 <puts>
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	08005928 	.word	0x08005928

080009d4 <protimer_event_dispatcher>:



static void protimer_event_dispatcher(protimer_t *const mobj,event_t const *const e)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	6039      	str	r1, [r7, #0]

  event_status_t status;
  protimer_state_t source, target;

  source = mobj->active_state;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	7b1b      	ldrb	r3, [r3, #12]
 80009e2:	73fb      	strb	r3, [r7, #15]
  status = protimer_state_machine(mobj,e);
 80009e4:	6839      	ldr	r1, [r7, #0]
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f7ff fdf2 	bl	80005d0 <protimer_state_machine>
 80009ec:	4603      	mov	r3, r0
 80009ee:	73bb      	strb	r3, [r7, #14]

  if(status == EVENT_TRANSITION){
 80009f0:	7bbb      	ldrb	r3, [r7, #14]
 80009f2:	2b02      	cmp	r3, #2
 80009f4:	d118      	bne.n	8000a28 <protimer_event_dispatcher+0x54>
    target = mobj->active_state;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	7b1b      	ldrb	r3, [r3, #12]
 80009fa:	737b      	strb	r3, [r7, #13]
    event_t ee;
    //1. run the exit action for the source state
    ee.sig = EXIT;
 80009fc:	2306      	movs	r3, #6
 80009fe:	733b      	strb	r3, [r7, #12]
    mobj->active_state = source;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	7bfa      	ldrb	r2, [r7, #15]
 8000a04:	731a      	strb	r2, [r3, #12]
    protimer_state_machine(mobj,&ee);
 8000a06:	f107 030c 	add.w	r3, r7, #12
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	6878      	ldr	r0, [r7, #4]
 8000a0e:	f7ff fddf 	bl	80005d0 <protimer_state_machine>

    //2. run the entry action for the target state
    ee.sig = ENTRY;
 8000a12:	2305      	movs	r3, #5
 8000a14:	733b      	strb	r3, [r7, #12]
    mobj->active_state = target;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	7b7a      	ldrb	r2, [r7, #13]
 8000a1a:	731a      	strb	r2, [r3, #12]
    protimer_state_machine(mobj,&ee);
 8000a1c:	f107 030c 	add.w	r3, r7, #12
 8000a20:	4619      	mov	r1, r3
 8000a22:	6878      	ldr	r0, [r7, #4]
 8000a24:	f7ff fdd4 	bl	80005d0 <protimer_state_machine>
  }

}
 8000a28:	bf00      	nop
 8000a2a:	3710      	adds	r7, #16
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM17)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a06      	ldr	r2, [pc, #24]	; (8000a58 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d104      	bne.n	8000a4c <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		millis_counter++;
 8000a42:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	3301      	adds	r3, #1
 8000a48:	4a04      	ldr	r2, [pc, #16]	; (8000a5c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000a4a:	6013      	str	r3, [r2, #0]
	}
}
 8000a4c:	bf00      	nop
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr
 8000a58:	40014800 	.word	0x40014800
 8000a5c:	2000017c 	.word	0x2000017c

08000a60 <millis>:

uint32_t millis(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
	return millis_counter;
 8000a64:	4b03      	ldr	r3, [pc, #12]	; (8000a74 <millis+0x14>)
 8000a66:	681b      	ldr	r3, [r3, #0]
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	2000017c 	.word	0x2000017c

08000a78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a7c:	f000 fb05 	bl	800108a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a80:	f000 f86a 	bl	8000b58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a84:	f000 f92c 	bl	8000ce0 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000a88:	f000 f8b8 	bl	8000bfc <MX_LPUART1_UART_Init>
  MX_TIM17_Init();
 8000a8c:	f000 f902 	bl	8000c94 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

  protimer_init(&protimer);
 8000a90:	482a      	ldr	r0, [pc, #168]	; (8000b3c <main+0xc4>)
 8000a92:	f7ff fd87 	bl	80005a4 <protimer_init>

  HAL_TIM_Base_Start_IT(&htim17);
 8000a96:	482a      	ldr	r0, [pc, #168]	; (8000b40 <main+0xc8>)
 8000a98:	f002 fb2c 	bl	80030f4 <HAL_TIM_Base_Start_IT>

    /* USER CODE BEGIN 3 */
//	  current_time = millis();

	  //2. make an event
	  if(HAL_UART_Receive(&hlpuart1, &rx_buffer, 1, HAL_MAX_DELAY) == HAL_OK)
 8000a9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	4928      	ldr	r1, [pc, #160]	; (8000b44 <main+0xcc>)
 8000aa4:	4828      	ldr	r0, [pc, #160]	; (8000b48 <main+0xd0>)
 8000aa6:	f002 fe7c 	bl	80037a2 <HAL_UART_Receive>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d122      	bne.n	8000af6 <main+0x7e>
	  {

		  if(rx_buffer == '1')
 8000ab0:	4b24      	ldr	r3, [pc, #144]	; (8000b44 <main+0xcc>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	2b31      	cmp	r3, #49	; 0x31
 8000ab6:	d103      	bne.n	8000ac0 <main+0x48>
		  {
			  ue.super.sig = INC_TIME;
 8000ab8:	4b24      	ldr	r3, [pc, #144]	; (8000b4c <main+0xd4>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	701a      	strb	r2, [r3, #0]
 8000abe:	e016      	b.n	8000aee <main+0x76>
		  }
		  else if(rx_buffer == '2')
 8000ac0:	4b20      	ldr	r3, [pc, #128]	; (8000b44 <main+0xcc>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	2b32      	cmp	r3, #50	; 0x32
 8000ac6:	d103      	bne.n	8000ad0 <main+0x58>
		  {
			  ue.super.sig = DEC_TIME;
 8000ac8:	4b20      	ldr	r3, [pc, #128]	; (8000b4c <main+0xd4>)
 8000aca:	2201      	movs	r2, #1
 8000acc:	701a      	strb	r2, [r3, #0]
 8000ace:	e00e      	b.n	8000aee <main+0x76>
		  }
		  else if(rx_buffer == '3')
 8000ad0:	4b1c      	ldr	r3, [pc, #112]	; (8000b44 <main+0xcc>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	2b33      	cmp	r3, #51	; 0x33
 8000ad6:	d103      	bne.n	8000ae0 <main+0x68>
		  {
			  ue.super.sig = START_PAUSE;
 8000ad8:	4b1c      	ldr	r3, [pc, #112]	; (8000b4c <main+0xd4>)
 8000ada:	2203      	movs	r2, #3
 8000adc:	701a      	strb	r2, [r3, #0]
 8000ade:	e006      	b.n	8000aee <main+0x76>
		  }
		  else if(rx_buffer == '4')
 8000ae0:	4b18      	ldr	r3, [pc, #96]	; (8000b44 <main+0xcc>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b34      	cmp	r3, #52	; 0x34
 8000ae6:	d102      	bne.n	8000aee <main+0x76>
		  {
			  ue.super.sig = ABRT;
 8000ae8:	4b18      	ldr	r3, [pc, #96]	; (8000b4c <main+0xd4>)
 8000aea:	2204      	movs	r2, #4
 8000aec:	701a      	strb	r2, [r3, #0]
		  }

	     //3. send it to event dispatcher
	    protimer_event_dispatcher(&protimer,&ue.super);
 8000aee:	4917      	ldr	r1, [pc, #92]	; (8000b4c <main+0xd4>)
 8000af0:	4812      	ldr	r0, [pc, #72]	; (8000b3c <main+0xc4>)
 8000af2:	f7ff ff6f 	bl	80009d4 <protimer_event_dispatcher>
	  }

	  //4. dispatch the time tick event for every 100ms
	  if(millis() - current_time  >= 100){
 8000af6:	f7ff ffb3 	bl	8000a60 <millis>
 8000afa:	4602      	mov	r2, r0
 8000afc:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <main+0xd8>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	1ad3      	subs	r3, r2, r3
 8000b02:	2b63      	cmp	r3, #99	; 0x63
 8000b04:	d9ca      	bls.n	8000a9c <main+0x24>
	    //100ms has passed
	    current_time = millis();
 8000b06:	f7ff ffab 	bl	8000a60 <millis>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	4a10      	ldr	r2, [pc, #64]	; (8000b50 <main+0xd8>)
 8000b0e:	6013      	str	r3, [r2, #0]
	    te.super.sig = TIME_TICK;
 8000b10:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <main+0xdc>)
 8000b12:	2202      	movs	r2, #2
 8000b14:	701a      	strb	r2, [r3, #0]
	    if(++te.ss > 10) te.ss = 1;
 8000b16:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <main+0xdc>)
 8000b18:	785b      	ldrb	r3, [r3, #1]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	b2da      	uxtb	r2, r3
 8000b1e:	4b0d      	ldr	r3, [pc, #52]	; (8000b54 <main+0xdc>)
 8000b20:	705a      	strb	r2, [r3, #1]
 8000b22:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <main+0xdc>)
 8000b24:	785b      	ldrb	r3, [r3, #1]
 8000b26:	2b0a      	cmp	r3, #10
 8000b28:	d902      	bls.n	8000b30 <main+0xb8>
 8000b2a:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <main+0xdc>)
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	705a      	strb	r2, [r3, #1]
	    protimer_event_dispatcher(&protimer,&te.super);
 8000b30:	4908      	ldr	r1, [pc, #32]	; (8000b54 <main+0xdc>)
 8000b32:	4802      	ldr	r0, [pc, #8]	; (8000b3c <main+0xc4>)
 8000b34:	f7ff ff4e 	bl	80009d4 <protimer_event_dispatcher>
	  if(HAL_UART_Receive(&hlpuart1, &rx_buffer, 1, HAL_MAX_DELAY) == HAL_OK)
 8000b38:	e7b0      	b.n	8000a9c <main+0x24>
 8000b3a:	bf00      	nop
 8000b3c:	20000168 	.word	0x20000168
 8000b40:	2000011c 	.word	0x2000011c
 8000b44:	20000178 	.word	0x20000178
 8000b48:	2000008c 	.word	0x2000008c
 8000b4c:	20000180 	.word	0x20000180
 8000b50:	20000184 	.word	0x20000184
 8000b54:	20000188 	.word	0x20000188

08000b58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b096      	sub	sp, #88	; 0x58
 8000b5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b5e:	f107 0314 	add.w	r3, r7, #20
 8000b62:	2244      	movs	r2, #68	; 0x44
 8000b64:	2100      	movs	r1, #0
 8000b66:	4618      	mov	r0, r3
 8000b68:	f003 fcce 	bl	8004508 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b6c:	463b      	mov	r3, r7
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
 8000b76:	60da      	str	r2, [r3, #12]
 8000b78:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b7a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b7e:	f000 fdbd 	bl	80016fc <HAL_PWREx_ControlVoltageScaling>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000b88:	f000 f8c2 	bl	8000d10 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b94:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b96:	2340      	movs	r3, #64	; 0x40
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000ba6:	2308      	movs	r3, #8
 8000ba8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000baa:	2302      	movs	r3, #2
 8000bac:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bb6:	f107 0314 	add.w	r3, r7, #20
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f000 fe52 	bl	8001864 <HAL_RCC_OscConfig>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000bc6:	f000 f8a3 	bl	8000d10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bca:	230f      	movs	r3, #15
 8000bcc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bce:	2303      	movs	r3, #3
 8000bd0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000bde:	463b      	mov	r3, r7
 8000be0:	2103      	movs	r1, #3
 8000be2:	4618      	mov	r0, r3
 8000be4:	f001 fa58 	bl	8002098 <HAL_RCC_ClockConfig>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000bee:	f000 f88f 	bl	8000d10 <Error_Handler>
  }
}
 8000bf2:	bf00      	nop
 8000bf4:	3758      	adds	r7, #88	; 0x58
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
	...

08000bfc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000c00:	4b22      	ldr	r3, [pc, #136]	; (8000c8c <MX_LPUART1_UART_Init+0x90>)
 8000c02:	4a23      	ldr	r2, [pc, #140]	; (8000c90 <MX_LPUART1_UART_Init+0x94>)
 8000c04:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000c06:	4b21      	ldr	r3, [pc, #132]	; (8000c8c <MX_LPUART1_UART_Init+0x90>)
 8000c08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c0c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c0e:	4b1f      	ldr	r3, [pc, #124]	; (8000c8c <MX_LPUART1_UART_Init+0x90>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000c14:	4b1d      	ldr	r3, [pc, #116]	; (8000c8c <MX_LPUART1_UART_Init+0x90>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000c1a:	4b1c      	ldr	r3, [pc, #112]	; (8000c8c <MX_LPUART1_UART_Init+0x90>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000c20:	4b1a      	ldr	r3, [pc, #104]	; (8000c8c <MX_LPUART1_UART_Init+0x90>)
 8000c22:	220c      	movs	r2, #12
 8000c24:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c26:	4b19      	ldr	r3, [pc, #100]	; (8000c8c <MX_LPUART1_UART_Init+0x90>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c2c:	4b17      	ldr	r3, [pc, #92]	; (8000c8c <MX_LPUART1_UART_Init+0x90>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c32:	4b16      	ldr	r3, [pc, #88]	; (8000c8c <MX_LPUART1_UART_Init+0x90>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c38:	4b14      	ldr	r3, [pc, #80]	; (8000c8c <MX_LPUART1_UART_Init+0x90>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000c3e:	4b13      	ldr	r3, [pc, #76]	; (8000c8c <MX_LPUART1_UART_Init+0x90>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000c44:	4811      	ldr	r0, [pc, #68]	; (8000c8c <MX_LPUART1_UART_Init+0x90>)
 8000c46:	f002 fcc5 	bl	80035d4 <HAL_UART_Init>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000c50:	f000 f85e 	bl	8000d10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c54:	2100      	movs	r1, #0
 8000c56:	480d      	ldr	r0, [pc, #52]	; (8000c8c <MX_LPUART1_UART_Init+0x90>)
 8000c58:	f003 fb62 	bl	8004320 <HAL_UARTEx_SetTxFifoThreshold>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c62:	f000 f855 	bl	8000d10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c66:	2100      	movs	r1, #0
 8000c68:	4808      	ldr	r0, [pc, #32]	; (8000c8c <MX_LPUART1_UART_Init+0x90>)
 8000c6a:	f003 fb97 	bl	800439c <HAL_UARTEx_SetRxFifoThreshold>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c74:	f000 f84c 	bl	8000d10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000c78:	4804      	ldr	r0, [pc, #16]	; (8000c8c <MX_LPUART1_UART_Init+0x90>)
 8000c7a:	f003 fb18 	bl	80042ae <HAL_UARTEx_DisableFifoMode>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c84:	f000 f844 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000c88:	bf00      	nop
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	2000008c 	.word	0x2000008c
 8000c90:	40008000 	.word	0x40008000

08000c94 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000c98:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <MX_TIM17_Init+0x44>)
 8000c9a:	4a10      	ldr	r2, [pc, #64]	; (8000cdc <MX_TIM17_Init+0x48>)
 8000c9c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 64000-1;
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <MX_TIM17_Init+0x44>)
 8000ca0:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000ca4:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca6:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <MX_TIM17_Init+0x44>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 100-1;
 8000cac:	4b0a      	ldr	r3, [pc, #40]	; (8000cd8 <MX_TIM17_Init+0x44>)
 8000cae:	2263      	movs	r2, #99	; 0x63
 8000cb0:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb2:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <MX_TIM17_Init+0x44>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000cb8:	4b07      	ldr	r3, [pc, #28]	; (8000cd8 <MX_TIM17_Init+0x44>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cbe:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <MX_TIM17_Init+0x44>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000cc4:	4804      	ldr	r0, [pc, #16]	; (8000cd8 <MX_TIM17_Init+0x44>)
 8000cc6:	f002 f9bd 	bl	8003044 <HAL_TIM_Base_Init>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8000cd0:	f000 f81e 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000cd4:	bf00      	nop
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	2000011c 	.word	0x2000011c
 8000cdc:	40014800 	.word	0x40014800

08000ce0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ce6:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <MX_GPIO_Init+0x2c>)
 8000ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cea:	4a08      	ldr	r2, [pc, #32]	; (8000d0c <MX_GPIO_Init+0x2c>)
 8000cec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cf2:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <MX_GPIO_Init+0x2c>)
 8000cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000cfe:	f000 fda1 	bl	8001844 <HAL_PWREx_EnableVddIO2>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40021000 	.word	0x40021000

08000d10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d14:	b672      	cpsid	i
}
 8000d16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <Error_Handler+0x8>
	...

08000d1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d22:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <HAL_MspInit+0x44>)
 8000d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d26:	4a0e      	ldr	r2, [pc, #56]	; (8000d60 <HAL_MspInit+0x44>)
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d2e:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <HAL_MspInit+0x44>)
 8000d30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3a:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <HAL_MspInit+0x44>)
 8000d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d3e:	4a08      	ldr	r2, [pc, #32]	; (8000d60 <HAL_MspInit+0x44>)
 8000d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d44:	6593      	str	r3, [r2, #88]	; 0x58
 8000d46:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <HAL_MspInit+0x44>)
 8000d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d4e:	603b      	str	r3, [r7, #0]
 8000d50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d52:	bf00      	nop
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	40021000 	.word	0x40021000

08000d64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b0ae      	sub	sp, #184	; 0xb8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d7c:	f107 0310 	add.w	r3, r7, #16
 8000d80:	2294      	movs	r2, #148	; 0x94
 8000d82:	2100      	movs	r1, #0
 8000d84:	4618      	mov	r0, r3
 8000d86:	f003 fbbf 	bl	8004508 <memset>
  if(huart->Instance==LPUART1)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a22      	ldr	r2, [pc, #136]	; (8000e18 <HAL_UART_MspInit+0xb4>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d13d      	bne.n	8000e10 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000d94:	2320      	movs	r3, #32
 8000d96:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d9c:	f107 0310 	add.w	r3, r7, #16
 8000da0:	4618      	mov	r0, r3
 8000da2:	f001 fc37 	bl	8002614 <HAL_RCCEx_PeriphCLKConfig>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000dac:	f7ff ffb0 	bl	8000d10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000db0:	4b1a      	ldr	r3, [pc, #104]	; (8000e1c <HAL_UART_MspInit+0xb8>)
 8000db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000db4:	4a19      	ldr	r2, [pc, #100]	; (8000e1c <HAL_UART_MspInit+0xb8>)
 8000db6:	f043 0301 	orr.w	r3, r3, #1
 8000dba:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000dbc:	4b17      	ldr	r3, [pc, #92]	; (8000e1c <HAL_UART_MspInit+0xb8>)
 8000dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000dc0:	f003 0301 	and.w	r3, r3, #1
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dc8:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <HAL_UART_MspInit+0xb8>)
 8000dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dcc:	4a13      	ldr	r2, [pc, #76]	; (8000e1c <HAL_UART_MspInit+0xb8>)
 8000dce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dd4:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <HAL_UART_MspInit+0xb8>)
 8000dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ddc:	60bb      	str	r3, [r7, #8]
 8000dde:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000de0:	f000 fd30 	bl	8001844 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = BSP_DEBUG_UART_TX_Pin|BSP_DEBUG_UART_RX_Pin;
 8000de4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000de8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dec:	2302      	movs	r3, #2
 8000dee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000dfe:	2308      	movs	r3, #8
 8000e00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e04:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4805      	ldr	r0, [pc, #20]	; (8000e20 <HAL_UART_MspInit+0xbc>)
 8000e0c:	f000 fac4 	bl	8001398 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000e10:	bf00      	nop
 8000e12:	37b8      	adds	r7, #184	; 0xb8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40008000 	.word	0x40008000
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	48001800 	.word	0x48001800

08000e24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a0d      	ldr	r2, [pc, #52]	; (8000e68 <HAL_TIM_Base_MspInit+0x44>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d113      	bne.n	8000e5e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000e36:	4b0d      	ldr	r3, [pc, #52]	; (8000e6c <HAL_TIM_Base_MspInit+0x48>)
 8000e38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e3a:	4a0c      	ldr	r2, [pc, #48]	; (8000e6c <HAL_TIM_Base_MspInit+0x48>)
 8000e3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e40:	6613      	str	r3, [r2, #96]	; 0x60
 8000e42:	4b0a      	ldr	r3, [pc, #40]	; (8000e6c <HAL_TIM_Base_MspInit+0x48>)
 8000e44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	2100      	movs	r1, #0
 8000e52:	201a      	movs	r0, #26
 8000e54:	f000 fa69 	bl	800132a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000e58:	201a      	movs	r0, #26
 8000e5a:	f000 fa82 	bl	8001362 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000e5e:	bf00      	nop
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40014800 	.word	0x40014800
 8000e6c:	40021000 	.word	0x40021000

08000e70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e74:	e7fe      	b.n	8000e74 <NMI_Handler+0x4>

08000e76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e7a:	e7fe      	b.n	8000e7a <HardFault_Handler+0x4>

08000e7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e80:	e7fe      	b.n	8000e80 <MemManage_Handler+0x4>

08000e82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e86:	e7fe      	b.n	8000e86 <BusFault_Handler+0x4>

08000e88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <UsageFault_Handler+0x4>

08000e8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr

08000eaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ebc:	f000 f93a 	bl	8001134 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000ec8:	4802      	ldr	r0, [pc, #8]	; (8000ed4 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000eca:	f002 f983 	bl	80031d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	2000011c 	.word	0x2000011c

08000ed8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]
 8000ee8:	e00a      	b.n	8000f00 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000eea:	f3af 8000 	nop.w
 8000eee:	4601      	mov	r1, r0
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	1c5a      	adds	r2, r3, #1
 8000ef4:	60ba      	str	r2, [r7, #8]
 8000ef6:	b2ca      	uxtb	r2, r1
 8000ef8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	3301      	adds	r3, #1
 8000efe:	617b      	str	r3, [r7, #20]
 8000f00:	697a      	ldr	r2, [r7, #20]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	dbf0      	blt.n	8000eea <_read+0x12>
  }

  return len;
 8000f08:	687b      	ldr	r3, [r7, #4]
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3718      	adds	r7, #24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
	...

08000f14 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
//
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }
	HAL_UART_Transmit(&hlpuart1, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	b29a      	uxth	r2, r3
 8000f24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f28:	68b9      	ldr	r1, [r7, #8]
 8000f2a:	4804      	ldr	r0, [pc, #16]	; (8000f3c <_write+0x28>)
 8000f2c:	f002 fba2 	bl	8003674 <HAL_UART_Transmit>
  return len;
 8000f30:	687b      	ldr	r3, [r7, #4]
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	2000008c 	.word	0x2000008c

08000f40 <_close>:

int _close(int file)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f68:	605a      	str	r2, [r3, #4]
  return 0;
 8000f6a:	2300      	movs	r3, #0
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <_isatty>:

int _isatty(int file)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f80:	2301      	movs	r3, #1
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr

08000f8e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	b085      	sub	sp, #20
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	60f8      	str	r0, [r7, #12]
 8000f96:	60b9      	str	r1, [r7, #8]
 8000f98:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f9a:	2300      	movs	r3, #0
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3714      	adds	r7, #20
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fb0:	4a14      	ldr	r2, [pc, #80]	; (8001004 <_sbrk+0x5c>)
 8000fb2:	4b15      	ldr	r3, [pc, #84]	; (8001008 <_sbrk+0x60>)
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fbc:	4b13      	ldr	r3, [pc, #76]	; (800100c <_sbrk+0x64>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d102      	bne.n	8000fca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fc4:	4b11      	ldr	r3, [pc, #68]	; (800100c <_sbrk+0x64>)
 8000fc6:	4a12      	ldr	r2, [pc, #72]	; (8001010 <_sbrk+0x68>)
 8000fc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fca:	4b10      	ldr	r3, [pc, #64]	; (800100c <_sbrk+0x64>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d207      	bcs.n	8000fe8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fd8:	f003 fa6c 	bl	80044b4 <__errno>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	220c      	movs	r2, #12
 8000fe0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fe2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fe6:	e009      	b.n	8000ffc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fe8:	4b08      	ldr	r3, [pc, #32]	; (800100c <_sbrk+0x64>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fee:	4b07      	ldr	r3, [pc, #28]	; (800100c <_sbrk+0x64>)
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	4a05      	ldr	r2, [pc, #20]	; (800100c <_sbrk+0x64>)
 8000ff8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3718      	adds	r7, #24
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	200a0000 	.word	0x200a0000
 8001008:	00000400 	.word	0x00000400
 800100c:	2000018c 	.word	0x2000018c
 8001010:	200001a8 	.word	0x200001a8

08001014 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001018:	4b06      	ldr	r3, [pc, #24]	; (8001034 <SystemInit+0x20>)
 800101a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800101e:	4a05      	ldr	r2, [pc, #20]	; (8001034 <SystemInit+0x20>)
 8001020:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001024:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001038:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001070 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800103c:	f7ff ffea 	bl	8001014 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001040:	480c      	ldr	r0, [pc, #48]	; (8001074 <LoopForever+0x6>)
  ldr r1, =_edata
 8001042:	490d      	ldr	r1, [pc, #52]	; (8001078 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001044:	4a0d      	ldr	r2, [pc, #52]	; (800107c <LoopForever+0xe>)
  movs r3, #0
 8001046:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001048:	e002      	b.n	8001050 <LoopCopyDataInit>

0800104a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800104a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800104c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800104e:	3304      	adds	r3, #4

08001050 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001050:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001052:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001054:	d3f9      	bcc.n	800104a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001056:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001058:	4c0a      	ldr	r4, [pc, #40]	; (8001084 <LoopForever+0x16>)
  movs r3, #0
 800105a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800105c:	e001      	b.n	8001062 <LoopFillZerobss>

0800105e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800105e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001060:	3204      	adds	r2, #4

08001062 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001062:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001064:	d3fb      	bcc.n	800105e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001066:	f003 fa2b 	bl	80044c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800106a:	f7ff fd05 	bl	8000a78 <main>

0800106e <LoopForever>:

LoopForever:
    b LoopForever
 800106e:	e7fe      	b.n	800106e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001070:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001074:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001078:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800107c:	08005a48 	.word	0x08005a48
  ldr r2, =_sbss
 8001080:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001084:	200001a4 	.word	0x200001a4

08001088 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001088:	e7fe      	b.n	8001088 <ADC1_IRQHandler>

0800108a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b082      	sub	sp, #8
 800108e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001090:	2300      	movs	r3, #0
 8001092:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001094:	2003      	movs	r0, #3
 8001096:	f000 f93d 	bl	8001314 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800109a:	2000      	movs	r0, #0
 800109c:	f000 f80e 	bl	80010bc <HAL_InitTick>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d002      	beq.n	80010ac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	71fb      	strb	r3, [r7, #7]
 80010aa:	e001      	b.n	80010b0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010ac:	f7ff fe36 	bl	8000d1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010b0:	79fb      	ldrb	r3, [r7, #7]
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
	...

080010bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010c4:	2300      	movs	r3, #0
 80010c6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80010c8:	4b17      	ldr	r3, [pc, #92]	; (8001128 <HAL_InitTick+0x6c>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d023      	beq.n	8001118 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80010d0:	4b16      	ldr	r3, [pc, #88]	; (800112c <HAL_InitTick+0x70>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	4b14      	ldr	r3, [pc, #80]	; (8001128 <HAL_InitTick+0x6c>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	4619      	mov	r1, r3
 80010da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010de:	fbb3 f3f1 	udiv	r3, r3, r1
 80010e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010e6:	4618      	mov	r0, r3
 80010e8:	f000 f949 	bl	800137e <HAL_SYSTICK_Config>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d10f      	bne.n	8001112 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2b0f      	cmp	r3, #15
 80010f6:	d809      	bhi.n	800110c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010f8:	2200      	movs	r2, #0
 80010fa:	6879      	ldr	r1, [r7, #4]
 80010fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001100:	f000 f913 	bl	800132a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001104:	4a0a      	ldr	r2, [pc, #40]	; (8001130 <HAL_InitTick+0x74>)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6013      	str	r3, [r2, #0]
 800110a:	e007      	b.n	800111c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	73fb      	strb	r3, [r7, #15]
 8001110:	e004      	b.n	800111c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	73fb      	strb	r3, [r7, #15]
 8001116:	e001      	b.n	800111c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800111c:	7bfb      	ldrb	r3, [r7, #15]
}
 800111e:	4618      	mov	r0, r3
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20000008 	.word	0x20000008
 800112c:	20000000 	.word	0x20000000
 8001130:	20000004 	.word	0x20000004

08001134 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001138:	4b06      	ldr	r3, [pc, #24]	; (8001154 <HAL_IncTick+0x20>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	461a      	mov	r2, r3
 800113e:	4b06      	ldr	r3, [pc, #24]	; (8001158 <HAL_IncTick+0x24>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4413      	add	r3, r2
 8001144:	4a04      	ldr	r2, [pc, #16]	; (8001158 <HAL_IncTick+0x24>)
 8001146:	6013      	str	r3, [r2, #0]
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	20000008 	.word	0x20000008
 8001158:	20000190 	.word	0x20000190

0800115c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  return uwTick;
 8001160:	4b03      	ldr	r3, [pc, #12]	; (8001170 <HAL_GetTick+0x14>)
 8001162:	681b      	ldr	r3, [r3, #0]
}
 8001164:	4618      	mov	r0, r3
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	20000190 	.word	0x20000190

08001174 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001174:	b480      	push	{r7}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001184:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800118a:	68ba      	ldr	r2, [r7, #8]
 800118c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001190:	4013      	ands	r3, r2
 8001192:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800119c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011a6:	4a04      	ldr	r2, [pc, #16]	; (80011b8 <__NVIC_SetPriorityGrouping+0x44>)
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	60d3      	str	r3, [r2, #12]
}
 80011ac:	bf00      	nop
 80011ae:	3714      	adds	r7, #20
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c0:	4b04      	ldr	r3, [pc, #16]	; (80011d4 <__NVIC_GetPriorityGrouping+0x18>)
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	0a1b      	lsrs	r3, r3, #8
 80011c6:	f003 0307 	and.w	r3, r3, #7
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	db0b      	blt.n	8001202 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	f003 021f 	and.w	r2, r3, #31
 80011f0:	4907      	ldr	r1, [pc, #28]	; (8001210 <__NVIC_EnableIRQ+0x38>)
 80011f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f6:	095b      	lsrs	r3, r3, #5
 80011f8:	2001      	movs	r0, #1
 80011fa:	fa00 f202 	lsl.w	r2, r0, r2
 80011fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001202:	bf00      	nop
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	e000e100 	.word	0xe000e100

08001214 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	6039      	str	r1, [r7, #0]
 800121e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001224:	2b00      	cmp	r3, #0
 8001226:	db0a      	blt.n	800123e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	b2da      	uxtb	r2, r3
 800122c:	490c      	ldr	r1, [pc, #48]	; (8001260 <__NVIC_SetPriority+0x4c>)
 800122e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001232:	0112      	lsls	r2, r2, #4
 8001234:	b2d2      	uxtb	r2, r2
 8001236:	440b      	add	r3, r1
 8001238:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800123c:	e00a      	b.n	8001254 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	b2da      	uxtb	r2, r3
 8001242:	4908      	ldr	r1, [pc, #32]	; (8001264 <__NVIC_SetPriority+0x50>)
 8001244:	79fb      	ldrb	r3, [r7, #7]
 8001246:	f003 030f 	and.w	r3, r3, #15
 800124a:	3b04      	subs	r3, #4
 800124c:	0112      	lsls	r2, r2, #4
 800124e:	b2d2      	uxtb	r2, r2
 8001250:	440b      	add	r3, r1
 8001252:	761a      	strb	r2, [r3, #24]
}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	e000e100 	.word	0xe000e100
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001268:	b480      	push	{r7}
 800126a:	b089      	sub	sp, #36	; 0x24
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f003 0307 	and.w	r3, r3, #7
 800127a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	f1c3 0307 	rsb	r3, r3, #7
 8001282:	2b04      	cmp	r3, #4
 8001284:	bf28      	it	cs
 8001286:	2304      	movcs	r3, #4
 8001288:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	3304      	adds	r3, #4
 800128e:	2b06      	cmp	r3, #6
 8001290:	d902      	bls.n	8001298 <NVIC_EncodePriority+0x30>
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	3b03      	subs	r3, #3
 8001296:	e000      	b.n	800129a <NVIC_EncodePriority+0x32>
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800129c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43da      	mvns	r2, r3
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	401a      	ands	r2, r3
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ba:	43d9      	mvns	r1, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c0:	4313      	orrs	r3, r2
         );
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3724      	adds	r7, #36	; 0x24
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
	...

080012d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3b01      	subs	r3, #1
 80012dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012e0:	d301      	bcc.n	80012e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012e2:	2301      	movs	r3, #1
 80012e4:	e00f      	b.n	8001306 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012e6:	4a0a      	ldr	r2, [pc, #40]	; (8001310 <SysTick_Config+0x40>)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3b01      	subs	r3, #1
 80012ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ee:	210f      	movs	r1, #15
 80012f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012f4:	f7ff ff8e 	bl	8001214 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012f8:	4b05      	ldr	r3, [pc, #20]	; (8001310 <SysTick_Config+0x40>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012fe:	4b04      	ldr	r3, [pc, #16]	; (8001310 <SysTick_Config+0x40>)
 8001300:	2207      	movs	r2, #7
 8001302:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	e000e010 	.word	0xe000e010

08001314 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f7ff ff29 	bl	8001174 <__NVIC_SetPriorityGrouping>
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b086      	sub	sp, #24
 800132e:	af00      	add	r7, sp, #0
 8001330:	4603      	mov	r3, r0
 8001332:	60b9      	str	r1, [r7, #8]
 8001334:	607a      	str	r2, [r7, #4]
 8001336:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001338:	2300      	movs	r3, #0
 800133a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800133c:	f7ff ff3e 	bl	80011bc <__NVIC_GetPriorityGrouping>
 8001340:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	68b9      	ldr	r1, [r7, #8]
 8001346:	6978      	ldr	r0, [r7, #20]
 8001348:	f7ff ff8e 	bl	8001268 <NVIC_EncodePriority>
 800134c:	4602      	mov	r2, r0
 800134e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001352:	4611      	mov	r1, r2
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff ff5d 	bl	8001214 <__NVIC_SetPriority>
}
 800135a:	bf00      	nop
 800135c:	3718      	adds	r7, #24
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b082      	sub	sp, #8
 8001366:	af00      	add	r7, sp, #0
 8001368:	4603      	mov	r3, r0
 800136a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800136c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff ff31 	bl	80011d8 <__NVIC_EnableIRQ>
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f7ff ffa2 	bl	80012d0 <SysTick_Config>
 800138c:	4603      	mov	r3, r0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
	...

08001398 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001398:	b480      	push	{r7}
 800139a:	b087      	sub	sp, #28
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013a6:	e166      	b.n	8001676 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	2101      	movs	r1, #1
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	fa01 f303 	lsl.w	r3, r1, r3
 80013b4:	4013      	ands	r3, r2
 80013b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	f000 8158 	beq.w	8001670 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 0303 	and.w	r3, r3, #3
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d005      	beq.n	80013d8 <HAL_GPIO_Init+0x40>
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f003 0303 	and.w	r3, r3, #3
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d130      	bne.n	800143a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	2203      	movs	r2, #3
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	43db      	mvns	r3, r3
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	4013      	ands	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	68da      	ldr	r2, [r3, #12]
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	4313      	orrs	r3, r2
 8001400:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800140e:	2201      	movs	r2, #1
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43db      	mvns	r3, r3
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	4013      	ands	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	091b      	lsrs	r3, r3, #4
 8001424:	f003 0201 	and.w	r2, r3, #1
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	4313      	orrs	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f003 0303 	and.w	r3, r3, #3
 8001442:	2b03      	cmp	r3, #3
 8001444:	d017      	beq.n	8001476 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	68db      	ldr	r3, [r3, #12]
 800144a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	2203      	movs	r2, #3
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43db      	mvns	r3, r3
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	4013      	ands	r3, r2
 800145c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	689a      	ldr	r2, [r3, #8]
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	4313      	orrs	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f003 0303 	and.w	r3, r3, #3
 800147e:	2b02      	cmp	r3, #2
 8001480:	d123      	bne.n	80014ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	08da      	lsrs	r2, r3, #3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	3208      	adds	r2, #8
 800148a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800148e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	220f      	movs	r2, #15
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43db      	mvns	r3, r3
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	4013      	ands	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	691a      	ldr	r2, [r3, #16]
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	f003 0307 	and.w	r3, r3, #7
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	08da      	lsrs	r2, r3, #3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	3208      	adds	r2, #8
 80014c4:	6939      	ldr	r1, [r7, #16]
 80014c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	2203      	movs	r2, #3
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	43db      	mvns	r3, r3
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	4013      	ands	r3, r2
 80014e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f003 0203 	and.w	r2, r3, #3
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001506:	2b00      	cmp	r3, #0
 8001508:	f000 80b2 	beq.w	8001670 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800150c:	4b61      	ldr	r3, [pc, #388]	; (8001694 <HAL_GPIO_Init+0x2fc>)
 800150e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001510:	4a60      	ldr	r2, [pc, #384]	; (8001694 <HAL_GPIO_Init+0x2fc>)
 8001512:	f043 0301 	orr.w	r3, r3, #1
 8001516:	6613      	str	r3, [r2, #96]	; 0x60
 8001518:	4b5e      	ldr	r3, [pc, #376]	; (8001694 <HAL_GPIO_Init+0x2fc>)
 800151a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800151c:	f003 0301 	and.w	r3, r3, #1
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001524:	4a5c      	ldr	r2, [pc, #368]	; (8001698 <HAL_GPIO_Init+0x300>)
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	089b      	lsrs	r3, r3, #2
 800152a:	3302      	adds	r3, #2
 800152c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001530:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	f003 0303 	and.w	r3, r3, #3
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	220f      	movs	r2, #15
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	43db      	mvns	r3, r3
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	4013      	ands	r3, r2
 8001546:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800154e:	d02b      	beq.n	80015a8 <HAL_GPIO_Init+0x210>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4a52      	ldr	r2, [pc, #328]	; (800169c <HAL_GPIO_Init+0x304>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d025      	beq.n	80015a4 <HAL_GPIO_Init+0x20c>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4a51      	ldr	r2, [pc, #324]	; (80016a0 <HAL_GPIO_Init+0x308>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d01f      	beq.n	80015a0 <HAL_GPIO_Init+0x208>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4a50      	ldr	r2, [pc, #320]	; (80016a4 <HAL_GPIO_Init+0x30c>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d019      	beq.n	800159c <HAL_GPIO_Init+0x204>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4a4f      	ldr	r2, [pc, #316]	; (80016a8 <HAL_GPIO_Init+0x310>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d013      	beq.n	8001598 <HAL_GPIO_Init+0x200>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4a4e      	ldr	r2, [pc, #312]	; (80016ac <HAL_GPIO_Init+0x314>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d00d      	beq.n	8001594 <HAL_GPIO_Init+0x1fc>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a4d      	ldr	r2, [pc, #308]	; (80016b0 <HAL_GPIO_Init+0x318>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d007      	beq.n	8001590 <HAL_GPIO_Init+0x1f8>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4a4c      	ldr	r2, [pc, #304]	; (80016b4 <HAL_GPIO_Init+0x31c>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d101      	bne.n	800158c <HAL_GPIO_Init+0x1f4>
 8001588:	2307      	movs	r3, #7
 800158a:	e00e      	b.n	80015aa <HAL_GPIO_Init+0x212>
 800158c:	2308      	movs	r3, #8
 800158e:	e00c      	b.n	80015aa <HAL_GPIO_Init+0x212>
 8001590:	2306      	movs	r3, #6
 8001592:	e00a      	b.n	80015aa <HAL_GPIO_Init+0x212>
 8001594:	2305      	movs	r3, #5
 8001596:	e008      	b.n	80015aa <HAL_GPIO_Init+0x212>
 8001598:	2304      	movs	r3, #4
 800159a:	e006      	b.n	80015aa <HAL_GPIO_Init+0x212>
 800159c:	2303      	movs	r3, #3
 800159e:	e004      	b.n	80015aa <HAL_GPIO_Init+0x212>
 80015a0:	2302      	movs	r3, #2
 80015a2:	e002      	b.n	80015aa <HAL_GPIO_Init+0x212>
 80015a4:	2301      	movs	r3, #1
 80015a6:	e000      	b.n	80015aa <HAL_GPIO_Init+0x212>
 80015a8:	2300      	movs	r3, #0
 80015aa:	697a      	ldr	r2, [r7, #20]
 80015ac:	f002 0203 	and.w	r2, r2, #3
 80015b0:	0092      	lsls	r2, r2, #2
 80015b2:	4093      	lsls	r3, r2
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015ba:	4937      	ldr	r1, [pc, #220]	; (8001698 <HAL_GPIO_Init+0x300>)
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	089b      	lsrs	r3, r3, #2
 80015c0:	3302      	adds	r3, #2
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015c8:	4b3b      	ldr	r3, [pc, #236]	; (80016b8 <HAL_GPIO_Init+0x320>)
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	43db      	mvns	r3, r3
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	4013      	ands	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d003      	beq.n	80015ec <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015ec:	4a32      	ldr	r2, [pc, #200]	; (80016b8 <HAL_GPIO_Init+0x320>)
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015f2:	4b31      	ldr	r3, [pc, #196]	; (80016b8 <HAL_GPIO_Init+0x320>)
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	43db      	mvns	r3, r3
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	4013      	ands	r3, r2
 8001600:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d003      	beq.n	8001616 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	4313      	orrs	r3, r2
 8001614:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001616:	4a28      	ldr	r2, [pc, #160]	; (80016b8 <HAL_GPIO_Init+0x320>)
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800161c:	4b26      	ldr	r3, [pc, #152]	; (80016b8 <HAL_GPIO_Init+0x320>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	43db      	mvns	r3, r3
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	4013      	ands	r3, r2
 800162a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d003      	beq.n	8001640 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	4313      	orrs	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001640:	4a1d      	ldr	r2, [pc, #116]	; (80016b8 <HAL_GPIO_Init+0x320>)
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001646:	4b1c      	ldr	r3, [pc, #112]	; (80016b8 <HAL_GPIO_Init+0x320>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	43db      	mvns	r3, r3
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	4013      	ands	r3, r2
 8001654:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d003      	beq.n	800166a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	4313      	orrs	r3, r2
 8001668:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800166a:	4a13      	ldr	r2, [pc, #76]	; (80016b8 <HAL_GPIO_Init+0x320>)
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	3301      	adds	r3, #1
 8001674:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	fa22 f303 	lsr.w	r3, r2, r3
 8001680:	2b00      	cmp	r3, #0
 8001682:	f47f ae91 	bne.w	80013a8 <HAL_GPIO_Init+0x10>
  }
}
 8001686:	bf00      	nop
 8001688:	bf00      	nop
 800168a:	371c      	adds	r7, #28
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	40021000 	.word	0x40021000
 8001698:	40010000 	.word	0x40010000
 800169c:	48000400 	.word	0x48000400
 80016a0:	48000800 	.word	0x48000800
 80016a4:	48000c00 	.word	0x48000c00
 80016a8:	48001000 	.word	0x48001000
 80016ac:	48001400 	.word	0x48001400
 80016b0:	48001800 	.word	0x48001800
 80016b4:	48001c00 	.word	0x48001c00
 80016b8:	40010400 	.word	0x40010400

080016bc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80016c0:	4b0d      	ldr	r3, [pc, #52]	; (80016f8 <HAL_PWREx_GetVoltageRange+0x3c>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016cc:	d102      	bne.n	80016d4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80016ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016d2:	e00b      	b.n	80016ec <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80016d4:	4b08      	ldr	r3, [pc, #32]	; (80016f8 <HAL_PWREx_GetVoltageRange+0x3c>)
 80016d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016e2:	d102      	bne.n	80016ea <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80016e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016e8:	e000      	b.n	80016ec <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80016ea:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	40007000 	.word	0x40007000

080016fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d141      	bne.n	800178e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800170a:	4b4b      	ldr	r3, [pc, #300]	; (8001838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001712:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001716:	d131      	bne.n	800177c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001718:	4b47      	ldr	r3, [pc, #284]	; (8001838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800171a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800171e:	4a46      	ldr	r2, [pc, #280]	; (8001838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001720:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001724:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001728:	4b43      	ldr	r3, [pc, #268]	; (8001838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001730:	4a41      	ldr	r2, [pc, #260]	; (8001838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001732:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001736:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001738:	4b40      	ldr	r3, [pc, #256]	; (800183c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2232      	movs	r2, #50	; 0x32
 800173e:	fb02 f303 	mul.w	r3, r2, r3
 8001742:	4a3f      	ldr	r2, [pc, #252]	; (8001840 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001744:	fba2 2303 	umull	r2, r3, r2, r3
 8001748:	0c9b      	lsrs	r3, r3, #18
 800174a:	3301      	adds	r3, #1
 800174c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800174e:	e002      	b.n	8001756 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	3b01      	subs	r3, #1
 8001754:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001756:	4b38      	ldr	r3, [pc, #224]	; (8001838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001758:	695b      	ldr	r3, [r3, #20]
 800175a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800175e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001762:	d102      	bne.n	800176a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d1f2      	bne.n	8001750 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800176a:	4b33      	ldr	r3, [pc, #204]	; (8001838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800176c:	695b      	ldr	r3, [r3, #20]
 800176e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001776:	d158      	bne.n	800182a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e057      	b.n	800182c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800177c:	4b2e      	ldr	r3, [pc, #184]	; (8001838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800177e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001782:	4a2d      	ldr	r2, [pc, #180]	; (8001838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001784:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001788:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800178c:	e04d      	b.n	800182a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001794:	d141      	bne.n	800181a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001796:	4b28      	ldr	r3, [pc, #160]	; (8001838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800179e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017a2:	d131      	bne.n	8001808 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017a4:	4b24      	ldr	r3, [pc, #144]	; (8001838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017aa:	4a23      	ldr	r2, [pc, #140]	; (8001838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017b4:	4b20      	ldr	r3, [pc, #128]	; (8001838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017bc:	4a1e      	ldr	r2, [pc, #120]	; (8001838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017c2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80017c4:	4b1d      	ldr	r3, [pc, #116]	; (800183c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2232      	movs	r2, #50	; 0x32
 80017ca:	fb02 f303 	mul.w	r3, r2, r3
 80017ce:	4a1c      	ldr	r2, [pc, #112]	; (8001840 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80017d0:	fba2 2303 	umull	r2, r3, r2, r3
 80017d4:	0c9b      	lsrs	r3, r3, #18
 80017d6:	3301      	adds	r3, #1
 80017d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017da:	e002      	b.n	80017e2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	3b01      	subs	r3, #1
 80017e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017e2:	4b15      	ldr	r3, [pc, #84]	; (8001838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017ee:	d102      	bne.n	80017f6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1f2      	bne.n	80017dc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017f6:	4b10      	ldr	r3, [pc, #64]	; (8001838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017f8:	695b      	ldr	r3, [r3, #20]
 80017fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001802:	d112      	bne.n	800182a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e011      	b.n	800182c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001808:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800180a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800180e:	4a0a      	ldr	r2, [pc, #40]	; (8001838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001810:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001814:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001818:	e007      	b.n	800182a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800181a:	4b07      	ldr	r3, [pc, #28]	; (8001838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001822:	4a05      	ldr	r2, [pc, #20]	; (8001838 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001824:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001828:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800182a:	2300      	movs	r3, #0
}
 800182c:	4618      	mov	r0, r3
 800182e:	3714      	adds	r7, #20
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	40007000 	.word	0x40007000
 800183c:	20000000 	.word	0x20000000
 8001840:	431bde83 	.word	0x431bde83

08001844 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001848:	4b05      	ldr	r3, [pc, #20]	; (8001860 <HAL_PWREx_EnableVddIO2+0x1c>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	4a04      	ldr	r2, [pc, #16]	; (8001860 <HAL_PWREx_EnableVddIO2+0x1c>)
 800184e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001852:	6053      	str	r3, [r2, #4]
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	40007000 	.word	0x40007000

08001864 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b088      	sub	sp, #32
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d102      	bne.n	8001878 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	f000 bc08 	b.w	8002088 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001878:	4b96      	ldr	r3, [pc, #600]	; (8001ad4 <HAL_RCC_OscConfig+0x270>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f003 030c 	and.w	r3, r3, #12
 8001880:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001882:	4b94      	ldr	r3, [pc, #592]	; (8001ad4 <HAL_RCC_OscConfig+0x270>)
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	f003 0303 	and.w	r3, r3, #3
 800188a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0310 	and.w	r3, r3, #16
 8001894:	2b00      	cmp	r3, #0
 8001896:	f000 80e4 	beq.w	8001a62 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d007      	beq.n	80018b0 <HAL_RCC_OscConfig+0x4c>
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	2b0c      	cmp	r3, #12
 80018a4:	f040 808b 	bne.w	80019be <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	f040 8087 	bne.w	80019be <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018b0:	4b88      	ldr	r3, [pc, #544]	; (8001ad4 <HAL_RCC_OscConfig+0x270>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d005      	beq.n	80018c8 <HAL_RCC_OscConfig+0x64>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d101      	bne.n	80018c8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e3df      	b.n	8002088 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a1a      	ldr	r2, [r3, #32]
 80018cc:	4b81      	ldr	r3, [pc, #516]	; (8001ad4 <HAL_RCC_OscConfig+0x270>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0308 	and.w	r3, r3, #8
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d004      	beq.n	80018e2 <HAL_RCC_OscConfig+0x7e>
 80018d8:	4b7e      	ldr	r3, [pc, #504]	; (8001ad4 <HAL_RCC_OscConfig+0x270>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018e0:	e005      	b.n	80018ee <HAL_RCC_OscConfig+0x8a>
 80018e2:	4b7c      	ldr	r3, [pc, #496]	; (8001ad4 <HAL_RCC_OscConfig+0x270>)
 80018e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018e8:	091b      	lsrs	r3, r3, #4
 80018ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d223      	bcs.n	800193a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a1b      	ldr	r3, [r3, #32]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f000 fdcc 	bl	8002494 <RCC_SetFlashLatencyFromMSIRange>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e3c0      	b.n	8002088 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001906:	4b73      	ldr	r3, [pc, #460]	; (8001ad4 <HAL_RCC_OscConfig+0x270>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a72      	ldr	r2, [pc, #456]	; (8001ad4 <HAL_RCC_OscConfig+0x270>)
 800190c:	f043 0308 	orr.w	r3, r3, #8
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	4b70      	ldr	r3, [pc, #448]	; (8001ad4 <HAL_RCC_OscConfig+0x270>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a1b      	ldr	r3, [r3, #32]
 800191e:	496d      	ldr	r1, [pc, #436]	; (8001ad4 <HAL_RCC_OscConfig+0x270>)
 8001920:	4313      	orrs	r3, r2
 8001922:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001924:	4b6b      	ldr	r3, [pc, #428]	; (8001ad4 <HAL_RCC_OscConfig+0x270>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	69db      	ldr	r3, [r3, #28]
 8001930:	021b      	lsls	r3, r3, #8
 8001932:	4968      	ldr	r1, [pc, #416]	; (8001ad4 <HAL_RCC_OscConfig+0x270>)
 8001934:	4313      	orrs	r3, r2
 8001936:	604b      	str	r3, [r1, #4]
 8001938:	e025      	b.n	8001986 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800193a:	4b66      	ldr	r3, [pc, #408]	; (8001ad4 <HAL_RCC_OscConfig+0x270>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a65      	ldr	r2, [pc, #404]	; (8001ad4 <HAL_RCC_OscConfig+0x270>)
 8001940:	f043 0308 	orr.w	r3, r3, #8
 8001944:	6013      	str	r3, [r2, #0]
 8001946:	4b63      	ldr	r3, [pc, #396]	; (8001ad4 <HAL_RCC_OscConfig+0x270>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a1b      	ldr	r3, [r3, #32]
 8001952:	4960      	ldr	r1, [pc, #384]	; (8001ad4 <HAL_RCC_OscConfig+0x270>)
 8001954:	4313      	orrs	r3, r2
 8001956:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001958:	4b5e      	ldr	r3, [pc, #376]	; (8001ad4 <HAL_RCC_OscConfig+0x270>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	69db      	ldr	r3, [r3, #28]
 8001964:	021b      	lsls	r3, r3, #8
 8001966:	495b      	ldr	r1, [pc, #364]	; (8001ad4 <HAL_RCC_OscConfig+0x270>)
 8001968:	4313      	orrs	r3, r2
 800196a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d109      	bne.n	8001986 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a1b      	ldr	r3, [r3, #32]
 8001976:	4618      	mov	r0, r3
 8001978:	f000 fd8c 	bl	8002494 <RCC_SetFlashLatencyFromMSIRange>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e380      	b.n	8002088 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001986:	f000 fcc1 	bl	800230c <HAL_RCC_GetSysClockFreq>
 800198a:	4602      	mov	r2, r0
 800198c:	4b51      	ldr	r3, [pc, #324]	; (8001ad4 <HAL_RCC_OscConfig+0x270>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	091b      	lsrs	r3, r3, #4
 8001992:	f003 030f 	and.w	r3, r3, #15
 8001996:	4950      	ldr	r1, [pc, #320]	; (8001ad8 <HAL_RCC_OscConfig+0x274>)
 8001998:	5ccb      	ldrb	r3, [r1, r3]
 800199a:	f003 031f 	and.w	r3, r3, #31
 800199e:	fa22 f303 	lsr.w	r3, r2, r3
 80019a2:	4a4e      	ldr	r2, [pc, #312]	; (8001adc <HAL_RCC_OscConfig+0x278>)
 80019a4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80019a6:	4b4e      	ldr	r3, [pc, #312]	; (8001ae0 <HAL_RCC_OscConfig+0x27c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff fb86 	bl	80010bc <HAL_InitTick>
 80019b0:	4603      	mov	r3, r0
 80019b2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80019b4:	7bfb      	ldrb	r3, [r7, #15]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d052      	beq.n	8001a60 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80019ba:	7bfb      	ldrb	r3, [r7, #15]
 80019bc:	e364      	b.n	8002088 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d032      	beq.n	8001a2c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80019c6:	4b43      	ldr	r3, [pc, #268]	; (8001ad4 <HAL_RCC_OscConfig+0x270>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a42      	ldr	r2, [pc, #264]	; (8001ad4 <HAL_RCC_OscConfig+0x270>)
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019d2:	f7ff fbc3 	bl	800115c <HAL_GetTick>
 80019d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019d8:	e008      	b.n	80019ec <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019da:	f7ff fbbf 	bl	800115c <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e34d      	b.n	8002088 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019ec:	4b39      	ldr	r3, [pc, #228]	; (8001ad4 <HAL_RCC_OscConfig+0x270>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d0f0      	beq.n	80019da <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019f8:	4b36      	ldr	r3, [pc, #216]	; (8001ad4 <HAL_RCC_OscConfig+0x270>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a35      	ldr	r2, [pc, #212]	; (8001ad4 <HAL_RCC_OscConfig+0x270>)
 80019fe:	f043 0308 	orr.w	r3, r3, #8
 8001a02:	6013      	str	r3, [r2, #0]
 8001a04:	4b33      	ldr	r3, [pc, #204]	; (8001ad4 <HAL_RCC_OscConfig+0x270>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a1b      	ldr	r3, [r3, #32]
 8001a10:	4930      	ldr	r1, [pc, #192]	; (8001ad4 <HAL_RCC_OscConfig+0x270>)
 8001a12:	4313      	orrs	r3, r2
 8001a14:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a16:	4b2f      	ldr	r3, [pc, #188]	; (8001ad4 <HAL_RCC_OscConfig+0x270>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	021b      	lsls	r3, r3, #8
 8001a24:	492b      	ldr	r1, [pc, #172]	; (8001ad4 <HAL_RCC_OscConfig+0x270>)
 8001a26:	4313      	orrs	r3, r2
 8001a28:	604b      	str	r3, [r1, #4]
 8001a2a:	e01a      	b.n	8001a62 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a2c:	4b29      	ldr	r3, [pc, #164]	; (8001ad4 <HAL_RCC_OscConfig+0x270>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a28      	ldr	r2, [pc, #160]	; (8001ad4 <HAL_RCC_OscConfig+0x270>)
 8001a32:	f023 0301 	bic.w	r3, r3, #1
 8001a36:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a38:	f7ff fb90 	bl	800115c <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a40:	f7ff fb8c 	bl	800115c <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e31a      	b.n	8002088 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a52:	4b20      	ldr	r3, [pc, #128]	; (8001ad4 <HAL_RCC_OscConfig+0x270>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1f0      	bne.n	8001a40 <HAL_RCC_OscConfig+0x1dc>
 8001a5e:	e000      	b.n	8001a62 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a60:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d073      	beq.n	8001b56 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	2b08      	cmp	r3, #8
 8001a72:	d005      	beq.n	8001a80 <HAL_RCC_OscConfig+0x21c>
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	2b0c      	cmp	r3, #12
 8001a78:	d10e      	bne.n	8001a98 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	2b03      	cmp	r3, #3
 8001a7e:	d10b      	bne.n	8001a98 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a80:	4b14      	ldr	r3, [pc, #80]	; (8001ad4 <HAL_RCC_OscConfig+0x270>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d063      	beq.n	8001b54 <HAL_RCC_OscConfig+0x2f0>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d15f      	bne.n	8001b54 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e2f7      	b.n	8002088 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aa0:	d106      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x24c>
 8001aa2:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <HAL_RCC_OscConfig+0x270>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a0b      	ldr	r2, [pc, #44]	; (8001ad4 <HAL_RCC_OscConfig+0x270>)
 8001aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aac:	6013      	str	r3, [r2, #0]
 8001aae:	e025      	b.n	8001afc <HAL_RCC_OscConfig+0x298>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ab8:	d114      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x280>
 8001aba:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <HAL_RCC_OscConfig+0x270>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a05      	ldr	r2, [pc, #20]	; (8001ad4 <HAL_RCC_OscConfig+0x270>)
 8001ac0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ac4:	6013      	str	r3, [r2, #0]
 8001ac6:	4b03      	ldr	r3, [pc, #12]	; (8001ad4 <HAL_RCC_OscConfig+0x270>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a02      	ldr	r2, [pc, #8]	; (8001ad4 <HAL_RCC_OscConfig+0x270>)
 8001acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad0:	6013      	str	r3, [r2, #0]
 8001ad2:	e013      	b.n	8001afc <HAL_RCC_OscConfig+0x298>
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	08005930 	.word	0x08005930
 8001adc:	20000000 	.word	0x20000000
 8001ae0:	20000004 	.word	0x20000004
 8001ae4:	4ba0      	ldr	r3, [pc, #640]	; (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a9f      	ldr	r2, [pc, #636]	; (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001aea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aee:	6013      	str	r3, [r2, #0]
 8001af0:	4b9d      	ldr	r3, [pc, #628]	; (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a9c      	ldr	r2, [pc, #624]	; (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001af6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001afa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d013      	beq.n	8001b2c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b04:	f7ff fb2a 	bl	800115c <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b0c:	f7ff fb26 	bl	800115c <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b64      	cmp	r3, #100	; 0x64
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e2b4      	b.n	8002088 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b1e:	4b92      	ldr	r3, [pc, #584]	; (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d0f0      	beq.n	8001b0c <HAL_RCC_OscConfig+0x2a8>
 8001b2a:	e014      	b.n	8001b56 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b2c:	f7ff fb16 	bl	800115c <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b34:	f7ff fb12 	bl	800115c <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b64      	cmp	r3, #100	; 0x64
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e2a0      	b.n	8002088 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b46:	4b88      	ldr	r3, [pc, #544]	; (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1f0      	bne.n	8001b34 <HAL_RCC_OscConfig+0x2d0>
 8001b52:	e000      	b.n	8001b56 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d060      	beq.n	8001c24 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	2b04      	cmp	r3, #4
 8001b66:	d005      	beq.n	8001b74 <HAL_RCC_OscConfig+0x310>
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	2b0c      	cmp	r3, #12
 8001b6c:	d119      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d116      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b74:	4b7c      	ldr	r3, [pc, #496]	; (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d005      	beq.n	8001b8c <HAL_RCC_OscConfig+0x328>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d101      	bne.n	8001b8c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e27d      	b.n	8002088 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b8c:	4b76      	ldr	r3, [pc, #472]	; (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	691b      	ldr	r3, [r3, #16]
 8001b98:	061b      	lsls	r3, r3, #24
 8001b9a:	4973      	ldr	r1, [pc, #460]	; (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ba0:	e040      	b.n	8001c24 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d023      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001baa:	4b6f      	ldr	r3, [pc, #444]	; (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a6e      	ldr	r2, [pc, #440]	; (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb6:	f7ff fad1 	bl	800115c <HAL_GetTick>
 8001bba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bbc:	e008      	b.n	8001bd0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bbe:	f7ff facd 	bl	800115c <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e25b      	b.n	8002088 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bd0:	4b65      	ldr	r3, [pc, #404]	; (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d0f0      	beq.n	8001bbe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bdc:	4b62      	ldr	r3, [pc, #392]	; (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	691b      	ldr	r3, [r3, #16]
 8001be8:	061b      	lsls	r3, r3, #24
 8001bea:	495f      	ldr	r1, [pc, #380]	; (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001bec:	4313      	orrs	r3, r2
 8001bee:	604b      	str	r3, [r1, #4]
 8001bf0:	e018      	b.n	8001c24 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bf2:	4b5d      	ldr	r3, [pc, #372]	; (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a5c      	ldr	r2, [pc, #368]	; (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001bf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bfe:	f7ff faad 	bl	800115c <HAL_GetTick>
 8001c02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c04:	e008      	b.n	8001c18 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c06:	f7ff faa9 	bl	800115c <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e237      	b.n	8002088 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c18:	4b53      	ldr	r3, [pc, #332]	; (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d1f0      	bne.n	8001c06 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0308 	and.w	r3, r3, #8
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d03c      	beq.n	8001caa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	695b      	ldr	r3, [r3, #20]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d01c      	beq.n	8001c72 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c38:	4b4b      	ldr	r3, [pc, #300]	; (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001c3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c3e:	4a4a      	ldr	r2, [pc, #296]	; (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001c40:	f043 0301 	orr.w	r3, r3, #1
 8001c44:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c48:	f7ff fa88 	bl	800115c <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c50:	f7ff fa84 	bl	800115c <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e212      	b.n	8002088 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c62:	4b41      	ldr	r3, [pc, #260]	; (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001c64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d0ef      	beq.n	8001c50 <HAL_RCC_OscConfig+0x3ec>
 8001c70:	e01b      	b.n	8001caa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c72:	4b3d      	ldr	r3, [pc, #244]	; (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001c74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c78:	4a3b      	ldr	r2, [pc, #236]	; (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001c7a:	f023 0301 	bic.w	r3, r3, #1
 8001c7e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c82:	f7ff fa6b 	bl	800115c <HAL_GetTick>
 8001c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c88:	e008      	b.n	8001c9c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c8a:	f7ff fa67 	bl	800115c <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e1f5      	b.n	8002088 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c9c:	4b32      	ldr	r3, [pc, #200]	; (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001c9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1ef      	bne.n	8001c8a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0304 	and.w	r3, r3, #4
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 80a6 	beq.w	8001e04 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001cbc:	4b2a      	ldr	r3, [pc, #168]	; (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d10d      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cc8:	4b27      	ldr	r3, [pc, #156]	; (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ccc:	4a26      	ldr	r2, [pc, #152]	; (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001cce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cd2:	6593      	str	r3, [r2, #88]	; 0x58
 8001cd4:	4b24      	ldr	r3, [pc, #144]	; (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cdc:	60bb      	str	r3, [r7, #8]
 8001cde:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ce4:	4b21      	ldr	r3, [pc, #132]	; (8001d6c <HAL_RCC_OscConfig+0x508>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d118      	bne.n	8001d22 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cf0:	4b1e      	ldr	r3, [pc, #120]	; (8001d6c <HAL_RCC_OscConfig+0x508>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a1d      	ldr	r2, [pc, #116]	; (8001d6c <HAL_RCC_OscConfig+0x508>)
 8001cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cfa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cfc:	f7ff fa2e 	bl	800115c <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d04:	f7ff fa2a 	bl	800115c <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e1b8      	b.n	8002088 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d16:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <HAL_RCC_OscConfig+0x508>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d0f0      	beq.n	8001d04 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d108      	bne.n	8001d3c <HAL_RCC_OscConfig+0x4d8>
 8001d2a:	4b0f      	ldr	r3, [pc, #60]	; (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d30:	4a0d      	ldr	r2, [pc, #52]	; (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001d32:	f043 0301 	orr.w	r3, r3, #1
 8001d36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d3a:	e029      	b.n	8001d90 <HAL_RCC_OscConfig+0x52c>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	2b05      	cmp	r3, #5
 8001d42:	d115      	bne.n	8001d70 <HAL_RCC_OscConfig+0x50c>
 8001d44:	4b08      	ldr	r3, [pc, #32]	; (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d4a:	4a07      	ldr	r2, [pc, #28]	; (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001d4c:	f043 0304 	orr.w	r3, r3, #4
 8001d50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d54:	4b04      	ldr	r3, [pc, #16]	; (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d5a:	4a03      	ldr	r2, [pc, #12]	; (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001d5c:	f043 0301 	orr.w	r3, r3, #1
 8001d60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d64:	e014      	b.n	8001d90 <HAL_RCC_OscConfig+0x52c>
 8001d66:	bf00      	nop
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	40007000 	.word	0x40007000
 8001d70:	4b9d      	ldr	r3, [pc, #628]	; (8001fe8 <HAL_RCC_OscConfig+0x784>)
 8001d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d76:	4a9c      	ldr	r2, [pc, #624]	; (8001fe8 <HAL_RCC_OscConfig+0x784>)
 8001d78:	f023 0301 	bic.w	r3, r3, #1
 8001d7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d80:	4b99      	ldr	r3, [pc, #612]	; (8001fe8 <HAL_RCC_OscConfig+0x784>)
 8001d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d86:	4a98      	ldr	r2, [pc, #608]	; (8001fe8 <HAL_RCC_OscConfig+0x784>)
 8001d88:	f023 0304 	bic.w	r3, r3, #4
 8001d8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d016      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d98:	f7ff f9e0 	bl	800115c <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d9e:	e00a      	b.n	8001db6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001da0:	f7ff f9dc 	bl	800115c <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e168      	b.n	8002088 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001db6:	4b8c      	ldr	r3, [pc, #560]	; (8001fe8 <HAL_RCC_OscConfig+0x784>)
 8001db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d0ed      	beq.n	8001da0 <HAL_RCC_OscConfig+0x53c>
 8001dc4:	e015      	b.n	8001df2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc6:	f7ff f9c9 	bl	800115c <HAL_GetTick>
 8001dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001dcc:	e00a      	b.n	8001de4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dce:	f7ff f9c5 	bl	800115c <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e151      	b.n	8002088 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001de4:	4b80      	ldr	r3, [pc, #512]	; (8001fe8 <HAL_RCC_OscConfig+0x784>)
 8001de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1ed      	bne.n	8001dce <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001df2:	7ffb      	ldrb	r3, [r7, #31]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d105      	bne.n	8001e04 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001df8:	4b7b      	ldr	r3, [pc, #492]	; (8001fe8 <HAL_RCC_OscConfig+0x784>)
 8001dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dfc:	4a7a      	ldr	r2, [pc, #488]	; (8001fe8 <HAL_RCC_OscConfig+0x784>)
 8001dfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e02:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0320 	and.w	r3, r3, #32
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d03c      	beq.n	8001e8a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d01c      	beq.n	8001e52 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e18:	4b73      	ldr	r3, [pc, #460]	; (8001fe8 <HAL_RCC_OscConfig+0x784>)
 8001e1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e1e:	4a72      	ldr	r2, [pc, #456]	; (8001fe8 <HAL_RCC_OscConfig+0x784>)
 8001e20:	f043 0301 	orr.w	r3, r3, #1
 8001e24:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e28:	f7ff f998 	bl	800115c <HAL_GetTick>
 8001e2c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e2e:	e008      	b.n	8001e42 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e30:	f7ff f994 	bl	800115c <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e122      	b.n	8002088 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e42:	4b69      	ldr	r3, [pc, #420]	; (8001fe8 <HAL_RCC_OscConfig+0x784>)
 8001e44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e48:	f003 0302 	and.w	r3, r3, #2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d0ef      	beq.n	8001e30 <HAL_RCC_OscConfig+0x5cc>
 8001e50:	e01b      	b.n	8001e8a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e52:	4b65      	ldr	r3, [pc, #404]	; (8001fe8 <HAL_RCC_OscConfig+0x784>)
 8001e54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e58:	4a63      	ldr	r2, [pc, #396]	; (8001fe8 <HAL_RCC_OscConfig+0x784>)
 8001e5a:	f023 0301 	bic.w	r3, r3, #1
 8001e5e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e62:	f7ff f97b 	bl	800115c <HAL_GetTick>
 8001e66:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e68:	e008      	b.n	8001e7c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e6a:	f7ff f977 	bl	800115c <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e105      	b.n	8002088 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e7c:	4b5a      	ldr	r3, [pc, #360]	; (8001fe8 <HAL_RCC_OscConfig+0x784>)
 8001e7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1ef      	bne.n	8001e6a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f000 80f9 	beq.w	8002086 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	f040 80cf 	bne.w	800203c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e9e:	4b52      	ldr	r3, [pc, #328]	; (8001fe8 <HAL_RCC_OscConfig+0x784>)
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	f003 0203 	and.w	r2, r3, #3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d12c      	bne.n	8001f0c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebc:	3b01      	subs	r3, #1
 8001ebe:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d123      	bne.n	8001f0c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ece:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d11b      	bne.n	8001f0c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ede:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d113      	bne.n	8001f0c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eee:	085b      	lsrs	r3, r3, #1
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d109      	bne.n	8001f0c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f02:	085b      	lsrs	r3, r3, #1
 8001f04:	3b01      	subs	r3, #1
 8001f06:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d071      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	2b0c      	cmp	r3, #12
 8001f10:	d068      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001f12:	4b35      	ldr	r3, [pc, #212]	; (8001fe8 <HAL_RCC_OscConfig+0x784>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d105      	bne.n	8001f2a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001f1e:	4b32      	ldr	r3, [pc, #200]	; (8001fe8 <HAL_RCC_OscConfig+0x784>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e0ac      	b.n	8002088 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001f2e:	4b2e      	ldr	r3, [pc, #184]	; (8001fe8 <HAL_RCC_OscConfig+0x784>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a2d      	ldr	r2, [pc, #180]	; (8001fe8 <HAL_RCC_OscConfig+0x784>)
 8001f34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f38:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f3a:	f7ff f90f 	bl	800115c <HAL_GetTick>
 8001f3e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f40:	e008      	b.n	8001f54 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f42:	f7ff f90b 	bl	800115c <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e099      	b.n	8002088 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f54:	4b24      	ldr	r3, [pc, #144]	; (8001fe8 <HAL_RCC_OscConfig+0x784>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d1f0      	bne.n	8001f42 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f60:	4b21      	ldr	r3, [pc, #132]	; (8001fe8 <HAL_RCC_OscConfig+0x784>)
 8001f62:	68da      	ldr	r2, [r3, #12]
 8001f64:	4b21      	ldr	r3, [pc, #132]	; (8001fec <HAL_RCC_OscConfig+0x788>)
 8001f66:	4013      	ands	r3, r2
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f70:	3a01      	subs	r2, #1
 8001f72:	0112      	lsls	r2, r2, #4
 8001f74:	4311      	orrs	r1, r2
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f7a:	0212      	lsls	r2, r2, #8
 8001f7c:	4311      	orrs	r1, r2
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f82:	0852      	lsrs	r2, r2, #1
 8001f84:	3a01      	subs	r2, #1
 8001f86:	0552      	lsls	r2, r2, #21
 8001f88:	4311      	orrs	r1, r2
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f8e:	0852      	lsrs	r2, r2, #1
 8001f90:	3a01      	subs	r2, #1
 8001f92:	0652      	lsls	r2, r2, #25
 8001f94:	4311      	orrs	r1, r2
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f9a:	06d2      	lsls	r2, r2, #27
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	4912      	ldr	r1, [pc, #72]	; (8001fe8 <HAL_RCC_OscConfig+0x784>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001fa4:	4b10      	ldr	r3, [pc, #64]	; (8001fe8 <HAL_RCC_OscConfig+0x784>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a0f      	ldr	r2, [pc, #60]	; (8001fe8 <HAL_RCC_OscConfig+0x784>)
 8001faa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fb0:	4b0d      	ldr	r3, [pc, #52]	; (8001fe8 <HAL_RCC_OscConfig+0x784>)
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	4a0c      	ldr	r2, [pc, #48]	; (8001fe8 <HAL_RCC_OscConfig+0x784>)
 8001fb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fbc:	f7ff f8ce 	bl	800115c <HAL_GetTick>
 8001fc0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc4:	f7ff f8ca 	bl	800115c <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e058      	b.n	8002088 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fd6:	4b04      	ldr	r3, [pc, #16]	; (8001fe8 <HAL_RCC_OscConfig+0x784>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d0f0      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fe2:	e050      	b.n	8002086 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e04f      	b.n	8002088 <HAL_RCC_OscConfig+0x824>
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ff0:	4b27      	ldr	r3, [pc, #156]	; (8002090 <HAL_RCC_OscConfig+0x82c>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d144      	bne.n	8002086 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ffc:	4b24      	ldr	r3, [pc, #144]	; (8002090 <HAL_RCC_OscConfig+0x82c>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a23      	ldr	r2, [pc, #140]	; (8002090 <HAL_RCC_OscConfig+0x82c>)
 8002002:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002006:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002008:	4b21      	ldr	r3, [pc, #132]	; (8002090 <HAL_RCC_OscConfig+0x82c>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	4a20      	ldr	r2, [pc, #128]	; (8002090 <HAL_RCC_OscConfig+0x82c>)
 800200e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002012:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002014:	f7ff f8a2 	bl	800115c <HAL_GetTick>
 8002018:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800201c:	f7ff f89e 	bl	800115c <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e02c      	b.n	8002088 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800202e:	4b18      	ldr	r3, [pc, #96]	; (8002090 <HAL_RCC_OscConfig+0x82c>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d0f0      	beq.n	800201c <HAL_RCC_OscConfig+0x7b8>
 800203a:	e024      	b.n	8002086 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	2b0c      	cmp	r3, #12
 8002040:	d01f      	beq.n	8002082 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002042:	4b13      	ldr	r3, [pc, #76]	; (8002090 <HAL_RCC_OscConfig+0x82c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a12      	ldr	r2, [pc, #72]	; (8002090 <HAL_RCC_OscConfig+0x82c>)
 8002048:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800204c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800204e:	f7ff f885 	bl	800115c <HAL_GetTick>
 8002052:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002054:	e008      	b.n	8002068 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002056:	f7ff f881 	bl	800115c <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e00f      	b.n	8002088 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002068:	4b09      	ldr	r3, [pc, #36]	; (8002090 <HAL_RCC_OscConfig+0x82c>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d1f0      	bne.n	8002056 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002074:	4b06      	ldr	r3, [pc, #24]	; (8002090 <HAL_RCC_OscConfig+0x82c>)
 8002076:	68da      	ldr	r2, [r3, #12]
 8002078:	4905      	ldr	r1, [pc, #20]	; (8002090 <HAL_RCC_OscConfig+0x82c>)
 800207a:	4b06      	ldr	r3, [pc, #24]	; (8002094 <HAL_RCC_OscConfig+0x830>)
 800207c:	4013      	ands	r3, r2
 800207e:	60cb      	str	r3, [r1, #12]
 8002080:	e001      	b.n	8002086 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e000      	b.n	8002088 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002086:	2300      	movs	r3, #0
}
 8002088:	4618      	mov	r0, r3
 800208a:	3720      	adds	r7, #32
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	40021000 	.word	0x40021000
 8002094:	feeefffc 	.word	0xfeeefffc

08002098 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80020a2:	2300      	movs	r3, #0
 80020a4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d101      	bne.n	80020b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e11d      	b.n	80022ec <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020b0:	4b90      	ldr	r3, [pc, #576]	; (80022f4 <HAL_RCC_ClockConfig+0x25c>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 030f 	and.w	r3, r3, #15
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d910      	bls.n	80020e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020be:	4b8d      	ldr	r3, [pc, #564]	; (80022f4 <HAL_RCC_ClockConfig+0x25c>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f023 020f 	bic.w	r2, r3, #15
 80020c6:	498b      	ldr	r1, [pc, #556]	; (80022f4 <HAL_RCC_ClockConfig+0x25c>)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ce:	4b89      	ldr	r3, [pc, #548]	; (80022f4 <HAL_RCC_ClockConfig+0x25c>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 030f 	and.w	r3, r3, #15
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d001      	beq.n	80020e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e105      	b.n	80022ec <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0302 	and.w	r3, r3, #2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d010      	beq.n	800210e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	4b81      	ldr	r3, [pc, #516]	; (80022f8 <HAL_RCC_ClockConfig+0x260>)
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d908      	bls.n	800210e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020fc:	4b7e      	ldr	r3, [pc, #504]	; (80022f8 <HAL_RCC_ClockConfig+0x260>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	497b      	ldr	r1, [pc, #492]	; (80022f8 <HAL_RCC_ClockConfig+0x260>)
 800210a:	4313      	orrs	r3, r2
 800210c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	2b00      	cmp	r3, #0
 8002118:	d079      	beq.n	800220e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	2b03      	cmp	r3, #3
 8002120:	d11e      	bne.n	8002160 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002122:	4b75      	ldr	r3, [pc, #468]	; (80022f8 <HAL_RCC_ClockConfig+0x260>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e0dc      	b.n	80022ec <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002132:	f000 fa09 	bl	8002548 <RCC_GetSysClockFreqFromPLLSource>
 8002136:	4603      	mov	r3, r0
 8002138:	4a70      	ldr	r2, [pc, #448]	; (80022fc <HAL_RCC_ClockConfig+0x264>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d946      	bls.n	80021cc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800213e:	4b6e      	ldr	r3, [pc, #440]	; (80022f8 <HAL_RCC_ClockConfig+0x260>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d140      	bne.n	80021cc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800214a:	4b6b      	ldr	r3, [pc, #428]	; (80022f8 <HAL_RCC_ClockConfig+0x260>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002152:	4a69      	ldr	r2, [pc, #420]	; (80022f8 <HAL_RCC_ClockConfig+0x260>)
 8002154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002158:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800215a:	2380      	movs	r3, #128	; 0x80
 800215c:	617b      	str	r3, [r7, #20]
 800215e:	e035      	b.n	80021cc <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	2b02      	cmp	r3, #2
 8002166:	d107      	bne.n	8002178 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002168:	4b63      	ldr	r3, [pc, #396]	; (80022f8 <HAL_RCC_ClockConfig+0x260>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d115      	bne.n	80021a0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e0b9      	b.n	80022ec <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d107      	bne.n	8002190 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002180:	4b5d      	ldr	r3, [pc, #372]	; (80022f8 <HAL_RCC_ClockConfig+0x260>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d109      	bne.n	80021a0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e0ad      	b.n	80022ec <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002190:	4b59      	ldr	r3, [pc, #356]	; (80022f8 <HAL_RCC_ClockConfig+0x260>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002198:	2b00      	cmp	r3, #0
 800219a:	d101      	bne.n	80021a0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e0a5      	b.n	80022ec <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80021a0:	f000 f8b4 	bl	800230c <HAL_RCC_GetSysClockFreq>
 80021a4:	4603      	mov	r3, r0
 80021a6:	4a55      	ldr	r2, [pc, #340]	; (80022fc <HAL_RCC_ClockConfig+0x264>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d90f      	bls.n	80021cc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80021ac:	4b52      	ldr	r3, [pc, #328]	; (80022f8 <HAL_RCC_ClockConfig+0x260>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d109      	bne.n	80021cc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80021b8:	4b4f      	ldr	r3, [pc, #316]	; (80022f8 <HAL_RCC_ClockConfig+0x260>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021c0:	4a4d      	ldr	r2, [pc, #308]	; (80022f8 <HAL_RCC_ClockConfig+0x260>)
 80021c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021c6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80021c8:	2380      	movs	r3, #128	; 0x80
 80021ca:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021cc:	4b4a      	ldr	r3, [pc, #296]	; (80022f8 <HAL_RCC_ClockConfig+0x260>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f023 0203 	bic.w	r2, r3, #3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	4947      	ldr	r1, [pc, #284]	; (80022f8 <HAL_RCC_ClockConfig+0x260>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021de:	f7fe ffbd 	bl	800115c <HAL_GetTick>
 80021e2:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021e4:	e00a      	b.n	80021fc <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021e6:	f7fe ffb9 	bl	800115c <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e077      	b.n	80022ec <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021fc:	4b3e      	ldr	r3, [pc, #248]	; (80022f8 <HAL_RCC_ClockConfig+0x260>)
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f003 020c 	and.w	r2, r3, #12
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	429a      	cmp	r2, r3
 800220c:	d1eb      	bne.n	80021e6 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	2b80      	cmp	r3, #128	; 0x80
 8002212:	d105      	bne.n	8002220 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002214:	4b38      	ldr	r3, [pc, #224]	; (80022f8 <HAL_RCC_ClockConfig+0x260>)
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	4a37      	ldr	r2, [pc, #220]	; (80022f8 <HAL_RCC_ClockConfig+0x260>)
 800221a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800221e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d010      	beq.n	800224e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689a      	ldr	r2, [r3, #8]
 8002230:	4b31      	ldr	r3, [pc, #196]	; (80022f8 <HAL_RCC_ClockConfig+0x260>)
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002238:	429a      	cmp	r2, r3
 800223a:	d208      	bcs.n	800224e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800223c:	4b2e      	ldr	r3, [pc, #184]	; (80022f8 <HAL_RCC_ClockConfig+0x260>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	492b      	ldr	r1, [pc, #172]	; (80022f8 <HAL_RCC_ClockConfig+0x260>)
 800224a:	4313      	orrs	r3, r2
 800224c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800224e:	4b29      	ldr	r3, [pc, #164]	; (80022f4 <HAL_RCC_ClockConfig+0x25c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	683a      	ldr	r2, [r7, #0]
 8002258:	429a      	cmp	r2, r3
 800225a:	d210      	bcs.n	800227e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800225c:	4b25      	ldr	r3, [pc, #148]	; (80022f4 <HAL_RCC_ClockConfig+0x25c>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f023 020f 	bic.w	r2, r3, #15
 8002264:	4923      	ldr	r1, [pc, #140]	; (80022f4 <HAL_RCC_ClockConfig+0x25c>)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	4313      	orrs	r3, r2
 800226a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800226c:	4b21      	ldr	r3, [pc, #132]	; (80022f4 <HAL_RCC_ClockConfig+0x25c>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 030f 	and.w	r3, r3, #15
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	429a      	cmp	r2, r3
 8002278:	d001      	beq.n	800227e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e036      	b.n	80022ec <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0304 	and.w	r3, r3, #4
 8002286:	2b00      	cmp	r3, #0
 8002288:	d008      	beq.n	800229c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800228a:	4b1b      	ldr	r3, [pc, #108]	; (80022f8 <HAL_RCC_ClockConfig+0x260>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	4918      	ldr	r1, [pc, #96]	; (80022f8 <HAL_RCC_ClockConfig+0x260>)
 8002298:	4313      	orrs	r3, r2
 800229a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0308 	and.w	r3, r3, #8
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d009      	beq.n	80022bc <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022a8:	4b13      	ldr	r3, [pc, #76]	; (80022f8 <HAL_RCC_ClockConfig+0x260>)
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	4910      	ldr	r1, [pc, #64]	; (80022f8 <HAL_RCC_ClockConfig+0x260>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022bc:	f000 f826 	bl	800230c <HAL_RCC_GetSysClockFreq>
 80022c0:	4602      	mov	r2, r0
 80022c2:	4b0d      	ldr	r3, [pc, #52]	; (80022f8 <HAL_RCC_ClockConfig+0x260>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	091b      	lsrs	r3, r3, #4
 80022c8:	f003 030f 	and.w	r3, r3, #15
 80022cc:	490c      	ldr	r1, [pc, #48]	; (8002300 <HAL_RCC_ClockConfig+0x268>)
 80022ce:	5ccb      	ldrb	r3, [r1, r3]
 80022d0:	f003 031f 	and.w	r3, r3, #31
 80022d4:	fa22 f303 	lsr.w	r3, r2, r3
 80022d8:	4a0a      	ldr	r2, [pc, #40]	; (8002304 <HAL_RCC_ClockConfig+0x26c>)
 80022da:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80022dc:	4b0a      	ldr	r3, [pc, #40]	; (8002308 <HAL_RCC_ClockConfig+0x270>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7fe feeb 	bl	80010bc <HAL_InitTick>
 80022e6:	4603      	mov	r3, r0
 80022e8:	73fb      	strb	r3, [r7, #15]

  return status;
 80022ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3718      	adds	r7, #24
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40022000 	.word	0x40022000
 80022f8:	40021000 	.word	0x40021000
 80022fc:	04c4b400 	.word	0x04c4b400
 8002300:	08005930 	.word	0x08005930
 8002304:	20000000 	.word	0x20000000
 8002308:	20000004 	.word	0x20000004

0800230c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800230c:	b480      	push	{r7}
 800230e:	b089      	sub	sp, #36	; 0x24
 8002310:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002312:	2300      	movs	r3, #0
 8002314:	61fb      	str	r3, [r7, #28]
 8002316:	2300      	movs	r3, #0
 8002318:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800231a:	4b3e      	ldr	r3, [pc, #248]	; (8002414 <HAL_RCC_GetSysClockFreq+0x108>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f003 030c 	and.w	r3, r3, #12
 8002322:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002324:	4b3b      	ldr	r3, [pc, #236]	; (8002414 <HAL_RCC_GetSysClockFreq+0x108>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	f003 0303 	and.w	r3, r3, #3
 800232c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d005      	beq.n	8002340 <HAL_RCC_GetSysClockFreq+0x34>
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	2b0c      	cmp	r3, #12
 8002338:	d121      	bne.n	800237e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d11e      	bne.n	800237e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002340:	4b34      	ldr	r3, [pc, #208]	; (8002414 <HAL_RCC_GetSysClockFreq+0x108>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0308 	and.w	r3, r3, #8
 8002348:	2b00      	cmp	r3, #0
 800234a:	d107      	bne.n	800235c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800234c:	4b31      	ldr	r3, [pc, #196]	; (8002414 <HAL_RCC_GetSysClockFreq+0x108>)
 800234e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002352:	0a1b      	lsrs	r3, r3, #8
 8002354:	f003 030f 	and.w	r3, r3, #15
 8002358:	61fb      	str	r3, [r7, #28]
 800235a:	e005      	b.n	8002368 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800235c:	4b2d      	ldr	r3, [pc, #180]	; (8002414 <HAL_RCC_GetSysClockFreq+0x108>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	091b      	lsrs	r3, r3, #4
 8002362:	f003 030f 	and.w	r3, r3, #15
 8002366:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002368:	4a2b      	ldr	r2, [pc, #172]	; (8002418 <HAL_RCC_GetSysClockFreq+0x10c>)
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002370:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d10d      	bne.n	8002394 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800237c:	e00a      	b.n	8002394 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	2b04      	cmp	r3, #4
 8002382:	d102      	bne.n	800238a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002384:	4b25      	ldr	r3, [pc, #148]	; (800241c <HAL_RCC_GetSysClockFreq+0x110>)
 8002386:	61bb      	str	r3, [r7, #24]
 8002388:	e004      	b.n	8002394 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	2b08      	cmp	r3, #8
 800238e:	d101      	bne.n	8002394 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002390:	4b23      	ldr	r3, [pc, #140]	; (8002420 <HAL_RCC_GetSysClockFreq+0x114>)
 8002392:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	2b0c      	cmp	r3, #12
 8002398:	d134      	bne.n	8002404 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800239a:	4b1e      	ldr	r3, [pc, #120]	; (8002414 <HAL_RCC_GetSysClockFreq+0x108>)
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	f003 0303 	and.w	r3, r3, #3
 80023a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d003      	beq.n	80023b2 <HAL_RCC_GetSysClockFreq+0xa6>
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	2b03      	cmp	r3, #3
 80023ae:	d003      	beq.n	80023b8 <HAL_RCC_GetSysClockFreq+0xac>
 80023b0:	e005      	b.n	80023be <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80023b2:	4b1a      	ldr	r3, [pc, #104]	; (800241c <HAL_RCC_GetSysClockFreq+0x110>)
 80023b4:	617b      	str	r3, [r7, #20]
      break;
 80023b6:	e005      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80023b8:	4b19      	ldr	r3, [pc, #100]	; (8002420 <HAL_RCC_GetSysClockFreq+0x114>)
 80023ba:	617b      	str	r3, [r7, #20]
      break;
 80023bc:	e002      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	617b      	str	r3, [r7, #20]
      break;
 80023c2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023c4:	4b13      	ldr	r3, [pc, #76]	; (8002414 <HAL_RCC_GetSysClockFreq+0x108>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	091b      	lsrs	r3, r3, #4
 80023ca:	f003 030f 	and.w	r3, r3, #15
 80023ce:	3301      	adds	r3, #1
 80023d0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80023d2:	4b10      	ldr	r3, [pc, #64]	; (8002414 <HAL_RCC_GetSysClockFreq+0x108>)
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	0a1b      	lsrs	r3, r3, #8
 80023d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023dc:	697a      	ldr	r2, [r7, #20]
 80023de:	fb03 f202 	mul.w	r2, r3, r2
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80023ea:	4b0a      	ldr	r3, [pc, #40]	; (8002414 <HAL_RCC_GetSysClockFreq+0x108>)
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	0e5b      	lsrs	r3, r3, #25
 80023f0:	f003 0303 	and.w	r3, r3, #3
 80023f4:	3301      	adds	r3, #1
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002402:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002404:	69bb      	ldr	r3, [r7, #24]
}
 8002406:	4618      	mov	r0, r3
 8002408:	3724      	adds	r7, #36	; 0x24
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	40021000 	.word	0x40021000
 8002418:	08005948 	.word	0x08005948
 800241c:	00f42400 	.word	0x00f42400
 8002420:	007a1200 	.word	0x007a1200

08002424 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002428:	4b03      	ldr	r3, [pc, #12]	; (8002438 <HAL_RCC_GetHCLKFreq+0x14>)
 800242a:	681b      	ldr	r3, [r3, #0]
}
 800242c:	4618      	mov	r0, r3
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	20000000 	.word	0x20000000

0800243c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002440:	f7ff fff0 	bl	8002424 <HAL_RCC_GetHCLKFreq>
 8002444:	4602      	mov	r2, r0
 8002446:	4b06      	ldr	r3, [pc, #24]	; (8002460 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	0a1b      	lsrs	r3, r3, #8
 800244c:	f003 0307 	and.w	r3, r3, #7
 8002450:	4904      	ldr	r1, [pc, #16]	; (8002464 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002452:	5ccb      	ldrb	r3, [r1, r3]
 8002454:	f003 031f 	and.w	r3, r3, #31
 8002458:	fa22 f303 	lsr.w	r3, r2, r3
}
 800245c:	4618      	mov	r0, r3
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40021000 	.word	0x40021000
 8002464:	08005940 	.word	0x08005940

08002468 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800246c:	f7ff ffda 	bl	8002424 <HAL_RCC_GetHCLKFreq>
 8002470:	4602      	mov	r2, r0
 8002472:	4b06      	ldr	r3, [pc, #24]	; (800248c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	0adb      	lsrs	r3, r3, #11
 8002478:	f003 0307 	and.w	r3, r3, #7
 800247c:	4904      	ldr	r1, [pc, #16]	; (8002490 <HAL_RCC_GetPCLK2Freq+0x28>)
 800247e:	5ccb      	ldrb	r3, [r1, r3]
 8002480:	f003 031f 	and.w	r3, r3, #31
 8002484:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002488:	4618      	mov	r0, r3
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40021000 	.word	0x40021000
 8002490:	08005940 	.word	0x08005940

08002494 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800249c:	2300      	movs	r3, #0
 800249e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80024a0:	4b27      	ldr	r3, [pc, #156]	; (8002540 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80024a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d003      	beq.n	80024b4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80024ac:	f7ff f906 	bl	80016bc <HAL_PWREx_GetVoltageRange>
 80024b0:	6178      	str	r0, [r7, #20]
 80024b2:	e014      	b.n	80024de <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80024b4:	4b22      	ldr	r3, [pc, #136]	; (8002540 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80024b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b8:	4a21      	ldr	r2, [pc, #132]	; (8002540 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80024ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024be:	6593      	str	r3, [r2, #88]	; 0x58
 80024c0:	4b1f      	ldr	r3, [pc, #124]	; (8002540 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80024c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c8:	60fb      	str	r3, [r7, #12]
 80024ca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80024cc:	f7ff f8f6 	bl	80016bc <HAL_PWREx_GetVoltageRange>
 80024d0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80024d2:	4b1b      	ldr	r3, [pc, #108]	; (8002540 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80024d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d6:	4a1a      	ldr	r2, [pc, #104]	; (8002540 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80024d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024dc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024e4:	d10b      	bne.n	80024fe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2b80      	cmp	r3, #128	; 0x80
 80024ea:	d913      	bls.n	8002514 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2ba0      	cmp	r3, #160	; 0xa0
 80024f0:	d902      	bls.n	80024f8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80024f2:	2302      	movs	r3, #2
 80024f4:	613b      	str	r3, [r7, #16]
 80024f6:	e00d      	b.n	8002514 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80024f8:	2301      	movs	r3, #1
 80024fa:	613b      	str	r3, [r7, #16]
 80024fc:	e00a      	b.n	8002514 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2b7f      	cmp	r3, #127	; 0x7f
 8002502:	d902      	bls.n	800250a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002504:	2302      	movs	r3, #2
 8002506:	613b      	str	r3, [r7, #16]
 8002508:	e004      	b.n	8002514 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2b70      	cmp	r3, #112	; 0x70
 800250e:	d101      	bne.n	8002514 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002510:	2301      	movs	r3, #1
 8002512:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002514:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f023 020f 	bic.w	r2, r3, #15
 800251c:	4909      	ldr	r1, [pc, #36]	; (8002544 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	4313      	orrs	r3, r2
 8002522:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002524:	4b07      	ldr	r3, [pc, #28]	; (8002544 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 030f 	and.w	r3, r3, #15
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	429a      	cmp	r2, r3
 8002530:	d001      	beq.n	8002536 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e000      	b.n	8002538 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	3718      	adds	r7, #24
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	40021000 	.word	0x40021000
 8002544:	40022000 	.word	0x40022000

08002548 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002548:	b480      	push	{r7}
 800254a:	b087      	sub	sp, #28
 800254c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800254e:	4b2d      	ldr	r3, [pc, #180]	; (8002604 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	f003 0303 	and.w	r3, r3, #3
 8002556:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2b03      	cmp	r3, #3
 800255c:	d00b      	beq.n	8002576 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2b03      	cmp	r3, #3
 8002562:	d825      	bhi.n	80025b0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d008      	beq.n	800257c <RCC_GetSysClockFreqFromPLLSource+0x34>
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2b02      	cmp	r3, #2
 800256e:	d11f      	bne.n	80025b0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002570:	4b25      	ldr	r3, [pc, #148]	; (8002608 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002572:	613b      	str	r3, [r7, #16]
    break;
 8002574:	e01f      	b.n	80025b6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002576:	4b25      	ldr	r3, [pc, #148]	; (800260c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002578:	613b      	str	r3, [r7, #16]
    break;
 800257a:	e01c      	b.n	80025b6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800257c:	4b21      	ldr	r3, [pc, #132]	; (8002604 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0308 	and.w	r3, r3, #8
 8002584:	2b00      	cmp	r3, #0
 8002586:	d107      	bne.n	8002598 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002588:	4b1e      	ldr	r3, [pc, #120]	; (8002604 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800258a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800258e:	0a1b      	lsrs	r3, r3, #8
 8002590:	f003 030f 	and.w	r3, r3, #15
 8002594:	617b      	str	r3, [r7, #20]
 8002596:	e005      	b.n	80025a4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002598:	4b1a      	ldr	r3, [pc, #104]	; (8002604 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	091b      	lsrs	r3, r3, #4
 800259e:	f003 030f 	and.w	r3, r3, #15
 80025a2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80025a4:	4a1a      	ldr	r2, [pc, #104]	; (8002610 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ac:	613b      	str	r3, [r7, #16]
    break;
 80025ae:	e002      	b.n	80025b6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80025b0:	2300      	movs	r3, #0
 80025b2:	613b      	str	r3, [r7, #16]
    break;
 80025b4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025b6:	4b13      	ldr	r3, [pc, #76]	; (8002604 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	091b      	lsrs	r3, r3, #4
 80025bc:	f003 030f 	and.w	r3, r3, #15
 80025c0:	3301      	adds	r3, #1
 80025c2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80025c4:	4b0f      	ldr	r3, [pc, #60]	; (8002604 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	0a1b      	lsrs	r3, r3, #8
 80025ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	fb03 f202 	mul.w	r2, r3, r2
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025da:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025dc:	4b09      	ldr	r3, [pc, #36]	; (8002604 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	0e5b      	lsrs	r3, r3, #25
 80025e2:	f003 0303 	and.w	r3, r3, #3
 80025e6:	3301      	adds	r3, #1
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80025ec:	693a      	ldr	r2, [r7, #16]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80025f6:	683b      	ldr	r3, [r7, #0]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	371c      	adds	r7, #28
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr
 8002604:	40021000 	.word	0x40021000
 8002608:	00f42400 	.word	0x00f42400
 800260c:	007a1200 	.word	0x007a1200
 8002610:	08005948 	.word	0x08005948

08002614 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800261c:	2300      	movs	r3, #0
 800261e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002620:	2300      	movs	r3, #0
 8002622:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800262c:	2b00      	cmp	r3, #0
 800262e:	d040      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002634:	2b80      	cmp	r3, #128	; 0x80
 8002636:	d02a      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002638:	2b80      	cmp	r3, #128	; 0x80
 800263a:	d825      	bhi.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800263c:	2b60      	cmp	r3, #96	; 0x60
 800263e:	d026      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002640:	2b60      	cmp	r3, #96	; 0x60
 8002642:	d821      	bhi.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002644:	2b40      	cmp	r3, #64	; 0x40
 8002646:	d006      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002648:	2b40      	cmp	r3, #64	; 0x40
 800264a:	d81d      	bhi.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800264c:	2b00      	cmp	r3, #0
 800264e:	d009      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002650:	2b20      	cmp	r3, #32
 8002652:	d010      	beq.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002654:	e018      	b.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002656:	4b89      	ldr	r3, [pc, #548]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	4a88      	ldr	r2, [pc, #544]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800265c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002660:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002662:	e015      	b.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	3304      	adds	r3, #4
 8002668:	2100      	movs	r1, #0
 800266a:	4618      	mov	r0, r3
 800266c:	f000 fb02 	bl	8002c74 <RCCEx_PLLSAI1_Config>
 8002670:	4603      	mov	r3, r0
 8002672:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002674:	e00c      	b.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	3320      	adds	r3, #32
 800267a:	2100      	movs	r1, #0
 800267c:	4618      	mov	r0, r3
 800267e:	f000 fbed 	bl	8002e5c <RCCEx_PLLSAI2_Config>
 8002682:	4603      	mov	r3, r0
 8002684:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002686:	e003      	b.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	74fb      	strb	r3, [r7, #19]
      break;
 800268c:	e000      	b.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800268e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002690:	7cfb      	ldrb	r3, [r7, #19]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10b      	bne.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002696:	4b79      	ldr	r3, [pc, #484]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002698:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800269c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026a4:	4975      	ldr	r1, [pc, #468]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80026ac:	e001      	b.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026ae:	7cfb      	ldrb	r3, [r7, #19]
 80026b0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d047      	beq.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026c6:	d030      	beq.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80026c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026cc:	d82a      	bhi.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80026ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80026d2:	d02a      	beq.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80026d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80026d8:	d824      	bhi.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80026da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026de:	d008      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80026e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026e4:	d81e      	bhi.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00a      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80026ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026ee:	d010      	beq.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80026f0:	e018      	b.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80026f2:	4b62      	ldr	r3, [pc, #392]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	4a61      	ldr	r2, [pc, #388]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026fc:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026fe:	e015      	b.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3304      	adds	r3, #4
 8002704:	2100      	movs	r1, #0
 8002706:	4618      	mov	r0, r3
 8002708:	f000 fab4 	bl	8002c74 <RCCEx_PLLSAI1_Config>
 800270c:	4603      	mov	r3, r0
 800270e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002710:	e00c      	b.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	3320      	adds	r3, #32
 8002716:	2100      	movs	r1, #0
 8002718:	4618      	mov	r0, r3
 800271a:	f000 fb9f 	bl	8002e5c <RCCEx_PLLSAI2_Config>
 800271e:	4603      	mov	r3, r0
 8002720:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002722:	e003      	b.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	74fb      	strb	r3, [r7, #19]
      break;
 8002728:	e000      	b.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800272a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800272c:	7cfb      	ldrb	r3, [r7, #19]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d10b      	bne.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002732:	4b52      	ldr	r3, [pc, #328]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002734:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002738:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002740:	494e      	ldr	r1, [pc, #312]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002742:	4313      	orrs	r3, r2
 8002744:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002748:	e001      	b.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800274a:	7cfb      	ldrb	r3, [r7, #19]
 800274c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002756:	2b00      	cmp	r3, #0
 8002758:	f000 809f 	beq.w	800289a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800275c:	2300      	movs	r3, #0
 800275e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002760:	4b46      	ldr	r3, [pc, #280]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d101      	bne.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800276c:	2301      	movs	r3, #1
 800276e:	e000      	b.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002770:	2300      	movs	r3, #0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00d      	beq.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002776:	4b41      	ldr	r3, [pc, #260]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800277a:	4a40      	ldr	r2, [pc, #256]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800277c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002780:	6593      	str	r3, [r2, #88]	; 0x58
 8002782:	4b3e      	ldr	r3, [pc, #248]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800278a:	60bb      	str	r3, [r7, #8]
 800278c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800278e:	2301      	movs	r3, #1
 8002790:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002792:	4b3b      	ldr	r3, [pc, #236]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a3a      	ldr	r2, [pc, #232]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800279c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800279e:	f7fe fcdd 	bl	800115c <HAL_GetTick>
 80027a2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027a4:	e009      	b.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027a6:	f7fe fcd9 	bl	800115c <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d902      	bls.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	74fb      	strb	r3, [r7, #19]
        break;
 80027b8:	e005      	b.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027ba:	4b31      	ldr	r3, [pc, #196]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d0ef      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80027c6:	7cfb      	ldrb	r3, [r7, #19]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d15b      	bne.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80027cc:	4b2b      	ldr	r3, [pc, #172]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80027ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027d6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d01f      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e4:	697a      	ldr	r2, [r7, #20]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d019      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80027ea:	4b24      	ldr	r3, [pc, #144]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80027ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027f4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027f6:	4b21      	ldr	r3, [pc, #132]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80027f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027fc:	4a1f      	ldr	r2, [pc, #124]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80027fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002802:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002806:	4b1d      	ldr	r3, [pc, #116]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800280c:	4a1b      	ldr	r2, [pc, #108]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800280e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002812:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002816:	4a19      	ldr	r2, [pc, #100]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	2b00      	cmp	r3, #0
 8002826:	d016      	beq.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002828:	f7fe fc98 	bl	800115c <HAL_GetTick>
 800282c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800282e:	e00b      	b.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002830:	f7fe fc94 	bl	800115c <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	f241 3288 	movw	r2, #5000	; 0x1388
 800283e:	4293      	cmp	r3, r2
 8002840:	d902      	bls.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	74fb      	strb	r3, [r7, #19]
            break;
 8002846:	e006      	b.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002848:	4b0c      	ldr	r3, [pc, #48]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800284a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d0ec      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8002856:	7cfb      	ldrb	r3, [r7, #19]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d10c      	bne.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800285c:	4b07      	ldr	r3, [pc, #28]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800285e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002862:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800286c:	4903      	ldr	r1, [pc, #12]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800286e:	4313      	orrs	r3, r2
 8002870:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002874:	e008      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002876:	7cfb      	ldrb	r3, [r7, #19]
 8002878:	74bb      	strb	r3, [r7, #18]
 800287a:	e005      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800287c:	40021000 	.word	0x40021000
 8002880:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002884:	7cfb      	ldrb	r3, [r7, #19]
 8002886:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002888:	7c7b      	ldrb	r3, [r7, #17]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d105      	bne.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800288e:	4ba0      	ldr	r3, [pc, #640]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002892:	4a9f      	ldr	r2, [pc, #636]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002894:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002898:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00a      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028a6:	4b9a      	ldr	r3, [pc, #616]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ac:	f023 0203 	bic.w	r2, r3, #3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028b4:	4996      	ldr	r1, [pc, #600]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00a      	beq.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028c8:	4b91      	ldr	r3, [pc, #580]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ce:	f023 020c 	bic.w	r2, r3, #12
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d6:	498e      	ldr	r1, [pc, #568]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0304 	and.w	r3, r3, #4
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00a      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028ea:	4b89      	ldr	r3, [pc, #548]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f8:	4985      	ldr	r1, [pc, #532]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0308 	and.w	r3, r3, #8
 8002908:	2b00      	cmp	r3, #0
 800290a:	d00a      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800290c:	4b80      	ldr	r3, [pc, #512]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800290e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002912:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800291a:	497d      	ldr	r1, [pc, #500]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800291c:	4313      	orrs	r3, r2
 800291e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0310 	and.w	r3, r3, #16
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00a      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800292e:	4b78      	ldr	r3, [pc, #480]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002934:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800293c:	4974      	ldr	r1, [pc, #464]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800293e:	4313      	orrs	r3, r2
 8002940:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0320 	and.w	r3, r3, #32
 800294c:	2b00      	cmp	r3, #0
 800294e:	d00a      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002950:	4b6f      	ldr	r3, [pc, #444]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002956:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800295e:	496c      	ldr	r1, [pc, #432]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002960:	4313      	orrs	r3, r2
 8002962:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00a      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002972:	4b67      	ldr	r3, [pc, #412]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002978:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002980:	4963      	ldr	r1, [pc, #396]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002982:	4313      	orrs	r3, r2
 8002984:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00a      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002994:	4b5e      	ldr	r3, [pc, #376]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800299a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029a2:	495b      	ldr	r1, [pc, #364]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00a      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029b6:	4b56      	ldr	r3, [pc, #344]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029bc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c4:	4952      	ldr	r1, [pc, #328]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00a      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029d8:	4b4d      	ldr	r3, [pc, #308]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029de:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e6:	494a      	ldr	r1, [pc, #296]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00a      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029fa:	4b45      	ldr	r3, [pc, #276]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a08:	4941      	ldr	r1, [pc, #260]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00a      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002a1c:	4b3c      	ldr	r3, [pc, #240]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a22:	f023 0203 	bic.w	r2, r3, #3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a2a:	4939      	ldr	r1, [pc, #228]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d028      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a3e:	4b34      	ldr	r3, [pc, #208]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a44:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a4c:	4930      	ldr	r1, [pc, #192]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a5c:	d106      	bne.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a5e:	4b2c      	ldr	r3, [pc, #176]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	4a2b      	ldr	r2, [pc, #172]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a68:	60d3      	str	r3, [r2, #12]
 8002a6a:	e011      	b.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a74:	d10c      	bne.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	3304      	adds	r3, #4
 8002a7a:	2101      	movs	r1, #1
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f000 f8f9 	bl	8002c74 <RCCEx_PLLSAI1_Config>
 8002a82:	4603      	mov	r3, r0
 8002a84:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002a86:	7cfb      	ldrb	r3, [r7, #19]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8002a8c:	7cfb      	ldrb	r3, [r7, #19]
 8002a8e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d04d      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002aa0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002aa4:	d108      	bne.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002aa6:	4b1a      	ldr	r3, [pc, #104]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002aa8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002aac:	4a18      	ldr	r2, [pc, #96]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002aae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ab2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002ab6:	e012      	b.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8002ab8:	4b15      	ldr	r3, [pc, #84]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002aba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002abe:	4a14      	ldr	r2, [pc, #80]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ac0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ac4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002ac8:	4b11      	ldr	r3, [pc, #68]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ace:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ad6:	490e      	ldr	r1, [pc, #56]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ae2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ae6:	d106      	bne.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ae8:	4b09      	ldr	r3, [pc, #36]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	4a08      	ldr	r2, [pc, #32]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002aee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002af2:	60d3      	str	r3, [r2, #12]
 8002af4:	e020      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002afa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002afe:	d109      	bne.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b00:	4b03      	ldr	r3, [pc, #12]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	4a02      	ldr	r2, [pc, #8]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b0a:	60d3      	str	r3, [r2, #12]
 8002b0c:	e014      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002b0e:	bf00      	nop
 8002b10:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b1c:	d10c      	bne.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	3304      	adds	r3, #4
 8002b22:	2101      	movs	r1, #1
 8002b24:	4618      	mov	r0, r3
 8002b26:	f000 f8a5 	bl	8002c74 <RCCEx_PLLSAI1_Config>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b2e:	7cfb      	ldrb	r3, [r7, #19]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8002b34:	7cfb      	ldrb	r3, [r7, #19]
 8002b36:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d028      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b44:	4b4a      	ldr	r3, [pc, #296]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b4a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b52:	4947      	ldr	r1, [pc, #284]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b62:	d106      	bne.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b64:	4b42      	ldr	r3, [pc, #264]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	4a41      	ldr	r2, [pc, #260]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b6e:	60d3      	str	r3, [r2, #12]
 8002b70:	e011      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b76:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b7a:	d10c      	bne.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	3304      	adds	r3, #4
 8002b80:	2101      	movs	r1, #1
 8002b82:	4618      	mov	r0, r3
 8002b84:	f000 f876 	bl	8002c74 <RCCEx_PLLSAI1_Config>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b8c:	7cfb      	ldrb	r3, [r7, #19]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8002b92:	7cfb      	ldrb	r3, [r7, #19]
 8002b94:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d01e      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ba2:	4b33      	ldr	r3, [pc, #204]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bb2:	492f      	ldr	r1, [pc, #188]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bc0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bc4:	d10c      	bne.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	3304      	adds	r3, #4
 8002bca:	2102      	movs	r1, #2
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f000 f851 	bl	8002c74 <RCCEx_PLLSAI1_Config>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bd6:	7cfb      	ldrb	r3, [r7, #19]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8002bdc:	7cfb      	ldrb	r3, [r7, #19]
 8002bde:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00b      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002bec:	4b20      	ldr	r3, [pc, #128]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002bf2:	f023 0204 	bic.w	r2, r3, #4
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bfc:	491c      	ldr	r1, [pc, #112]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00b      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002c10:	4b17      	ldr	r3, [pc, #92]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c16:	f023 0218 	bic.w	r2, r3, #24
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c20:	4913      	ldr	r1, [pc, #76]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d017      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002c34:	4b0e      	ldr	r3, [pc, #56]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c3a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c44:	490a      	ldr	r1, [pc, #40]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c56:	d105      	bne.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c58:	4b05      	ldr	r3, [pc, #20]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	4a04      	ldr	r2, [pc, #16]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c62:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002c64:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3718      	adds	r7, #24
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	40021000 	.word	0x40021000

08002c74 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c82:	4b72      	ldr	r3, [pc, #456]	; (8002e4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	f003 0303 	and.w	r3, r3, #3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00e      	beq.n	8002cac <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002c8e:	4b6f      	ldr	r3, [pc, #444]	; (8002e4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	f003 0203 	and.w	r2, r3, #3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d103      	bne.n	8002ca6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
       ||
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d142      	bne.n	8002d2c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	73fb      	strb	r3, [r7, #15]
 8002caa:	e03f      	b.n	8002d2c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2b03      	cmp	r3, #3
 8002cb2:	d018      	beq.n	8002ce6 <RCCEx_PLLSAI1_Config+0x72>
 8002cb4:	2b03      	cmp	r3, #3
 8002cb6:	d825      	bhi.n	8002d04 <RCCEx_PLLSAI1_Config+0x90>
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d002      	beq.n	8002cc2 <RCCEx_PLLSAI1_Config+0x4e>
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d009      	beq.n	8002cd4 <RCCEx_PLLSAI1_Config+0x60>
 8002cc0:	e020      	b.n	8002d04 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002cc2:	4b62      	ldr	r3, [pc, #392]	; (8002e4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d11d      	bne.n	8002d0a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cd2:	e01a      	b.n	8002d0a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002cd4:	4b5d      	ldr	r3, [pc, #372]	; (8002e4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d116      	bne.n	8002d0e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ce4:	e013      	b.n	8002d0e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ce6:	4b59      	ldr	r3, [pc, #356]	; (8002e4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10f      	bne.n	8002d12 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002cf2:	4b56      	ldr	r3, [pc, #344]	; (8002e4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d109      	bne.n	8002d12 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d02:	e006      	b.n	8002d12 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	73fb      	strb	r3, [r7, #15]
      break;
 8002d08:	e004      	b.n	8002d14 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002d0a:	bf00      	nop
 8002d0c:	e002      	b.n	8002d14 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002d0e:	bf00      	nop
 8002d10:	e000      	b.n	8002d14 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002d12:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d14:	7bfb      	ldrb	r3, [r7, #15]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d108      	bne.n	8002d2c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8002d1a:	4b4c      	ldr	r3, [pc, #304]	; (8002e4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	f023 0203 	bic.w	r2, r3, #3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4949      	ldr	r1, [pc, #292]	; (8002e4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002d2c:	7bfb      	ldrb	r3, [r7, #15]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f040 8086 	bne.w	8002e40 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002d34:	4b45      	ldr	r3, [pc, #276]	; (8002e4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a44      	ldr	r2, [pc, #272]	; (8002e4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d3a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d40:	f7fe fa0c 	bl	800115c <HAL_GetTick>
 8002d44:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d46:	e009      	b.n	8002d5c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d48:	f7fe fa08 	bl	800115c <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d902      	bls.n	8002d5c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	73fb      	strb	r3, [r7, #15]
        break;
 8002d5a:	e005      	b.n	8002d68 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d5c:	4b3b      	ldr	r3, [pc, #236]	; (8002e4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1ef      	bne.n	8002d48 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002d68:	7bfb      	ldrb	r3, [r7, #15]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d168      	bne.n	8002e40 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d113      	bne.n	8002d9c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d74:	4b35      	ldr	r3, [pc, #212]	; (8002e4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d76:	691a      	ldr	r2, [r3, #16]
 8002d78:	4b35      	ldr	r3, [pc, #212]	; (8002e50 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	6892      	ldr	r2, [r2, #8]
 8002d80:	0211      	lsls	r1, r2, #8
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	68d2      	ldr	r2, [r2, #12]
 8002d86:	06d2      	lsls	r2, r2, #27
 8002d88:	4311      	orrs	r1, r2
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	6852      	ldr	r2, [r2, #4]
 8002d8e:	3a01      	subs	r2, #1
 8002d90:	0112      	lsls	r2, r2, #4
 8002d92:	430a      	orrs	r2, r1
 8002d94:	492d      	ldr	r1, [pc, #180]	; (8002e4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	610b      	str	r3, [r1, #16]
 8002d9a:	e02d      	b.n	8002df8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d115      	bne.n	8002dce <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002da2:	4b2a      	ldr	r3, [pc, #168]	; (8002e4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002da4:	691a      	ldr	r2, [r3, #16]
 8002da6:	4b2b      	ldr	r3, [pc, #172]	; (8002e54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002da8:	4013      	ands	r3, r2
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	6892      	ldr	r2, [r2, #8]
 8002dae:	0211      	lsls	r1, r2, #8
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	6912      	ldr	r2, [r2, #16]
 8002db4:	0852      	lsrs	r2, r2, #1
 8002db6:	3a01      	subs	r2, #1
 8002db8:	0552      	lsls	r2, r2, #21
 8002dba:	4311      	orrs	r1, r2
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	6852      	ldr	r2, [r2, #4]
 8002dc0:	3a01      	subs	r2, #1
 8002dc2:	0112      	lsls	r2, r2, #4
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	4921      	ldr	r1, [pc, #132]	; (8002e4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	610b      	str	r3, [r1, #16]
 8002dcc:	e014      	b.n	8002df8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002dce:	4b1f      	ldr	r3, [pc, #124]	; (8002e4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002dd0:	691a      	ldr	r2, [r3, #16]
 8002dd2:	4b21      	ldr	r3, [pc, #132]	; (8002e58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	6892      	ldr	r2, [r2, #8]
 8002dda:	0211      	lsls	r1, r2, #8
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	6952      	ldr	r2, [r2, #20]
 8002de0:	0852      	lsrs	r2, r2, #1
 8002de2:	3a01      	subs	r2, #1
 8002de4:	0652      	lsls	r2, r2, #25
 8002de6:	4311      	orrs	r1, r2
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	6852      	ldr	r2, [r2, #4]
 8002dec:	3a01      	subs	r2, #1
 8002dee:	0112      	lsls	r2, r2, #4
 8002df0:	430a      	orrs	r2, r1
 8002df2:	4916      	ldr	r1, [pc, #88]	; (8002e4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002df8:	4b14      	ldr	r3, [pc, #80]	; (8002e4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a13      	ldr	r2, [pc, #76]	; (8002e4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002dfe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e02:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e04:	f7fe f9aa 	bl	800115c <HAL_GetTick>
 8002e08:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e0a:	e009      	b.n	8002e20 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e0c:	f7fe f9a6 	bl	800115c <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d902      	bls.n	8002e20 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	73fb      	strb	r3, [r7, #15]
          break;
 8002e1e:	e005      	b.n	8002e2c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e20:	4b0a      	ldr	r3, [pc, #40]	; (8002e4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d0ef      	beq.n	8002e0c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002e2c:	7bfb      	ldrb	r3, [r7, #15]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d106      	bne.n	8002e40 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002e32:	4b06      	ldr	r3, [pc, #24]	; (8002e4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e34:	691a      	ldr	r2, [r3, #16]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	4904      	ldr	r1, [pc, #16]	; (8002e4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	40021000 	.word	0x40021000
 8002e50:	07ff800f 	.word	0x07ff800f
 8002e54:	ff9f800f 	.word	0xff9f800f
 8002e58:	f9ff800f 	.word	0xf9ff800f

08002e5c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e66:	2300      	movs	r3, #0
 8002e68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e6a:	4b72      	ldr	r3, [pc, #456]	; (8003034 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	f003 0303 	and.w	r3, r3, #3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00e      	beq.n	8002e94 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002e76:	4b6f      	ldr	r3, [pc, #444]	; (8003034 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	f003 0203 	and.w	r2, r3, #3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d103      	bne.n	8002e8e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
       ||
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d142      	bne.n	8002f14 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	73fb      	strb	r3, [r7, #15]
 8002e92:	e03f      	b.n	8002f14 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2b03      	cmp	r3, #3
 8002e9a:	d018      	beq.n	8002ece <RCCEx_PLLSAI2_Config+0x72>
 8002e9c:	2b03      	cmp	r3, #3
 8002e9e:	d825      	bhi.n	8002eec <RCCEx_PLLSAI2_Config+0x90>
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d002      	beq.n	8002eaa <RCCEx_PLLSAI2_Config+0x4e>
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d009      	beq.n	8002ebc <RCCEx_PLLSAI2_Config+0x60>
 8002ea8:	e020      	b.n	8002eec <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002eaa:	4b62      	ldr	r3, [pc, #392]	; (8003034 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d11d      	bne.n	8002ef2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eba:	e01a      	b.n	8002ef2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ebc:	4b5d      	ldr	r3, [pc, #372]	; (8003034 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d116      	bne.n	8002ef6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ecc:	e013      	b.n	8002ef6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ece:	4b59      	ldr	r3, [pc, #356]	; (8003034 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d10f      	bne.n	8002efa <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002eda:	4b56      	ldr	r3, [pc, #344]	; (8003034 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d109      	bne.n	8002efa <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002eea:	e006      	b.n	8002efa <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	73fb      	strb	r3, [r7, #15]
      break;
 8002ef0:	e004      	b.n	8002efc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002ef2:	bf00      	nop
 8002ef4:	e002      	b.n	8002efc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002ef6:	bf00      	nop
 8002ef8:	e000      	b.n	8002efc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002efa:	bf00      	nop
    }

    if(status == HAL_OK)
 8002efc:	7bfb      	ldrb	r3, [r7, #15]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d108      	bne.n	8002f14 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8002f02:	4b4c      	ldr	r3, [pc, #304]	; (8003034 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	f023 0203 	bic.w	r2, r3, #3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4949      	ldr	r1, [pc, #292]	; (8003034 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002f14:	7bfb      	ldrb	r3, [r7, #15]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f040 8086 	bne.w	8003028 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002f1c:	4b45      	ldr	r3, [pc, #276]	; (8003034 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a44      	ldr	r2, [pc, #272]	; (8003034 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f28:	f7fe f918 	bl	800115c <HAL_GetTick>
 8002f2c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f2e:	e009      	b.n	8002f44 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f30:	f7fe f914 	bl	800115c <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d902      	bls.n	8002f44 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	73fb      	strb	r3, [r7, #15]
        break;
 8002f42:	e005      	b.n	8002f50 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f44:	4b3b      	ldr	r3, [pc, #236]	; (8003034 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1ef      	bne.n	8002f30 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002f50:	7bfb      	ldrb	r3, [r7, #15]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d168      	bne.n	8003028 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d113      	bne.n	8002f84 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f5c:	4b35      	ldr	r3, [pc, #212]	; (8003034 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f5e:	695a      	ldr	r2, [r3, #20]
 8002f60:	4b35      	ldr	r3, [pc, #212]	; (8003038 <RCCEx_PLLSAI2_Config+0x1dc>)
 8002f62:	4013      	ands	r3, r2
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	6892      	ldr	r2, [r2, #8]
 8002f68:	0211      	lsls	r1, r2, #8
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	68d2      	ldr	r2, [r2, #12]
 8002f6e:	06d2      	lsls	r2, r2, #27
 8002f70:	4311      	orrs	r1, r2
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	6852      	ldr	r2, [r2, #4]
 8002f76:	3a01      	subs	r2, #1
 8002f78:	0112      	lsls	r2, r2, #4
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	492d      	ldr	r1, [pc, #180]	; (8003034 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	614b      	str	r3, [r1, #20]
 8002f82:	e02d      	b.n	8002fe0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d115      	bne.n	8002fb6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f8a:	4b2a      	ldr	r3, [pc, #168]	; (8003034 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f8c:	695a      	ldr	r2, [r3, #20]
 8002f8e:	4b2b      	ldr	r3, [pc, #172]	; (800303c <RCCEx_PLLSAI2_Config+0x1e0>)
 8002f90:	4013      	ands	r3, r2
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	6892      	ldr	r2, [r2, #8]
 8002f96:	0211      	lsls	r1, r2, #8
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	6912      	ldr	r2, [r2, #16]
 8002f9c:	0852      	lsrs	r2, r2, #1
 8002f9e:	3a01      	subs	r2, #1
 8002fa0:	0552      	lsls	r2, r2, #21
 8002fa2:	4311      	orrs	r1, r2
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	6852      	ldr	r2, [r2, #4]
 8002fa8:	3a01      	subs	r2, #1
 8002faa:	0112      	lsls	r2, r2, #4
 8002fac:	430a      	orrs	r2, r1
 8002fae:	4921      	ldr	r1, [pc, #132]	; (8003034 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	614b      	str	r3, [r1, #20]
 8002fb4:	e014      	b.n	8002fe0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002fb6:	4b1f      	ldr	r3, [pc, #124]	; (8003034 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002fb8:	695a      	ldr	r2, [r3, #20]
 8002fba:	4b21      	ldr	r3, [pc, #132]	; (8003040 <RCCEx_PLLSAI2_Config+0x1e4>)
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	6892      	ldr	r2, [r2, #8]
 8002fc2:	0211      	lsls	r1, r2, #8
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	6952      	ldr	r2, [r2, #20]
 8002fc8:	0852      	lsrs	r2, r2, #1
 8002fca:	3a01      	subs	r2, #1
 8002fcc:	0652      	lsls	r2, r2, #25
 8002fce:	4311      	orrs	r1, r2
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	6852      	ldr	r2, [r2, #4]
 8002fd4:	3a01      	subs	r2, #1
 8002fd6:	0112      	lsls	r2, r2, #4
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	4916      	ldr	r1, [pc, #88]	; (8003034 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002fe0:	4b14      	ldr	r3, [pc, #80]	; (8003034 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a13      	ldr	r2, [pc, #76]	; (8003034 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002fe6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fec:	f7fe f8b6 	bl	800115c <HAL_GetTick>
 8002ff0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ff2:	e009      	b.n	8003008 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ff4:	f7fe f8b2 	bl	800115c <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d902      	bls.n	8003008 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	73fb      	strb	r3, [r7, #15]
          break;
 8003006:	e005      	b.n	8003014 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003008:	4b0a      	ldr	r3, [pc, #40]	; (8003034 <RCCEx_PLLSAI2_Config+0x1d8>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d0ef      	beq.n	8002ff4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003014:	7bfb      	ldrb	r3, [r7, #15]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d106      	bne.n	8003028 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800301a:	4b06      	ldr	r3, [pc, #24]	; (8003034 <RCCEx_PLLSAI2_Config+0x1d8>)
 800301c:	695a      	ldr	r2, [r3, #20]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	4904      	ldr	r1, [pc, #16]	; (8003034 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003024:	4313      	orrs	r3, r2
 8003026:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003028:	7bfb      	ldrb	r3, [r7, #15]
}
 800302a:	4618      	mov	r0, r3
 800302c:	3710      	adds	r7, #16
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	40021000 	.word	0x40021000
 8003038:	07ff800f 	.word	0x07ff800f
 800303c:	ff9f800f 	.word	0xff9f800f
 8003040:	f9ff800f 	.word	0xf9ff800f

08003044 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e049      	b.n	80030ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d106      	bne.n	8003070 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f7fd feda 	bl	8000e24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2202      	movs	r2, #2
 8003074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	3304      	adds	r3, #4
 8003080:	4619      	mov	r1, r3
 8003082:	4610      	mov	r0, r2
 8003084:	f000 f9ee 	bl	8003464 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
	...

080030f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2b01      	cmp	r3, #1
 8003106:	d001      	beq.n	800310c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e04f      	b.n	80031ac <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2202      	movs	r2, #2
 8003110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68da      	ldr	r2, [r3, #12]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f042 0201 	orr.w	r2, r2, #1
 8003122:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a23      	ldr	r2, [pc, #140]	; (80031b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d01d      	beq.n	800316a <HAL_TIM_Base_Start_IT+0x76>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003136:	d018      	beq.n	800316a <HAL_TIM_Base_Start_IT+0x76>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a1f      	ldr	r2, [pc, #124]	; (80031bc <HAL_TIM_Base_Start_IT+0xc8>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d013      	beq.n	800316a <HAL_TIM_Base_Start_IT+0x76>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a1e      	ldr	r2, [pc, #120]	; (80031c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d00e      	beq.n	800316a <HAL_TIM_Base_Start_IT+0x76>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a1c      	ldr	r2, [pc, #112]	; (80031c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d009      	beq.n	800316a <HAL_TIM_Base_Start_IT+0x76>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a1b      	ldr	r2, [pc, #108]	; (80031c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d004      	beq.n	800316a <HAL_TIM_Base_Start_IT+0x76>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a19      	ldr	r2, [pc, #100]	; (80031cc <HAL_TIM_Base_Start_IT+0xd8>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d115      	bne.n	8003196 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	689a      	ldr	r2, [r3, #8]
 8003170:	4b17      	ldr	r3, [pc, #92]	; (80031d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003172:	4013      	ands	r3, r2
 8003174:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2b06      	cmp	r3, #6
 800317a:	d015      	beq.n	80031a8 <HAL_TIM_Base_Start_IT+0xb4>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003182:	d011      	beq.n	80031a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f042 0201 	orr.w	r2, r2, #1
 8003192:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003194:	e008      	b.n	80031a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f042 0201 	orr.w	r2, r2, #1
 80031a4:	601a      	str	r2, [r3, #0]
 80031a6:	e000      	b.n	80031aa <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031a8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3714      	adds	r7, #20
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr
 80031b8:	40012c00 	.word	0x40012c00
 80031bc:	40000400 	.word	0x40000400
 80031c0:	40000800 	.word	0x40000800
 80031c4:	40000c00 	.word	0x40000c00
 80031c8:	40013400 	.word	0x40013400
 80031cc:	40014000 	.word	0x40014000
 80031d0:	00010007 	.word	0x00010007

080031d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d122      	bne.n	8003230 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	f003 0302 	and.w	r3, r3, #2
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d11b      	bne.n	8003230 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f06f 0202 	mvn.w	r2, #2
 8003200:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	f003 0303 	and.w	r3, r3, #3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d003      	beq.n	800321e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 f905 	bl	8003426 <HAL_TIM_IC_CaptureCallback>
 800321c:	e005      	b.n	800322a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 f8f7 	bl	8003412 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 f908 	bl	800343a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	f003 0304 	and.w	r3, r3, #4
 800323a:	2b04      	cmp	r3, #4
 800323c:	d122      	bne.n	8003284 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	f003 0304 	and.w	r3, r3, #4
 8003248:	2b04      	cmp	r3, #4
 800324a:	d11b      	bne.n	8003284 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f06f 0204 	mvn.w	r2, #4
 8003254:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2202      	movs	r2, #2
 800325a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003266:	2b00      	cmp	r3, #0
 8003268:	d003      	beq.n	8003272 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 f8db 	bl	8003426 <HAL_TIM_IC_CaptureCallback>
 8003270:	e005      	b.n	800327e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 f8cd 	bl	8003412 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f000 f8de 	bl	800343a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	f003 0308 	and.w	r3, r3, #8
 800328e:	2b08      	cmp	r3, #8
 8003290:	d122      	bne.n	80032d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	f003 0308 	and.w	r3, r3, #8
 800329c:	2b08      	cmp	r3, #8
 800329e:	d11b      	bne.n	80032d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f06f 0208 	mvn.w	r2, #8
 80032a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2204      	movs	r2, #4
 80032ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	69db      	ldr	r3, [r3, #28]
 80032b6:	f003 0303 	and.w	r3, r3, #3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d003      	beq.n	80032c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 f8b1 	bl	8003426 <HAL_TIM_IC_CaptureCallback>
 80032c4:	e005      	b.n	80032d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 f8a3 	bl	8003412 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 f8b4 	bl	800343a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	f003 0310 	and.w	r3, r3, #16
 80032e2:	2b10      	cmp	r3, #16
 80032e4:	d122      	bne.n	800332c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	f003 0310 	and.w	r3, r3, #16
 80032f0:	2b10      	cmp	r3, #16
 80032f2:	d11b      	bne.n	800332c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f06f 0210 	mvn.w	r2, #16
 80032fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2208      	movs	r2, #8
 8003302:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	69db      	ldr	r3, [r3, #28]
 800330a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800330e:	2b00      	cmp	r3, #0
 8003310:	d003      	beq.n	800331a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 f887 	bl	8003426 <HAL_TIM_IC_CaptureCallback>
 8003318:	e005      	b.n	8003326 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 f879 	bl	8003412 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 f88a 	bl	800343a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	2b01      	cmp	r3, #1
 8003338:	d10e      	bne.n	8003358 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	f003 0301 	and.w	r3, r3, #1
 8003344:	2b01      	cmp	r3, #1
 8003346:	d107      	bne.n	8003358 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f06f 0201 	mvn.w	r2, #1
 8003350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f7fd fb6c 	bl	8000a30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003362:	2b80      	cmp	r3, #128	; 0x80
 8003364:	d10e      	bne.n	8003384 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003370:	2b80      	cmp	r3, #128	; 0x80
 8003372:	d107      	bne.n	8003384 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800337c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 f914 	bl	80035ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800338e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003392:	d10e      	bne.n	80033b2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800339e:	2b80      	cmp	r3, #128	; 0x80
 80033a0:	d107      	bne.n	80033b2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80033aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 f907 	bl	80035c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033bc:	2b40      	cmp	r3, #64	; 0x40
 80033be:	d10e      	bne.n	80033de <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ca:	2b40      	cmp	r3, #64	; 0x40
 80033cc:	d107      	bne.n	80033de <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80033d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f000 f838 	bl	800344e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	f003 0320 	and.w	r3, r3, #32
 80033e8:	2b20      	cmp	r3, #32
 80033ea:	d10e      	bne.n	800340a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	f003 0320 	and.w	r3, r3, #32
 80033f6:	2b20      	cmp	r3, #32
 80033f8:	d107      	bne.n	800340a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f06f 0220 	mvn.w	r2, #32
 8003402:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 f8c7 	bl	8003598 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800340a:	bf00      	nop
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003412:	b480      	push	{r7}
 8003414:	b083      	sub	sp, #12
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800341a:	bf00      	nop
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr

08003426 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003426:	b480      	push	{r7}
 8003428:	b083      	sub	sp, #12
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800342e:	bf00      	nop
 8003430:	370c      	adds	r7, #12
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr

0800343a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800343a:	b480      	push	{r7}
 800343c:	b083      	sub	sp, #12
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003442:	bf00      	nop
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr

0800344e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800344e:	b480      	push	{r7}
 8003450:	b083      	sub	sp, #12
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003456:	bf00      	nop
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
	...

08003464 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a40      	ldr	r2, [pc, #256]	; (8003578 <TIM_Base_SetConfig+0x114>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d013      	beq.n	80034a4 <TIM_Base_SetConfig+0x40>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003482:	d00f      	beq.n	80034a4 <TIM_Base_SetConfig+0x40>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a3d      	ldr	r2, [pc, #244]	; (800357c <TIM_Base_SetConfig+0x118>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d00b      	beq.n	80034a4 <TIM_Base_SetConfig+0x40>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a3c      	ldr	r2, [pc, #240]	; (8003580 <TIM_Base_SetConfig+0x11c>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d007      	beq.n	80034a4 <TIM_Base_SetConfig+0x40>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a3b      	ldr	r2, [pc, #236]	; (8003584 <TIM_Base_SetConfig+0x120>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d003      	beq.n	80034a4 <TIM_Base_SetConfig+0x40>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a3a      	ldr	r2, [pc, #232]	; (8003588 <TIM_Base_SetConfig+0x124>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d108      	bne.n	80034b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a2f      	ldr	r2, [pc, #188]	; (8003578 <TIM_Base_SetConfig+0x114>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d01f      	beq.n	80034fe <TIM_Base_SetConfig+0x9a>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034c4:	d01b      	beq.n	80034fe <TIM_Base_SetConfig+0x9a>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a2c      	ldr	r2, [pc, #176]	; (800357c <TIM_Base_SetConfig+0x118>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d017      	beq.n	80034fe <TIM_Base_SetConfig+0x9a>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a2b      	ldr	r2, [pc, #172]	; (8003580 <TIM_Base_SetConfig+0x11c>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d013      	beq.n	80034fe <TIM_Base_SetConfig+0x9a>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a2a      	ldr	r2, [pc, #168]	; (8003584 <TIM_Base_SetConfig+0x120>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d00f      	beq.n	80034fe <TIM_Base_SetConfig+0x9a>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a29      	ldr	r2, [pc, #164]	; (8003588 <TIM_Base_SetConfig+0x124>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d00b      	beq.n	80034fe <TIM_Base_SetConfig+0x9a>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a28      	ldr	r2, [pc, #160]	; (800358c <TIM_Base_SetConfig+0x128>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d007      	beq.n	80034fe <TIM_Base_SetConfig+0x9a>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a27      	ldr	r2, [pc, #156]	; (8003590 <TIM_Base_SetConfig+0x12c>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d003      	beq.n	80034fe <TIM_Base_SetConfig+0x9a>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a26      	ldr	r2, [pc, #152]	; (8003594 <TIM_Base_SetConfig+0x130>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d108      	bne.n	8003510 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003504:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	4313      	orrs	r3, r2
 800350e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	4313      	orrs	r3, r2
 800351c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a10      	ldr	r2, [pc, #64]	; (8003578 <TIM_Base_SetConfig+0x114>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d00f      	beq.n	800355c <TIM_Base_SetConfig+0xf8>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a12      	ldr	r2, [pc, #72]	; (8003588 <TIM_Base_SetConfig+0x124>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d00b      	beq.n	800355c <TIM_Base_SetConfig+0xf8>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a11      	ldr	r2, [pc, #68]	; (800358c <TIM_Base_SetConfig+0x128>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d007      	beq.n	800355c <TIM_Base_SetConfig+0xf8>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a10      	ldr	r2, [pc, #64]	; (8003590 <TIM_Base_SetConfig+0x12c>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d003      	beq.n	800355c <TIM_Base_SetConfig+0xf8>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a0f      	ldr	r2, [pc, #60]	; (8003594 <TIM_Base_SetConfig+0x130>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d103      	bne.n	8003564 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	691a      	ldr	r2, [r3, #16]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	615a      	str	r2, [r3, #20]
}
 800356a:	bf00      	nop
 800356c:	3714      	adds	r7, #20
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	40012c00 	.word	0x40012c00
 800357c:	40000400 	.word	0x40000400
 8003580:	40000800 	.word	0x40000800
 8003584:	40000c00 	.word	0x40000c00
 8003588:	40013400 	.word	0x40013400
 800358c:	40014000 	.word	0x40014000
 8003590:	40014400 	.word	0x40014400
 8003594:	40014800 	.word	0x40014800

08003598 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035a0:	bf00      	nop
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e042      	b.n	800366c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d106      	bne.n	80035fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f7fd fbb3 	bl	8000d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2224      	movs	r2, #36	; 0x24
 8003602:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 0201 	bic.w	r2, r2, #1
 8003614:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f998 	bl	800394c <UART_SetConfig>
 800361c:	4603      	mov	r3, r0
 800361e:	2b01      	cmp	r3, #1
 8003620:	d101      	bne.n	8003626 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e022      	b.n	800366c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362a:	2b00      	cmp	r3, #0
 800362c:	d002      	beq.n	8003634 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 fc88 	bl	8003f44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	685a      	ldr	r2, [r3, #4]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003642:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689a      	ldr	r2, [r3, #8]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003652:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f042 0201 	orr.w	r2, r2, #1
 8003662:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f000 fd0f 	bl	8004088 <UART_CheckIdleState>
 800366a:	4603      	mov	r3, r0
}
 800366c:	4618      	mov	r0, r3
 800366e:	3708      	adds	r7, #8
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b08a      	sub	sp, #40	; 0x28
 8003678:	af02      	add	r7, sp, #8
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	603b      	str	r3, [r7, #0]
 8003680:	4613      	mov	r3, r2
 8003682:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800368a:	2b20      	cmp	r3, #32
 800368c:	f040 8084 	bne.w	8003798 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d002      	beq.n	800369c <HAL_UART_Transmit+0x28>
 8003696:	88fb      	ldrh	r3, [r7, #6]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d101      	bne.n	80036a0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e07c      	b.n	800379a <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d101      	bne.n	80036ae <HAL_UART_Transmit+0x3a>
 80036aa:	2302      	movs	r3, #2
 80036ac:	e075      	b.n	800379a <HAL_UART_Transmit+0x126>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2221      	movs	r2, #33	; 0x21
 80036c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036c6:	f7fd fd49 	bl	800115c <HAL_GetTick>
 80036ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	88fa      	ldrh	r2, [r7, #6]
 80036d0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	88fa      	ldrh	r2, [r7, #6]
 80036d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036e4:	d108      	bne.n	80036f8 <HAL_UART_Transmit+0x84>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d104      	bne.n	80036f8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80036ee:	2300      	movs	r3, #0
 80036f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	61bb      	str	r3, [r7, #24]
 80036f6:	e003      	b.n	8003700 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036fc:	2300      	movs	r3, #0
 80036fe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003708:	e02d      	b.n	8003766 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	9300      	str	r3, [sp, #0]
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	2200      	movs	r2, #0
 8003712:	2180      	movs	r1, #128	; 0x80
 8003714:	68f8      	ldr	r0, [r7, #12]
 8003716:	f000 fd02 	bl	800411e <UART_WaitOnFlagUntilTimeout>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d001      	beq.n	8003724 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e03a      	b.n	800379a <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10b      	bne.n	8003742 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	881a      	ldrh	r2, [r3, #0]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003736:	b292      	uxth	r2, r2
 8003738:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	3302      	adds	r3, #2
 800373e:	61bb      	str	r3, [r7, #24]
 8003740:	e008      	b.n	8003754 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	781a      	ldrb	r2, [r3, #0]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	b292      	uxth	r2, r2
 800374c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	3301      	adds	r3, #1
 8003752:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800375a:	b29b      	uxth	r3, r3
 800375c:	3b01      	subs	r3, #1
 800375e:	b29a      	uxth	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800376c:	b29b      	uxth	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d1cb      	bne.n	800370a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	9300      	str	r3, [sp, #0]
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	2200      	movs	r2, #0
 800377a:	2140      	movs	r1, #64	; 0x40
 800377c:	68f8      	ldr	r0, [r7, #12]
 800377e:	f000 fcce 	bl	800411e <UART_WaitOnFlagUntilTimeout>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d001      	beq.n	800378c <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e006      	b.n	800379a <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2220      	movs	r2, #32
 8003790:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003794:	2300      	movs	r3, #0
 8003796:	e000      	b.n	800379a <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003798:	2302      	movs	r3, #2
  }
}
 800379a:	4618      	mov	r0, r3
 800379c:	3720      	adds	r7, #32
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037a2:	b580      	push	{r7, lr}
 80037a4:	b08a      	sub	sp, #40	; 0x28
 80037a6:	af02      	add	r7, sp, #8
 80037a8:	60f8      	str	r0, [r7, #12]
 80037aa:	60b9      	str	r1, [r7, #8]
 80037ac:	603b      	str	r3, [r7, #0]
 80037ae:	4613      	mov	r3, r2
 80037b0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b8:	2b20      	cmp	r3, #32
 80037ba:	f040 80c1 	bne.w	8003940 <HAL_UART_Receive+0x19e>
  {
    if ((pData == NULL) || (Size == 0U))
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d002      	beq.n	80037ca <HAL_UART_Receive+0x28>
 80037c4:	88fb      	ldrh	r3, [r7, #6]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e0b9      	b.n	8003942 <HAL_UART_Receive+0x1a0>
    }

    __HAL_LOCK(huart);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d101      	bne.n	80037dc <HAL_UART_Receive+0x3a>
 80037d8:	2302      	movs	r3, #2
 80037da:	e0b2      	b.n	8003942 <HAL_UART_Receive+0x1a0>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2222      	movs	r2, #34	; 0x22
 80037f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037fa:	f7fd fcaf 	bl	800115c <HAL_GetTick>
 80037fe:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	88fa      	ldrh	r2, [r7, #6]
 8003804:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	88fa      	ldrh	r2, [r7, #6]
 800380c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003818:	d10e      	bne.n	8003838 <HAL_UART_Receive+0x96>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d105      	bne.n	800382e <HAL_UART_Receive+0x8c>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003828:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800382c:	e02d      	b.n	800388a <HAL_UART_Receive+0xe8>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	22ff      	movs	r2, #255	; 0xff
 8003832:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003836:	e028      	b.n	800388a <HAL_UART_Receive+0xe8>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d10d      	bne.n	800385c <HAL_UART_Receive+0xba>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d104      	bne.n	8003852 <HAL_UART_Receive+0xb0>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	22ff      	movs	r2, #255	; 0xff
 800384c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003850:	e01b      	b.n	800388a <HAL_UART_Receive+0xe8>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	227f      	movs	r2, #127	; 0x7f
 8003856:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800385a:	e016      	b.n	800388a <HAL_UART_Receive+0xe8>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003864:	d10d      	bne.n	8003882 <HAL_UART_Receive+0xe0>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d104      	bne.n	8003878 <HAL_UART_Receive+0xd6>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	227f      	movs	r2, #127	; 0x7f
 8003872:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003876:	e008      	b.n	800388a <HAL_UART_Receive+0xe8>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	223f      	movs	r2, #63	; 0x3f
 800387c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003880:	e003      	b.n	800388a <HAL_UART_Receive+0xe8>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003890:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800389a:	d108      	bne.n	80038ae <HAL_UART_Receive+0x10c>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	691b      	ldr	r3, [r3, #16]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d104      	bne.n	80038ae <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 80038a4:	2300      	movs	r3, #0
 80038a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	61bb      	str	r3, [r7, #24]
 80038ac:	e003      	b.n	80038b6 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038b2:	2300      	movs	r3, #0
 80038b4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80038be:	e033      	b.n	8003928 <HAL_UART_Receive+0x186>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	9300      	str	r3, [sp, #0]
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	2200      	movs	r2, #0
 80038c8:	2120      	movs	r1, #32
 80038ca:	68f8      	ldr	r0, [r7, #12]
 80038cc:	f000 fc27 	bl	800411e <UART_WaitOnFlagUntilTimeout>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e033      	b.n	8003942 <HAL_UART_Receive+0x1a0>
      }
      if (pdata8bits == NULL)
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d10c      	bne.n	80038fa <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80038e6:	b29a      	uxth	r2, r3
 80038e8:	8a7b      	ldrh	r3, [r7, #18]
 80038ea:	4013      	ands	r3, r2
 80038ec:	b29a      	uxth	r2, r3
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	3302      	adds	r3, #2
 80038f6:	61bb      	str	r3, [r7, #24]
 80038f8:	e00d      	b.n	8003916 <HAL_UART_Receive+0x174>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003900:	b29b      	uxth	r3, r3
 8003902:	b2da      	uxtb	r2, r3
 8003904:	8a7b      	ldrh	r3, [r7, #18]
 8003906:	b2db      	uxtb	r3, r3
 8003908:	4013      	ands	r3, r2
 800390a:	b2da      	uxtb	r2, r3
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	3301      	adds	r3, #1
 8003914:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800391c:	b29b      	uxth	r3, r3
 800391e:	3b01      	subs	r3, #1
 8003920:	b29a      	uxth	r2, r3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800392e:	b29b      	uxth	r3, r3
 8003930:	2b00      	cmp	r3, #0
 8003932:	d1c5      	bne.n	80038c0 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2220      	movs	r2, #32
 8003938:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800393c:	2300      	movs	r3, #0
 800393e:	e000      	b.n	8003942 <HAL_UART_Receive+0x1a0>
  }
  else
  {
    return HAL_BUSY;
 8003940:	2302      	movs	r3, #2
  }
}
 8003942:	4618      	mov	r0, r3
 8003944:	3720      	adds	r7, #32
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
	...

0800394c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800394c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003950:	b08c      	sub	sp, #48	; 0x30
 8003952:	af00      	add	r7, sp, #0
 8003954:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003956:	2300      	movs	r3, #0
 8003958:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	689a      	ldr	r2, [r3, #8]
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	431a      	orrs	r2, r3
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	431a      	orrs	r2, r3
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	69db      	ldr	r3, [r3, #28]
 8003970:	4313      	orrs	r3, r2
 8003972:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	4baa      	ldr	r3, [pc, #680]	; (8003c24 <UART_SetConfig+0x2d8>)
 800397c:	4013      	ands	r3, r2
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	6812      	ldr	r2, [r2, #0]
 8003982:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003984:	430b      	orrs	r3, r1
 8003986:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	68da      	ldr	r2, [r3, #12]
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	430a      	orrs	r2, r1
 800399c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a9f      	ldr	r2, [pc, #636]	; (8003c28 <UART_SetConfig+0x2dc>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d004      	beq.n	80039b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039b4:	4313      	orrs	r3, r2
 80039b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80039c2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	6812      	ldr	r2, [r2, #0]
 80039ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039cc:	430b      	orrs	r3, r1
 80039ce:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d6:	f023 010f 	bic.w	r1, r3, #15
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	430a      	orrs	r2, r1
 80039e4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a90      	ldr	r2, [pc, #576]	; (8003c2c <UART_SetConfig+0x2e0>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d125      	bne.n	8003a3c <UART_SetConfig+0xf0>
 80039f0:	4b8f      	ldr	r3, [pc, #572]	; (8003c30 <UART_SetConfig+0x2e4>)
 80039f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f6:	f003 0303 	and.w	r3, r3, #3
 80039fa:	2b03      	cmp	r3, #3
 80039fc:	d81a      	bhi.n	8003a34 <UART_SetConfig+0xe8>
 80039fe:	a201      	add	r2, pc, #4	; (adr r2, 8003a04 <UART_SetConfig+0xb8>)
 8003a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a04:	08003a15 	.word	0x08003a15
 8003a08:	08003a25 	.word	0x08003a25
 8003a0c:	08003a1d 	.word	0x08003a1d
 8003a10:	08003a2d 	.word	0x08003a2d
 8003a14:	2301      	movs	r3, #1
 8003a16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a1a:	e116      	b.n	8003c4a <UART_SetConfig+0x2fe>
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a22:	e112      	b.n	8003c4a <UART_SetConfig+0x2fe>
 8003a24:	2304      	movs	r3, #4
 8003a26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a2a:	e10e      	b.n	8003c4a <UART_SetConfig+0x2fe>
 8003a2c:	2308      	movs	r3, #8
 8003a2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a32:	e10a      	b.n	8003c4a <UART_SetConfig+0x2fe>
 8003a34:	2310      	movs	r3, #16
 8003a36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a3a:	e106      	b.n	8003c4a <UART_SetConfig+0x2fe>
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a7c      	ldr	r2, [pc, #496]	; (8003c34 <UART_SetConfig+0x2e8>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d138      	bne.n	8003ab8 <UART_SetConfig+0x16c>
 8003a46:	4b7a      	ldr	r3, [pc, #488]	; (8003c30 <UART_SetConfig+0x2e4>)
 8003a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a4c:	f003 030c 	and.w	r3, r3, #12
 8003a50:	2b0c      	cmp	r3, #12
 8003a52:	d82d      	bhi.n	8003ab0 <UART_SetConfig+0x164>
 8003a54:	a201      	add	r2, pc, #4	; (adr r2, 8003a5c <UART_SetConfig+0x110>)
 8003a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a5a:	bf00      	nop
 8003a5c:	08003a91 	.word	0x08003a91
 8003a60:	08003ab1 	.word	0x08003ab1
 8003a64:	08003ab1 	.word	0x08003ab1
 8003a68:	08003ab1 	.word	0x08003ab1
 8003a6c:	08003aa1 	.word	0x08003aa1
 8003a70:	08003ab1 	.word	0x08003ab1
 8003a74:	08003ab1 	.word	0x08003ab1
 8003a78:	08003ab1 	.word	0x08003ab1
 8003a7c:	08003a99 	.word	0x08003a99
 8003a80:	08003ab1 	.word	0x08003ab1
 8003a84:	08003ab1 	.word	0x08003ab1
 8003a88:	08003ab1 	.word	0x08003ab1
 8003a8c:	08003aa9 	.word	0x08003aa9
 8003a90:	2300      	movs	r3, #0
 8003a92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a96:	e0d8      	b.n	8003c4a <UART_SetConfig+0x2fe>
 8003a98:	2302      	movs	r3, #2
 8003a9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a9e:	e0d4      	b.n	8003c4a <UART_SetConfig+0x2fe>
 8003aa0:	2304      	movs	r3, #4
 8003aa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003aa6:	e0d0      	b.n	8003c4a <UART_SetConfig+0x2fe>
 8003aa8:	2308      	movs	r3, #8
 8003aaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003aae:	e0cc      	b.n	8003c4a <UART_SetConfig+0x2fe>
 8003ab0:	2310      	movs	r3, #16
 8003ab2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ab6:	e0c8      	b.n	8003c4a <UART_SetConfig+0x2fe>
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a5e      	ldr	r2, [pc, #376]	; (8003c38 <UART_SetConfig+0x2ec>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d125      	bne.n	8003b0e <UART_SetConfig+0x1c2>
 8003ac2:	4b5b      	ldr	r3, [pc, #364]	; (8003c30 <UART_SetConfig+0x2e4>)
 8003ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003acc:	2b30      	cmp	r3, #48	; 0x30
 8003ace:	d016      	beq.n	8003afe <UART_SetConfig+0x1b2>
 8003ad0:	2b30      	cmp	r3, #48	; 0x30
 8003ad2:	d818      	bhi.n	8003b06 <UART_SetConfig+0x1ba>
 8003ad4:	2b20      	cmp	r3, #32
 8003ad6:	d00a      	beq.n	8003aee <UART_SetConfig+0x1a2>
 8003ad8:	2b20      	cmp	r3, #32
 8003ada:	d814      	bhi.n	8003b06 <UART_SetConfig+0x1ba>
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d002      	beq.n	8003ae6 <UART_SetConfig+0x19a>
 8003ae0:	2b10      	cmp	r3, #16
 8003ae2:	d008      	beq.n	8003af6 <UART_SetConfig+0x1aa>
 8003ae4:	e00f      	b.n	8003b06 <UART_SetConfig+0x1ba>
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003aec:	e0ad      	b.n	8003c4a <UART_SetConfig+0x2fe>
 8003aee:	2302      	movs	r3, #2
 8003af0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003af4:	e0a9      	b.n	8003c4a <UART_SetConfig+0x2fe>
 8003af6:	2304      	movs	r3, #4
 8003af8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003afc:	e0a5      	b.n	8003c4a <UART_SetConfig+0x2fe>
 8003afe:	2308      	movs	r3, #8
 8003b00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b04:	e0a1      	b.n	8003c4a <UART_SetConfig+0x2fe>
 8003b06:	2310      	movs	r3, #16
 8003b08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b0c:	e09d      	b.n	8003c4a <UART_SetConfig+0x2fe>
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a4a      	ldr	r2, [pc, #296]	; (8003c3c <UART_SetConfig+0x2f0>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d125      	bne.n	8003b64 <UART_SetConfig+0x218>
 8003b18:	4b45      	ldr	r3, [pc, #276]	; (8003c30 <UART_SetConfig+0x2e4>)
 8003b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b1e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003b22:	2bc0      	cmp	r3, #192	; 0xc0
 8003b24:	d016      	beq.n	8003b54 <UART_SetConfig+0x208>
 8003b26:	2bc0      	cmp	r3, #192	; 0xc0
 8003b28:	d818      	bhi.n	8003b5c <UART_SetConfig+0x210>
 8003b2a:	2b80      	cmp	r3, #128	; 0x80
 8003b2c:	d00a      	beq.n	8003b44 <UART_SetConfig+0x1f8>
 8003b2e:	2b80      	cmp	r3, #128	; 0x80
 8003b30:	d814      	bhi.n	8003b5c <UART_SetConfig+0x210>
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d002      	beq.n	8003b3c <UART_SetConfig+0x1f0>
 8003b36:	2b40      	cmp	r3, #64	; 0x40
 8003b38:	d008      	beq.n	8003b4c <UART_SetConfig+0x200>
 8003b3a:	e00f      	b.n	8003b5c <UART_SetConfig+0x210>
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b42:	e082      	b.n	8003c4a <UART_SetConfig+0x2fe>
 8003b44:	2302      	movs	r3, #2
 8003b46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b4a:	e07e      	b.n	8003c4a <UART_SetConfig+0x2fe>
 8003b4c:	2304      	movs	r3, #4
 8003b4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b52:	e07a      	b.n	8003c4a <UART_SetConfig+0x2fe>
 8003b54:	2308      	movs	r3, #8
 8003b56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b5a:	e076      	b.n	8003c4a <UART_SetConfig+0x2fe>
 8003b5c:	2310      	movs	r3, #16
 8003b5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b62:	e072      	b.n	8003c4a <UART_SetConfig+0x2fe>
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a35      	ldr	r2, [pc, #212]	; (8003c40 <UART_SetConfig+0x2f4>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d12a      	bne.n	8003bc4 <UART_SetConfig+0x278>
 8003b6e:	4b30      	ldr	r3, [pc, #192]	; (8003c30 <UART_SetConfig+0x2e4>)
 8003b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b7c:	d01a      	beq.n	8003bb4 <UART_SetConfig+0x268>
 8003b7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b82:	d81b      	bhi.n	8003bbc <UART_SetConfig+0x270>
 8003b84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b88:	d00c      	beq.n	8003ba4 <UART_SetConfig+0x258>
 8003b8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b8e:	d815      	bhi.n	8003bbc <UART_SetConfig+0x270>
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d003      	beq.n	8003b9c <UART_SetConfig+0x250>
 8003b94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b98:	d008      	beq.n	8003bac <UART_SetConfig+0x260>
 8003b9a:	e00f      	b.n	8003bbc <UART_SetConfig+0x270>
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ba2:	e052      	b.n	8003c4a <UART_SetConfig+0x2fe>
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003baa:	e04e      	b.n	8003c4a <UART_SetConfig+0x2fe>
 8003bac:	2304      	movs	r3, #4
 8003bae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bb2:	e04a      	b.n	8003c4a <UART_SetConfig+0x2fe>
 8003bb4:	2308      	movs	r3, #8
 8003bb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bba:	e046      	b.n	8003c4a <UART_SetConfig+0x2fe>
 8003bbc:	2310      	movs	r3, #16
 8003bbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bc2:	e042      	b.n	8003c4a <UART_SetConfig+0x2fe>
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a17      	ldr	r2, [pc, #92]	; (8003c28 <UART_SetConfig+0x2dc>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d13a      	bne.n	8003c44 <UART_SetConfig+0x2f8>
 8003bce:	4b18      	ldr	r3, [pc, #96]	; (8003c30 <UART_SetConfig+0x2e4>)
 8003bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003bd8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003bdc:	d01a      	beq.n	8003c14 <UART_SetConfig+0x2c8>
 8003bde:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003be2:	d81b      	bhi.n	8003c1c <UART_SetConfig+0x2d0>
 8003be4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003be8:	d00c      	beq.n	8003c04 <UART_SetConfig+0x2b8>
 8003bea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bee:	d815      	bhi.n	8003c1c <UART_SetConfig+0x2d0>
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d003      	beq.n	8003bfc <UART_SetConfig+0x2b0>
 8003bf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bf8:	d008      	beq.n	8003c0c <UART_SetConfig+0x2c0>
 8003bfa:	e00f      	b.n	8003c1c <UART_SetConfig+0x2d0>
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c02:	e022      	b.n	8003c4a <UART_SetConfig+0x2fe>
 8003c04:	2302      	movs	r3, #2
 8003c06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c0a:	e01e      	b.n	8003c4a <UART_SetConfig+0x2fe>
 8003c0c:	2304      	movs	r3, #4
 8003c0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c12:	e01a      	b.n	8003c4a <UART_SetConfig+0x2fe>
 8003c14:	2308      	movs	r3, #8
 8003c16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c1a:	e016      	b.n	8003c4a <UART_SetConfig+0x2fe>
 8003c1c:	2310      	movs	r3, #16
 8003c1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c22:	e012      	b.n	8003c4a <UART_SetConfig+0x2fe>
 8003c24:	cfff69f3 	.word	0xcfff69f3
 8003c28:	40008000 	.word	0x40008000
 8003c2c:	40013800 	.word	0x40013800
 8003c30:	40021000 	.word	0x40021000
 8003c34:	40004400 	.word	0x40004400
 8003c38:	40004800 	.word	0x40004800
 8003c3c:	40004c00 	.word	0x40004c00
 8003c40:	40005000 	.word	0x40005000
 8003c44:	2310      	movs	r3, #16
 8003c46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4aae      	ldr	r2, [pc, #696]	; (8003f08 <UART_SetConfig+0x5bc>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	f040 8097 	bne.w	8003d84 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c56:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003c5a:	2b08      	cmp	r3, #8
 8003c5c:	d823      	bhi.n	8003ca6 <UART_SetConfig+0x35a>
 8003c5e:	a201      	add	r2, pc, #4	; (adr r2, 8003c64 <UART_SetConfig+0x318>)
 8003c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c64:	08003c89 	.word	0x08003c89
 8003c68:	08003ca7 	.word	0x08003ca7
 8003c6c:	08003c91 	.word	0x08003c91
 8003c70:	08003ca7 	.word	0x08003ca7
 8003c74:	08003c97 	.word	0x08003c97
 8003c78:	08003ca7 	.word	0x08003ca7
 8003c7c:	08003ca7 	.word	0x08003ca7
 8003c80:	08003ca7 	.word	0x08003ca7
 8003c84:	08003c9f 	.word	0x08003c9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c88:	f7fe fbd8 	bl	800243c <HAL_RCC_GetPCLK1Freq>
 8003c8c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c8e:	e010      	b.n	8003cb2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c90:	4b9e      	ldr	r3, [pc, #632]	; (8003f0c <UART_SetConfig+0x5c0>)
 8003c92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003c94:	e00d      	b.n	8003cb2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c96:	f7fe fb39 	bl	800230c <HAL_RCC_GetSysClockFreq>
 8003c9a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c9c:	e009      	b.n	8003cb2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ca2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ca4:	e005      	b.n	8003cb2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003cb0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f000 8130 	beq.w	8003f1a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbe:	4a94      	ldr	r2, [pc, #592]	; (8003f10 <UART_SetConfig+0x5c4>)
 8003cc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ccc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	685a      	ldr	r2, [r3, #4]
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	4413      	add	r3, r2
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d305      	bcc.n	8003cea <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ce4:	69ba      	ldr	r2, [r7, #24]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d903      	bls.n	8003cf2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003cf0:	e113      	b.n	8003f1a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	60bb      	str	r3, [r7, #8]
 8003cf8:	60fa      	str	r2, [r7, #12]
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfe:	4a84      	ldr	r2, [pc, #528]	; (8003f10 <UART_SetConfig+0x5c4>)
 8003d00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	2200      	movs	r2, #0
 8003d08:	603b      	str	r3, [r7, #0]
 8003d0a:	607a      	str	r2, [r7, #4]
 8003d0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d10:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003d14:	f7fc fac4 	bl	80002a0 <__aeabi_uldivmod>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	4610      	mov	r0, r2
 8003d1e:	4619      	mov	r1, r3
 8003d20:	f04f 0200 	mov.w	r2, #0
 8003d24:	f04f 0300 	mov.w	r3, #0
 8003d28:	020b      	lsls	r3, r1, #8
 8003d2a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003d2e:	0202      	lsls	r2, r0, #8
 8003d30:	6979      	ldr	r1, [r7, #20]
 8003d32:	6849      	ldr	r1, [r1, #4]
 8003d34:	0849      	lsrs	r1, r1, #1
 8003d36:	2000      	movs	r0, #0
 8003d38:	460c      	mov	r4, r1
 8003d3a:	4605      	mov	r5, r0
 8003d3c:	eb12 0804 	adds.w	r8, r2, r4
 8003d40:	eb43 0905 	adc.w	r9, r3, r5
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	469a      	mov	sl, r3
 8003d4c:	4693      	mov	fp, r2
 8003d4e:	4652      	mov	r2, sl
 8003d50:	465b      	mov	r3, fp
 8003d52:	4640      	mov	r0, r8
 8003d54:	4649      	mov	r1, r9
 8003d56:	f7fc faa3 	bl	80002a0 <__aeabi_uldivmod>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	4613      	mov	r3, r2
 8003d60:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d62:	6a3b      	ldr	r3, [r7, #32]
 8003d64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d68:	d308      	bcc.n	8003d7c <UART_SetConfig+0x430>
 8003d6a:	6a3b      	ldr	r3, [r7, #32]
 8003d6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d70:	d204      	bcs.n	8003d7c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	6a3a      	ldr	r2, [r7, #32]
 8003d78:	60da      	str	r2, [r3, #12]
 8003d7a:	e0ce      	b.n	8003f1a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003d82:	e0ca      	b.n	8003f1a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	69db      	ldr	r3, [r3, #28]
 8003d88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d8c:	d166      	bne.n	8003e5c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003d8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003d92:	2b08      	cmp	r3, #8
 8003d94:	d827      	bhi.n	8003de6 <UART_SetConfig+0x49a>
 8003d96:	a201      	add	r2, pc, #4	; (adr r2, 8003d9c <UART_SetConfig+0x450>)
 8003d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d9c:	08003dc1 	.word	0x08003dc1
 8003da0:	08003dc9 	.word	0x08003dc9
 8003da4:	08003dd1 	.word	0x08003dd1
 8003da8:	08003de7 	.word	0x08003de7
 8003dac:	08003dd7 	.word	0x08003dd7
 8003db0:	08003de7 	.word	0x08003de7
 8003db4:	08003de7 	.word	0x08003de7
 8003db8:	08003de7 	.word	0x08003de7
 8003dbc:	08003ddf 	.word	0x08003ddf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dc0:	f7fe fb3c 	bl	800243c <HAL_RCC_GetPCLK1Freq>
 8003dc4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003dc6:	e014      	b.n	8003df2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003dc8:	f7fe fb4e 	bl	8002468 <HAL_RCC_GetPCLK2Freq>
 8003dcc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003dce:	e010      	b.n	8003df2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dd0:	4b4e      	ldr	r3, [pc, #312]	; (8003f0c <UART_SetConfig+0x5c0>)
 8003dd2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003dd4:	e00d      	b.n	8003df2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dd6:	f7fe fa99 	bl	800230c <HAL_RCC_GetSysClockFreq>
 8003dda:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003ddc:	e009      	b.n	8003df2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003de2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003de4:	e005      	b.n	8003df2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003de6:	2300      	movs	r3, #0
 8003de8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003df0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f000 8090 	beq.w	8003f1a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfe:	4a44      	ldr	r2, [pc, #272]	; (8003f10 <UART_SetConfig+0x5c4>)
 8003e00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e04:	461a      	mov	r2, r3
 8003e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e08:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e0c:	005a      	lsls	r2, r3, #1
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	085b      	lsrs	r3, r3, #1
 8003e14:	441a      	add	r2, r3
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e1e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e20:	6a3b      	ldr	r3, [r7, #32]
 8003e22:	2b0f      	cmp	r3, #15
 8003e24:	d916      	bls.n	8003e54 <UART_SetConfig+0x508>
 8003e26:	6a3b      	ldr	r3, [r7, #32]
 8003e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e2c:	d212      	bcs.n	8003e54 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e2e:	6a3b      	ldr	r3, [r7, #32]
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	f023 030f 	bic.w	r3, r3, #15
 8003e36:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e38:	6a3b      	ldr	r3, [r7, #32]
 8003e3a:	085b      	lsrs	r3, r3, #1
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	f003 0307 	and.w	r3, r3, #7
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	8bfb      	ldrh	r3, [r7, #30]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	8bfa      	ldrh	r2, [r7, #30]
 8003e50:	60da      	str	r2, [r3, #12]
 8003e52:	e062      	b.n	8003f1a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003e5a:	e05e      	b.n	8003f1a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e5c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003e60:	2b08      	cmp	r3, #8
 8003e62:	d828      	bhi.n	8003eb6 <UART_SetConfig+0x56a>
 8003e64:	a201      	add	r2, pc, #4	; (adr r2, 8003e6c <UART_SetConfig+0x520>)
 8003e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e6a:	bf00      	nop
 8003e6c:	08003e91 	.word	0x08003e91
 8003e70:	08003e99 	.word	0x08003e99
 8003e74:	08003ea1 	.word	0x08003ea1
 8003e78:	08003eb7 	.word	0x08003eb7
 8003e7c:	08003ea7 	.word	0x08003ea7
 8003e80:	08003eb7 	.word	0x08003eb7
 8003e84:	08003eb7 	.word	0x08003eb7
 8003e88:	08003eb7 	.word	0x08003eb7
 8003e8c:	08003eaf 	.word	0x08003eaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e90:	f7fe fad4 	bl	800243c <HAL_RCC_GetPCLK1Freq>
 8003e94:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e96:	e014      	b.n	8003ec2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e98:	f7fe fae6 	bl	8002468 <HAL_RCC_GetPCLK2Freq>
 8003e9c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e9e:	e010      	b.n	8003ec2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ea0:	4b1a      	ldr	r3, [pc, #104]	; (8003f0c <UART_SetConfig+0x5c0>)
 8003ea2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ea4:	e00d      	b.n	8003ec2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ea6:	f7fe fa31 	bl	800230c <HAL_RCC_GetSysClockFreq>
 8003eaa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003eac:	e009      	b.n	8003ec2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eb2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003eb4:	e005      	b.n	8003ec2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003ec0:	bf00      	nop
    }

    if (pclk != 0U)
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d028      	beq.n	8003f1a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ecc:	4a10      	ldr	r2, [pc, #64]	; (8003f10 <UART_SetConfig+0x5c4>)
 8003ece:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed6:	fbb3 f2f2 	udiv	r2, r3, r2
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	085b      	lsrs	r3, r3, #1
 8003ee0:	441a      	add	r2, r3
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eea:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003eec:	6a3b      	ldr	r3, [r7, #32]
 8003eee:	2b0f      	cmp	r3, #15
 8003ef0:	d910      	bls.n	8003f14 <UART_SetConfig+0x5c8>
 8003ef2:	6a3b      	ldr	r3, [r7, #32]
 8003ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ef8:	d20c      	bcs.n	8003f14 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003efa:	6a3b      	ldr	r3, [r7, #32]
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	60da      	str	r2, [r3, #12]
 8003f04:	e009      	b.n	8003f1a <UART_SetConfig+0x5ce>
 8003f06:	bf00      	nop
 8003f08:	40008000 	.word	0x40008000
 8003f0c:	00f42400 	.word	0x00f42400
 8003f10:	08005978 	.word	0x08005978
      }
      else
      {
        ret = HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	2200      	movs	r2, #0
 8003f34:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003f36:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3730      	adds	r7, #48	; 0x30
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003f44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f50:	f003 0301 	and.w	r3, r3, #1
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00a      	beq.n	8003f6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00a      	beq.n	8003f90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f94:	f003 0304 	and.w	r3, r3, #4
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00a      	beq.n	8003fb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb6:	f003 0308 	and.w	r3, r3, #8
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00a      	beq.n	8003fd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd8:	f003 0310 	and.w	r3, r3, #16
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00a      	beq.n	8003ff6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ffa:	f003 0320 	and.w	r3, r3, #32
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00a      	beq.n	8004018 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	430a      	orrs	r2, r1
 8004016:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004020:	2b00      	cmp	r3, #0
 8004022:	d01a      	beq.n	800405a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	430a      	orrs	r2, r1
 8004038:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800403e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004042:	d10a      	bne.n	800405a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	430a      	orrs	r2, r1
 8004058:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800405e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00a      	beq.n	800407c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	430a      	orrs	r2, r1
 800407a:	605a      	str	r2, [r3, #4]
  }
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b086      	sub	sp, #24
 800408c:	af02      	add	r7, sp, #8
 800408e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004098:	f7fd f860 	bl	800115c <HAL_GetTick>
 800409c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0308 	and.w	r3, r3, #8
 80040a8:	2b08      	cmp	r3, #8
 80040aa:	d10e      	bne.n	80040ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040b0:	9300      	str	r3, [sp, #0]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 f82f 	bl	800411e <UART_WaitOnFlagUntilTimeout>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d001      	beq.n	80040ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e025      	b.n	8004116 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0304 	and.w	r3, r3, #4
 80040d4:	2b04      	cmp	r3, #4
 80040d6:	d10e      	bne.n	80040f6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040dc:	9300      	str	r3, [sp, #0]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 f819 	bl	800411e <UART_WaitOnFlagUntilTimeout>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d001      	beq.n	80040f6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e00f      	b.n	8004116 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2220      	movs	r2, #32
 80040fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2220      	movs	r2, #32
 8004102:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3710      	adds	r7, #16
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}

0800411e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800411e:	b580      	push	{r7, lr}
 8004120:	b09c      	sub	sp, #112	; 0x70
 8004122:	af00      	add	r7, sp, #0
 8004124:	60f8      	str	r0, [r7, #12]
 8004126:	60b9      	str	r1, [r7, #8]
 8004128:	603b      	str	r3, [r7, #0]
 800412a:	4613      	mov	r3, r2
 800412c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800412e:	e0a9      	b.n	8004284 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004130:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004132:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004136:	f000 80a5 	beq.w	8004284 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800413a:	f7fd f80f 	bl	800115c <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004146:	429a      	cmp	r2, r3
 8004148:	d302      	bcc.n	8004150 <UART_WaitOnFlagUntilTimeout+0x32>
 800414a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800414c:	2b00      	cmp	r3, #0
 800414e:	d140      	bne.n	80041d2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004156:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004158:	e853 3f00 	ldrex	r3, [r3]
 800415c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800415e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004160:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004164:	667b      	str	r3, [r7, #100]	; 0x64
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	461a      	mov	r2, r3
 800416c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800416e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004170:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004172:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004174:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004176:	e841 2300 	strex	r3, r2, [r1]
 800417a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800417c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1e6      	bne.n	8004150 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	3308      	adds	r3, #8
 8004188:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800418c:	e853 3f00 	ldrex	r3, [r3]
 8004190:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004194:	f023 0301 	bic.w	r3, r3, #1
 8004198:	663b      	str	r3, [r7, #96]	; 0x60
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	3308      	adds	r3, #8
 80041a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041a2:	64ba      	str	r2, [r7, #72]	; 0x48
 80041a4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80041a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041aa:	e841 2300 	strex	r3, r2, [r1]
 80041ae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80041b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1e5      	bne.n	8004182 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2220      	movs	r2, #32
 80041ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2220      	movs	r2, #32
 80041c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e069      	b.n	80042a6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0304 	and.w	r3, r3, #4
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d051      	beq.n	8004284 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	69db      	ldr	r3, [r3, #28]
 80041e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041ee:	d149      	bne.n	8004284 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041f8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004202:	e853 3f00 	ldrex	r3, [r3]
 8004206:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800420e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	461a      	mov	r2, r3
 8004216:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004218:	637b      	str	r3, [r7, #52]	; 0x34
 800421a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800421c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800421e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004220:	e841 2300 	strex	r3, r2, [r1]
 8004224:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1e6      	bne.n	80041fa <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	3308      	adds	r3, #8
 8004232:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	e853 3f00 	ldrex	r3, [r3]
 800423a:	613b      	str	r3, [r7, #16]
   return(result);
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	f023 0301 	bic.w	r3, r3, #1
 8004242:	66bb      	str	r3, [r7, #104]	; 0x68
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	3308      	adds	r3, #8
 800424a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800424c:	623a      	str	r2, [r7, #32]
 800424e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004250:	69f9      	ldr	r1, [r7, #28]
 8004252:	6a3a      	ldr	r2, [r7, #32]
 8004254:	e841 2300 	strex	r3, r2, [r1]
 8004258:	61bb      	str	r3, [r7, #24]
   return(result);
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1e5      	bne.n	800422c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2220      	movs	r2, #32
 8004264:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2220      	movs	r2, #32
 800426c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2220      	movs	r2, #32
 8004274:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e010      	b.n	80042a6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	69da      	ldr	r2, [r3, #28]
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	4013      	ands	r3, r2
 800428e:	68ba      	ldr	r2, [r7, #8]
 8004290:	429a      	cmp	r2, r3
 8004292:	bf0c      	ite	eq
 8004294:	2301      	moveq	r3, #1
 8004296:	2300      	movne	r3, #0
 8004298:	b2db      	uxtb	r3, r3
 800429a:	461a      	mov	r2, r3
 800429c:	79fb      	ldrb	r3, [r7, #7]
 800429e:	429a      	cmp	r2, r3
 80042a0:	f43f af46 	beq.w	8004130 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3770      	adds	r7, #112	; 0x70
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80042ae:	b480      	push	{r7}
 80042b0:	b085      	sub	sp, #20
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d101      	bne.n	80042c4 <HAL_UARTEx_DisableFifoMode+0x16>
 80042c0:	2302      	movs	r3, #2
 80042c2:	e027      	b.n	8004314 <HAL_UARTEx_DisableFifoMode+0x66>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2224      	movs	r2, #36	; 0x24
 80042d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f022 0201 	bic.w	r2, r2, #1
 80042ea:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80042f2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2220      	movs	r2, #32
 8004306:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	3714      	adds	r7, #20
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004330:	2b01      	cmp	r3, #1
 8004332:	d101      	bne.n	8004338 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004334:	2302      	movs	r3, #2
 8004336:	e02d      	b.n	8004394 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2224      	movs	r2, #36	; 0x24
 8004344:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f022 0201 	bic.w	r2, r2, #1
 800435e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	683a      	ldr	r2, [r7, #0]
 8004370:	430a      	orrs	r2, r1
 8004372:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f000 f84f 	bl	8004418 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2220      	movs	r2, #32
 8004386:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004392:	2300      	movs	r3, #0
}
 8004394:	4618      	mov	r0, r3
 8004396:	3710      	adds	r7, #16
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d101      	bne.n	80043b4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80043b0:	2302      	movs	r3, #2
 80043b2:	e02d      	b.n	8004410 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2224      	movs	r2, #36	; 0x24
 80043c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f022 0201 	bic.w	r2, r2, #1
 80043da:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	683a      	ldr	r2, [r7, #0]
 80043ec:	430a      	orrs	r2, r1
 80043ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f000 f811 	bl	8004418 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2220      	movs	r2, #32
 8004402:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	3710      	adds	r7, #16
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004424:	2b00      	cmp	r3, #0
 8004426:	d108      	bne.n	800443a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004438:	e031      	b.n	800449e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800443a:	2308      	movs	r3, #8
 800443c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800443e:	2308      	movs	r3, #8
 8004440:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	0e5b      	lsrs	r3, r3, #25
 800444a:	b2db      	uxtb	r3, r3
 800444c:	f003 0307 	and.w	r3, r3, #7
 8004450:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	0f5b      	lsrs	r3, r3, #29
 800445a:	b2db      	uxtb	r3, r3
 800445c:	f003 0307 	and.w	r3, r3, #7
 8004460:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004462:	7bbb      	ldrb	r3, [r7, #14]
 8004464:	7b3a      	ldrb	r2, [r7, #12]
 8004466:	4911      	ldr	r1, [pc, #68]	; (80044ac <UARTEx_SetNbDataToProcess+0x94>)
 8004468:	5c8a      	ldrb	r2, [r1, r2]
 800446a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800446e:	7b3a      	ldrb	r2, [r7, #12]
 8004470:	490f      	ldr	r1, [pc, #60]	; (80044b0 <UARTEx_SetNbDataToProcess+0x98>)
 8004472:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004474:	fb93 f3f2 	sdiv	r3, r3, r2
 8004478:	b29a      	uxth	r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004480:	7bfb      	ldrb	r3, [r7, #15]
 8004482:	7b7a      	ldrb	r2, [r7, #13]
 8004484:	4909      	ldr	r1, [pc, #36]	; (80044ac <UARTEx_SetNbDataToProcess+0x94>)
 8004486:	5c8a      	ldrb	r2, [r1, r2]
 8004488:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800448c:	7b7a      	ldrb	r2, [r7, #13]
 800448e:	4908      	ldr	r1, [pc, #32]	; (80044b0 <UARTEx_SetNbDataToProcess+0x98>)
 8004490:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004492:	fb93 f3f2 	sdiv	r3, r3, r2
 8004496:	b29a      	uxth	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800449e:	bf00      	nop
 80044a0:	3714      	adds	r7, #20
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	08005990 	.word	0x08005990
 80044b0:	08005998 	.word	0x08005998

080044b4 <__errno>:
 80044b4:	4b01      	ldr	r3, [pc, #4]	; (80044bc <__errno+0x8>)
 80044b6:	6818      	ldr	r0, [r3, #0]
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	2000000c 	.word	0x2000000c

080044c0 <__libc_init_array>:
 80044c0:	b570      	push	{r4, r5, r6, lr}
 80044c2:	4d0d      	ldr	r5, [pc, #52]	; (80044f8 <__libc_init_array+0x38>)
 80044c4:	4c0d      	ldr	r4, [pc, #52]	; (80044fc <__libc_init_array+0x3c>)
 80044c6:	1b64      	subs	r4, r4, r5
 80044c8:	10a4      	asrs	r4, r4, #2
 80044ca:	2600      	movs	r6, #0
 80044cc:	42a6      	cmp	r6, r4
 80044ce:	d109      	bne.n	80044e4 <__libc_init_array+0x24>
 80044d0:	4d0b      	ldr	r5, [pc, #44]	; (8004500 <__libc_init_array+0x40>)
 80044d2:	4c0c      	ldr	r4, [pc, #48]	; (8004504 <__libc_init_array+0x44>)
 80044d4:	f001 fa00 	bl	80058d8 <_init>
 80044d8:	1b64      	subs	r4, r4, r5
 80044da:	10a4      	asrs	r4, r4, #2
 80044dc:	2600      	movs	r6, #0
 80044de:	42a6      	cmp	r6, r4
 80044e0:	d105      	bne.n	80044ee <__libc_init_array+0x2e>
 80044e2:	bd70      	pop	{r4, r5, r6, pc}
 80044e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80044e8:	4798      	blx	r3
 80044ea:	3601      	adds	r6, #1
 80044ec:	e7ee      	b.n	80044cc <__libc_init_array+0xc>
 80044ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80044f2:	4798      	blx	r3
 80044f4:	3601      	adds	r6, #1
 80044f6:	e7f2      	b.n	80044de <__libc_init_array+0x1e>
 80044f8:	08005a40 	.word	0x08005a40
 80044fc:	08005a40 	.word	0x08005a40
 8004500:	08005a40 	.word	0x08005a40
 8004504:	08005a44 	.word	0x08005a44

08004508 <memset>:
 8004508:	4402      	add	r2, r0
 800450a:	4603      	mov	r3, r0
 800450c:	4293      	cmp	r3, r2
 800450e:	d100      	bne.n	8004512 <memset+0xa>
 8004510:	4770      	bx	lr
 8004512:	f803 1b01 	strb.w	r1, [r3], #1
 8004516:	e7f9      	b.n	800450c <memset+0x4>

08004518 <iprintf>:
 8004518:	b40f      	push	{r0, r1, r2, r3}
 800451a:	4b0a      	ldr	r3, [pc, #40]	; (8004544 <iprintf+0x2c>)
 800451c:	b513      	push	{r0, r1, r4, lr}
 800451e:	681c      	ldr	r4, [r3, #0]
 8004520:	b124      	cbz	r4, 800452c <iprintf+0x14>
 8004522:	69a3      	ldr	r3, [r4, #24]
 8004524:	b913      	cbnz	r3, 800452c <iprintf+0x14>
 8004526:	4620      	mov	r0, r4
 8004528:	f000 fa7e 	bl	8004a28 <__sinit>
 800452c:	ab05      	add	r3, sp, #20
 800452e:	9a04      	ldr	r2, [sp, #16]
 8004530:	68a1      	ldr	r1, [r4, #8]
 8004532:	9301      	str	r3, [sp, #4]
 8004534:	4620      	mov	r0, r4
 8004536:	f000 fde3 	bl	8005100 <_vfiprintf_r>
 800453a:	b002      	add	sp, #8
 800453c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004540:	b004      	add	sp, #16
 8004542:	4770      	bx	lr
 8004544:	2000000c 	.word	0x2000000c

08004548 <_puts_r>:
 8004548:	b570      	push	{r4, r5, r6, lr}
 800454a:	460e      	mov	r6, r1
 800454c:	4605      	mov	r5, r0
 800454e:	b118      	cbz	r0, 8004558 <_puts_r+0x10>
 8004550:	6983      	ldr	r3, [r0, #24]
 8004552:	b90b      	cbnz	r3, 8004558 <_puts_r+0x10>
 8004554:	f000 fa68 	bl	8004a28 <__sinit>
 8004558:	69ab      	ldr	r3, [r5, #24]
 800455a:	68ac      	ldr	r4, [r5, #8]
 800455c:	b913      	cbnz	r3, 8004564 <_puts_r+0x1c>
 800455e:	4628      	mov	r0, r5
 8004560:	f000 fa62 	bl	8004a28 <__sinit>
 8004564:	4b2c      	ldr	r3, [pc, #176]	; (8004618 <_puts_r+0xd0>)
 8004566:	429c      	cmp	r4, r3
 8004568:	d120      	bne.n	80045ac <_puts_r+0x64>
 800456a:	686c      	ldr	r4, [r5, #4]
 800456c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800456e:	07db      	lsls	r3, r3, #31
 8004570:	d405      	bmi.n	800457e <_puts_r+0x36>
 8004572:	89a3      	ldrh	r3, [r4, #12]
 8004574:	0598      	lsls	r0, r3, #22
 8004576:	d402      	bmi.n	800457e <_puts_r+0x36>
 8004578:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800457a:	f000 faf3 	bl	8004b64 <__retarget_lock_acquire_recursive>
 800457e:	89a3      	ldrh	r3, [r4, #12]
 8004580:	0719      	lsls	r1, r3, #28
 8004582:	d51d      	bpl.n	80045c0 <_puts_r+0x78>
 8004584:	6923      	ldr	r3, [r4, #16]
 8004586:	b1db      	cbz	r3, 80045c0 <_puts_r+0x78>
 8004588:	3e01      	subs	r6, #1
 800458a:	68a3      	ldr	r3, [r4, #8]
 800458c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004590:	3b01      	subs	r3, #1
 8004592:	60a3      	str	r3, [r4, #8]
 8004594:	bb39      	cbnz	r1, 80045e6 <_puts_r+0x9e>
 8004596:	2b00      	cmp	r3, #0
 8004598:	da38      	bge.n	800460c <_puts_r+0xc4>
 800459a:	4622      	mov	r2, r4
 800459c:	210a      	movs	r1, #10
 800459e:	4628      	mov	r0, r5
 80045a0:	f000 f868 	bl	8004674 <__swbuf_r>
 80045a4:	3001      	adds	r0, #1
 80045a6:	d011      	beq.n	80045cc <_puts_r+0x84>
 80045a8:	250a      	movs	r5, #10
 80045aa:	e011      	b.n	80045d0 <_puts_r+0x88>
 80045ac:	4b1b      	ldr	r3, [pc, #108]	; (800461c <_puts_r+0xd4>)
 80045ae:	429c      	cmp	r4, r3
 80045b0:	d101      	bne.n	80045b6 <_puts_r+0x6e>
 80045b2:	68ac      	ldr	r4, [r5, #8]
 80045b4:	e7da      	b.n	800456c <_puts_r+0x24>
 80045b6:	4b1a      	ldr	r3, [pc, #104]	; (8004620 <_puts_r+0xd8>)
 80045b8:	429c      	cmp	r4, r3
 80045ba:	bf08      	it	eq
 80045bc:	68ec      	ldreq	r4, [r5, #12]
 80045be:	e7d5      	b.n	800456c <_puts_r+0x24>
 80045c0:	4621      	mov	r1, r4
 80045c2:	4628      	mov	r0, r5
 80045c4:	f000 f8a8 	bl	8004718 <__swsetup_r>
 80045c8:	2800      	cmp	r0, #0
 80045ca:	d0dd      	beq.n	8004588 <_puts_r+0x40>
 80045cc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80045d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80045d2:	07da      	lsls	r2, r3, #31
 80045d4:	d405      	bmi.n	80045e2 <_puts_r+0x9a>
 80045d6:	89a3      	ldrh	r3, [r4, #12]
 80045d8:	059b      	lsls	r3, r3, #22
 80045da:	d402      	bmi.n	80045e2 <_puts_r+0x9a>
 80045dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045de:	f000 fac2 	bl	8004b66 <__retarget_lock_release_recursive>
 80045e2:	4628      	mov	r0, r5
 80045e4:	bd70      	pop	{r4, r5, r6, pc}
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	da04      	bge.n	80045f4 <_puts_r+0xac>
 80045ea:	69a2      	ldr	r2, [r4, #24]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	dc06      	bgt.n	80045fe <_puts_r+0xb6>
 80045f0:	290a      	cmp	r1, #10
 80045f2:	d004      	beq.n	80045fe <_puts_r+0xb6>
 80045f4:	6823      	ldr	r3, [r4, #0]
 80045f6:	1c5a      	adds	r2, r3, #1
 80045f8:	6022      	str	r2, [r4, #0]
 80045fa:	7019      	strb	r1, [r3, #0]
 80045fc:	e7c5      	b.n	800458a <_puts_r+0x42>
 80045fe:	4622      	mov	r2, r4
 8004600:	4628      	mov	r0, r5
 8004602:	f000 f837 	bl	8004674 <__swbuf_r>
 8004606:	3001      	adds	r0, #1
 8004608:	d1bf      	bne.n	800458a <_puts_r+0x42>
 800460a:	e7df      	b.n	80045cc <_puts_r+0x84>
 800460c:	6823      	ldr	r3, [r4, #0]
 800460e:	250a      	movs	r5, #10
 8004610:	1c5a      	adds	r2, r3, #1
 8004612:	6022      	str	r2, [r4, #0]
 8004614:	701d      	strb	r5, [r3, #0]
 8004616:	e7db      	b.n	80045d0 <_puts_r+0x88>
 8004618:	080059c4 	.word	0x080059c4
 800461c:	080059e4 	.word	0x080059e4
 8004620:	080059a4 	.word	0x080059a4

08004624 <puts>:
 8004624:	4b02      	ldr	r3, [pc, #8]	; (8004630 <puts+0xc>)
 8004626:	4601      	mov	r1, r0
 8004628:	6818      	ldr	r0, [r3, #0]
 800462a:	f7ff bf8d 	b.w	8004548 <_puts_r>
 800462e:	bf00      	nop
 8004630:	2000000c 	.word	0x2000000c

08004634 <siprintf>:
 8004634:	b40e      	push	{r1, r2, r3}
 8004636:	b500      	push	{lr}
 8004638:	b09c      	sub	sp, #112	; 0x70
 800463a:	ab1d      	add	r3, sp, #116	; 0x74
 800463c:	9002      	str	r0, [sp, #8]
 800463e:	9006      	str	r0, [sp, #24]
 8004640:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004644:	4809      	ldr	r0, [pc, #36]	; (800466c <siprintf+0x38>)
 8004646:	9107      	str	r1, [sp, #28]
 8004648:	9104      	str	r1, [sp, #16]
 800464a:	4909      	ldr	r1, [pc, #36]	; (8004670 <siprintf+0x3c>)
 800464c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004650:	9105      	str	r1, [sp, #20]
 8004652:	6800      	ldr	r0, [r0, #0]
 8004654:	9301      	str	r3, [sp, #4]
 8004656:	a902      	add	r1, sp, #8
 8004658:	f000 fc28 	bl	8004eac <_svfiprintf_r>
 800465c:	9b02      	ldr	r3, [sp, #8]
 800465e:	2200      	movs	r2, #0
 8004660:	701a      	strb	r2, [r3, #0]
 8004662:	b01c      	add	sp, #112	; 0x70
 8004664:	f85d eb04 	ldr.w	lr, [sp], #4
 8004668:	b003      	add	sp, #12
 800466a:	4770      	bx	lr
 800466c:	2000000c 	.word	0x2000000c
 8004670:	ffff0208 	.word	0xffff0208

08004674 <__swbuf_r>:
 8004674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004676:	460e      	mov	r6, r1
 8004678:	4614      	mov	r4, r2
 800467a:	4605      	mov	r5, r0
 800467c:	b118      	cbz	r0, 8004686 <__swbuf_r+0x12>
 800467e:	6983      	ldr	r3, [r0, #24]
 8004680:	b90b      	cbnz	r3, 8004686 <__swbuf_r+0x12>
 8004682:	f000 f9d1 	bl	8004a28 <__sinit>
 8004686:	4b21      	ldr	r3, [pc, #132]	; (800470c <__swbuf_r+0x98>)
 8004688:	429c      	cmp	r4, r3
 800468a:	d12b      	bne.n	80046e4 <__swbuf_r+0x70>
 800468c:	686c      	ldr	r4, [r5, #4]
 800468e:	69a3      	ldr	r3, [r4, #24]
 8004690:	60a3      	str	r3, [r4, #8]
 8004692:	89a3      	ldrh	r3, [r4, #12]
 8004694:	071a      	lsls	r2, r3, #28
 8004696:	d52f      	bpl.n	80046f8 <__swbuf_r+0x84>
 8004698:	6923      	ldr	r3, [r4, #16]
 800469a:	b36b      	cbz	r3, 80046f8 <__swbuf_r+0x84>
 800469c:	6923      	ldr	r3, [r4, #16]
 800469e:	6820      	ldr	r0, [r4, #0]
 80046a0:	1ac0      	subs	r0, r0, r3
 80046a2:	6963      	ldr	r3, [r4, #20]
 80046a4:	b2f6      	uxtb	r6, r6
 80046a6:	4283      	cmp	r3, r0
 80046a8:	4637      	mov	r7, r6
 80046aa:	dc04      	bgt.n	80046b6 <__swbuf_r+0x42>
 80046ac:	4621      	mov	r1, r4
 80046ae:	4628      	mov	r0, r5
 80046b0:	f000 f926 	bl	8004900 <_fflush_r>
 80046b4:	bb30      	cbnz	r0, 8004704 <__swbuf_r+0x90>
 80046b6:	68a3      	ldr	r3, [r4, #8]
 80046b8:	3b01      	subs	r3, #1
 80046ba:	60a3      	str	r3, [r4, #8]
 80046bc:	6823      	ldr	r3, [r4, #0]
 80046be:	1c5a      	adds	r2, r3, #1
 80046c0:	6022      	str	r2, [r4, #0]
 80046c2:	701e      	strb	r6, [r3, #0]
 80046c4:	6963      	ldr	r3, [r4, #20]
 80046c6:	3001      	adds	r0, #1
 80046c8:	4283      	cmp	r3, r0
 80046ca:	d004      	beq.n	80046d6 <__swbuf_r+0x62>
 80046cc:	89a3      	ldrh	r3, [r4, #12]
 80046ce:	07db      	lsls	r3, r3, #31
 80046d0:	d506      	bpl.n	80046e0 <__swbuf_r+0x6c>
 80046d2:	2e0a      	cmp	r6, #10
 80046d4:	d104      	bne.n	80046e0 <__swbuf_r+0x6c>
 80046d6:	4621      	mov	r1, r4
 80046d8:	4628      	mov	r0, r5
 80046da:	f000 f911 	bl	8004900 <_fflush_r>
 80046de:	b988      	cbnz	r0, 8004704 <__swbuf_r+0x90>
 80046e0:	4638      	mov	r0, r7
 80046e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046e4:	4b0a      	ldr	r3, [pc, #40]	; (8004710 <__swbuf_r+0x9c>)
 80046e6:	429c      	cmp	r4, r3
 80046e8:	d101      	bne.n	80046ee <__swbuf_r+0x7a>
 80046ea:	68ac      	ldr	r4, [r5, #8]
 80046ec:	e7cf      	b.n	800468e <__swbuf_r+0x1a>
 80046ee:	4b09      	ldr	r3, [pc, #36]	; (8004714 <__swbuf_r+0xa0>)
 80046f0:	429c      	cmp	r4, r3
 80046f2:	bf08      	it	eq
 80046f4:	68ec      	ldreq	r4, [r5, #12]
 80046f6:	e7ca      	b.n	800468e <__swbuf_r+0x1a>
 80046f8:	4621      	mov	r1, r4
 80046fa:	4628      	mov	r0, r5
 80046fc:	f000 f80c 	bl	8004718 <__swsetup_r>
 8004700:	2800      	cmp	r0, #0
 8004702:	d0cb      	beq.n	800469c <__swbuf_r+0x28>
 8004704:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004708:	e7ea      	b.n	80046e0 <__swbuf_r+0x6c>
 800470a:	bf00      	nop
 800470c:	080059c4 	.word	0x080059c4
 8004710:	080059e4 	.word	0x080059e4
 8004714:	080059a4 	.word	0x080059a4

08004718 <__swsetup_r>:
 8004718:	4b32      	ldr	r3, [pc, #200]	; (80047e4 <__swsetup_r+0xcc>)
 800471a:	b570      	push	{r4, r5, r6, lr}
 800471c:	681d      	ldr	r5, [r3, #0]
 800471e:	4606      	mov	r6, r0
 8004720:	460c      	mov	r4, r1
 8004722:	b125      	cbz	r5, 800472e <__swsetup_r+0x16>
 8004724:	69ab      	ldr	r3, [r5, #24]
 8004726:	b913      	cbnz	r3, 800472e <__swsetup_r+0x16>
 8004728:	4628      	mov	r0, r5
 800472a:	f000 f97d 	bl	8004a28 <__sinit>
 800472e:	4b2e      	ldr	r3, [pc, #184]	; (80047e8 <__swsetup_r+0xd0>)
 8004730:	429c      	cmp	r4, r3
 8004732:	d10f      	bne.n	8004754 <__swsetup_r+0x3c>
 8004734:	686c      	ldr	r4, [r5, #4]
 8004736:	89a3      	ldrh	r3, [r4, #12]
 8004738:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800473c:	0719      	lsls	r1, r3, #28
 800473e:	d42c      	bmi.n	800479a <__swsetup_r+0x82>
 8004740:	06dd      	lsls	r5, r3, #27
 8004742:	d411      	bmi.n	8004768 <__swsetup_r+0x50>
 8004744:	2309      	movs	r3, #9
 8004746:	6033      	str	r3, [r6, #0]
 8004748:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800474c:	81a3      	strh	r3, [r4, #12]
 800474e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004752:	e03e      	b.n	80047d2 <__swsetup_r+0xba>
 8004754:	4b25      	ldr	r3, [pc, #148]	; (80047ec <__swsetup_r+0xd4>)
 8004756:	429c      	cmp	r4, r3
 8004758:	d101      	bne.n	800475e <__swsetup_r+0x46>
 800475a:	68ac      	ldr	r4, [r5, #8]
 800475c:	e7eb      	b.n	8004736 <__swsetup_r+0x1e>
 800475e:	4b24      	ldr	r3, [pc, #144]	; (80047f0 <__swsetup_r+0xd8>)
 8004760:	429c      	cmp	r4, r3
 8004762:	bf08      	it	eq
 8004764:	68ec      	ldreq	r4, [r5, #12]
 8004766:	e7e6      	b.n	8004736 <__swsetup_r+0x1e>
 8004768:	0758      	lsls	r0, r3, #29
 800476a:	d512      	bpl.n	8004792 <__swsetup_r+0x7a>
 800476c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800476e:	b141      	cbz	r1, 8004782 <__swsetup_r+0x6a>
 8004770:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004774:	4299      	cmp	r1, r3
 8004776:	d002      	beq.n	800477e <__swsetup_r+0x66>
 8004778:	4630      	mov	r0, r6
 800477a:	f000 fa5b 	bl	8004c34 <_free_r>
 800477e:	2300      	movs	r3, #0
 8004780:	6363      	str	r3, [r4, #52]	; 0x34
 8004782:	89a3      	ldrh	r3, [r4, #12]
 8004784:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004788:	81a3      	strh	r3, [r4, #12]
 800478a:	2300      	movs	r3, #0
 800478c:	6063      	str	r3, [r4, #4]
 800478e:	6923      	ldr	r3, [r4, #16]
 8004790:	6023      	str	r3, [r4, #0]
 8004792:	89a3      	ldrh	r3, [r4, #12]
 8004794:	f043 0308 	orr.w	r3, r3, #8
 8004798:	81a3      	strh	r3, [r4, #12]
 800479a:	6923      	ldr	r3, [r4, #16]
 800479c:	b94b      	cbnz	r3, 80047b2 <__swsetup_r+0x9a>
 800479e:	89a3      	ldrh	r3, [r4, #12]
 80047a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80047a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047a8:	d003      	beq.n	80047b2 <__swsetup_r+0x9a>
 80047aa:	4621      	mov	r1, r4
 80047ac:	4630      	mov	r0, r6
 80047ae:	f000 fa01 	bl	8004bb4 <__smakebuf_r>
 80047b2:	89a0      	ldrh	r0, [r4, #12]
 80047b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80047b8:	f010 0301 	ands.w	r3, r0, #1
 80047bc:	d00a      	beq.n	80047d4 <__swsetup_r+0xbc>
 80047be:	2300      	movs	r3, #0
 80047c0:	60a3      	str	r3, [r4, #8]
 80047c2:	6963      	ldr	r3, [r4, #20]
 80047c4:	425b      	negs	r3, r3
 80047c6:	61a3      	str	r3, [r4, #24]
 80047c8:	6923      	ldr	r3, [r4, #16]
 80047ca:	b943      	cbnz	r3, 80047de <__swsetup_r+0xc6>
 80047cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80047d0:	d1ba      	bne.n	8004748 <__swsetup_r+0x30>
 80047d2:	bd70      	pop	{r4, r5, r6, pc}
 80047d4:	0781      	lsls	r1, r0, #30
 80047d6:	bf58      	it	pl
 80047d8:	6963      	ldrpl	r3, [r4, #20]
 80047da:	60a3      	str	r3, [r4, #8]
 80047dc:	e7f4      	b.n	80047c8 <__swsetup_r+0xb0>
 80047de:	2000      	movs	r0, #0
 80047e0:	e7f7      	b.n	80047d2 <__swsetup_r+0xba>
 80047e2:	bf00      	nop
 80047e4:	2000000c 	.word	0x2000000c
 80047e8:	080059c4 	.word	0x080059c4
 80047ec:	080059e4 	.word	0x080059e4
 80047f0:	080059a4 	.word	0x080059a4

080047f4 <__sflush_r>:
 80047f4:	898a      	ldrh	r2, [r1, #12]
 80047f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047fa:	4605      	mov	r5, r0
 80047fc:	0710      	lsls	r0, r2, #28
 80047fe:	460c      	mov	r4, r1
 8004800:	d458      	bmi.n	80048b4 <__sflush_r+0xc0>
 8004802:	684b      	ldr	r3, [r1, #4]
 8004804:	2b00      	cmp	r3, #0
 8004806:	dc05      	bgt.n	8004814 <__sflush_r+0x20>
 8004808:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800480a:	2b00      	cmp	r3, #0
 800480c:	dc02      	bgt.n	8004814 <__sflush_r+0x20>
 800480e:	2000      	movs	r0, #0
 8004810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004814:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004816:	2e00      	cmp	r6, #0
 8004818:	d0f9      	beq.n	800480e <__sflush_r+0x1a>
 800481a:	2300      	movs	r3, #0
 800481c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004820:	682f      	ldr	r7, [r5, #0]
 8004822:	602b      	str	r3, [r5, #0]
 8004824:	d032      	beq.n	800488c <__sflush_r+0x98>
 8004826:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004828:	89a3      	ldrh	r3, [r4, #12]
 800482a:	075a      	lsls	r2, r3, #29
 800482c:	d505      	bpl.n	800483a <__sflush_r+0x46>
 800482e:	6863      	ldr	r3, [r4, #4]
 8004830:	1ac0      	subs	r0, r0, r3
 8004832:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004834:	b10b      	cbz	r3, 800483a <__sflush_r+0x46>
 8004836:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004838:	1ac0      	subs	r0, r0, r3
 800483a:	2300      	movs	r3, #0
 800483c:	4602      	mov	r2, r0
 800483e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004840:	6a21      	ldr	r1, [r4, #32]
 8004842:	4628      	mov	r0, r5
 8004844:	47b0      	blx	r6
 8004846:	1c43      	adds	r3, r0, #1
 8004848:	89a3      	ldrh	r3, [r4, #12]
 800484a:	d106      	bne.n	800485a <__sflush_r+0x66>
 800484c:	6829      	ldr	r1, [r5, #0]
 800484e:	291d      	cmp	r1, #29
 8004850:	d82c      	bhi.n	80048ac <__sflush_r+0xb8>
 8004852:	4a2a      	ldr	r2, [pc, #168]	; (80048fc <__sflush_r+0x108>)
 8004854:	40ca      	lsrs	r2, r1
 8004856:	07d6      	lsls	r6, r2, #31
 8004858:	d528      	bpl.n	80048ac <__sflush_r+0xb8>
 800485a:	2200      	movs	r2, #0
 800485c:	6062      	str	r2, [r4, #4]
 800485e:	04d9      	lsls	r1, r3, #19
 8004860:	6922      	ldr	r2, [r4, #16]
 8004862:	6022      	str	r2, [r4, #0]
 8004864:	d504      	bpl.n	8004870 <__sflush_r+0x7c>
 8004866:	1c42      	adds	r2, r0, #1
 8004868:	d101      	bne.n	800486e <__sflush_r+0x7a>
 800486a:	682b      	ldr	r3, [r5, #0]
 800486c:	b903      	cbnz	r3, 8004870 <__sflush_r+0x7c>
 800486e:	6560      	str	r0, [r4, #84]	; 0x54
 8004870:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004872:	602f      	str	r7, [r5, #0]
 8004874:	2900      	cmp	r1, #0
 8004876:	d0ca      	beq.n	800480e <__sflush_r+0x1a>
 8004878:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800487c:	4299      	cmp	r1, r3
 800487e:	d002      	beq.n	8004886 <__sflush_r+0x92>
 8004880:	4628      	mov	r0, r5
 8004882:	f000 f9d7 	bl	8004c34 <_free_r>
 8004886:	2000      	movs	r0, #0
 8004888:	6360      	str	r0, [r4, #52]	; 0x34
 800488a:	e7c1      	b.n	8004810 <__sflush_r+0x1c>
 800488c:	6a21      	ldr	r1, [r4, #32]
 800488e:	2301      	movs	r3, #1
 8004890:	4628      	mov	r0, r5
 8004892:	47b0      	blx	r6
 8004894:	1c41      	adds	r1, r0, #1
 8004896:	d1c7      	bne.n	8004828 <__sflush_r+0x34>
 8004898:	682b      	ldr	r3, [r5, #0]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d0c4      	beq.n	8004828 <__sflush_r+0x34>
 800489e:	2b1d      	cmp	r3, #29
 80048a0:	d001      	beq.n	80048a6 <__sflush_r+0xb2>
 80048a2:	2b16      	cmp	r3, #22
 80048a4:	d101      	bne.n	80048aa <__sflush_r+0xb6>
 80048a6:	602f      	str	r7, [r5, #0]
 80048a8:	e7b1      	b.n	800480e <__sflush_r+0x1a>
 80048aa:	89a3      	ldrh	r3, [r4, #12]
 80048ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048b0:	81a3      	strh	r3, [r4, #12]
 80048b2:	e7ad      	b.n	8004810 <__sflush_r+0x1c>
 80048b4:	690f      	ldr	r7, [r1, #16]
 80048b6:	2f00      	cmp	r7, #0
 80048b8:	d0a9      	beq.n	800480e <__sflush_r+0x1a>
 80048ba:	0793      	lsls	r3, r2, #30
 80048bc:	680e      	ldr	r6, [r1, #0]
 80048be:	bf08      	it	eq
 80048c0:	694b      	ldreq	r3, [r1, #20]
 80048c2:	600f      	str	r7, [r1, #0]
 80048c4:	bf18      	it	ne
 80048c6:	2300      	movne	r3, #0
 80048c8:	eba6 0807 	sub.w	r8, r6, r7
 80048cc:	608b      	str	r3, [r1, #8]
 80048ce:	f1b8 0f00 	cmp.w	r8, #0
 80048d2:	dd9c      	ble.n	800480e <__sflush_r+0x1a>
 80048d4:	6a21      	ldr	r1, [r4, #32]
 80048d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80048d8:	4643      	mov	r3, r8
 80048da:	463a      	mov	r2, r7
 80048dc:	4628      	mov	r0, r5
 80048de:	47b0      	blx	r6
 80048e0:	2800      	cmp	r0, #0
 80048e2:	dc06      	bgt.n	80048f2 <__sflush_r+0xfe>
 80048e4:	89a3      	ldrh	r3, [r4, #12]
 80048e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048ea:	81a3      	strh	r3, [r4, #12]
 80048ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048f0:	e78e      	b.n	8004810 <__sflush_r+0x1c>
 80048f2:	4407      	add	r7, r0
 80048f4:	eba8 0800 	sub.w	r8, r8, r0
 80048f8:	e7e9      	b.n	80048ce <__sflush_r+0xda>
 80048fa:	bf00      	nop
 80048fc:	20400001 	.word	0x20400001

08004900 <_fflush_r>:
 8004900:	b538      	push	{r3, r4, r5, lr}
 8004902:	690b      	ldr	r3, [r1, #16]
 8004904:	4605      	mov	r5, r0
 8004906:	460c      	mov	r4, r1
 8004908:	b913      	cbnz	r3, 8004910 <_fflush_r+0x10>
 800490a:	2500      	movs	r5, #0
 800490c:	4628      	mov	r0, r5
 800490e:	bd38      	pop	{r3, r4, r5, pc}
 8004910:	b118      	cbz	r0, 800491a <_fflush_r+0x1a>
 8004912:	6983      	ldr	r3, [r0, #24]
 8004914:	b90b      	cbnz	r3, 800491a <_fflush_r+0x1a>
 8004916:	f000 f887 	bl	8004a28 <__sinit>
 800491a:	4b14      	ldr	r3, [pc, #80]	; (800496c <_fflush_r+0x6c>)
 800491c:	429c      	cmp	r4, r3
 800491e:	d11b      	bne.n	8004958 <_fflush_r+0x58>
 8004920:	686c      	ldr	r4, [r5, #4]
 8004922:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d0ef      	beq.n	800490a <_fflush_r+0xa>
 800492a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800492c:	07d0      	lsls	r0, r2, #31
 800492e:	d404      	bmi.n	800493a <_fflush_r+0x3a>
 8004930:	0599      	lsls	r1, r3, #22
 8004932:	d402      	bmi.n	800493a <_fflush_r+0x3a>
 8004934:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004936:	f000 f915 	bl	8004b64 <__retarget_lock_acquire_recursive>
 800493a:	4628      	mov	r0, r5
 800493c:	4621      	mov	r1, r4
 800493e:	f7ff ff59 	bl	80047f4 <__sflush_r>
 8004942:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004944:	07da      	lsls	r2, r3, #31
 8004946:	4605      	mov	r5, r0
 8004948:	d4e0      	bmi.n	800490c <_fflush_r+0xc>
 800494a:	89a3      	ldrh	r3, [r4, #12]
 800494c:	059b      	lsls	r3, r3, #22
 800494e:	d4dd      	bmi.n	800490c <_fflush_r+0xc>
 8004950:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004952:	f000 f908 	bl	8004b66 <__retarget_lock_release_recursive>
 8004956:	e7d9      	b.n	800490c <_fflush_r+0xc>
 8004958:	4b05      	ldr	r3, [pc, #20]	; (8004970 <_fflush_r+0x70>)
 800495a:	429c      	cmp	r4, r3
 800495c:	d101      	bne.n	8004962 <_fflush_r+0x62>
 800495e:	68ac      	ldr	r4, [r5, #8]
 8004960:	e7df      	b.n	8004922 <_fflush_r+0x22>
 8004962:	4b04      	ldr	r3, [pc, #16]	; (8004974 <_fflush_r+0x74>)
 8004964:	429c      	cmp	r4, r3
 8004966:	bf08      	it	eq
 8004968:	68ec      	ldreq	r4, [r5, #12]
 800496a:	e7da      	b.n	8004922 <_fflush_r+0x22>
 800496c:	080059c4 	.word	0x080059c4
 8004970:	080059e4 	.word	0x080059e4
 8004974:	080059a4 	.word	0x080059a4

08004978 <std>:
 8004978:	2300      	movs	r3, #0
 800497a:	b510      	push	{r4, lr}
 800497c:	4604      	mov	r4, r0
 800497e:	e9c0 3300 	strd	r3, r3, [r0]
 8004982:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004986:	6083      	str	r3, [r0, #8]
 8004988:	8181      	strh	r1, [r0, #12]
 800498a:	6643      	str	r3, [r0, #100]	; 0x64
 800498c:	81c2      	strh	r2, [r0, #14]
 800498e:	6183      	str	r3, [r0, #24]
 8004990:	4619      	mov	r1, r3
 8004992:	2208      	movs	r2, #8
 8004994:	305c      	adds	r0, #92	; 0x5c
 8004996:	f7ff fdb7 	bl	8004508 <memset>
 800499a:	4b05      	ldr	r3, [pc, #20]	; (80049b0 <std+0x38>)
 800499c:	6263      	str	r3, [r4, #36]	; 0x24
 800499e:	4b05      	ldr	r3, [pc, #20]	; (80049b4 <std+0x3c>)
 80049a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80049a2:	4b05      	ldr	r3, [pc, #20]	; (80049b8 <std+0x40>)
 80049a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80049a6:	4b05      	ldr	r3, [pc, #20]	; (80049bc <std+0x44>)
 80049a8:	6224      	str	r4, [r4, #32]
 80049aa:	6323      	str	r3, [r4, #48]	; 0x30
 80049ac:	bd10      	pop	{r4, pc}
 80049ae:	bf00      	nop
 80049b0:	080056a9 	.word	0x080056a9
 80049b4:	080056cb 	.word	0x080056cb
 80049b8:	08005703 	.word	0x08005703
 80049bc:	08005727 	.word	0x08005727

080049c0 <_cleanup_r>:
 80049c0:	4901      	ldr	r1, [pc, #4]	; (80049c8 <_cleanup_r+0x8>)
 80049c2:	f000 b8af 	b.w	8004b24 <_fwalk_reent>
 80049c6:	bf00      	nop
 80049c8:	08004901 	.word	0x08004901

080049cc <__sfmoreglue>:
 80049cc:	b570      	push	{r4, r5, r6, lr}
 80049ce:	2268      	movs	r2, #104	; 0x68
 80049d0:	1e4d      	subs	r5, r1, #1
 80049d2:	4355      	muls	r5, r2
 80049d4:	460e      	mov	r6, r1
 80049d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80049da:	f000 f997 	bl	8004d0c <_malloc_r>
 80049de:	4604      	mov	r4, r0
 80049e0:	b140      	cbz	r0, 80049f4 <__sfmoreglue+0x28>
 80049e2:	2100      	movs	r1, #0
 80049e4:	e9c0 1600 	strd	r1, r6, [r0]
 80049e8:	300c      	adds	r0, #12
 80049ea:	60a0      	str	r0, [r4, #8]
 80049ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80049f0:	f7ff fd8a 	bl	8004508 <memset>
 80049f4:	4620      	mov	r0, r4
 80049f6:	bd70      	pop	{r4, r5, r6, pc}

080049f8 <__sfp_lock_acquire>:
 80049f8:	4801      	ldr	r0, [pc, #4]	; (8004a00 <__sfp_lock_acquire+0x8>)
 80049fa:	f000 b8b3 	b.w	8004b64 <__retarget_lock_acquire_recursive>
 80049fe:	bf00      	nop
 8004a00:	20000195 	.word	0x20000195

08004a04 <__sfp_lock_release>:
 8004a04:	4801      	ldr	r0, [pc, #4]	; (8004a0c <__sfp_lock_release+0x8>)
 8004a06:	f000 b8ae 	b.w	8004b66 <__retarget_lock_release_recursive>
 8004a0a:	bf00      	nop
 8004a0c:	20000195 	.word	0x20000195

08004a10 <__sinit_lock_acquire>:
 8004a10:	4801      	ldr	r0, [pc, #4]	; (8004a18 <__sinit_lock_acquire+0x8>)
 8004a12:	f000 b8a7 	b.w	8004b64 <__retarget_lock_acquire_recursive>
 8004a16:	bf00      	nop
 8004a18:	20000196 	.word	0x20000196

08004a1c <__sinit_lock_release>:
 8004a1c:	4801      	ldr	r0, [pc, #4]	; (8004a24 <__sinit_lock_release+0x8>)
 8004a1e:	f000 b8a2 	b.w	8004b66 <__retarget_lock_release_recursive>
 8004a22:	bf00      	nop
 8004a24:	20000196 	.word	0x20000196

08004a28 <__sinit>:
 8004a28:	b510      	push	{r4, lr}
 8004a2a:	4604      	mov	r4, r0
 8004a2c:	f7ff fff0 	bl	8004a10 <__sinit_lock_acquire>
 8004a30:	69a3      	ldr	r3, [r4, #24]
 8004a32:	b11b      	cbz	r3, 8004a3c <__sinit+0x14>
 8004a34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a38:	f7ff bff0 	b.w	8004a1c <__sinit_lock_release>
 8004a3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004a40:	6523      	str	r3, [r4, #80]	; 0x50
 8004a42:	4b13      	ldr	r3, [pc, #76]	; (8004a90 <__sinit+0x68>)
 8004a44:	4a13      	ldr	r2, [pc, #76]	; (8004a94 <__sinit+0x6c>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	62a2      	str	r2, [r4, #40]	; 0x28
 8004a4a:	42a3      	cmp	r3, r4
 8004a4c:	bf04      	itt	eq
 8004a4e:	2301      	moveq	r3, #1
 8004a50:	61a3      	streq	r3, [r4, #24]
 8004a52:	4620      	mov	r0, r4
 8004a54:	f000 f820 	bl	8004a98 <__sfp>
 8004a58:	6060      	str	r0, [r4, #4]
 8004a5a:	4620      	mov	r0, r4
 8004a5c:	f000 f81c 	bl	8004a98 <__sfp>
 8004a60:	60a0      	str	r0, [r4, #8]
 8004a62:	4620      	mov	r0, r4
 8004a64:	f000 f818 	bl	8004a98 <__sfp>
 8004a68:	2200      	movs	r2, #0
 8004a6a:	60e0      	str	r0, [r4, #12]
 8004a6c:	2104      	movs	r1, #4
 8004a6e:	6860      	ldr	r0, [r4, #4]
 8004a70:	f7ff ff82 	bl	8004978 <std>
 8004a74:	68a0      	ldr	r0, [r4, #8]
 8004a76:	2201      	movs	r2, #1
 8004a78:	2109      	movs	r1, #9
 8004a7a:	f7ff ff7d 	bl	8004978 <std>
 8004a7e:	68e0      	ldr	r0, [r4, #12]
 8004a80:	2202      	movs	r2, #2
 8004a82:	2112      	movs	r1, #18
 8004a84:	f7ff ff78 	bl	8004978 <std>
 8004a88:	2301      	movs	r3, #1
 8004a8a:	61a3      	str	r3, [r4, #24]
 8004a8c:	e7d2      	b.n	8004a34 <__sinit+0xc>
 8004a8e:	bf00      	nop
 8004a90:	080059a0 	.word	0x080059a0
 8004a94:	080049c1 	.word	0x080049c1

08004a98 <__sfp>:
 8004a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a9a:	4607      	mov	r7, r0
 8004a9c:	f7ff ffac 	bl	80049f8 <__sfp_lock_acquire>
 8004aa0:	4b1e      	ldr	r3, [pc, #120]	; (8004b1c <__sfp+0x84>)
 8004aa2:	681e      	ldr	r6, [r3, #0]
 8004aa4:	69b3      	ldr	r3, [r6, #24]
 8004aa6:	b913      	cbnz	r3, 8004aae <__sfp+0x16>
 8004aa8:	4630      	mov	r0, r6
 8004aaa:	f7ff ffbd 	bl	8004a28 <__sinit>
 8004aae:	3648      	adds	r6, #72	; 0x48
 8004ab0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	d503      	bpl.n	8004ac0 <__sfp+0x28>
 8004ab8:	6833      	ldr	r3, [r6, #0]
 8004aba:	b30b      	cbz	r3, 8004b00 <__sfp+0x68>
 8004abc:	6836      	ldr	r6, [r6, #0]
 8004abe:	e7f7      	b.n	8004ab0 <__sfp+0x18>
 8004ac0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004ac4:	b9d5      	cbnz	r5, 8004afc <__sfp+0x64>
 8004ac6:	4b16      	ldr	r3, [pc, #88]	; (8004b20 <__sfp+0x88>)
 8004ac8:	60e3      	str	r3, [r4, #12]
 8004aca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004ace:	6665      	str	r5, [r4, #100]	; 0x64
 8004ad0:	f000 f847 	bl	8004b62 <__retarget_lock_init_recursive>
 8004ad4:	f7ff ff96 	bl	8004a04 <__sfp_lock_release>
 8004ad8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004adc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004ae0:	6025      	str	r5, [r4, #0]
 8004ae2:	61a5      	str	r5, [r4, #24]
 8004ae4:	2208      	movs	r2, #8
 8004ae6:	4629      	mov	r1, r5
 8004ae8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004aec:	f7ff fd0c 	bl	8004508 <memset>
 8004af0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004af4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004af8:	4620      	mov	r0, r4
 8004afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004afc:	3468      	adds	r4, #104	; 0x68
 8004afe:	e7d9      	b.n	8004ab4 <__sfp+0x1c>
 8004b00:	2104      	movs	r1, #4
 8004b02:	4638      	mov	r0, r7
 8004b04:	f7ff ff62 	bl	80049cc <__sfmoreglue>
 8004b08:	4604      	mov	r4, r0
 8004b0a:	6030      	str	r0, [r6, #0]
 8004b0c:	2800      	cmp	r0, #0
 8004b0e:	d1d5      	bne.n	8004abc <__sfp+0x24>
 8004b10:	f7ff ff78 	bl	8004a04 <__sfp_lock_release>
 8004b14:	230c      	movs	r3, #12
 8004b16:	603b      	str	r3, [r7, #0]
 8004b18:	e7ee      	b.n	8004af8 <__sfp+0x60>
 8004b1a:	bf00      	nop
 8004b1c:	080059a0 	.word	0x080059a0
 8004b20:	ffff0001 	.word	0xffff0001

08004b24 <_fwalk_reent>:
 8004b24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b28:	4606      	mov	r6, r0
 8004b2a:	4688      	mov	r8, r1
 8004b2c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004b30:	2700      	movs	r7, #0
 8004b32:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004b36:	f1b9 0901 	subs.w	r9, r9, #1
 8004b3a:	d505      	bpl.n	8004b48 <_fwalk_reent+0x24>
 8004b3c:	6824      	ldr	r4, [r4, #0]
 8004b3e:	2c00      	cmp	r4, #0
 8004b40:	d1f7      	bne.n	8004b32 <_fwalk_reent+0xe>
 8004b42:	4638      	mov	r0, r7
 8004b44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b48:	89ab      	ldrh	r3, [r5, #12]
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d907      	bls.n	8004b5e <_fwalk_reent+0x3a>
 8004b4e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b52:	3301      	adds	r3, #1
 8004b54:	d003      	beq.n	8004b5e <_fwalk_reent+0x3a>
 8004b56:	4629      	mov	r1, r5
 8004b58:	4630      	mov	r0, r6
 8004b5a:	47c0      	blx	r8
 8004b5c:	4307      	orrs	r7, r0
 8004b5e:	3568      	adds	r5, #104	; 0x68
 8004b60:	e7e9      	b.n	8004b36 <_fwalk_reent+0x12>

08004b62 <__retarget_lock_init_recursive>:
 8004b62:	4770      	bx	lr

08004b64 <__retarget_lock_acquire_recursive>:
 8004b64:	4770      	bx	lr

08004b66 <__retarget_lock_release_recursive>:
 8004b66:	4770      	bx	lr

08004b68 <__swhatbuf_r>:
 8004b68:	b570      	push	{r4, r5, r6, lr}
 8004b6a:	460e      	mov	r6, r1
 8004b6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b70:	2900      	cmp	r1, #0
 8004b72:	b096      	sub	sp, #88	; 0x58
 8004b74:	4614      	mov	r4, r2
 8004b76:	461d      	mov	r5, r3
 8004b78:	da08      	bge.n	8004b8c <__swhatbuf_r+0x24>
 8004b7a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	602a      	str	r2, [r5, #0]
 8004b82:	061a      	lsls	r2, r3, #24
 8004b84:	d410      	bmi.n	8004ba8 <__swhatbuf_r+0x40>
 8004b86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b8a:	e00e      	b.n	8004baa <__swhatbuf_r+0x42>
 8004b8c:	466a      	mov	r2, sp
 8004b8e:	f000 fdf1 	bl	8005774 <_fstat_r>
 8004b92:	2800      	cmp	r0, #0
 8004b94:	dbf1      	blt.n	8004b7a <__swhatbuf_r+0x12>
 8004b96:	9a01      	ldr	r2, [sp, #4]
 8004b98:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004b9c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004ba0:	425a      	negs	r2, r3
 8004ba2:	415a      	adcs	r2, r3
 8004ba4:	602a      	str	r2, [r5, #0]
 8004ba6:	e7ee      	b.n	8004b86 <__swhatbuf_r+0x1e>
 8004ba8:	2340      	movs	r3, #64	; 0x40
 8004baa:	2000      	movs	r0, #0
 8004bac:	6023      	str	r3, [r4, #0]
 8004bae:	b016      	add	sp, #88	; 0x58
 8004bb0:	bd70      	pop	{r4, r5, r6, pc}
	...

08004bb4 <__smakebuf_r>:
 8004bb4:	898b      	ldrh	r3, [r1, #12]
 8004bb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004bb8:	079d      	lsls	r5, r3, #30
 8004bba:	4606      	mov	r6, r0
 8004bbc:	460c      	mov	r4, r1
 8004bbe:	d507      	bpl.n	8004bd0 <__smakebuf_r+0x1c>
 8004bc0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004bc4:	6023      	str	r3, [r4, #0]
 8004bc6:	6123      	str	r3, [r4, #16]
 8004bc8:	2301      	movs	r3, #1
 8004bca:	6163      	str	r3, [r4, #20]
 8004bcc:	b002      	add	sp, #8
 8004bce:	bd70      	pop	{r4, r5, r6, pc}
 8004bd0:	ab01      	add	r3, sp, #4
 8004bd2:	466a      	mov	r2, sp
 8004bd4:	f7ff ffc8 	bl	8004b68 <__swhatbuf_r>
 8004bd8:	9900      	ldr	r1, [sp, #0]
 8004bda:	4605      	mov	r5, r0
 8004bdc:	4630      	mov	r0, r6
 8004bde:	f000 f895 	bl	8004d0c <_malloc_r>
 8004be2:	b948      	cbnz	r0, 8004bf8 <__smakebuf_r+0x44>
 8004be4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004be8:	059a      	lsls	r2, r3, #22
 8004bea:	d4ef      	bmi.n	8004bcc <__smakebuf_r+0x18>
 8004bec:	f023 0303 	bic.w	r3, r3, #3
 8004bf0:	f043 0302 	orr.w	r3, r3, #2
 8004bf4:	81a3      	strh	r3, [r4, #12]
 8004bf6:	e7e3      	b.n	8004bc0 <__smakebuf_r+0xc>
 8004bf8:	4b0d      	ldr	r3, [pc, #52]	; (8004c30 <__smakebuf_r+0x7c>)
 8004bfa:	62b3      	str	r3, [r6, #40]	; 0x28
 8004bfc:	89a3      	ldrh	r3, [r4, #12]
 8004bfe:	6020      	str	r0, [r4, #0]
 8004c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c04:	81a3      	strh	r3, [r4, #12]
 8004c06:	9b00      	ldr	r3, [sp, #0]
 8004c08:	6163      	str	r3, [r4, #20]
 8004c0a:	9b01      	ldr	r3, [sp, #4]
 8004c0c:	6120      	str	r0, [r4, #16]
 8004c0e:	b15b      	cbz	r3, 8004c28 <__smakebuf_r+0x74>
 8004c10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c14:	4630      	mov	r0, r6
 8004c16:	f000 fdbf 	bl	8005798 <_isatty_r>
 8004c1a:	b128      	cbz	r0, 8004c28 <__smakebuf_r+0x74>
 8004c1c:	89a3      	ldrh	r3, [r4, #12]
 8004c1e:	f023 0303 	bic.w	r3, r3, #3
 8004c22:	f043 0301 	orr.w	r3, r3, #1
 8004c26:	81a3      	strh	r3, [r4, #12]
 8004c28:	89a0      	ldrh	r0, [r4, #12]
 8004c2a:	4305      	orrs	r5, r0
 8004c2c:	81a5      	strh	r5, [r4, #12]
 8004c2e:	e7cd      	b.n	8004bcc <__smakebuf_r+0x18>
 8004c30:	080049c1 	.word	0x080049c1

08004c34 <_free_r>:
 8004c34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c36:	2900      	cmp	r1, #0
 8004c38:	d044      	beq.n	8004cc4 <_free_r+0x90>
 8004c3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c3e:	9001      	str	r0, [sp, #4]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	f1a1 0404 	sub.w	r4, r1, #4
 8004c46:	bfb8      	it	lt
 8004c48:	18e4      	addlt	r4, r4, r3
 8004c4a:	f000 fdef 	bl	800582c <__malloc_lock>
 8004c4e:	4a1e      	ldr	r2, [pc, #120]	; (8004cc8 <_free_r+0x94>)
 8004c50:	9801      	ldr	r0, [sp, #4]
 8004c52:	6813      	ldr	r3, [r2, #0]
 8004c54:	b933      	cbnz	r3, 8004c64 <_free_r+0x30>
 8004c56:	6063      	str	r3, [r4, #4]
 8004c58:	6014      	str	r4, [r2, #0]
 8004c5a:	b003      	add	sp, #12
 8004c5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c60:	f000 bdea 	b.w	8005838 <__malloc_unlock>
 8004c64:	42a3      	cmp	r3, r4
 8004c66:	d908      	bls.n	8004c7a <_free_r+0x46>
 8004c68:	6825      	ldr	r5, [r4, #0]
 8004c6a:	1961      	adds	r1, r4, r5
 8004c6c:	428b      	cmp	r3, r1
 8004c6e:	bf01      	itttt	eq
 8004c70:	6819      	ldreq	r1, [r3, #0]
 8004c72:	685b      	ldreq	r3, [r3, #4]
 8004c74:	1949      	addeq	r1, r1, r5
 8004c76:	6021      	streq	r1, [r4, #0]
 8004c78:	e7ed      	b.n	8004c56 <_free_r+0x22>
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	b10b      	cbz	r3, 8004c84 <_free_r+0x50>
 8004c80:	42a3      	cmp	r3, r4
 8004c82:	d9fa      	bls.n	8004c7a <_free_r+0x46>
 8004c84:	6811      	ldr	r1, [r2, #0]
 8004c86:	1855      	adds	r5, r2, r1
 8004c88:	42a5      	cmp	r5, r4
 8004c8a:	d10b      	bne.n	8004ca4 <_free_r+0x70>
 8004c8c:	6824      	ldr	r4, [r4, #0]
 8004c8e:	4421      	add	r1, r4
 8004c90:	1854      	adds	r4, r2, r1
 8004c92:	42a3      	cmp	r3, r4
 8004c94:	6011      	str	r1, [r2, #0]
 8004c96:	d1e0      	bne.n	8004c5a <_free_r+0x26>
 8004c98:	681c      	ldr	r4, [r3, #0]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	6053      	str	r3, [r2, #4]
 8004c9e:	4421      	add	r1, r4
 8004ca0:	6011      	str	r1, [r2, #0]
 8004ca2:	e7da      	b.n	8004c5a <_free_r+0x26>
 8004ca4:	d902      	bls.n	8004cac <_free_r+0x78>
 8004ca6:	230c      	movs	r3, #12
 8004ca8:	6003      	str	r3, [r0, #0]
 8004caa:	e7d6      	b.n	8004c5a <_free_r+0x26>
 8004cac:	6825      	ldr	r5, [r4, #0]
 8004cae:	1961      	adds	r1, r4, r5
 8004cb0:	428b      	cmp	r3, r1
 8004cb2:	bf04      	itt	eq
 8004cb4:	6819      	ldreq	r1, [r3, #0]
 8004cb6:	685b      	ldreq	r3, [r3, #4]
 8004cb8:	6063      	str	r3, [r4, #4]
 8004cba:	bf04      	itt	eq
 8004cbc:	1949      	addeq	r1, r1, r5
 8004cbe:	6021      	streq	r1, [r4, #0]
 8004cc0:	6054      	str	r4, [r2, #4]
 8004cc2:	e7ca      	b.n	8004c5a <_free_r+0x26>
 8004cc4:	b003      	add	sp, #12
 8004cc6:	bd30      	pop	{r4, r5, pc}
 8004cc8:	20000198 	.word	0x20000198

08004ccc <sbrk_aligned>:
 8004ccc:	b570      	push	{r4, r5, r6, lr}
 8004cce:	4e0e      	ldr	r6, [pc, #56]	; (8004d08 <sbrk_aligned+0x3c>)
 8004cd0:	460c      	mov	r4, r1
 8004cd2:	6831      	ldr	r1, [r6, #0]
 8004cd4:	4605      	mov	r5, r0
 8004cd6:	b911      	cbnz	r1, 8004cde <sbrk_aligned+0x12>
 8004cd8:	f000 fcd6 	bl	8005688 <_sbrk_r>
 8004cdc:	6030      	str	r0, [r6, #0]
 8004cde:	4621      	mov	r1, r4
 8004ce0:	4628      	mov	r0, r5
 8004ce2:	f000 fcd1 	bl	8005688 <_sbrk_r>
 8004ce6:	1c43      	adds	r3, r0, #1
 8004ce8:	d00a      	beq.n	8004d00 <sbrk_aligned+0x34>
 8004cea:	1cc4      	adds	r4, r0, #3
 8004cec:	f024 0403 	bic.w	r4, r4, #3
 8004cf0:	42a0      	cmp	r0, r4
 8004cf2:	d007      	beq.n	8004d04 <sbrk_aligned+0x38>
 8004cf4:	1a21      	subs	r1, r4, r0
 8004cf6:	4628      	mov	r0, r5
 8004cf8:	f000 fcc6 	bl	8005688 <_sbrk_r>
 8004cfc:	3001      	adds	r0, #1
 8004cfe:	d101      	bne.n	8004d04 <sbrk_aligned+0x38>
 8004d00:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004d04:	4620      	mov	r0, r4
 8004d06:	bd70      	pop	{r4, r5, r6, pc}
 8004d08:	2000019c 	.word	0x2000019c

08004d0c <_malloc_r>:
 8004d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d10:	1ccd      	adds	r5, r1, #3
 8004d12:	f025 0503 	bic.w	r5, r5, #3
 8004d16:	3508      	adds	r5, #8
 8004d18:	2d0c      	cmp	r5, #12
 8004d1a:	bf38      	it	cc
 8004d1c:	250c      	movcc	r5, #12
 8004d1e:	2d00      	cmp	r5, #0
 8004d20:	4607      	mov	r7, r0
 8004d22:	db01      	blt.n	8004d28 <_malloc_r+0x1c>
 8004d24:	42a9      	cmp	r1, r5
 8004d26:	d905      	bls.n	8004d34 <_malloc_r+0x28>
 8004d28:	230c      	movs	r3, #12
 8004d2a:	603b      	str	r3, [r7, #0]
 8004d2c:	2600      	movs	r6, #0
 8004d2e:	4630      	mov	r0, r6
 8004d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d34:	4e2e      	ldr	r6, [pc, #184]	; (8004df0 <_malloc_r+0xe4>)
 8004d36:	f000 fd79 	bl	800582c <__malloc_lock>
 8004d3a:	6833      	ldr	r3, [r6, #0]
 8004d3c:	461c      	mov	r4, r3
 8004d3e:	bb34      	cbnz	r4, 8004d8e <_malloc_r+0x82>
 8004d40:	4629      	mov	r1, r5
 8004d42:	4638      	mov	r0, r7
 8004d44:	f7ff ffc2 	bl	8004ccc <sbrk_aligned>
 8004d48:	1c43      	adds	r3, r0, #1
 8004d4a:	4604      	mov	r4, r0
 8004d4c:	d14d      	bne.n	8004dea <_malloc_r+0xde>
 8004d4e:	6834      	ldr	r4, [r6, #0]
 8004d50:	4626      	mov	r6, r4
 8004d52:	2e00      	cmp	r6, #0
 8004d54:	d140      	bne.n	8004dd8 <_malloc_r+0xcc>
 8004d56:	6823      	ldr	r3, [r4, #0]
 8004d58:	4631      	mov	r1, r6
 8004d5a:	4638      	mov	r0, r7
 8004d5c:	eb04 0803 	add.w	r8, r4, r3
 8004d60:	f000 fc92 	bl	8005688 <_sbrk_r>
 8004d64:	4580      	cmp	r8, r0
 8004d66:	d13a      	bne.n	8004dde <_malloc_r+0xd2>
 8004d68:	6821      	ldr	r1, [r4, #0]
 8004d6a:	3503      	adds	r5, #3
 8004d6c:	1a6d      	subs	r5, r5, r1
 8004d6e:	f025 0503 	bic.w	r5, r5, #3
 8004d72:	3508      	adds	r5, #8
 8004d74:	2d0c      	cmp	r5, #12
 8004d76:	bf38      	it	cc
 8004d78:	250c      	movcc	r5, #12
 8004d7a:	4629      	mov	r1, r5
 8004d7c:	4638      	mov	r0, r7
 8004d7e:	f7ff ffa5 	bl	8004ccc <sbrk_aligned>
 8004d82:	3001      	adds	r0, #1
 8004d84:	d02b      	beq.n	8004dde <_malloc_r+0xd2>
 8004d86:	6823      	ldr	r3, [r4, #0]
 8004d88:	442b      	add	r3, r5
 8004d8a:	6023      	str	r3, [r4, #0]
 8004d8c:	e00e      	b.n	8004dac <_malloc_r+0xa0>
 8004d8e:	6822      	ldr	r2, [r4, #0]
 8004d90:	1b52      	subs	r2, r2, r5
 8004d92:	d41e      	bmi.n	8004dd2 <_malloc_r+0xc6>
 8004d94:	2a0b      	cmp	r2, #11
 8004d96:	d916      	bls.n	8004dc6 <_malloc_r+0xba>
 8004d98:	1961      	adds	r1, r4, r5
 8004d9a:	42a3      	cmp	r3, r4
 8004d9c:	6025      	str	r5, [r4, #0]
 8004d9e:	bf18      	it	ne
 8004da0:	6059      	strne	r1, [r3, #4]
 8004da2:	6863      	ldr	r3, [r4, #4]
 8004da4:	bf08      	it	eq
 8004da6:	6031      	streq	r1, [r6, #0]
 8004da8:	5162      	str	r2, [r4, r5]
 8004daa:	604b      	str	r3, [r1, #4]
 8004dac:	4638      	mov	r0, r7
 8004dae:	f104 060b 	add.w	r6, r4, #11
 8004db2:	f000 fd41 	bl	8005838 <__malloc_unlock>
 8004db6:	f026 0607 	bic.w	r6, r6, #7
 8004dba:	1d23      	adds	r3, r4, #4
 8004dbc:	1af2      	subs	r2, r6, r3
 8004dbe:	d0b6      	beq.n	8004d2e <_malloc_r+0x22>
 8004dc0:	1b9b      	subs	r3, r3, r6
 8004dc2:	50a3      	str	r3, [r4, r2]
 8004dc4:	e7b3      	b.n	8004d2e <_malloc_r+0x22>
 8004dc6:	6862      	ldr	r2, [r4, #4]
 8004dc8:	42a3      	cmp	r3, r4
 8004dca:	bf0c      	ite	eq
 8004dcc:	6032      	streq	r2, [r6, #0]
 8004dce:	605a      	strne	r2, [r3, #4]
 8004dd0:	e7ec      	b.n	8004dac <_malloc_r+0xa0>
 8004dd2:	4623      	mov	r3, r4
 8004dd4:	6864      	ldr	r4, [r4, #4]
 8004dd6:	e7b2      	b.n	8004d3e <_malloc_r+0x32>
 8004dd8:	4634      	mov	r4, r6
 8004dda:	6876      	ldr	r6, [r6, #4]
 8004ddc:	e7b9      	b.n	8004d52 <_malloc_r+0x46>
 8004dde:	230c      	movs	r3, #12
 8004de0:	603b      	str	r3, [r7, #0]
 8004de2:	4638      	mov	r0, r7
 8004de4:	f000 fd28 	bl	8005838 <__malloc_unlock>
 8004de8:	e7a1      	b.n	8004d2e <_malloc_r+0x22>
 8004dea:	6025      	str	r5, [r4, #0]
 8004dec:	e7de      	b.n	8004dac <_malloc_r+0xa0>
 8004dee:	bf00      	nop
 8004df0:	20000198 	.word	0x20000198

08004df4 <__ssputs_r>:
 8004df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004df8:	688e      	ldr	r6, [r1, #8]
 8004dfa:	429e      	cmp	r6, r3
 8004dfc:	4682      	mov	sl, r0
 8004dfe:	460c      	mov	r4, r1
 8004e00:	4690      	mov	r8, r2
 8004e02:	461f      	mov	r7, r3
 8004e04:	d838      	bhi.n	8004e78 <__ssputs_r+0x84>
 8004e06:	898a      	ldrh	r2, [r1, #12]
 8004e08:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004e0c:	d032      	beq.n	8004e74 <__ssputs_r+0x80>
 8004e0e:	6825      	ldr	r5, [r4, #0]
 8004e10:	6909      	ldr	r1, [r1, #16]
 8004e12:	eba5 0901 	sub.w	r9, r5, r1
 8004e16:	6965      	ldr	r5, [r4, #20]
 8004e18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e1c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004e20:	3301      	adds	r3, #1
 8004e22:	444b      	add	r3, r9
 8004e24:	106d      	asrs	r5, r5, #1
 8004e26:	429d      	cmp	r5, r3
 8004e28:	bf38      	it	cc
 8004e2a:	461d      	movcc	r5, r3
 8004e2c:	0553      	lsls	r3, r2, #21
 8004e2e:	d531      	bpl.n	8004e94 <__ssputs_r+0xa0>
 8004e30:	4629      	mov	r1, r5
 8004e32:	f7ff ff6b 	bl	8004d0c <_malloc_r>
 8004e36:	4606      	mov	r6, r0
 8004e38:	b950      	cbnz	r0, 8004e50 <__ssputs_r+0x5c>
 8004e3a:	230c      	movs	r3, #12
 8004e3c:	f8ca 3000 	str.w	r3, [sl]
 8004e40:	89a3      	ldrh	r3, [r4, #12]
 8004e42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e46:	81a3      	strh	r3, [r4, #12]
 8004e48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e50:	6921      	ldr	r1, [r4, #16]
 8004e52:	464a      	mov	r2, r9
 8004e54:	f000 fcc2 	bl	80057dc <memcpy>
 8004e58:	89a3      	ldrh	r3, [r4, #12]
 8004e5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004e5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e62:	81a3      	strh	r3, [r4, #12]
 8004e64:	6126      	str	r6, [r4, #16]
 8004e66:	6165      	str	r5, [r4, #20]
 8004e68:	444e      	add	r6, r9
 8004e6a:	eba5 0509 	sub.w	r5, r5, r9
 8004e6e:	6026      	str	r6, [r4, #0]
 8004e70:	60a5      	str	r5, [r4, #8]
 8004e72:	463e      	mov	r6, r7
 8004e74:	42be      	cmp	r6, r7
 8004e76:	d900      	bls.n	8004e7a <__ssputs_r+0x86>
 8004e78:	463e      	mov	r6, r7
 8004e7a:	6820      	ldr	r0, [r4, #0]
 8004e7c:	4632      	mov	r2, r6
 8004e7e:	4641      	mov	r1, r8
 8004e80:	f000 fcba 	bl	80057f8 <memmove>
 8004e84:	68a3      	ldr	r3, [r4, #8]
 8004e86:	1b9b      	subs	r3, r3, r6
 8004e88:	60a3      	str	r3, [r4, #8]
 8004e8a:	6823      	ldr	r3, [r4, #0]
 8004e8c:	4433      	add	r3, r6
 8004e8e:	6023      	str	r3, [r4, #0]
 8004e90:	2000      	movs	r0, #0
 8004e92:	e7db      	b.n	8004e4c <__ssputs_r+0x58>
 8004e94:	462a      	mov	r2, r5
 8004e96:	f000 fcd5 	bl	8005844 <_realloc_r>
 8004e9a:	4606      	mov	r6, r0
 8004e9c:	2800      	cmp	r0, #0
 8004e9e:	d1e1      	bne.n	8004e64 <__ssputs_r+0x70>
 8004ea0:	6921      	ldr	r1, [r4, #16]
 8004ea2:	4650      	mov	r0, sl
 8004ea4:	f7ff fec6 	bl	8004c34 <_free_r>
 8004ea8:	e7c7      	b.n	8004e3a <__ssputs_r+0x46>
	...

08004eac <_svfiprintf_r>:
 8004eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eb0:	4698      	mov	r8, r3
 8004eb2:	898b      	ldrh	r3, [r1, #12]
 8004eb4:	061b      	lsls	r3, r3, #24
 8004eb6:	b09d      	sub	sp, #116	; 0x74
 8004eb8:	4607      	mov	r7, r0
 8004eba:	460d      	mov	r5, r1
 8004ebc:	4614      	mov	r4, r2
 8004ebe:	d50e      	bpl.n	8004ede <_svfiprintf_r+0x32>
 8004ec0:	690b      	ldr	r3, [r1, #16]
 8004ec2:	b963      	cbnz	r3, 8004ede <_svfiprintf_r+0x32>
 8004ec4:	2140      	movs	r1, #64	; 0x40
 8004ec6:	f7ff ff21 	bl	8004d0c <_malloc_r>
 8004eca:	6028      	str	r0, [r5, #0]
 8004ecc:	6128      	str	r0, [r5, #16]
 8004ece:	b920      	cbnz	r0, 8004eda <_svfiprintf_r+0x2e>
 8004ed0:	230c      	movs	r3, #12
 8004ed2:	603b      	str	r3, [r7, #0]
 8004ed4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ed8:	e0d1      	b.n	800507e <_svfiprintf_r+0x1d2>
 8004eda:	2340      	movs	r3, #64	; 0x40
 8004edc:	616b      	str	r3, [r5, #20]
 8004ede:	2300      	movs	r3, #0
 8004ee0:	9309      	str	r3, [sp, #36]	; 0x24
 8004ee2:	2320      	movs	r3, #32
 8004ee4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ee8:	f8cd 800c 	str.w	r8, [sp, #12]
 8004eec:	2330      	movs	r3, #48	; 0x30
 8004eee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005098 <_svfiprintf_r+0x1ec>
 8004ef2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ef6:	f04f 0901 	mov.w	r9, #1
 8004efa:	4623      	mov	r3, r4
 8004efc:	469a      	mov	sl, r3
 8004efe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f02:	b10a      	cbz	r2, 8004f08 <_svfiprintf_r+0x5c>
 8004f04:	2a25      	cmp	r2, #37	; 0x25
 8004f06:	d1f9      	bne.n	8004efc <_svfiprintf_r+0x50>
 8004f08:	ebba 0b04 	subs.w	fp, sl, r4
 8004f0c:	d00b      	beq.n	8004f26 <_svfiprintf_r+0x7a>
 8004f0e:	465b      	mov	r3, fp
 8004f10:	4622      	mov	r2, r4
 8004f12:	4629      	mov	r1, r5
 8004f14:	4638      	mov	r0, r7
 8004f16:	f7ff ff6d 	bl	8004df4 <__ssputs_r>
 8004f1a:	3001      	adds	r0, #1
 8004f1c:	f000 80aa 	beq.w	8005074 <_svfiprintf_r+0x1c8>
 8004f20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f22:	445a      	add	r2, fp
 8004f24:	9209      	str	r2, [sp, #36]	; 0x24
 8004f26:	f89a 3000 	ldrb.w	r3, [sl]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	f000 80a2 	beq.w	8005074 <_svfiprintf_r+0x1c8>
 8004f30:	2300      	movs	r3, #0
 8004f32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f3a:	f10a 0a01 	add.w	sl, sl, #1
 8004f3e:	9304      	str	r3, [sp, #16]
 8004f40:	9307      	str	r3, [sp, #28]
 8004f42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f46:	931a      	str	r3, [sp, #104]	; 0x68
 8004f48:	4654      	mov	r4, sl
 8004f4a:	2205      	movs	r2, #5
 8004f4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f50:	4851      	ldr	r0, [pc, #324]	; (8005098 <_svfiprintf_r+0x1ec>)
 8004f52:	f7fb f955 	bl	8000200 <memchr>
 8004f56:	9a04      	ldr	r2, [sp, #16]
 8004f58:	b9d8      	cbnz	r0, 8004f92 <_svfiprintf_r+0xe6>
 8004f5a:	06d0      	lsls	r0, r2, #27
 8004f5c:	bf44      	itt	mi
 8004f5e:	2320      	movmi	r3, #32
 8004f60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f64:	0711      	lsls	r1, r2, #28
 8004f66:	bf44      	itt	mi
 8004f68:	232b      	movmi	r3, #43	; 0x2b
 8004f6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f6e:	f89a 3000 	ldrb.w	r3, [sl]
 8004f72:	2b2a      	cmp	r3, #42	; 0x2a
 8004f74:	d015      	beq.n	8004fa2 <_svfiprintf_r+0xf6>
 8004f76:	9a07      	ldr	r2, [sp, #28]
 8004f78:	4654      	mov	r4, sl
 8004f7a:	2000      	movs	r0, #0
 8004f7c:	f04f 0c0a 	mov.w	ip, #10
 8004f80:	4621      	mov	r1, r4
 8004f82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f86:	3b30      	subs	r3, #48	; 0x30
 8004f88:	2b09      	cmp	r3, #9
 8004f8a:	d94e      	bls.n	800502a <_svfiprintf_r+0x17e>
 8004f8c:	b1b0      	cbz	r0, 8004fbc <_svfiprintf_r+0x110>
 8004f8e:	9207      	str	r2, [sp, #28]
 8004f90:	e014      	b.n	8004fbc <_svfiprintf_r+0x110>
 8004f92:	eba0 0308 	sub.w	r3, r0, r8
 8004f96:	fa09 f303 	lsl.w	r3, r9, r3
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	9304      	str	r3, [sp, #16]
 8004f9e:	46a2      	mov	sl, r4
 8004fa0:	e7d2      	b.n	8004f48 <_svfiprintf_r+0x9c>
 8004fa2:	9b03      	ldr	r3, [sp, #12]
 8004fa4:	1d19      	adds	r1, r3, #4
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	9103      	str	r1, [sp, #12]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	bfbb      	ittet	lt
 8004fae:	425b      	neglt	r3, r3
 8004fb0:	f042 0202 	orrlt.w	r2, r2, #2
 8004fb4:	9307      	strge	r3, [sp, #28]
 8004fb6:	9307      	strlt	r3, [sp, #28]
 8004fb8:	bfb8      	it	lt
 8004fba:	9204      	strlt	r2, [sp, #16]
 8004fbc:	7823      	ldrb	r3, [r4, #0]
 8004fbe:	2b2e      	cmp	r3, #46	; 0x2e
 8004fc0:	d10c      	bne.n	8004fdc <_svfiprintf_r+0x130>
 8004fc2:	7863      	ldrb	r3, [r4, #1]
 8004fc4:	2b2a      	cmp	r3, #42	; 0x2a
 8004fc6:	d135      	bne.n	8005034 <_svfiprintf_r+0x188>
 8004fc8:	9b03      	ldr	r3, [sp, #12]
 8004fca:	1d1a      	adds	r2, r3, #4
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	9203      	str	r2, [sp, #12]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	bfb8      	it	lt
 8004fd4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004fd8:	3402      	adds	r4, #2
 8004fda:	9305      	str	r3, [sp, #20]
 8004fdc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80050a8 <_svfiprintf_r+0x1fc>
 8004fe0:	7821      	ldrb	r1, [r4, #0]
 8004fe2:	2203      	movs	r2, #3
 8004fe4:	4650      	mov	r0, sl
 8004fe6:	f7fb f90b 	bl	8000200 <memchr>
 8004fea:	b140      	cbz	r0, 8004ffe <_svfiprintf_r+0x152>
 8004fec:	2340      	movs	r3, #64	; 0x40
 8004fee:	eba0 000a 	sub.w	r0, r0, sl
 8004ff2:	fa03 f000 	lsl.w	r0, r3, r0
 8004ff6:	9b04      	ldr	r3, [sp, #16]
 8004ff8:	4303      	orrs	r3, r0
 8004ffa:	3401      	adds	r4, #1
 8004ffc:	9304      	str	r3, [sp, #16]
 8004ffe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005002:	4826      	ldr	r0, [pc, #152]	; (800509c <_svfiprintf_r+0x1f0>)
 8005004:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005008:	2206      	movs	r2, #6
 800500a:	f7fb f8f9 	bl	8000200 <memchr>
 800500e:	2800      	cmp	r0, #0
 8005010:	d038      	beq.n	8005084 <_svfiprintf_r+0x1d8>
 8005012:	4b23      	ldr	r3, [pc, #140]	; (80050a0 <_svfiprintf_r+0x1f4>)
 8005014:	bb1b      	cbnz	r3, 800505e <_svfiprintf_r+0x1b2>
 8005016:	9b03      	ldr	r3, [sp, #12]
 8005018:	3307      	adds	r3, #7
 800501a:	f023 0307 	bic.w	r3, r3, #7
 800501e:	3308      	adds	r3, #8
 8005020:	9303      	str	r3, [sp, #12]
 8005022:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005024:	4433      	add	r3, r6
 8005026:	9309      	str	r3, [sp, #36]	; 0x24
 8005028:	e767      	b.n	8004efa <_svfiprintf_r+0x4e>
 800502a:	fb0c 3202 	mla	r2, ip, r2, r3
 800502e:	460c      	mov	r4, r1
 8005030:	2001      	movs	r0, #1
 8005032:	e7a5      	b.n	8004f80 <_svfiprintf_r+0xd4>
 8005034:	2300      	movs	r3, #0
 8005036:	3401      	adds	r4, #1
 8005038:	9305      	str	r3, [sp, #20]
 800503a:	4619      	mov	r1, r3
 800503c:	f04f 0c0a 	mov.w	ip, #10
 8005040:	4620      	mov	r0, r4
 8005042:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005046:	3a30      	subs	r2, #48	; 0x30
 8005048:	2a09      	cmp	r2, #9
 800504a:	d903      	bls.n	8005054 <_svfiprintf_r+0x1a8>
 800504c:	2b00      	cmp	r3, #0
 800504e:	d0c5      	beq.n	8004fdc <_svfiprintf_r+0x130>
 8005050:	9105      	str	r1, [sp, #20]
 8005052:	e7c3      	b.n	8004fdc <_svfiprintf_r+0x130>
 8005054:	fb0c 2101 	mla	r1, ip, r1, r2
 8005058:	4604      	mov	r4, r0
 800505a:	2301      	movs	r3, #1
 800505c:	e7f0      	b.n	8005040 <_svfiprintf_r+0x194>
 800505e:	ab03      	add	r3, sp, #12
 8005060:	9300      	str	r3, [sp, #0]
 8005062:	462a      	mov	r2, r5
 8005064:	4b0f      	ldr	r3, [pc, #60]	; (80050a4 <_svfiprintf_r+0x1f8>)
 8005066:	a904      	add	r1, sp, #16
 8005068:	4638      	mov	r0, r7
 800506a:	f3af 8000 	nop.w
 800506e:	1c42      	adds	r2, r0, #1
 8005070:	4606      	mov	r6, r0
 8005072:	d1d6      	bne.n	8005022 <_svfiprintf_r+0x176>
 8005074:	89ab      	ldrh	r3, [r5, #12]
 8005076:	065b      	lsls	r3, r3, #25
 8005078:	f53f af2c 	bmi.w	8004ed4 <_svfiprintf_r+0x28>
 800507c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800507e:	b01d      	add	sp, #116	; 0x74
 8005080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005084:	ab03      	add	r3, sp, #12
 8005086:	9300      	str	r3, [sp, #0]
 8005088:	462a      	mov	r2, r5
 800508a:	4b06      	ldr	r3, [pc, #24]	; (80050a4 <_svfiprintf_r+0x1f8>)
 800508c:	a904      	add	r1, sp, #16
 800508e:	4638      	mov	r0, r7
 8005090:	f000 f9d4 	bl	800543c <_printf_i>
 8005094:	e7eb      	b.n	800506e <_svfiprintf_r+0x1c2>
 8005096:	bf00      	nop
 8005098:	08005a04 	.word	0x08005a04
 800509c:	08005a0e 	.word	0x08005a0e
 80050a0:	00000000 	.word	0x00000000
 80050a4:	08004df5 	.word	0x08004df5
 80050a8:	08005a0a 	.word	0x08005a0a

080050ac <__sfputc_r>:
 80050ac:	6893      	ldr	r3, [r2, #8]
 80050ae:	3b01      	subs	r3, #1
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	b410      	push	{r4}
 80050b4:	6093      	str	r3, [r2, #8]
 80050b6:	da08      	bge.n	80050ca <__sfputc_r+0x1e>
 80050b8:	6994      	ldr	r4, [r2, #24]
 80050ba:	42a3      	cmp	r3, r4
 80050bc:	db01      	blt.n	80050c2 <__sfputc_r+0x16>
 80050be:	290a      	cmp	r1, #10
 80050c0:	d103      	bne.n	80050ca <__sfputc_r+0x1e>
 80050c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80050c6:	f7ff bad5 	b.w	8004674 <__swbuf_r>
 80050ca:	6813      	ldr	r3, [r2, #0]
 80050cc:	1c58      	adds	r0, r3, #1
 80050ce:	6010      	str	r0, [r2, #0]
 80050d0:	7019      	strb	r1, [r3, #0]
 80050d2:	4608      	mov	r0, r1
 80050d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80050d8:	4770      	bx	lr

080050da <__sfputs_r>:
 80050da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050dc:	4606      	mov	r6, r0
 80050de:	460f      	mov	r7, r1
 80050e0:	4614      	mov	r4, r2
 80050e2:	18d5      	adds	r5, r2, r3
 80050e4:	42ac      	cmp	r4, r5
 80050e6:	d101      	bne.n	80050ec <__sfputs_r+0x12>
 80050e8:	2000      	movs	r0, #0
 80050ea:	e007      	b.n	80050fc <__sfputs_r+0x22>
 80050ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050f0:	463a      	mov	r2, r7
 80050f2:	4630      	mov	r0, r6
 80050f4:	f7ff ffda 	bl	80050ac <__sfputc_r>
 80050f8:	1c43      	adds	r3, r0, #1
 80050fa:	d1f3      	bne.n	80050e4 <__sfputs_r+0xa>
 80050fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005100 <_vfiprintf_r>:
 8005100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005104:	460d      	mov	r5, r1
 8005106:	b09d      	sub	sp, #116	; 0x74
 8005108:	4614      	mov	r4, r2
 800510a:	4698      	mov	r8, r3
 800510c:	4606      	mov	r6, r0
 800510e:	b118      	cbz	r0, 8005118 <_vfiprintf_r+0x18>
 8005110:	6983      	ldr	r3, [r0, #24]
 8005112:	b90b      	cbnz	r3, 8005118 <_vfiprintf_r+0x18>
 8005114:	f7ff fc88 	bl	8004a28 <__sinit>
 8005118:	4b89      	ldr	r3, [pc, #548]	; (8005340 <_vfiprintf_r+0x240>)
 800511a:	429d      	cmp	r5, r3
 800511c:	d11b      	bne.n	8005156 <_vfiprintf_r+0x56>
 800511e:	6875      	ldr	r5, [r6, #4]
 8005120:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005122:	07d9      	lsls	r1, r3, #31
 8005124:	d405      	bmi.n	8005132 <_vfiprintf_r+0x32>
 8005126:	89ab      	ldrh	r3, [r5, #12]
 8005128:	059a      	lsls	r2, r3, #22
 800512a:	d402      	bmi.n	8005132 <_vfiprintf_r+0x32>
 800512c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800512e:	f7ff fd19 	bl	8004b64 <__retarget_lock_acquire_recursive>
 8005132:	89ab      	ldrh	r3, [r5, #12]
 8005134:	071b      	lsls	r3, r3, #28
 8005136:	d501      	bpl.n	800513c <_vfiprintf_r+0x3c>
 8005138:	692b      	ldr	r3, [r5, #16]
 800513a:	b9eb      	cbnz	r3, 8005178 <_vfiprintf_r+0x78>
 800513c:	4629      	mov	r1, r5
 800513e:	4630      	mov	r0, r6
 8005140:	f7ff faea 	bl	8004718 <__swsetup_r>
 8005144:	b1c0      	cbz	r0, 8005178 <_vfiprintf_r+0x78>
 8005146:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005148:	07dc      	lsls	r4, r3, #31
 800514a:	d50e      	bpl.n	800516a <_vfiprintf_r+0x6a>
 800514c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005150:	b01d      	add	sp, #116	; 0x74
 8005152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005156:	4b7b      	ldr	r3, [pc, #492]	; (8005344 <_vfiprintf_r+0x244>)
 8005158:	429d      	cmp	r5, r3
 800515a:	d101      	bne.n	8005160 <_vfiprintf_r+0x60>
 800515c:	68b5      	ldr	r5, [r6, #8]
 800515e:	e7df      	b.n	8005120 <_vfiprintf_r+0x20>
 8005160:	4b79      	ldr	r3, [pc, #484]	; (8005348 <_vfiprintf_r+0x248>)
 8005162:	429d      	cmp	r5, r3
 8005164:	bf08      	it	eq
 8005166:	68f5      	ldreq	r5, [r6, #12]
 8005168:	e7da      	b.n	8005120 <_vfiprintf_r+0x20>
 800516a:	89ab      	ldrh	r3, [r5, #12]
 800516c:	0598      	lsls	r0, r3, #22
 800516e:	d4ed      	bmi.n	800514c <_vfiprintf_r+0x4c>
 8005170:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005172:	f7ff fcf8 	bl	8004b66 <__retarget_lock_release_recursive>
 8005176:	e7e9      	b.n	800514c <_vfiprintf_r+0x4c>
 8005178:	2300      	movs	r3, #0
 800517a:	9309      	str	r3, [sp, #36]	; 0x24
 800517c:	2320      	movs	r3, #32
 800517e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005182:	f8cd 800c 	str.w	r8, [sp, #12]
 8005186:	2330      	movs	r3, #48	; 0x30
 8005188:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800534c <_vfiprintf_r+0x24c>
 800518c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005190:	f04f 0901 	mov.w	r9, #1
 8005194:	4623      	mov	r3, r4
 8005196:	469a      	mov	sl, r3
 8005198:	f813 2b01 	ldrb.w	r2, [r3], #1
 800519c:	b10a      	cbz	r2, 80051a2 <_vfiprintf_r+0xa2>
 800519e:	2a25      	cmp	r2, #37	; 0x25
 80051a0:	d1f9      	bne.n	8005196 <_vfiprintf_r+0x96>
 80051a2:	ebba 0b04 	subs.w	fp, sl, r4
 80051a6:	d00b      	beq.n	80051c0 <_vfiprintf_r+0xc0>
 80051a8:	465b      	mov	r3, fp
 80051aa:	4622      	mov	r2, r4
 80051ac:	4629      	mov	r1, r5
 80051ae:	4630      	mov	r0, r6
 80051b0:	f7ff ff93 	bl	80050da <__sfputs_r>
 80051b4:	3001      	adds	r0, #1
 80051b6:	f000 80aa 	beq.w	800530e <_vfiprintf_r+0x20e>
 80051ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051bc:	445a      	add	r2, fp
 80051be:	9209      	str	r2, [sp, #36]	; 0x24
 80051c0:	f89a 3000 	ldrb.w	r3, [sl]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	f000 80a2 	beq.w	800530e <_vfiprintf_r+0x20e>
 80051ca:	2300      	movs	r3, #0
 80051cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80051d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80051d4:	f10a 0a01 	add.w	sl, sl, #1
 80051d8:	9304      	str	r3, [sp, #16]
 80051da:	9307      	str	r3, [sp, #28]
 80051dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80051e0:	931a      	str	r3, [sp, #104]	; 0x68
 80051e2:	4654      	mov	r4, sl
 80051e4:	2205      	movs	r2, #5
 80051e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051ea:	4858      	ldr	r0, [pc, #352]	; (800534c <_vfiprintf_r+0x24c>)
 80051ec:	f7fb f808 	bl	8000200 <memchr>
 80051f0:	9a04      	ldr	r2, [sp, #16]
 80051f2:	b9d8      	cbnz	r0, 800522c <_vfiprintf_r+0x12c>
 80051f4:	06d1      	lsls	r1, r2, #27
 80051f6:	bf44      	itt	mi
 80051f8:	2320      	movmi	r3, #32
 80051fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051fe:	0713      	lsls	r3, r2, #28
 8005200:	bf44      	itt	mi
 8005202:	232b      	movmi	r3, #43	; 0x2b
 8005204:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005208:	f89a 3000 	ldrb.w	r3, [sl]
 800520c:	2b2a      	cmp	r3, #42	; 0x2a
 800520e:	d015      	beq.n	800523c <_vfiprintf_r+0x13c>
 8005210:	9a07      	ldr	r2, [sp, #28]
 8005212:	4654      	mov	r4, sl
 8005214:	2000      	movs	r0, #0
 8005216:	f04f 0c0a 	mov.w	ip, #10
 800521a:	4621      	mov	r1, r4
 800521c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005220:	3b30      	subs	r3, #48	; 0x30
 8005222:	2b09      	cmp	r3, #9
 8005224:	d94e      	bls.n	80052c4 <_vfiprintf_r+0x1c4>
 8005226:	b1b0      	cbz	r0, 8005256 <_vfiprintf_r+0x156>
 8005228:	9207      	str	r2, [sp, #28]
 800522a:	e014      	b.n	8005256 <_vfiprintf_r+0x156>
 800522c:	eba0 0308 	sub.w	r3, r0, r8
 8005230:	fa09 f303 	lsl.w	r3, r9, r3
 8005234:	4313      	orrs	r3, r2
 8005236:	9304      	str	r3, [sp, #16]
 8005238:	46a2      	mov	sl, r4
 800523a:	e7d2      	b.n	80051e2 <_vfiprintf_r+0xe2>
 800523c:	9b03      	ldr	r3, [sp, #12]
 800523e:	1d19      	adds	r1, r3, #4
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	9103      	str	r1, [sp, #12]
 8005244:	2b00      	cmp	r3, #0
 8005246:	bfbb      	ittet	lt
 8005248:	425b      	neglt	r3, r3
 800524a:	f042 0202 	orrlt.w	r2, r2, #2
 800524e:	9307      	strge	r3, [sp, #28]
 8005250:	9307      	strlt	r3, [sp, #28]
 8005252:	bfb8      	it	lt
 8005254:	9204      	strlt	r2, [sp, #16]
 8005256:	7823      	ldrb	r3, [r4, #0]
 8005258:	2b2e      	cmp	r3, #46	; 0x2e
 800525a:	d10c      	bne.n	8005276 <_vfiprintf_r+0x176>
 800525c:	7863      	ldrb	r3, [r4, #1]
 800525e:	2b2a      	cmp	r3, #42	; 0x2a
 8005260:	d135      	bne.n	80052ce <_vfiprintf_r+0x1ce>
 8005262:	9b03      	ldr	r3, [sp, #12]
 8005264:	1d1a      	adds	r2, r3, #4
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	9203      	str	r2, [sp, #12]
 800526a:	2b00      	cmp	r3, #0
 800526c:	bfb8      	it	lt
 800526e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005272:	3402      	adds	r4, #2
 8005274:	9305      	str	r3, [sp, #20]
 8005276:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800535c <_vfiprintf_r+0x25c>
 800527a:	7821      	ldrb	r1, [r4, #0]
 800527c:	2203      	movs	r2, #3
 800527e:	4650      	mov	r0, sl
 8005280:	f7fa ffbe 	bl	8000200 <memchr>
 8005284:	b140      	cbz	r0, 8005298 <_vfiprintf_r+0x198>
 8005286:	2340      	movs	r3, #64	; 0x40
 8005288:	eba0 000a 	sub.w	r0, r0, sl
 800528c:	fa03 f000 	lsl.w	r0, r3, r0
 8005290:	9b04      	ldr	r3, [sp, #16]
 8005292:	4303      	orrs	r3, r0
 8005294:	3401      	adds	r4, #1
 8005296:	9304      	str	r3, [sp, #16]
 8005298:	f814 1b01 	ldrb.w	r1, [r4], #1
 800529c:	482c      	ldr	r0, [pc, #176]	; (8005350 <_vfiprintf_r+0x250>)
 800529e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80052a2:	2206      	movs	r2, #6
 80052a4:	f7fa ffac 	bl	8000200 <memchr>
 80052a8:	2800      	cmp	r0, #0
 80052aa:	d03f      	beq.n	800532c <_vfiprintf_r+0x22c>
 80052ac:	4b29      	ldr	r3, [pc, #164]	; (8005354 <_vfiprintf_r+0x254>)
 80052ae:	bb1b      	cbnz	r3, 80052f8 <_vfiprintf_r+0x1f8>
 80052b0:	9b03      	ldr	r3, [sp, #12]
 80052b2:	3307      	adds	r3, #7
 80052b4:	f023 0307 	bic.w	r3, r3, #7
 80052b8:	3308      	adds	r3, #8
 80052ba:	9303      	str	r3, [sp, #12]
 80052bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052be:	443b      	add	r3, r7
 80052c0:	9309      	str	r3, [sp, #36]	; 0x24
 80052c2:	e767      	b.n	8005194 <_vfiprintf_r+0x94>
 80052c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80052c8:	460c      	mov	r4, r1
 80052ca:	2001      	movs	r0, #1
 80052cc:	e7a5      	b.n	800521a <_vfiprintf_r+0x11a>
 80052ce:	2300      	movs	r3, #0
 80052d0:	3401      	adds	r4, #1
 80052d2:	9305      	str	r3, [sp, #20]
 80052d4:	4619      	mov	r1, r3
 80052d6:	f04f 0c0a 	mov.w	ip, #10
 80052da:	4620      	mov	r0, r4
 80052dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052e0:	3a30      	subs	r2, #48	; 0x30
 80052e2:	2a09      	cmp	r2, #9
 80052e4:	d903      	bls.n	80052ee <_vfiprintf_r+0x1ee>
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d0c5      	beq.n	8005276 <_vfiprintf_r+0x176>
 80052ea:	9105      	str	r1, [sp, #20]
 80052ec:	e7c3      	b.n	8005276 <_vfiprintf_r+0x176>
 80052ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80052f2:	4604      	mov	r4, r0
 80052f4:	2301      	movs	r3, #1
 80052f6:	e7f0      	b.n	80052da <_vfiprintf_r+0x1da>
 80052f8:	ab03      	add	r3, sp, #12
 80052fa:	9300      	str	r3, [sp, #0]
 80052fc:	462a      	mov	r2, r5
 80052fe:	4b16      	ldr	r3, [pc, #88]	; (8005358 <_vfiprintf_r+0x258>)
 8005300:	a904      	add	r1, sp, #16
 8005302:	4630      	mov	r0, r6
 8005304:	f3af 8000 	nop.w
 8005308:	4607      	mov	r7, r0
 800530a:	1c78      	adds	r0, r7, #1
 800530c:	d1d6      	bne.n	80052bc <_vfiprintf_r+0x1bc>
 800530e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005310:	07d9      	lsls	r1, r3, #31
 8005312:	d405      	bmi.n	8005320 <_vfiprintf_r+0x220>
 8005314:	89ab      	ldrh	r3, [r5, #12]
 8005316:	059a      	lsls	r2, r3, #22
 8005318:	d402      	bmi.n	8005320 <_vfiprintf_r+0x220>
 800531a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800531c:	f7ff fc23 	bl	8004b66 <__retarget_lock_release_recursive>
 8005320:	89ab      	ldrh	r3, [r5, #12]
 8005322:	065b      	lsls	r3, r3, #25
 8005324:	f53f af12 	bmi.w	800514c <_vfiprintf_r+0x4c>
 8005328:	9809      	ldr	r0, [sp, #36]	; 0x24
 800532a:	e711      	b.n	8005150 <_vfiprintf_r+0x50>
 800532c:	ab03      	add	r3, sp, #12
 800532e:	9300      	str	r3, [sp, #0]
 8005330:	462a      	mov	r2, r5
 8005332:	4b09      	ldr	r3, [pc, #36]	; (8005358 <_vfiprintf_r+0x258>)
 8005334:	a904      	add	r1, sp, #16
 8005336:	4630      	mov	r0, r6
 8005338:	f000 f880 	bl	800543c <_printf_i>
 800533c:	e7e4      	b.n	8005308 <_vfiprintf_r+0x208>
 800533e:	bf00      	nop
 8005340:	080059c4 	.word	0x080059c4
 8005344:	080059e4 	.word	0x080059e4
 8005348:	080059a4 	.word	0x080059a4
 800534c:	08005a04 	.word	0x08005a04
 8005350:	08005a0e 	.word	0x08005a0e
 8005354:	00000000 	.word	0x00000000
 8005358:	080050db 	.word	0x080050db
 800535c:	08005a0a 	.word	0x08005a0a

08005360 <_printf_common>:
 8005360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005364:	4616      	mov	r6, r2
 8005366:	4699      	mov	r9, r3
 8005368:	688a      	ldr	r2, [r1, #8]
 800536a:	690b      	ldr	r3, [r1, #16]
 800536c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005370:	4293      	cmp	r3, r2
 8005372:	bfb8      	it	lt
 8005374:	4613      	movlt	r3, r2
 8005376:	6033      	str	r3, [r6, #0]
 8005378:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800537c:	4607      	mov	r7, r0
 800537e:	460c      	mov	r4, r1
 8005380:	b10a      	cbz	r2, 8005386 <_printf_common+0x26>
 8005382:	3301      	adds	r3, #1
 8005384:	6033      	str	r3, [r6, #0]
 8005386:	6823      	ldr	r3, [r4, #0]
 8005388:	0699      	lsls	r1, r3, #26
 800538a:	bf42      	ittt	mi
 800538c:	6833      	ldrmi	r3, [r6, #0]
 800538e:	3302      	addmi	r3, #2
 8005390:	6033      	strmi	r3, [r6, #0]
 8005392:	6825      	ldr	r5, [r4, #0]
 8005394:	f015 0506 	ands.w	r5, r5, #6
 8005398:	d106      	bne.n	80053a8 <_printf_common+0x48>
 800539a:	f104 0a19 	add.w	sl, r4, #25
 800539e:	68e3      	ldr	r3, [r4, #12]
 80053a0:	6832      	ldr	r2, [r6, #0]
 80053a2:	1a9b      	subs	r3, r3, r2
 80053a4:	42ab      	cmp	r3, r5
 80053a6:	dc26      	bgt.n	80053f6 <_printf_common+0x96>
 80053a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80053ac:	1e13      	subs	r3, r2, #0
 80053ae:	6822      	ldr	r2, [r4, #0]
 80053b0:	bf18      	it	ne
 80053b2:	2301      	movne	r3, #1
 80053b4:	0692      	lsls	r2, r2, #26
 80053b6:	d42b      	bmi.n	8005410 <_printf_common+0xb0>
 80053b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053bc:	4649      	mov	r1, r9
 80053be:	4638      	mov	r0, r7
 80053c0:	47c0      	blx	r8
 80053c2:	3001      	adds	r0, #1
 80053c4:	d01e      	beq.n	8005404 <_printf_common+0xa4>
 80053c6:	6823      	ldr	r3, [r4, #0]
 80053c8:	68e5      	ldr	r5, [r4, #12]
 80053ca:	6832      	ldr	r2, [r6, #0]
 80053cc:	f003 0306 	and.w	r3, r3, #6
 80053d0:	2b04      	cmp	r3, #4
 80053d2:	bf08      	it	eq
 80053d4:	1aad      	subeq	r5, r5, r2
 80053d6:	68a3      	ldr	r3, [r4, #8]
 80053d8:	6922      	ldr	r2, [r4, #16]
 80053da:	bf0c      	ite	eq
 80053dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053e0:	2500      	movne	r5, #0
 80053e2:	4293      	cmp	r3, r2
 80053e4:	bfc4      	itt	gt
 80053e6:	1a9b      	subgt	r3, r3, r2
 80053e8:	18ed      	addgt	r5, r5, r3
 80053ea:	2600      	movs	r6, #0
 80053ec:	341a      	adds	r4, #26
 80053ee:	42b5      	cmp	r5, r6
 80053f0:	d11a      	bne.n	8005428 <_printf_common+0xc8>
 80053f2:	2000      	movs	r0, #0
 80053f4:	e008      	b.n	8005408 <_printf_common+0xa8>
 80053f6:	2301      	movs	r3, #1
 80053f8:	4652      	mov	r2, sl
 80053fa:	4649      	mov	r1, r9
 80053fc:	4638      	mov	r0, r7
 80053fe:	47c0      	blx	r8
 8005400:	3001      	adds	r0, #1
 8005402:	d103      	bne.n	800540c <_printf_common+0xac>
 8005404:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800540c:	3501      	adds	r5, #1
 800540e:	e7c6      	b.n	800539e <_printf_common+0x3e>
 8005410:	18e1      	adds	r1, r4, r3
 8005412:	1c5a      	adds	r2, r3, #1
 8005414:	2030      	movs	r0, #48	; 0x30
 8005416:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800541a:	4422      	add	r2, r4
 800541c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005420:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005424:	3302      	adds	r3, #2
 8005426:	e7c7      	b.n	80053b8 <_printf_common+0x58>
 8005428:	2301      	movs	r3, #1
 800542a:	4622      	mov	r2, r4
 800542c:	4649      	mov	r1, r9
 800542e:	4638      	mov	r0, r7
 8005430:	47c0      	blx	r8
 8005432:	3001      	adds	r0, #1
 8005434:	d0e6      	beq.n	8005404 <_printf_common+0xa4>
 8005436:	3601      	adds	r6, #1
 8005438:	e7d9      	b.n	80053ee <_printf_common+0x8e>
	...

0800543c <_printf_i>:
 800543c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005440:	7e0f      	ldrb	r7, [r1, #24]
 8005442:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005444:	2f78      	cmp	r7, #120	; 0x78
 8005446:	4691      	mov	r9, r2
 8005448:	4680      	mov	r8, r0
 800544a:	460c      	mov	r4, r1
 800544c:	469a      	mov	sl, r3
 800544e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005452:	d807      	bhi.n	8005464 <_printf_i+0x28>
 8005454:	2f62      	cmp	r7, #98	; 0x62
 8005456:	d80a      	bhi.n	800546e <_printf_i+0x32>
 8005458:	2f00      	cmp	r7, #0
 800545a:	f000 80d8 	beq.w	800560e <_printf_i+0x1d2>
 800545e:	2f58      	cmp	r7, #88	; 0x58
 8005460:	f000 80a3 	beq.w	80055aa <_printf_i+0x16e>
 8005464:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005468:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800546c:	e03a      	b.n	80054e4 <_printf_i+0xa8>
 800546e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005472:	2b15      	cmp	r3, #21
 8005474:	d8f6      	bhi.n	8005464 <_printf_i+0x28>
 8005476:	a101      	add	r1, pc, #4	; (adr r1, 800547c <_printf_i+0x40>)
 8005478:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800547c:	080054d5 	.word	0x080054d5
 8005480:	080054e9 	.word	0x080054e9
 8005484:	08005465 	.word	0x08005465
 8005488:	08005465 	.word	0x08005465
 800548c:	08005465 	.word	0x08005465
 8005490:	08005465 	.word	0x08005465
 8005494:	080054e9 	.word	0x080054e9
 8005498:	08005465 	.word	0x08005465
 800549c:	08005465 	.word	0x08005465
 80054a0:	08005465 	.word	0x08005465
 80054a4:	08005465 	.word	0x08005465
 80054a8:	080055f5 	.word	0x080055f5
 80054ac:	08005519 	.word	0x08005519
 80054b0:	080055d7 	.word	0x080055d7
 80054b4:	08005465 	.word	0x08005465
 80054b8:	08005465 	.word	0x08005465
 80054bc:	08005617 	.word	0x08005617
 80054c0:	08005465 	.word	0x08005465
 80054c4:	08005519 	.word	0x08005519
 80054c8:	08005465 	.word	0x08005465
 80054cc:	08005465 	.word	0x08005465
 80054d0:	080055df 	.word	0x080055df
 80054d4:	682b      	ldr	r3, [r5, #0]
 80054d6:	1d1a      	adds	r2, r3, #4
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	602a      	str	r2, [r5, #0]
 80054dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80054e4:	2301      	movs	r3, #1
 80054e6:	e0a3      	b.n	8005630 <_printf_i+0x1f4>
 80054e8:	6820      	ldr	r0, [r4, #0]
 80054ea:	6829      	ldr	r1, [r5, #0]
 80054ec:	0606      	lsls	r6, r0, #24
 80054ee:	f101 0304 	add.w	r3, r1, #4
 80054f2:	d50a      	bpl.n	800550a <_printf_i+0xce>
 80054f4:	680e      	ldr	r6, [r1, #0]
 80054f6:	602b      	str	r3, [r5, #0]
 80054f8:	2e00      	cmp	r6, #0
 80054fa:	da03      	bge.n	8005504 <_printf_i+0xc8>
 80054fc:	232d      	movs	r3, #45	; 0x2d
 80054fe:	4276      	negs	r6, r6
 8005500:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005504:	485e      	ldr	r0, [pc, #376]	; (8005680 <_printf_i+0x244>)
 8005506:	230a      	movs	r3, #10
 8005508:	e019      	b.n	800553e <_printf_i+0x102>
 800550a:	680e      	ldr	r6, [r1, #0]
 800550c:	602b      	str	r3, [r5, #0]
 800550e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005512:	bf18      	it	ne
 8005514:	b236      	sxthne	r6, r6
 8005516:	e7ef      	b.n	80054f8 <_printf_i+0xbc>
 8005518:	682b      	ldr	r3, [r5, #0]
 800551a:	6820      	ldr	r0, [r4, #0]
 800551c:	1d19      	adds	r1, r3, #4
 800551e:	6029      	str	r1, [r5, #0]
 8005520:	0601      	lsls	r1, r0, #24
 8005522:	d501      	bpl.n	8005528 <_printf_i+0xec>
 8005524:	681e      	ldr	r6, [r3, #0]
 8005526:	e002      	b.n	800552e <_printf_i+0xf2>
 8005528:	0646      	lsls	r6, r0, #25
 800552a:	d5fb      	bpl.n	8005524 <_printf_i+0xe8>
 800552c:	881e      	ldrh	r6, [r3, #0]
 800552e:	4854      	ldr	r0, [pc, #336]	; (8005680 <_printf_i+0x244>)
 8005530:	2f6f      	cmp	r7, #111	; 0x6f
 8005532:	bf0c      	ite	eq
 8005534:	2308      	moveq	r3, #8
 8005536:	230a      	movne	r3, #10
 8005538:	2100      	movs	r1, #0
 800553a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800553e:	6865      	ldr	r5, [r4, #4]
 8005540:	60a5      	str	r5, [r4, #8]
 8005542:	2d00      	cmp	r5, #0
 8005544:	bfa2      	ittt	ge
 8005546:	6821      	ldrge	r1, [r4, #0]
 8005548:	f021 0104 	bicge.w	r1, r1, #4
 800554c:	6021      	strge	r1, [r4, #0]
 800554e:	b90e      	cbnz	r6, 8005554 <_printf_i+0x118>
 8005550:	2d00      	cmp	r5, #0
 8005552:	d04d      	beq.n	80055f0 <_printf_i+0x1b4>
 8005554:	4615      	mov	r5, r2
 8005556:	fbb6 f1f3 	udiv	r1, r6, r3
 800555a:	fb03 6711 	mls	r7, r3, r1, r6
 800555e:	5dc7      	ldrb	r7, [r0, r7]
 8005560:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005564:	4637      	mov	r7, r6
 8005566:	42bb      	cmp	r3, r7
 8005568:	460e      	mov	r6, r1
 800556a:	d9f4      	bls.n	8005556 <_printf_i+0x11a>
 800556c:	2b08      	cmp	r3, #8
 800556e:	d10b      	bne.n	8005588 <_printf_i+0x14c>
 8005570:	6823      	ldr	r3, [r4, #0]
 8005572:	07de      	lsls	r6, r3, #31
 8005574:	d508      	bpl.n	8005588 <_printf_i+0x14c>
 8005576:	6923      	ldr	r3, [r4, #16]
 8005578:	6861      	ldr	r1, [r4, #4]
 800557a:	4299      	cmp	r1, r3
 800557c:	bfde      	ittt	le
 800557e:	2330      	movle	r3, #48	; 0x30
 8005580:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005584:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005588:	1b52      	subs	r2, r2, r5
 800558a:	6122      	str	r2, [r4, #16]
 800558c:	f8cd a000 	str.w	sl, [sp]
 8005590:	464b      	mov	r3, r9
 8005592:	aa03      	add	r2, sp, #12
 8005594:	4621      	mov	r1, r4
 8005596:	4640      	mov	r0, r8
 8005598:	f7ff fee2 	bl	8005360 <_printf_common>
 800559c:	3001      	adds	r0, #1
 800559e:	d14c      	bne.n	800563a <_printf_i+0x1fe>
 80055a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055a4:	b004      	add	sp, #16
 80055a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055aa:	4835      	ldr	r0, [pc, #212]	; (8005680 <_printf_i+0x244>)
 80055ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80055b0:	6829      	ldr	r1, [r5, #0]
 80055b2:	6823      	ldr	r3, [r4, #0]
 80055b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80055b8:	6029      	str	r1, [r5, #0]
 80055ba:	061d      	lsls	r5, r3, #24
 80055bc:	d514      	bpl.n	80055e8 <_printf_i+0x1ac>
 80055be:	07df      	lsls	r7, r3, #31
 80055c0:	bf44      	itt	mi
 80055c2:	f043 0320 	orrmi.w	r3, r3, #32
 80055c6:	6023      	strmi	r3, [r4, #0]
 80055c8:	b91e      	cbnz	r6, 80055d2 <_printf_i+0x196>
 80055ca:	6823      	ldr	r3, [r4, #0]
 80055cc:	f023 0320 	bic.w	r3, r3, #32
 80055d0:	6023      	str	r3, [r4, #0]
 80055d2:	2310      	movs	r3, #16
 80055d4:	e7b0      	b.n	8005538 <_printf_i+0xfc>
 80055d6:	6823      	ldr	r3, [r4, #0]
 80055d8:	f043 0320 	orr.w	r3, r3, #32
 80055dc:	6023      	str	r3, [r4, #0]
 80055de:	2378      	movs	r3, #120	; 0x78
 80055e0:	4828      	ldr	r0, [pc, #160]	; (8005684 <_printf_i+0x248>)
 80055e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80055e6:	e7e3      	b.n	80055b0 <_printf_i+0x174>
 80055e8:	0659      	lsls	r1, r3, #25
 80055ea:	bf48      	it	mi
 80055ec:	b2b6      	uxthmi	r6, r6
 80055ee:	e7e6      	b.n	80055be <_printf_i+0x182>
 80055f0:	4615      	mov	r5, r2
 80055f2:	e7bb      	b.n	800556c <_printf_i+0x130>
 80055f4:	682b      	ldr	r3, [r5, #0]
 80055f6:	6826      	ldr	r6, [r4, #0]
 80055f8:	6961      	ldr	r1, [r4, #20]
 80055fa:	1d18      	adds	r0, r3, #4
 80055fc:	6028      	str	r0, [r5, #0]
 80055fe:	0635      	lsls	r5, r6, #24
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	d501      	bpl.n	8005608 <_printf_i+0x1cc>
 8005604:	6019      	str	r1, [r3, #0]
 8005606:	e002      	b.n	800560e <_printf_i+0x1d2>
 8005608:	0670      	lsls	r0, r6, #25
 800560a:	d5fb      	bpl.n	8005604 <_printf_i+0x1c8>
 800560c:	8019      	strh	r1, [r3, #0]
 800560e:	2300      	movs	r3, #0
 8005610:	6123      	str	r3, [r4, #16]
 8005612:	4615      	mov	r5, r2
 8005614:	e7ba      	b.n	800558c <_printf_i+0x150>
 8005616:	682b      	ldr	r3, [r5, #0]
 8005618:	1d1a      	adds	r2, r3, #4
 800561a:	602a      	str	r2, [r5, #0]
 800561c:	681d      	ldr	r5, [r3, #0]
 800561e:	6862      	ldr	r2, [r4, #4]
 8005620:	2100      	movs	r1, #0
 8005622:	4628      	mov	r0, r5
 8005624:	f7fa fdec 	bl	8000200 <memchr>
 8005628:	b108      	cbz	r0, 800562e <_printf_i+0x1f2>
 800562a:	1b40      	subs	r0, r0, r5
 800562c:	6060      	str	r0, [r4, #4]
 800562e:	6863      	ldr	r3, [r4, #4]
 8005630:	6123      	str	r3, [r4, #16]
 8005632:	2300      	movs	r3, #0
 8005634:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005638:	e7a8      	b.n	800558c <_printf_i+0x150>
 800563a:	6923      	ldr	r3, [r4, #16]
 800563c:	462a      	mov	r2, r5
 800563e:	4649      	mov	r1, r9
 8005640:	4640      	mov	r0, r8
 8005642:	47d0      	blx	sl
 8005644:	3001      	adds	r0, #1
 8005646:	d0ab      	beq.n	80055a0 <_printf_i+0x164>
 8005648:	6823      	ldr	r3, [r4, #0]
 800564a:	079b      	lsls	r3, r3, #30
 800564c:	d413      	bmi.n	8005676 <_printf_i+0x23a>
 800564e:	68e0      	ldr	r0, [r4, #12]
 8005650:	9b03      	ldr	r3, [sp, #12]
 8005652:	4298      	cmp	r0, r3
 8005654:	bfb8      	it	lt
 8005656:	4618      	movlt	r0, r3
 8005658:	e7a4      	b.n	80055a4 <_printf_i+0x168>
 800565a:	2301      	movs	r3, #1
 800565c:	4632      	mov	r2, r6
 800565e:	4649      	mov	r1, r9
 8005660:	4640      	mov	r0, r8
 8005662:	47d0      	blx	sl
 8005664:	3001      	adds	r0, #1
 8005666:	d09b      	beq.n	80055a0 <_printf_i+0x164>
 8005668:	3501      	adds	r5, #1
 800566a:	68e3      	ldr	r3, [r4, #12]
 800566c:	9903      	ldr	r1, [sp, #12]
 800566e:	1a5b      	subs	r3, r3, r1
 8005670:	42ab      	cmp	r3, r5
 8005672:	dcf2      	bgt.n	800565a <_printf_i+0x21e>
 8005674:	e7eb      	b.n	800564e <_printf_i+0x212>
 8005676:	2500      	movs	r5, #0
 8005678:	f104 0619 	add.w	r6, r4, #25
 800567c:	e7f5      	b.n	800566a <_printf_i+0x22e>
 800567e:	bf00      	nop
 8005680:	08005a15 	.word	0x08005a15
 8005684:	08005a26 	.word	0x08005a26

08005688 <_sbrk_r>:
 8005688:	b538      	push	{r3, r4, r5, lr}
 800568a:	4d06      	ldr	r5, [pc, #24]	; (80056a4 <_sbrk_r+0x1c>)
 800568c:	2300      	movs	r3, #0
 800568e:	4604      	mov	r4, r0
 8005690:	4608      	mov	r0, r1
 8005692:	602b      	str	r3, [r5, #0]
 8005694:	f7fb fc88 	bl	8000fa8 <_sbrk>
 8005698:	1c43      	adds	r3, r0, #1
 800569a:	d102      	bne.n	80056a2 <_sbrk_r+0x1a>
 800569c:	682b      	ldr	r3, [r5, #0]
 800569e:	b103      	cbz	r3, 80056a2 <_sbrk_r+0x1a>
 80056a0:	6023      	str	r3, [r4, #0]
 80056a2:	bd38      	pop	{r3, r4, r5, pc}
 80056a4:	200001a0 	.word	0x200001a0

080056a8 <__sread>:
 80056a8:	b510      	push	{r4, lr}
 80056aa:	460c      	mov	r4, r1
 80056ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056b0:	f000 f8f8 	bl	80058a4 <_read_r>
 80056b4:	2800      	cmp	r0, #0
 80056b6:	bfab      	itete	ge
 80056b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80056ba:	89a3      	ldrhlt	r3, [r4, #12]
 80056bc:	181b      	addge	r3, r3, r0
 80056be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80056c2:	bfac      	ite	ge
 80056c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80056c6:	81a3      	strhlt	r3, [r4, #12]
 80056c8:	bd10      	pop	{r4, pc}

080056ca <__swrite>:
 80056ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056ce:	461f      	mov	r7, r3
 80056d0:	898b      	ldrh	r3, [r1, #12]
 80056d2:	05db      	lsls	r3, r3, #23
 80056d4:	4605      	mov	r5, r0
 80056d6:	460c      	mov	r4, r1
 80056d8:	4616      	mov	r6, r2
 80056da:	d505      	bpl.n	80056e8 <__swrite+0x1e>
 80056dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056e0:	2302      	movs	r3, #2
 80056e2:	2200      	movs	r2, #0
 80056e4:	f000 f868 	bl	80057b8 <_lseek_r>
 80056e8:	89a3      	ldrh	r3, [r4, #12]
 80056ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056f2:	81a3      	strh	r3, [r4, #12]
 80056f4:	4632      	mov	r2, r6
 80056f6:	463b      	mov	r3, r7
 80056f8:	4628      	mov	r0, r5
 80056fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056fe:	f000 b817 	b.w	8005730 <_write_r>

08005702 <__sseek>:
 8005702:	b510      	push	{r4, lr}
 8005704:	460c      	mov	r4, r1
 8005706:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800570a:	f000 f855 	bl	80057b8 <_lseek_r>
 800570e:	1c43      	adds	r3, r0, #1
 8005710:	89a3      	ldrh	r3, [r4, #12]
 8005712:	bf15      	itete	ne
 8005714:	6560      	strne	r0, [r4, #84]	; 0x54
 8005716:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800571a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800571e:	81a3      	strheq	r3, [r4, #12]
 8005720:	bf18      	it	ne
 8005722:	81a3      	strhne	r3, [r4, #12]
 8005724:	bd10      	pop	{r4, pc}

08005726 <__sclose>:
 8005726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800572a:	f000 b813 	b.w	8005754 <_close_r>
	...

08005730 <_write_r>:
 8005730:	b538      	push	{r3, r4, r5, lr}
 8005732:	4d07      	ldr	r5, [pc, #28]	; (8005750 <_write_r+0x20>)
 8005734:	4604      	mov	r4, r0
 8005736:	4608      	mov	r0, r1
 8005738:	4611      	mov	r1, r2
 800573a:	2200      	movs	r2, #0
 800573c:	602a      	str	r2, [r5, #0]
 800573e:	461a      	mov	r2, r3
 8005740:	f7fb fbe8 	bl	8000f14 <_write>
 8005744:	1c43      	adds	r3, r0, #1
 8005746:	d102      	bne.n	800574e <_write_r+0x1e>
 8005748:	682b      	ldr	r3, [r5, #0]
 800574a:	b103      	cbz	r3, 800574e <_write_r+0x1e>
 800574c:	6023      	str	r3, [r4, #0]
 800574e:	bd38      	pop	{r3, r4, r5, pc}
 8005750:	200001a0 	.word	0x200001a0

08005754 <_close_r>:
 8005754:	b538      	push	{r3, r4, r5, lr}
 8005756:	4d06      	ldr	r5, [pc, #24]	; (8005770 <_close_r+0x1c>)
 8005758:	2300      	movs	r3, #0
 800575a:	4604      	mov	r4, r0
 800575c:	4608      	mov	r0, r1
 800575e:	602b      	str	r3, [r5, #0]
 8005760:	f7fb fbee 	bl	8000f40 <_close>
 8005764:	1c43      	adds	r3, r0, #1
 8005766:	d102      	bne.n	800576e <_close_r+0x1a>
 8005768:	682b      	ldr	r3, [r5, #0]
 800576a:	b103      	cbz	r3, 800576e <_close_r+0x1a>
 800576c:	6023      	str	r3, [r4, #0]
 800576e:	bd38      	pop	{r3, r4, r5, pc}
 8005770:	200001a0 	.word	0x200001a0

08005774 <_fstat_r>:
 8005774:	b538      	push	{r3, r4, r5, lr}
 8005776:	4d07      	ldr	r5, [pc, #28]	; (8005794 <_fstat_r+0x20>)
 8005778:	2300      	movs	r3, #0
 800577a:	4604      	mov	r4, r0
 800577c:	4608      	mov	r0, r1
 800577e:	4611      	mov	r1, r2
 8005780:	602b      	str	r3, [r5, #0]
 8005782:	f7fb fbe9 	bl	8000f58 <_fstat>
 8005786:	1c43      	adds	r3, r0, #1
 8005788:	d102      	bne.n	8005790 <_fstat_r+0x1c>
 800578a:	682b      	ldr	r3, [r5, #0]
 800578c:	b103      	cbz	r3, 8005790 <_fstat_r+0x1c>
 800578e:	6023      	str	r3, [r4, #0]
 8005790:	bd38      	pop	{r3, r4, r5, pc}
 8005792:	bf00      	nop
 8005794:	200001a0 	.word	0x200001a0

08005798 <_isatty_r>:
 8005798:	b538      	push	{r3, r4, r5, lr}
 800579a:	4d06      	ldr	r5, [pc, #24]	; (80057b4 <_isatty_r+0x1c>)
 800579c:	2300      	movs	r3, #0
 800579e:	4604      	mov	r4, r0
 80057a0:	4608      	mov	r0, r1
 80057a2:	602b      	str	r3, [r5, #0]
 80057a4:	f7fb fbe8 	bl	8000f78 <_isatty>
 80057a8:	1c43      	adds	r3, r0, #1
 80057aa:	d102      	bne.n	80057b2 <_isatty_r+0x1a>
 80057ac:	682b      	ldr	r3, [r5, #0]
 80057ae:	b103      	cbz	r3, 80057b2 <_isatty_r+0x1a>
 80057b0:	6023      	str	r3, [r4, #0]
 80057b2:	bd38      	pop	{r3, r4, r5, pc}
 80057b4:	200001a0 	.word	0x200001a0

080057b8 <_lseek_r>:
 80057b8:	b538      	push	{r3, r4, r5, lr}
 80057ba:	4d07      	ldr	r5, [pc, #28]	; (80057d8 <_lseek_r+0x20>)
 80057bc:	4604      	mov	r4, r0
 80057be:	4608      	mov	r0, r1
 80057c0:	4611      	mov	r1, r2
 80057c2:	2200      	movs	r2, #0
 80057c4:	602a      	str	r2, [r5, #0]
 80057c6:	461a      	mov	r2, r3
 80057c8:	f7fb fbe1 	bl	8000f8e <_lseek>
 80057cc:	1c43      	adds	r3, r0, #1
 80057ce:	d102      	bne.n	80057d6 <_lseek_r+0x1e>
 80057d0:	682b      	ldr	r3, [r5, #0]
 80057d2:	b103      	cbz	r3, 80057d6 <_lseek_r+0x1e>
 80057d4:	6023      	str	r3, [r4, #0]
 80057d6:	bd38      	pop	{r3, r4, r5, pc}
 80057d8:	200001a0 	.word	0x200001a0

080057dc <memcpy>:
 80057dc:	440a      	add	r2, r1
 80057de:	4291      	cmp	r1, r2
 80057e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80057e4:	d100      	bne.n	80057e8 <memcpy+0xc>
 80057e6:	4770      	bx	lr
 80057e8:	b510      	push	{r4, lr}
 80057ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057f2:	4291      	cmp	r1, r2
 80057f4:	d1f9      	bne.n	80057ea <memcpy+0xe>
 80057f6:	bd10      	pop	{r4, pc}

080057f8 <memmove>:
 80057f8:	4288      	cmp	r0, r1
 80057fa:	b510      	push	{r4, lr}
 80057fc:	eb01 0402 	add.w	r4, r1, r2
 8005800:	d902      	bls.n	8005808 <memmove+0x10>
 8005802:	4284      	cmp	r4, r0
 8005804:	4623      	mov	r3, r4
 8005806:	d807      	bhi.n	8005818 <memmove+0x20>
 8005808:	1e43      	subs	r3, r0, #1
 800580a:	42a1      	cmp	r1, r4
 800580c:	d008      	beq.n	8005820 <memmove+0x28>
 800580e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005812:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005816:	e7f8      	b.n	800580a <memmove+0x12>
 8005818:	4402      	add	r2, r0
 800581a:	4601      	mov	r1, r0
 800581c:	428a      	cmp	r2, r1
 800581e:	d100      	bne.n	8005822 <memmove+0x2a>
 8005820:	bd10      	pop	{r4, pc}
 8005822:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005826:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800582a:	e7f7      	b.n	800581c <memmove+0x24>

0800582c <__malloc_lock>:
 800582c:	4801      	ldr	r0, [pc, #4]	; (8005834 <__malloc_lock+0x8>)
 800582e:	f7ff b999 	b.w	8004b64 <__retarget_lock_acquire_recursive>
 8005832:	bf00      	nop
 8005834:	20000194 	.word	0x20000194

08005838 <__malloc_unlock>:
 8005838:	4801      	ldr	r0, [pc, #4]	; (8005840 <__malloc_unlock+0x8>)
 800583a:	f7ff b994 	b.w	8004b66 <__retarget_lock_release_recursive>
 800583e:	bf00      	nop
 8005840:	20000194 	.word	0x20000194

08005844 <_realloc_r>:
 8005844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005848:	4680      	mov	r8, r0
 800584a:	4614      	mov	r4, r2
 800584c:	460e      	mov	r6, r1
 800584e:	b921      	cbnz	r1, 800585a <_realloc_r+0x16>
 8005850:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005854:	4611      	mov	r1, r2
 8005856:	f7ff ba59 	b.w	8004d0c <_malloc_r>
 800585a:	b92a      	cbnz	r2, 8005868 <_realloc_r+0x24>
 800585c:	f7ff f9ea 	bl	8004c34 <_free_r>
 8005860:	4625      	mov	r5, r4
 8005862:	4628      	mov	r0, r5
 8005864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005868:	f000 f82e 	bl	80058c8 <_malloc_usable_size_r>
 800586c:	4284      	cmp	r4, r0
 800586e:	4607      	mov	r7, r0
 8005870:	d802      	bhi.n	8005878 <_realloc_r+0x34>
 8005872:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005876:	d812      	bhi.n	800589e <_realloc_r+0x5a>
 8005878:	4621      	mov	r1, r4
 800587a:	4640      	mov	r0, r8
 800587c:	f7ff fa46 	bl	8004d0c <_malloc_r>
 8005880:	4605      	mov	r5, r0
 8005882:	2800      	cmp	r0, #0
 8005884:	d0ed      	beq.n	8005862 <_realloc_r+0x1e>
 8005886:	42bc      	cmp	r4, r7
 8005888:	4622      	mov	r2, r4
 800588a:	4631      	mov	r1, r6
 800588c:	bf28      	it	cs
 800588e:	463a      	movcs	r2, r7
 8005890:	f7ff ffa4 	bl	80057dc <memcpy>
 8005894:	4631      	mov	r1, r6
 8005896:	4640      	mov	r0, r8
 8005898:	f7ff f9cc 	bl	8004c34 <_free_r>
 800589c:	e7e1      	b.n	8005862 <_realloc_r+0x1e>
 800589e:	4635      	mov	r5, r6
 80058a0:	e7df      	b.n	8005862 <_realloc_r+0x1e>
	...

080058a4 <_read_r>:
 80058a4:	b538      	push	{r3, r4, r5, lr}
 80058a6:	4d07      	ldr	r5, [pc, #28]	; (80058c4 <_read_r+0x20>)
 80058a8:	4604      	mov	r4, r0
 80058aa:	4608      	mov	r0, r1
 80058ac:	4611      	mov	r1, r2
 80058ae:	2200      	movs	r2, #0
 80058b0:	602a      	str	r2, [r5, #0]
 80058b2:	461a      	mov	r2, r3
 80058b4:	f7fb fb10 	bl	8000ed8 <_read>
 80058b8:	1c43      	adds	r3, r0, #1
 80058ba:	d102      	bne.n	80058c2 <_read_r+0x1e>
 80058bc:	682b      	ldr	r3, [r5, #0]
 80058be:	b103      	cbz	r3, 80058c2 <_read_r+0x1e>
 80058c0:	6023      	str	r3, [r4, #0]
 80058c2:	bd38      	pop	{r3, r4, r5, pc}
 80058c4:	200001a0 	.word	0x200001a0

080058c8 <_malloc_usable_size_r>:
 80058c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058cc:	1f18      	subs	r0, r3, #4
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	bfbc      	itt	lt
 80058d2:	580b      	ldrlt	r3, [r1, r0]
 80058d4:	18c0      	addlt	r0, r0, r3
 80058d6:	4770      	bx	lr

080058d8 <_init>:
 80058d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058da:	bf00      	nop
 80058dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058de:	bc08      	pop	{r3}
 80058e0:	469e      	mov	lr, r3
 80058e2:	4770      	bx	lr

080058e4 <_fini>:
 80058e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058e6:	bf00      	nop
 80058e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ea:	bc08      	pop	{r3}
 80058ec:	469e      	mov	lr, r3
 80058ee:	4770      	bx	lr
