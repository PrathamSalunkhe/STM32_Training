
003_Protimer_State_Handler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056dc  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  0800589c  0800589c  0001589c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059e4  080059e4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080059e4  080059e4  000159e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059ec  080059ec  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059ec  080059ec  000159ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059f0  080059f0  000159f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080059f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  20000070  08005a64  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  08005a64  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001388f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002422  00000000  00000000  0003392f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001068  00000000  00000000  00035d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f90  00000000  00000000  00036dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b18c  00000000  00000000  00037d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012c59  00000000  00000000  00062edc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010939c  00000000  00000000  00075b35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017eed1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ee8  00000000  00000000  0017ef24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000070 	.word	0x20000070
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08005884 	.word	0x08005884

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000074 	.word	0x20000074
 80001fc:	08005884 	.word	0x08005884

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <protimer_init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void protimer_init(protimer_t *mobj)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
//	mobj->active_state = IDLE;
//	mobj->pro_time = 0;
    event_t ee;
    ee.sig = ENTRY;
 80005ac:	2305      	movs	r3, #5
 80005ae:	733b      	strb	r3, [r7, #12]
    mobj->active_state = IDLE;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	4a08      	ldr	r2, [pc, #32]	; (80005d4 <protimer_init+0x30>)
 80005b4:	60da      	str	r2, [r3, #12]
    mobj->pro_time = 0;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	2200      	movs	r2, #0
 80005ba:	609a      	str	r2, [r3, #8]
    (*mobj->active_state)(mobj, &ee);	//jump to idle handler
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	68db      	ldr	r3, [r3, #12]
 80005c0:	f107 020c 	add.w	r2, r7, #12
 80005c4:	4611      	mov	r1, r2
 80005c6:	6878      	ldr	r0, [r7, #4]
 80005c8:	4798      	blx	r3
}
 80005ca:	bf00      	nop
 80005cc:	3710      	adds	r7, #16
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	0800062d 	.word	0x0800062d

080005d8 <protimer_event_dispatcher>:

static void protimer_event_dispatcher(protimer_t *const mobj,event_t const *const e)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b086      	sub	sp, #24
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	6039      	str	r1, [r7, #0]

  event_status_t status;
  protimer_state_t source, target;

  source = mobj->active_state;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	68db      	ldr	r3, [r3, #12]
 80005e6:	617b      	str	r3, [r7, #20]
  status = (*mobj->active_state)(mobj,e);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	68db      	ldr	r3, [r3, #12]
 80005ec:	6839      	ldr	r1, [r7, #0]
 80005ee:	6878      	ldr	r0, [r7, #4]
 80005f0:	4798      	blx	r3
 80005f2:	4603      	mov	r3, r0
 80005f4:	74fb      	strb	r3, [r7, #19]

  if(status == EVENT_TRANSITION){
 80005f6:	7cfb      	ldrb	r3, [r7, #19]
 80005f8:	2b02      	cmp	r3, #2
 80005fa:	d112      	bne.n	8000622 <protimer_event_dispatcher+0x4a>
    target = mobj->active_state;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	68db      	ldr	r3, [r3, #12]
 8000600:	60fb      	str	r3, [r7, #12]
    event_t ee;
    //1. run the exit action for the source state
    ee.sig = EXIT;
 8000602:	2306      	movs	r3, #6
 8000604:	723b      	strb	r3, [r7, #8]
    (*source)(mobj,&ee);
 8000606:	f107 0208 	add.w	r2, r7, #8
 800060a:	697b      	ldr	r3, [r7, #20]
 800060c:	4611      	mov	r1, r2
 800060e:	6878      	ldr	r0, [r7, #4]
 8000610:	4798      	blx	r3

    //2. run the entry action for the target state
    ee.sig = ENTRY;
 8000612:	2305      	movs	r3, #5
 8000614:	723b      	strb	r3, [r7, #8]
    (*target)(mobj,&ee);
 8000616:	f107 0208 	add.w	r2, r7, #8
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	4611      	mov	r1, r2
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	4798      	blx	r3
  }

}
 8000622:	bf00      	nop
 8000624:	3718      	adds	r7, #24
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
	...

0800062c <protimer_state_handler_IDLE>:

static event_status_t protimer_state_handler_IDLE(protimer_t *const mobj, event_t const *const e)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	6039      	str	r1, [r7, #0]
	switch (e->sig) {
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b06      	cmp	r3, #6
 800063c:	d83a      	bhi.n	80006b4 <protimer_state_handler_IDLE+0x88>
 800063e:	a201      	add	r2, pc, #4	; (adr r2, 8000644 <protimer_state_handler_IDLE+0x18>)
 8000640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000644:	08000685 	.word	0x08000685
 8000648:	080006b5 	.word	0x080006b5
 800064c:	080006a5 	.word	0x080006a5
 8000650:	0800069b 	.word	0x0800069b
 8000654:	080006b5 	.word	0x080006b5
 8000658:	08000661 	.word	0x08000661
 800065c:	0800067d 	.word	0x0800067d
		case ENTRY:{
			mobj->curr_time = 0;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
			mobj->elapsed_time = 0;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	2200      	movs	r2, #0
 800066a:	605a      	str	r2, [r3, #4]
			display_time(0);
 800066c:	2000      	movs	r0, #0
 800066e:	f000 f973 	bl	8000958 <display_time>
			display_message("Set Time");
 8000672:	4813      	ldr	r0, [pc, #76]	; (80006c0 <protimer_state_handler_IDLE+0x94>)
 8000674:	f000 f99e 	bl	80009b4 <display_message>
			return EVENT_HANDLED;
 8000678:	2300      	movs	r3, #0
 800067a:	e01c      	b.n	80006b6 <protimer_state_handler_IDLE+0x8a>
		}

		case EXIT:{
			display_clear();
 800067c:	f000 f9a8 	bl	80009d0 <display_clear>
			return EVENT_HANDLED;
 8000680:	2300      	movs	r3, #0
 8000682:	e018      	b.n	80006b6 <protimer_state_handler_IDLE+0x8a>
		}

		case INC_TIME:{
			mobj->curr_time += 60;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	601a      	str	r2, [r3, #0]
			mobj->active_state = TIME_SET;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	4a0c      	ldr	r2, [pc, #48]	; (80006c4 <protimer_state_handler_IDLE+0x98>)
 8000694:	60da      	str	r2, [r3, #12]
			return EVENT_TRANSITION;
 8000696:	2302      	movs	r3, #2
 8000698:	e00d      	b.n	80006b6 <protimer_state_handler_IDLE+0x8a>
		}

		case START_PAUSE:{
			mobj->active_state = STAT;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	4a0a      	ldr	r2, [pc, #40]	; (80006c8 <protimer_state_handler_IDLE+0x9c>)
 800069e:	60da      	str	r2, [r3, #12]
			return EVENT_TRANSITION;
 80006a0:	2302      	movs	r3, #2
 80006a2:	e008      	b.n	80006b6 <protimer_state_handler_IDLE+0x8a>
		}

		case TIME_TICK:{
			if(((protimer_tick_event_t *)(e))->ss == 5)
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	785b      	ldrb	r3, [r3, #1]
 80006a8:	2b05      	cmp	r3, #5
 80006aa:	d101      	bne.n	80006b0 <protimer_state_handler_IDLE+0x84>
			{
//				do_beep();
				return EVENT_HANDLED;
 80006ac:	2300      	movs	r3, #0
 80006ae:	e002      	b.n	80006b6 <protimer_state_handler_IDLE+0x8a>
			}
			return EVENT_IGNORED;
 80006b0:	2301      	movs	r3, #1
 80006b2:	e000      	b.n	80006b6 <protimer_state_handler_IDLE+0x8a>
		}
	}
	return EVENT_IGNORED;
 80006b4:	2301      	movs	r3, #1
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	0800589c 	.word	0x0800589c
 80006c4:	080006cd 	.word	0x080006cd
 80006c8:	080008e5 	.word	0x080008e5

080006cc <protimer_state_handler_TIME_SET>:

static event_status_t protimer_state_handler_TIME_SET(protimer_t *const mobj, event_t const *const e){
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	6039      	str	r1, [r7, #0]
    switch(e->sig){
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	2b06      	cmp	r3, #6
 80006dc:	d84b      	bhi.n	8000776 <protimer_state_handler_TIME_SET+0xaa>
 80006de:	a201      	add	r2, pc, #4	; (adr r2, 80006e4 <protimer_state_handler_TIME_SET+0x18>)
 80006e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006e4:	08000717 	.word	0x08000717
 80006e8:	08000731 	.word	0x08000731
 80006ec:	08000777 	.word	0x08000777
 80006f0:	08000761 	.word	0x08000761
 80006f4:	08000757 	.word	0x08000757
 80006f8:	08000701 	.word	0x08000701
 80006fc:	0800070f 	.word	0x0800070f
        case ENTRY:{
            display_time(mobj->curr_time);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4618      	mov	r0, r3
 8000706:	f000 f927 	bl	8000958 <display_time>
            return EVENT_HANDLED;
 800070a:	2300      	movs	r3, #0
 800070c:	e034      	b.n	8000778 <protimer_state_handler_TIME_SET+0xac>
        }
        case EXIT:{
            display_clear();
 800070e:	f000 f95f 	bl	80009d0 <display_clear>
            return EVENT_HANDLED;
 8000712:	2300      	movs	r3, #0
 8000714:	e030      	b.n	8000778 <protimer_state_handler_TIME_SET+0xac>
        }
        case INC_TIME:{
            mobj->curr_time += 60;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	601a      	str	r2, [r3, #0]
            display_time(mobj->curr_time);
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4618      	mov	r0, r3
 8000728:	f000 f916 	bl	8000958 <display_time>
            return EVENT_HANDLED;
 800072c:	2300      	movs	r3, #0
 800072e:	e023      	b.n	8000778 <protimer_state_handler_TIME_SET+0xac>
        }
        case DEC_TIME:{
            if(mobj->curr_time >=60){
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	2b3b      	cmp	r3, #59	; 0x3b
 8000736:	d90c      	bls.n	8000752 <protimer_state_handler_TIME_SET+0x86>
                mobj->curr_time -= 60;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f1a3 023c 	sub.w	r2, r3, #60	; 0x3c
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	601a      	str	r2, [r3, #0]
                display_time(mobj->curr_time);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4618      	mov	r0, r3
 800074a:	f000 f905 	bl	8000958 <display_time>
                return EVENT_HANDLED;
 800074e:	2300      	movs	r3, #0
 8000750:	e012      	b.n	8000778 <protimer_state_handler_TIME_SET+0xac>
            }
            return EVENT_IGNORED;
 8000752:	2301      	movs	r3, #1
 8000754:	e010      	b.n	8000778 <protimer_state_handler_TIME_SET+0xac>
        }
        case ABRT:{
            mobj->active_state = IDLE;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	4a09      	ldr	r2, [pc, #36]	; (8000780 <protimer_state_handler_TIME_SET+0xb4>)
 800075a:	60da      	str	r2, [r3, #12]
            return EVENT_TRANSITION;
 800075c:	2302      	movs	r3, #2
 800075e:	e00b      	b.n	8000778 <protimer_state_handler_TIME_SET+0xac>
        }
        case START_PAUSE:{
            if(mobj->curr_time >=60){
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2b3b      	cmp	r3, #59	; 0x3b
 8000766:	d904      	bls.n	8000772 <protimer_state_handler_TIME_SET+0xa6>
                mobj->active_state = COUNTDOWN;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	4a06      	ldr	r2, [pc, #24]	; (8000784 <protimer_state_handler_TIME_SET+0xb8>)
 800076c:	60da      	str	r2, [r3, #12]
                return EVENT_TRANSITION;
 800076e:	2302      	movs	r3, #2
 8000770:	e002      	b.n	8000778 <protimer_state_handler_TIME_SET+0xac>
            }
            return EVENT_IGNORED;
 8000772:	2301      	movs	r3, #1
 8000774:	e000      	b.n	8000778 <protimer_state_handler_TIME_SET+0xac>
        }
    }

    return EVENT_IGNORED;
 8000776:	2301      	movs	r3, #1
}
 8000778:	4618      	mov	r0, r3
 800077a:	3708      	adds	r7, #8
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	0800062d 	.word	0x0800062d
 8000784:	08000789 	.word	0x08000789

08000788 <protimer_state_handler_COUNTDOWN>:

static event_status_t protimer_state_handler_COUNTDOWN(protimer_t *const mobj, event_t const *const e){
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
 8000790:	6039      	str	r1, [r7, #0]
    switch(e->sig){
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	3b02      	subs	r3, #2
 8000798:	2b04      	cmp	r3, #4
 800079a:	d843      	bhi.n	8000824 <protimer_state_handler_COUNTDOWN+0x9c>
 800079c:	a201      	add	r2, pc, #4	; (adr r2, 80007a4 <protimer_state_handler_COUNTDOWN+0x1c>)
 800079e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a2:	bf00      	nop
 80007a4:	080007d1 	.word	0x080007d1
 80007a8:	08000811 	.word	0x08000811
 80007ac:	0800081b 	.word	0x0800081b
 80007b0:	08000825 	.word	0x08000825
 80007b4:	080007b9 	.word	0x080007b9
        case EXIT:{
            mobj->pro_time += mobj->elapsed_time;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	689a      	ldr	r2, [r3, #8]
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	685b      	ldr	r3, [r3, #4]
 80007c0:	441a      	add	r2, r3
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	609a      	str	r2, [r3, #8]
            mobj->elapsed_time = 0;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	2200      	movs	r2, #0
 80007ca:	605a      	str	r2, [r3, #4]
            return EVENT_HANDLED;
 80007cc:	2300      	movs	r3, #0
 80007ce:	e02a      	b.n	8000826 <protimer_state_handler_COUNTDOWN+0x9e>
        }

        case TIME_TICK:{
            if(((protimer_tick_event_t*)(e))->ss == 10){
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	785b      	ldrb	r3, [r3, #1]
 80007d4:	2b0a      	cmp	r3, #10
 80007d6:	d119      	bne.n	800080c <protimer_state_handler_COUNTDOWN+0x84>
                --mobj->curr_time;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	1e5a      	subs	r2, r3, #1
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	601a      	str	r2, [r3, #0]
                ++mobj->elapsed_time;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	685b      	ldr	r3, [r3, #4]
 80007e6:	1c5a      	adds	r2, r3, #1
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	605a      	str	r2, [r3, #4]
                display_time(mobj->curr_time);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f000 f8b1 	bl	8000958 <display_time>
                if(!mobj->curr_time){
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d104      	bne.n	8000808 <protimer_state_handler_COUNTDOWN+0x80>
                    mobj->active_state = IDLE;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	4a0b      	ldr	r2, [pc, #44]	; (8000830 <protimer_state_handler_COUNTDOWN+0xa8>)
 8000802:	60da      	str	r2, [r3, #12]
                    return EVENT_TRANSITION;
 8000804:	2302      	movs	r3, #2
 8000806:	e00e      	b.n	8000826 <protimer_state_handler_COUNTDOWN+0x9e>
                }
                return EVENT_HANDLED;
 8000808:	2300      	movs	r3, #0
 800080a:	e00c      	b.n	8000826 <protimer_state_handler_COUNTDOWN+0x9e>
            }
            return EVENT_IGNORED;
 800080c:	2301      	movs	r3, #1
 800080e:	e00a      	b.n	8000826 <protimer_state_handler_COUNTDOWN+0x9e>
        }
        case START_PAUSE:{
            mobj->active_state = PAUSE;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	4a08      	ldr	r2, [pc, #32]	; (8000834 <protimer_state_handler_COUNTDOWN+0xac>)
 8000814:	60da      	str	r2, [r3, #12]
            return EVENT_TRANSITION;
 8000816:	2302      	movs	r3, #2
 8000818:	e005      	b.n	8000826 <protimer_state_handler_COUNTDOWN+0x9e>
        }
        case ABRT:{
            mobj->active_state = IDLE;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	4a04      	ldr	r2, [pc, #16]	; (8000830 <protimer_state_handler_COUNTDOWN+0xa8>)
 800081e:	60da      	str	r2, [r3, #12]
            return EVENT_TRANSITION;
 8000820:	2302      	movs	r3, #2
 8000822:	e000      	b.n	8000826 <protimer_state_handler_COUNTDOWN+0x9e>
        }
    }
    return EVENT_IGNORED;
 8000824:	2301      	movs	r3, #1
}
 8000826:	4618      	mov	r0, r3
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	0800062d 	.word	0x0800062d
 8000834:	08000839 	.word	0x08000839

08000838 <protimer_state_handler_PAUSE>:


static event_status_t protimer_state_handler_PAUSE(protimer_t *const mobj, event_t const *const e){
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]
    switch(e->sig){
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	2b06      	cmp	r3, #6
 8000848:	d83f      	bhi.n	80008ca <protimer_state_handler_PAUSE+0x92>
 800084a:	a201      	add	r2, pc, #4	; (adr r2, 8000850 <protimer_state_handler_PAUSE+0x18>)
 800084c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000850:	0800087f 	.word	0x0800087f
 8000854:	08000895 	.word	0x08000895
 8000858:	080008cb 	.word	0x080008cb
 800085c:	080008b7 	.word	0x080008b7
 8000860:	080008c1 	.word	0x080008c1
 8000864:	0800086d 	.word	0x0800086d
 8000868:	08000877 	.word	0x08000877
        case ENTRY:{
            display_message("Paused");
 800086c:	4819      	ldr	r0, [pc, #100]	; (80008d4 <protimer_state_handler_PAUSE+0x9c>)
 800086e:	f000 f8a1 	bl	80009b4 <display_message>
            return EVENT_HANDLED;
 8000872:	2300      	movs	r3, #0
 8000874:	e02a      	b.n	80008cc <protimer_state_handler_PAUSE+0x94>
        }
        case EXIT:{
            display_clear();
 8000876:	f000 f8ab 	bl	80009d0 <display_clear>
            return EVENT_HANDLED;
 800087a:	2300      	movs	r3, #0
 800087c:	e026      	b.n	80008cc <protimer_state_handler_PAUSE+0x94>
        }
        case INC_TIME:{
            mobj->curr_time += 60;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	601a      	str	r2, [r3, #0]
            mobj->active_state = TIME_SET;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4a12      	ldr	r2, [pc, #72]	; (80008d8 <protimer_state_handler_PAUSE+0xa0>)
 800088e:	60da      	str	r2, [r3, #12]
            return EVENT_TRANSITION;
 8000890:	2302      	movs	r3, #2
 8000892:	e01b      	b.n	80008cc <protimer_state_handler_PAUSE+0x94>
        }
        case DEC_TIME:{
            if(mobj->curr_time >= 60){
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2b3b      	cmp	r3, #59	; 0x3b
 800089a:	d90a      	bls.n	80008b2 <protimer_state_handler_PAUSE+0x7a>
                mobj->curr_time -= 60;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f1a3 023c 	sub.w	r2, r3, #60	; 0x3c
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	601a      	str	r2, [r3, #0]
                mobj->active_state = TIME_SET;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	4a0b      	ldr	r2, [pc, #44]	; (80008d8 <protimer_state_handler_PAUSE+0xa0>)
 80008ac:	60da      	str	r2, [r3, #12]
                return EVENT_TRANSITION;
 80008ae:	2302      	movs	r3, #2
 80008b0:	e00c      	b.n	80008cc <protimer_state_handler_PAUSE+0x94>
            }
            return EVENT_IGNORED;
 80008b2:	2301      	movs	r3, #1
 80008b4:	e00a      	b.n	80008cc <protimer_state_handler_PAUSE+0x94>
        }
        case START_PAUSE:{
            mobj->active_state = COUNTDOWN;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	4a08      	ldr	r2, [pc, #32]	; (80008dc <protimer_state_handler_PAUSE+0xa4>)
 80008ba:	60da      	str	r2, [r3, #12]
            return EVENT_TRANSITION;
 80008bc:	2302      	movs	r3, #2
 80008be:	e005      	b.n	80008cc <protimer_state_handler_PAUSE+0x94>
        }
        case ABRT:{
            mobj->active_state = IDLE;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	4a07      	ldr	r2, [pc, #28]	; (80008e0 <protimer_state_handler_PAUSE+0xa8>)
 80008c4:	60da      	str	r2, [r3, #12]
            return EVENT_TRANSITION;
 80008c6:	2302      	movs	r3, #2
 80008c8:	e000      	b.n	80008cc <protimer_state_handler_PAUSE+0x94>
        }
    }
    return EVENT_IGNORED;
 80008ca:	2301      	movs	r3, #1
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3708      	adds	r7, #8
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	080058a8 	.word	0x080058a8
 80008d8:	080006cd 	.word	0x080006cd
 80008dc:	08000789 	.word	0x08000789
 80008e0:	0800062d 	.word	0x0800062d

080008e4 <protimer_state_handler_STAT>:

static event_status_t protimer_state_handler_STAT(protimer_t *const mobj, event_t const *const e){
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	6039      	str	r1, [r7, #0]
    static uint8_t tick_count;

    switch(e->sig){
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	2b06      	cmp	r3, #6
 80008f4:	d00f      	beq.n	8000916 <protimer_state_handler_STAT+0x32>
 80008f6:	2b06      	cmp	r3, #6
 80008f8:	dc23      	bgt.n	8000942 <protimer_state_handler_STAT+0x5e>
 80008fa:	2b02      	cmp	r3, #2
 80008fc:	d00f      	beq.n	800091e <protimer_state_handler_STAT+0x3a>
 80008fe:	2b05      	cmp	r3, #5
 8000900:	d11f      	bne.n	8000942 <protimer_state_handler_STAT+0x5e>
        case ENTRY:{
            display_time(mobj->pro_time);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	689b      	ldr	r3, [r3, #8]
 8000906:	4618      	mov	r0, r3
 8000908:	f000 f826 	bl	8000958 <display_time>
            display_message("Productive time");
 800090c:	480f      	ldr	r0, [pc, #60]	; (800094c <protimer_state_handler_STAT+0x68>)
 800090e:	f000 f851 	bl	80009b4 <display_message>
            return EVENT_HANDLED;
 8000912:	2300      	movs	r3, #0
 8000914:	e016      	b.n	8000944 <protimer_state_handler_STAT+0x60>
        }
        case EXIT:{
            display_clear();
 8000916:	f000 f85b 	bl	80009d0 <display_clear>
            return EVENT_HANDLED;
 800091a:	2300      	movs	r3, #0
 800091c:	e012      	b.n	8000944 <protimer_state_handler_STAT+0x60>
        }
        case TIME_TICK:{
            if(++tick_count == 30){
 800091e:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <protimer_state_handler_STAT+0x6c>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	3301      	adds	r3, #1
 8000924:	b2da      	uxtb	r2, r3
 8000926:	4b0a      	ldr	r3, [pc, #40]	; (8000950 <protimer_state_handler_STAT+0x6c>)
 8000928:	701a      	strb	r2, [r3, #0]
 800092a:	4b09      	ldr	r3, [pc, #36]	; (8000950 <protimer_state_handler_STAT+0x6c>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	2b1e      	cmp	r3, #30
 8000930:	d107      	bne.n	8000942 <protimer_state_handler_STAT+0x5e>
                tick_count = 0;
 8000932:	4b07      	ldr	r3, [pc, #28]	; (8000950 <protimer_state_handler_STAT+0x6c>)
 8000934:	2200      	movs	r2, #0
 8000936:	701a      	strb	r2, [r3, #0]
                mobj->active_state = IDLE;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	4a06      	ldr	r2, [pc, #24]	; (8000954 <protimer_state_handler_STAT+0x70>)
 800093c:	60da      	str	r2, [r3, #12]
                return EVENT_TRANSITION;
 800093e:	2302      	movs	r3, #2
 8000940:	e000      	b.n	8000944 <protimer_state_handler_STAT+0x60>
            }
        }
    }
    return EVENT_IGNORED;
 8000942:	2301      	movs	r3, #1
}
 8000944:	4618      	mov	r0, r3
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	080058b0 	.word	0x080058b0
 8000950:	2000017c 	.word	0x2000017c
 8000954:	0800062d 	.word	0x0800062d

08000958 <display_time>:

//////////////////////////helper functions//////////////////////////
static void display_time(uint32_t time){
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  char buf[7];
//  char *time_msg;

  uint16_t m = time / 60;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	4a11      	ldr	r2, [pc, #68]	; (80009a8 <display_time+0x50>)
 8000964:	fba2 2303 	umull	r2, r3, r2, r3
 8000968:	095b      	lsrs	r3, r3, #5
 800096a:	82fb      	strh	r3, [r7, #22]
  uint8_t s = time % 60;
 800096c:	6879      	ldr	r1, [r7, #4]
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <display_time+0x50>)
 8000970:	fba3 2301 	umull	r2, r3, r3, r1
 8000974:	095a      	lsrs	r2, r3, #5
 8000976:	4613      	mov	r3, r2
 8000978:	011b      	lsls	r3, r3, #4
 800097a:	1a9b      	subs	r3, r3, r2
 800097c:	009b      	lsls	r3, r3, #2
 800097e:	1aca      	subs	r2, r1, r3
 8000980:	4613      	mov	r3, r2
 8000982:	757b      	strb	r3, [r7, #21]
  sprintf(buf,"%03d:%02d",m,s);
 8000984:	8afa      	ldrh	r2, [r7, #22]
 8000986:	7d7b      	ldrb	r3, [r7, #21]
 8000988:	f107 000c 	add.w	r0, r7, #12
 800098c:	4907      	ldr	r1, [pc, #28]	; (80009ac <display_time+0x54>)
 800098e:	f003 fe27 	bl	80045e0 <siprintf>

//  time_msg = (String)buf;
//  lcd_set_cursor(5,0);
//  lcd_print_string(time_msg);

  printf("%s\r\n", buf);
 8000992:	f107 030c 	add.w	r3, r7, #12
 8000996:	4619      	mov	r1, r3
 8000998:	4805      	ldr	r0, [pc, #20]	; (80009b0 <display_time+0x58>)
 800099a:	f003 fd93 	bl	80044c4 <iprintf>
}
 800099e:	bf00      	nop
 80009a0:	3718      	adds	r7, #24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	88888889 	.word	0x88888889
 80009ac:	080058c0 	.word	0x080058c0
 80009b0:	080058cc 	.word	0x080058cc

080009b4 <display_message>:

static void display_message(char *string){
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
	printf("%s\r\n", string);
 80009bc:	6879      	ldr	r1, [r7, #4]
 80009be:	4803      	ldr	r0, [pc, #12]	; (80009cc <display_message+0x18>)
 80009c0:	f003 fd80 	bl	80044c4 <iprintf>
}
 80009c4:	bf00      	nop
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	080058cc 	.word	0x080058cc

080009d0 <display_clear>:

static void display_clear(void){
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
    printf("clear\r\n");
 80009d4:	4802      	ldr	r0, [pc, #8]	; (80009e0 <display_clear+0x10>)
 80009d6:	f003 fdfb 	bl	80045d0 <puts>
}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	080058d4 	.word	0x080058d4

080009e4 <millis>:




uint32_t millis(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
	return millis_counter;
 80009e8:	4b03      	ldr	r3, [pc, #12]	; (80009f8 <millis+0x14>)
 80009ea:	681b      	ldr	r3, [r3, #0]
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	20000178 	.word	0x20000178

080009fc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM17)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a06      	ldr	r2, [pc, #24]	; (8000a24 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d104      	bne.n	8000a18 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		millis_counter++;
 8000a0e:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	3301      	adds	r3, #1
 8000a14:	4a04      	ldr	r2, [pc, #16]	; (8000a28 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000a16:	6013      	str	r3, [r2, #0]
//		printf("%ld\r\n", millis_counter);
	}
}
 8000a18:	bf00      	nop
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	40014800 	.word	0x40014800
 8000a28:	20000178 	.word	0x20000178

08000a2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a32:	f000 fb00 	bl	8001036 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a36:	f000 f863 	bl	8000b00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a3a:	f000 f927 	bl	8000c8c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000a3e:	f000 f8b1 	bl	8000ba4 <MX_LPUART1_UART_Init>
  MX_TIM17_Init();
 8000a42:	f000 f8fb 	bl	8000c3c <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

  protimer_init(&protimer);
 8000a46:	4829      	ldr	r0, [pc, #164]	; (8000aec <main+0xc0>)
 8000a48:	f7ff fdac 	bl	80005a4 <protimer_init>

  HAL_TIM_Base_Start_IT(&htim17);
 8000a4c:	4828      	ldr	r0, [pc, #160]	; (8000af0 <main+0xc4>)
 8000a4e:	f002 fb27 	bl	80030a0 <HAL_TIM_Base_Start_IT>
    /* USER CODE BEGIN 3 */
	   	  uint8_t btn_pad_value;
	  	  protimer_user_event_t ue;
	  	  static uint32_t current_time;

	  	  current_time = millis();
 8000a52:	f7ff ffc7 	bl	80009e4 <millis>
 8000a56:	4603      	mov	r3, r0
 8000a58:	4a26      	ldr	r2, [pc, #152]	; (8000af4 <main+0xc8>)
 8000a5a:	6013      	str	r3, [r2, #0]

	  	  static protimer_tick_event_t te;

	  	  //2. make an event
	  	  if(HAL_UART_Receive(&hlpuart1, &btn_pad_value, 1, HAL_MAX_DELAY) == HAL_OK)
 8000a5c:	1df9      	adds	r1, r7, #7
 8000a5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a62:	2201      	movs	r2, #1
 8000a64:	4824      	ldr	r0, [pc, #144]	; (8000af8 <main+0xcc>)
 8000a66:	f002 fe72 	bl	800374e <HAL_UART_Receive>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d11b      	bne.n	8000aa8 <main+0x7c>
	  	  {
	  		  if(btn_pad_value == '1')
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	2b31      	cmp	r3, #49	; 0x31
 8000a74:	d102      	bne.n	8000a7c <main+0x50>
	  		  {
	  			  ue.super.sig = INC_TIME;
 8000a76:	2300      	movs	r3, #0
 8000a78:	713b      	strb	r3, [r7, #4]
 8000a7a:	e010      	b.n	8000a9e <main+0x72>
	  		  }
	  		  else if(btn_pad_value == '2')
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
 8000a7e:	2b32      	cmp	r3, #50	; 0x32
 8000a80:	d102      	bne.n	8000a88 <main+0x5c>
	  		  {
	  			  ue.super.sig = DEC_TIME;
 8000a82:	2301      	movs	r3, #1
 8000a84:	713b      	strb	r3, [r7, #4]
 8000a86:	e00a      	b.n	8000a9e <main+0x72>
	  		  }
	  		  else if(btn_pad_value == '3')
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	2b33      	cmp	r3, #51	; 0x33
 8000a8c:	d102      	bne.n	8000a94 <main+0x68>
	  		  {
	  			  ue.super.sig = START_PAUSE;
 8000a8e:	2303      	movs	r3, #3
 8000a90:	713b      	strb	r3, [r7, #4]
 8000a92:	e004      	b.n	8000a9e <main+0x72>
	  		  }
	  		  else if(btn_pad_value == '4')
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	2b34      	cmp	r3, #52	; 0x34
 8000a98:	d101      	bne.n	8000a9e <main+0x72>
	  		  {
	  			  ue.super.sig = ABRT;
 8000a9a:	2304      	movs	r3, #4
 8000a9c:	713b      	strb	r3, [r7, #4]
	  		  }



	  	     //3. send it to event dispatcher
	  	    protimer_event_dispatcher(&protimer,&ue.super);
 8000a9e:	1d3b      	adds	r3, r7, #4
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4812      	ldr	r0, [pc, #72]	; (8000aec <main+0xc0>)
 8000aa4:	f7ff fd98 	bl	80005d8 <protimer_event_dispatcher>
	  	  }

	  	  //4. dispatch the time tick event for every 100ms
	  	  if(millis() - current_time  >= 100){
 8000aa8:	f7ff ff9c 	bl	80009e4 <millis>
 8000aac:	4602      	mov	r2, r0
 8000aae:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <main+0xc8>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	1ad3      	subs	r3, r2, r3
 8000ab4:	2b63      	cmp	r3, #99	; 0x63
 8000ab6:	d9cc      	bls.n	8000a52 <main+0x26>
	  	    //100ms has passed
	  	    current_time = millis();
 8000ab8:	f7ff ff94 	bl	80009e4 <millis>
 8000abc:	4603      	mov	r3, r0
 8000abe:	4a0d      	ldr	r2, [pc, #52]	; (8000af4 <main+0xc8>)
 8000ac0:	6013      	str	r3, [r2, #0]
	  	    te.super.sig = TIME_TICK;
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <main+0xd0>)
 8000ac4:	2202      	movs	r2, #2
 8000ac6:	701a      	strb	r2, [r3, #0]
	  	    if(++te.ss > 10) te.ss = 1;
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <main+0xd0>)
 8000aca:	785b      	ldrb	r3, [r3, #1]
 8000acc:	3301      	adds	r3, #1
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	4b0a      	ldr	r3, [pc, #40]	; (8000afc <main+0xd0>)
 8000ad2:	705a      	strb	r2, [r3, #1]
 8000ad4:	4b09      	ldr	r3, [pc, #36]	; (8000afc <main+0xd0>)
 8000ad6:	785b      	ldrb	r3, [r3, #1]
 8000ad8:	2b0a      	cmp	r3, #10
 8000ada:	d902      	bls.n	8000ae2 <main+0xb6>
 8000adc:	4b07      	ldr	r3, [pc, #28]	; (8000afc <main+0xd0>)
 8000ade:	2201      	movs	r2, #1
 8000ae0:	705a      	strb	r2, [r3, #1]

	  	    protimer_event_dispatcher(&protimer,&te.super);
 8000ae2:	4906      	ldr	r1, [pc, #24]	; (8000afc <main+0xd0>)
 8000ae4:	4801      	ldr	r0, [pc, #4]	; (8000aec <main+0xc0>)
 8000ae6:	f7ff fd77 	bl	80005d8 <protimer_event_dispatcher>
  {
 8000aea:	e7b2      	b.n	8000a52 <main+0x26>
 8000aec:	20000168 	.word	0x20000168
 8000af0:	2000011c 	.word	0x2000011c
 8000af4:	20000180 	.word	0x20000180
 8000af8:	2000008c 	.word	0x2000008c
 8000afc:	20000184 	.word	0x20000184

08000b00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b096      	sub	sp, #88	; 0x58
 8000b04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b06:	f107 0314 	add.w	r3, r7, #20
 8000b0a:	2244      	movs	r2, #68	; 0x44
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f003 fcd0 	bl	80044b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b14:	463b      	mov	r3, r7
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
 8000b1e:	60da      	str	r2, [r3, #12]
 8000b20:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b22:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b26:	f000 fdbf 	bl	80016a8 <HAL_PWREx_ControlVoltageScaling>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000b30:	f000 f8c4 	bl	8000cbc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b34:	2302      	movs	r3, #2
 8000b36:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b3c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b3e:	2340      	movs	r3, #64	; 0x40
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b42:	2302      	movs	r3, #2
 8000b44:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b46:	2302      	movs	r3, #2
 8000b48:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000b4e:	2308      	movs	r3, #8
 8000b50:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b52:	2302      	movs	r3, #2
 8000b54:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b56:	2302      	movs	r3, #2
 8000b58:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b5e:	f107 0314 	add.w	r3, r7, #20
 8000b62:	4618      	mov	r0, r3
 8000b64:	f000 fe54 	bl	8001810 <HAL_RCC_OscConfig>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000b6e:	f000 f8a5 	bl	8000cbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b72:	230f      	movs	r3, #15
 8000b74:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b76:	2303      	movs	r3, #3
 8000b78:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b82:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b84:	2300      	movs	r3, #0
 8000b86:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b88:	463b      	mov	r3, r7
 8000b8a:	2103      	movs	r1, #3
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f001 fa59 	bl	8002044 <HAL_RCC_ClockConfig>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000b98:	f000 f890 	bl	8000cbc <Error_Handler>
  }
}
 8000b9c:	bf00      	nop
 8000b9e:	3758      	adds	r7, #88	; 0x58
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000ba8:	4b22      	ldr	r3, [pc, #136]	; (8000c34 <MX_LPUART1_UART_Init+0x90>)
 8000baa:	4a23      	ldr	r2, [pc, #140]	; (8000c38 <MX_LPUART1_UART_Init+0x94>)
 8000bac:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000bae:	4b21      	ldr	r3, [pc, #132]	; (8000c34 <MX_LPUART1_UART_Init+0x90>)
 8000bb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bb4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bb6:	4b1f      	ldr	r3, [pc, #124]	; (8000c34 <MX_LPUART1_UART_Init+0x90>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000bbc:	4b1d      	ldr	r3, [pc, #116]	; (8000c34 <MX_LPUART1_UART_Init+0x90>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000bc2:	4b1c      	ldr	r3, [pc, #112]	; (8000c34 <MX_LPUART1_UART_Init+0x90>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000bc8:	4b1a      	ldr	r3, [pc, #104]	; (8000c34 <MX_LPUART1_UART_Init+0x90>)
 8000bca:	220c      	movs	r2, #12
 8000bcc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bce:	4b19      	ldr	r3, [pc, #100]	; (8000c34 <MX_LPUART1_UART_Init+0x90>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bd4:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <MX_LPUART1_UART_Init+0x90>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bda:	4b16      	ldr	r3, [pc, #88]	; (8000c34 <MX_LPUART1_UART_Init+0x90>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000be0:	4b14      	ldr	r3, [pc, #80]	; (8000c34 <MX_LPUART1_UART_Init+0x90>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000be6:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <MX_LPUART1_UART_Init+0x90>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000bec:	4811      	ldr	r0, [pc, #68]	; (8000c34 <MX_LPUART1_UART_Init+0x90>)
 8000bee:	f002 fcc7 	bl	8003580 <HAL_UART_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000bf8:	f000 f860 	bl	8000cbc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	480d      	ldr	r0, [pc, #52]	; (8000c34 <MX_LPUART1_UART_Init+0x90>)
 8000c00:	f003 fb64 	bl	80042cc <HAL_UARTEx_SetTxFifoThreshold>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c0a:	f000 f857 	bl	8000cbc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c0e:	2100      	movs	r1, #0
 8000c10:	4808      	ldr	r0, [pc, #32]	; (8000c34 <MX_LPUART1_UART_Init+0x90>)
 8000c12:	f003 fb99 	bl	8004348 <HAL_UARTEx_SetRxFifoThreshold>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c1c:	f000 f84e 	bl	8000cbc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000c20:	4804      	ldr	r0, [pc, #16]	; (8000c34 <MX_LPUART1_UART_Init+0x90>)
 8000c22:	f003 fb1a 	bl	800425a <HAL_UARTEx_DisableFifoMode>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c2c:	f000 f846 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	2000008c 	.word	0x2000008c
 8000c38:	40008000 	.word	0x40008000

08000c3c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000c40:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <MX_TIM17_Init+0x48>)
 8000c42:	4a11      	ldr	r2, [pc, #68]	; (8000c88 <MX_TIM17_Init+0x4c>)
 8000c44:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 64000-1;
 8000c46:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <MX_TIM17_Init+0x48>)
 8000c48:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000c4c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c4e:	4b0d      	ldr	r3, [pc, #52]	; (8000c84 <MX_TIM17_Init+0x48>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000-1;
 8000c54:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <MX_TIM17_Init+0x48>)
 8000c56:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c5a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c5c:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <MX_TIM17_Init+0x48>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000c62:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <MX_TIM17_Init+0x48>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <MX_TIM17_Init+0x48>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000c6e:	4805      	ldr	r0, [pc, #20]	; (8000c84 <MX_TIM17_Init+0x48>)
 8000c70:	f002 f9be 	bl	8002ff0 <HAL_TIM_Base_Init>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8000c7a:	f000 f81f 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	2000011c 	.word	0x2000011c
 8000c88:	40014800 	.word	0x40014800

08000c8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c92:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <MX_GPIO_Init+0x2c>)
 8000c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c96:	4a08      	ldr	r2, [pc, #32]	; (8000cb8 <MX_GPIO_Init+0x2c>)
 8000c98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c9e:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <MX_GPIO_Init+0x2c>)
 8000ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000caa:	f000 fda1 	bl	80017f0 <HAL_PWREx_EnableVddIO2>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40021000 	.word	0x40021000

08000cbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc0:	b672      	cpsid	i
}
 8000cc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <Error_Handler+0x8>
	...

08000cc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cce:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <HAL_MspInit+0x44>)
 8000cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cd2:	4a0e      	ldr	r2, [pc, #56]	; (8000d0c <HAL_MspInit+0x44>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	6613      	str	r3, [r2, #96]	; 0x60
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <HAL_MspInit+0x44>)
 8000cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce6:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <HAL_MspInit+0x44>)
 8000ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cea:	4a08      	ldr	r2, [pc, #32]	; (8000d0c <HAL_MspInit+0x44>)
 8000cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf0:	6593      	str	r3, [r2, #88]	; 0x58
 8000cf2:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <HAL_MspInit+0x44>)
 8000cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cfa:	603b      	str	r3, [r7, #0]
 8000cfc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	40021000 	.word	0x40021000

08000d10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b0ae      	sub	sp, #184	; 0xb8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d28:	f107 0310 	add.w	r3, r7, #16
 8000d2c:	2294      	movs	r2, #148	; 0x94
 8000d2e:	2100      	movs	r1, #0
 8000d30:	4618      	mov	r0, r3
 8000d32:	f003 fbbf 	bl	80044b4 <memset>
  if(huart->Instance==LPUART1)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a22      	ldr	r2, [pc, #136]	; (8000dc4 <HAL_UART_MspInit+0xb4>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d13d      	bne.n	8000dbc <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000d40:	2320      	movs	r3, #32
 8000d42:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000d44:	2300      	movs	r3, #0
 8000d46:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d48:	f107 0310 	add.w	r3, r7, #16
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f001 fc37 	bl	80025c0 <HAL_RCCEx_PeriphCLKConfig>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d58:	f7ff ffb0 	bl	8000cbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000d5c:	4b1a      	ldr	r3, [pc, #104]	; (8000dc8 <HAL_UART_MspInit+0xb8>)
 8000d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d60:	4a19      	ldr	r2, [pc, #100]	; (8000dc8 <HAL_UART_MspInit+0xb8>)
 8000d62:	f043 0301 	orr.w	r3, r3, #1
 8000d66:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000d68:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <HAL_UART_MspInit+0xb8>)
 8000d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d6c:	f003 0301 	and.w	r3, r3, #1
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d74:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <HAL_UART_MspInit+0xb8>)
 8000d76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d78:	4a13      	ldr	r2, [pc, #76]	; (8000dc8 <HAL_UART_MspInit+0xb8>)
 8000d7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d80:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <HAL_UART_MspInit+0xb8>)
 8000d82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d88:	60bb      	str	r3, [r7, #8]
 8000d8a:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000d8c:	f000 fd30 	bl	80017f0 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = BSP_DEBUG_UART_TX_Pin|BSP_DEBUG_UART_RX_Pin;
 8000d90:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000d94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da4:	2303      	movs	r3, #3
 8000da6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000daa:	2308      	movs	r3, #8
 8000dac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000db0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000db4:	4619      	mov	r1, r3
 8000db6:	4805      	ldr	r0, [pc, #20]	; (8000dcc <HAL_UART_MspInit+0xbc>)
 8000db8:	f000 fac4 	bl	8001344 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000dbc:	bf00      	nop
 8000dbe:	37b8      	adds	r7, #184	; 0xb8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40008000 	.word	0x40008000
 8000dc8:	40021000 	.word	0x40021000
 8000dcc:	48001800 	.word	0x48001800

08000dd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a0d      	ldr	r2, [pc, #52]	; (8000e14 <HAL_TIM_Base_MspInit+0x44>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d113      	bne.n	8000e0a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000de2:	4b0d      	ldr	r3, [pc, #52]	; (8000e18 <HAL_TIM_Base_MspInit+0x48>)
 8000de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000de6:	4a0c      	ldr	r2, [pc, #48]	; (8000e18 <HAL_TIM_Base_MspInit+0x48>)
 8000de8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dec:	6613      	str	r3, [r2, #96]	; 0x60
 8000dee:	4b0a      	ldr	r3, [pc, #40]	; (8000e18 <HAL_TIM_Base_MspInit+0x48>)
 8000df0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000df2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	201a      	movs	r0, #26
 8000e00:	f000 fa69 	bl	80012d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000e04:	201a      	movs	r0, #26
 8000e06:	f000 fa82 	bl	800130e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000e0a:	bf00      	nop
 8000e0c:	3710      	adds	r7, #16
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40014800 	.word	0x40014800
 8000e18:	40021000 	.word	0x40021000

08000e1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <NMI_Handler+0x4>

08000e22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e26:	e7fe      	b.n	8000e26 <HardFault_Handler+0x4>

08000e28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e2c:	e7fe      	b.n	8000e2c <MemManage_Handler+0x4>

08000e2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e32:	e7fe      	b.n	8000e32 <BusFault_Handler+0x4>

08000e34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e38:	e7fe      	b.n	8000e38 <UsageFault_Handler+0x4>

08000e3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e68:	f000 f93a 	bl	80010e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e6c:	bf00      	nop
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000e74:	4802      	ldr	r0, [pc, #8]	; (8000e80 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000e76:	f002 f983 	bl	8003180 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	2000011c 	.word	0x2000011c

08000e84 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e90:	2300      	movs	r3, #0
 8000e92:	617b      	str	r3, [r7, #20]
 8000e94:	e00a      	b.n	8000eac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e96:	f3af 8000 	nop.w
 8000e9a:	4601      	mov	r1, r0
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	1c5a      	adds	r2, r3, #1
 8000ea0:	60ba      	str	r2, [r7, #8]
 8000ea2:	b2ca      	uxtb	r2, r1
 8000ea4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	617b      	str	r3, [r7, #20]
 8000eac:	697a      	ldr	r2, [r7, #20]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	dbf0      	blt.n	8000e96 <_read+0x12>
  }

  return len;
 8000eb4:	687b      	ldr	r3, [r7, #4]
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3718      	adds	r7, #24
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
	...

08000ec0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	607a      	str	r2, [r7, #4]
//
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }
	HAL_UART_Transmit(&hlpuart1, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	b29a      	uxth	r2, r3
 8000ed0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ed4:	68b9      	ldr	r1, [r7, #8]
 8000ed6:	4804      	ldr	r0, [pc, #16]	; (8000ee8 <_write+0x28>)
 8000ed8:	f002 fba2 	bl	8003620 <HAL_UART_Transmit>
  return len;
 8000edc:	687b      	ldr	r3, [r7, #4]
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	2000008c 	.word	0x2000008c

08000eec <_close>:

int _close(int file)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ef4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f14:	605a      	str	r2, [r3, #4]
  return 0;
 8000f16:	2300      	movs	r3, #0
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <_isatty>:

int _isatty(int file)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f2c:	2301      	movs	r3, #1
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	b085      	sub	sp, #20
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	60f8      	str	r0, [r7, #12]
 8000f42:	60b9      	str	r1, [r7, #8]
 8000f44:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f46:	2300      	movs	r3, #0
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3714      	adds	r7, #20
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f5c:	4a14      	ldr	r2, [pc, #80]	; (8000fb0 <_sbrk+0x5c>)
 8000f5e:	4b15      	ldr	r3, [pc, #84]	; (8000fb4 <_sbrk+0x60>)
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f68:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <_sbrk+0x64>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d102      	bne.n	8000f76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f70:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <_sbrk+0x64>)
 8000f72:	4a12      	ldr	r2, [pc, #72]	; (8000fbc <_sbrk+0x68>)
 8000f74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f76:	4b10      	ldr	r3, [pc, #64]	; (8000fb8 <_sbrk+0x64>)
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d207      	bcs.n	8000f94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f84:	f003 fa6c 	bl	8004460 <__errno>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	220c      	movs	r2, #12
 8000f8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f92:	e009      	b.n	8000fa8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f94:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <_sbrk+0x64>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f9a:	4b07      	ldr	r3, [pc, #28]	; (8000fb8 <_sbrk+0x64>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	4a05      	ldr	r2, [pc, #20]	; (8000fb8 <_sbrk+0x64>)
 8000fa4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3718      	adds	r7, #24
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	200a0000 	.word	0x200a0000
 8000fb4:	00000400 	.word	0x00000400
 8000fb8:	20000188 	.word	0x20000188
 8000fbc:	200001a0 	.word	0x200001a0

08000fc0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <SystemInit+0x20>)
 8000fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fca:	4a05      	ldr	r2, [pc, #20]	; (8000fe0 <SystemInit+0x20>)
 8000fcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000fe4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800101c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fe8:	f7ff ffea 	bl	8000fc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fec:	480c      	ldr	r0, [pc, #48]	; (8001020 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fee:	490d      	ldr	r1, [pc, #52]	; (8001024 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ff0:	4a0d      	ldr	r2, [pc, #52]	; (8001028 <LoopForever+0xe>)
  movs r3, #0
 8000ff2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff4:	e002      	b.n	8000ffc <LoopCopyDataInit>

08000ff6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ff6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ffa:	3304      	adds	r3, #4

08000ffc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ffc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ffe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001000:	d3f9      	bcc.n	8000ff6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001002:	4a0a      	ldr	r2, [pc, #40]	; (800102c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001004:	4c0a      	ldr	r4, [pc, #40]	; (8001030 <LoopForever+0x16>)
  movs r3, #0
 8001006:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001008:	e001      	b.n	800100e <LoopFillZerobss>

0800100a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800100a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800100c:	3204      	adds	r2, #4

0800100e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800100e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001010:	d3fb      	bcc.n	800100a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001012:	f003 fa2b 	bl	800446c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001016:	f7ff fd09 	bl	8000a2c <main>

0800101a <LoopForever>:

LoopForever:
    b LoopForever
 800101a:	e7fe      	b.n	800101a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800101c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001020:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001024:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001028:	080059f4 	.word	0x080059f4
  ldr r2, =_sbss
 800102c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001030:	200001a0 	.word	0x200001a0

08001034 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001034:	e7fe      	b.n	8001034 <ADC1_IRQHandler>

08001036 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b082      	sub	sp, #8
 800103a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800103c:	2300      	movs	r3, #0
 800103e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001040:	2003      	movs	r0, #3
 8001042:	f000 f93d 	bl	80012c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001046:	2000      	movs	r0, #0
 8001048:	f000 f80e 	bl	8001068 <HAL_InitTick>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d002      	beq.n	8001058 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	71fb      	strb	r3, [r7, #7]
 8001056:	e001      	b.n	800105c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001058:	f7ff fe36 	bl	8000cc8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800105c:	79fb      	ldrb	r3, [r7, #7]
}
 800105e:	4618      	mov	r0, r3
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
	...

08001068 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001070:	2300      	movs	r3, #0
 8001072:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001074:	4b17      	ldr	r3, [pc, #92]	; (80010d4 <HAL_InitTick+0x6c>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d023      	beq.n	80010c4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800107c:	4b16      	ldr	r3, [pc, #88]	; (80010d8 <HAL_InitTick+0x70>)
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	4b14      	ldr	r3, [pc, #80]	; (80010d4 <HAL_InitTick+0x6c>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	4619      	mov	r1, r3
 8001086:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800108a:	fbb3 f3f1 	udiv	r3, r3, r1
 800108e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001092:	4618      	mov	r0, r3
 8001094:	f000 f949 	bl	800132a <HAL_SYSTICK_Config>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d10f      	bne.n	80010be <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2b0f      	cmp	r3, #15
 80010a2:	d809      	bhi.n	80010b8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010a4:	2200      	movs	r2, #0
 80010a6:	6879      	ldr	r1, [r7, #4]
 80010a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010ac:	f000 f913 	bl	80012d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010b0:	4a0a      	ldr	r2, [pc, #40]	; (80010dc <HAL_InitTick+0x74>)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6013      	str	r3, [r2, #0]
 80010b6:	e007      	b.n	80010c8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	73fb      	strb	r3, [r7, #15]
 80010bc:	e004      	b.n	80010c8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	73fb      	strb	r3, [r7, #15]
 80010c2:	e001      	b.n	80010c8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000008 	.word	0x20000008
 80010d8:	20000000 	.word	0x20000000
 80010dc:	20000004 	.word	0x20000004

080010e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010e4:	4b06      	ldr	r3, [pc, #24]	; (8001100 <HAL_IncTick+0x20>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	461a      	mov	r2, r3
 80010ea:	4b06      	ldr	r3, [pc, #24]	; (8001104 <HAL_IncTick+0x24>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4413      	add	r3, r2
 80010f0:	4a04      	ldr	r2, [pc, #16]	; (8001104 <HAL_IncTick+0x24>)
 80010f2:	6013      	str	r3, [r2, #0]
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	20000008 	.word	0x20000008
 8001104:	2000018c 	.word	0x2000018c

08001108 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return uwTick;
 800110c:	4b03      	ldr	r3, [pc, #12]	; (800111c <HAL_GetTick+0x14>)
 800110e:	681b      	ldr	r3, [r3, #0]
}
 8001110:	4618      	mov	r0, r3
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	2000018c 	.word	0x2000018c

08001120 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001130:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <__NVIC_SetPriorityGrouping+0x44>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001136:	68ba      	ldr	r2, [r7, #8]
 8001138:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800113c:	4013      	ands	r3, r2
 800113e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001148:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800114c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001150:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001152:	4a04      	ldr	r2, [pc, #16]	; (8001164 <__NVIC_SetPriorityGrouping+0x44>)
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	60d3      	str	r3, [r2, #12]
}
 8001158:	bf00      	nop
 800115a:	3714      	adds	r7, #20
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800116c:	4b04      	ldr	r3, [pc, #16]	; (8001180 <__NVIC_GetPriorityGrouping+0x18>)
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	0a1b      	lsrs	r3, r3, #8
 8001172:	f003 0307 	and.w	r3, r3, #7
}
 8001176:	4618      	mov	r0, r3
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800118e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001192:	2b00      	cmp	r3, #0
 8001194:	db0b      	blt.n	80011ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	f003 021f 	and.w	r2, r3, #31
 800119c:	4907      	ldr	r1, [pc, #28]	; (80011bc <__NVIC_EnableIRQ+0x38>)
 800119e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a2:	095b      	lsrs	r3, r3, #5
 80011a4:	2001      	movs	r0, #1
 80011a6:	fa00 f202 	lsl.w	r2, r0, r2
 80011aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011ae:	bf00      	nop
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	e000e100 	.word	0xe000e100

080011c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	6039      	str	r1, [r7, #0]
 80011ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	db0a      	blt.n	80011ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	490c      	ldr	r1, [pc, #48]	; (800120c <__NVIC_SetPriority+0x4c>)
 80011da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011de:	0112      	lsls	r2, r2, #4
 80011e0:	b2d2      	uxtb	r2, r2
 80011e2:	440b      	add	r3, r1
 80011e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011e8:	e00a      	b.n	8001200 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	4908      	ldr	r1, [pc, #32]	; (8001210 <__NVIC_SetPriority+0x50>)
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	f003 030f 	and.w	r3, r3, #15
 80011f6:	3b04      	subs	r3, #4
 80011f8:	0112      	lsls	r2, r2, #4
 80011fa:	b2d2      	uxtb	r2, r2
 80011fc:	440b      	add	r3, r1
 80011fe:	761a      	strb	r2, [r3, #24]
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	e000e100 	.word	0xe000e100
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001214:	b480      	push	{r7}
 8001216:	b089      	sub	sp, #36	; 0x24
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	f1c3 0307 	rsb	r3, r3, #7
 800122e:	2b04      	cmp	r3, #4
 8001230:	bf28      	it	cs
 8001232:	2304      	movcs	r3, #4
 8001234:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	3304      	adds	r3, #4
 800123a:	2b06      	cmp	r3, #6
 800123c:	d902      	bls.n	8001244 <NVIC_EncodePriority+0x30>
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	3b03      	subs	r3, #3
 8001242:	e000      	b.n	8001246 <NVIC_EncodePriority+0x32>
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001248:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	43da      	mvns	r2, r3
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	401a      	ands	r2, r3
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800125c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	fa01 f303 	lsl.w	r3, r1, r3
 8001266:	43d9      	mvns	r1, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800126c:	4313      	orrs	r3, r2
         );
}
 800126e:	4618      	mov	r0, r3
 8001270:	3724      	adds	r7, #36	; 0x24
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
	...

0800127c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3b01      	subs	r3, #1
 8001288:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800128c:	d301      	bcc.n	8001292 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800128e:	2301      	movs	r3, #1
 8001290:	e00f      	b.n	80012b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001292:	4a0a      	ldr	r2, [pc, #40]	; (80012bc <SysTick_Config+0x40>)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3b01      	subs	r3, #1
 8001298:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800129a:	210f      	movs	r1, #15
 800129c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012a0:	f7ff ff8e 	bl	80011c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012a4:	4b05      	ldr	r3, [pc, #20]	; (80012bc <SysTick_Config+0x40>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012aa:	4b04      	ldr	r3, [pc, #16]	; (80012bc <SysTick_Config+0x40>)
 80012ac:	2207      	movs	r2, #7
 80012ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	e000e010 	.word	0xe000e010

080012c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f7ff ff29 	bl	8001120 <__NVIC_SetPriorityGrouping>
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b086      	sub	sp, #24
 80012da:	af00      	add	r7, sp, #0
 80012dc:	4603      	mov	r3, r0
 80012de:	60b9      	str	r1, [r7, #8]
 80012e0:	607a      	str	r2, [r7, #4]
 80012e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012e4:	2300      	movs	r3, #0
 80012e6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012e8:	f7ff ff3e 	bl	8001168 <__NVIC_GetPriorityGrouping>
 80012ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	68b9      	ldr	r1, [r7, #8]
 80012f2:	6978      	ldr	r0, [r7, #20]
 80012f4:	f7ff ff8e 	bl	8001214 <NVIC_EncodePriority>
 80012f8:	4602      	mov	r2, r0
 80012fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012fe:	4611      	mov	r1, r2
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff ff5d 	bl	80011c0 <__NVIC_SetPriority>
}
 8001306:	bf00      	nop
 8001308:	3718      	adds	r7, #24
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b082      	sub	sp, #8
 8001312:	af00      	add	r7, sp, #0
 8001314:	4603      	mov	r3, r0
 8001316:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff ff31 	bl	8001184 <__NVIC_EnableIRQ>
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b082      	sub	sp, #8
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f7ff ffa2 	bl	800127c <SysTick_Config>
 8001338:	4603      	mov	r3, r0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001344:	b480      	push	{r7}
 8001346:	b087      	sub	sp, #28
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800134e:	2300      	movs	r3, #0
 8001350:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001352:	e166      	b.n	8001622 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	2101      	movs	r1, #1
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	fa01 f303 	lsl.w	r3, r1, r3
 8001360:	4013      	ands	r3, r2
 8001362:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	2b00      	cmp	r3, #0
 8001368:	f000 8158 	beq.w	800161c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f003 0303 	and.w	r3, r3, #3
 8001374:	2b01      	cmp	r3, #1
 8001376:	d005      	beq.n	8001384 <HAL_GPIO_Init+0x40>
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f003 0303 	and.w	r3, r3, #3
 8001380:	2b02      	cmp	r3, #2
 8001382:	d130      	bne.n	80013e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	2203      	movs	r2, #3
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	43db      	mvns	r3, r3
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	4013      	ands	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	68da      	ldr	r2, [r3, #12]
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013ba:	2201      	movs	r2, #1
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43db      	mvns	r3, r3
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	4013      	ands	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	091b      	lsrs	r3, r3, #4
 80013d0:	f003 0201 	and.w	r2, r3, #1
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	4313      	orrs	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f003 0303 	and.w	r3, r3, #3
 80013ee:	2b03      	cmp	r3, #3
 80013f0:	d017      	beq.n	8001422 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	2203      	movs	r2, #3
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43db      	mvns	r3, r3
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	4013      	ands	r3, r2
 8001408:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	689a      	ldr	r2, [r3, #8]
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	4313      	orrs	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f003 0303 	and.w	r3, r3, #3
 800142a:	2b02      	cmp	r3, #2
 800142c:	d123      	bne.n	8001476 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	08da      	lsrs	r2, r3, #3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	3208      	adds	r2, #8
 8001436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800143a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	f003 0307 	and.w	r3, r3, #7
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	220f      	movs	r2, #15
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	43db      	mvns	r3, r3
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	4013      	ands	r3, r2
 8001450:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	691a      	ldr	r2, [r3, #16]
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	f003 0307 	and.w	r3, r3, #7
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	4313      	orrs	r3, r2
 8001466:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	08da      	lsrs	r2, r3, #3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3208      	adds	r2, #8
 8001470:	6939      	ldr	r1, [r7, #16]
 8001472:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	2203      	movs	r2, #3
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	43db      	mvns	r3, r3
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	4013      	ands	r3, r2
 800148c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f003 0203 	and.w	r2, r3, #3
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	f000 80b2 	beq.w	800161c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014b8:	4b61      	ldr	r3, [pc, #388]	; (8001640 <HAL_GPIO_Init+0x2fc>)
 80014ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014bc:	4a60      	ldr	r2, [pc, #384]	; (8001640 <HAL_GPIO_Init+0x2fc>)
 80014be:	f043 0301 	orr.w	r3, r3, #1
 80014c2:	6613      	str	r3, [r2, #96]	; 0x60
 80014c4:	4b5e      	ldr	r3, [pc, #376]	; (8001640 <HAL_GPIO_Init+0x2fc>)
 80014c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014c8:	f003 0301 	and.w	r3, r3, #1
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014d0:	4a5c      	ldr	r2, [pc, #368]	; (8001644 <HAL_GPIO_Init+0x300>)
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	089b      	lsrs	r3, r3, #2
 80014d6:	3302      	adds	r3, #2
 80014d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	f003 0303 	and.w	r3, r3, #3
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	220f      	movs	r2, #15
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	43db      	mvns	r3, r3
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	4013      	ands	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80014fa:	d02b      	beq.n	8001554 <HAL_GPIO_Init+0x210>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4a52      	ldr	r2, [pc, #328]	; (8001648 <HAL_GPIO_Init+0x304>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d025      	beq.n	8001550 <HAL_GPIO_Init+0x20c>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4a51      	ldr	r2, [pc, #324]	; (800164c <HAL_GPIO_Init+0x308>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d01f      	beq.n	800154c <HAL_GPIO_Init+0x208>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4a50      	ldr	r2, [pc, #320]	; (8001650 <HAL_GPIO_Init+0x30c>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d019      	beq.n	8001548 <HAL_GPIO_Init+0x204>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	4a4f      	ldr	r2, [pc, #316]	; (8001654 <HAL_GPIO_Init+0x310>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d013      	beq.n	8001544 <HAL_GPIO_Init+0x200>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4a4e      	ldr	r2, [pc, #312]	; (8001658 <HAL_GPIO_Init+0x314>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d00d      	beq.n	8001540 <HAL_GPIO_Init+0x1fc>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4a4d      	ldr	r2, [pc, #308]	; (800165c <HAL_GPIO_Init+0x318>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d007      	beq.n	800153c <HAL_GPIO_Init+0x1f8>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4a4c      	ldr	r2, [pc, #304]	; (8001660 <HAL_GPIO_Init+0x31c>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d101      	bne.n	8001538 <HAL_GPIO_Init+0x1f4>
 8001534:	2307      	movs	r3, #7
 8001536:	e00e      	b.n	8001556 <HAL_GPIO_Init+0x212>
 8001538:	2308      	movs	r3, #8
 800153a:	e00c      	b.n	8001556 <HAL_GPIO_Init+0x212>
 800153c:	2306      	movs	r3, #6
 800153e:	e00a      	b.n	8001556 <HAL_GPIO_Init+0x212>
 8001540:	2305      	movs	r3, #5
 8001542:	e008      	b.n	8001556 <HAL_GPIO_Init+0x212>
 8001544:	2304      	movs	r3, #4
 8001546:	e006      	b.n	8001556 <HAL_GPIO_Init+0x212>
 8001548:	2303      	movs	r3, #3
 800154a:	e004      	b.n	8001556 <HAL_GPIO_Init+0x212>
 800154c:	2302      	movs	r3, #2
 800154e:	e002      	b.n	8001556 <HAL_GPIO_Init+0x212>
 8001550:	2301      	movs	r3, #1
 8001552:	e000      	b.n	8001556 <HAL_GPIO_Init+0x212>
 8001554:	2300      	movs	r3, #0
 8001556:	697a      	ldr	r2, [r7, #20]
 8001558:	f002 0203 	and.w	r2, r2, #3
 800155c:	0092      	lsls	r2, r2, #2
 800155e:	4093      	lsls	r3, r2
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	4313      	orrs	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001566:	4937      	ldr	r1, [pc, #220]	; (8001644 <HAL_GPIO_Init+0x300>)
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	089b      	lsrs	r3, r3, #2
 800156c:	3302      	adds	r3, #2
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001574:	4b3b      	ldr	r3, [pc, #236]	; (8001664 <HAL_GPIO_Init+0x320>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	43db      	mvns	r3, r3
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	4013      	ands	r3, r2
 8001582:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d003      	beq.n	8001598 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	4313      	orrs	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001598:	4a32      	ldr	r2, [pc, #200]	; (8001664 <HAL_GPIO_Init+0x320>)
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800159e:	4b31      	ldr	r3, [pc, #196]	; (8001664 <HAL_GPIO_Init+0x320>)
 80015a0:	68db      	ldr	r3, [r3, #12]
 80015a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	43db      	mvns	r3, r3
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	4013      	ands	r3, r2
 80015ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d003      	beq.n	80015c2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	4313      	orrs	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015c2:	4a28      	ldr	r2, [pc, #160]	; (8001664 <HAL_GPIO_Init+0x320>)
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80015c8:	4b26      	ldr	r3, [pc, #152]	; (8001664 <HAL_GPIO_Init+0x320>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	43db      	mvns	r3, r3
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	4013      	ands	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d003      	beq.n	80015ec <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015ec:	4a1d      	ldr	r2, [pc, #116]	; (8001664 <HAL_GPIO_Init+0x320>)
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80015f2:	4b1c      	ldr	r3, [pc, #112]	; (8001664 <HAL_GPIO_Init+0x320>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	43db      	mvns	r3, r3
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	4013      	ands	r3, r2
 8001600:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d003      	beq.n	8001616 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	4313      	orrs	r3, r2
 8001614:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001616:	4a13      	ldr	r2, [pc, #76]	; (8001664 <HAL_GPIO_Init+0x320>)
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	3301      	adds	r3, #1
 8001620:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	fa22 f303 	lsr.w	r3, r2, r3
 800162c:	2b00      	cmp	r3, #0
 800162e:	f47f ae91 	bne.w	8001354 <HAL_GPIO_Init+0x10>
  }
}
 8001632:	bf00      	nop
 8001634:	bf00      	nop
 8001636:	371c      	adds	r7, #28
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	40021000 	.word	0x40021000
 8001644:	40010000 	.word	0x40010000
 8001648:	48000400 	.word	0x48000400
 800164c:	48000800 	.word	0x48000800
 8001650:	48000c00 	.word	0x48000c00
 8001654:	48001000 	.word	0x48001000
 8001658:	48001400 	.word	0x48001400
 800165c:	48001800 	.word	0x48001800
 8001660:	48001c00 	.word	0x48001c00
 8001664:	40010400 	.word	0x40010400

08001668 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800166c:	4b0d      	ldr	r3, [pc, #52]	; (80016a4 <HAL_PWREx_GetVoltageRange+0x3c>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001674:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001678:	d102      	bne.n	8001680 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800167a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800167e:	e00b      	b.n	8001698 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001680:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001682:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800168a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800168e:	d102      	bne.n	8001696 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001690:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001694:	e000      	b.n	8001698 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001696:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001698:	4618      	mov	r0, r3
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	40007000 	.word	0x40007000

080016a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d141      	bne.n	800173a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80016b6:	4b4b      	ldr	r3, [pc, #300]	; (80017e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016c2:	d131      	bne.n	8001728 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016c4:	4b47      	ldr	r3, [pc, #284]	; (80017e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016ca:	4a46      	ldr	r2, [pc, #280]	; (80017e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016d4:	4b43      	ldr	r3, [pc, #268]	; (80017e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016dc:	4a41      	ldr	r2, [pc, #260]	; (80017e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80016e4:	4b40      	ldr	r3, [pc, #256]	; (80017e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2232      	movs	r2, #50	; 0x32
 80016ea:	fb02 f303 	mul.w	r3, r2, r3
 80016ee:	4a3f      	ldr	r2, [pc, #252]	; (80017ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 80016f0:	fba2 2303 	umull	r2, r3, r2, r3
 80016f4:	0c9b      	lsrs	r3, r3, #18
 80016f6:	3301      	adds	r3, #1
 80016f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016fa:	e002      	b.n	8001702 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	3b01      	subs	r3, #1
 8001700:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001702:	4b38      	ldr	r3, [pc, #224]	; (80017e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001704:	695b      	ldr	r3, [r3, #20]
 8001706:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800170a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800170e:	d102      	bne.n	8001716 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1f2      	bne.n	80016fc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001716:	4b33      	ldr	r3, [pc, #204]	; (80017e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001718:	695b      	ldr	r3, [r3, #20]
 800171a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800171e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001722:	d158      	bne.n	80017d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e057      	b.n	80017d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001728:	4b2e      	ldr	r3, [pc, #184]	; (80017e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800172a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800172e:	4a2d      	ldr	r2, [pc, #180]	; (80017e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001730:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001734:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001738:	e04d      	b.n	80017d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001740:	d141      	bne.n	80017c6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001742:	4b28      	ldr	r3, [pc, #160]	; (80017e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800174a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800174e:	d131      	bne.n	80017b4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001750:	4b24      	ldr	r3, [pc, #144]	; (80017e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001752:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001756:	4a23      	ldr	r2, [pc, #140]	; (80017e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800175c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001760:	4b20      	ldr	r3, [pc, #128]	; (80017e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001768:	4a1e      	ldr	r2, [pc, #120]	; (80017e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800176a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800176e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001770:	4b1d      	ldr	r3, [pc, #116]	; (80017e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2232      	movs	r2, #50	; 0x32
 8001776:	fb02 f303 	mul.w	r3, r2, r3
 800177a:	4a1c      	ldr	r2, [pc, #112]	; (80017ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 800177c:	fba2 2303 	umull	r2, r3, r2, r3
 8001780:	0c9b      	lsrs	r3, r3, #18
 8001782:	3301      	adds	r3, #1
 8001784:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001786:	e002      	b.n	800178e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	3b01      	subs	r3, #1
 800178c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800178e:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001796:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800179a:	d102      	bne.n	80017a2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1f2      	bne.n	8001788 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017a2:	4b10      	ldr	r3, [pc, #64]	; (80017e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017a4:	695b      	ldr	r3, [r3, #20]
 80017a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017ae:	d112      	bne.n	80017d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e011      	b.n	80017d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017b4:	4b0b      	ldr	r3, [pc, #44]	; (80017e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017ba:	4a0a      	ldr	r2, [pc, #40]	; (80017e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80017c4:	e007      	b.n	80017d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80017c6:	4b07      	ldr	r3, [pc, #28]	; (80017e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017ce:	4a05      	ldr	r2, [pc, #20]	; (80017e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017d4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80017d6:	2300      	movs	r3, #0
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	40007000 	.word	0x40007000
 80017e8:	20000000 	.word	0x20000000
 80017ec:	431bde83 	.word	0x431bde83

080017f0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80017f4:	4b05      	ldr	r3, [pc, #20]	; (800180c <HAL_PWREx_EnableVddIO2+0x1c>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	4a04      	ldr	r2, [pc, #16]	; (800180c <HAL_PWREx_EnableVddIO2+0x1c>)
 80017fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017fe:	6053      	str	r3, [r2, #4]
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	40007000 	.word	0x40007000

08001810 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b088      	sub	sp, #32
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d102      	bne.n	8001824 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	f000 bc08 	b.w	8002034 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001824:	4b96      	ldr	r3, [pc, #600]	; (8001a80 <HAL_RCC_OscConfig+0x270>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f003 030c 	and.w	r3, r3, #12
 800182c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800182e:	4b94      	ldr	r3, [pc, #592]	; (8001a80 <HAL_RCC_OscConfig+0x270>)
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	f003 0303 	and.w	r3, r3, #3
 8001836:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0310 	and.w	r3, r3, #16
 8001840:	2b00      	cmp	r3, #0
 8001842:	f000 80e4 	beq.w	8001a0e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d007      	beq.n	800185c <HAL_RCC_OscConfig+0x4c>
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	2b0c      	cmp	r3, #12
 8001850:	f040 808b 	bne.w	800196a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	2b01      	cmp	r3, #1
 8001858:	f040 8087 	bne.w	800196a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800185c:	4b88      	ldr	r3, [pc, #544]	; (8001a80 <HAL_RCC_OscConfig+0x270>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d005      	beq.n	8001874 <HAL_RCC_OscConfig+0x64>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d101      	bne.n	8001874 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e3df      	b.n	8002034 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a1a      	ldr	r2, [r3, #32]
 8001878:	4b81      	ldr	r3, [pc, #516]	; (8001a80 <HAL_RCC_OscConfig+0x270>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0308 	and.w	r3, r3, #8
 8001880:	2b00      	cmp	r3, #0
 8001882:	d004      	beq.n	800188e <HAL_RCC_OscConfig+0x7e>
 8001884:	4b7e      	ldr	r3, [pc, #504]	; (8001a80 <HAL_RCC_OscConfig+0x270>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800188c:	e005      	b.n	800189a <HAL_RCC_OscConfig+0x8a>
 800188e:	4b7c      	ldr	r3, [pc, #496]	; (8001a80 <HAL_RCC_OscConfig+0x270>)
 8001890:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001894:	091b      	lsrs	r3, r3, #4
 8001896:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800189a:	4293      	cmp	r3, r2
 800189c:	d223      	bcs.n	80018e6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a1b      	ldr	r3, [r3, #32]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f000 fdcc 	bl	8002440 <RCC_SetFlashLatencyFromMSIRange>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e3c0      	b.n	8002034 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018b2:	4b73      	ldr	r3, [pc, #460]	; (8001a80 <HAL_RCC_OscConfig+0x270>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a72      	ldr	r2, [pc, #456]	; (8001a80 <HAL_RCC_OscConfig+0x270>)
 80018b8:	f043 0308 	orr.w	r3, r3, #8
 80018bc:	6013      	str	r3, [r2, #0]
 80018be:	4b70      	ldr	r3, [pc, #448]	; (8001a80 <HAL_RCC_OscConfig+0x270>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6a1b      	ldr	r3, [r3, #32]
 80018ca:	496d      	ldr	r1, [pc, #436]	; (8001a80 <HAL_RCC_OscConfig+0x270>)
 80018cc:	4313      	orrs	r3, r2
 80018ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018d0:	4b6b      	ldr	r3, [pc, #428]	; (8001a80 <HAL_RCC_OscConfig+0x270>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	69db      	ldr	r3, [r3, #28]
 80018dc:	021b      	lsls	r3, r3, #8
 80018de:	4968      	ldr	r1, [pc, #416]	; (8001a80 <HAL_RCC_OscConfig+0x270>)
 80018e0:	4313      	orrs	r3, r2
 80018e2:	604b      	str	r3, [r1, #4]
 80018e4:	e025      	b.n	8001932 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018e6:	4b66      	ldr	r3, [pc, #408]	; (8001a80 <HAL_RCC_OscConfig+0x270>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a65      	ldr	r2, [pc, #404]	; (8001a80 <HAL_RCC_OscConfig+0x270>)
 80018ec:	f043 0308 	orr.w	r3, r3, #8
 80018f0:	6013      	str	r3, [r2, #0]
 80018f2:	4b63      	ldr	r3, [pc, #396]	; (8001a80 <HAL_RCC_OscConfig+0x270>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a1b      	ldr	r3, [r3, #32]
 80018fe:	4960      	ldr	r1, [pc, #384]	; (8001a80 <HAL_RCC_OscConfig+0x270>)
 8001900:	4313      	orrs	r3, r2
 8001902:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001904:	4b5e      	ldr	r3, [pc, #376]	; (8001a80 <HAL_RCC_OscConfig+0x270>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	69db      	ldr	r3, [r3, #28]
 8001910:	021b      	lsls	r3, r3, #8
 8001912:	495b      	ldr	r1, [pc, #364]	; (8001a80 <HAL_RCC_OscConfig+0x270>)
 8001914:	4313      	orrs	r3, r2
 8001916:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d109      	bne.n	8001932 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a1b      	ldr	r3, [r3, #32]
 8001922:	4618      	mov	r0, r3
 8001924:	f000 fd8c 	bl	8002440 <RCC_SetFlashLatencyFromMSIRange>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e380      	b.n	8002034 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001932:	f000 fcc1 	bl	80022b8 <HAL_RCC_GetSysClockFreq>
 8001936:	4602      	mov	r2, r0
 8001938:	4b51      	ldr	r3, [pc, #324]	; (8001a80 <HAL_RCC_OscConfig+0x270>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	091b      	lsrs	r3, r3, #4
 800193e:	f003 030f 	and.w	r3, r3, #15
 8001942:	4950      	ldr	r1, [pc, #320]	; (8001a84 <HAL_RCC_OscConfig+0x274>)
 8001944:	5ccb      	ldrb	r3, [r1, r3]
 8001946:	f003 031f 	and.w	r3, r3, #31
 800194a:	fa22 f303 	lsr.w	r3, r2, r3
 800194e:	4a4e      	ldr	r2, [pc, #312]	; (8001a88 <HAL_RCC_OscConfig+0x278>)
 8001950:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001952:	4b4e      	ldr	r3, [pc, #312]	; (8001a8c <HAL_RCC_OscConfig+0x27c>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff fb86 	bl	8001068 <HAL_InitTick>
 800195c:	4603      	mov	r3, r0
 800195e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001960:	7bfb      	ldrb	r3, [r7, #15]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d052      	beq.n	8001a0c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001966:	7bfb      	ldrb	r3, [r7, #15]
 8001968:	e364      	b.n	8002034 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d032      	beq.n	80019d8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001972:	4b43      	ldr	r3, [pc, #268]	; (8001a80 <HAL_RCC_OscConfig+0x270>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a42      	ldr	r2, [pc, #264]	; (8001a80 <HAL_RCC_OscConfig+0x270>)
 8001978:	f043 0301 	orr.w	r3, r3, #1
 800197c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800197e:	f7ff fbc3 	bl	8001108 <HAL_GetTick>
 8001982:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001984:	e008      	b.n	8001998 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001986:	f7ff fbbf 	bl	8001108 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e34d      	b.n	8002034 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001998:	4b39      	ldr	r3, [pc, #228]	; (8001a80 <HAL_RCC_OscConfig+0x270>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d0f0      	beq.n	8001986 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019a4:	4b36      	ldr	r3, [pc, #216]	; (8001a80 <HAL_RCC_OscConfig+0x270>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a35      	ldr	r2, [pc, #212]	; (8001a80 <HAL_RCC_OscConfig+0x270>)
 80019aa:	f043 0308 	orr.w	r3, r3, #8
 80019ae:	6013      	str	r3, [r2, #0]
 80019b0:	4b33      	ldr	r3, [pc, #204]	; (8001a80 <HAL_RCC_OscConfig+0x270>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a1b      	ldr	r3, [r3, #32]
 80019bc:	4930      	ldr	r1, [pc, #192]	; (8001a80 <HAL_RCC_OscConfig+0x270>)
 80019be:	4313      	orrs	r3, r2
 80019c0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019c2:	4b2f      	ldr	r3, [pc, #188]	; (8001a80 <HAL_RCC_OscConfig+0x270>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	021b      	lsls	r3, r3, #8
 80019d0:	492b      	ldr	r1, [pc, #172]	; (8001a80 <HAL_RCC_OscConfig+0x270>)
 80019d2:	4313      	orrs	r3, r2
 80019d4:	604b      	str	r3, [r1, #4]
 80019d6:	e01a      	b.n	8001a0e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80019d8:	4b29      	ldr	r3, [pc, #164]	; (8001a80 <HAL_RCC_OscConfig+0x270>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a28      	ldr	r2, [pc, #160]	; (8001a80 <HAL_RCC_OscConfig+0x270>)
 80019de:	f023 0301 	bic.w	r3, r3, #1
 80019e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019e4:	f7ff fb90 	bl	8001108 <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019ec:	f7ff fb8c 	bl	8001108 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e31a      	b.n	8002034 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019fe:	4b20      	ldr	r3, [pc, #128]	; (8001a80 <HAL_RCC_OscConfig+0x270>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1f0      	bne.n	80019ec <HAL_RCC_OscConfig+0x1dc>
 8001a0a:	e000      	b.n	8001a0e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a0c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d073      	beq.n	8001b02 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	2b08      	cmp	r3, #8
 8001a1e:	d005      	beq.n	8001a2c <HAL_RCC_OscConfig+0x21c>
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	2b0c      	cmp	r3, #12
 8001a24:	d10e      	bne.n	8001a44 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	2b03      	cmp	r3, #3
 8001a2a:	d10b      	bne.n	8001a44 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a2c:	4b14      	ldr	r3, [pc, #80]	; (8001a80 <HAL_RCC_OscConfig+0x270>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d063      	beq.n	8001b00 <HAL_RCC_OscConfig+0x2f0>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d15f      	bne.n	8001b00 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e2f7      	b.n	8002034 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a4c:	d106      	bne.n	8001a5c <HAL_RCC_OscConfig+0x24c>
 8001a4e:	4b0c      	ldr	r3, [pc, #48]	; (8001a80 <HAL_RCC_OscConfig+0x270>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a0b      	ldr	r2, [pc, #44]	; (8001a80 <HAL_RCC_OscConfig+0x270>)
 8001a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a58:	6013      	str	r3, [r2, #0]
 8001a5a:	e025      	b.n	8001aa8 <HAL_RCC_OscConfig+0x298>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a64:	d114      	bne.n	8001a90 <HAL_RCC_OscConfig+0x280>
 8001a66:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <HAL_RCC_OscConfig+0x270>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a05      	ldr	r2, [pc, #20]	; (8001a80 <HAL_RCC_OscConfig+0x270>)
 8001a6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a70:	6013      	str	r3, [r2, #0]
 8001a72:	4b03      	ldr	r3, [pc, #12]	; (8001a80 <HAL_RCC_OscConfig+0x270>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a02      	ldr	r2, [pc, #8]	; (8001a80 <HAL_RCC_OscConfig+0x270>)
 8001a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a7c:	6013      	str	r3, [r2, #0]
 8001a7e:	e013      	b.n	8001aa8 <HAL_RCC_OscConfig+0x298>
 8001a80:	40021000 	.word	0x40021000
 8001a84:	080058dc 	.word	0x080058dc
 8001a88:	20000000 	.word	0x20000000
 8001a8c:	20000004 	.word	0x20000004
 8001a90:	4ba0      	ldr	r3, [pc, #640]	; (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a9f      	ldr	r2, [pc, #636]	; (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001a96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a9a:	6013      	str	r3, [r2, #0]
 8001a9c:	4b9d      	ldr	r3, [pc, #628]	; (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a9c      	ldr	r2, [pc, #624]	; (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001aa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d013      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab0:	f7ff fb2a 	bl	8001108 <HAL_GetTick>
 8001ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ab6:	e008      	b.n	8001aca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ab8:	f7ff fb26 	bl	8001108 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b64      	cmp	r3, #100	; 0x64
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e2b4      	b.n	8002034 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001aca:	4b92      	ldr	r3, [pc, #584]	; (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d0f0      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x2a8>
 8001ad6:	e014      	b.n	8001b02 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad8:	f7ff fb16 	bl	8001108 <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ae0:	f7ff fb12 	bl	8001108 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b64      	cmp	r3, #100	; 0x64
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e2a0      	b.n	8002034 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001af2:	4b88      	ldr	r3, [pc, #544]	; (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1f0      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x2d0>
 8001afe:	e000      	b.n	8001b02 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d060      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	2b04      	cmp	r3, #4
 8001b12:	d005      	beq.n	8001b20 <HAL_RCC_OscConfig+0x310>
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	2b0c      	cmp	r3, #12
 8001b18:	d119      	bne.n	8001b4e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d116      	bne.n	8001b4e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b20:	4b7c      	ldr	r3, [pc, #496]	; (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d005      	beq.n	8001b38 <HAL_RCC_OscConfig+0x328>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d101      	bne.n	8001b38 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e27d      	b.n	8002034 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b38:	4b76      	ldr	r3, [pc, #472]	; (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	061b      	lsls	r3, r3, #24
 8001b46:	4973      	ldr	r1, [pc, #460]	; (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b4c:	e040      	b.n	8001bd0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d023      	beq.n	8001b9e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b56:	4b6f      	ldr	r3, [pc, #444]	; (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a6e      	ldr	r2, [pc, #440]	; (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b62:	f7ff fad1 	bl	8001108 <HAL_GetTick>
 8001b66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b68:	e008      	b.n	8001b7c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b6a:	f7ff facd 	bl	8001108 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e25b      	b.n	8002034 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b7c:	4b65      	ldr	r3, [pc, #404]	; (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d0f0      	beq.n	8001b6a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b88:	4b62      	ldr	r3, [pc, #392]	; (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	061b      	lsls	r3, r3, #24
 8001b96:	495f      	ldr	r1, [pc, #380]	; (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	604b      	str	r3, [r1, #4]
 8001b9c:	e018      	b.n	8001bd0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b9e:	4b5d      	ldr	r3, [pc, #372]	; (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a5c      	ldr	r2, [pc, #368]	; (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001ba4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ba8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001baa:	f7ff faad 	bl	8001108 <HAL_GetTick>
 8001bae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bb0:	e008      	b.n	8001bc4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bb2:	f7ff faa9 	bl	8001108 <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e237      	b.n	8002034 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bc4:	4b53      	ldr	r3, [pc, #332]	; (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1f0      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0308 	and.w	r3, r3, #8
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d03c      	beq.n	8001c56 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	695b      	ldr	r3, [r3, #20]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d01c      	beq.n	8001c1e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001be4:	4b4b      	ldr	r3, [pc, #300]	; (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001be6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bea:	4a4a      	ldr	r2, [pc, #296]	; (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf4:	f7ff fa88 	bl	8001108 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bfc:	f7ff fa84 	bl	8001108 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e212      	b.n	8002034 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c0e:	4b41      	ldr	r3, [pc, #260]	; (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001c10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d0ef      	beq.n	8001bfc <HAL_RCC_OscConfig+0x3ec>
 8001c1c:	e01b      	b.n	8001c56 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c1e:	4b3d      	ldr	r3, [pc, #244]	; (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001c20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c24:	4a3b      	ldr	r2, [pc, #236]	; (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001c26:	f023 0301 	bic.w	r3, r3, #1
 8001c2a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c2e:	f7ff fa6b 	bl	8001108 <HAL_GetTick>
 8001c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c34:	e008      	b.n	8001c48 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c36:	f7ff fa67 	bl	8001108 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e1f5      	b.n	8002034 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c48:	4b32      	ldr	r3, [pc, #200]	; (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001c4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1ef      	bne.n	8001c36 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0304 	and.w	r3, r3, #4
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f000 80a6 	beq.w	8001db0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c64:	2300      	movs	r3, #0
 8001c66:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c68:	4b2a      	ldr	r3, [pc, #168]	; (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d10d      	bne.n	8001c90 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c74:	4b27      	ldr	r3, [pc, #156]	; (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c78:	4a26      	ldr	r2, [pc, #152]	; (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001c7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c7e:	6593      	str	r3, [r2, #88]	; 0x58
 8001c80:	4b24      	ldr	r3, [pc, #144]	; (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c88:	60bb      	str	r3, [r7, #8]
 8001c8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c90:	4b21      	ldr	r3, [pc, #132]	; (8001d18 <HAL_RCC_OscConfig+0x508>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d118      	bne.n	8001cce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c9c:	4b1e      	ldr	r3, [pc, #120]	; (8001d18 <HAL_RCC_OscConfig+0x508>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a1d      	ldr	r2, [pc, #116]	; (8001d18 <HAL_RCC_OscConfig+0x508>)
 8001ca2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ca6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ca8:	f7ff fa2e 	bl	8001108 <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cb0:	f7ff fa2a 	bl	8001108 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e1b8      	b.n	8002034 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cc2:	4b15      	ldr	r3, [pc, #84]	; (8001d18 <HAL_RCC_OscConfig+0x508>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d0f0      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d108      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x4d8>
 8001cd6:	4b0f      	ldr	r3, [pc, #60]	; (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cdc:	4a0d      	ldr	r2, [pc, #52]	; (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001cde:	f043 0301 	orr.w	r3, r3, #1
 8001ce2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ce6:	e029      	b.n	8001d3c <HAL_RCC_OscConfig+0x52c>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	2b05      	cmp	r3, #5
 8001cee:	d115      	bne.n	8001d1c <HAL_RCC_OscConfig+0x50c>
 8001cf0:	4b08      	ldr	r3, [pc, #32]	; (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf6:	4a07      	ldr	r2, [pc, #28]	; (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001cf8:	f043 0304 	orr.w	r3, r3, #4
 8001cfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d00:	4b04      	ldr	r3, [pc, #16]	; (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d06:	4a03      	ldr	r2, [pc, #12]	; (8001d14 <HAL_RCC_OscConfig+0x504>)
 8001d08:	f043 0301 	orr.w	r3, r3, #1
 8001d0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d10:	e014      	b.n	8001d3c <HAL_RCC_OscConfig+0x52c>
 8001d12:	bf00      	nop
 8001d14:	40021000 	.word	0x40021000
 8001d18:	40007000 	.word	0x40007000
 8001d1c:	4b9d      	ldr	r3, [pc, #628]	; (8001f94 <HAL_RCC_OscConfig+0x784>)
 8001d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d22:	4a9c      	ldr	r2, [pc, #624]	; (8001f94 <HAL_RCC_OscConfig+0x784>)
 8001d24:	f023 0301 	bic.w	r3, r3, #1
 8001d28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d2c:	4b99      	ldr	r3, [pc, #612]	; (8001f94 <HAL_RCC_OscConfig+0x784>)
 8001d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d32:	4a98      	ldr	r2, [pc, #608]	; (8001f94 <HAL_RCC_OscConfig+0x784>)
 8001d34:	f023 0304 	bic.w	r3, r3, #4
 8001d38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d016      	beq.n	8001d72 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d44:	f7ff f9e0 	bl	8001108 <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d4a:	e00a      	b.n	8001d62 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d4c:	f7ff f9dc 	bl	8001108 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e168      	b.n	8002034 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d62:	4b8c      	ldr	r3, [pc, #560]	; (8001f94 <HAL_RCC_OscConfig+0x784>)
 8001d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d0ed      	beq.n	8001d4c <HAL_RCC_OscConfig+0x53c>
 8001d70:	e015      	b.n	8001d9e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d72:	f7ff f9c9 	bl	8001108 <HAL_GetTick>
 8001d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d78:	e00a      	b.n	8001d90 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d7a:	f7ff f9c5 	bl	8001108 <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e151      	b.n	8002034 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d90:	4b80      	ldr	r3, [pc, #512]	; (8001f94 <HAL_RCC_OscConfig+0x784>)
 8001d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1ed      	bne.n	8001d7a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d9e:	7ffb      	ldrb	r3, [r7, #31]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d105      	bne.n	8001db0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001da4:	4b7b      	ldr	r3, [pc, #492]	; (8001f94 <HAL_RCC_OscConfig+0x784>)
 8001da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da8:	4a7a      	ldr	r2, [pc, #488]	; (8001f94 <HAL_RCC_OscConfig+0x784>)
 8001daa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0320 	and.w	r3, r3, #32
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d03c      	beq.n	8001e36 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d01c      	beq.n	8001dfe <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001dc4:	4b73      	ldr	r3, [pc, #460]	; (8001f94 <HAL_RCC_OscConfig+0x784>)
 8001dc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001dca:	4a72      	ldr	r2, [pc, #456]	; (8001f94 <HAL_RCC_OscConfig+0x784>)
 8001dcc:	f043 0301 	orr.w	r3, r3, #1
 8001dd0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd4:	f7ff f998 	bl	8001108 <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ddc:	f7ff f994 	bl	8001108 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e122      	b.n	8002034 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001dee:	4b69      	ldr	r3, [pc, #420]	; (8001f94 <HAL_RCC_OscConfig+0x784>)
 8001df0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d0ef      	beq.n	8001ddc <HAL_RCC_OscConfig+0x5cc>
 8001dfc:	e01b      	b.n	8001e36 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001dfe:	4b65      	ldr	r3, [pc, #404]	; (8001f94 <HAL_RCC_OscConfig+0x784>)
 8001e00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e04:	4a63      	ldr	r2, [pc, #396]	; (8001f94 <HAL_RCC_OscConfig+0x784>)
 8001e06:	f023 0301 	bic.w	r3, r3, #1
 8001e0a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e0e:	f7ff f97b 	bl	8001108 <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e14:	e008      	b.n	8001e28 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e16:	f7ff f977 	bl	8001108 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e105      	b.n	8002034 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e28:	4b5a      	ldr	r3, [pc, #360]	; (8001f94 <HAL_RCC_OscConfig+0x784>)
 8001e2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1ef      	bne.n	8001e16 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f000 80f9 	beq.w	8002032 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	f040 80cf 	bne.w	8001fe8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e4a:	4b52      	ldr	r3, [pc, #328]	; (8001f94 <HAL_RCC_OscConfig+0x784>)
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	f003 0203 	and.w	r2, r3, #3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d12c      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d123      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e7a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d11b      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e8a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d113      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e9a:	085b      	lsrs	r3, r3, #1
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d109      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	085b      	lsrs	r3, r3, #1
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d071      	beq.n	8001f9c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	2b0c      	cmp	r3, #12
 8001ebc:	d068      	beq.n	8001f90 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ebe:	4b35      	ldr	r3, [pc, #212]	; (8001f94 <HAL_RCC_OscConfig+0x784>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d105      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001eca:	4b32      	ldr	r3, [pc, #200]	; (8001f94 <HAL_RCC_OscConfig+0x784>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e0ac      	b.n	8002034 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001eda:	4b2e      	ldr	r3, [pc, #184]	; (8001f94 <HAL_RCC_OscConfig+0x784>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a2d      	ldr	r2, [pc, #180]	; (8001f94 <HAL_RCC_OscConfig+0x784>)
 8001ee0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ee4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ee6:	f7ff f90f 	bl	8001108 <HAL_GetTick>
 8001eea:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eec:	e008      	b.n	8001f00 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eee:	f7ff f90b 	bl	8001108 <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d901      	bls.n	8001f00 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e099      	b.n	8002034 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f00:	4b24      	ldr	r3, [pc, #144]	; (8001f94 <HAL_RCC_OscConfig+0x784>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d1f0      	bne.n	8001eee <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f0c:	4b21      	ldr	r3, [pc, #132]	; (8001f94 <HAL_RCC_OscConfig+0x784>)
 8001f0e:	68da      	ldr	r2, [r3, #12]
 8001f10:	4b21      	ldr	r3, [pc, #132]	; (8001f98 <HAL_RCC_OscConfig+0x788>)
 8001f12:	4013      	ands	r3, r2
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f1c:	3a01      	subs	r2, #1
 8001f1e:	0112      	lsls	r2, r2, #4
 8001f20:	4311      	orrs	r1, r2
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f26:	0212      	lsls	r2, r2, #8
 8001f28:	4311      	orrs	r1, r2
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f2e:	0852      	lsrs	r2, r2, #1
 8001f30:	3a01      	subs	r2, #1
 8001f32:	0552      	lsls	r2, r2, #21
 8001f34:	4311      	orrs	r1, r2
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f3a:	0852      	lsrs	r2, r2, #1
 8001f3c:	3a01      	subs	r2, #1
 8001f3e:	0652      	lsls	r2, r2, #25
 8001f40:	4311      	orrs	r1, r2
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f46:	06d2      	lsls	r2, r2, #27
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	4912      	ldr	r1, [pc, #72]	; (8001f94 <HAL_RCC_OscConfig+0x784>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001f50:	4b10      	ldr	r3, [pc, #64]	; (8001f94 <HAL_RCC_OscConfig+0x784>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a0f      	ldr	r2, [pc, #60]	; (8001f94 <HAL_RCC_OscConfig+0x784>)
 8001f56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f5a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f5c:	4b0d      	ldr	r3, [pc, #52]	; (8001f94 <HAL_RCC_OscConfig+0x784>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	4a0c      	ldr	r2, [pc, #48]	; (8001f94 <HAL_RCC_OscConfig+0x784>)
 8001f62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f66:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f68:	f7ff f8ce 	bl	8001108 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f70:	f7ff f8ca 	bl	8001108 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e058      	b.n	8002034 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f82:	4b04      	ldr	r3, [pc, #16]	; (8001f94 <HAL_RCC_OscConfig+0x784>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d0f0      	beq.n	8001f70 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f8e:	e050      	b.n	8002032 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e04f      	b.n	8002034 <HAL_RCC_OscConfig+0x824>
 8001f94:	40021000 	.word	0x40021000
 8001f98:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f9c:	4b27      	ldr	r3, [pc, #156]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d144      	bne.n	8002032 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001fa8:	4b24      	ldr	r3, [pc, #144]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a23      	ldr	r2, [pc, #140]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001fae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fb2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fb4:	4b21      	ldr	r3, [pc, #132]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	4a20      	ldr	r2, [pc, #128]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001fba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fbe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001fc0:	f7ff f8a2 	bl	8001108 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc8:	f7ff f89e 	bl	8001108 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e02c      	b.n	8002034 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fda:	4b18      	ldr	r3, [pc, #96]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d0f0      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x7b8>
 8001fe6:	e024      	b.n	8002032 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	2b0c      	cmp	r3, #12
 8001fec:	d01f      	beq.n	800202e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fee:	4b13      	ldr	r3, [pc, #76]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a12      	ldr	r2, [pc, #72]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001ff4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ff8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ffa:	f7ff f885 	bl	8001108 <HAL_GetTick>
 8001ffe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002000:	e008      	b.n	8002014 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002002:	f7ff f881 	bl	8001108 <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e00f      	b.n	8002034 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002014:	4b09      	ldr	r3, [pc, #36]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d1f0      	bne.n	8002002 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002020:	4b06      	ldr	r3, [pc, #24]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8002022:	68da      	ldr	r2, [r3, #12]
 8002024:	4905      	ldr	r1, [pc, #20]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8002026:	4b06      	ldr	r3, [pc, #24]	; (8002040 <HAL_RCC_OscConfig+0x830>)
 8002028:	4013      	ands	r3, r2
 800202a:	60cb      	str	r3, [r1, #12]
 800202c:	e001      	b.n	8002032 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e000      	b.n	8002034 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3720      	adds	r7, #32
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	40021000 	.word	0x40021000
 8002040:	feeefffc 	.word	0xfeeefffc

08002044 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800204e:	2300      	movs	r3, #0
 8002050:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d101      	bne.n	800205c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e11d      	b.n	8002298 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800205c:	4b90      	ldr	r3, [pc, #576]	; (80022a0 <HAL_RCC_ClockConfig+0x25c>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 030f 	and.w	r3, r3, #15
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	429a      	cmp	r2, r3
 8002068:	d910      	bls.n	800208c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800206a:	4b8d      	ldr	r3, [pc, #564]	; (80022a0 <HAL_RCC_ClockConfig+0x25c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f023 020f 	bic.w	r2, r3, #15
 8002072:	498b      	ldr	r1, [pc, #556]	; (80022a0 <HAL_RCC_ClockConfig+0x25c>)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	4313      	orrs	r3, r2
 8002078:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800207a:	4b89      	ldr	r3, [pc, #548]	; (80022a0 <HAL_RCC_ClockConfig+0x25c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 030f 	and.w	r3, r3, #15
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	429a      	cmp	r2, r3
 8002086:	d001      	beq.n	800208c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e105      	b.n	8002298 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d010      	beq.n	80020ba <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	4b81      	ldr	r3, [pc, #516]	; (80022a4 <HAL_RCC_ClockConfig+0x260>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d908      	bls.n	80020ba <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020a8:	4b7e      	ldr	r3, [pc, #504]	; (80022a4 <HAL_RCC_ClockConfig+0x260>)
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	497b      	ldr	r1, [pc, #492]	; (80022a4 <HAL_RCC_ClockConfig+0x260>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d079      	beq.n	80021ba <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	2b03      	cmp	r3, #3
 80020cc:	d11e      	bne.n	800210c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020ce:	4b75      	ldr	r3, [pc, #468]	; (80022a4 <HAL_RCC_ClockConfig+0x260>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e0dc      	b.n	8002298 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80020de:	f000 fa09 	bl	80024f4 <RCC_GetSysClockFreqFromPLLSource>
 80020e2:	4603      	mov	r3, r0
 80020e4:	4a70      	ldr	r2, [pc, #448]	; (80022a8 <HAL_RCC_ClockConfig+0x264>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d946      	bls.n	8002178 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80020ea:	4b6e      	ldr	r3, [pc, #440]	; (80022a4 <HAL_RCC_ClockConfig+0x260>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d140      	bne.n	8002178 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80020f6:	4b6b      	ldr	r3, [pc, #428]	; (80022a4 <HAL_RCC_ClockConfig+0x260>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020fe:	4a69      	ldr	r2, [pc, #420]	; (80022a4 <HAL_RCC_ClockConfig+0x260>)
 8002100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002104:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002106:	2380      	movs	r3, #128	; 0x80
 8002108:	617b      	str	r3, [r7, #20]
 800210a:	e035      	b.n	8002178 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	2b02      	cmp	r3, #2
 8002112:	d107      	bne.n	8002124 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002114:	4b63      	ldr	r3, [pc, #396]	; (80022a4 <HAL_RCC_ClockConfig+0x260>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d115      	bne.n	800214c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e0b9      	b.n	8002298 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d107      	bne.n	800213c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800212c:	4b5d      	ldr	r3, [pc, #372]	; (80022a4 <HAL_RCC_ClockConfig+0x260>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d109      	bne.n	800214c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e0ad      	b.n	8002298 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800213c:	4b59      	ldr	r3, [pc, #356]	; (80022a4 <HAL_RCC_ClockConfig+0x260>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002144:	2b00      	cmp	r3, #0
 8002146:	d101      	bne.n	800214c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e0a5      	b.n	8002298 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800214c:	f000 f8b4 	bl	80022b8 <HAL_RCC_GetSysClockFreq>
 8002150:	4603      	mov	r3, r0
 8002152:	4a55      	ldr	r2, [pc, #340]	; (80022a8 <HAL_RCC_ClockConfig+0x264>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d90f      	bls.n	8002178 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002158:	4b52      	ldr	r3, [pc, #328]	; (80022a4 <HAL_RCC_ClockConfig+0x260>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d109      	bne.n	8002178 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002164:	4b4f      	ldr	r3, [pc, #316]	; (80022a4 <HAL_RCC_ClockConfig+0x260>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800216c:	4a4d      	ldr	r2, [pc, #308]	; (80022a4 <HAL_RCC_ClockConfig+0x260>)
 800216e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002172:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002174:	2380      	movs	r3, #128	; 0x80
 8002176:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002178:	4b4a      	ldr	r3, [pc, #296]	; (80022a4 <HAL_RCC_ClockConfig+0x260>)
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f023 0203 	bic.w	r2, r3, #3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	4947      	ldr	r1, [pc, #284]	; (80022a4 <HAL_RCC_ClockConfig+0x260>)
 8002186:	4313      	orrs	r3, r2
 8002188:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800218a:	f7fe ffbd 	bl	8001108 <HAL_GetTick>
 800218e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002190:	e00a      	b.n	80021a8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002192:	f7fe ffb9 	bl	8001108 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e077      	b.n	8002298 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021a8:	4b3e      	ldr	r3, [pc, #248]	; (80022a4 <HAL_RCC_ClockConfig+0x260>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f003 020c 	and.w	r2, r3, #12
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d1eb      	bne.n	8002192 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	2b80      	cmp	r3, #128	; 0x80
 80021be:	d105      	bne.n	80021cc <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80021c0:	4b38      	ldr	r3, [pc, #224]	; (80022a4 <HAL_RCC_ClockConfig+0x260>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	4a37      	ldr	r2, [pc, #220]	; (80022a4 <HAL_RCC_ClockConfig+0x260>)
 80021c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021ca:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d010      	beq.n	80021fa <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689a      	ldr	r2, [r3, #8]
 80021dc:	4b31      	ldr	r3, [pc, #196]	; (80022a4 <HAL_RCC_ClockConfig+0x260>)
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d208      	bcs.n	80021fa <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021e8:	4b2e      	ldr	r3, [pc, #184]	; (80022a4 <HAL_RCC_ClockConfig+0x260>)
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	492b      	ldr	r1, [pc, #172]	; (80022a4 <HAL_RCC_ClockConfig+0x260>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021fa:	4b29      	ldr	r3, [pc, #164]	; (80022a0 <HAL_RCC_ClockConfig+0x25c>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 030f 	and.w	r3, r3, #15
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	429a      	cmp	r2, r3
 8002206:	d210      	bcs.n	800222a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002208:	4b25      	ldr	r3, [pc, #148]	; (80022a0 <HAL_RCC_ClockConfig+0x25c>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f023 020f 	bic.w	r2, r3, #15
 8002210:	4923      	ldr	r1, [pc, #140]	; (80022a0 <HAL_RCC_ClockConfig+0x25c>)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	4313      	orrs	r3, r2
 8002216:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002218:	4b21      	ldr	r3, [pc, #132]	; (80022a0 <HAL_RCC_ClockConfig+0x25c>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 030f 	and.w	r3, r3, #15
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	429a      	cmp	r2, r3
 8002224:	d001      	beq.n	800222a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e036      	b.n	8002298 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0304 	and.w	r3, r3, #4
 8002232:	2b00      	cmp	r3, #0
 8002234:	d008      	beq.n	8002248 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002236:	4b1b      	ldr	r3, [pc, #108]	; (80022a4 <HAL_RCC_ClockConfig+0x260>)
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	4918      	ldr	r1, [pc, #96]	; (80022a4 <HAL_RCC_ClockConfig+0x260>)
 8002244:	4313      	orrs	r3, r2
 8002246:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0308 	and.w	r3, r3, #8
 8002250:	2b00      	cmp	r3, #0
 8002252:	d009      	beq.n	8002268 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002254:	4b13      	ldr	r3, [pc, #76]	; (80022a4 <HAL_RCC_ClockConfig+0x260>)
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	4910      	ldr	r1, [pc, #64]	; (80022a4 <HAL_RCC_ClockConfig+0x260>)
 8002264:	4313      	orrs	r3, r2
 8002266:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002268:	f000 f826 	bl	80022b8 <HAL_RCC_GetSysClockFreq>
 800226c:	4602      	mov	r2, r0
 800226e:	4b0d      	ldr	r3, [pc, #52]	; (80022a4 <HAL_RCC_ClockConfig+0x260>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	091b      	lsrs	r3, r3, #4
 8002274:	f003 030f 	and.w	r3, r3, #15
 8002278:	490c      	ldr	r1, [pc, #48]	; (80022ac <HAL_RCC_ClockConfig+0x268>)
 800227a:	5ccb      	ldrb	r3, [r1, r3]
 800227c:	f003 031f 	and.w	r3, r3, #31
 8002280:	fa22 f303 	lsr.w	r3, r2, r3
 8002284:	4a0a      	ldr	r2, [pc, #40]	; (80022b0 <HAL_RCC_ClockConfig+0x26c>)
 8002286:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002288:	4b0a      	ldr	r3, [pc, #40]	; (80022b4 <HAL_RCC_ClockConfig+0x270>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4618      	mov	r0, r3
 800228e:	f7fe feeb 	bl	8001068 <HAL_InitTick>
 8002292:	4603      	mov	r3, r0
 8002294:	73fb      	strb	r3, [r7, #15]

  return status;
 8002296:	7bfb      	ldrb	r3, [r7, #15]
}
 8002298:	4618      	mov	r0, r3
 800229a:	3718      	adds	r7, #24
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40022000 	.word	0x40022000
 80022a4:	40021000 	.word	0x40021000
 80022a8:	04c4b400 	.word	0x04c4b400
 80022ac:	080058dc 	.word	0x080058dc
 80022b0:	20000000 	.word	0x20000000
 80022b4:	20000004 	.word	0x20000004

080022b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b089      	sub	sp, #36	; 0x24
 80022bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80022be:	2300      	movs	r3, #0
 80022c0:	61fb      	str	r3, [r7, #28]
 80022c2:	2300      	movs	r3, #0
 80022c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022c6:	4b3e      	ldr	r3, [pc, #248]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f003 030c 	and.w	r3, r3, #12
 80022ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022d0:	4b3b      	ldr	r3, [pc, #236]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	f003 0303 	and.w	r3, r3, #3
 80022d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d005      	beq.n	80022ec <HAL_RCC_GetSysClockFreq+0x34>
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	2b0c      	cmp	r3, #12
 80022e4:	d121      	bne.n	800232a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d11e      	bne.n	800232a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80022ec:	4b34      	ldr	r3, [pc, #208]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0308 	and.w	r3, r3, #8
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d107      	bne.n	8002308 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80022f8:	4b31      	ldr	r3, [pc, #196]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80022fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022fe:	0a1b      	lsrs	r3, r3, #8
 8002300:	f003 030f 	and.w	r3, r3, #15
 8002304:	61fb      	str	r3, [r7, #28]
 8002306:	e005      	b.n	8002314 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002308:	4b2d      	ldr	r3, [pc, #180]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	091b      	lsrs	r3, r3, #4
 800230e:	f003 030f 	and.w	r3, r3, #15
 8002312:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002314:	4a2b      	ldr	r2, [pc, #172]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800231c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d10d      	bne.n	8002340 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002328:	e00a      	b.n	8002340 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	2b04      	cmp	r3, #4
 800232e:	d102      	bne.n	8002336 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002330:	4b25      	ldr	r3, [pc, #148]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002332:	61bb      	str	r3, [r7, #24]
 8002334:	e004      	b.n	8002340 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	2b08      	cmp	r3, #8
 800233a:	d101      	bne.n	8002340 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800233c:	4b23      	ldr	r3, [pc, #140]	; (80023cc <HAL_RCC_GetSysClockFreq+0x114>)
 800233e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	2b0c      	cmp	r3, #12
 8002344:	d134      	bne.n	80023b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002346:	4b1e      	ldr	r3, [pc, #120]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	f003 0303 	and.w	r3, r3, #3
 800234e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	2b02      	cmp	r3, #2
 8002354:	d003      	beq.n	800235e <HAL_RCC_GetSysClockFreq+0xa6>
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	2b03      	cmp	r3, #3
 800235a:	d003      	beq.n	8002364 <HAL_RCC_GetSysClockFreq+0xac>
 800235c:	e005      	b.n	800236a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800235e:	4b1a      	ldr	r3, [pc, #104]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002360:	617b      	str	r3, [r7, #20]
      break;
 8002362:	e005      	b.n	8002370 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002364:	4b19      	ldr	r3, [pc, #100]	; (80023cc <HAL_RCC_GetSysClockFreq+0x114>)
 8002366:	617b      	str	r3, [r7, #20]
      break;
 8002368:	e002      	b.n	8002370 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	617b      	str	r3, [r7, #20]
      break;
 800236e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002370:	4b13      	ldr	r3, [pc, #76]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	091b      	lsrs	r3, r3, #4
 8002376:	f003 030f 	and.w	r3, r3, #15
 800237a:	3301      	adds	r3, #1
 800237c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800237e:	4b10      	ldr	r3, [pc, #64]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	0a1b      	lsrs	r3, r3, #8
 8002384:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002388:	697a      	ldr	r2, [r7, #20]
 800238a:	fb03 f202 	mul.w	r2, r3, r2
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	fbb2 f3f3 	udiv	r3, r2, r3
 8002394:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002396:	4b0a      	ldr	r3, [pc, #40]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	0e5b      	lsrs	r3, r3, #25
 800239c:	f003 0303 	and.w	r3, r3, #3
 80023a0:	3301      	adds	r3, #1
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80023b0:	69bb      	ldr	r3, [r7, #24]
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3724      	adds	r7, #36	; 0x24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	40021000 	.word	0x40021000
 80023c4:	080058f4 	.word	0x080058f4
 80023c8:	00f42400 	.word	0x00f42400
 80023cc:	007a1200 	.word	0x007a1200

080023d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023d4:	4b03      	ldr	r3, [pc, #12]	; (80023e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80023d6:	681b      	ldr	r3, [r3, #0]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	20000000 	.word	0x20000000

080023e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80023ec:	f7ff fff0 	bl	80023d0 <HAL_RCC_GetHCLKFreq>
 80023f0:	4602      	mov	r2, r0
 80023f2:	4b06      	ldr	r3, [pc, #24]	; (800240c <HAL_RCC_GetPCLK1Freq+0x24>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	0a1b      	lsrs	r3, r3, #8
 80023f8:	f003 0307 	and.w	r3, r3, #7
 80023fc:	4904      	ldr	r1, [pc, #16]	; (8002410 <HAL_RCC_GetPCLK1Freq+0x28>)
 80023fe:	5ccb      	ldrb	r3, [r1, r3]
 8002400:	f003 031f 	and.w	r3, r3, #31
 8002404:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002408:	4618      	mov	r0, r3
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40021000 	.word	0x40021000
 8002410:	080058ec 	.word	0x080058ec

08002414 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002418:	f7ff ffda 	bl	80023d0 <HAL_RCC_GetHCLKFreq>
 800241c:	4602      	mov	r2, r0
 800241e:	4b06      	ldr	r3, [pc, #24]	; (8002438 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	0adb      	lsrs	r3, r3, #11
 8002424:	f003 0307 	and.w	r3, r3, #7
 8002428:	4904      	ldr	r1, [pc, #16]	; (800243c <HAL_RCC_GetPCLK2Freq+0x28>)
 800242a:	5ccb      	ldrb	r3, [r1, r3]
 800242c:	f003 031f 	and.w	r3, r3, #31
 8002430:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002434:	4618      	mov	r0, r3
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40021000 	.word	0x40021000
 800243c:	080058ec 	.word	0x080058ec

08002440 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002448:	2300      	movs	r3, #0
 800244a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800244c:	4b27      	ldr	r3, [pc, #156]	; (80024ec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800244e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002450:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d003      	beq.n	8002460 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002458:	f7ff f906 	bl	8001668 <HAL_PWREx_GetVoltageRange>
 800245c:	6178      	str	r0, [r7, #20]
 800245e:	e014      	b.n	800248a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002460:	4b22      	ldr	r3, [pc, #136]	; (80024ec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002464:	4a21      	ldr	r2, [pc, #132]	; (80024ec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002466:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800246a:	6593      	str	r3, [r2, #88]	; 0x58
 800246c:	4b1f      	ldr	r3, [pc, #124]	; (80024ec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800246e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002474:	60fb      	str	r3, [r7, #12]
 8002476:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002478:	f7ff f8f6 	bl	8001668 <HAL_PWREx_GetVoltageRange>
 800247c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800247e:	4b1b      	ldr	r3, [pc, #108]	; (80024ec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002482:	4a1a      	ldr	r2, [pc, #104]	; (80024ec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002484:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002488:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002490:	d10b      	bne.n	80024aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2b80      	cmp	r3, #128	; 0x80
 8002496:	d913      	bls.n	80024c0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2ba0      	cmp	r3, #160	; 0xa0
 800249c:	d902      	bls.n	80024a4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800249e:	2302      	movs	r3, #2
 80024a0:	613b      	str	r3, [r7, #16]
 80024a2:	e00d      	b.n	80024c0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80024a4:	2301      	movs	r3, #1
 80024a6:	613b      	str	r3, [r7, #16]
 80024a8:	e00a      	b.n	80024c0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2b7f      	cmp	r3, #127	; 0x7f
 80024ae:	d902      	bls.n	80024b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80024b0:	2302      	movs	r3, #2
 80024b2:	613b      	str	r3, [r7, #16]
 80024b4:	e004      	b.n	80024c0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2b70      	cmp	r3, #112	; 0x70
 80024ba:	d101      	bne.n	80024c0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80024bc:	2301      	movs	r3, #1
 80024be:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80024c0:	4b0b      	ldr	r3, [pc, #44]	; (80024f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f023 020f 	bic.w	r2, r3, #15
 80024c8:	4909      	ldr	r1, [pc, #36]	; (80024f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80024d0:	4b07      	ldr	r3, [pc, #28]	; (80024f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 030f 	and.w	r3, r3, #15
 80024d8:	693a      	ldr	r2, [r7, #16]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d001      	beq.n	80024e2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e000      	b.n	80024e4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3718      	adds	r7, #24
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	40021000 	.word	0x40021000
 80024f0:	40022000 	.word	0x40022000

080024f4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b087      	sub	sp, #28
 80024f8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024fa:	4b2d      	ldr	r3, [pc, #180]	; (80025b0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	f003 0303 	and.w	r3, r3, #3
 8002502:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2b03      	cmp	r3, #3
 8002508:	d00b      	beq.n	8002522 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2b03      	cmp	r3, #3
 800250e:	d825      	bhi.n	800255c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d008      	beq.n	8002528 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2b02      	cmp	r3, #2
 800251a:	d11f      	bne.n	800255c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800251c:	4b25      	ldr	r3, [pc, #148]	; (80025b4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800251e:	613b      	str	r3, [r7, #16]
    break;
 8002520:	e01f      	b.n	8002562 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002522:	4b25      	ldr	r3, [pc, #148]	; (80025b8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002524:	613b      	str	r3, [r7, #16]
    break;
 8002526:	e01c      	b.n	8002562 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002528:	4b21      	ldr	r3, [pc, #132]	; (80025b0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0308 	and.w	r3, r3, #8
 8002530:	2b00      	cmp	r3, #0
 8002532:	d107      	bne.n	8002544 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002534:	4b1e      	ldr	r3, [pc, #120]	; (80025b0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002536:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800253a:	0a1b      	lsrs	r3, r3, #8
 800253c:	f003 030f 	and.w	r3, r3, #15
 8002540:	617b      	str	r3, [r7, #20]
 8002542:	e005      	b.n	8002550 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002544:	4b1a      	ldr	r3, [pc, #104]	; (80025b0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	091b      	lsrs	r3, r3, #4
 800254a:	f003 030f 	and.w	r3, r3, #15
 800254e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002550:	4a1a      	ldr	r2, [pc, #104]	; (80025bc <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002558:	613b      	str	r3, [r7, #16]
    break;
 800255a:	e002      	b.n	8002562 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800255c:	2300      	movs	r3, #0
 800255e:	613b      	str	r3, [r7, #16]
    break;
 8002560:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002562:	4b13      	ldr	r3, [pc, #76]	; (80025b0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	091b      	lsrs	r3, r3, #4
 8002568:	f003 030f 	and.w	r3, r3, #15
 800256c:	3301      	adds	r3, #1
 800256e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002570:	4b0f      	ldr	r3, [pc, #60]	; (80025b0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	0a1b      	lsrs	r3, r3, #8
 8002576:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	fb03 f202 	mul.w	r2, r3, r2
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	fbb2 f3f3 	udiv	r3, r2, r3
 8002586:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002588:	4b09      	ldr	r3, [pc, #36]	; (80025b0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	0e5b      	lsrs	r3, r3, #25
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	3301      	adds	r3, #1
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002598:	693a      	ldr	r2, [r7, #16]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80025a2:	683b      	ldr	r3, [r7, #0]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	371c      	adds	r7, #28
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr
 80025b0:	40021000 	.word	0x40021000
 80025b4:	00f42400 	.word	0x00f42400
 80025b8:	007a1200 	.word	0x007a1200
 80025bc:	080058f4 	.word	0x080058f4

080025c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025c8:	2300      	movs	r3, #0
 80025ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025cc:	2300      	movs	r3, #0
 80025ce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d040      	beq.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025e0:	2b80      	cmp	r3, #128	; 0x80
 80025e2:	d02a      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80025e4:	2b80      	cmp	r3, #128	; 0x80
 80025e6:	d825      	bhi.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80025e8:	2b60      	cmp	r3, #96	; 0x60
 80025ea:	d026      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80025ec:	2b60      	cmp	r3, #96	; 0x60
 80025ee:	d821      	bhi.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80025f0:	2b40      	cmp	r3, #64	; 0x40
 80025f2:	d006      	beq.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80025f4:	2b40      	cmp	r3, #64	; 0x40
 80025f6:	d81d      	bhi.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d009      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80025fc:	2b20      	cmp	r3, #32
 80025fe:	d010      	beq.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002600:	e018      	b.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002602:	4b89      	ldr	r3, [pc, #548]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	4a88      	ldr	r2, [pc, #544]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800260c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800260e:	e015      	b.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	3304      	adds	r3, #4
 8002614:	2100      	movs	r1, #0
 8002616:	4618      	mov	r0, r3
 8002618:	f000 fb02 	bl	8002c20 <RCCEx_PLLSAI1_Config>
 800261c:	4603      	mov	r3, r0
 800261e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002620:	e00c      	b.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	3320      	adds	r3, #32
 8002626:	2100      	movs	r1, #0
 8002628:	4618      	mov	r0, r3
 800262a:	f000 fbed 	bl	8002e08 <RCCEx_PLLSAI2_Config>
 800262e:	4603      	mov	r3, r0
 8002630:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002632:	e003      	b.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	74fb      	strb	r3, [r7, #19]
      break;
 8002638:	e000      	b.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800263a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800263c:	7cfb      	ldrb	r3, [r7, #19]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d10b      	bne.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002642:	4b79      	ldr	r3, [pc, #484]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002644:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002648:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002650:	4975      	ldr	r1, [pc, #468]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002652:	4313      	orrs	r3, r2
 8002654:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002658:	e001      	b.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800265a:	7cfb      	ldrb	r3, [r7, #19]
 800265c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d047      	beq.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800266e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002672:	d030      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002674:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002678:	d82a      	bhi.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800267a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800267e:	d02a      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002680:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002684:	d824      	bhi.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002686:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800268a:	d008      	beq.n	800269e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800268c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002690:	d81e      	bhi.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00a      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002696:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800269a:	d010      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800269c:	e018      	b.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800269e:	4b62      	ldr	r3, [pc, #392]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	4a61      	ldr	r2, [pc, #388]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026a8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026aa:	e015      	b.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	3304      	adds	r3, #4
 80026b0:	2100      	movs	r1, #0
 80026b2:	4618      	mov	r0, r3
 80026b4:	f000 fab4 	bl	8002c20 <RCCEx_PLLSAI1_Config>
 80026b8:	4603      	mov	r3, r0
 80026ba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026bc:	e00c      	b.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	3320      	adds	r3, #32
 80026c2:	2100      	movs	r1, #0
 80026c4:	4618      	mov	r0, r3
 80026c6:	f000 fb9f 	bl	8002e08 <RCCEx_PLLSAI2_Config>
 80026ca:	4603      	mov	r3, r0
 80026cc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026ce:	e003      	b.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	74fb      	strb	r3, [r7, #19]
      break;
 80026d4:	e000      	b.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80026d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026d8:	7cfb      	ldrb	r3, [r7, #19]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10b      	bne.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80026de:	4b52      	ldr	r3, [pc, #328]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80026e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ec:	494e      	ldr	r1, [pc, #312]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80026f4:	e001      	b.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026f6:	7cfb      	ldrb	r3, [r7, #19]
 80026f8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002702:	2b00      	cmp	r3, #0
 8002704:	f000 809f 	beq.w	8002846 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002708:	2300      	movs	r3, #0
 800270a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800270c:	4b46      	ldr	r3, [pc, #280]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800270e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d101      	bne.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002718:	2301      	movs	r3, #1
 800271a:	e000      	b.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800271c:	2300      	movs	r3, #0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00d      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002722:	4b41      	ldr	r3, [pc, #260]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002726:	4a40      	ldr	r2, [pc, #256]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800272c:	6593      	str	r3, [r2, #88]	; 0x58
 800272e:	4b3e      	ldr	r3, [pc, #248]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002736:	60bb      	str	r3, [r7, #8]
 8002738:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800273a:	2301      	movs	r3, #1
 800273c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800273e:	4b3b      	ldr	r3, [pc, #236]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a3a      	ldr	r2, [pc, #232]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002748:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800274a:	f7fe fcdd 	bl	8001108 <HAL_GetTick>
 800274e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002750:	e009      	b.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002752:	f7fe fcd9 	bl	8001108 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d902      	bls.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	74fb      	strb	r3, [r7, #19]
        break;
 8002764:	e005      	b.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002766:	4b31      	ldr	r3, [pc, #196]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800276e:	2b00      	cmp	r3, #0
 8002770:	d0ef      	beq.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8002772:	7cfb      	ldrb	r3, [r7, #19]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d15b      	bne.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002778:	4b2b      	ldr	r3, [pc, #172]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800277a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800277e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002782:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d01f      	beq.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002790:	697a      	ldr	r2, [r7, #20]
 8002792:	429a      	cmp	r2, r3
 8002794:	d019      	beq.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002796:	4b24      	ldr	r3, [pc, #144]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800279c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027a0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027a2:	4b21      	ldr	r3, [pc, #132]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80027a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027a8:	4a1f      	ldr	r2, [pc, #124]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80027aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027b2:	4b1d      	ldr	r3, [pc, #116]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80027b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b8:	4a1b      	ldr	r2, [pc, #108]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80027ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027c2:	4a19      	ldr	r2, [pc, #100]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	f003 0301 	and.w	r3, r3, #1
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d016      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d4:	f7fe fc98 	bl	8001108 <HAL_GetTick>
 80027d8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027da:	e00b      	b.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027dc:	f7fe fc94 	bl	8001108 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d902      	bls.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	74fb      	strb	r3, [r7, #19]
            break;
 80027f2:	e006      	b.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027f4:	4b0c      	ldr	r3, [pc, #48]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80027f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d0ec      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8002802:	7cfb      	ldrb	r3, [r7, #19]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d10c      	bne.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002808:	4b07      	ldr	r3, [pc, #28]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800280a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800280e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002818:	4903      	ldr	r1, [pc, #12]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800281a:	4313      	orrs	r3, r2
 800281c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002820:	e008      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002822:	7cfb      	ldrb	r3, [r7, #19]
 8002824:	74bb      	strb	r3, [r7, #18]
 8002826:	e005      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002828:	40021000 	.word	0x40021000
 800282c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002830:	7cfb      	ldrb	r3, [r7, #19]
 8002832:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002834:	7c7b      	ldrb	r3, [r7, #17]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d105      	bne.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800283a:	4ba0      	ldr	r3, [pc, #640]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800283c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800283e:	4a9f      	ldr	r2, [pc, #636]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002840:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002844:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00a      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002852:	4b9a      	ldr	r3, [pc, #616]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002858:	f023 0203 	bic.w	r2, r3, #3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002860:	4996      	ldr	r1, [pc, #600]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002862:	4313      	orrs	r3, r2
 8002864:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0302 	and.w	r3, r3, #2
 8002870:	2b00      	cmp	r3, #0
 8002872:	d00a      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002874:	4b91      	ldr	r3, [pc, #580]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800287a:	f023 020c 	bic.w	r2, r3, #12
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	498e      	ldr	r1, [pc, #568]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002884:	4313      	orrs	r3, r2
 8002886:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0304 	and.w	r3, r3, #4
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00a      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002896:	4b89      	ldr	r3, [pc, #548]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800289c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a4:	4985      	ldr	r1, [pc, #532]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0308 	and.w	r3, r3, #8
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d00a      	beq.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028b8:	4b80      	ldr	r3, [pc, #512]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028c6:	497d      	ldr	r1, [pc, #500]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0310 	and.w	r3, r3, #16
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00a      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80028da:	4b78      	ldr	r3, [pc, #480]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e8:	4974      	ldr	r1, [pc, #464]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0320 	and.w	r3, r3, #32
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d00a      	beq.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028fc:	4b6f      	ldr	r3, [pc, #444]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002902:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800290a:	496c      	ldr	r1, [pc, #432]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800290c:	4313      	orrs	r3, r2
 800290e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800291a:	2b00      	cmp	r3, #0
 800291c:	d00a      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800291e:	4b67      	ldr	r3, [pc, #412]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002924:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800292c:	4963      	ldr	r1, [pc, #396]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800292e:	4313      	orrs	r3, r2
 8002930:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800293c:	2b00      	cmp	r3, #0
 800293e:	d00a      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002940:	4b5e      	ldr	r3, [pc, #376]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002946:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800294e:	495b      	ldr	r1, [pc, #364]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002950:	4313      	orrs	r3, r2
 8002952:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00a      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002962:	4b56      	ldr	r3, [pc, #344]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002968:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002970:	4952      	ldr	r1, [pc, #328]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002972:	4313      	orrs	r3, r2
 8002974:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00a      	beq.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002984:	4b4d      	ldr	r3, [pc, #308]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800298a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002992:	494a      	ldr	r1, [pc, #296]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002994:	4313      	orrs	r3, r2
 8002996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00a      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029a6:	4b45      	ldr	r3, [pc, #276]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b4:	4941      	ldr	r1, [pc, #260]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00a      	beq.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80029c8:	4b3c      	ldr	r3, [pc, #240]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80029ce:	f023 0203 	bic.w	r2, r3, #3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029d6:	4939      	ldr	r1, [pc, #228]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d028      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029ea:	4b34      	ldr	r3, [pc, #208]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029f8:	4930      	ldr	r1, [pc, #192]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a08:	d106      	bne.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a0a:	4b2c      	ldr	r3, [pc, #176]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	4a2b      	ldr	r2, [pc, #172]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a14:	60d3      	str	r3, [r2, #12]
 8002a16:	e011      	b.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a20:	d10c      	bne.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	3304      	adds	r3, #4
 8002a26:	2101      	movs	r1, #1
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f000 f8f9 	bl	8002c20 <RCCEx_PLLSAI1_Config>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002a32:	7cfb      	ldrb	r3, [r7, #19]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8002a38:	7cfb      	ldrb	r3, [r7, #19]
 8002a3a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d04d      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a50:	d108      	bne.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002a52:	4b1a      	ldr	r3, [pc, #104]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a54:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a58:	4a18      	ldr	r2, [pc, #96]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a5e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002a62:	e012      	b.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8002a64:	4b15      	ldr	r3, [pc, #84]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a6a:	4a14      	ldr	r2, [pc, #80]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a70:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002a74:	4b11      	ldr	r3, [pc, #68]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a82:	490e      	ldr	r1, [pc, #56]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a92:	d106      	bne.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a94:	4b09      	ldr	r3, [pc, #36]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	4a08      	ldr	r2, [pc, #32]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a9e:	60d3      	str	r3, [r2, #12]
 8002aa0:	e020      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002aa6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002aaa:	d109      	bne.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002aac:	4b03      	ldr	r3, [pc, #12]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	4a02      	ldr	r2, [pc, #8]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ab2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ab6:	60d3      	str	r3, [r2, #12]
 8002ab8:	e014      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002aba:	bf00      	nop
 8002abc:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ac4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ac8:	d10c      	bne.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	3304      	adds	r3, #4
 8002ace:	2101      	movs	r1, #1
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f000 f8a5 	bl	8002c20 <RCCEx_PLLSAI1_Config>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ada:	7cfb      	ldrb	r3, [r7, #19]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8002ae0:	7cfb      	ldrb	r3, [r7, #19]
 8002ae2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d028      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002af0:	4b4a      	ldr	r3, [pc, #296]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002afe:	4947      	ldr	r1, [pc, #284]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b0e:	d106      	bne.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b10:	4b42      	ldr	r3, [pc, #264]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	4a41      	ldr	r2, [pc, #260]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b1a:	60d3      	str	r3, [r2, #12]
 8002b1c:	e011      	b.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b22:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b26:	d10c      	bne.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	3304      	adds	r3, #4
 8002b2c:	2101      	movs	r1, #1
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f000 f876 	bl	8002c20 <RCCEx_PLLSAI1_Config>
 8002b34:	4603      	mov	r3, r0
 8002b36:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b38:	7cfb      	ldrb	r3, [r7, #19]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8002b3e:	7cfb      	ldrb	r3, [r7, #19]
 8002b40:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d01e      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b4e:	4b33      	ldr	r3, [pc, #204]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b54:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b5e:	492f      	ldr	r1, [pc, #188]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b70:	d10c      	bne.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	3304      	adds	r3, #4
 8002b76:	2102      	movs	r1, #2
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f000 f851 	bl	8002c20 <RCCEx_PLLSAI1_Config>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b82:	7cfb      	ldrb	r3, [r7, #19]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8002b88:	7cfb      	ldrb	r3, [r7, #19]
 8002b8a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d00b      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002b98:	4b20      	ldr	r3, [pc, #128]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b9e:	f023 0204 	bic.w	r2, r3, #4
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ba8:	491c      	ldr	r1, [pc, #112]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00b      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002bbc:	4b17      	ldr	r3, [pc, #92]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002bc2:	f023 0218 	bic.w	r2, r3, #24
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bcc:	4913      	ldr	r1, [pc, #76]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d017      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002be0:	4b0e      	ldr	r3, [pc, #56]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002be2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002be6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bf0:	490a      	ldr	r1, [pc, #40]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bfe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c02:	d105      	bne.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c04:	4b05      	ldr	r3, [pc, #20]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	4a04      	ldr	r2, [pc, #16]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c0e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002c10:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3718      	adds	r7, #24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	40021000 	.word	0x40021000

08002c20 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c2e:	4b72      	ldr	r3, [pc, #456]	; (8002df8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	f003 0303 	and.w	r3, r3, #3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00e      	beq.n	8002c58 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002c3a:	4b6f      	ldr	r3, [pc, #444]	; (8002df8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	f003 0203 	and.w	r2, r3, #3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d103      	bne.n	8002c52 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
       ||
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d142      	bne.n	8002cd8 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	73fb      	strb	r3, [r7, #15]
 8002c56:	e03f      	b.n	8002cd8 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2b03      	cmp	r3, #3
 8002c5e:	d018      	beq.n	8002c92 <RCCEx_PLLSAI1_Config+0x72>
 8002c60:	2b03      	cmp	r3, #3
 8002c62:	d825      	bhi.n	8002cb0 <RCCEx_PLLSAI1_Config+0x90>
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d002      	beq.n	8002c6e <RCCEx_PLLSAI1_Config+0x4e>
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d009      	beq.n	8002c80 <RCCEx_PLLSAI1_Config+0x60>
 8002c6c:	e020      	b.n	8002cb0 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c6e:	4b62      	ldr	r3, [pc, #392]	; (8002df8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d11d      	bne.n	8002cb6 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c7e:	e01a      	b.n	8002cb6 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c80:	4b5d      	ldr	r3, [pc, #372]	; (8002df8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d116      	bne.n	8002cba <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c90:	e013      	b.n	8002cba <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c92:	4b59      	ldr	r3, [pc, #356]	; (8002df8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d10f      	bne.n	8002cbe <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c9e:	4b56      	ldr	r3, [pc, #344]	; (8002df8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d109      	bne.n	8002cbe <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002cae:	e006      	b.n	8002cbe <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	73fb      	strb	r3, [r7, #15]
      break;
 8002cb4:	e004      	b.n	8002cc0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002cb6:	bf00      	nop
 8002cb8:	e002      	b.n	8002cc0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002cba:	bf00      	nop
 8002cbc:	e000      	b.n	8002cc0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002cbe:	bf00      	nop
    }

    if(status == HAL_OK)
 8002cc0:	7bfb      	ldrb	r3, [r7, #15]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d108      	bne.n	8002cd8 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8002cc6:	4b4c      	ldr	r3, [pc, #304]	; (8002df8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	f023 0203 	bic.w	r2, r3, #3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4949      	ldr	r1, [pc, #292]	; (8002df8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002cd8:	7bfb      	ldrb	r3, [r7, #15]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f040 8086 	bne.w	8002dec <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002ce0:	4b45      	ldr	r3, [pc, #276]	; (8002df8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a44      	ldr	r2, [pc, #272]	; (8002df8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ce6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002cea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cec:	f7fe fa0c 	bl	8001108 <HAL_GetTick>
 8002cf0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002cf2:	e009      	b.n	8002d08 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002cf4:	f7fe fa08 	bl	8001108 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d902      	bls.n	8002d08 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	73fb      	strb	r3, [r7, #15]
        break;
 8002d06:	e005      	b.n	8002d14 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d08:	4b3b      	ldr	r3, [pc, #236]	; (8002df8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1ef      	bne.n	8002cf4 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002d14:	7bfb      	ldrb	r3, [r7, #15]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d168      	bne.n	8002dec <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d113      	bne.n	8002d48 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d20:	4b35      	ldr	r3, [pc, #212]	; (8002df8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d22:	691a      	ldr	r2, [r3, #16]
 8002d24:	4b35      	ldr	r3, [pc, #212]	; (8002dfc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d26:	4013      	ands	r3, r2
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	6892      	ldr	r2, [r2, #8]
 8002d2c:	0211      	lsls	r1, r2, #8
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	68d2      	ldr	r2, [r2, #12]
 8002d32:	06d2      	lsls	r2, r2, #27
 8002d34:	4311      	orrs	r1, r2
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	6852      	ldr	r2, [r2, #4]
 8002d3a:	3a01      	subs	r2, #1
 8002d3c:	0112      	lsls	r2, r2, #4
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	492d      	ldr	r1, [pc, #180]	; (8002df8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	610b      	str	r3, [r1, #16]
 8002d46:	e02d      	b.n	8002da4 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d115      	bne.n	8002d7a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d4e:	4b2a      	ldr	r3, [pc, #168]	; (8002df8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d50:	691a      	ldr	r2, [r3, #16]
 8002d52:	4b2b      	ldr	r3, [pc, #172]	; (8002e00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d54:	4013      	ands	r3, r2
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	6892      	ldr	r2, [r2, #8]
 8002d5a:	0211      	lsls	r1, r2, #8
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	6912      	ldr	r2, [r2, #16]
 8002d60:	0852      	lsrs	r2, r2, #1
 8002d62:	3a01      	subs	r2, #1
 8002d64:	0552      	lsls	r2, r2, #21
 8002d66:	4311      	orrs	r1, r2
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	6852      	ldr	r2, [r2, #4]
 8002d6c:	3a01      	subs	r2, #1
 8002d6e:	0112      	lsls	r2, r2, #4
 8002d70:	430a      	orrs	r2, r1
 8002d72:	4921      	ldr	r1, [pc, #132]	; (8002df8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	610b      	str	r3, [r1, #16]
 8002d78:	e014      	b.n	8002da4 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d7a:	4b1f      	ldr	r3, [pc, #124]	; (8002df8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d7c:	691a      	ldr	r2, [r3, #16]
 8002d7e:	4b21      	ldr	r3, [pc, #132]	; (8002e04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d80:	4013      	ands	r3, r2
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	6892      	ldr	r2, [r2, #8]
 8002d86:	0211      	lsls	r1, r2, #8
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	6952      	ldr	r2, [r2, #20]
 8002d8c:	0852      	lsrs	r2, r2, #1
 8002d8e:	3a01      	subs	r2, #1
 8002d90:	0652      	lsls	r2, r2, #25
 8002d92:	4311      	orrs	r1, r2
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	6852      	ldr	r2, [r2, #4]
 8002d98:	3a01      	subs	r2, #1
 8002d9a:	0112      	lsls	r2, r2, #4
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	4916      	ldr	r1, [pc, #88]	; (8002df8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002da4:	4b14      	ldr	r3, [pc, #80]	; (8002df8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a13      	ldr	r2, [pc, #76]	; (8002df8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002daa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002dae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db0:	f7fe f9aa 	bl	8001108 <HAL_GetTick>
 8002db4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002db6:	e009      	b.n	8002dcc <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002db8:	f7fe f9a6 	bl	8001108 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d902      	bls.n	8002dcc <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	73fb      	strb	r3, [r7, #15]
          break;
 8002dca:	e005      	b.n	8002dd8 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002dcc:	4b0a      	ldr	r3, [pc, #40]	; (8002df8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d0ef      	beq.n	8002db8 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002dd8:	7bfb      	ldrb	r3, [r7, #15]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d106      	bne.n	8002dec <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002dde:	4b06      	ldr	r3, [pc, #24]	; (8002df8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002de0:	691a      	ldr	r2, [r3, #16]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	4904      	ldr	r1, [pc, #16]	; (8002df8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	07ff800f 	.word	0x07ff800f
 8002e00:	ff9f800f 	.word	0xff9f800f
 8002e04:	f9ff800f 	.word	0xf9ff800f

08002e08 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e12:	2300      	movs	r3, #0
 8002e14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e16:	4b72      	ldr	r3, [pc, #456]	; (8002fe0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	f003 0303 	and.w	r3, r3, #3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00e      	beq.n	8002e40 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002e22:	4b6f      	ldr	r3, [pc, #444]	; (8002fe0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	f003 0203 	and.w	r2, r3, #3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d103      	bne.n	8002e3a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
       ||
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d142      	bne.n	8002ec0 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	73fb      	strb	r3, [r7, #15]
 8002e3e:	e03f      	b.n	8002ec0 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2b03      	cmp	r3, #3
 8002e46:	d018      	beq.n	8002e7a <RCCEx_PLLSAI2_Config+0x72>
 8002e48:	2b03      	cmp	r3, #3
 8002e4a:	d825      	bhi.n	8002e98 <RCCEx_PLLSAI2_Config+0x90>
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d002      	beq.n	8002e56 <RCCEx_PLLSAI2_Config+0x4e>
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d009      	beq.n	8002e68 <RCCEx_PLLSAI2_Config+0x60>
 8002e54:	e020      	b.n	8002e98 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e56:	4b62      	ldr	r3, [pc, #392]	; (8002fe0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d11d      	bne.n	8002e9e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e66:	e01a      	b.n	8002e9e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e68:	4b5d      	ldr	r3, [pc, #372]	; (8002fe0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d116      	bne.n	8002ea2 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e78:	e013      	b.n	8002ea2 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e7a:	4b59      	ldr	r3, [pc, #356]	; (8002fe0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10f      	bne.n	8002ea6 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e86:	4b56      	ldr	r3, [pc, #344]	; (8002fe0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d109      	bne.n	8002ea6 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e96:	e006      	b.n	8002ea6 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e9c:	e004      	b.n	8002ea8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002e9e:	bf00      	nop
 8002ea0:	e002      	b.n	8002ea8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002ea2:	bf00      	nop
 8002ea4:	e000      	b.n	8002ea8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002ea6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ea8:	7bfb      	ldrb	r3, [r7, #15]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d108      	bne.n	8002ec0 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8002eae:	4b4c      	ldr	r3, [pc, #304]	; (8002fe0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	f023 0203 	bic.w	r2, r3, #3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4949      	ldr	r1, [pc, #292]	; (8002fe0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002ec0:	7bfb      	ldrb	r3, [r7, #15]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f040 8086 	bne.w	8002fd4 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002ec8:	4b45      	ldr	r3, [pc, #276]	; (8002fe0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a44      	ldr	r2, [pc, #272]	; (8002fe0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ece:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ed2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ed4:	f7fe f918 	bl	8001108 <HAL_GetTick>
 8002ed8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002eda:	e009      	b.n	8002ef0 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002edc:	f7fe f914 	bl	8001108 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d902      	bls.n	8002ef0 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	73fb      	strb	r3, [r7, #15]
        break;
 8002eee:	e005      	b.n	8002efc <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ef0:	4b3b      	ldr	r3, [pc, #236]	; (8002fe0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1ef      	bne.n	8002edc <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002efc:	7bfb      	ldrb	r3, [r7, #15]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d168      	bne.n	8002fd4 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d113      	bne.n	8002f30 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f08:	4b35      	ldr	r3, [pc, #212]	; (8002fe0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f0a:	695a      	ldr	r2, [r3, #20]
 8002f0c:	4b35      	ldr	r3, [pc, #212]	; (8002fe4 <RCCEx_PLLSAI2_Config+0x1dc>)
 8002f0e:	4013      	ands	r3, r2
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	6892      	ldr	r2, [r2, #8]
 8002f14:	0211      	lsls	r1, r2, #8
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	68d2      	ldr	r2, [r2, #12]
 8002f1a:	06d2      	lsls	r2, r2, #27
 8002f1c:	4311      	orrs	r1, r2
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	6852      	ldr	r2, [r2, #4]
 8002f22:	3a01      	subs	r2, #1
 8002f24:	0112      	lsls	r2, r2, #4
 8002f26:	430a      	orrs	r2, r1
 8002f28:	492d      	ldr	r1, [pc, #180]	; (8002fe0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	614b      	str	r3, [r1, #20]
 8002f2e:	e02d      	b.n	8002f8c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d115      	bne.n	8002f62 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f36:	4b2a      	ldr	r3, [pc, #168]	; (8002fe0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f38:	695a      	ldr	r2, [r3, #20]
 8002f3a:	4b2b      	ldr	r3, [pc, #172]	; (8002fe8 <RCCEx_PLLSAI2_Config+0x1e0>)
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	6892      	ldr	r2, [r2, #8]
 8002f42:	0211      	lsls	r1, r2, #8
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	6912      	ldr	r2, [r2, #16]
 8002f48:	0852      	lsrs	r2, r2, #1
 8002f4a:	3a01      	subs	r2, #1
 8002f4c:	0552      	lsls	r2, r2, #21
 8002f4e:	4311      	orrs	r1, r2
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	6852      	ldr	r2, [r2, #4]
 8002f54:	3a01      	subs	r2, #1
 8002f56:	0112      	lsls	r2, r2, #4
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	4921      	ldr	r1, [pc, #132]	; (8002fe0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	614b      	str	r3, [r1, #20]
 8002f60:	e014      	b.n	8002f8c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f62:	4b1f      	ldr	r3, [pc, #124]	; (8002fe0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f64:	695a      	ldr	r2, [r3, #20]
 8002f66:	4b21      	ldr	r3, [pc, #132]	; (8002fec <RCCEx_PLLSAI2_Config+0x1e4>)
 8002f68:	4013      	ands	r3, r2
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	6892      	ldr	r2, [r2, #8]
 8002f6e:	0211      	lsls	r1, r2, #8
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	6952      	ldr	r2, [r2, #20]
 8002f74:	0852      	lsrs	r2, r2, #1
 8002f76:	3a01      	subs	r2, #1
 8002f78:	0652      	lsls	r2, r2, #25
 8002f7a:	4311      	orrs	r1, r2
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	6852      	ldr	r2, [r2, #4]
 8002f80:	3a01      	subs	r2, #1
 8002f82:	0112      	lsls	r2, r2, #4
 8002f84:	430a      	orrs	r2, r1
 8002f86:	4916      	ldr	r1, [pc, #88]	; (8002fe0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002f8c:	4b14      	ldr	r3, [pc, #80]	; (8002fe0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a13      	ldr	r2, [pc, #76]	; (8002fe0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f96:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f98:	f7fe f8b6 	bl	8001108 <HAL_GetTick>
 8002f9c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f9e:	e009      	b.n	8002fb4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002fa0:	f7fe f8b2 	bl	8001108 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d902      	bls.n	8002fb4 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	73fb      	strb	r3, [r7, #15]
          break;
 8002fb2:	e005      	b.n	8002fc0 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002fb4:	4b0a      	ldr	r3, [pc, #40]	; (8002fe0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d0ef      	beq.n	8002fa0 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002fc0:	7bfb      	ldrb	r3, [r7, #15]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d106      	bne.n	8002fd4 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002fc6:	4b06      	ldr	r3, [pc, #24]	; (8002fe0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002fc8:	695a      	ldr	r2, [r3, #20]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	4904      	ldr	r1, [pc, #16]	; (8002fe0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	07ff800f 	.word	0x07ff800f
 8002fe8:	ff9f800f 	.word	0xff9f800f
 8002fec:	f9ff800f 	.word	0xf9ff800f

08002ff0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e049      	b.n	8003096 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d106      	bne.n	800301c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f7fd feda 	bl	8000dd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2202      	movs	r2, #2
 8003020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	3304      	adds	r3, #4
 800302c:	4619      	mov	r1, r3
 800302e:	4610      	mov	r0, r2
 8003030:	f000 f9ee 	bl	8003410 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
	...

080030a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d001      	beq.n	80030b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e04f      	b.n	8003158 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2202      	movs	r2, #2
 80030bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68da      	ldr	r2, [r3, #12]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f042 0201 	orr.w	r2, r2, #1
 80030ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a23      	ldr	r2, [pc, #140]	; (8003164 <HAL_TIM_Base_Start_IT+0xc4>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d01d      	beq.n	8003116 <HAL_TIM_Base_Start_IT+0x76>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030e2:	d018      	beq.n	8003116 <HAL_TIM_Base_Start_IT+0x76>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a1f      	ldr	r2, [pc, #124]	; (8003168 <HAL_TIM_Base_Start_IT+0xc8>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d013      	beq.n	8003116 <HAL_TIM_Base_Start_IT+0x76>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a1e      	ldr	r2, [pc, #120]	; (800316c <HAL_TIM_Base_Start_IT+0xcc>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d00e      	beq.n	8003116 <HAL_TIM_Base_Start_IT+0x76>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a1c      	ldr	r2, [pc, #112]	; (8003170 <HAL_TIM_Base_Start_IT+0xd0>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d009      	beq.n	8003116 <HAL_TIM_Base_Start_IT+0x76>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a1b      	ldr	r2, [pc, #108]	; (8003174 <HAL_TIM_Base_Start_IT+0xd4>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d004      	beq.n	8003116 <HAL_TIM_Base_Start_IT+0x76>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a19      	ldr	r2, [pc, #100]	; (8003178 <HAL_TIM_Base_Start_IT+0xd8>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d115      	bne.n	8003142 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	689a      	ldr	r2, [r3, #8]
 800311c:	4b17      	ldr	r3, [pc, #92]	; (800317c <HAL_TIM_Base_Start_IT+0xdc>)
 800311e:	4013      	ands	r3, r2
 8003120:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2b06      	cmp	r3, #6
 8003126:	d015      	beq.n	8003154 <HAL_TIM_Base_Start_IT+0xb4>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800312e:	d011      	beq.n	8003154 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f042 0201 	orr.w	r2, r2, #1
 800313e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003140:	e008      	b.n	8003154 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f042 0201 	orr.w	r2, r2, #1
 8003150:	601a      	str	r2, [r3, #0]
 8003152:	e000      	b.n	8003156 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003154:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	3714      	adds	r7, #20
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr
 8003164:	40012c00 	.word	0x40012c00
 8003168:	40000400 	.word	0x40000400
 800316c:	40000800 	.word	0x40000800
 8003170:	40000c00 	.word	0x40000c00
 8003174:	40013400 	.word	0x40013400
 8003178:	40014000 	.word	0x40014000
 800317c:	00010007 	.word	0x00010007

08003180 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b02      	cmp	r3, #2
 8003194:	d122      	bne.n	80031dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d11b      	bne.n	80031dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f06f 0202 	mvn.w	r2, #2
 80031ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2201      	movs	r2, #1
 80031b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	f003 0303 	and.w	r3, r3, #3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d003      	beq.n	80031ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 f905 	bl	80033d2 <HAL_TIM_IC_CaptureCallback>
 80031c8:	e005      	b.n	80031d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 f8f7 	bl	80033be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f000 f908 	bl	80033e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	f003 0304 	and.w	r3, r3, #4
 80031e6:	2b04      	cmp	r3, #4
 80031e8:	d122      	bne.n	8003230 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	f003 0304 	and.w	r3, r3, #4
 80031f4:	2b04      	cmp	r3, #4
 80031f6:	d11b      	bne.n	8003230 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f06f 0204 	mvn.w	r2, #4
 8003200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2202      	movs	r2, #2
 8003206:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003212:	2b00      	cmp	r3, #0
 8003214:	d003      	beq.n	800321e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 f8db 	bl	80033d2 <HAL_TIM_IC_CaptureCallback>
 800321c:	e005      	b.n	800322a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 f8cd 	bl	80033be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 f8de 	bl	80033e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	f003 0308 	and.w	r3, r3, #8
 800323a:	2b08      	cmp	r3, #8
 800323c:	d122      	bne.n	8003284 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	f003 0308 	and.w	r3, r3, #8
 8003248:	2b08      	cmp	r3, #8
 800324a:	d11b      	bne.n	8003284 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f06f 0208 	mvn.w	r2, #8
 8003254:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2204      	movs	r2, #4
 800325a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	69db      	ldr	r3, [r3, #28]
 8003262:	f003 0303 	and.w	r3, r3, #3
 8003266:	2b00      	cmp	r3, #0
 8003268:	d003      	beq.n	8003272 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 f8b1 	bl	80033d2 <HAL_TIM_IC_CaptureCallback>
 8003270:	e005      	b.n	800327e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 f8a3 	bl	80033be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f000 f8b4 	bl	80033e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	f003 0310 	and.w	r3, r3, #16
 800328e:	2b10      	cmp	r3, #16
 8003290:	d122      	bne.n	80032d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	f003 0310 	and.w	r3, r3, #16
 800329c:	2b10      	cmp	r3, #16
 800329e:	d11b      	bne.n	80032d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f06f 0210 	mvn.w	r2, #16
 80032a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2208      	movs	r2, #8
 80032ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	69db      	ldr	r3, [r3, #28]
 80032b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d003      	beq.n	80032c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 f887 	bl	80033d2 <HAL_TIM_IC_CaptureCallback>
 80032c4:	e005      	b.n	80032d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 f879 	bl	80033be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 f88a 	bl	80033e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d10e      	bne.n	8003304 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	f003 0301 	and.w	r3, r3, #1
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d107      	bne.n	8003304 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f06f 0201 	mvn.w	r2, #1
 80032fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f7fd fb7c 	bl	80009fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800330e:	2b80      	cmp	r3, #128	; 0x80
 8003310:	d10e      	bne.n	8003330 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800331c:	2b80      	cmp	r3, #128	; 0x80
 800331e:	d107      	bne.n	8003330 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003328:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 f914 	bl	8003558 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800333a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800333e:	d10e      	bne.n	800335e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800334a:	2b80      	cmp	r3, #128	; 0x80
 800334c:	d107      	bne.n	800335e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003356:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f000 f907 	bl	800356c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003368:	2b40      	cmp	r3, #64	; 0x40
 800336a:	d10e      	bne.n	800338a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003376:	2b40      	cmp	r3, #64	; 0x40
 8003378:	d107      	bne.n	800338a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003382:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f000 f838 	bl	80033fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	f003 0320 	and.w	r3, r3, #32
 8003394:	2b20      	cmp	r3, #32
 8003396:	d10e      	bne.n	80033b6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	f003 0320 	and.w	r3, r3, #32
 80033a2:	2b20      	cmp	r3, #32
 80033a4:	d107      	bne.n	80033b6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f06f 0220 	mvn.w	r2, #32
 80033ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 f8c7 	bl	8003544 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033b6:	bf00      	nop
 80033b8:	3708      	adds	r7, #8
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033be:	b480      	push	{r7}
 80033c0:	b083      	sub	sp, #12
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033c6:	bf00      	nop
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr

080033d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033d2:	b480      	push	{r7}
 80033d4:	b083      	sub	sp, #12
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033da:	bf00      	nop
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr

080033e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033e6:	b480      	push	{r7}
 80033e8:	b083      	sub	sp, #12
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033ee:	bf00      	nop
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr

080033fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033fa:	b480      	push	{r7}
 80033fc:	b083      	sub	sp, #12
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003402:	bf00      	nop
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
	...

08003410 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003410:	b480      	push	{r7}
 8003412:	b085      	sub	sp, #20
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a40      	ldr	r2, [pc, #256]	; (8003524 <TIM_Base_SetConfig+0x114>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d013      	beq.n	8003450 <TIM_Base_SetConfig+0x40>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800342e:	d00f      	beq.n	8003450 <TIM_Base_SetConfig+0x40>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a3d      	ldr	r2, [pc, #244]	; (8003528 <TIM_Base_SetConfig+0x118>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d00b      	beq.n	8003450 <TIM_Base_SetConfig+0x40>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a3c      	ldr	r2, [pc, #240]	; (800352c <TIM_Base_SetConfig+0x11c>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d007      	beq.n	8003450 <TIM_Base_SetConfig+0x40>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a3b      	ldr	r2, [pc, #236]	; (8003530 <TIM_Base_SetConfig+0x120>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d003      	beq.n	8003450 <TIM_Base_SetConfig+0x40>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a3a      	ldr	r2, [pc, #232]	; (8003534 <TIM_Base_SetConfig+0x124>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d108      	bne.n	8003462 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003456:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	4313      	orrs	r3, r2
 8003460:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a2f      	ldr	r2, [pc, #188]	; (8003524 <TIM_Base_SetConfig+0x114>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d01f      	beq.n	80034aa <TIM_Base_SetConfig+0x9a>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003470:	d01b      	beq.n	80034aa <TIM_Base_SetConfig+0x9a>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a2c      	ldr	r2, [pc, #176]	; (8003528 <TIM_Base_SetConfig+0x118>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d017      	beq.n	80034aa <TIM_Base_SetConfig+0x9a>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a2b      	ldr	r2, [pc, #172]	; (800352c <TIM_Base_SetConfig+0x11c>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d013      	beq.n	80034aa <TIM_Base_SetConfig+0x9a>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a2a      	ldr	r2, [pc, #168]	; (8003530 <TIM_Base_SetConfig+0x120>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d00f      	beq.n	80034aa <TIM_Base_SetConfig+0x9a>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a29      	ldr	r2, [pc, #164]	; (8003534 <TIM_Base_SetConfig+0x124>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d00b      	beq.n	80034aa <TIM_Base_SetConfig+0x9a>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a28      	ldr	r2, [pc, #160]	; (8003538 <TIM_Base_SetConfig+0x128>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d007      	beq.n	80034aa <TIM_Base_SetConfig+0x9a>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a27      	ldr	r2, [pc, #156]	; (800353c <TIM_Base_SetConfig+0x12c>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d003      	beq.n	80034aa <TIM_Base_SetConfig+0x9a>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a26      	ldr	r2, [pc, #152]	; (8003540 <TIM_Base_SetConfig+0x130>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d108      	bne.n	80034bc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	68fa      	ldr	r2, [r7, #12]
 80034ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	689a      	ldr	r2, [r3, #8]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a10      	ldr	r2, [pc, #64]	; (8003524 <TIM_Base_SetConfig+0x114>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d00f      	beq.n	8003508 <TIM_Base_SetConfig+0xf8>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a12      	ldr	r2, [pc, #72]	; (8003534 <TIM_Base_SetConfig+0x124>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d00b      	beq.n	8003508 <TIM_Base_SetConfig+0xf8>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a11      	ldr	r2, [pc, #68]	; (8003538 <TIM_Base_SetConfig+0x128>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d007      	beq.n	8003508 <TIM_Base_SetConfig+0xf8>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a10      	ldr	r2, [pc, #64]	; (800353c <TIM_Base_SetConfig+0x12c>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d003      	beq.n	8003508 <TIM_Base_SetConfig+0xf8>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a0f      	ldr	r2, [pc, #60]	; (8003540 <TIM_Base_SetConfig+0x130>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d103      	bne.n	8003510 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	691a      	ldr	r2, [r3, #16]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	615a      	str	r2, [r3, #20]
}
 8003516:	bf00      	nop
 8003518:	3714      	adds	r7, #20
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	40012c00 	.word	0x40012c00
 8003528:	40000400 	.word	0x40000400
 800352c:	40000800 	.word	0x40000800
 8003530:	40000c00 	.word	0x40000c00
 8003534:	40013400 	.word	0x40013400
 8003538:	40014000 	.word	0x40014000
 800353c:	40014400 	.word	0x40014400
 8003540:	40014800 	.word	0x40014800

08003544 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e042      	b.n	8003618 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003598:	2b00      	cmp	r3, #0
 800359a:	d106      	bne.n	80035aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f7fd fbb3 	bl	8000d10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2224      	movs	r2, #36	; 0x24
 80035ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 0201 	bic.w	r2, r2, #1
 80035c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f998 	bl	80038f8 <UART_SetConfig>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d101      	bne.n	80035d2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e022      	b.n	8003618 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d002      	beq.n	80035e0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 fc88 	bl	8003ef0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	685a      	ldr	r2, [r3, #4]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689a      	ldr	r2, [r3, #8]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f042 0201 	orr.w	r2, r2, #1
 800360e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 fd0f 	bl	8004034 <UART_CheckIdleState>
 8003616:	4603      	mov	r3, r0
}
 8003618:	4618      	mov	r0, r3
 800361a:	3708      	adds	r7, #8
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b08a      	sub	sp, #40	; 0x28
 8003624:	af02      	add	r7, sp, #8
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	603b      	str	r3, [r7, #0]
 800362c:	4613      	mov	r3, r2
 800362e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003636:	2b20      	cmp	r3, #32
 8003638:	f040 8084 	bne.w	8003744 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d002      	beq.n	8003648 <HAL_UART_Transmit+0x28>
 8003642:	88fb      	ldrh	r3, [r7, #6]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d101      	bne.n	800364c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e07c      	b.n	8003746 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003652:	2b01      	cmp	r3, #1
 8003654:	d101      	bne.n	800365a <HAL_UART_Transmit+0x3a>
 8003656:	2302      	movs	r3, #2
 8003658:	e075      	b.n	8003746 <HAL_UART_Transmit+0x126>
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2201      	movs	r2, #1
 800365e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2221      	movs	r2, #33	; 0x21
 800366e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003672:	f7fd fd49 	bl	8001108 <HAL_GetTick>
 8003676:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	88fa      	ldrh	r2, [r7, #6]
 800367c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	88fa      	ldrh	r2, [r7, #6]
 8003684:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003690:	d108      	bne.n	80036a4 <HAL_UART_Transmit+0x84>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d104      	bne.n	80036a4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800369a:	2300      	movs	r3, #0
 800369c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	61bb      	str	r3, [r7, #24]
 80036a2:	e003      	b.n	80036ac <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036a8:	2300      	movs	r3, #0
 80036aa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80036b4:	e02d      	b.n	8003712 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	9300      	str	r3, [sp, #0]
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	2200      	movs	r2, #0
 80036be:	2180      	movs	r1, #128	; 0x80
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f000 fd02 	bl	80040ca <UART_WaitOnFlagUntilTimeout>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e03a      	b.n	8003746 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10b      	bne.n	80036ee <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	881a      	ldrh	r2, [r3, #0]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036e2:	b292      	uxth	r2, r2
 80036e4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	3302      	adds	r3, #2
 80036ea:	61bb      	str	r3, [r7, #24]
 80036ec:	e008      	b.n	8003700 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	781a      	ldrb	r2, [r3, #0]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	b292      	uxth	r2, r2
 80036f8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	3301      	adds	r3, #1
 80036fe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003706:	b29b      	uxth	r3, r3
 8003708:	3b01      	subs	r3, #1
 800370a:	b29a      	uxth	r2, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003718:	b29b      	uxth	r3, r3
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1cb      	bne.n	80036b6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	9300      	str	r3, [sp, #0]
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	2200      	movs	r2, #0
 8003726:	2140      	movs	r1, #64	; 0x40
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f000 fcce 	bl	80040ca <UART_WaitOnFlagUntilTimeout>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d001      	beq.n	8003738 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e006      	b.n	8003746 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2220      	movs	r2, #32
 800373c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003740:	2300      	movs	r3, #0
 8003742:	e000      	b.n	8003746 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003744:	2302      	movs	r3, #2
  }
}
 8003746:	4618      	mov	r0, r3
 8003748:	3720      	adds	r7, #32
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800374e:	b580      	push	{r7, lr}
 8003750:	b08a      	sub	sp, #40	; 0x28
 8003752:	af02      	add	r7, sp, #8
 8003754:	60f8      	str	r0, [r7, #12]
 8003756:	60b9      	str	r1, [r7, #8]
 8003758:	603b      	str	r3, [r7, #0]
 800375a:	4613      	mov	r3, r2
 800375c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003764:	2b20      	cmp	r3, #32
 8003766:	f040 80c1 	bne.w	80038ec <HAL_UART_Receive+0x19e>
  {
    if ((pData == NULL) || (Size == 0U))
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d002      	beq.n	8003776 <HAL_UART_Receive+0x28>
 8003770:	88fb      	ldrh	r3, [r7, #6]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e0b9      	b.n	80038ee <HAL_UART_Receive+0x1a0>
    }

    __HAL_LOCK(huart);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003780:	2b01      	cmp	r3, #1
 8003782:	d101      	bne.n	8003788 <HAL_UART_Receive+0x3a>
 8003784:	2302      	movs	r3, #2
 8003786:	e0b2      	b.n	80038ee <HAL_UART_Receive+0x1a0>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2222      	movs	r2, #34	; 0x22
 800379c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037a6:	f7fd fcaf 	bl	8001108 <HAL_GetTick>
 80037aa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	88fa      	ldrh	r2, [r7, #6]
 80037b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	88fa      	ldrh	r2, [r7, #6]
 80037b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037c4:	d10e      	bne.n	80037e4 <HAL_UART_Receive+0x96>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d105      	bne.n	80037da <HAL_UART_Receive+0x8c>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f240 12ff 	movw	r2, #511	; 0x1ff
 80037d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80037d8:	e02d      	b.n	8003836 <HAL_UART_Receive+0xe8>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	22ff      	movs	r2, #255	; 0xff
 80037de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80037e2:	e028      	b.n	8003836 <HAL_UART_Receive+0xe8>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d10d      	bne.n	8003808 <HAL_UART_Receive+0xba>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d104      	bne.n	80037fe <HAL_UART_Receive+0xb0>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	22ff      	movs	r2, #255	; 0xff
 80037f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80037fc:	e01b      	b.n	8003836 <HAL_UART_Receive+0xe8>
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	227f      	movs	r2, #127	; 0x7f
 8003802:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003806:	e016      	b.n	8003836 <HAL_UART_Receive+0xe8>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003810:	d10d      	bne.n	800382e <HAL_UART_Receive+0xe0>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d104      	bne.n	8003824 <HAL_UART_Receive+0xd6>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	227f      	movs	r2, #127	; 0x7f
 800381e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003822:	e008      	b.n	8003836 <HAL_UART_Receive+0xe8>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	223f      	movs	r2, #63	; 0x3f
 8003828:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800382c:	e003      	b.n	8003836 <HAL_UART_Receive+0xe8>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800383c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003846:	d108      	bne.n	800385a <HAL_UART_Receive+0x10c>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d104      	bne.n	800385a <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8003850:	2300      	movs	r3, #0
 8003852:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	61bb      	str	r3, [r7, #24]
 8003858:	e003      	b.n	8003862 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800385e:	2300      	movs	r3, #0
 8003860:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800386a:	e033      	b.n	80038d4 <HAL_UART_Receive+0x186>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	9300      	str	r3, [sp, #0]
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	2200      	movs	r2, #0
 8003874:	2120      	movs	r1, #32
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	f000 fc27 	bl	80040ca <UART_WaitOnFlagUntilTimeout>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e033      	b.n	80038ee <HAL_UART_Receive+0x1a0>
      }
      if (pdata8bits == NULL)
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d10c      	bne.n	80038a6 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003892:	b29a      	uxth	r2, r3
 8003894:	8a7b      	ldrh	r3, [r7, #18]
 8003896:	4013      	ands	r3, r2
 8003898:	b29a      	uxth	r2, r3
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	3302      	adds	r3, #2
 80038a2:	61bb      	str	r3, [r7, #24]
 80038a4:	e00d      	b.n	80038c2 <HAL_UART_Receive+0x174>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	b2da      	uxtb	r2, r3
 80038b0:	8a7b      	ldrh	r3, [r7, #18]
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	4013      	ands	r3, r2
 80038b6:	b2da      	uxtb	r2, r3
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	3301      	adds	r3, #1
 80038c0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	3b01      	subs	r3, #1
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80038da:	b29b      	uxth	r3, r3
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1c5      	bne.n	800386c <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2220      	movs	r2, #32
 80038e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80038e8:	2300      	movs	r3, #0
 80038ea:	e000      	b.n	80038ee <HAL_UART_Receive+0x1a0>
  }
  else
  {
    return HAL_BUSY;
 80038ec:	2302      	movs	r3, #2
  }
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3720      	adds	r7, #32
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
	...

080038f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038fc:	b08c      	sub	sp, #48	; 0x30
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003902:	2300      	movs	r3, #0
 8003904:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	689a      	ldr	r2, [r3, #8]
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	691b      	ldr	r3, [r3, #16]
 8003910:	431a      	orrs	r2, r3
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	431a      	orrs	r2, r3
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	69db      	ldr	r3, [r3, #28]
 800391c:	4313      	orrs	r3, r2
 800391e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	4baa      	ldr	r3, [pc, #680]	; (8003bd0 <UART_SetConfig+0x2d8>)
 8003928:	4013      	ands	r3, r2
 800392a:	697a      	ldr	r2, [r7, #20]
 800392c:	6812      	ldr	r2, [r2, #0]
 800392e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003930:	430b      	orrs	r3, r1
 8003932:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	68da      	ldr	r2, [r3, #12]
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	430a      	orrs	r2, r1
 8003948:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a9f      	ldr	r2, [pc, #636]	; (8003bd4 <UART_SetConfig+0x2dc>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d004      	beq.n	8003964 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003960:	4313      	orrs	r3, r2
 8003962:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800396e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	6812      	ldr	r2, [r2, #0]
 8003976:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003978:	430b      	orrs	r3, r1
 800397a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003982:	f023 010f 	bic.w	r1, r3, #15
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	430a      	orrs	r2, r1
 8003990:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a90      	ldr	r2, [pc, #576]	; (8003bd8 <UART_SetConfig+0x2e0>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d125      	bne.n	80039e8 <UART_SetConfig+0xf0>
 800399c:	4b8f      	ldr	r3, [pc, #572]	; (8003bdc <UART_SetConfig+0x2e4>)
 800399e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a2:	f003 0303 	and.w	r3, r3, #3
 80039a6:	2b03      	cmp	r3, #3
 80039a8:	d81a      	bhi.n	80039e0 <UART_SetConfig+0xe8>
 80039aa:	a201      	add	r2, pc, #4	; (adr r2, 80039b0 <UART_SetConfig+0xb8>)
 80039ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b0:	080039c1 	.word	0x080039c1
 80039b4:	080039d1 	.word	0x080039d1
 80039b8:	080039c9 	.word	0x080039c9
 80039bc:	080039d9 	.word	0x080039d9
 80039c0:	2301      	movs	r3, #1
 80039c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039c6:	e116      	b.n	8003bf6 <UART_SetConfig+0x2fe>
 80039c8:	2302      	movs	r3, #2
 80039ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039ce:	e112      	b.n	8003bf6 <UART_SetConfig+0x2fe>
 80039d0:	2304      	movs	r3, #4
 80039d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039d6:	e10e      	b.n	8003bf6 <UART_SetConfig+0x2fe>
 80039d8:	2308      	movs	r3, #8
 80039da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039de:	e10a      	b.n	8003bf6 <UART_SetConfig+0x2fe>
 80039e0:	2310      	movs	r3, #16
 80039e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039e6:	e106      	b.n	8003bf6 <UART_SetConfig+0x2fe>
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a7c      	ldr	r2, [pc, #496]	; (8003be0 <UART_SetConfig+0x2e8>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d138      	bne.n	8003a64 <UART_SetConfig+0x16c>
 80039f2:	4b7a      	ldr	r3, [pc, #488]	; (8003bdc <UART_SetConfig+0x2e4>)
 80039f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f8:	f003 030c 	and.w	r3, r3, #12
 80039fc:	2b0c      	cmp	r3, #12
 80039fe:	d82d      	bhi.n	8003a5c <UART_SetConfig+0x164>
 8003a00:	a201      	add	r2, pc, #4	; (adr r2, 8003a08 <UART_SetConfig+0x110>)
 8003a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a06:	bf00      	nop
 8003a08:	08003a3d 	.word	0x08003a3d
 8003a0c:	08003a5d 	.word	0x08003a5d
 8003a10:	08003a5d 	.word	0x08003a5d
 8003a14:	08003a5d 	.word	0x08003a5d
 8003a18:	08003a4d 	.word	0x08003a4d
 8003a1c:	08003a5d 	.word	0x08003a5d
 8003a20:	08003a5d 	.word	0x08003a5d
 8003a24:	08003a5d 	.word	0x08003a5d
 8003a28:	08003a45 	.word	0x08003a45
 8003a2c:	08003a5d 	.word	0x08003a5d
 8003a30:	08003a5d 	.word	0x08003a5d
 8003a34:	08003a5d 	.word	0x08003a5d
 8003a38:	08003a55 	.word	0x08003a55
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a42:	e0d8      	b.n	8003bf6 <UART_SetConfig+0x2fe>
 8003a44:	2302      	movs	r3, #2
 8003a46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a4a:	e0d4      	b.n	8003bf6 <UART_SetConfig+0x2fe>
 8003a4c:	2304      	movs	r3, #4
 8003a4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a52:	e0d0      	b.n	8003bf6 <UART_SetConfig+0x2fe>
 8003a54:	2308      	movs	r3, #8
 8003a56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a5a:	e0cc      	b.n	8003bf6 <UART_SetConfig+0x2fe>
 8003a5c:	2310      	movs	r3, #16
 8003a5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a62:	e0c8      	b.n	8003bf6 <UART_SetConfig+0x2fe>
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a5e      	ldr	r2, [pc, #376]	; (8003be4 <UART_SetConfig+0x2ec>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d125      	bne.n	8003aba <UART_SetConfig+0x1c2>
 8003a6e:	4b5b      	ldr	r3, [pc, #364]	; (8003bdc <UART_SetConfig+0x2e4>)
 8003a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a74:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003a78:	2b30      	cmp	r3, #48	; 0x30
 8003a7a:	d016      	beq.n	8003aaa <UART_SetConfig+0x1b2>
 8003a7c:	2b30      	cmp	r3, #48	; 0x30
 8003a7e:	d818      	bhi.n	8003ab2 <UART_SetConfig+0x1ba>
 8003a80:	2b20      	cmp	r3, #32
 8003a82:	d00a      	beq.n	8003a9a <UART_SetConfig+0x1a2>
 8003a84:	2b20      	cmp	r3, #32
 8003a86:	d814      	bhi.n	8003ab2 <UART_SetConfig+0x1ba>
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d002      	beq.n	8003a92 <UART_SetConfig+0x19a>
 8003a8c:	2b10      	cmp	r3, #16
 8003a8e:	d008      	beq.n	8003aa2 <UART_SetConfig+0x1aa>
 8003a90:	e00f      	b.n	8003ab2 <UART_SetConfig+0x1ba>
 8003a92:	2300      	movs	r3, #0
 8003a94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a98:	e0ad      	b.n	8003bf6 <UART_SetConfig+0x2fe>
 8003a9a:	2302      	movs	r3, #2
 8003a9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003aa0:	e0a9      	b.n	8003bf6 <UART_SetConfig+0x2fe>
 8003aa2:	2304      	movs	r3, #4
 8003aa4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003aa8:	e0a5      	b.n	8003bf6 <UART_SetConfig+0x2fe>
 8003aaa:	2308      	movs	r3, #8
 8003aac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ab0:	e0a1      	b.n	8003bf6 <UART_SetConfig+0x2fe>
 8003ab2:	2310      	movs	r3, #16
 8003ab4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ab8:	e09d      	b.n	8003bf6 <UART_SetConfig+0x2fe>
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a4a      	ldr	r2, [pc, #296]	; (8003be8 <UART_SetConfig+0x2f0>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d125      	bne.n	8003b10 <UART_SetConfig+0x218>
 8003ac4:	4b45      	ldr	r3, [pc, #276]	; (8003bdc <UART_SetConfig+0x2e4>)
 8003ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003ace:	2bc0      	cmp	r3, #192	; 0xc0
 8003ad0:	d016      	beq.n	8003b00 <UART_SetConfig+0x208>
 8003ad2:	2bc0      	cmp	r3, #192	; 0xc0
 8003ad4:	d818      	bhi.n	8003b08 <UART_SetConfig+0x210>
 8003ad6:	2b80      	cmp	r3, #128	; 0x80
 8003ad8:	d00a      	beq.n	8003af0 <UART_SetConfig+0x1f8>
 8003ada:	2b80      	cmp	r3, #128	; 0x80
 8003adc:	d814      	bhi.n	8003b08 <UART_SetConfig+0x210>
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d002      	beq.n	8003ae8 <UART_SetConfig+0x1f0>
 8003ae2:	2b40      	cmp	r3, #64	; 0x40
 8003ae4:	d008      	beq.n	8003af8 <UART_SetConfig+0x200>
 8003ae6:	e00f      	b.n	8003b08 <UART_SetConfig+0x210>
 8003ae8:	2300      	movs	r3, #0
 8003aea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003aee:	e082      	b.n	8003bf6 <UART_SetConfig+0x2fe>
 8003af0:	2302      	movs	r3, #2
 8003af2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003af6:	e07e      	b.n	8003bf6 <UART_SetConfig+0x2fe>
 8003af8:	2304      	movs	r3, #4
 8003afa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003afe:	e07a      	b.n	8003bf6 <UART_SetConfig+0x2fe>
 8003b00:	2308      	movs	r3, #8
 8003b02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b06:	e076      	b.n	8003bf6 <UART_SetConfig+0x2fe>
 8003b08:	2310      	movs	r3, #16
 8003b0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b0e:	e072      	b.n	8003bf6 <UART_SetConfig+0x2fe>
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a35      	ldr	r2, [pc, #212]	; (8003bec <UART_SetConfig+0x2f4>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d12a      	bne.n	8003b70 <UART_SetConfig+0x278>
 8003b1a:	4b30      	ldr	r3, [pc, #192]	; (8003bdc <UART_SetConfig+0x2e4>)
 8003b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b28:	d01a      	beq.n	8003b60 <UART_SetConfig+0x268>
 8003b2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b2e:	d81b      	bhi.n	8003b68 <UART_SetConfig+0x270>
 8003b30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b34:	d00c      	beq.n	8003b50 <UART_SetConfig+0x258>
 8003b36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b3a:	d815      	bhi.n	8003b68 <UART_SetConfig+0x270>
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d003      	beq.n	8003b48 <UART_SetConfig+0x250>
 8003b40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b44:	d008      	beq.n	8003b58 <UART_SetConfig+0x260>
 8003b46:	e00f      	b.n	8003b68 <UART_SetConfig+0x270>
 8003b48:	2300      	movs	r3, #0
 8003b4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b4e:	e052      	b.n	8003bf6 <UART_SetConfig+0x2fe>
 8003b50:	2302      	movs	r3, #2
 8003b52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b56:	e04e      	b.n	8003bf6 <UART_SetConfig+0x2fe>
 8003b58:	2304      	movs	r3, #4
 8003b5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b5e:	e04a      	b.n	8003bf6 <UART_SetConfig+0x2fe>
 8003b60:	2308      	movs	r3, #8
 8003b62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b66:	e046      	b.n	8003bf6 <UART_SetConfig+0x2fe>
 8003b68:	2310      	movs	r3, #16
 8003b6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b6e:	e042      	b.n	8003bf6 <UART_SetConfig+0x2fe>
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a17      	ldr	r2, [pc, #92]	; (8003bd4 <UART_SetConfig+0x2dc>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d13a      	bne.n	8003bf0 <UART_SetConfig+0x2f8>
 8003b7a:	4b18      	ldr	r3, [pc, #96]	; (8003bdc <UART_SetConfig+0x2e4>)
 8003b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b80:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b84:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b88:	d01a      	beq.n	8003bc0 <UART_SetConfig+0x2c8>
 8003b8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b8e:	d81b      	bhi.n	8003bc8 <UART_SetConfig+0x2d0>
 8003b90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b94:	d00c      	beq.n	8003bb0 <UART_SetConfig+0x2b8>
 8003b96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b9a:	d815      	bhi.n	8003bc8 <UART_SetConfig+0x2d0>
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d003      	beq.n	8003ba8 <UART_SetConfig+0x2b0>
 8003ba0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ba4:	d008      	beq.n	8003bb8 <UART_SetConfig+0x2c0>
 8003ba6:	e00f      	b.n	8003bc8 <UART_SetConfig+0x2d0>
 8003ba8:	2300      	movs	r3, #0
 8003baa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bae:	e022      	b.n	8003bf6 <UART_SetConfig+0x2fe>
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bb6:	e01e      	b.n	8003bf6 <UART_SetConfig+0x2fe>
 8003bb8:	2304      	movs	r3, #4
 8003bba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bbe:	e01a      	b.n	8003bf6 <UART_SetConfig+0x2fe>
 8003bc0:	2308      	movs	r3, #8
 8003bc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bc6:	e016      	b.n	8003bf6 <UART_SetConfig+0x2fe>
 8003bc8:	2310      	movs	r3, #16
 8003bca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bce:	e012      	b.n	8003bf6 <UART_SetConfig+0x2fe>
 8003bd0:	cfff69f3 	.word	0xcfff69f3
 8003bd4:	40008000 	.word	0x40008000
 8003bd8:	40013800 	.word	0x40013800
 8003bdc:	40021000 	.word	0x40021000
 8003be0:	40004400 	.word	0x40004400
 8003be4:	40004800 	.word	0x40004800
 8003be8:	40004c00 	.word	0x40004c00
 8003bec:	40005000 	.word	0x40005000
 8003bf0:	2310      	movs	r3, #16
 8003bf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4aae      	ldr	r2, [pc, #696]	; (8003eb4 <UART_SetConfig+0x5bc>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	f040 8097 	bne.w	8003d30 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c02:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003c06:	2b08      	cmp	r3, #8
 8003c08:	d823      	bhi.n	8003c52 <UART_SetConfig+0x35a>
 8003c0a:	a201      	add	r2, pc, #4	; (adr r2, 8003c10 <UART_SetConfig+0x318>)
 8003c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c10:	08003c35 	.word	0x08003c35
 8003c14:	08003c53 	.word	0x08003c53
 8003c18:	08003c3d 	.word	0x08003c3d
 8003c1c:	08003c53 	.word	0x08003c53
 8003c20:	08003c43 	.word	0x08003c43
 8003c24:	08003c53 	.word	0x08003c53
 8003c28:	08003c53 	.word	0x08003c53
 8003c2c:	08003c53 	.word	0x08003c53
 8003c30:	08003c4b 	.word	0x08003c4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c34:	f7fe fbd8 	bl	80023e8 <HAL_RCC_GetPCLK1Freq>
 8003c38:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c3a:	e010      	b.n	8003c5e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c3c:	4b9e      	ldr	r3, [pc, #632]	; (8003eb8 <UART_SetConfig+0x5c0>)
 8003c3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003c40:	e00d      	b.n	8003c5e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c42:	f7fe fb39 	bl	80022b8 <HAL_RCC_GetSysClockFreq>
 8003c46:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c48:	e009      	b.n	8003c5e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c4e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003c50:	e005      	b.n	8003c5e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003c52:	2300      	movs	r3, #0
 8003c54:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003c5c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 8130 	beq.w	8003ec6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6a:	4a94      	ldr	r2, [pc, #592]	; (8003ebc <UART_SetConfig+0x5c4>)
 8003c6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c70:	461a      	mov	r2, r3
 8003c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c74:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c78:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	685a      	ldr	r2, [r3, #4]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	005b      	lsls	r3, r3, #1
 8003c82:	4413      	add	r3, r2
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d305      	bcc.n	8003c96 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003c90:	69ba      	ldr	r2, [r7, #24]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d903      	bls.n	8003c9e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003c9c:	e113      	b.n	8003ec6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	60bb      	str	r3, [r7, #8]
 8003ca4:	60fa      	str	r2, [r7, #12]
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003caa:	4a84      	ldr	r2, [pc, #528]	; (8003ebc <UART_SetConfig+0x5c4>)
 8003cac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	603b      	str	r3, [r7, #0]
 8003cb6:	607a      	str	r2, [r7, #4]
 8003cb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003cbc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003cc0:	f7fc faee 	bl	80002a0 <__aeabi_uldivmod>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	4610      	mov	r0, r2
 8003cca:	4619      	mov	r1, r3
 8003ccc:	f04f 0200 	mov.w	r2, #0
 8003cd0:	f04f 0300 	mov.w	r3, #0
 8003cd4:	020b      	lsls	r3, r1, #8
 8003cd6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003cda:	0202      	lsls	r2, r0, #8
 8003cdc:	6979      	ldr	r1, [r7, #20]
 8003cde:	6849      	ldr	r1, [r1, #4]
 8003ce0:	0849      	lsrs	r1, r1, #1
 8003ce2:	2000      	movs	r0, #0
 8003ce4:	460c      	mov	r4, r1
 8003ce6:	4605      	mov	r5, r0
 8003ce8:	eb12 0804 	adds.w	r8, r2, r4
 8003cec:	eb43 0905 	adc.w	r9, r3, r5
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	469a      	mov	sl, r3
 8003cf8:	4693      	mov	fp, r2
 8003cfa:	4652      	mov	r2, sl
 8003cfc:	465b      	mov	r3, fp
 8003cfe:	4640      	mov	r0, r8
 8003d00:	4649      	mov	r1, r9
 8003d02:	f7fc facd 	bl	80002a0 <__aeabi_uldivmod>
 8003d06:	4602      	mov	r2, r0
 8003d08:	460b      	mov	r3, r1
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d0e:	6a3b      	ldr	r3, [r7, #32]
 8003d10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d14:	d308      	bcc.n	8003d28 <UART_SetConfig+0x430>
 8003d16:	6a3b      	ldr	r3, [r7, #32]
 8003d18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d1c:	d204      	bcs.n	8003d28 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	6a3a      	ldr	r2, [r7, #32]
 8003d24:	60da      	str	r2, [r3, #12]
 8003d26:	e0ce      	b.n	8003ec6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003d2e:	e0ca      	b.n	8003ec6 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	69db      	ldr	r3, [r3, #28]
 8003d34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d38:	d166      	bne.n	8003e08 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003d3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003d3e:	2b08      	cmp	r3, #8
 8003d40:	d827      	bhi.n	8003d92 <UART_SetConfig+0x49a>
 8003d42:	a201      	add	r2, pc, #4	; (adr r2, 8003d48 <UART_SetConfig+0x450>)
 8003d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d48:	08003d6d 	.word	0x08003d6d
 8003d4c:	08003d75 	.word	0x08003d75
 8003d50:	08003d7d 	.word	0x08003d7d
 8003d54:	08003d93 	.word	0x08003d93
 8003d58:	08003d83 	.word	0x08003d83
 8003d5c:	08003d93 	.word	0x08003d93
 8003d60:	08003d93 	.word	0x08003d93
 8003d64:	08003d93 	.word	0x08003d93
 8003d68:	08003d8b 	.word	0x08003d8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d6c:	f7fe fb3c 	bl	80023e8 <HAL_RCC_GetPCLK1Freq>
 8003d70:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d72:	e014      	b.n	8003d9e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d74:	f7fe fb4e 	bl	8002414 <HAL_RCC_GetPCLK2Freq>
 8003d78:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d7a:	e010      	b.n	8003d9e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d7c:	4b4e      	ldr	r3, [pc, #312]	; (8003eb8 <UART_SetConfig+0x5c0>)
 8003d7e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d80:	e00d      	b.n	8003d9e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d82:	f7fe fa99 	bl	80022b8 <HAL_RCC_GetSysClockFreq>
 8003d86:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d88:	e009      	b.n	8003d9e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d8e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d90:	e005      	b.n	8003d9e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003d92:	2300      	movs	r3, #0
 8003d94:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003d9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	f000 8090 	beq.w	8003ec6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003daa:	4a44      	ldr	r2, [pc, #272]	; (8003ebc <UART_SetConfig+0x5c4>)
 8003dac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003db0:	461a      	mov	r2, r3
 8003db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db4:	fbb3 f3f2 	udiv	r3, r3, r2
 8003db8:	005a      	lsls	r2, r3, #1
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	085b      	lsrs	r3, r3, #1
 8003dc0:	441a      	add	r2, r3
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dca:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dcc:	6a3b      	ldr	r3, [r7, #32]
 8003dce:	2b0f      	cmp	r3, #15
 8003dd0:	d916      	bls.n	8003e00 <UART_SetConfig+0x508>
 8003dd2:	6a3b      	ldr	r3, [r7, #32]
 8003dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dd8:	d212      	bcs.n	8003e00 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003dda:	6a3b      	ldr	r3, [r7, #32]
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	f023 030f 	bic.w	r3, r3, #15
 8003de2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003de4:	6a3b      	ldr	r3, [r7, #32]
 8003de6:	085b      	lsrs	r3, r3, #1
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	f003 0307 	and.w	r3, r3, #7
 8003dee:	b29a      	uxth	r2, r3
 8003df0:	8bfb      	ldrh	r3, [r7, #30]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	8bfa      	ldrh	r2, [r7, #30]
 8003dfc:	60da      	str	r2, [r3, #12]
 8003dfe:	e062      	b.n	8003ec6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003e06:	e05e      	b.n	8003ec6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e08:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003e0c:	2b08      	cmp	r3, #8
 8003e0e:	d828      	bhi.n	8003e62 <UART_SetConfig+0x56a>
 8003e10:	a201      	add	r2, pc, #4	; (adr r2, 8003e18 <UART_SetConfig+0x520>)
 8003e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e16:	bf00      	nop
 8003e18:	08003e3d 	.word	0x08003e3d
 8003e1c:	08003e45 	.word	0x08003e45
 8003e20:	08003e4d 	.word	0x08003e4d
 8003e24:	08003e63 	.word	0x08003e63
 8003e28:	08003e53 	.word	0x08003e53
 8003e2c:	08003e63 	.word	0x08003e63
 8003e30:	08003e63 	.word	0x08003e63
 8003e34:	08003e63 	.word	0x08003e63
 8003e38:	08003e5b 	.word	0x08003e5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e3c:	f7fe fad4 	bl	80023e8 <HAL_RCC_GetPCLK1Freq>
 8003e40:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e42:	e014      	b.n	8003e6e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e44:	f7fe fae6 	bl	8002414 <HAL_RCC_GetPCLK2Freq>
 8003e48:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e4a:	e010      	b.n	8003e6e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e4c:	4b1a      	ldr	r3, [pc, #104]	; (8003eb8 <UART_SetConfig+0x5c0>)
 8003e4e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e50:	e00d      	b.n	8003e6e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e52:	f7fe fa31 	bl	80022b8 <HAL_RCC_GetSysClockFreq>
 8003e56:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e58:	e009      	b.n	8003e6e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e60:	e005      	b.n	8003e6e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003e62:	2300      	movs	r3, #0
 8003e64:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003e6c:	bf00      	nop
    }

    if (pclk != 0U)
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d028      	beq.n	8003ec6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e78:	4a10      	ldr	r2, [pc, #64]	; (8003ebc <UART_SetConfig+0x5c4>)
 8003e7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e7e:	461a      	mov	r2, r3
 8003e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e82:	fbb3 f2f2 	udiv	r2, r3, r2
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	085b      	lsrs	r3, r3, #1
 8003e8c:	441a      	add	r2, r3
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e96:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e98:	6a3b      	ldr	r3, [r7, #32]
 8003e9a:	2b0f      	cmp	r3, #15
 8003e9c:	d910      	bls.n	8003ec0 <UART_SetConfig+0x5c8>
 8003e9e:	6a3b      	ldr	r3, [r7, #32]
 8003ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ea4:	d20c      	bcs.n	8003ec0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ea6:	6a3b      	ldr	r3, [r7, #32]
 8003ea8:	b29a      	uxth	r2, r3
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	60da      	str	r2, [r3, #12]
 8003eb0:	e009      	b.n	8003ec6 <UART_SetConfig+0x5ce>
 8003eb2:	bf00      	nop
 8003eb4:	40008000 	.word	0x40008000
 8003eb8:	00f42400 	.word	0x00f42400
 8003ebc:	08005924 	.word	0x08005924
      }
      else
      {
        ret = HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003ee2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3730      	adds	r7, #48	; 0x30
 8003eea:	46bd      	mov	sp, r7
 8003eec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003ef0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00a      	beq.n	8003f1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	430a      	orrs	r2, r1
 8003f18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00a      	beq.n	8003f3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	430a      	orrs	r2, r1
 8003f3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f40:	f003 0304 	and.w	r3, r3, #4
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00a      	beq.n	8003f5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f62:	f003 0308 	and.w	r3, r3, #8
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00a      	beq.n	8003f80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	430a      	orrs	r2, r1
 8003f7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f84:	f003 0310 	and.w	r3, r3, #16
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00a      	beq.n	8003fa2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa6:	f003 0320 	and.w	r3, r3, #32
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00a      	beq.n	8003fc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	430a      	orrs	r2, r1
 8003fc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d01a      	beq.n	8004006 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fee:	d10a      	bne.n	8004006 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	430a      	orrs	r2, r1
 8004004:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00a      	beq.n	8004028 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	430a      	orrs	r2, r1
 8004026:	605a      	str	r2, [r3, #4]
  }
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b086      	sub	sp, #24
 8004038:	af02      	add	r7, sp, #8
 800403a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004044:	f7fd f860 	bl	8001108 <HAL_GetTick>
 8004048:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0308 	and.w	r3, r3, #8
 8004054:	2b08      	cmp	r3, #8
 8004056:	d10e      	bne.n	8004076 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004058:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800405c:	9300      	str	r3, [sp, #0]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2200      	movs	r2, #0
 8004062:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 f82f 	bl	80040ca <UART_WaitOnFlagUntilTimeout>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e025      	b.n	80040c2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0304 	and.w	r3, r3, #4
 8004080:	2b04      	cmp	r3, #4
 8004082:	d10e      	bne.n	80040a2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004084:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004088:	9300      	str	r3, [sp, #0]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 f819 	bl	80040ca <UART_WaitOnFlagUntilTimeout>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e00f      	b.n	80040c2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2220      	movs	r2, #32
 80040a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2220      	movs	r2, #32
 80040ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3710      	adds	r7, #16
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b09c      	sub	sp, #112	; 0x70
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	60f8      	str	r0, [r7, #12]
 80040d2:	60b9      	str	r1, [r7, #8]
 80040d4:	603b      	str	r3, [r7, #0]
 80040d6:	4613      	mov	r3, r2
 80040d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040da:	e0a9      	b.n	8004230 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040e2:	f000 80a5 	beq.w	8004230 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040e6:	f7fd f80f 	bl	8001108 <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d302      	bcc.n	80040fc <UART_WaitOnFlagUntilTimeout+0x32>
 80040f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d140      	bne.n	800417e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004102:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004104:	e853 3f00 	ldrex	r3, [r3]
 8004108:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800410a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800410c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004110:	667b      	str	r3, [r7, #100]	; 0x64
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	461a      	mov	r2, r3
 8004118:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800411a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800411c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004120:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004122:	e841 2300 	strex	r3, r2, [r1]
 8004126:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004128:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800412a:	2b00      	cmp	r3, #0
 800412c:	d1e6      	bne.n	80040fc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	3308      	adds	r3, #8
 8004134:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004138:	e853 3f00 	ldrex	r3, [r3]
 800413c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800413e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004140:	f023 0301 	bic.w	r3, r3, #1
 8004144:	663b      	str	r3, [r7, #96]	; 0x60
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	3308      	adds	r3, #8
 800414c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800414e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004150:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004152:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004154:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004156:	e841 2300 	strex	r3, r2, [r1]
 800415a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800415c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1e5      	bne.n	800412e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2220      	movs	r2, #32
 8004166:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2220      	movs	r2, #32
 800416e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e069      	b.n	8004252 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0304 	and.w	r3, r3, #4
 8004188:	2b00      	cmp	r3, #0
 800418a:	d051      	beq.n	8004230 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	69db      	ldr	r3, [r3, #28]
 8004192:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004196:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800419a:	d149      	bne.n	8004230 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041a4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ae:	e853 3f00 	ldrex	r3, [r3]
 80041b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80041ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	461a      	mov	r2, r3
 80041c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041c4:	637b      	str	r3, [r7, #52]	; 0x34
 80041c6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041cc:	e841 2300 	strex	r3, r2, [r1]
 80041d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80041d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1e6      	bne.n	80041a6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	3308      	adds	r3, #8
 80041de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	e853 3f00 	ldrex	r3, [r3]
 80041e6:	613b      	str	r3, [r7, #16]
   return(result);
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	f023 0301 	bic.w	r3, r3, #1
 80041ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	3308      	adds	r3, #8
 80041f6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80041f8:	623a      	str	r2, [r7, #32]
 80041fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fc:	69f9      	ldr	r1, [r7, #28]
 80041fe:	6a3a      	ldr	r2, [r7, #32]
 8004200:	e841 2300 	strex	r3, r2, [r1]
 8004204:	61bb      	str	r3, [r7, #24]
   return(result);
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d1e5      	bne.n	80041d8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2220      	movs	r2, #32
 8004210:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2220      	movs	r2, #32
 8004218:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2220      	movs	r2, #32
 8004220:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e010      	b.n	8004252 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	69da      	ldr	r2, [r3, #28]
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	4013      	ands	r3, r2
 800423a:	68ba      	ldr	r2, [r7, #8]
 800423c:	429a      	cmp	r2, r3
 800423e:	bf0c      	ite	eq
 8004240:	2301      	moveq	r3, #1
 8004242:	2300      	movne	r3, #0
 8004244:	b2db      	uxtb	r3, r3
 8004246:	461a      	mov	r2, r3
 8004248:	79fb      	ldrb	r3, [r7, #7]
 800424a:	429a      	cmp	r2, r3
 800424c:	f43f af46 	beq.w	80040dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3770      	adds	r7, #112	; 0x70
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800425a:	b480      	push	{r7}
 800425c:	b085      	sub	sp, #20
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004268:	2b01      	cmp	r3, #1
 800426a:	d101      	bne.n	8004270 <HAL_UARTEx_DisableFifoMode+0x16>
 800426c:	2302      	movs	r3, #2
 800426e:	e027      	b.n	80042c0 <HAL_UARTEx_DisableFifoMode+0x66>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2224      	movs	r2, #36	; 0x24
 800427c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f022 0201 	bic.w	r2, r2, #1
 8004296:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800429e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2220      	movs	r2, #32
 80042b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80042be:	2300      	movs	r3, #0
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3714      	adds	r7, #20
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d101      	bne.n	80042e4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80042e0:	2302      	movs	r3, #2
 80042e2:	e02d      	b.n	8004340 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2224      	movs	r2, #36	; 0x24
 80042f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f022 0201 	bic.w	r2, r2, #1
 800430a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	683a      	ldr	r2, [r7, #0]
 800431c:	430a      	orrs	r2, r1
 800431e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 f84f 	bl	80043c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2220      	movs	r2, #32
 8004332:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004358:	2b01      	cmp	r3, #1
 800435a:	d101      	bne.n	8004360 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800435c:	2302      	movs	r3, #2
 800435e:	e02d      	b.n	80043bc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2224      	movs	r2, #36	; 0x24
 800436c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f022 0201 	bic.w	r2, r2, #1
 8004386:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	683a      	ldr	r2, [r7, #0]
 8004398:	430a      	orrs	r2, r1
 800439a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 f811 	bl	80043c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68fa      	ldr	r2, [r7, #12]
 80043a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2220      	movs	r2, #32
 80043ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80043ba:	2300      	movs	r3, #0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3710      	adds	r7, #16
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b085      	sub	sp, #20
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d108      	bne.n	80043e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80043e4:	e031      	b.n	800444a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80043e6:	2308      	movs	r3, #8
 80043e8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80043ea:	2308      	movs	r3, #8
 80043ec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	0e5b      	lsrs	r3, r3, #25
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	f003 0307 	and.w	r3, r3, #7
 80043fc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	0f5b      	lsrs	r3, r3, #29
 8004406:	b2db      	uxtb	r3, r3
 8004408:	f003 0307 	and.w	r3, r3, #7
 800440c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800440e:	7bbb      	ldrb	r3, [r7, #14]
 8004410:	7b3a      	ldrb	r2, [r7, #12]
 8004412:	4911      	ldr	r1, [pc, #68]	; (8004458 <UARTEx_SetNbDataToProcess+0x94>)
 8004414:	5c8a      	ldrb	r2, [r1, r2]
 8004416:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800441a:	7b3a      	ldrb	r2, [r7, #12]
 800441c:	490f      	ldr	r1, [pc, #60]	; (800445c <UARTEx_SetNbDataToProcess+0x98>)
 800441e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004420:	fb93 f3f2 	sdiv	r3, r3, r2
 8004424:	b29a      	uxth	r2, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800442c:	7bfb      	ldrb	r3, [r7, #15]
 800442e:	7b7a      	ldrb	r2, [r7, #13]
 8004430:	4909      	ldr	r1, [pc, #36]	; (8004458 <UARTEx_SetNbDataToProcess+0x94>)
 8004432:	5c8a      	ldrb	r2, [r1, r2]
 8004434:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004438:	7b7a      	ldrb	r2, [r7, #13]
 800443a:	4908      	ldr	r1, [pc, #32]	; (800445c <UARTEx_SetNbDataToProcess+0x98>)
 800443c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800443e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004442:	b29a      	uxth	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800444a:	bf00      	nop
 800444c:	3714      	adds	r7, #20
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	0800593c 	.word	0x0800593c
 800445c:	08005944 	.word	0x08005944

08004460 <__errno>:
 8004460:	4b01      	ldr	r3, [pc, #4]	; (8004468 <__errno+0x8>)
 8004462:	6818      	ldr	r0, [r3, #0]
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	2000000c 	.word	0x2000000c

0800446c <__libc_init_array>:
 800446c:	b570      	push	{r4, r5, r6, lr}
 800446e:	4d0d      	ldr	r5, [pc, #52]	; (80044a4 <__libc_init_array+0x38>)
 8004470:	4c0d      	ldr	r4, [pc, #52]	; (80044a8 <__libc_init_array+0x3c>)
 8004472:	1b64      	subs	r4, r4, r5
 8004474:	10a4      	asrs	r4, r4, #2
 8004476:	2600      	movs	r6, #0
 8004478:	42a6      	cmp	r6, r4
 800447a:	d109      	bne.n	8004490 <__libc_init_array+0x24>
 800447c:	4d0b      	ldr	r5, [pc, #44]	; (80044ac <__libc_init_array+0x40>)
 800447e:	4c0c      	ldr	r4, [pc, #48]	; (80044b0 <__libc_init_array+0x44>)
 8004480:	f001 fa00 	bl	8005884 <_init>
 8004484:	1b64      	subs	r4, r4, r5
 8004486:	10a4      	asrs	r4, r4, #2
 8004488:	2600      	movs	r6, #0
 800448a:	42a6      	cmp	r6, r4
 800448c:	d105      	bne.n	800449a <__libc_init_array+0x2e>
 800448e:	bd70      	pop	{r4, r5, r6, pc}
 8004490:	f855 3b04 	ldr.w	r3, [r5], #4
 8004494:	4798      	blx	r3
 8004496:	3601      	adds	r6, #1
 8004498:	e7ee      	b.n	8004478 <__libc_init_array+0xc>
 800449a:	f855 3b04 	ldr.w	r3, [r5], #4
 800449e:	4798      	blx	r3
 80044a0:	3601      	adds	r6, #1
 80044a2:	e7f2      	b.n	800448a <__libc_init_array+0x1e>
 80044a4:	080059ec 	.word	0x080059ec
 80044a8:	080059ec 	.word	0x080059ec
 80044ac:	080059ec 	.word	0x080059ec
 80044b0:	080059f0 	.word	0x080059f0

080044b4 <memset>:
 80044b4:	4402      	add	r2, r0
 80044b6:	4603      	mov	r3, r0
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d100      	bne.n	80044be <memset+0xa>
 80044bc:	4770      	bx	lr
 80044be:	f803 1b01 	strb.w	r1, [r3], #1
 80044c2:	e7f9      	b.n	80044b8 <memset+0x4>

080044c4 <iprintf>:
 80044c4:	b40f      	push	{r0, r1, r2, r3}
 80044c6:	4b0a      	ldr	r3, [pc, #40]	; (80044f0 <iprintf+0x2c>)
 80044c8:	b513      	push	{r0, r1, r4, lr}
 80044ca:	681c      	ldr	r4, [r3, #0]
 80044cc:	b124      	cbz	r4, 80044d8 <iprintf+0x14>
 80044ce:	69a3      	ldr	r3, [r4, #24]
 80044d0:	b913      	cbnz	r3, 80044d8 <iprintf+0x14>
 80044d2:	4620      	mov	r0, r4
 80044d4:	f000 fa7e 	bl	80049d4 <__sinit>
 80044d8:	ab05      	add	r3, sp, #20
 80044da:	9a04      	ldr	r2, [sp, #16]
 80044dc:	68a1      	ldr	r1, [r4, #8]
 80044de:	9301      	str	r3, [sp, #4]
 80044e0:	4620      	mov	r0, r4
 80044e2:	f000 fde3 	bl	80050ac <_vfiprintf_r>
 80044e6:	b002      	add	sp, #8
 80044e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044ec:	b004      	add	sp, #16
 80044ee:	4770      	bx	lr
 80044f0:	2000000c 	.word	0x2000000c

080044f4 <_puts_r>:
 80044f4:	b570      	push	{r4, r5, r6, lr}
 80044f6:	460e      	mov	r6, r1
 80044f8:	4605      	mov	r5, r0
 80044fa:	b118      	cbz	r0, 8004504 <_puts_r+0x10>
 80044fc:	6983      	ldr	r3, [r0, #24]
 80044fe:	b90b      	cbnz	r3, 8004504 <_puts_r+0x10>
 8004500:	f000 fa68 	bl	80049d4 <__sinit>
 8004504:	69ab      	ldr	r3, [r5, #24]
 8004506:	68ac      	ldr	r4, [r5, #8]
 8004508:	b913      	cbnz	r3, 8004510 <_puts_r+0x1c>
 800450a:	4628      	mov	r0, r5
 800450c:	f000 fa62 	bl	80049d4 <__sinit>
 8004510:	4b2c      	ldr	r3, [pc, #176]	; (80045c4 <_puts_r+0xd0>)
 8004512:	429c      	cmp	r4, r3
 8004514:	d120      	bne.n	8004558 <_puts_r+0x64>
 8004516:	686c      	ldr	r4, [r5, #4]
 8004518:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800451a:	07db      	lsls	r3, r3, #31
 800451c:	d405      	bmi.n	800452a <_puts_r+0x36>
 800451e:	89a3      	ldrh	r3, [r4, #12]
 8004520:	0598      	lsls	r0, r3, #22
 8004522:	d402      	bmi.n	800452a <_puts_r+0x36>
 8004524:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004526:	f000 faf3 	bl	8004b10 <__retarget_lock_acquire_recursive>
 800452a:	89a3      	ldrh	r3, [r4, #12]
 800452c:	0719      	lsls	r1, r3, #28
 800452e:	d51d      	bpl.n	800456c <_puts_r+0x78>
 8004530:	6923      	ldr	r3, [r4, #16]
 8004532:	b1db      	cbz	r3, 800456c <_puts_r+0x78>
 8004534:	3e01      	subs	r6, #1
 8004536:	68a3      	ldr	r3, [r4, #8]
 8004538:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800453c:	3b01      	subs	r3, #1
 800453e:	60a3      	str	r3, [r4, #8]
 8004540:	bb39      	cbnz	r1, 8004592 <_puts_r+0x9e>
 8004542:	2b00      	cmp	r3, #0
 8004544:	da38      	bge.n	80045b8 <_puts_r+0xc4>
 8004546:	4622      	mov	r2, r4
 8004548:	210a      	movs	r1, #10
 800454a:	4628      	mov	r0, r5
 800454c:	f000 f868 	bl	8004620 <__swbuf_r>
 8004550:	3001      	adds	r0, #1
 8004552:	d011      	beq.n	8004578 <_puts_r+0x84>
 8004554:	250a      	movs	r5, #10
 8004556:	e011      	b.n	800457c <_puts_r+0x88>
 8004558:	4b1b      	ldr	r3, [pc, #108]	; (80045c8 <_puts_r+0xd4>)
 800455a:	429c      	cmp	r4, r3
 800455c:	d101      	bne.n	8004562 <_puts_r+0x6e>
 800455e:	68ac      	ldr	r4, [r5, #8]
 8004560:	e7da      	b.n	8004518 <_puts_r+0x24>
 8004562:	4b1a      	ldr	r3, [pc, #104]	; (80045cc <_puts_r+0xd8>)
 8004564:	429c      	cmp	r4, r3
 8004566:	bf08      	it	eq
 8004568:	68ec      	ldreq	r4, [r5, #12]
 800456a:	e7d5      	b.n	8004518 <_puts_r+0x24>
 800456c:	4621      	mov	r1, r4
 800456e:	4628      	mov	r0, r5
 8004570:	f000 f8a8 	bl	80046c4 <__swsetup_r>
 8004574:	2800      	cmp	r0, #0
 8004576:	d0dd      	beq.n	8004534 <_puts_r+0x40>
 8004578:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800457c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800457e:	07da      	lsls	r2, r3, #31
 8004580:	d405      	bmi.n	800458e <_puts_r+0x9a>
 8004582:	89a3      	ldrh	r3, [r4, #12]
 8004584:	059b      	lsls	r3, r3, #22
 8004586:	d402      	bmi.n	800458e <_puts_r+0x9a>
 8004588:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800458a:	f000 fac2 	bl	8004b12 <__retarget_lock_release_recursive>
 800458e:	4628      	mov	r0, r5
 8004590:	bd70      	pop	{r4, r5, r6, pc}
 8004592:	2b00      	cmp	r3, #0
 8004594:	da04      	bge.n	80045a0 <_puts_r+0xac>
 8004596:	69a2      	ldr	r2, [r4, #24]
 8004598:	429a      	cmp	r2, r3
 800459a:	dc06      	bgt.n	80045aa <_puts_r+0xb6>
 800459c:	290a      	cmp	r1, #10
 800459e:	d004      	beq.n	80045aa <_puts_r+0xb6>
 80045a0:	6823      	ldr	r3, [r4, #0]
 80045a2:	1c5a      	adds	r2, r3, #1
 80045a4:	6022      	str	r2, [r4, #0]
 80045a6:	7019      	strb	r1, [r3, #0]
 80045a8:	e7c5      	b.n	8004536 <_puts_r+0x42>
 80045aa:	4622      	mov	r2, r4
 80045ac:	4628      	mov	r0, r5
 80045ae:	f000 f837 	bl	8004620 <__swbuf_r>
 80045b2:	3001      	adds	r0, #1
 80045b4:	d1bf      	bne.n	8004536 <_puts_r+0x42>
 80045b6:	e7df      	b.n	8004578 <_puts_r+0x84>
 80045b8:	6823      	ldr	r3, [r4, #0]
 80045ba:	250a      	movs	r5, #10
 80045bc:	1c5a      	adds	r2, r3, #1
 80045be:	6022      	str	r2, [r4, #0]
 80045c0:	701d      	strb	r5, [r3, #0]
 80045c2:	e7db      	b.n	800457c <_puts_r+0x88>
 80045c4:	08005970 	.word	0x08005970
 80045c8:	08005990 	.word	0x08005990
 80045cc:	08005950 	.word	0x08005950

080045d0 <puts>:
 80045d0:	4b02      	ldr	r3, [pc, #8]	; (80045dc <puts+0xc>)
 80045d2:	4601      	mov	r1, r0
 80045d4:	6818      	ldr	r0, [r3, #0]
 80045d6:	f7ff bf8d 	b.w	80044f4 <_puts_r>
 80045da:	bf00      	nop
 80045dc:	2000000c 	.word	0x2000000c

080045e0 <siprintf>:
 80045e0:	b40e      	push	{r1, r2, r3}
 80045e2:	b500      	push	{lr}
 80045e4:	b09c      	sub	sp, #112	; 0x70
 80045e6:	ab1d      	add	r3, sp, #116	; 0x74
 80045e8:	9002      	str	r0, [sp, #8]
 80045ea:	9006      	str	r0, [sp, #24]
 80045ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80045f0:	4809      	ldr	r0, [pc, #36]	; (8004618 <siprintf+0x38>)
 80045f2:	9107      	str	r1, [sp, #28]
 80045f4:	9104      	str	r1, [sp, #16]
 80045f6:	4909      	ldr	r1, [pc, #36]	; (800461c <siprintf+0x3c>)
 80045f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80045fc:	9105      	str	r1, [sp, #20]
 80045fe:	6800      	ldr	r0, [r0, #0]
 8004600:	9301      	str	r3, [sp, #4]
 8004602:	a902      	add	r1, sp, #8
 8004604:	f000 fc28 	bl	8004e58 <_svfiprintf_r>
 8004608:	9b02      	ldr	r3, [sp, #8]
 800460a:	2200      	movs	r2, #0
 800460c:	701a      	strb	r2, [r3, #0]
 800460e:	b01c      	add	sp, #112	; 0x70
 8004610:	f85d eb04 	ldr.w	lr, [sp], #4
 8004614:	b003      	add	sp, #12
 8004616:	4770      	bx	lr
 8004618:	2000000c 	.word	0x2000000c
 800461c:	ffff0208 	.word	0xffff0208

08004620 <__swbuf_r>:
 8004620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004622:	460e      	mov	r6, r1
 8004624:	4614      	mov	r4, r2
 8004626:	4605      	mov	r5, r0
 8004628:	b118      	cbz	r0, 8004632 <__swbuf_r+0x12>
 800462a:	6983      	ldr	r3, [r0, #24]
 800462c:	b90b      	cbnz	r3, 8004632 <__swbuf_r+0x12>
 800462e:	f000 f9d1 	bl	80049d4 <__sinit>
 8004632:	4b21      	ldr	r3, [pc, #132]	; (80046b8 <__swbuf_r+0x98>)
 8004634:	429c      	cmp	r4, r3
 8004636:	d12b      	bne.n	8004690 <__swbuf_r+0x70>
 8004638:	686c      	ldr	r4, [r5, #4]
 800463a:	69a3      	ldr	r3, [r4, #24]
 800463c:	60a3      	str	r3, [r4, #8]
 800463e:	89a3      	ldrh	r3, [r4, #12]
 8004640:	071a      	lsls	r2, r3, #28
 8004642:	d52f      	bpl.n	80046a4 <__swbuf_r+0x84>
 8004644:	6923      	ldr	r3, [r4, #16]
 8004646:	b36b      	cbz	r3, 80046a4 <__swbuf_r+0x84>
 8004648:	6923      	ldr	r3, [r4, #16]
 800464a:	6820      	ldr	r0, [r4, #0]
 800464c:	1ac0      	subs	r0, r0, r3
 800464e:	6963      	ldr	r3, [r4, #20]
 8004650:	b2f6      	uxtb	r6, r6
 8004652:	4283      	cmp	r3, r0
 8004654:	4637      	mov	r7, r6
 8004656:	dc04      	bgt.n	8004662 <__swbuf_r+0x42>
 8004658:	4621      	mov	r1, r4
 800465a:	4628      	mov	r0, r5
 800465c:	f000 f926 	bl	80048ac <_fflush_r>
 8004660:	bb30      	cbnz	r0, 80046b0 <__swbuf_r+0x90>
 8004662:	68a3      	ldr	r3, [r4, #8]
 8004664:	3b01      	subs	r3, #1
 8004666:	60a3      	str	r3, [r4, #8]
 8004668:	6823      	ldr	r3, [r4, #0]
 800466a:	1c5a      	adds	r2, r3, #1
 800466c:	6022      	str	r2, [r4, #0]
 800466e:	701e      	strb	r6, [r3, #0]
 8004670:	6963      	ldr	r3, [r4, #20]
 8004672:	3001      	adds	r0, #1
 8004674:	4283      	cmp	r3, r0
 8004676:	d004      	beq.n	8004682 <__swbuf_r+0x62>
 8004678:	89a3      	ldrh	r3, [r4, #12]
 800467a:	07db      	lsls	r3, r3, #31
 800467c:	d506      	bpl.n	800468c <__swbuf_r+0x6c>
 800467e:	2e0a      	cmp	r6, #10
 8004680:	d104      	bne.n	800468c <__swbuf_r+0x6c>
 8004682:	4621      	mov	r1, r4
 8004684:	4628      	mov	r0, r5
 8004686:	f000 f911 	bl	80048ac <_fflush_r>
 800468a:	b988      	cbnz	r0, 80046b0 <__swbuf_r+0x90>
 800468c:	4638      	mov	r0, r7
 800468e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004690:	4b0a      	ldr	r3, [pc, #40]	; (80046bc <__swbuf_r+0x9c>)
 8004692:	429c      	cmp	r4, r3
 8004694:	d101      	bne.n	800469a <__swbuf_r+0x7a>
 8004696:	68ac      	ldr	r4, [r5, #8]
 8004698:	e7cf      	b.n	800463a <__swbuf_r+0x1a>
 800469a:	4b09      	ldr	r3, [pc, #36]	; (80046c0 <__swbuf_r+0xa0>)
 800469c:	429c      	cmp	r4, r3
 800469e:	bf08      	it	eq
 80046a0:	68ec      	ldreq	r4, [r5, #12]
 80046a2:	e7ca      	b.n	800463a <__swbuf_r+0x1a>
 80046a4:	4621      	mov	r1, r4
 80046a6:	4628      	mov	r0, r5
 80046a8:	f000 f80c 	bl	80046c4 <__swsetup_r>
 80046ac:	2800      	cmp	r0, #0
 80046ae:	d0cb      	beq.n	8004648 <__swbuf_r+0x28>
 80046b0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80046b4:	e7ea      	b.n	800468c <__swbuf_r+0x6c>
 80046b6:	bf00      	nop
 80046b8:	08005970 	.word	0x08005970
 80046bc:	08005990 	.word	0x08005990
 80046c0:	08005950 	.word	0x08005950

080046c4 <__swsetup_r>:
 80046c4:	4b32      	ldr	r3, [pc, #200]	; (8004790 <__swsetup_r+0xcc>)
 80046c6:	b570      	push	{r4, r5, r6, lr}
 80046c8:	681d      	ldr	r5, [r3, #0]
 80046ca:	4606      	mov	r6, r0
 80046cc:	460c      	mov	r4, r1
 80046ce:	b125      	cbz	r5, 80046da <__swsetup_r+0x16>
 80046d0:	69ab      	ldr	r3, [r5, #24]
 80046d2:	b913      	cbnz	r3, 80046da <__swsetup_r+0x16>
 80046d4:	4628      	mov	r0, r5
 80046d6:	f000 f97d 	bl	80049d4 <__sinit>
 80046da:	4b2e      	ldr	r3, [pc, #184]	; (8004794 <__swsetup_r+0xd0>)
 80046dc:	429c      	cmp	r4, r3
 80046de:	d10f      	bne.n	8004700 <__swsetup_r+0x3c>
 80046e0:	686c      	ldr	r4, [r5, #4]
 80046e2:	89a3      	ldrh	r3, [r4, #12]
 80046e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80046e8:	0719      	lsls	r1, r3, #28
 80046ea:	d42c      	bmi.n	8004746 <__swsetup_r+0x82>
 80046ec:	06dd      	lsls	r5, r3, #27
 80046ee:	d411      	bmi.n	8004714 <__swsetup_r+0x50>
 80046f0:	2309      	movs	r3, #9
 80046f2:	6033      	str	r3, [r6, #0]
 80046f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80046f8:	81a3      	strh	r3, [r4, #12]
 80046fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046fe:	e03e      	b.n	800477e <__swsetup_r+0xba>
 8004700:	4b25      	ldr	r3, [pc, #148]	; (8004798 <__swsetup_r+0xd4>)
 8004702:	429c      	cmp	r4, r3
 8004704:	d101      	bne.n	800470a <__swsetup_r+0x46>
 8004706:	68ac      	ldr	r4, [r5, #8]
 8004708:	e7eb      	b.n	80046e2 <__swsetup_r+0x1e>
 800470a:	4b24      	ldr	r3, [pc, #144]	; (800479c <__swsetup_r+0xd8>)
 800470c:	429c      	cmp	r4, r3
 800470e:	bf08      	it	eq
 8004710:	68ec      	ldreq	r4, [r5, #12]
 8004712:	e7e6      	b.n	80046e2 <__swsetup_r+0x1e>
 8004714:	0758      	lsls	r0, r3, #29
 8004716:	d512      	bpl.n	800473e <__swsetup_r+0x7a>
 8004718:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800471a:	b141      	cbz	r1, 800472e <__swsetup_r+0x6a>
 800471c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004720:	4299      	cmp	r1, r3
 8004722:	d002      	beq.n	800472a <__swsetup_r+0x66>
 8004724:	4630      	mov	r0, r6
 8004726:	f000 fa5b 	bl	8004be0 <_free_r>
 800472a:	2300      	movs	r3, #0
 800472c:	6363      	str	r3, [r4, #52]	; 0x34
 800472e:	89a3      	ldrh	r3, [r4, #12]
 8004730:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004734:	81a3      	strh	r3, [r4, #12]
 8004736:	2300      	movs	r3, #0
 8004738:	6063      	str	r3, [r4, #4]
 800473a:	6923      	ldr	r3, [r4, #16]
 800473c:	6023      	str	r3, [r4, #0]
 800473e:	89a3      	ldrh	r3, [r4, #12]
 8004740:	f043 0308 	orr.w	r3, r3, #8
 8004744:	81a3      	strh	r3, [r4, #12]
 8004746:	6923      	ldr	r3, [r4, #16]
 8004748:	b94b      	cbnz	r3, 800475e <__swsetup_r+0x9a>
 800474a:	89a3      	ldrh	r3, [r4, #12]
 800474c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004750:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004754:	d003      	beq.n	800475e <__swsetup_r+0x9a>
 8004756:	4621      	mov	r1, r4
 8004758:	4630      	mov	r0, r6
 800475a:	f000 fa01 	bl	8004b60 <__smakebuf_r>
 800475e:	89a0      	ldrh	r0, [r4, #12]
 8004760:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004764:	f010 0301 	ands.w	r3, r0, #1
 8004768:	d00a      	beq.n	8004780 <__swsetup_r+0xbc>
 800476a:	2300      	movs	r3, #0
 800476c:	60a3      	str	r3, [r4, #8]
 800476e:	6963      	ldr	r3, [r4, #20]
 8004770:	425b      	negs	r3, r3
 8004772:	61a3      	str	r3, [r4, #24]
 8004774:	6923      	ldr	r3, [r4, #16]
 8004776:	b943      	cbnz	r3, 800478a <__swsetup_r+0xc6>
 8004778:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800477c:	d1ba      	bne.n	80046f4 <__swsetup_r+0x30>
 800477e:	bd70      	pop	{r4, r5, r6, pc}
 8004780:	0781      	lsls	r1, r0, #30
 8004782:	bf58      	it	pl
 8004784:	6963      	ldrpl	r3, [r4, #20]
 8004786:	60a3      	str	r3, [r4, #8]
 8004788:	e7f4      	b.n	8004774 <__swsetup_r+0xb0>
 800478a:	2000      	movs	r0, #0
 800478c:	e7f7      	b.n	800477e <__swsetup_r+0xba>
 800478e:	bf00      	nop
 8004790:	2000000c 	.word	0x2000000c
 8004794:	08005970 	.word	0x08005970
 8004798:	08005990 	.word	0x08005990
 800479c:	08005950 	.word	0x08005950

080047a0 <__sflush_r>:
 80047a0:	898a      	ldrh	r2, [r1, #12]
 80047a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047a6:	4605      	mov	r5, r0
 80047a8:	0710      	lsls	r0, r2, #28
 80047aa:	460c      	mov	r4, r1
 80047ac:	d458      	bmi.n	8004860 <__sflush_r+0xc0>
 80047ae:	684b      	ldr	r3, [r1, #4]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	dc05      	bgt.n	80047c0 <__sflush_r+0x20>
 80047b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	dc02      	bgt.n	80047c0 <__sflush_r+0x20>
 80047ba:	2000      	movs	r0, #0
 80047bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047c2:	2e00      	cmp	r6, #0
 80047c4:	d0f9      	beq.n	80047ba <__sflush_r+0x1a>
 80047c6:	2300      	movs	r3, #0
 80047c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80047cc:	682f      	ldr	r7, [r5, #0]
 80047ce:	602b      	str	r3, [r5, #0]
 80047d0:	d032      	beq.n	8004838 <__sflush_r+0x98>
 80047d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80047d4:	89a3      	ldrh	r3, [r4, #12]
 80047d6:	075a      	lsls	r2, r3, #29
 80047d8:	d505      	bpl.n	80047e6 <__sflush_r+0x46>
 80047da:	6863      	ldr	r3, [r4, #4]
 80047dc:	1ac0      	subs	r0, r0, r3
 80047de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80047e0:	b10b      	cbz	r3, 80047e6 <__sflush_r+0x46>
 80047e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80047e4:	1ac0      	subs	r0, r0, r3
 80047e6:	2300      	movs	r3, #0
 80047e8:	4602      	mov	r2, r0
 80047ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047ec:	6a21      	ldr	r1, [r4, #32]
 80047ee:	4628      	mov	r0, r5
 80047f0:	47b0      	blx	r6
 80047f2:	1c43      	adds	r3, r0, #1
 80047f4:	89a3      	ldrh	r3, [r4, #12]
 80047f6:	d106      	bne.n	8004806 <__sflush_r+0x66>
 80047f8:	6829      	ldr	r1, [r5, #0]
 80047fa:	291d      	cmp	r1, #29
 80047fc:	d82c      	bhi.n	8004858 <__sflush_r+0xb8>
 80047fe:	4a2a      	ldr	r2, [pc, #168]	; (80048a8 <__sflush_r+0x108>)
 8004800:	40ca      	lsrs	r2, r1
 8004802:	07d6      	lsls	r6, r2, #31
 8004804:	d528      	bpl.n	8004858 <__sflush_r+0xb8>
 8004806:	2200      	movs	r2, #0
 8004808:	6062      	str	r2, [r4, #4]
 800480a:	04d9      	lsls	r1, r3, #19
 800480c:	6922      	ldr	r2, [r4, #16]
 800480e:	6022      	str	r2, [r4, #0]
 8004810:	d504      	bpl.n	800481c <__sflush_r+0x7c>
 8004812:	1c42      	adds	r2, r0, #1
 8004814:	d101      	bne.n	800481a <__sflush_r+0x7a>
 8004816:	682b      	ldr	r3, [r5, #0]
 8004818:	b903      	cbnz	r3, 800481c <__sflush_r+0x7c>
 800481a:	6560      	str	r0, [r4, #84]	; 0x54
 800481c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800481e:	602f      	str	r7, [r5, #0]
 8004820:	2900      	cmp	r1, #0
 8004822:	d0ca      	beq.n	80047ba <__sflush_r+0x1a>
 8004824:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004828:	4299      	cmp	r1, r3
 800482a:	d002      	beq.n	8004832 <__sflush_r+0x92>
 800482c:	4628      	mov	r0, r5
 800482e:	f000 f9d7 	bl	8004be0 <_free_r>
 8004832:	2000      	movs	r0, #0
 8004834:	6360      	str	r0, [r4, #52]	; 0x34
 8004836:	e7c1      	b.n	80047bc <__sflush_r+0x1c>
 8004838:	6a21      	ldr	r1, [r4, #32]
 800483a:	2301      	movs	r3, #1
 800483c:	4628      	mov	r0, r5
 800483e:	47b0      	blx	r6
 8004840:	1c41      	adds	r1, r0, #1
 8004842:	d1c7      	bne.n	80047d4 <__sflush_r+0x34>
 8004844:	682b      	ldr	r3, [r5, #0]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d0c4      	beq.n	80047d4 <__sflush_r+0x34>
 800484a:	2b1d      	cmp	r3, #29
 800484c:	d001      	beq.n	8004852 <__sflush_r+0xb2>
 800484e:	2b16      	cmp	r3, #22
 8004850:	d101      	bne.n	8004856 <__sflush_r+0xb6>
 8004852:	602f      	str	r7, [r5, #0]
 8004854:	e7b1      	b.n	80047ba <__sflush_r+0x1a>
 8004856:	89a3      	ldrh	r3, [r4, #12]
 8004858:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800485c:	81a3      	strh	r3, [r4, #12]
 800485e:	e7ad      	b.n	80047bc <__sflush_r+0x1c>
 8004860:	690f      	ldr	r7, [r1, #16]
 8004862:	2f00      	cmp	r7, #0
 8004864:	d0a9      	beq.n	80047ba <__sflush_r+0x1a>
 8004866:	0793      	lsls	r3, r2, #30
 8004868:	680e      	ldr	r6, [r1, #0]
 800486a:	bf08      	it	eq
 800486c:	694b      	ldreq	r3, [r1, #20]
 800486e:	600f      	str	r7, [r1, #0]
 8004870:	bf18      	it	ne
 8004872:	2300      	movne	r3, #0
 8004874:	eba6 0807 	sub.w	r8, r6, r7
 8004878:	608b      	str	r3, [r1, #8]
 800487a:	f1b8 0f00 	cmp.w	r8, #0
 800487e:	dd9c      	ble.n	80047ba <__sflush_r+0x1a>
 8004880:	6a21      	ldr	r1, [r4, #32]
 8004882:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004884:	4643      	mov	r3, r8
 8004886:	463a      	mov	r2, r7
 8004888:	4628      	mov	r0, r5
 800488a:	47b0      	blx	r6
 800488c:	2800      	cmp	r0, #0
 800488e:	dc06      	bgt.n	800489e <__sflush_r+0xfe>
 8004890:	89a3      	ldrh	r3, [r4, #12]
 8004892:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004896:	81a3      	strh	r3, [r4, #12]
 8004898:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800489c:	e78e      	b.n	80047bc <__sflush_r+0x1c>
 800489e:	4407      	add	r7, r0
 80048a0:	eba8 0800 	sub.w	r8, r8, r0
 80048a4:	e7e9      	b.n	800487a <__sflush_r+0xda>
 80048a6:	bf00      	nop
 80048a8:	20400001 	.word	0x20400001

080048ac <_fflush_r>:
 80048ac:	b538      	push	{r3, r4, r5, lr}
 80048ae:	690b      	ldr	r3, [r1, #16]
 80048b0:	4605      	mov	r5, r0
 80048b2:	460c      	mov	r4, r1
 80048b4:	b913      	cbnz	r3, 80048bc <_fflush_r+0x10>
 80048b6:	2500      	movs	r5, #0
 80048b8:	4628      	mov	r0, r5
 80048ba:	bd38      	pop	{r3, r4, r5, pc}
 80048bc:	b118      	cbz	r0, 80048c6 <_fflush_r+0x1a>
 80048be:	6983      	ldr	r3, [r0, #24]
 80048c0:	b90b      	cbnz	r3, 80048c6 <_fflush_r+0x1a>
 80048c2:	f000 f887 	bl	80049d4 <__sinit>
 80048c6:	4b14      	ldr	r3, [pc, #80]	; (8004918 <_fflush_r+0x6c>)
 80048c8:	429c      	cmp	r4, r3
 80048ca:	d11b      	bne.n	8004904 <_fflush_r+0x58>
 80048cc:	686c      	ldr	r4, [r5, #4]
 80048ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d0ef      	beq.n	80048b6 <_fflush_r+0xa>
 80048d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80048d8:	07d0      	lsls	r0, r2, #31
 80048da:	d404      	bmi.n	80048e6 <_fflush_r+0x3a>
 80048dc:	0599      	lsls	r1, r3, #22
 80048de:	d402      	bmi.n	80048e6 <_fflush_r+0x3a>
 80048e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048e2:	f000 f915 	bl	8004b10 <__retarget_lock_acquire_recursive>
 80048e6:	4628      	mov	r0, r5
 80048e8:	4621      	mov	r1, r4
 80048ea:	f7ff ff59 	bl	80047a0 <__sflush_r>
 80048ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80048f0:	07da      	lsls	r2, r3, #31
 80048f2:	4605      	mov	r5, r0
 80048f4:	d4e0      	bmi.n	80048b8 <_fflush_r+0xc>
 80048f6:	89a3      	ldrh	r3, [r4, #12]
 80048f8:	059b      	lsls	r3, r3, #22
 80048fa:	d4dd      	bmi.n	80048b8 <_fflush_r+0xc>
 80048fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048fe:	f000 f908 	bl	8004b12 <__retarget_lock_release_recursive>
 8004902:	e7d9      	b.n	80048b8 <_fflush_r+0xc>
 8004904:	4b05      	ldr	r3, [pc, #20]	; (800491c <_fflush_r+0x70>)
 8004906:	429c      	cmp	r4, r3
 8004908:	d101      	bne.n	800490e <_fflush_r+0x62>
 800490a:	68ac      	ldr	r4, [r5, #8]
 800490c:	e7df      	b.n	80048ce <_fflush_r+0x22>
 800490e:	4b04      	ldr	r3, [pc, #16]	; (8004920 <_fflush_r+0x74>)
 8004910:	429c      	cmp	r4, r3
 8004912:	bf08      	it	eq
 8004914:	68ec      	ldreq	r4, [r5, #12]
 8004916:	e7da      	b.n	80048ce <_fflush_r+0x22>
 8004918:	08005970 	.word	0x08005970
 800491c:	08005990 	.word	0x08005990
 8004920:	08005950 	.word	0x08005950

08004924 <std>:
 8004924:	2300      	movs	r3, #0
 8004926:	b510      	push	{r4, lr}
 8004928:	4604      	mov	r4, r0
 800492a:	e9c0 3300 	strd	r3, r3, [r0]
 800492e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004932:	6083      	str	r3, [r0, #8]
 8004934:	8181      	strh	r1, [r0, #12]
 8004936:	6643      	str	r3, [r0, #100]	; 0x64
 8004938:	81c2      	strh	r2, [r0, #14]
 800493a:	6183      	str	r3, [r0, #24]
 800493c:	4619      	mov	r1, r3
 800493e:	2208      	movs	r2, #8
 8004940:	305c      	adds	r0, #92	; 0x5c
 8004942:	f7ff fdb7 	bl	80044b4 <memset>
 8004946:	4b05      	ldr	r3, [pc, #20]	; (800495c <std+0x38>)
 8004948:	6263      	str	r3, [r4, #36]	; 0x24
 800494a:	4b05      	ldr	r3, [pc, #20]	; (8004960 <std+0x3c>)
 800494c:	62a3      	str	r3, [r4, #40]	; 0x28
 800494e:	4b05      	ldr	r3, [pc, #20]	; (8004964 <std+0x40>)
 8004950:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004952:	4b05      	ldr	r3, [pc, #20]	; (8004968 <std+0x44>)
 8004954:	6224      	str	r4, [r4, #32]
 8004956:	6323      	str	r3, [r4, #48]	; 0x30
 8004958:	bd10      	pop	{r4, pc}
 800495a:	bf00      	nop
 800495c:	08005655 	.word	0x08005655
 8004960:	08005677 	.word	0x08005677
 8004964:	080056af 	.word	0x080056af
 8004968:	080056d3 	.word	0x080056d3

0800496c <_cleanup_r>:
 800496c:	4901      	ldr	r1, [pc, #4]	; (8004974 <_cleanup_r+0x8>)
 800496e:	f000 b8af 	b.w	8004ad0 <_fwalk_reent>
 8004972:	bf00      	nop
 8004974:	080048ad 	.word	0x080048ad

08004978 <__sfmoreglue>:
 8004978:	b570      	push	{r4, r5, r6, lr}
 800497a:	2268      	movs	r2, #104	; 0x68
 800497c:	1e4d      	subs	r5, r1, #1
 800497e:	4355      	muls	r5, r2
 8004980:	460e      	mov	r6, r1
 8004982:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004986:	f000 f997 	bl	8004cb8 <_malloc_r>
 800498a:	4604      	mov	r4, r0
 800498c:	b140      	cbz	r0, 80049a0 <__sfmoreglue+0x28>
 800498e:	2100      	movs	r1, #0
 8004990:	e9c0 1600 	strd	r1, r6, [r0]
 8004994:	300c      	adds	r0, #12
 8004996:	60a0      	str	r0, [r4, #8]
 8004998:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800499c:	f7ff fd8a 	bl	80044b4 <memset>
 80049a0:	4620      	mov	r0, r4
 80049a2:	bd70      	pop	{r4, r5, r6, pc}

080049a4 <__sfp_lock_acquire>:
 80049a4:	4801      	ldr	r0, [pc, #4]	; (80049ac <__sfp_lock_acquire+0x8>)
 80049a6:	f000 b8b3 	b.w	8004b10 <__retarget_lock_acquire_recursive>
 80049aa:	bf00      	nop
 80049ac:	20000191 	.word	0x20000191

080049b0 <__sfp_lock_release>:
 80049b0:	4801      	ldr	r0, [pc, #4]	; (80049b8 <__sfp_lock_release+0x8>)
 80049b2:	f000 b8ae 	b.w	8004b12 <__retarget_lock_release_recursive>
 80049b6:	bf00      	nop
 80049b8:	20000191 	.word	0x20000191

080049bc <__sinit_lock_acquire>:
 80049bc:	4801      	ldr	r0, [pc, #4]	; (80049c4 <__sinit_lock_acquire+0x8>)
 80049be:	f000 b8a7 	b.w	8004b10 <__retarget_lock_acquire_recursive>
 80049c2:	bf00      	nop
 80049c4:	20000192 	.word	0x20000192

080049c8 <__sinit_lock_release>:
 80049c8:	4801      	ldr	r0, [pc, #4]	; (80049d0 <__sinit_lock_release+0x8>)
 80049ca:	f000 b8a2 	b.w	8004b12 <__retarget_lock_release_recursive>
 80049ce:	bf00      	nop
 80049d0:	20000192 	.word	0x20000192

080049d4 <__sinit>:
 80049d4:	b510      	push	{r4, lr}
 80049d6:	4604      	mov	r4, r0
 80049d8:	f7ff fff0 	bl	80049bc <__sinit_lock_acquire>
 80049dc:	69a3      	ldr	r3, [r4, #24]
 80049de:	b11b      	cbz	r3, 80049e8 <__sinit+0x14>
 80049e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049e4:	f7ff bff0 	b.w	80049c8 <__sinit_lock_release>
 80049e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80049ec:	6523      	str	r3, [r4, #80]	; 0x50
 80049ee:	4b13      	ldr	r3, [pc, #76]	; (8004a3c <__sinit+0x68>)
 80049f0:	4a13      	ldr	r2, [pc, #76]	; (8004a40 <__sinit+0x6c>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80049f6:	42a3      	cmp	r3, r4
 80049f8:	bf04      	itt	eq
 80049fa:	2301      	moveq	r3, #1
 80049fc:	61a3      	streq	r3, [r4, #24]
 80049fe:	4620      	mov	r0, r4
 8004a00:	f000 f820 	bl	8004a44 <__sfp>
 8004a04:	6060      	str	r0, [r4, #4]
 8004a06:	4620      	mov	r0, r4
 8004a08:	f000 f81c 	bl	8004a44 <__sfp>
 8004a0c:	60a0      	str	r0, [r4, #8]
 8004a0e:	4620      	mov	r0, r4
 8004a10:	f000 f818 	bl	8004a44 <__sfp>
 8004a14:	2200      	movs	r2, #0
 8004a16:	60e0      	str	r0, [r4, #12]
 8004a18:	2104      	movs	r1, #4
 8004a1a:	6860      	ldr	r0, [r4, #4]
 8004a1c:	f7ff ff82 	bl	8004924 <std>
 8004a20:	68a0      	ldr	r0, [r4, #8]
 8004a22:	2201      	movs	r2, #1
 8004a24:	2109      	movs	r1, #9
 8004a26:	f7ff ff7d 	bl	8004924 <std>
 8004a2a:	68e0      	ldr	r0, [r4, #12]
 8004a2c:	2202      	movs	r2, #2
 8004a2e:	2112      	movs	r1, #18
 8004a30:	f7ff ff78 	bl	8004924 <std>
 8004a34:	2301      	movs	r3, #1
 8004a36:	61a3      	str	r3, [r4, #24]
 8004a38:	e7d2      	b.n	80049e0 <__sinit+0xc>
 8004a3a:	bf00      	nop
 8004a3c:	0800594c 	.word	0x0800594c
 8004a40:	0800496d 	.word	0x0800496d

08004a44 <__sfp>:
 8004a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a46:	4607      	mov	r7, r0
 8004a48:	f7ff ffac 	bl	80049a4 <__sfp_lock_acquire>
 8004a4c:	4b1e      	ldr	r3, [pc, #120]	; (8004ac8 <__sfp+0x84>)
 8004a4e:	681e      	ldr	r6, [r3, #0]
 8004a50:	69b3      	ldr	r3, [r6, #24]
 8004a52:	b913      	cbnz	r3, 8004a5a <__sfp+0x16>
 8004a54:	4630      	mov	r0, r6
 8004a56:	f7ff ffbd 	bl	80049d4 <__sinit>
 8004a5a:	3648      	adds	r6, #72	; 0x48
 8004a5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004a60:	3b01      	subs	r3, #1
 8004a62:	d503      	bpl.n	8004a6c <__sfp+0x28>
 8004a64:	6833      	ldr	r3, [r6, #0]
 8004a66:	b30b      	cbz	r3, 8004aac <__sfp+0x68>
 8004a68:	6836      	ldr	r6, [r6, #0]
 8004a6a:	e7f7      	b.n	8004a5c <__sfp+0x18>
 8004a6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004a70:	b9d5      	cbnz	r5, 8004aa8 <__sfp+0x64>
 8004a72:	4b16      	ldr	r3, [pc, #88]	; (8004acc <__sfp+0x88>)
 8004a74:	60e3      	str	r3, [r4, #12]
 8004a76:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004a7a:	6665      	str	r5, [r4, #100]	; 0x64
 8004a7c:	f000 f847 	bl	8004b0e <__retarget_lock_init_recursive>
 8004a80:	f7ff ff96 	bl	80049b0 <__sfp_lock_release>
 8004a84:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004a88:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004a8c:	6025      	str	r5, [r4, #0]
 8004a8e:	61a5      	str	r5, [r4, #24]
 8004a90:	2208      	movs	r2, #8
 8004a92:	4629      	mov	r1, r5
 8004a94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004a98:	f7ff fd0c 	bl	80044b4 <memset>
 8004a9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004aa0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004aa4:	4620      	mov	r0, r4
 8004aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004aa8:	3468      	adds	r4, #104	; 0x68
 8004aaa:	e7d9      	b.n	8004a60 <__sfp+0x1c>
 8004aac:	2104      	movs	r1, #4
 8004aae:	4638      	mov	r0, r7
 8004ab0:	f7ff ff62 	bl	8004978 <__sfmoreglue>
 8004ab4:	4604      	mov	r4, r0
 8004ab6:	6030      	str	r0, [r6, #0]
 8004ab8:	2800      	cmp	r0, #0
 8004aba:	d1d5      	bne.n	8004a68 <__sfp+0x24>
 8004abc:	f7ff ff78 	bl	80049b0 <__sfp_lock_release>
 8004ac0:	230c      	movs	r3, #12
 8004ac2:	603b      	str	r3, [r7, #0]
 8004ac4:	e7ee      	b.n	8004aa4 <__sfp+0x60>
 8004ac6:	bf00      	nop
 8004ac8:	0800594c 	.word	0x0800594c
 8004acc:	ffff0001 	.word	0xffff0001

08004ad0 <_fwalk_reent>:
 8004ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ad4:	4606      	mov	r6, r0
 8004ad6:	4688      	mov	r8, r1
 8004ad8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004adc:	2700      	movs	r7, #0
 8004ade:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ae2:	f1b9 0901 	subs.w	r9, r9, #1
 8004ae6:	d505      	bpl.n	8004af4 <_fwalk_reent+0x24>
 8004ae8:	6824      	ldr	r4, [r4, #0]
 8004aea:	2c00      	cmp	r4, #0
 8004aec:	d1f7      	bne.n	8004ade <_fwalk_reent+0xe>
 8004aee:	4638      	mov	r0, r7
 8004af0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004af4:	89ab      	ldrh	r3, [r5, #12]
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d907      	bls.n	8004b0a <_fwalk_reent+0x3a>
 8004afa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004afe:	3301      	adds	r3, #1
 8004b00:	d003      	beq.n	8004b0a <_fwalk_reent+0x3a>
 8004b02:	4629      	mov	r1, r5
 8004b04:	4630      	mov	r0, r6
 8004b06:	47c0      	blx	r8
 8004b08:	4307      	orrs	r7, r0
 8004b0a:	3568      	adds	r5, #104	; 0x68
 8004b0c:	e7e9      	b.n	8004ae2 <_fwalk_reent+0x12>

08004b0e <__retarget_lock_init_recursive>:
 8004b0e:	4770      	bx	lr

08004b10 <__retarget_lock_acquire_recursive>:
 8004b10:	4770      	bx	lr

08004b12 <__retarget_lock_release_recursive>:
 8004b12:	4770      	bx	lr

08004b14 <__swhatbuf_r>:
 8004b14:	b570      	push	{r4, r5, r6, lr}
 8004b16:	460e      	mov	r6, r1
 8004b18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b1c:	2900      	cmp	r1, #0
 8004b1e:	b096      	sub	sp, #88	; 0x58
 8004b20:	4614      	mov	r4, r2
 8004b22:	461d      	mov	r5, r3
 8004b24:	da08      	bge.n	8004b38 <__swhatbuf_r+0x24>
 8004b26:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	602a      	str	r2, [r5, #0]
 8004b2e:	061a      	lsls	r2, r3, #24
 8004b30:	d410      	bmi.n	8004b54 <__swhatbuf_r+0x40>
 8004b32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b36:	e00e      	b.n	8004b56 <__swhatbuf_r+0x42>
 8004b38:	466a      	mov	r2, sp
 8004b3a:	f000 fdf1 	bl	8005720 <_fstat_r>
 8004b3e:	2800      	cmp	r0, #0
 8004b40:	dbf1      	blt.n	8004b26 <__swhatbuf_r+0x12>
 8004b42:	9a01      	ldr	r2, [sp, #4]
 8004b44:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004b48:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004b4c:	425a      	negs	r2, r3
 8004b4e:	415a      	adcs	r2, r3
 8004b50:	602a      	str	r2, [r5, #0]
 8004b52:	e7ee      	b.n	8004b32 <__swhatbuf_r+0x1e>
 8004b54:	2340      	movs	r3, #64	; 0x40
 8004b56:	2000      	movs	r0, #0
 8004b58:	6023      	str	r3, [r4, #0]
 8004b5a:	b016      	add	sp, #88	; 0x58
 8004b5c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004b60 <__smakebuf_r>:
 8004b60:	898b      	ldrh	r3, [r1, #12]
 8004b62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004b64:	079d      	lsls	r5, r3, #30
 8004b66:	4606      	mov	r6, r0
 8004b68:	460c      	mov	r4, r1
 8004b6a:	d507      	bpl.n	8004b7c <__smakebuf_r+0x1c>
 8004b6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004b70:	6023      	str	r3, [r4, #0]
 8004b72:	6123      	str	r3, [r4, #16]
 8004b74:	2301      	movs	r3, #1
 8004b76:	6163      	str	r3, [r4, #20]
 8004b78:	b002      	add	sp, #8
 8004b7a:	bd70      	pop	{r4, r5, r6, pc}
 8004b7c:	ab01      	add	r3, sp, #4
 8004b7e:	466a      	mov	r2, sp
 8004b80:	f7ff ffc8 	bl	8004b14 <__swhatbuf_r>
 8004b84:	9900      	ldr	r1, [sp, #0]
 8004b86:	4605      	mov	r5, r0
 8004b88:	4630      	mov	r0, r6
 8004b8a:	f000 f895 	bl	8004cb8 <_malloc_r>
 8004b8e:	b948      	cbnz	r0, 8004ba4 <__smakebuf_r+0x44>
 8004b90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b94:	059a      	lsls	r2, r3, #22
 8004b96:	d4ef      	bmi.n	8004b78 <__smakebuf_r+0x18>
 8004b98:	f023 0303 	bic.w	r3, r3, #3
 8004b9c:	f043 0302 	orr.w	r3, r3, #2
 8004ba0:	81a3      	strh	r3, [r4, #12]
 8004ba2:	e7e3      	b.n	8004b6c <__smakebuf_r+0xc>
 8004ba4:	4b0d      	ldr	r3, [pc, #52]	; (8004bdc <__smakebuf_r+0x7c>)
 8004ba6:	62b3      	str	r3, [r6, #40]	; 0x28
 8004ba8:	89a3      	ldrh	r3, [r4, #12]
 8004baa:	6020      	str	r0, [r4, #0]
 8004bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bb0:	81a3      	strh	r3, [r4, #12]
 8004bb2:	9b00      	ldr	r3, [sp, #0]
 8004bb4:	6163      	str	r3, [r4, #20]
 8004bb6:	9b01      	ldr	r3, [sp, #4]
 8004bb8:	6120      	str	r0, [r4, #16]
 8004bba:	b15b      	cbz	r3, 8004bd4 <__smakebuf_r+0x74>
 8004bbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004bc0:	4630      	mov	r0, r6
 8004bc2:	f000 fdbf 	bl	8005744 <_isatty_r>
 8004bc6:	b128      	cbz	r0, 8004bd4 <__smakebuf_r+0x74>
 8004bc8:	89a3      	ldrh	r3, [r4, #12]
 8004bca:	f023 0303 	bic.w	r3, r3, #3
 8004bce:	f043 0301 	orr.w	r3, r3, #1
 8004bd2:	81a3      	strh	r3, [r4, #12]
 8004bd4:	89a0      	ldrh	r0, [r4, #12]
 8004bd6:	4305      	orrs	r5, r0
 8004bd8:	81a5      	strh	r5, [r4, #12]
 8004bda:	e7cd      	b.n	8004b78 <__smakebuf_r+0x18>
 8004bdc:	0800496d 	.word	0x0800496d

08004be0 <_free_r>:
 8004be0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004be2:	2900      	cmp	r1, #0
 8004be4:	d044      	beq.n	8004c70 <_free_r+0x90>
 8004be6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bea:	9001      	str	r0, [sp, #4]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	f1a1 0404 	sub.w	r4, r1, #4
 8004bf2:	bfb8      	it	lt
 8004bf4:	18e4      	addlt	r4, r4, r3
 8004bf6:	f000 fdef 	bl	80057d8 <__malloc_lock>
 8004bfa:	4a1e      	ldr	r2, [pc, #120]	; (8004c74 <_free_r+0x94>)
 8004bfc:	9801      	ldr	r0, [sp, #4]
 8004bfe:	6813      	ldr	r3, [r2, #0]
 8004c00:	b933      	cbnz	r3, 8004c10 <_free_r+0x30>
 8004c02:	6063      	str	r3, [r4, #4]
 8004c04:	6014      	str	r4, [r2, #0]
 8004c06:	b003      	add	sp, #12
 8004c08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c0c:	f000 bdea 	b.w	80057e4 <__malloc_unlock>
 8004c10:	42a3      	cmp	r3, r4
 8004c12:	d908      	bls.n	8004c26 <_free_r+0x46>
 8004c14:	6825      	ldr	r5, [r4, #0]
 8004c16:	1961      	adds	r1, r4, r5
 8004c18:	428b      	cmp	r3, r1
 8004c1a:	bf01      	itttt	eq
 8004c1c:	6819      	ldreq	r1, [r3, #0]
 8004c1e:	685b      	ldreq	r3, [r3, #4]
 8004c20:	1949      	addeq	r1, r1, r5
 8004c22:	6021      	streq	r1, [r4, #0]
 8004c24:	e7ed      	b.n	8004c02 <_free_r+0x22>
 8004c26:	461a      	mov	r2, r3
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	b10b      	cbz	r3, 8004c30 <_free_r+0x50>
 8004c2c:	42a3      	cmp	r3, r4
 8004c2e:	d9fa      	bls.n	8004c26 <_free_r+0x46>
 8004c30:	6811      	ldr	r1, [r2, #0]
 8004c32:	1855      	adds	r5, r2, r1
 8004c34:	42a5      	cmp	r5, r4
 8004c36:	d10b      	bne.n	8004c50 <_free_r+0x70>
 8004c38:	6824      	ldr	r4, [r4, #0]
 8004c3a:	4421      	add	r1, r4
 8004c3c:	1854      	adds	r4, r2, r1
 8004c3e:	42a3      	cmp	r3, r4
 8004c40:	6011      	str	r1, [r2, #0]
 8004c42:	d1e0      	bne.n	8004c06 <_free_r+0x26>
 8004c44:	681c      	ldr	r4, [r3, #0]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	6053      	str	r3, [r2, #4]
 8004c4a:	4421      	add	r1, r4
 8004c4c:	6011      	str	r1, [r2, #0]
 8004c4e:	e7da      	b.n	8004c06 <_free_r+0x26>
 8004c50:	d902      	bls.n	8004c58 <_free_r+0x78>
 8004c52:	230c      	movs	r3, #12
 8004c54:	6003      	str	r3, [r0, #0]
 8004c56:	e7d6      	b.n	8004c06 <_free_r+0x26>
 8004c58:	6825      	ldr	r5, [r4, #0]
 8004c5a:	1961      	adds	r1, r4, r5
 8004c5c:	428b      	cmp	r3, r1
 8004c5e:	bf04      	itt	eq
 8004c60:	6819      	ldreq	r1, [r3, #0]
 8004c62:	685b      	ldreq	r3, [r3, #4]
 8004c64:	6063      	str	r3, [r4, #4]
 8004c66:	bf04      	itt	eq
 8004c68:	1949      	addeq	r1, r1, r5
 8004c6a:	6021      	streq	r1, [r4, #0]
 8004c6c:	6054      	str	r4, [r2, #4]
 8004c6e:	e7ca      	b.n	8004c06 <_free_r+0x26>
 8004c70:	b003      	add	sp, #12
 8004c72:	bd30      	pop	{r4, r5, pc}
 8004c74:	20000194 	.word	0x20000194

08004c78 <sbrk_aligned>:
 8004c78:	b570      	push	{r4, r5, r6, lr}
 8004c7a:	4e0e      	ldr	r6, [pc, #56]	; (8004cb4 <sbrk_aligned+0x3c>)
 8004c7c:	460c      	mov	r4, r1
 8004c7e:	6831      	ldr	r1, [r6, #0]
 8004c80:	4605      	mov	r5, r0
 8004c82:	b911      	cbnz	r1, 8004c8a <sbrk_aligned+0x12>
 8004c84:	f000 fcd6 	bl	8005634 <_sbrk_r>
 8004c88:	6030      	str	r0, [r6, #0]
 8004c8a:	4621      	mov	r1, r4
 8004c8c:	4628      	mov	r0, r5
 8004c8e:	f000 fcd1 	bl	8005634 <_sbrk_r>
 8004c92:	1c43      	adds	r3, r0, #1
 8004c94:	d00a      	beq.n	8004cac <sbrk_aligned+0x34>
 8004c96:	1cc4      	adds	r4, r0, #3
 8004c98:	f024 0403 	bic.w	r4, r4, #3
 8004c9c:	42a0      	cmp	r0, r4
 8004c9e:	d007      	beq.n	8004cb0 <sbrk_aligned+0x38>
 8004ca0:	1a21      	subs	r1, r4, r0
 8004ca2:	4628      	mov	r0, r5
 8004ca4:	f000 fcc6 	bl	8005634 <_sbrk_r>
 8004ca8:	3001      	adds	r0, #1
 8004caa:	d101      	bne.n	8004cb0 <sbrk_aligned+0x38>
 8004cac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004cb0:	4620      	mov	r0, r4
 8004cb2:	bd70      	pop	{r4, r5, r6, pc}
 8004cb4:	20000198 	.word	0x20000198

08004cb8 <_malloc_r>:
 8004cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cbc:	1ccd      	adds	r5, r1, #3
 8004cbe:	f025 0503 	bic.w	r5, r5, #3
 8004cc2:	3508      	adds	r5, #8
 8004cc4:	2d0c      	cmp	r5, #12
 8004cc6:	bf38      	it	cc
 8004cc8:	250c      	movcc	r5, #12
 8004cca:	2d00      	cmp	r5, #0
 8004ccc:	4607      	mov	r7, r0
 8004cce:	db01      	blt.n	8004cd4 <_malloc_r+0x1c>
 8004cd0:	42a9      	cmp	r1, r5
 8004cd2:	d905      	bls.n	8004ce0 <_malloc_r+0x28>
 8004cd4:	230c      	movs	r3, #12
 8004cd6:	603b      	str	r3, [r7, #0]
 8004cd8:	2600      	movs	r6, #0
 8004cda:	4630      	mov	r0, r6
 8004cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ce0:	4e2e      	ldr	r6, [pc, #184]	; (8004d9c <_malloc_r+0xe4>)
 8004ce2:	f000 fd79 	bl	80057d8 <__malloc_lock>
 8004ce6:	6833      	ldr	r3, [r6, #0]
 8004ce8:	461c      	mov	r4, r3
 8004cea:	bb34      	cbnz	r4, 8004d3a <_malloc_r+0x82>
 8004cec:	4629      	mov	r1, r5
 8004cee:	4638      	mov	r0, r7
 8004cf0:	f7ff ffc2 	bl	8004c78 <sbrk_aligned>
 8004cf4:	1c43      	adds	r3, r0, #1
 8004cf6:	4604      	mov	r4, r0
 8004cf8:	d14d      	bne.n	8004d96 <_malloc_r+0xde>
 8004cfa:	6834      	ldr	r4, [r6, #0]
 8004cfc:	4626      	mov	r6, r4
 8004cfe:	2e00      	cmp	r6, #0
 8004d00:	d140      	bne.n	8004d84 <_malloc_r+0xcc>
 8004d02:	6823      	ldr	r3, [r4, #0]
 8004d04:	4631      	mov	r1, r6
 8004d06:	4638      	mov	r0, r7
 8004d08:	eb04 0803 	add.w	r8, r4, r3
 8004d0c:	f000 fc92 	bl	8005634 <_sbrk_r>
 8004d10:	4580      	cmp	r8, r0
 8004d12:	d13a      	bne.n	8004d8a <_malloc_r+0xd2>
 8004d14:	6821      	ldr	r1, [r4, #0]
 8004d16:	3503      	adds	r5, #3
 8004d18:	1a6d      	subs	r5, r5, r1
 8004d1a:	f025 0503 	bic.w	r5, r5, #3
 8004d1e:	3508      	adds	r5, #8
 8004d20:	2d0c      	cmp	r5, #12
 8004d22:	bf38      	it	cc
 8004d24:	250c      	movcc	r5, #12
 8004d26:	4629      	mov	r1, r5
 8004d28:	4638      	mov	r0, r7
 8004d2a:	f7ff ffa5 	bl	8004c78 <sbrk_aligned>
 8004d2e:	3001      	adds	r0, #1
 8004d30:	d02b      	beq.n	8004d8a <_malloc_r+0xd2>
 8004d32:	6823      	ldr	r3, [r4, #0]
 8004d34:	442b      	add	r3, r5
 8004d36:	6023      	str	r3, [r4, #0]
 8004d38:	e00e      	b.n	8004d58 <_malloc_r+0xa0>
 8004d3a:	6822      	ldr	r2, [r4, #0]
 8004d3c:	1b52      	subs	r2, r2, r5
 8004d3e:	d41e      	bmi.n	8004d7e <_malloc_r+0xc6>
 8004d40:	2a0b      	cmp	r2, #11
 8004d42:	d916      	bls.n	8004d72 <_malloc_r+0xba>
 8004d44:	1961      	adds	r1, r4, r5
 8004d46:	42a3      	cmp	r3, r4
 8004d48:	6025      	str	r5, [r4, #0]
 8004d4a:	bf18      	it	ne
 8004d4c:	6059      	strne	r1, [r3, #4]
 8004d4e:	6863      	ldr	r3, [r4, #4]
 8004d50:	bf08      	it	eq
 8004d52:	6031      	streq	r1, [r6, #0]
 8004d54:	5162      	str	r2, [r4, r5]
 8004d56:	604b      	str	r3, [r1, #4]
 8004d58:	4638      	mov	r0, r7
 8004d5a:	f104 060b 	add.w	r6, r4, #11
 8004d5e:	f000 fd41 	bl	80057e4 <__malloc_unlock>
 8004d62:	f026 0607 	bic.w	r6, r6, #7
 8004d66:	1d23      	adds	r3, r4, #4
 8004d68:	1af2      	subs	r2, r6, r3
 8004d6a:	d0b6      	beq.n	8004cda <_malloc_r+0x22>
 8004d6c:	1b9b      	subs	r3, r3, r6
 8004d6e:	50a3      	str	r3, [r4, r2]
 8004d70:	e7b3      	b.n	8004cda <_malloc_r+0x22>
 8004d72:	6862      	ldr	r2, [r4, #4]
 8004d74:	42a3      	cmp	r3, r4
 8004d76:	bf0c      	ite	eq
 8004d78:	6032      	streq	r2, [r6, #0]
 8004d7a:	605a      	strne	r2, [r3, #4]
 8004d7c:	e7ec      	b.n	8004d58 <_malloc_r+0xa0>
 8004d7e:	4623      	mov	r3, r4
 8004d80:	6864      	ldr	r4, [r4, #4]
 8004d82:	e7b2      	b.n	8004cea <_malloc_r+0x32>
 8004d84:	4634      	mov	r4, r6
 8004d86:	6876      	ldr	r6, [r6, #4]
 8004d88:	e7b9      	b.n	8004cfe <_malloc_r+0x46>
 8004d8a:	230c      	movs	r3, #12
 8004d8c:	603b      	str	r3, [r7, #0]
 8004d8e:	4638      	mov	r0, r7
 8004d90:	f000 fd28 	bl	80057e4 <__malloc_unlock>
 8004d94:	e7a1      	b.n	8004cda <_malloc_r+0x22>
 8004d96:	6025      	str	r5, [r4, #0]
 8004d98:	e7de      	b.n	8004d58 <_malloc_r+0xa0>
 8004d9a:	bf00      	nop
 8004d9c:	20000194 	.word	0x20000194

08004da0 <__ssputs_r>:
 8004da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004da4:	688e      	ldr	r6, [r1, #8]
 8004da6:	429e      	cmp	r6, r3
 8004da8:	4682      	mov	sl, r0
 8004daa:	460c      	mov	r4, r1
 8004dac:	4690      	mov	r8, r2
 8004dae:	461f      	mov	r7, r3
 8004db0:	d838      	bhi.n	8004e24 <__ssputs_r+0x84>
 8004db2:	898a      	ldrh	r2, [r1, #12]
 8004db4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004db8:	d032      	beq.n	8004e20 <__ssputs_r+0x80>
 8004dba:	6825      	ldr	r5, [r4, #0]
 8004dbc:	6909      	ldr	r1, [r1, #16]
 8004dbe:	eba5 0901 	sub.w	r9, r5, r1
 8004dc2:	6965      	ldr	r5, [r4, #20]
 8004dc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004dc8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004dcc:	3301      	adds	r3, #1
 8004dce:	444b      	add	r3, r9
 8004dd0:	106d      	asrs	r5, r5, #1
 8004dd2:	429d      	cmp	r5, r3
 8004dd4:	bf38      	it	cc
 8004dd6:	461d      	movcc	r5, r3
 8004dd8:	0553      	lsls	r3, r2, #21
 8004dda:	d531      	bpl.n	8004e40 <__ssputs_r+0xa0>
 8004ddc:	4629      	mov	r1, r5
 8004dde:	f7ff ff6b 	bl	8004cb8 <_malloc_r>
 8004de2:	4606      	mov	r6, r0
 8004de4:	b950      	cbnz	r0, 8004dfc <__ssputs_r+0x5c>
 8004de6:	230c      	movs	r3, #12
 8004de8:	f8ca 3000 	str.w	r3, [sl]
 8004dec:	89a3      	ldrh	r3, [r4, #12]
 8004dee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004df2:	81a3      	strh	r3, [r4, #12]
 8004df4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dfc:	6921      	ldr	r1, [r4, #16]
 8004dfe:	464a      	mov	r2, r9
 8004e00:	f000 fcc2 	bl	8005788 <memcpy>
 8004e04:	89a3      	ldrh	r3, [r4, #12]
 8004e06:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004e0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e0e:	81a3      	strh	r3, [r4, #12]
 8004e10:	6126      	str	r6, [r4, #16]
 8004e12:	6165      	str	r5, [r4, #20]
 8004e14:	444e      	add	r6, r9
 8004e16:	eba5 0509 	sub.w	r5, r5, r9
 8004e1a:	6026      	str	r6, [r4, #0]
 8004e1c:	60a5      	str	r5, [r4, #8]
 8004e1e:	463e      	mov	r6, r7
 8004e20:	42be      	cmp	r6, r7
 8004e22:	d900      	bls.n	8004e26 <__ssputs_r+0x86>
 8004e24:	463e      	mov	r6, r7
 8004e26:	6820      	ldr	r0, [r4, #0]
 8004e28:	4632      	mov	r2, r6
 8004e2a:	4641      	mov	r1, r8
 8004e2c:	f000 fcba 	bl	80057a4 <memmove>
 8004e30:	68a3      	ldr	r3, [r4, #8]
 8004e32:	1b9b      	subs	r3, r3, r6
 8004e34:	60a3      	str	r3, [r4, #8]
 8004e36:	6823      	ldr	r3, [r4, #0]
 8004e38:	4433      	add	r3, r6
 8004e3a:	6023      	str	r3, [r4, #0]
 8004e3c:	2000      	movs	r0, #0
 8004e3e:	e7db      	b.n	8004df8 <__ssputs_r+0x58>
 8004e40:	462a      	mov	r2, r5
 8004e42:	f000 fcd5 	bl	80057f0 <_realloc_r>
 8004e46:	4606      	mov	r6, r0
 8004e48:	2800      	cmp	r0, #0
 8004e4a:	d1e1      	bne.n	8004e10 <__ssputs_r+0x70>
 8004e4c:	6921      	ldr	r1, [r4, #16]
 8004e4e:	4650      	mov	r0, sl
 8004e50:	f7ff fec6 	bl	8004be0 <_free_r>
 8004e54:	e7c7      	b.n	8004de6 <__ssputs_r+0x46>
	...

08004e58 <_svfiprintf_r>:
 8004e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e5c:	4698      	mov	r8, r3
 8004e5e:	898b      	ldrh	r3, [r1, #12]
 8004e60:	061b      	lsls	r3, r3, #24
 8004e62:	b09d      	sub	sp, #116	; 0x74
 8004e64:	4607      	mov	r7, r0
 8004e66:	460d      	mov	r5, r1
 8004e68:	4614      	mov	r4, r2
 8004e6a:	d50e      	bpl.n	8004e8a <_svfiprintf_r+0x32>
 8004e6c:	690b      	ldr	r3, [r1, #16]
 8004e6e:	b963      	cbnz	r3, 8004e8a <_svfiprintf_r+0x32>
 8004e70:	2140      	movs	r1, #64	; 0x40
 8004e72:	f7ff ff21 	bl	8004cb8 <_malloc_r>
 8004e76:	6028      	str	r0, [r5, #0]
 8004e78:	6128      	str	r0, [r5, #16]
 8004e7a:	b920      	cbnz	r0, 8004e86 <_svfiprintf_r+0x2e>
 8004e7c:	230c      	movs	r3, #12
 8004e7e:	603b      	str	r3, [r7, #0]
 8004e80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e84:	e0d1      	b.n	800502a <_svfiprintf_r+0x1d2>
 8004e86:	2340      	movs	r3, #64	; 0x40
 8004e88:	616b      	str	r3, [r5, #20]
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	9309      	str	r3, [sp, #36]	; 0x24
 8004e8e:	2320      	movs	r3, #32
 8004e90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e94:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e98:	2330      	movs	r3, #48	; 0x30
 8004e9a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005044 <_svfiprintf_r+0x1ec>
 8004e9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ea2:	f04f 0901 	mov.w	r9, #1
 8004ea6:	4623      	mov	r3, r4
 8004ea8:	469a      	mov	sl, r3
 8004eaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004eae:	b10a      	cbz	r2, 8004eb4 <_svfiprintf_r+0x5c>
 8004eb0:	2a25      	cmp	r2, #37	; 0x25
 8004eb2:	d1f9      	bne.n	8004ea8 <_svfiprintf_r+0x50>
 8004eb4:	ebba 0b04 	subs.w	fp, sl, r4
 8004eb8:	d00b      	beq.n	8004ed2 <_svfiprintf_r+0x7a>
 8004eba:	465b      	mov	r3, fp
 8004ebc:	4622      	mov	r2, r4
 8004ebe:	4629      	mov	r1, r5
 8004ec0:	4638      	mov	r0, r7
 8004ec2:	f7ff ff6d 	bl	8004da0 <__ssputs_r>
 8004ec6:	3001      	adds	r0, #1
 8004ec8:	f000 80aa 	beq.w	8005020 <_svfiprintf_r+0x1c8>
 8004ecc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ece:	445a      	add	r2, fp
 8004ed0:	9209      	str	r2, [sp, #36]	; 0x24
 8004ed2:	f89a 3000 	ldrb.w	r3, [sl]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	f000 80a2 	beq.w	8005020 <_svfiprintf_r+0x1c8>
 8004edc:	2300      	movs	r3, #0
 8004ede:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ee2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ee6:	f10a 0a01 	add.w	sl, sl, #1
 8004eea:	9304      	str	r3, [sp, #16]
 8004eec:	9307      	str	r3, [sp, #28]
 8004eee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ef2:	931a      	str	r3, [sp, #104]	; 0x68
 8004ef4:	4654      	mov	r4, sl
 8004ef6:	2205      	movs	r2, #5
 8004ef8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004efc:	4851      	ldr	r0, [pc, #324]	; (8005044 <_svfiprintf_r+0x1ec>)
 8004efe:	f7fb f97f 	bl	8000200 <memchr>
 8004f02:	9a04      	ldr	r2, [sp, #16]
 8004f04:	b9d8      	cbnz	r0, 8004f3e <_svfiprintf_r+0xe6>
 8004f06:	06d0      	lsls	r0, r2, #27
 8004f08:	bf44      	itt	mi
 8004f0a:	2320      	movmi	r3, #32
 8004f0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f10:	0711      	lsls	r1, r2, #28
 8004f12:	bf44      	itt	mi
 8004f14:	232b      	movmi	r3, #43	; 0x2b
 8004f16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f1a:	f89a 3000 	ldrb.w	r3, [sl]
 8004f1e:	2b2a      	cmp	r3, #42	; 0x2a
 8004f20:	d015      	beq.n	8004f4e <_svfiprintf_r+0xf6>
 8004f22:	9a07      	ldr	r2, [sp, #28]
 8004f24:	4654      	mov	r4, sl
 8004f26:	2000      	movs	r0, #0
 8004f28:	f04f 0c0a 	mov.w	ip, #10
 8004f2c:	4621      	mov	r1, r4
 8004f2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f32:	3b30      	subs	r3, #48	; 0x30
 8004f34:	2b09      	cmp	r3, #9
 8004f36:	d94e      	bls.n	8004fd6 <_svfiprintf_r+0x17e>
 8004f38:	b1b0      	cbz	r0, 8004f68 <_svfiprintf_r+0x110>
 8004f3a:	9207      	str	r2, [sp, #28]
 8004f3c:	e014      	b.n	8004f68 <_svfiprintf_r+0x110>
 8004f3e:	eba0 0308 	sub.w	r3, r0, r8
 8004f42:	fa09 f303 	lsl.w	r3, r9, r3
 8004f46:	4313      	orrs	r3, r2
 8004f48:	9304      	str	r3, [sp, #16]
 8004f4a:	46a2      	mov	sl, r4
 8004f4c:	e7d2      	b.n	8004ef4 <_svfiprintf_r+0x9c>
 8004f4e:	9b03      	ldr	r3, [sp, #12]
 8004f50:	1d19      	adds	r1, r3, #4
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	9103      	str	r1, [sp, #12]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	bfbb      	ittet	lt
 8004f5a:	425b      	neglt	r3, r3
 8004f5c:	f042 0202 	orrlt.w	r2, r2, #2
 8004f60:	9307      	strge	r3, [sp, #28]
 8004f62:	9307      	strlt	r3, [sp, #28]
 8004f64:	bfb8      	it	lt
 8004f66:	9204      	strlt	r2, [sp, #16]
 8004f68:	7823      	ldrb	r3, [r4, #0]
 8004f6a:	2b2e      	cmp	r3, #46	; 0x2e
 8004f6c:	d10c      	bne.n	8004f88 <_svfiprintf_r+0x130>
 8004f6e:	7863      	ldrb	r3, [r4, #1]
 8004f70:	2b2a      	cmp	r3, #42	; 0x2a
 8004f72:	d135      	bne.n	8004fe0 <_svfiprintf_r+0x188>
 8004f74:	9b03      	ldr	r3, [sp, #12]
 8004f76:	1d1a      	adds	r2, r3, #4
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	9203      	str	r2, [sp, #12]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	bfb8      	it	lt
 8004f80:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004f84:	3402      	adds	r4, #2
 8004f86:	9305      	str	r3, [sp, #20]
 8004f88:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005054 <_svfiprintf_r+0x1fc>
 8004f8c:	7821      	ldrb	r1, [r4, #0]
 8004f8e:	2203      	movs	r2, #3
 8004f90:	4650      	mov	r0, sl
 8004f92:	f7fb f935 	bl	8000200 <memchr>
 8004f96:	b140      	cbz	r0, 8004faa <_svfiprintf_r+0x152>
 8004f98:	2340      	movs	r3, #64	; 0x40
 8004f9a:	eba0 000a 	sub.w	r0, r0, sl
 8004f9e:	fa03 f000 	lsl.w	r0, r3, r0
 8004fa2:	9b04      	ldr	r3, [sp, #16]
 8004fa4:	4303      	orrs	r3, r0
 8004fa6:	3401      	adds	r4, #1
 8004fa8:	9304      	str	r3, [sp, #16]
 8004faa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fae:	4826      	ldr	r0, [pc, #152]	; (8005048 <_svfiprintf_r+0x1f0>)
 8004fb0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004fb4:	2206      	movs	r2, #6
 8004fb6:	f7fb f923 	bl	8000200 <memchr>
 8004fba:	2800      	cmp	r0, #0
 8004fbc:	d038      	beq.n	8005030 <_svfiprintf_r+0x1d8>
 8004fbe:	4b23      	ldr	r3, [pc, #140]	; (800504c <_svfiprintf_r+0x1f4>)
 8004fc0:	bb1b      	cbnz	r3, 800500a <_svfiprintf_r+0x1b2>
 8004fc2:	9b03      	ldr	r3, [sp, #12]
 8004fc4:	3307      	adds	r3, #7
 8004fc6:	f023 0307 	bic.w	r3, r3, #7
 8004fca:	3308      	adds	r3, #8
 8004fcc:	9303      	str	r3, [sp, #12]
 8004fce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fd0:	4433      	add	r3, r6
 8004fd2:	9309      	str	r3, [sp, #36]	; 0x24
 8004fd4:	e767      	b.n	8004ea6 <_svfiprintf_r+0x4e>
 8004fd6:	fb0c 3202 	mla	r2, ip, r2, r3
 8004fda:	460c      	mov	r4, r1
 8004fdc:	2001      	movs	r0, #1
 8004fde:	e7a5      	b.n	8004f2c <_svfiprintf_r+0xd4>
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	3401      	adds	r4, #1
 8004fe4:	9305      	str	r3, [sp, #20]
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	f04f 0c0a 	mov.w	ip, #10
 8004fec:	4620      	mov	r0, r4
 8004fee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ff2:	3a30      	subs	r2, #48	; 0x30
 8004ff4:	2a09      	cmp	r2, #9
 8004ff6:	d903      	bls.n	8005000 <_svfiprintf_r+0x1a8>
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d0c5      	beq.n	8004f88 <_svfiprintf_r+0x130>
 8004ffc:	9105      	str	r1, [sp, #20]
 8004ffe:	e7c3      	b.n	8004f88 <_svfiprintf_r+0x130>
 8005000:	fb0c 2101 	mla	r1, ip, r1, r2
 8005004:	4604      	mov	r4, r0
 8005006:	2301      	movs	r3, #1
 8005008:	e7f0      	b.n	8004fec <_svfiprintf_r+0x194>
 800500a:	ab03      	add	r3, sp, #12
 800500c:	9300      	str	r3, [sp, #0]
 800500e:	462a      	mov	r2, r5
 8005010:	4b0f      	ldr	r3, [pc, #60]	; (8005050 <_svfiprintf_r+0x1f8>)
 8005012:	a904      	add	r1, sp, #16
 8005014:	4638      	mov	r0, r7
 8005016:	f3af 8000 	nop.w
 800501a:	1c42      	adds	r2, r0, #1
 800501c:	4606      	mov	r6, r0
 800501e:	d1d6      	bne.n	8004fce <_svfiprintf_r+0x176>
 8005020:	89ab      	ldrh	r3, [r5, #12]
 8005022:	065b      	lsls	r3, r3, #25
 8005024:	f53f af2c 	bmi.w	8004e80 <_svfiprintf_r+0x28>
 8005028:	9809      	ldr	r0, [sp, #36]	; 0x24
 800502a:	b01d      	add	sp, #116	; 0x74
 800502c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005030:	ab03      	add	r3, sp, #12
 8005032:	9300      	str	r3, [sp, #0]
 8005034:	462a      	mov	r2, r5
 8005036:	4b06      	ldr	r3, [pc, #24]	; (8005050 <_svfiprintf_r+0x1f8>)
 8005038:	a904      	add	r1, sp, #16
 800503a:	4638      	mov	r0, r7
 800503c:	f000 f9d4 	bl	80053e8 <_printf_i>
 8005040:	e7eb      	b.n	800501a <_svfiprintf_r+0x1c2>
 8005042:	bf00      	nop
 8005044:	080059b0 	.word	0x080059b0
 8005048:	080059ba 	.word	0x080059ba
 800504c:	00000000 	.word	0x00000000
 8005050:	08004da1 	.word	0x08004da1
 8005054:	080059b6 	.word	0x080059b6

08005058 <__sfputc_r>:
 8005058:	6893      	ldr	r3, [r2, #8]
 800505a:	3b01      	subs	r3, #1
 800505c:	2b00      	cmp	r3, #0
 800505e:	b410      	push	{r4}
 8005060:	6093      	str	r3, [r2, #8]
 8005062:	da08      	bge.n	8005076 <__sfputc_r+0x1e>
 8005064:	6994      	ldr	r4, [r2, #24]
 8005066:	42a3      	cmp	r3, r4
 8005068:	db01      	blt.n	800506e <__sfputc_r+0x16>
 800506a:	290a      	cmp	r1, #10
 800506c:	d103      	bne.n	8005076 <__sfputc_r+0x1e>
 800506e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005072:	f7ff bad5 	b.w	8004620 <__swbuf_r>
 8005076:	6813      	ldr	r3, [r2, #0]
 8005078:	1c58      	adds	r0, r3, #1
 800507a:	6010      	str	r0, [r2, #0]
 800507c:	7019      	strb	r1, [r3, #0]
 800507e:	4608      	mov	r0, r1
 8005080:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005084:	4770      	bx	lr

08005086 <__sfputs_r>:
 8005086:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005088:	4606      	mov	r6, r0
 800508a:	460f      	mov	r7, r1
 800508c:	4614      	mov	r4, r2
 800508e:	18d5      	adds	r5, r2, r3
 8005090:	42ac      	cmp	r4, r5
 8005092:	d101      	bne.n	8005098 <__sfputs_r+0x12>
 8005094:	2000      	movs	r0, #0
 8005096:	e007      	b.n	80050a8 <__sfputs_r+0x22>
 8005098:	f814 1b01 	ldrb.w	r1, [r4], #1
 800509c:	463a      	mov	r2, r7
 800509e:	4630      	mov	r0, r6
 80050a0:	f7ff ffda 	bl	8005058 <__sfputc_r>
 80050a4:	1c43      	adds	r3, r0, #1
 80050a6:	d1f3      	bne.n	8005090 <__sfputs_r+0xa>
 80050a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080050ac <_vfiprintf_r>:
 80050ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050b0:	460d      	mov	r5, r1
 80050b2:	b09d      	sub	sp, #116	; 0x74
 80050b4:	4614      	mov	r4, r2
 80050b6:	4698      	mov	r8, r3
 80050b8:	4606      	mov	r6, r0
 80050ba:	b118      	cbz	r0, 80050c4 <_vfiprintf_r+0x18>
 80050bc:	6983      	ldr	r3, [r0, #24]
 80050be:	b90b      	cbnz	r3, 80050c4 <_vfiprintf_r+0x18>
 80050c0:	f7ff fc88 	bl	80049d4 <__sinit>
 80050c4:	4b89      	ldr	r3, [pc, #548]	; (80052ec <_vfiprintf_r+0x240>)
 80050c6:	429d      	cmp	r5, r3
 80050c8:	d11b      	bne.n	8005102 <_vfiprintf_r+0x56>
 80050ca:	6875      	ldr	r5, [r6, #4]
 80050cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80050ce:	07d9      	lsls	r1, r3, #31
 80050d0:	d405      	bmi.n	80050de <_vfiprintf_r+0x32>
 80050d2:	89ab      	ldrh	r3, [r5, #12]
 80050d4:	059a      	lsls	r2, r3, #22
 80050d6:	d402      	bmi.n	80050de <_vfiprintf_r+0x32>
 80050d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80050da:	f7ff fd19 	bl	8004b10 <__retarget_lock_acquire_recursive>
 80050de:	89ab      	ldrh	r3, [r5, #12]
 80050e0:	071b      	lsls	r3, r3, #28
 80050e2:	d501      	bpl.n	80050e8 <_vfiprintf_r+0x3c>
 80050e4:	692b      	ldr	r3, [r5, #16]
 80050e6:	b9eb      	cbnz	r3, 8005124 <_vfiprintf_r+0x78>
 80050e8:	4629      	mov	r1, r5
 80050ea:	4630      	mov	r0, r6
 80050ec:	f7ff faea 	bl	80046c4 <__swsetup_r>
 80050f0:	b1c0      	cbz	r0, 8005124 <_vfiprintf_r+0x78>
 80050f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80050f4:	07dc      	lsls	r4, r3, #31
 80050f6:	d50e      	bpl.n	8005116 <_vfiprintf_r+0x6a>
 80050f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050fc:	b01d      	add	sp, #116	; 0x74
 80050fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005102:	4b7b      	ldr	r3, [pc, #492]	; (80052f0 <_vfiprintf_r+0x244>)
 8005104:	429d      	cmp	r5, r3
 8005106:	d101      	bne.n	800510c <_vfiprintf_r+0x60>
 8005108:	68b5      	ldr	r5, [r6, #8]
 800510a:	e7df      	b.n	80050cc <_vfiprintf_r+0x20>
 800510c:	4b79      	ldr	r3, [pc, #484]	; (80052f4 <_vfiprintf_r+0x248>)
 800510e:	429d      	cmp	r5, r3
 8005110:	bf08      	it	eq
 8005112:	68f5      	ldreq	r5, [r6, #12]
 8005114:	e7da      	b.n	80050cc <_vfiprintf_r+0x20>
 8005116:	89ab      	ldrh	r3, [r5, #12]
 8005118:	0598      	lsls	r0, r3, #22
 800511a:	d4ed      	bmi.n	80050f8 <_vfiprintf_r+0x4c>
 800511c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800511e:	f7ff fcf8 	bl	8004b12 <__retarget_lock_release_recursive>
 8005122:	e7e9      	b.n	80050f8 <_vfiprintf_r+0x4c>
 8005124:	2300      	movs	r3, #0
 8005126:	9309      	str	r3, [sp, #36]	; 0x24
 8005128:	2320      	movs	r3, #32
 800512a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800512e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005132:	2330      	movs	r3, #48	; 0x30
 8005134:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80052f8 <_vfiprintf_r+0x24c>
 8005138:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800513c:	f04f 0901 	mov.w	r9, #1
 8005140:	4623      	mov	r3, r4
 8005142:	469a      	mov	sl, r3
 8005144:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005148:	b10a      	cbz	r2, 800514e <_vfiprintf_r+0xa2>
 800514a:	2a25      	cmp	r2, #37	; 0x25
 800514c:	d1f9      	bne.n	8005142 <_vfiprintf_r+0x96>
 800514e:	ebba 0b04 	subs.w	fp, sl, r4
 8005152:	d00b      	beq.n	800516c <_vfiprintf_r+0xc0>
 8005154:	465b      	mov	r3, fp
 8005156:	4622      	mov	r2, r4
 8005158:	4629      	mov	r1, r5
 800515a:	4630      	mov	r0, r6
 800515c:	f7ff ff93 	bl	8005086 <__sfputs_r>
 8005160:	3001      	adds	r0, #1
 8005162:	f000 80aa 	beq.w	80052ba <_vfiprintf_r+0x20e>
 8005166:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005168:	445a      	add	r2, fp
 800516a:	9209      	str	r2, [sp, #36]	; 0x24
 800516c:	f89a 3000 	ldrb.w	r3, [sl]
 8005170:	2b00      	cmp	r3, #0
 8005172:	f000 80a2 	beq.w	80052ba <_vfiprintf_r+0x20e>
 8005176:	2300      	movs	r3, #0
 8005178:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800517c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005180:	f10a 0a01 	add.w	sl, sl, #1
 8005184:	9304      	str	r3, [sp, #16]
 8005186:	9307      	str	r3, [sp, #28]
 8005188:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800518c:	931a      	str	r3, [sp, #104]	; 0x68
 800518e:	4654      	mov	r4, sl
 8005190:	2205      	movs	r2, #5
 8005192:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005196:	4858      	ldr	r0, [pc, #352]	; (80052f8 <_vfiprintf_r+0x24c>)
 8005198:	f7fb f832 	bl	8000200 <memchr>
 800519c:	9a04      	ldr	r2, [sp, #16]
 800519e:	b9d8      	cbnz	r0, 80051d8 <_vfiprintf_r+0x12c>
 80051a0:	06d1      	lsls	r1, r2, #27
 80051a2:	bf44      	itt	mi
 80051a4:	2320      	movmi	r3, #32
 80051a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051aa:	0713      	lsls	r3, r2, #28
 80051ac:	bf44      	itt	mi
 80051ae:	232b      	movmi	r3, #43	; 0x2b
 80051b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051b4:	f89a 3000 	ldrb.w	r3, [sl]
 80051b8:	2b2a      	cmp	r3, #42	; 0x2a
 80051ba:	d015      	beq.n	80051e8 <_vfiprintf_r+0x13c>
 80051bc:	9a07      	ldr	r2, [sp, #28]
 80051be:	4654      	mov	r4, sl
 80051c0:	2000      	movs	r0, #0
 80051c2:	f04f 0c0a 	mov.w	ip, #10
 80051c6:	4621      	mov	r1, r4
 80051c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051cc:	3b30      	subs	r3, #48	; 0x30
 80051ce:	2b09      	cmp	r3, #9
 80051d0:	d94e      	bls.n	8005270 <_vfiprintf_r+0x1c4>
 80051d2:	b1b0      	cbz	r0, 8005202 <_vfiprintf_r+0x156>
 80051d4:	9207      	str	r2, [sp, #28]
 80051d6:	e014      	b.n	8005202 <_vfiprintf_r+0x156>
 80051d8:	eba0 0308 	sub.w	r3, r0, r8
 80051dc:	fa09 f303 	lsl.w	r3, r9, r3
 80051e0:	4313      	orrs	r3, r2
 80051e2:	9304      	str	r3, [sp, #16]
 80051e4:	46a2      	mov	sl, r4
 80051e6:	e7d2      	b.n	800518e <_vfiprintf_r+0xe2>
 80051e8:	9b03      	ldr	r3, [sp, #12]
 80051ea:	1d19      	adds	r1, r3, #4
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	9103      	str	r1, [sp, #12]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	bfbb      	ittet	lt
 80051f4:	425b      	neglt	r3, r3
 80051f6:	f042 0202 	orrlt.w	r2, r2, #2
 80051fa:	9307      	strge	r3, [sp, #28]
 80051fc:	9307      	strlt	r3, [sp, #28]
 80051fe:	bfb8      	it	lt
 8005200:	9204      	strlt	r2, [sp, #16]
 8005202:	7823      	ldrb	r3, [r4, #0]
 8005204:	2b2e      	cmp	r3, #46	; 0x2e
 8005206:	d10c      	bne.n	8005222 <_vfiprintf_r+0x176>
 8005208:	7863      	ldrb	r3, [r4, #1]
 800520a:	2b2a      	cmp	r3, #42	; 0x2a
 800520c:	d135      	bne.n	800527a <_vfiprintf_r+0x1ce>
 800520e:	9b03      	ldr	r3, [sp, #12]
 8005210:	1d1a      	adds	r2, r3, #4
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	9203      	str	r2, [sp, #12]
 8005216:	2b00      	cmp	r3, #0
 8005218:	bfb8      	it	lt
 800521a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800521e:	3402      	adds	r4, #2
 8005220:	9305      	str	r3, [sp, #20]
 8005222:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005308 <_vfiprintf_r+0x25c>
 8005226:	7821      	ldrb	r1, [r4, #0]
 8005228:	2203      	movs	r2, #3
 800522a:	4650      	mov	r0, sl
 800522c:	f7fa ffe8 	bl	8000200 <memchr>
 8005230:	b140      	cbz	r0, 8005244 <_vfiprintf_r+0x198>
 8005232:	2340      	movs	r3, #64	; 0x40
 8005234:	eba0 000a 	sub.w	r0, r0, sl
 8005238:	fa03 f000 	lsl.w	r0, r3, r0
 800523c:	9b04      	ldr	r3, [sp, #16]
 800523e:	4303      	orrs	r3, r0
 8005240:	3401      	adds	r4, #1
 8005242:	9304      	str	r3, [sp, #16]
 8005244:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005248:	482c      	ldr	r0, [pc, #176]	; (80052fc <_vfiprintf_r+0x250>)
 800524a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800524e:	2206      	movs	r2, #6
 8005250:	f7fa ffd6 	bl	8000200 <memchr>
 8005254:	2800      	cmp	r0, #0
 8005256:	d03f      	beq.n	80052d8 <_vfiprintf_r+0x22c>
 8005258:	4b29      	ldr	r3, [pc, #164]	; (8005300 <_vfiprintf_r+0x254>)
 800525a:	bb1b      	cbnz	r3, 80052a4 <_vfiprintf_r+0x1f8>
 800525c:	9b03      	ldr	r3, [sp, #12]
 800525e:	3307      	adds	r3, #7
 8005260:	f023 0307 	bic.w	r3, r3, #7
 8005264:	3308      	adds	r3, #8
 8005266:	9303      	str	r3, [sp, #12]
 8005268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800526a:	443b      	add	r3, r7
 800526c:	9309      	str	r3, [sp, #36]	; 0x24
 800526e:	e767      	b.n	8005140 <_vfiprintf_r+0x94>
 8005270:	fb0c 3202 	mla	r2, ip, r2, r3
 8005274:	460c      	mov	r4, r1
 8005276:	2001      	movs	r0, #1
 8005278:	e7a5      	b.n	80051c6 <_vfiprintf_r+0x11a>
 800527a:	2300      	movs	r3, #0
 800527c:	3401      	adds	r4, #1
 800527e:	9305      	str	r3, [sp, #20]
 8005280:	4619      	mov	r1, r3
 8005282:	f04f 0c0a 	mov.w	ip, #10
 8005286:	4620      	mov	r0, r4
 8005288:	f810 2b01 	ldrb.w	r2, [r0], #1
 800528c:	3a30      	subs	r2, #48	; 0x30
 800528e:	2a09      	cmp	r2, #9
 8005290:	d903      	bls.n	800529a <_vfiprintf_r+0x1ee>
 8005292:	2b00      	cmp	r3, #0
 8005294:	d0c5      	beq.n	8005222 <_vfiprintf_r+0x176>
 8005296:	9105      	str	r1, [sp, #20]
 8005298:	e7c3      	b.n	8005222 <_vfiprintf_r+0x176>
 800529a:	fb0c 2101 	mla	r1, ip, r1, r2
 800529e:	4604      	mov	r4, r0
 80052a0:	2301      	movs	r3, #1
 80052a2:	e7f0      	b.n	8005286 <_vfiprintf_r+0x1da>
 80052a4:	ab03      	add	r3, sp, #12
 80052a6:	9300      	str	r3, [sp, #0]
 80052a8:	462a      	mov	r2, r5
 80052aa:	4b16      	ldr	r3, [pc, #88]	; (8005304 <_vfiprintf_r+0x258>)
 80052ac:	a904      	add	r1, sp, #16
 80052ae:	4630      	mov	r0, r6
 80052b0:	f3af 8000 	nop.w
 80052b4:	4607      	mov	r7, r0
 80052b6:	1c78      	adds	r0, r7, #1
 80052b8:	d1d6      	bne.n	8005268 <_vfiprintf_r+0x1bc>
 80052ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80052bc:	07d9      	lsls	r1, r3, #31
 80052be:	d405      	bmi.n	80052cc <_vfiprintf_r+0x220>
 80052c0:	89ab      	ldrh	r3, [r5, #12]
 80052c2:	059a      	lsls	r2, r3, #22
 80052c4:	d402      	bmi.n	80052cc <_vfiprintf_r+0x220>
 80052c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80052c8:	f7ff fc23 	bl	8004b12 <__retarget_lock_release_recursive>
 80052cc:	89ab      	ldrh	r3, [r5, #12]
 80052ce:	065b      	lsls	r3, r3, #25
 80052d0:	f53f af12 	bmi.w	80050f8 <_vfiprintf_r+0x4c>
 80052d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80052d6:	e711      	b.n	80050fc <_vfiprintf_r+0x50>
 80052d8:	ab03      	add	r3, sp, #12
 80052da:	9300      	str	r3, [sp, #0]
 80052dc:	462a      	mov	r2, r5
 80052de:	4b09      	ldr	r3, [pc, #36]	; (8005304 <_vfiprintf_r+0x258>)
 80052e0:	a904      	add	r1, sp, #16
 80052e2:	4630      	mov	r0, r6
 80052e4:	f000 f880 	bl	80053e8 <_printf_i>
 80052e8:	e7e4      	b.n	80052b4 <_vfiprintf_r+0x208>
 80052ea:	bf00      	nop
 80052ec:	08005970 	.word	0x08005970
 80052f0:	08005990 	.word	0x08005990
 80052f4:	08005950 	.word	0x08005950
 80052f8:	080059b0 	.word	0x080059b0
 80052fc:	080059ba 	.word	0x080059ba
 8005300:	00000000 	.word	0x00000000
 8005304:	08005087 	.word	0x08005087
 8005308:	080059b6 	.word	0x080059b6

0800530c <_printf_common>:
 800530c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005310:	4616      	mov	r6, r2
 8005312:	4699      	mov	r9, r3
 8005314:	688a      	ldr	r2, [r1, #8]
 8005316:	690b      	ldr	r3, [r1, #16]
 8005318:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800531c:	4293      	cmp	r3, r2
 800531e:	bfb8      	it	lt
 8005320:	4613      	movlt	r3, r2
 8005322:	6033      	str	r3, [r6, #0]
 8005324:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005328:	4607      	mov	r7, r0
 800532a:	460c      	mov	r4, r1
 800532c:	b10a      	cbz	r2, 8005332 <_printf_common+0x26>
 800532e:	3301      	adds	r3, #1
 8005330:	6033      	str	r3, [r6, #0]
 8005332:	6823      	ldr	r3, [r4, #0]
 8005334:	0699      	lsls	r1, r3, #26
 8005336:	bf42      	ittt	mi
 8005338:	6833      	ldrmi	r3, [r6, #0]
 800533a:	3302      	addmi	r3, #2
 800533c:	6033      	strmi	r3, [r6, #0]
 800533e:	6825      	ldr	r5, [r4, #0]
 8005340:	f015 0506 	ands.w	r5, r5, #6
 8005344:	d106      	bne.n	8005354 <_printf_common+0x48>
 8005346:	f104 0a19 	add.w	sl, r4, #25
 800534a:	68e3      	ldr	r3, [r4, #12]
 800534c:	6832      	ldr	r2, [r6, #0]
 800534e:	1a9b      	subs	r3, r3, r2
 8005350:	42ab      	cmp	r3, r5
 8005352:	dc26      	bgt.n	80053a2 <_printf_common+0x96>
 8005354:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005358:	1e13      	subs	r3, r2, #0
 800535a:	6822      	ldr	r2, [r4, #0]
 800535c:	bf18      	it	ne
 800535e:	2301      	movne	r3, #1
 8005360:	0692      	lsls	r2, r2, #26
 8005362:	d42b      	bmi.n	80053bc <_printf_common+0xb0>
 8005364:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005368:	4649      	mov	r1, r9
 800536a:	4638      	mov	r0, r7
 800536c:	47c0      	blx	r8
 800536e:	3001      	adds	r0, #1
 8005370:	d01e      	beq.n	80053b0 <_printf_common+0xa4>
 8005372:	6823      	ldr	r3, [r4, #0]
 8005374:	68e5      	ldr	r5, [r4, #12]
 8005376:	6832      	ldr	r2, [r6, #0]
 8005378:	f003 0306 	and.w	r3, r3, #6
 800537c:	2b04      	cmp	r3, #4
 800537e:	bf08      	it	eq
 8005380:	1aad      	subeq	r5, r5, r2
 8005382:	68a3      	ldr	r3, [r4, #8]
 8005384:	6922      	ldr	r2, [r4, #16]
 8005386:	bf0c      	ite	eq
 8005388:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800538c:	2500      	movne	r5, #0
 800538e:	4293      	cmp	r3, r2
 8005390:	bfc4      	itt	gt
 8005392:	1a9b      	subgt	r3, r3, r2
 8005394:	18ed      	addgt	r5, r5, r3
 8005396:	2600      	movs	r6, #0
 8005398:	341a      	adds	r4, #26
 800539a:	42b5      	cmp	r5, r6
 800539c:	d11a      	bne.n	80053d4 <_printf_common+0xc8>
 800539e:	2000      	movs	r0, #0
 80053a0:	e008      	b.n	80053b4 <_printf_common+0xa8>
 80053a2:	2301      	movs	r3, #1
 80053a4:	4652      	mov	r2, sl
 80053a6:	4649      	mov	r1, r9
 80053a8:	4638      	mov	r0, r7
 80053aa:	47c0      	blx	r8
 80053ac:	3001      	adds	r0, #1
 80053ae:	d103      	bne.n	80053b8 <_printf_common+0xac>
 80053b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053b8:	3501      	adds	r5, #1
 80053ba:	e7c6      	b.n	800534a <_printf_common+0x3e>
 80053bc:	18e1      	adds	r1, r4, r3
 80053be:	1c5a      	adds	r2, r3, #1
 80053c0:	2030      	movs	r0, #48	; 0x30
 80053c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80053c6:	4422      	add	r2, r4
 80053c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80053cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80053d0:	3302      	adds	r3, #2
 80053d2:	e7c7      	b.n	8005364 <_printf_common+0x58>
 80053d4:	2301      	movs	r3, #1
 80053d6:	4622      	mov	r2, r4
 80053d8:	4649      	mov	r1, r9
 80053da:	4638      	mov	r0, r7
 80053dc:	47c0      	blx	r8
 80053de:	3001      	adds	r0, #1
 80053e0:	d0e6      	beq.n	80053b0 <_printf_common+0xa4>
 80053e2:	3601      	adds	r6, #1
 80053e4:	e7d9      	b.n	800539a <_printf_common+0x8e>
	...

080053e8 <_printf_i>:
 80053e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053ec:	7e0f      	ldrb	r7, [r1, #24]
 80053ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80053f0:	2f78      	cmp	r7, #120	; 0x78
 80053f2:	4691      	mov	r9, r2
 80053f4:	4680      	mov	r8, r0
 80053f6:	460c      	mov	r4, r1
 80053f8:	469a      	mov	sl, r3
 80053fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80053fe:	d807      	bhi.n	8005410 <_printf_i+0x28>
 8005400:	2f62      	cmp	r7, #98	; 0x62
 8005402:	d80a      	bhi.n	800541a <_printf_i+0x32>
 8005404:	2f00      	cmp	r7, #0
 8005406:	f000 80d8 	beq.w	80055ba <_printf_i+0x1d2>
 800540a:	2f58      	cmp	r7, #88	; 0x58
 800540c:	f000 80a3 	beq.w	8005556 <_printf_i+0x16e>
 8005410:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005414:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005418:	e03a      	b.n	8005490 <_printf_i+0xa8>
 800541a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800541e:	2b15      	cmp	r3, #21
 8005420:	d8f6      	bhi.n	8005410 <_printf_i+0x28>
 8005422:	a101      	add	r1, pc, #4	; (adr r1, 8005428 <_printf_i+0x40>)
 8005424:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005428:	08005481 	.word	0x08005481
 800542c:	08005495 	.word	0x08005495
 8005430:	08005411 	.word	0x08005411
 8005434:	08005411 	.word	0x08005411
 8005438:	08005411 	.word	0x08005411
 800543c:	08005411 	.word	0x08005411
 8005440:	08005495 	.word	0x08005495
 8005444:	08005411 	.word	0x08005411
 8005448:	08005411 	.word	0x08005411
 800544c:	08005411 	.word	0x08005411
 8005450:	08005411 	.word	0x08005411
 8005454:	080055a1 	.word	0x080055a1
 8005458:	080054c5 	.word	0x080054c5
 800545c:	08005583 	.word	0x08005583
 8005460:	08005411 	.word	0x08005411
 8005464:	08005411 	.word	0x08005411
 8005468:	080055c3 	.word	0x080055c3
 800546c:	08005411 	.word	0x08005411
 8005470:	080054c5 	.word	0x080054c5
 8005474:	08005411 	.word	0x08005411
 8005478:	08005411 	.word	0x08005411
 800547c:	0800558b 	.word	0x0800558b
 8005480:	682b      	ldr	r3, [r5, #0]
 8005482:	1d1a      	adds	r2, r3, #4
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	602a      	str	r2, [r5, #0]
 8005488:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800548c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005490:	2301      	movs	r3, #1
 8005492:	e0a3      	b.n	80055dc <_printf_i+0x1f4>
 8005494:	6820      	ldr	r0, [r4, #0]
 8005496:	6829      	ldr	r1, [r5, #0]
 8005498:	0606      	lsls	r6, r0, #24
 800549a:	f101 0304 	add.w	r3, r1, #4
 800549e:	d50a      	bpl.n	80054b6 <_printf_i+0xce>
 80054a0:	680e      	ldr	r6, [r1, #0]
 80054a2:	602b      	str	r3, [r5, #0]
 80054a4:	2e00      	cmp	r6, #0
 80054a6:	da03      	bge.n	80054b0 <_printf_i+0xc8>
 80054a8:	232d      	movs	r3, #45	; 0x2d
 80054aa:	4276      	negs	r6, r6
 80054ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054b0:	485e      	ldr	r0, [pc, #376]	; (800562c <_printf_i+0x244>)
 80054b2:	230a      	movs	r3, #10
 80054b4:	e019      	b.n	80054ea <_printf_i+0x102>
 80054b6:	680e      	ldr	r6, [r1, #0]
 80054b8:	602b      	str	r3, [r5, #0]
 80054ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 80054be:	bf18      	it	ne
 80054c0:	b236      	sxthne	r6, r6
 80054c2:	e7ef      	b.n	80054a4 <_printf_i+0xbc>
 80054c4:	682b      	ldr	r3, [r5, #0]
 80054c6:	6820      	ldr	r0, [r4, #0]
 80054c8:	1d19      	adds	r1, r3, #4
 80054ca:	6029      	str	r1, [r5, #0]
 80054cc:	0601      	lsls	r1, r0, #24
 80054ce:	d501      	bpl.n	80054d4 <_printf_i+0xec>
 80054d0:	681e      	ldr	r6, [r3, #0]
 80054d2:	e002      	b.n	80054da <_printf_i+0xf2>
 80054d4:	0646      	lsls	r6, r0, #25
 80054d6:	d5fb      	bpl.n	80054d0 <_printf_i+0xe8>
 80054d8:	881e      	ldrh	r6, [r3, #0]
 80054da:	4854      	ldr	r0, [pc, #336]	; (800562c <_printf_i+0x244>)
 80054dc:	2f6f      	cmp	r7, #111	; 0x6f
 80054de:	bf0c      	ite	eq
 80054e0:	2308      	moveq	r3, #8
 80054e2:	230a      	movne	r3, #10
 80054e4:	2100      	movs	r1, #0
 80054e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80054ea:	6865      	ldr	r5, [r4, #4]
 80054ec:	60a5      	str	r5, [r4, #8]
 80054ee:	2d00      	cmp	r5, #0
 80054f0:	bfa2      	ittt	ge
 80054f2:	6821      	ldrge	r1, [r4, #0]
 80054f4:	f021 0104 	bicge.w	r1, r1, #4
 80054f8:	6021      	strge	r1, [r4, #0]
 80054fa:	b90e      	cbnz	r6, 8005500 <_printf_i+0x118>
 80054fc:	2d00      	cmp	r5, #0
 80054fe:	d04d      	beq.n	800559c <_printf_i+0x1b4>
 8005500:	4615      	mov	r5, r2
 8005502:	fbb6 f1f3 	udiv	r1, r6, r3
 8005506:	fb03 6711 	mls	r7, r3, r1, r6
 800550a:	5dc7      	ldrb	r7, [r0, r7]
 800550c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005510:	4637      	mov	r7, r6
 8005512:	42bb      	cmp	r3, r7
 8005514:	460e      	mov	r6, r1
 8005516:	d9f4      	bls.n	8005502 <_printf_i+0x11a>
 8005518:	2b08      	cmp	r3, #8
 800551a:	d10b      	bne.n	8005534 <_printf_i+0x14c>
 800551c:	6823      	ldr	r3, [r4, #0]
 800551e:	07de      	lsls	r6, r3, #31
 8005520:	d508      	bpl.n	8005534 <_printf_i+0x14c>
 8005522:	6923      	ldr	r3, [r4, #16]
 8005524:	6861      	ldr	r1, [r4, #4]
 8005526:	4299      	cmp	r1, r3
 8005528:	bfde      	ittt	le
 800552a:	2330      	movle	r3, #48	; 0x30
 800552c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005530:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005534:	1b52      	subs	r2, r2, r5
 8005536:	6122      	str	r2, [r4, #16]
 8005538:	f8cd a000 	str.w	sl, [sp]
 800553c:	464b      	mov	r3, r9
 800553e:	aa03      	add	r2, sp, #12
 8005540:	4621      	mov	r1, r4
 8005542:	4640      	mov	r0, r8
 8005544:	f7ff fee2 	bl	800530c <_printf_common>
 8005548:	3001      	adds	r0, #1
 800554a:	d14c      	bne.n	80055e6 <_printf_i+0x1fe>
 800554c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005550:	b004      	add	sp, #16
 8005552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005556:	4835      	ldr	r0, [pc, #212]	; (800562c <_printf_i+0x244>)
 8005558:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800555c:	6829      	ldr	r1, [r5, #0]
 800555e:	6823      	ldr	r3, [r4, #0]
 8005560:	f851 6b04 	ldr.w	r6, [r1], #4
 8005564:	6029      	str	r1, [r5, #0]
 8005566:	061d      	lsls	r5, r3, #24
 8005568:	d514      	bpl.n	8005594 <_printf_i+0x1ac>
 800556a:	07df      	lsls	r7, r3, #31
 800556c:	bf44      	itt	mi
 800556e:	f043 0320 	orrmi.w	r3, r3, #32
 8005572:	6023      	strmi	r3, [r4, #0]
 8005574:	b91e      	cbnz	r6, 800557e <_printf_i+0x196>
 8005576:	6823      	ldr	r3, [r4, #0]
 8005578:	f023 0320 	bic.w	r3, r3, #32
 800557c:	6023      	str	r3, [r4, #0]
 800557e:	2310      	movs	r3, #16
 8005580:	e7b0      	b.n	80054e4 <_printf_i+0xfc>
 8005582:	6823      	ldr	r3, [r4, #0]
 8005584:	f043 0320 	orr.w	r3, r3, #32
 8005588:	6023      	str	r3, [r4, #0]
 800558a:	2378      	movs	r3, #120	; 0x78
 800558c:	4828      	ldr	r0, [pc, #160]	; (8005630 <_printf_i+0x248>)
 800558e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005592:	e7e3      	b.n	800555c <_printf_i+0x174>
 8005594:	0659      	lsls	r1, r3, #25
 8005596:	bf48      	it	mi
 8005598:	b2b6      	uxthmi	r6, r6
 800559a:	e7e6      	b.n	800556a <_printf_i+0x182>
 800559c:	4615      	mov	r5, r2
 800559e:	e7bb      	b.n	8005518 <_printf_i+0x130>
 80055a0:	682b      	ldr	r3, [r5, #0]
 80055a2:	6826      	ldr	r6, [r4, #0]
 80055a4:	6961      	ldr	r1, [r4, #20]
 80055a6:	1d18      	adds	r0, r3, #4
 80055a8:	6028      	str	r0, [r5, #0]
 80055aa:	0635      	lsls	r5, r6, #24
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	d501      	bpl.n	80055b4 <_printf_i+0x1cc>
 80055b0:	6019      	str	r1, [r3, #0]
 80055b2:	e002      	b.n	80055ba <_printf_i+0x1d2>
 80055b4:	0670      	lsls	r0, r6, #25
 80055b6:	d5fb      	bpl.n	80055b0 <_printf_i+0x1c8>
 80055b8:	8019      	strh	r1, [r3, #0]
 80055ba:	2300      	movs	r3, #0
 80055bc:	6123      	str	r3, [r4, #16]
 80055be:	4615      	mov	r5, r2
 80055c0:	e7ba      	b.n	8005538 <_printf_i+0x150>
 80055c2:	682b      	ldr	r3, [r5, #0]
 80055c4:	1d1a      	adds	r2, r3, #4
 80055c6:	602a      	str	r2, [r5, #0]
 80055c8:	681d      	ldr	r5, [r3, #0]
 80055ca:	6862      	ldr	r2, [r4, #4]
 80055cc:	2100      	movs	r1, #0
 80055ce:	4628      	mov	r0, r5
 80055d0:	f7fa fe16 	bl	8000200 <memchr>
 80055d4:	b108      	cbz	r0, 80055da <_printf_i+0x1f2>
 80055d6:	1b40      	subs	r0, r0, r5
 80055d8:	6060      	str	r0, [r4, #4]
 80055da:	6863      	ldr	r3, [r4, #4]
 80055dc:	6123      	str	r3, [r4, #16]
 80055de:	2300      	movs	r3, #0
 80055e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055e4:	e7a8      	b.n	8005538 <_printf_i+0x150>
 80055e6:	6923      	ldr	r3, [r4, #16]
 80055e8:	462a      	mov	r2, r5
 80055ea:	4649      	mov	r1, r9
 80055ec:	4640      	mov	r0, r8
 80055ee:	47d0      	blx	sl
 80055f0:	3001      	adds	r0, #1
 80055f2:	d0ab      	beq.n	800554c <_printf_i+0x164>
 80055f4:	6823      	ldr	r3, [r4, #0]
 80055f6:	079b      	lsls	r3, r3, #30
 80055f8:	d413      	bmi.n	8005622 <_printf_i+0x23a>
 80055fa:	68e0      	ldr	r0, [r4, #12]
 80055fc:	9b03      	ldr	r3, [sp, #12]
 80055fe:	4298      	cmp	r0, r3
 8005600:	bfb8      	it	lt
 8005602:	4618      	movlt	r0, r3
 8005604:	e7a4      	b.n	8005550 <_printf_i+0x168>
 8005606:	2301      	movs	r3, #1
 8005608:	4632      	mov	r2, r6
 800560a:	4649      	mov	r1, r9
 800560c:	4640      	mov	r0, r8
 800560e:	47d0      	blx	sl
 8005610:	3001      	adds	r0, #1
 8005612:	d09b      	beq.n	800554c <_printf_i+0x164>
 8005614:	3501      	adds	r5, #1
 8005616:	68e3      	ldr	r3, [r4, #12]
 8005618:	9903      	ldr	r1, [sp, #12]
 800561a:	1a5b      	subs	r3, r3, r1
 800561c:	42ab      	cmp	r3, r5
 800561e:	dcf2      	bgt.n	8005606 <_printf_i+0x21e>
 8005620:	e7eb      	b.n	80055fa <_printf_i+0x212>
 8005622:	2500      	movs	r5, #0
 8005624:	f104 0619 	add.w	r6, r4, #25
 8005628:	e7f5      	b.n	8005616 <_printf_i+0x22e>
 800562a:	bf00      	nop
 800562c:	080059c1 	.word	0x080059c1
 8005630:	080059d2 	.word	0x080059d2

08005634 <_sbrk_r>:
 8005634:	b538      	push	{r3, r4, r5, lr}
 8005636:	4d06      	ldr	r5, [pc, #24]	; (8005650 <_sbrk_r+0x1c>)
 8005638:	2300      	movs	r3, #0
 800563a:	4604      	mov	r4, r0
 800563c:	4608      	mov	r0, r1
 800563e:	602b      	str	r3, [r5, #0]
 8005640:	f7fb fc88 	bl	8000f54 <_sbrk>
 8005644:	1c43      	adds	r3, r0, #1
 8005646:	d102      	bne.n	800564e <_sbrk_r+0x1a>
 8005648:	682b      	ldr	r3, [r5, #0]
 800564a:	b103      	cbz	r3, 800564e <_sbrk_r+0x1a>
 800564c:	6023      	str	r3, [r4, #0]
 800564e:	bd38      	pop	{r3, r4, r5, pc}
 8005650:	2000019c 	.word	0x2000019c

08005654 <__sread>:
 8005654:	b510      	push	{r4, lr}
 8005656:	460c      	mov	r4, r1
 8005658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800565c:	f000 f8f8 	bl	8005850 <_read_r>
 8005660:	2800      	cmp	r0, #0
 8005662:	bfab      	itete	ge
 8005664:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005666:	89a3      	ldrhlt	r3, [r4, #12]
 8005668:	181b      	addge	r3, r3, r0
 800566a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800566e:	bfac      	ite	ge
 8005670:	6563      	strge	r3, [r4, #84]	; 0x54
 8005672:	81a3      	strhlt	r3, [r4, #12]
 8005674:	bd10      	pop	{r4, pc}

08005676 <__swrite>:
 8005676:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800567a:	461f      	mov	r7, r3
 800567c:	898b      	ldrh	r3, [r1, #12]
 800567e:	05db      	lsls	r3, r3, #23
 8005680:	4605      	mov	r5, r0
 8005682:	460c      	mov	r4, r1
 8005684:	4616      	mov	r6, r2
 8005686:	d505      	bpl.n	8005694 <__swrite+0x1e>
 8005688:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800568c:	2302      	movs	r3, #2
 800568e:	2200      	movs	r2, #0
 8005690:	f000 f868 	bl	8005764 <_lseek_r>
 8005694:	89a3      	ldrh	r3, [r4, #12]
 8005696:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800569a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800569e:	81a3      	strh	r3, [r4, #12]
 80056a0:	4632      	mov	r2, r6
 80056a2:	463b      	mov	r3, r7
 80056a4:	4628      	mov	r0, r5
 80056a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056aa:	f000 b817 	b.w	80056dc <_write_r>

080056ae <__sseek>:
 80056ae:	b510      	push	{r4, lr}
 80056b0:	460c      	mov	r4, r1
 80056b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056b6:	f000 f855 	bl	8005764 <_lseek_r>
 80056ba:	1c43      	adds	r3, r0, #1
 80056bc:	89a3      	ldrh	r3, [r4, #12]
 80056be:	bf15      	itete	ne
 80056c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80056c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80056c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80056ca:	81a3      	strheq	r3, [r4, #12]
 80056cc:	bf18      	it	ne
 80056ce:	81a3      	strhne	r3, [r4, #12]
 80056d0:	bd10      	pop	{r4, pc}

080056d2 <__sclose>:
 80056d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056d6:	f000 b813 	b.w	8005700 <_close_r>
	...

080056dc <_write_r>:
 80056dc:	b538      	push	{r3, r4, r5, lr}
 80056de:	4d07      	ldr	r5, [pc, #28]	; (80056fc <_write_r+0x20>)
 80056e0:	4604      	mov	r4, r0
 80056e2:	4608      	mov	r0, r1
 80056e4:	4611      	mov	r1, r2
 80056e6:	2200      	movs	r2, #0
 80056e8:	602a      	str	r2, [r5, #0]
 80056ea:	461a      	mov	r2, r3
 80056ec:	f7fb fbe8 	bl	8000ec0 <_write>
 80056f0:	1c43      	adds	r3, r0, #1
 80056f2:	d102      	bne.n	80056fa <_write_r+0x1e>
 80056f4:	682b      	ldr	r3, [r5, #0]
 80056f6:	b103      	cbz	r3, 80056fa <_write_r+0x1e>
 80056f8:	6023      	str	r3, [r4, #0]
 80056fa:	bd38      	pop	{r3, r4, r5, pc}
 80056fc:	2000019c 	.word	0x2000019c

08005700 <_close_r>:
 8005700:	b538      	push	{r3, r4, r5, lr}
 8005702:	4d06      	ldr	r5, [pc, #24]	; (800571c <_close_r+0x1c>)
 8005704:	2300      	movs	r3, #0
 8005706:	4604      	mov	r4, r0
 8005708:	4608      	mov	r0, r1
 800570a:	602b      	str	r3, [r5, #0]
 800570c:	f7fb fbee 	bl	8000eec <_close>
 8005710:	1c43      	adds	r3, r0, #1
 8005712:	d102      	bne.n	800571a <_close_r+0x1a>
 8005714:	682b      	ldr	r3, [r5, #0]
 8005716:	b103      	cbz	r3, 800571a <_close_r+0x1a>
 8005718:	6023      	str	r3, [r4, #0]
 800571a:	bd38      	pop	{r3, r4, r5, pc}
 800571c:	2000019c 	.word	0x2000019c

08005720 <_fstat_r>:
 8005720:	b538      	push	{r3, r4, r5, lr}
 8005722:	4d07      	ldr	r5, [pc, #28]	; (8005740 <_fstat_r+0x20>)
 8005724:	2300      	movs	r3, #0
 8005726:	4604      	mov	r4, r0
 8005728:	4608      	mov	r0, r1
 800572a:	4611      	mov	r1, r2
 800572c:	602b      	str	r3, [r5, #0]
 800572e:	f7fb fbe9 	bl	8000f04 <_fstat>
 8005732:	1c43      	adds	r3, r0, #1
 8005734:	d102      	bne.n	800573c <_fstat_r+0x1c>
 8005736:	682b      	ldr	r3, [r5, #0]
 8005738:	b103      	cbz	r3, 800573c <_fstat_r+0x1c>
 800573a:	6023      	str	r3, [r4, #0]
 800573c:	bd38      	pop	{r3, r4, r5, pc}
 800573e:	bf00      	nop
 8005740:	2000019c 	.word	0x2000019c

08005744 <_isatty_r>:
 8005744:	b538      	push	{r3, r4, r5, lr}
 8005746:	4d06      	ldr	r5, [pc, #24]	; (8005760 <_isatty_r+0x1c>)
 8005748:	2300      	movs	r3, #0
 800574a:	4604      	mov	r4, r0
 800574c:	4608      	mov	r0, r1
 800574e:	602b      	str	r3, [r5, #0]
 8005750:	f7fb fbe8 	bl	8000f24 <_isatty>
 8005754:	1c43      	adds	r3, r0, #1
 8005756:	d102      	bne.n	800575e <_isatty_r+0x1a>
 8005758:	682b      	ldr	r3, [r5, #0]
 800575a:	b103      	cbz	r3, 800575e <_isatty_r+0x1a>
 800575c:	6023      	str	r3, [r4, #0]
 800575e:	bd38      	pop	{r3, r4, r5, pc}
 8005760:	2000019c 	.word	0x2000019c

08005764 <_lseek_r>:
 8005764:	b538      	push	{r3, r4, r5, lr}
 8005766:	4d07      	ldr	r5, [pc, #28]	; (8005784 <_lseek_r+0x20>)
 8005768:	4604      	mov	r4, r0
 800576a:	4608      	mov	r0, r1
 800576c:	4611      	mov	r1, r2
 800576e:	2200      	movs	r2, #0
 8005770:	602a      	str	r2, [r5, #0]
 8005772:	461a      	mov	r2, r3
 8005774:	f7fb fbe1 	bl	8000f3a <_lseek>
 8005778:	1c43      	adds	r3, r0, #1
 800577a:	d102      	bne.n	8005782 <_lseek_r+0x1e>
 800577c:	682b      	ldr	r3, [r5, #0]
 800577e:	b103      	cbz	r3, 8005782 <_lseek_r+0x1e>
 8005780:	6023      	str	r3, [r4, #0]
 8005782:	bd38      	pop	{r3, r4, r5, pc}
 8005784:	2000019c 	.word	0x2000019c

08005788 <memcpy>:
 8005788:	440a      	add	r2, r1
 800578a:	4291      	cmp	r1, r2
 800578c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005790:	d100      	bne.n	8005794 <memcpy+0xc>
 8005792:	4770      	bx	lr
 8005794:	b510      	push	{r4, lr}
 8005796:	f811 4b01 	ldrb.w	r4, [r1], #1
 800579a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800579e:	4291      	cmp	r1, r2
 80057a0:	d1f9      	bne.n	8005796 <memcpy+0xe>
 80057a2:	bd10      	pop	{r4, pc}

080057a4 <memmove>:
 80057a4:	4288      	cmp	r0, r1
 80057a6:	b510      	push	{r4, lr}
 80057a8:	eb01 0402 	add.w	r4, r1, r2
 80057ac:	d902      	bls.n	80057b4 <memmove+0x10>
 80057ae:	4284      	cmp	r4, r0
 80057b0:	4623      	mov	r3, r4
 80057b2:	d807      	bhi.n	80057c4 <memmove+0x20>
 80057b4:	1e43      	subs	r3, r0, #1
 80057b6:	42a1      	cmp	r1, r4
 80057b8:	d008      	beq.n	80057cc <memmove+0x28>
 80057ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80057be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80057c2:	e7f8      	b.n	80057b6 <memmove+0x12>
 80057c4:	4402      	add	r2, r0
 80057c6:	4601      	mov	r1, r0
 80057c8:	428a      	cmp	r2, r1
 80057ca:	d100      	bne.n	80057ce <memmove+0x2a>
 80057cc:	bd10      	pop	{r4, pc}
 80057ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80057d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80057d6:	e7f7      	b.n	80057c8 <memmove+0x24>

080057d8 <__malloc_lock>:
 80057d8:	4801      	ldr	r0, [pc, #4]	; (80057e0 <__malloc_lock+0x8>)
 80057da:	f7ff b999 	b.w	8004b10 <__retarget_lock_acquire_recursive>
 80057de:	bf00      	nop
 80057e0:	20000190 	.word	0x20000190

080057e4 <__malloc_unlock>:
 80057e4:	4801      	ldr	r0, [pc, #4]	; (80057ec <__malloc_unlock+0x8>)
 80057e6:	f7ff b994 	b.w	8004b12 <__retarget_lock_release_recursive>
 80057ea:	bf00      	nop
 80057ec:	20000190 	.word	0x20000190

080057f0 <_realloc_r>:
 80057f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057f4:	4680      	mov	r8, r0
 80057f6:	4614      	mov	r4, r2
 80057f8:	460e      	mov	r6, r1
 80057fa:	b921      	cbnz	r1, 8005806 <_realloc_r+0x16>
 80057fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005800:	4611      	mov	r1, r2
 8005802:	f7ff ba59 	b.w	8004cb8 <_malloc_r>
 8005806:	b92a      	cbnz	r2, 8005814 <_realloc_r+0x24>
 8005808:	f7ff f9ea 	bl	8004be0 <_free_r>
 800580c:	4625      	mov	r5, r4
 800580e:	4628      	mov	r0, r5
 8005810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005814:	f000 f82e 	bl	8005874 <_malloc_usable_size_r>
 8005818:	4284      	cmp	r4, r0
 800581a:	4607      	mov	r7, r0
 800581c:	d802      	bhi.n	8005824 <_realloc_r+0x34>
 800581e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005822:	d812      	bhi.n	800584a <_realloc_r+0x5a>
 8005824:	4621      	mov	r1, r4
 8005826:	4640      	mov	r0, r8
 8005828:	f7ff fa46 	bl	8004cb8 <_malloc_r>
 800582c:	4605      	mov	r5, r0
 800582e:	2800      	cmp	r0, #0
 8005830:	d0ed      	beq.n	800580e <_realloc_r+0x1e>
 8005832:	42bc      	cmp	r4, r7
 8005834:	4622      	mov	r2, r4
 8005836:	4631      	mov	r1, r6
 8005838:	bf28      	it	cs
 800583a:	463a      	movcs	r2, r7
 800583c:	f7ff ffa4 	bl	8005788 <memcpy>
 8005840:	4631      	mov	r1, r6
 8005842:	4640      	mov	r0, r8
 8005844:	f7ff f9cc 	bl	8004be0 <_free_r>
 8005848:	e7e1      	b.n	800580e <_realloc_r+0x1e>
 800584a:	4635      	mov	r5, r6
 800584c:	e7df      	b.n	800580e <_realloc_r+0x1e>
	...

08005850 <_read_r>:
 8005850:	b538      	push	{r3, r4, r5, lr}
 8005852:	4d07      	ldr	r5, [pc, #28]	; (8005870 <_read_r+0x20>)
 8005854:	4604      	mov	r4, r0
 8005856:	4608      	mov	r0, r1
 8005858:	4611      	mov	r1, r2
 800585a:	2200      	movs	r2, #0
 800585c:	602a      	str	r2, [r5, #0]
 800585e:	461a      	mov	r2, r3
 8005860:	f7fb fb10 	bl	8000e84 <_read>
 8005864:	1c43      	adds	r3, r0, #1
 8005866:	d102      	bne.n	800586e <_read_r+0x1e>
 8005868:	682b      	ldr	r3, [r5, #0]
 800586a:	b103      	cbz	r3, 800586e <_read_r+0x1e>
 800586c:	6023      	str	r3, [r4, #0]
 800586e:	bd38      	pop	{r3, r4, r5, pc}
 8005870:	2000019c 	.word	0x2000019c

08005874 <_malloc_usable_size_r>:
 8005874:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005878:	1f18      	subs	r0, r3, #4
 800587a:	2b00      	cmp	r3, #0
 800587c:	bfbc      	itt	lt
 800587e:	580b      	ldrlt	r3, [r1, r0]
 8005880:	18c0      	addlt	r0, r0, r3
 8005882:	4770      	bx	lr

08005884 <_init>:
 8005884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005886:	bf00      	nop
 8005888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800588a:	bc08      	pop	{r3}
 800588c:	469e      	mov	lr, r3
 800588e:	4770      	bx	lr

08005890 <_fini>:
 8005890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005892:	bf00      	nop
 8005894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005896:	bc08      	pop	{r3}
 8005898:	469e      	mov	lr, r3
 800589a:	4770      	bx	lr
