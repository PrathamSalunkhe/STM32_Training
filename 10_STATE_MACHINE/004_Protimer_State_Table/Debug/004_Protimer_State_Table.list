
004_Protimer_State_Table.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057d4  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08005994  08005994  00015994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005adc  08005adc  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08005adc  08005adc  00015adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ae4  08005ae4  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ae4  08005ae4  00015ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ae8  08005ae8  00015ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08005aec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  200000fc  08005be8  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000230  08005be8  00020230  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d93  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002444  00000000  00000000  00033ebf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001108  00000000  00000000  00036308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001030  00000000  00000000  00037410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b2e9  00000000  00000000  00038440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012fe7  00000000  00000000  00063729  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001094a9  00000000  00000000  00076710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017fbb9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051f0  00000000  00000000  0017fc0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200000fc 	.word	0x200000fc
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800597c 	.word	0x0800597c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000100 	.word	0x20000100
 80001fc:	0800597c 	.word	0x0800597c

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <protimer_init>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void protimer_init(protimer_t *mobj)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
    event_t ee;
    e_handler_t ehandler;
    ee.sig = ENTRY;
 80005ac:	2305      	movs	r3, #5
 80005ae:	723b      	strb	r3, [r7, #8]
    mobj->active_state = IDLE;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	2200      	movs	r2, #0
 80005b4:	731a      	strb	r2, [r3, #12]
    mobj->pro_time = 0;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	2200      	movs	r2, #0
 80005ba:	609a      	str	r2, [r3, #8]
    ehandler = (e_handler_t)mobj->state_table[IDLE * MAX_SIGNALS + ENTRY];
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	691b      	ldr	r3, [r3, #16]
 80005c0:	3314      	adds	r3, #20
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	60fb      	str	r3, [r7, #12]
    (*ehandler)(mobj, &ee);
 80005c6:	f107 0208 	add.w	r2, r7, #8
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	4611      	mov	r1, r2
 80005ce:	6878      	ldr	r0, [r7, #4]
 80005d0:	4798      	blx	r3
}
 80005d2:	bf00      	nop
 80005d4:	3710      	adds	r7, #16
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
	...

080005dc <protimer_state_table_init>:

static void protimer_state_table_init(protimer_t *const mobj)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
			[COUNTDOWN] = {NULL, NULL, &COUNTDOWN_Time_Tick, &COUNTDOWN_Start_Pause, &COUNTDOWN_Abrt, NULL, &COUNTDOWN_Exit},
			[PAUSE] = {&PAUSE_Inc_Time, &PAUSE_Dec_Time, NULL, &PAUSE_Start_Pause, &PAUSE_Abrt, &PAUSE_Entry, &PAUSE_Exit},
			[STAT] = {NULL, NULL, &STAT_Time_Tick, NULL, NULL, &STAT_Entry, &STAT_Exit}
	};

	mobj->state_table = (uintptr_t *)&protimer_state_table[0][0];
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	4a04      	ldr	r2, [pc, #16]	; (80005f8 <protimer_state_table_init+0x1c>)
 80005e8:	611a      	str	r2, [r3, #16]
}
 80005ea:	bf00      	nop
 80005ec:	370c      	adds	r7, #12
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	20000000 	.word	0x20000000

080005fc <IDLE_Entry>:

////////////////* EVENT HANDLERS */////////////////////////

event_status_t IDLE_Entry(protimer_t *const mobj, event_t const *const e)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	6039      	str	r1, [r7, #0]
	mobj->curr_time = 0;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
	mobj->elapsed_time = 0;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	2200      	movs	r2, #0
 8000610:	605a      	str	r2, [r3, #4]
	display_time(0);
 8000612:	2000      	movs	r0, #0
 8000614:	f000 f9c2 	bl	800099c <display_time>
	display_message("Set Time");
 8000618:	4803      	ldr	r0, [pc, #12]	; (8000628 <IDLE_Entry+0x2c>)
 800061a:	f000 f9ed 	bl	80009f8 <display_message>
	return EVENT_HANDLED;
 800061e:	2300      	movs	r3, #0
}
 8000620:	4618      	mov	r0, r3
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	08005994 	.word	0x08005994

0800062c <IDLE_Exit>:

event_status_t IDLE_Exit(protimer_t *const mobj, event_t const *const e)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	6039      	str	r1, [r7, #0]
	display_clear();
 8000636:	f000 f9ed 	bl	8000a14 <display_clear>
	return EVENT_HANDLED;
 800063a:	2300      	movs	r3, #0
}
 800063c:	4618      	mov	r0, r3
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}

08000644 <IDLE_Inc_Time>:

event_status_t IDLE_Inc_Time(protimer_t *const mobj, event_t const *const e)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	6039      	str	r1, [r7, #0]
	mobj->curr_time += 60;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	601a      	str	r2, [r3, #0]
	mobj->active_state = TIME_SET;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	2201      	movs	r2, #1
 800065e:	731a      	strb	r2, [r3, #12]
	return EVENT_TRANSITION;
 8000660:	2302      	movs	r3, #2
}
 8000662:	4618      	mov	r0, r3
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr

0800066e <IDLE_Start_Pause>:

event_status_t IDLE_Start_Pause(protimer_t *const mobj, event_t const *const e)
{
 800066e:	b480      	push	{r7}
 8000670:	b083      	sub	sp, #12
 8000672:	af00      	add	r7, sp, #0
 8000674:	6078      	str	r0, [r7, #4]
 8000676:	6039      	str	r1, [r7, #0]
	mobj->active_state = STAT;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	2204      	movs	r2, #4
 800067c:	731a      	strb	r2, [r3, #12]
	return EVENT_TRANSITION;
 800067e:	2302      	movs	r3, #2
}
 8000680:	4618      	mov	r0, r3
 8000682:	370c      	adds	r7, #12
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr

0800068c <IDLE_Time_Tick>:

event_status_t IDLE_Time_Tick(protimer_t *const mobj, event_t const *const e)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	6039      	str	r1, [r7, #0]
	if(((protimer_tick_event_t *)(e))->ss == 5)
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	785b      	ldrb	r3, [r3, #1]
 800069a:	2b05      	cmp	r3, #5
 800069c:	d101      	bne.n	80006a2 <IDLE_Time_Tick+0x16>
	{
//				do_beep();
		return EVENT_HANDLED;
 800069e:	2300      	movs	r3, #0
 80006a0:	e000      	b.n	80006a4 <IDLE_Time_Tick+0x18>
	}
	return EVENT_IGNORED;
 80006a2:	2301      	movs	r3, #1
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <TIME_SET_Entry>:

event_status_t TIME_SET_Entry(protimer_t *const mobj, event_t const *const e)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	6039      	str	r1, [r7, #0]
    display_time(mobj->curr_time);
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 f96c 	bl	800099c <display_time>
    return EVENT_HANDLED;
 80006c4:	2300      	movs	r3, #0
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}

080006ce <TIME_SET_Exit>:

event_status_t TIME_SET_Exit(protimer_t *const mobj, event_t const *const e)
{
 80006ce:	b580      	push	{r7, lr}
 80006d0:	b082      	sub	sp, #8
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	6078      	str	r0, [r7, #4]
 80006d6:	6039      	str	r1, [r7, #0]
    display_clear();
 80006d8:	f000 f99c 	bl	8000a14 <display_clear>
    return EVENT_HANDLED;
 80006dc:	2300      	movs	r3, #0
}
 80006de:	4618      	mov	r0, r3
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}

080006e6 <TIME_SET_Inc_Time>:

event_status_t TIME_SET_Inc_Time(protimer_t *const mobj, event_t const *const e)
{
 80006e6:	b580      	push	{r7, lr}
 80006e8:	b082      	sub	sp, #8
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	6078      	str	r0, [r7, #4]
 80006ee:	6039      	str	r1, [r7, #0]
    mobj->curr_time += 60;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	601a      	str	r2, [r3, #0]
    display_time(mobj->curr_time);
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4618      	mov	r0, r3
 8000702:	f000 f94b 	bl	800099c <display_time>
    return EVENT_HANDLED;
 8000706:	2300      	movs	r3, #0
}
 8000708:	4618      	mov	r0, r3
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <TIME_SET_Dec_Time>:

event_status_t TIME_SET_Dec_Time(protimer_t *const mobj, event_t const *const e)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	6039      	str	r1, [r7, #0]
    if(mobj->curr_time >=60){
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	2b3b      	cmp	r3, #59	; 0x3b
 8000720:	d90c      	bls.n	800073c <TIME_SET_Dec_Time+0x2c>
        mobj->curr_time -= 60;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	f1a3 023c 	sub.w	r2, r3, #60	; 0x3c
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	601a      	str	r2, [r3, #0]
        display_time(mobj->curr_time);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4618      	mov	r0, r3
 8000734:	f000 f932 	bl	800099c <display_time>
        return EVENT_HANDLED;
 8000738:	2300      	movs	r3, #0
 800073a:	e000      	b.n	800073e <TIME_SET_Dec_Time+0x2e>
    }
    return EVENT_IGNORED;
 800073c:	2301      	movs	r3, #1
}
 800073e:	4618      	mov	r0, r3
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}

08000746 <TIME_SET_Start_Pause>:

event_status_t TIME_SET_Start_Pause(protimer_t *const mobj, event_t const *const e)
{
 8000746:	b480      	push	{r7}
 8000748:	b083      	sub	sp, #12
 800074a:	af00      	add	r7, sp, #0
 800074c:	6078      	str	r0, [r7, #4]
 800074e:	6039      	str	r1, [r7, #0]
    if(mobj->curr_time >=60){
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2b3b      	cmp	r3, #59	; 0x3b
 8000756:	d904      	bls.n	8000762 <TIME_SET_Start_Pause+0x1c>
        mobj->active_state = COUNTDOWN;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	2202      	movs	r2, #2
 800075c:	731a      	strb	r2, [r3, #12]
        return EVENT_TRANSITION;
 800075e:	2302      	movs	r3, #2
 8000760:	e000      	b.n	8000764 <TIME_SET_Start_Pause+0x1e>
    }
    return EVENT_IGNORED;
 8000762:	2301      	movs	r3, #1
}
 8000764:	4618      	mov	r0, r3
 8000766:	370c      	adds	r7, #12
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr

08000770 <TIME_SET_Abrt>:

event_status_t TIME_SET_Abrt(protimer_t *const mobj, event_t const *const e)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
 8000778:	6039      	str	r1, [r7, #0]
    mobj->active_state = IDLE;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	2200      	movs	r2, #0
 800077e:	731a      	strb	r2, [r3, #12]
    return EVENT_TRANSITION;
 8000780:	2302      	movs	r3, #2
}
 8000782:	4618      	mov	r0, r3
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr

0800078e <COUNTDOWN_Time_Tick>:


event_status_t COUNTDOWN_Time_Tick(protimer_t *const mobj, event_t const *const e)
{
 800078e:	b580      	push	{r7, lr}
 8000790:	b082      	sub	sp, #8
 8000792:	af00      	add	r7, sp, #0
 8000794:	6078      	str	r0, [r7, #4]
 8000796:	6039      	str	r1, [r7, #0]
    if(((protimer_tick_event_t*)(e))->ss == 10){
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	785b      	ldrb	r3, [r3, #1]
 800079c:	2b0a      	cmp	r3, #10
 800079e:	d119      	bne.n	80007d4 <COUNTDOWN_Time_Tick+0x46>
        --mobj->curr_time;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	1e5a      	subs	r2, r3, #1
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	601a      	str	r2, [r3, #0]
        ++mobj->elapsed_time;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	685b      	ldr	r3, [r3, #4]
 80007ae:	1c5a      	adds	r2, r3, #1
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	605a      	str	r2, [r3, #4]
        display_time(mobj->curr_time);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f000 f8ef 	bl	800099c <display_time>
        if(!mobj->curr_time){
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d104      	bne.n	80007d0 <COUNTDOWN_Time_Tick+0x42>
            mobj->active_state = IDLE;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	2200      	movs	r2, #0
 80007ca:	731a      	strb	r2, [r3, #12]
            return EVENT_TRANSITION;
 80007cc:	2302      	movs	r3, #2
 80007ce:	e002      	b.n	80007d6 <COUNTDOWN_Time_Tick+0x48>
        }
        return EVENT_HANDLED;
 80007d0:	2300      	movs	r3, #0
 80007d2:	e000      	b.n	80007d6 <COUNTDOWN_Time_Tick+0x48>
    }
    return EVENT_IGNORED;
 80007d4:	2301      	movs	r3, #1
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}

080007de <COUNTDOWN_Start_Pause>:

event_status_t COUNTDOWN_Start_Pause(protimer_t *const mobj, event_t const *const e)
{
 80007de:	b480      	push	{r7}
 80007e0:	b083      	sub	sp, #12
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	6078      	str	r0, [r7, #4]
 80007e6:	6039      	str	r1, [r7, #0]
    mobj->active_state = PAUSE;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2203      	movs	r2, #3
 80007ec:	731a      	strb	r2, [r3, #12]
    return EVENT_TRANSITION;
 80007ee:	2302      	movs	r3, #2
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr

080007fc <COUNTDOWN_Exit>:

event_status_t COUNTDOWN_Exit(protimer_t *const mobj, event_t const *const e)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	6039      	str	r1, [r7, #0]
    mobj->pro_time += mobj->elapsed_time;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	689a      	ldr	r2, [r3, #8]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	441a      	add	r2, r3
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	609a      	str	r2, [r3, #8]
    mobj->elapsed_time = 0;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	2200      	movs	r2, #0
 8000818:	605a      	str	r2, [r3, #4]
    return EVENT_HANDLED;
 800081a:	2300      	movs	r3, #0
}
 800081c:	4618      	mov	r0, r3
 800081e:	370c      	adds	r7, #12
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr

08000828 <COUNTDOWN_Abrt>:

event_status_t COUNTDOWN_Abrt(protimer_t *const mobj, event_t const *const e)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	6039      	str	r1, [r7, #0]
    mobj->active_state = IDLE;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2200      	movs	r2, #0
 8000836:	731a      	strb	r2, [r3, #12]
    return EVENT_TRANSITION;
 8000838:	2302      	movs	r3, #2
}
 800083a:	4618      	mov	r0, r3
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
	...

08000848 <PAUSE_Entry>:


event_status_t PAUSE_Entry(protimer_t *const mobj, event_t const *const e)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
 8000850:	6039      	str	r1, [r7, #0]
    display_message("Paused");
 8000852:	4804      	ldr	r0, [pc, #16]	; (8000864 <PAUSE_Entry+0x1c>)
 8000854:	f000 f8d0 	bl	80009f8 <display_message>
    return EVENT_HANDLED;
 8000858:	2300      	movs	r3, #0
}
 800085a:	4618      	mov	r0, r3
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	080059a0 	.word	0x080059a0

08000868 <PAUSE_Exit>:

event_status_t PAUSE_Exit(protimer_t *const mobj, event_t const *const e)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	6039      	str	r1, [r7, #0]
    display_clear();
 8000872:	f000 f8cf 	bl	8000a14 <display_clear>
    return EVENT_HANDLED;
 8000876:	2300      	movs	r3, #0
}
 8000878:	4618      	mov	r0, r3
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}

08000880 <PAUSE_Inc_Time>:

event_status_t PAUSE_Inc_Time(protimer_t *const mobj, event_t const *const e)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	6039      	str	r1, [r7, #0]
    mobj->curr_time += 60;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	601a      	str	r2, [r3, #0]
    mobj->active_state = TIME_SET;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	2201      	movs	r2, #1
 800089a:	731a      	strb	r2, [r3, #12]
    return EVENT_TRANSITION;
 800089c:	2302      	movs	r3, #2
}
 800089e:	4618      	mov	r0, r3
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr

080008aa <PAUSE_Dec_Time>:

event_status_t PAUSE_Dec_Time(protimer_t *const mobj, event_t const *const e)
{
 80008aa:	b480      	push	{r7}
 80008ac:	b083      	sub	sp, #12
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	6078      	str	r0, [r7, #4]
 80008b2:	6039      	str	r1, [r7, #0]
    if(mobj->curr_time >= 60){
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2b3b      	cmp	r3, #59	; 0x3b
 80008ba:	d90a      	bls.n	80008d2 <PAUSE_Dec_Time+0x28>
        mobj->curr_time -= 60;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f1a3 023c 	sub.w	r2, r3, #60	; 0x3c
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	601a      	str	r2, [r3, #0]
        mobj->active_state = TIME_SET;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2201      	movs	r2, #1
 80008cc:	731a      	strb	r2, [r3, #12]
        return EVENT_TRANSITION;
 80008ce:	2302      	movs	r3, #2
 80008d0:	e000      	b.n	80008d4 <PAUSE_Dec_Time+0x2a>
    }
    return EVENT_IGNORED;
 80008d2:	2301      	movs	r3, #1
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr

080008e0 <PAUSE_Start_Pause>:

event_status_t PAUSE_Start_Pause(protimer_t *const mobj, event_t const *const e)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	6039      	str	r1, [r7, #0]
    mobj->active_state = COUNTDOWN;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2202      	movs	r2, #2
 80008ee:	731a      	strb	r2, [r3, #12]
    return EVENT_TRANSITION;
 80008f0:	2302      	movs	r3, #2
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr

080008fe <PAUSE_Abrt>:

event_status_t PAUSE_Abrt(protimer_t *const mobj, event_t const *const e)
{
 80008fe:	b480      	push	{r7}
 8000900:	b083      	sub	sp, #12
 8000902:	af00      	add	r7, sp, #0
 8000904:	6078      	str	r0, [r7, #4]
 8000906:	6039      	str	r1, [r7, #0]
    mobj->active_state = IDLE;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2200      	movs	r2, #0
 800090c:	731a      	strb	r2, [r3, #12]
    return EVENT_TRANSITION;
 800090e:	2302      	movs	r3, #2
}
 8000910:	4618      	mov	r0, r3
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr

0800091c <STAT_Entry>:


event_status_t STAT_Entry(protimer_t *const mobj, event_t const *const e)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	6039      	str	r1, [r7, #0]
    display_time(mobj->pro_time);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	689b      	ldr	r3, [r3, #8]
 800092a:	4618      	mov	r0, r3
 800092c:	f000 f836 	bl	800099c <display_time>
    display_message("Productive time");
 8000930:	4803      	ldr	r0, [pc, #12]	; (8000940 <STAT_Entry+0x24>)
 8000932:	f000 f861 	bl	80009f8 <display_message>
    return EVENT_HANDLED;
 8000936:	2300      	movs	r3, #0
}
 8000938:	4618      	mov	r0, r3
 800093a:	3708      	adds	r7, #8
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	080059a8 	.word	0x080059a8

08000944 <STAT_Exit>:

event_status_t STAT_Exit(protimer_t *const mobj, event_t const *const e)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
 800094c:	6039      	str	r1, [r7, #0]
    display_clear();
 800094e:	f000 f861 	bl	8000a14 <display_clear>
    return EVENT_HANDLED;
 8000952:	2300      	movs	r3, #0
}
 8000954:	4618      	mov	r0, r3
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}

0800095c <STAT_Time_Tick>:

event_status_t STAT_Time_Tick(protimer_t *const mobj, event_t const *const e)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
 8000964:	6039      	str	r1, [r7, #0]
	static int tick_count = 0;

    if(++tick_count == 30){
 8000966:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <STAT_Time_Tick+0x3c>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	3301      	adds	r3, #1
 800096c:	4a0a      	ldr	r2, [pc, #40]	; (8000998 <STAT_Time_Tick+0x3c>)
 800096e:	6013      	str	r3, [r2, #0]
 8000970:	4b09      	ldr	r3, [pc, #36]	; (8000998 <STAT_Time_Tick+0x3c>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	2b1e      	cmp	r3, #30
 8000976:	d107      	bne.n	8000988 <STAT_Time_Tick+0x2c>
        tick_count = 0;
 8000978:	4b07      	ldr	r3, [pc, #28]	; (8000998 <STAT_Time_Tick+0x3c>)
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
        mobj->active_state = IDLE;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2200      	movs	r2, #0
 8000982:	731a      	strb	r2, [r3, #12]
        return EVENT_TRANSITION;
 8000984:	2302      	movs	r3, #2
 8000986:	e000      	b.n	800098a <STAT_Time_Tick+0x2e>
    }
    return EVENT_IGNORED;
 8000988:	2301      	movs	r3, #1
}
 800098a:	4618      	mov	r0, r3
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	2000020c 	.word	0x2000020c

0800099c <display_time>:


//////////////////////////helper functions//////////////////////////
static void display_time(uint32_t time){
 800099c:	b580      	push	{r7, lr}
 800099e:	b086      	sub	sp, #24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  char buf[7];

  uint16_t m = time / 60;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	4a11      	ldr	r2, [pc, #68]	; (80009ec <display_time+0x50>)
 80009a8:	fba2 2303 	umull	r2, r3, r2, r3
 80009ac:	095b      	lsrs	r3, r3, #5
 80009ae:	82fb      	strh	r3, [r7, #22]
  uint8_t s = time % 60;
 80009b0:	6879      	ldr	r1, [r7, #4]
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <display_time+0x50>)
 80009b4:	fba3 2301 	umull	r2, r3, r3, r1
 80009b8:	095a      	lsrs	r2, r3, #5
 80009ba:	4613      	mov	r3, r2
 80009bc:	011b      	lsls	r3, r3, #4
 80009be:	1a9b      	subs	r3, r3, r2
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	1aca      	subs	r2, r1, r3
 80009c4:	4613      	mov	r3, r2
 80009c6:	757b      	strb	r3, [r7, #21]
  sprintf(buf,"%03d:%02d",m,s);
 80009c8:	8afa      	ldrh	r2, [r7, #22]
 80009ca:	7d7b      	ldrb	r3, [r7, #21]
 80009cc:	f107 000c 	add.w	r0, r7, #12
 80009d0:	4907      	ldr	r1, [pc, #28]	; (80009f0 <display_time+0x54>)
 80009d2:	f003 fe81 	bl	80046d8 <siprintf>

  printf("%s\r\n", buf);
 80009d6:	f107 030c 	add.w	r3, r7, #12
 80009da:	4619      	mov	r1, r3
 80009dc:	4805      	ldr	r0, [pc, #20]	; (80009f4 <display_time+0x58>)
 80009de:	f003 fded 	bl	80045bc <iprintf>
}
 80009e2:	bf00      	nop
 80009e4:	3718      	adds	r7, #24
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	88888889 	.word	0x88888889
 80009f0:	080059b8 	.word	0x080059b8
 80009f4:	080059c4 	.word	0x080059c4

080009f8 <display_message>:

static void display_message(char *string){
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
	printf("%s\r\n", string);
 8000a00:	6879      	ldr	r1, [r7, #4]
 8000a02:	4803      	ldr	r0, [pc, #12]	; (8000a10 <display_message+0x18>)
 8000a04:	f003 fdda 	bl	80045bc <iprintf>
}
 8000a08:	bf00      	nop
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	080059c4 	.word	0x080059c4

08000a14 <display_clear>:

static void display_clear(void){
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
    printf("clear\r\n");
 8000a18:	4802      	ldr	r0, [pc, #8]	; (8000a24 <display_clear+0x10>)
 8000a1a:	f003 fe55 	bl	80046c8 <puts>
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	080059cc 	.word	0x080059cc

08000a28 <protimer_event_dispatcher>:



static void protimer_event_dispatcher(protimer_t *const mobj,event_t const *const e)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	6039      	str	r1, [r7, #0]

  event_status_t status;
  protimer_state_t source, target;
  e_handler_t ehandler;

  source = mobj->active_state;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	7b1b      	ldrb	r3, [r3, #12]
 8000a36:	75bb      	strb	r3, [r7, #22]
  ehandler = (e_handler_t)mobj->state_table[mobj->active_state * MAX_SIGNALS + e->sig];
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	691a      	ldr	r2, [r3, #16]
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	7b1b      	ldrb	r3, [r3, #12]
 8000a40:	4619      	mov	r1, r3
 8000a42:	460b      	mov	r3, r1
 8000a44:	00db      	lsls	r3, r3, #3
 8000a46:	1a5b      	subs	r3, r3, r1
 8000a48:	6839      	ldr	r1, [r7, #0]
 8000a4a:	7809      	ldrb	r1, [r1, #0]
 8000a4c:	440b      	add	r3, r1
 8000a4e:	009b      	lsls	r3, r3, #2
 8000a50:	4413      	add	r3, r2
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	613b      	str	r3, [r7, #16]
  if(ehandler)
 8000a56:	693b      	ldr	r3, [r7, #16]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d005      	beq.n	8000a68 <protimer_event_dispatcher+0x40>
	  status = (*ehandler)(mobj,e);
 8000a5c:	693b      	ldr	r3, [r7, #16]
 8000a5e:	6839      	ldr	r1, [r7, #0]
 8000a60:	6878      	ldr	r0, [r7, #4]
 8000a62:	4798      	blx	r3
 8000a64:	4603      	mov	r3, r0
 8000a66:	75fb      	strb	r3, [r7, #23]

  if(status == EVENT_TRANSITION){
 8000a68:	7dfb      	ldrb	r3, [r7, #23]
 8000a6a:	2b02      	cmp	r3, #2
 8000a6c:	d12e      	bne.n	8000acc <protimer_event_dispatcher+0xa4>
    target = mobj->active_state;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	7b1b      	ldrb	r3, [r3, #12]
 8000a72:	73fb      	strb	r3, [r7, #15]
    event_t ee;
    //1. run the exit action for the source state
    ee.sig = EXIT;
 8000a74:	2306      	movs	r3, #6
 8000a76:	733b      	strb	r3, [r7, #12]
    ehandler = (e_handler_t)mobj->state_table[source * MAX_SIGNALS + EXIT];
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	6919      	ldr	r1, [r3, #16]
 8000a7c:	7dba      	ldrb	r2, [r7, #22]
 8000a7e:	4613      	mov	r3, r2
 8000a80:	00db      	lsls	r3, r3, #3
 8000a82:	1a9b      	subs	r3, r3, r2
 8000a84:	009b      	lsls	r3, r3, #2
 8000a86:	3318      	adds	r3, #24
 8000a88:	440b      	add	r3, r1
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	613b      	str	r3, [r7, #16]
    if(ehandler)
 8000a8e:	693b      	ldr	r3, [r7, #16]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d005      	beq.n	8000aa0 <protimer_event_dispatcher+0x78>
    	(*ehandler)(mobj,&ee);
 8000a94:	f107 020c 	add.w	r2, r7, #12
 8000a98:	693b      	ldr	r3, [r7, #16]
 8000a9a:	4611      	mov	r1, r2
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	4798      	blx	r3

    //2. run the entry action for the target state
    ee.sig = ENTRY;
 8000aa0:	2305      	movs	r3, #5
 8000aa2:	733b      	strb	r3, [r7, #12]
    ehandler = (e_handler_t)mobj->state_table[target * MAX_SIGNALS + ENTRY];
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	6919      	ldr	r1, [r3, #16]
 8000aa8:	7bfa      	ldrb	r2, [r7, #15]
 8000aaa:	4613      	mov	r3, r2
 8000aac:	00db      	lsls	r3, r3, #3
 8000aae:	1a9b      	subs	r3, r3, r2
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	3314      	adds	r3, #20
 8000ab4:	440b      	add	r3, r1
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	613b      	str	r3, [r7, #16]
    if(ehandler)
 8000aba:	693b      	ldr	r3, [r7, #16]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d005      	beq.n	8000acc <protimer_event_dispatcher+0xa4>
    	(*ehandler)(mobj,&ee);
 8000ac0:	f107 020c 	add.w	r2, r7, #12
 8000ac4:	693b      	ldr	r3, [r7, #16]
 8000ac6:	4611      	mov	r1, r2
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	4798      	blx	r3
  }

}
 8000acc:	bf00      	nop
 8000ace:	3718      	adds	r7, #24
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <millis>:



uint32_t millis(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
	return millis_counter;
 8000ad8:	4b03      	ldr	r3, [pc, #12]	; (8000ae8 <millis+0x14>)
 8000ada:	681b      	ldr	r3, [r3, #0]
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	20000208 	.word	0x20000208

08000aec <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM17)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a06      	ldr	r2, [pc, #24]	; (8000b14 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d104      	bne.n	8000b08 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		millis_counter++;
 8000afe:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	3301      	adds	r3, #1
 8000b04:	4a04      	ldr	r2, [pc, #16]	; (8000b18 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000b06:	6013      	str	r3, [r2, #0]
//		printf("%ld\r\n", millis_counter);
	}
}
 8000b08:	bf00      	nop
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	40014800 	.word	0x40014800
 8000b18:	20000208 	.word	0x20000208

08000b1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b22:	f000 fb04 	bl	800112e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b26:	f000 f867 	bl	8000bf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b2a:	f000 f92b 	bl	8000d84 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000b2e:	f000 f8b5 	bl	8000c9c <MX_LPUART1_UART_Init>
  MX_TIM17_Init();
 8000b32:	f000 f8ff 	bl	8000d34 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

  protimer_state_table_init(&protimer);
 8000b36:	482b      	ldr	r0, [pc, #172]	; (8000be4 <main+0xc8>)
 8000b38:	f7ff fd50 	bl	80005dc <protimer_state_table_init>

  protimer_init(&protimer);
 8000b3c:	4829      	ldr	r0, [pc, #164]	; (8000be4 <main+0xc8>)
 8000b3e:	f7ff fd31 	bl	80005a4 <protimer_init>

  HAL_TIM_Base_Start_IT(&htim17);
 8000b42:	4829      	ldr	r0, [pc, #164]	; (8000be8 <main+0xcc>)
 8000b44:	f002 fb28 	bl	8003198 <HAL_TIM_Base_Start_IT>

	  	  uint8_t btn_pad_value;
	  	  protimer_user_event_t ue;
	  	  static uint32_t current_time;

	  	  current_time = millis();
 8000b48:	f7ff ffc4 	bl	8000ad4 <millis>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	4a27      	ldr	r2, [pc, #156]	; (8000bec <main+0xd0>)
 8000b50:	6013      	str	r3, [r2, #0]

	  	  static protimer_tick_event_t te;

	  	  //2. make an event
	  	  if(HAL_UART_Receive(&hlpuart1, &btn_pad_value, 1, HAL_MAX_DELAY) == HAL_OK)
 8000b52:	1df9      	adds	r1, r7, #7
 8000b54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b58:	2201      	movs	r2, #1
 8000b5a:	4825      	ldr	r0, [pc, #148]	; (8000bf0 <main+0xd4>)
 8000b5c:	f002 fe73 	bl	8003846 <HAL_UART_Receive>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d11b      	bne.n	8000b9e <main+0x82>
	  	  {
	  		  if(btn_pad_value == '1')
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	2b31      	cmp	r3, #49	; 0x31
 8000b6a:	d102      	bne.n	8000b72 <main+0x56>
	  		  {
	  			  ue.super.sig = INC_TIME;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	713b      	strb	r3, [r7, #4]
 8000b70:	e010      	b.n	8000b94 <main+0x78>
	  		  }
	  		  else if(btn_pad_value == '2')
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	2b32      	cmp	r3, #50	; 0x32
 8000b76:	d102      	bne.n	8000b7e <main+0x62>
	  		  {
	  			  ue.super.sig = DEC_TIME;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	713b      	strb	r3, [r7, #4]
 8000b7c:	e00a      	b.n	8000b94 <main+0x78>
	  		  }
	  		  else if(btn_pad_value == '3')
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	2b33      	cmp	r3, #51	; 0x33
 8000b82:	d102      	bne.n	8000b8a <main+0x6e>
	  		  {
	  			  ue.super.sig = START_PAUSE;
 8000b84:	2303      	movs	r3, #3
 8000b86:	713b      	strb	r3, [r7, #4]
 8000b88:	e004      	b.n	8000b94 <main+0x78>
	  		  }
	  		  else if(btn_pad_value == '4')
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	2b34      	cmp	r3, #52	; 0x34
 8000b8e:	d101      	bne.n	8000b94 <main+0x78>
	  		  {
	  			  ue.super.sig = ABRT;
 8000b90:	2304      	movs	r3, #4
 8000b92:	713b      	strb	r3, [r7, #4]
	  		  }

	  	     //3. send it to event dispatcher
	  	    protimer_event_dispatcher(&protimer,&ue.super);
 8000b94:	1d3b      	adds	r3, r7, #4
 8000b96:	4619      	mov	r1, r3
 8000b98:	4812      	ldr	r0, [pc, #72]	; (8000be4 <main+0xc8>)
 8000b9a:	f7ff ff45 	bl	8000a28 <protimer_event_dispatcher>
	  	  }

	  	  //4. dispatch the time tick event for every 100ms
	  	  if(millis() - current_time  >= 100){
 8000b9e:	f7ff ff99 	bl	8000ad4 <millis>
 8000ba2:	4602      	mov	r2, r0
 8000ba4:	4b11      	ldr	r3, [pc, #68]	; (8000bec <main+0xd0>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	2b63      	cmp	r3, #99	; 0x63
 8000bac:	d9cc      	bls.n	8000b48 <main+0x2c>
	  	    //100ms has passed
	  	    current_time = millis();
 8000bae:	f7ff ff91 	bl	8000ad4 <millis>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	4a0d      	ldr	r2, [pc, #52]	; (8000bec <main+0xd0>)
 8000bb6:	6013      	str	r3, [r2, #0]
	  	    te.super.sig = TIME_TICK;
 8000bb8:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <main+0xd8>)
 8000bba:	2202      	movs	r2, #2
 8000bbc:	701a      	strb	r2, [r3, #0]
	  	    if(++te.ss > 10) te.ss = 1;
 8000bbe:	4b0d      	ldr	r3, [pc, #52]	; (8000bf4 <main+0xd8>)
 8000bc0:	785b      	ldrb	r3, [r3, #1]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <main+0xd8>)
 8000bc8:	705a      	strb	r2, [r3, #1]
 8000bca:	4b0a      	ldr	r3, [pc, #40]	; (8000bf4 <main+0xd8>)
 8000bcc:	785b      	ldrb	r3, [r3, #1]
 8000bce:	2b0a      	cmp	r3, #10
 8000bd0:	d902      	bls.n	8000bd8 <main+0xbc>
 8000bd2:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <main+0xd8>)
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	705a      	strb	r2, [r3, #1]
	  	    protimer_event_dispatcher(&protimer,&te.super);
 8000bd8:	4906      	ldr	r1, [pc, #24]	; (8000bf4 <main+0xd8>)
 8000bda:	4802      	ldr	r0, [pc, #8]	; (8000be4 <main+0xc8>)
 8000bdc:	f7ff ff24 	bl	8000a28 <protimer_event_dispatcher>
  {
 8000be0:	e7b2      	b.n	8000b48 <main+0x2c>
 8000be2:	bf00      	nop
 8000be4:	200001f4 	.word	0x200001f4
 8000be8:	200001a8 	.word	0x200001a8
 8000bec:	20000210 	.word	0x20000210
 8000bf0:	20000118 	.word	0x20000118
 8000bf4:	20000214 	.word	0x20000214

08000bf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b096      	sub	sp, #88	; 0x58
 8000bfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	2244      	movs	r2, #68	; 0x44
 8000c04:	2100      	movs	r1, #0
 8000c06:	4618      	mov	r0, r3
 8000c08:	f003 fcd0 	bl	80045ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c0c:	463b      	mov	r3, r7
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	605a      	str	r2, [r3, #4]
 8000c14:	609a      	str	r2, [r3, #8]
 8000c16:	60da      	str	r2, [r3, #12]
 8000c18:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c1a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c1e:	f000 fdbf 	bl	80017a0 <HAL_PWREx_ControlVoltageScaling>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000c28:	f000 f8c4 	bl	8000db4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c34:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c36:	2340      	movs	r3, #64	; 0x40
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c42:	2301      	movs	r3, #1
 8000c44:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000c46:	2308      	movs	r3, #8
 8000c48:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c52:	2302      	movs	r3, #2
 8000c54:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c56:	f107 0314 	add.w	r3, r7, #20
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f000 fe54 	bl	8001908 <HAL_RCC_OscConfig>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000c66:	f000 f8a5 	bl	8000db4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c6a:	230f      	movs	r3, #15
 8000c6c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c72:	2300      	movs	r3, #0
 8000c74:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c7a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c80:	463b      	mov	r3, r7
 8000c82:	2103      	movs	r1, #3
 8000c84:	4618      	mov	r0, r3
 8000c86:	f001 fa59 	bl	800213c <HAL_RCC_ClockConfig>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000c90:	f000 f890 	bl	8000db4 <Error_Handler>
  }
}
 8000c94:	bf00      	nop
 8000c96:	3758      	adds	r7, #88	; 0x58
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000ca0:	4b22      	ldr	r3, [pc, #136]	; (8000d2c <MX_LPUART1_UART_Init+0x90>)
 8000ca2:	4a23      	ldr	r2, [pc, #140]	; (8000d30 <MX_LPUART1_UART_Init+0x94>)
 8000ca4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000ca6:	4b21      	ldr	r3, [pc, #132]	; (8000d2c <MX_LPUART1_UART_Init+0x90>)
 8000ca8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cac:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cae:	4b1f      	ldr	r3, [pc, #124]	; (8000d2c <MX_LPUART1_UART_Init+0x90>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000cb4:	4b1d      	ldr	r3, [pc, #116]	; (8000d2c <MX_LPUART1_UART_Init+0x90>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000cba:	4b1c      	ldr	r3, [pc, #112]	; (8000d2c <MX_LPUART1_UART_Init+0x90>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000cc0:	4b1a      	ldr	r3, [pc, #104]	; (8000d2c <MX_LPUART1_UART_Init+0x90>)
 8000cc2:	220c      	movs	r2, #12
 8000cc4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cc6:	4b19      	ldr	r3, [pc, #100]	; (8000d2c <MX_LPUART1_UART_Init+0x90>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ccc:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <MX_LPUART1_UART_Init+0x90>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cd2:	4b16      	ldr	r3, [pc, #88]	; (8000d2c <MX_LPUART1_UART_Init+0x90>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cd8:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <MX_LPUART1_UART_Init+0x90>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000cde:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <MX_LPUART1_UART_Init+0x90>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000ce4:	4811      	ldr	r0, [pc, #68]	; (8000d2c <MX_LPUART1_UART_Init+0x90>)
 8000ce6:	f002 fcc7 	bl	8003678 <HAL_UART_Init>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000cf0:	f000 f860 	bl	8000db4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	480d      	ldr	r0, [pc, #52]	; (8000d2c <MX_LPUART1_UART_Init+0x90>)
 8000cf8:	f003 fb64 	bl	80043c4 <HAL_UARTEx_SetTxFifoThreshold>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000d02:	f000 f857 	bl	8000db4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d06:	2100      	movs	r1, #0
 8000d08:	4808      	ldr	r0, [pc, #32]	; (8000d2c <MX_LPUART1_UART_Init+0x90>)
 8000d0a:	f003 fb99 	bl	8004440 <HAL_UARTEx_SetRxFifoThreshold>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000d14:	f000 f84e 	bl	8000db4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000d18:	4804      	ldr	r0, [pc, #16]	; (8000d2c <MX_LPUART1_UART_Init+0x90>)
 8000d1a:	f003 fb1a 	bl	8004352 <HAL_UARTEx_DisableFifoMode>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000d24:	f000 f846 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000d28:	bf00      	nop
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20000118 	.word	0x20000118
 8000d30:	40008000 	.word	0x40008000

08000d34 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000d38:	4b10      	ldr	r3, [pc, #64]	; (8000d7c <MX_TIM17_Init+0x48>)
 8000d3a:	4a11      	ldr	r2, [pc, #68]	; (8000d80 <MX_TIM17_Init+0x4c>)
 8000d3c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 64000-1;
 8000d3e:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <MX_TIM17_Init+0x48>)
 8000d40:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000d44:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d46:	4b0d      	ldr	r3, [pc, #52]	; (8000d7c <MX_TIM17_Init+0x48>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000-1;
 8000d4c:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <MX_TIM17_Init+0x48>)
 8000d4e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d52:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d54:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <MX_TIM17_Init+0x48>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000d5a:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <MX_TIM17_Init+0x48>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <MX_TIM17_Init+0x48>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000d66:	4805      	ldr	r0, [pc, #20]	; (8000d7c <MX_TIM17_Init+0x48>)
 8000d68:	f002 f9be 	bl	80030e8 <HAL_TIM_Base_Init>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8000d72:	f000 f81f 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	200001a8 	.word	0x200001a8
 8000d80:	40014800 	.word	0x40014800

08000d84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d8a:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <MX_GPIO_Init+0x2c>)
 8000d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8e:	4a08      	ldr	r2, [pc, #32]	; (8000db0 <MX_GPIO_Init+0x2c>)
 8000d90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d96:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <MX_GPIO_Init+0x2c>)
 8000d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d9e:	607b      	str	r3, [r7, #4]
 8000da0:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000da2:	f000 fda1 	bl	80018e8 <HAL_PWREx_EnableVddIO2>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40021000 	.word	0x40021000

08000db4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000db8:	b672      	cpsid	i
}
 8000dba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dbc:	e7fe      	b.n	8000dbc <Error_Handler+0x8>
	...

08000dc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc6:	4b0f      	ldr	r3, [pc, #60]	; (8000e04 <HAL_MspInit+0x44>)
 8000dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dca:	4a0e      	ldr	r2, [pc, #56]	; (8000e04 <HAL_MspInit+0x44>)
 8000dcc:	f043 0301 	orr.w	r3, r3, #1
 8000dd0:	6613      	str	r3, [r2, #96]	; 0x60
 8000dd2:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <HAL_MspInit+0x44>)
 8000dd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	607b      	str	r3, [r7, #4]
 8000ddc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dde:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <HAL_MspInit+0x44>)
 8000de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000de2:	4a08      	ldr	r2, [pc, #32]	; (8000e04 <HAL_MspInit+0x44>)
 8000de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000de8:	6593      	str	r3, [r2, #88]	; 0x58
 8000dea:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <HAL_MspInit+0x44>)
 8000dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df2:	603b      	str	r3, [r7, #0]
 8000df4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000df6:	bf00      	nop
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	40021000 	.word	0x40021000

08000e08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b0ae      	sub	sp, #184	; 0xb8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e10:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e20:	f107 0310 	add.w	r3, r7, #16
 8000e24:	2294      	movs	r2, #148	; 0x94
 8000e26:	2100      	movs	r1, #0
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f003 fbbf 	bl	80045ac <memset>
  if(huart->Instance==LPUART1)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a22      	ldr	r2, [pc, #136]	; (8000ebc <HAL_UART_MspInit+0xb4>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d13d      	bne.n	8000eb4 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000e38:	2320      	movs	r3, #32
 8000e3a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e40:	f107 0310 	add.w	r3, r7, #16
 8000e44:	4618      	mov	r0, r3
 8000e46:	f001 fc37 	bl	80026b8 <HAL_RCCEx_PeriphCLKConfig>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e50:	f7ff ffb0 	bl	8000db4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000e54:	4b1a      	ldr	r3, [pc, #104]	; (8000ec0 <HAL_UART_MspInit+0xb8>)
 8000e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e58:	4a19      	ldr	r2, [pc, #100]	; (8000ec0 <HAL_UART_MspInit+0xb8>)
 8000e5a:	f043 0301 	orr.w	r3, r3, #1
 8000e5e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000e60:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <HAL_UART_MspInit+0xb8>)
 8000e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e64:	f003 0301 	and.w	r3, r3, #1
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e6c:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <HAL_UART_MspInit+0xb8>)
 8000e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e70:	4a13      	ldr	r2, [pc, #76]	; (8000ec0 <HAL_UART_MspInit+0xb8>)
 8000e72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e78:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <HAL_UART_MspInit+0xb8>)
 8000e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000e84:	f000 fd30 	bl	80018e8 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = BSP_DEBUG_UART_TX_Pin|BSP_DEBUG_UART_RX_Pin;
 8000e88:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000e8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000ea2:	2308      	movs	r3, #8
 8000ea4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ea8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000eac:	4619      	mov	r1, r3
 8000eae:	4805      	ldr	r0, [pc, #20]	; (8000ec4 <HAL_UART_MspInit+0xbc>)
 8000eb0:	f000 fac4 	bl	800143c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000eb4:	bf00      	nop
 8000eb6:	37b8      	adds	r7, #184	; 0xb8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40008000 	.word	0x40008000
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	48001800 	.word	0x48001800

08000ec8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a0d      	ldr	r2, [pc, #52]	; (8000f0c <HAL_TIM_Base_MspInit+0x44>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d113      	bne.n	8000f02 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000eda:	4b0d      	ldr	r3, [pc, #52]	; (8000f10 <HAL_TIM_Base_MspInit+0x48>)
 8000edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ede:	4a0c      	ldr	r2, [pc, #48]	; (8000f10 <HAL_TIM_Base_MspInit+0x48>)
 8000ee0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ee4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ee6:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <HAL_TIM_Base_MspInit+0x48>)
 8000ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	201a      	movs	r0, #26
 8000ef8:	f000 fa69 	bl	80013ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000efc:	201a      	movs	r0, #26
 8000efe:	f000 fa82 	bl	8001406 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000f02:	bf00      	nop
 8000f04:	3710      	adds	r7, #16
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40014800 	.word	0x40014800
 8000f10:	40021000 	.word	0x40021000

08000f14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <NMI_Handler+0x4>

08000f1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f1e:	e7fe      	b.n	8000f1e <HardFault_Handler+0x4>

08000f20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f24:	e7fe      	b.n	8000f24 <MemManage_Handler+0x4>

08000f26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f2a:	e7fe      	b.n	8000f2a <BusFault_Handler+0x4>

08000f2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f30:	e7fe      	b.n	8000f30 <UsageFault_Handler+0x4>

08000f32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f32:	b480      	push	{r7}
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f60:	f000 f93a 	bl	80011d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000f6c:	4802      	ldr	r0, [pc, #8]	; (8000f78 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000f6e:	f002 f983 	bl	8003278 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	200001a8 	.word	0x200001a8

08000f7c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]
 8000f8c:	e00a      	b.n	8000fa4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f8e:	f3af 8000 	nop.w
 8000f92:	4601      	mov	r1, r0
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	1c5a      	adds	r2, r3, #1
 8000f98:	60ba      	str	r2, [r7, #8]
 8000f9a:	b2ca      	uxtb	r2, r1
 8000f9c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	617b      	str	r3, [r7, #20]
 8000fa4:	697a      	ldr	r2, [r7, #20]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	dbf0      	blt.n	8000f8e <_read+0x12>
  }

  return len;
 8000fac:	687b      	ldr	r3, [r7, #4]
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3718      	adds	r7, #24
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
	...

08000fb8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
//
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }
	HAL_UART_Transmit(&hlpuart1, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	b29a      	uxth	r2, r3
 8000fc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fcc:	68b9      	ldr	r1, [r7, #8]
 8000fce:	4804      	ldr	r0, [pc, #16]	; (8000fe0 <_write+0x28>)
 8000fd0:	f002 fba2 	bl	8003718 <HAL_UART_Transmit>
  return len;
 8000fd4:	687b      	ldr	r3, [r7, #4]
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000118 	.word	0x20000118

08000fe4 <_close>:

int _close(int file)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800100c:	605a      	str	r2, [r3, #4]
  return 0;
 800100e:	2300      	movs	r3, #0
}
 8001010:	4618      	mov	r0, r3
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <_isatty>:

int _isatty(int file)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001024:	2301      	movs	r3, #1
}
 8001026:	4618      	mov	r0, r3
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001032:	b480      	push	{r7}
 8001034:	b085      	sub	sp, #20
 8001036:	af00      	add	r7, sp, #0
 8001038:	60f8      	str	r0, [r7, #12]
 800103a:	60b9      	str	r1, [r7, #8]
 800103c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800103e:	2300      	movs	r3, #0
}
 8001040:	4618      	mov	r0, r3
 8001042:	3714      	adds	r7, #20
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001054:	4a14      	ldr	r2, [pc, #80]	; (80010a8 <_sbrk+0x5c>)
 8001056:	4b15      	ldr	r3, [pc, #84]	; (80010ac <_sbrk+0x60>)
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001060:	4b13      	ldr	r3, [pc, #76]	; (80010b0 <_sbrk+0x64>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d102      	bne.n	800106e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001068:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <_sbrk+0x64>)
 800106a:	4a12      	ldr	r2, [pc, #72]	; (80010b4 <_sbrk+0x68>)
 800106c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800106e:	4b10      	ldr	r3, [pc, #64]	; (80010b0 <_sbrk+0x64>)
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4413      	add	r3, r2
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	429a      	cmp	r2, r3
 800107a:	d207      	bcs.n	800108c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800107c:	f003 fa6c 	bl	8004558 <__errno>
 8001080:	4603      	mov	r3, r0
 8001082:	220c      	movs	r2, #12
 8001084:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001086:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800108a:	e009      	b.n	80010a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800108c:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <_sbrk+0x64>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001092:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <_sbrk+0x64>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4413      	add	r3, r2
 800109a:	4a05      	ldr	r2, [pc, #20]	; (80010b0 <_sbrk+0x64>)
 800109c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800109e:	68fb      	ldr	r3, [r7, #12]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3718      	adds	r7, #24
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	200a0000 	.word	0x200a0000
 80010ac:	00000400 	.word	0x00000400
 80010b0:	20000218 	.word	0x20000218
 80010b4:	20000230 	.word	0x20000230

080010b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010bc:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <SystemInit+0x20>)
 80010be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010c2:	4a05      	ldr	r2, [pc, #20]	; (80010d8 <SystemInit+0x20>)
 80010c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001114 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010e0:	f7ff ffea 	bl	80010b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010e4:	480c      	ldr	r0, [pc, #48]	; (8001118 <LoopForever+0x6>)
  ldr r1, =_edata
 80010e6:	490d      	ldr	r1, [pc, #52]	; (800111c <LoopForever+0xa>)
  ldr r2, =_sidata
 80010e8:	4a0d      	ldr	r2, [pc, #52]	; (8001120 <LoopForever+0xe>)
  movs r3, #0
 80010ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010ec:	e002      	b.n	80010f4 <LoopCopyDataInit>

080010ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010f2:	3304      	adds	r3, #4

080010f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f8:	d3f9      	bcc.n	80010ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010fa:	4a0a      	ldr	r2, [pc, #40]	; (8001124 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010fc:	4c0a      	ldr	r4, [pc, #40]	; (8001128 <LoopForever+0x16>)
  movs r3, #0
 80010fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001100:	e001      	b.n	8001106 <LoopFillZerobss>

08001102 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001102:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001104:	3204      	adds	r2, #4

08001106 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001106:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001108:	d3fb      	bcc.n	8001102 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800110a:	f003 fa2b 	bl	8004564 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800110e:	f7ff fd05 	bl	8000b1c <main>

08001112 <LoopForever>:

LoopForever:
    b LoopForever
 8001112:	e7fe      	b.n	8001112 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001114:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001118:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800111c:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8001120:	08005aec 	.word	0x08005aec
  ldr r2, =_sbss
 8001124:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8001128:	20000230 	.word	0x20000230

0800112c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800112c:	e7fe      	b.n	800112c <ADC1_IRQHandler>

0800112e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b082      	sub	sp, #8
 8001132:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001134:	2300      	movs	r3, #0
 8001136:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001138:	2003      	movs	r0, #3
 800113a:	f000 f93d 	bl	80013b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800113e:	2000      	movs	r0, #0
 8001140:	f000 f80e 	bl	8001160 <HAL_InitTick>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d002      	beq.n	8001150 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	71fb      	strb	r3, [r7, #7]
 800114e:	e001      	b.n	8001154 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001150:	f7ff fe36 	bl	8000dc0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001154:	79fb      	ldrb	r3, [r7, #7]
}
 8001156:	4618      	mov	r0, r3
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
	...

08001160 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001168:	2300      	movs	r3, #0
 800116a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800116c:	4b17      	ldr	r3, [pc, #92]	; (80011cc <HAL_InitTick+0x6c>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d023      	beq.n	80011bc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001174:	4b16      	ldr	r3, [pc, #88]	; (80011d0 <HAL_InitTick+0x70>)
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	4b14      	ldr	r3, [pc, #80]	; (80011cc <HAL_InitTick+0x6c>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	4619      	mov	r1, r3
 800117e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001182:	fbb3 f3f1 	udiv	r3, r3, r1
 8001186:	fbb2 f3f3 	udiv	r3, r2, r3
 800118a:	4618      	mov	r0, r3
 800118c:	f000 f949 	bl	8001422 <HAL_SYSTICK_Config>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d10f      	bne.n	80011b6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2b0f      	cmp	r3, #15
 800119a:	d809      	bhi.n	80011b0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800119c:	2200      	movs	r2, #0
 800119e:	6879      	ldr	r1, [r7, #4]
 80011a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011a4:	f000 f913 	bl	80013ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011a8:	4a0a      	ldr	r2, [pc, #40]	; (80011d4 <HAL_InitTick+0x74>)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6013      	str	r3, [r2, #0]
 80011ae:	e007      	b.n	80011c0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	73fb      	strb	r3, [r7, #15]
 80011b4:	e004      	b.n	80011c0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	73fb      	strb	r3, [r7, #15]
 80011ba:	e001      	b.n	80011c0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011bc:	2301      	movs	r3, #1
 80011be:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000094 	.word	0x20000094
 80011d0:	2000008c 	.word	0x2000008c
 80011d4:	20000090 	.word	0x20000090

080011d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <HAL_IncTick+0x20>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	461a      	mov	r2, r3
 80011e2:	4b06      	ldr	r3, [pc, #24]	; (80011fc <HAL_IncTick+0x24>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4413      	add	r3, r2
 80011e8:	4a04      	ldr	r2, [pc, #16]	; (80011fc <HAL_IncTick+0x24>)
 80011ea:	6013      	str	r3, [r2, #0]
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	20000094 	.word	0x20000094
 80011fc:	2000021c 	.word	0x2000021c

08001200 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  return uwTick;
 8001204:	4b03      	ldr	r3, [pc, #12]	; (8001214 <HAL_GetTick+0x14>)
 8001206:	681b      	ldr	r3, [r3, #0]
}
 8001208:	4618      	mov	r0, r3
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	2000021c 	.word	0x2000021c

08001218 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001228:	4b0c      	ldr	r3, [pc, #48]	; (800125c <__NVIC_SetPriorityGrouping+0x44>)
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800122e:	68ba      	ldr	r2, [r7, #8]
 8001230:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001234:	4013      	ands	r3, r2
 8001236:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001240:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001248:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800124a:	4a04      	ldr	r2, [pc, #16]	; (800125c <__NVIC_SetPriorityGrouping+0x44>)
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	60d3      	str	r3, [r2, #12]
}
 8001250:	bf00      	nop
 8001252:	3714      	adds	r7, #20
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001264:	4b04      	ldr	r3, [pc, #16]	; (8001278 <__NVIC_GetPriorityGrouping+0x18>)
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	0a1b      	lsrs	r3, r3, #8
 800126a:	f003 0307 	and.w	r3, r3, #7
}
 800126e:	4618      	mov	r0, r3
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128a:	2b00      	cmp	r3, #0
 800128c:	db0b      	blt.n	80012a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	f003 021f 	and.w	r2, r3, #31
 8001294:	4907      	ldr	r1, [pc, #28]	; (80012b4 <__NVIC_EnableIRQ+0x38>)
 8001296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129a:	095b      	lsrs	r3, r3, #5
 800129c:	2001      	movs	r0, #1
 800129e:	fa00 f202 	lsl.w	r2, r0, r2
 80012a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012a6:	bf00      	nop
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	e000e100 	.word	0xe000e100

080012b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	6039      	str	r1, [r7, #0]
 80012c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	db0a      	blt.n	80012e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	b2da      	uxtb	r2, r3
 80012d0:	490c      	ldr	r1, [pc, #48]	; (8001304 <__NVIC_SetPriority+0x4c>)
 80012d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d6:	0112      	lsls	r2, r2, #4
 80012d8:	b2d2      	uxtb	r2, r2
 80012da:	440b      	add	r3, r1
 80012dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012e0:	e00a      	b.n	80012f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	4908      	ldr	r1, [pc, #32]	; (8001308 <__NVIC_SetPriority+0x50>)
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	f003 030f 	and.w	r3, r3, #15
 80012ee:	3b04      	subs	r3, #4
 80012f0:	0112      	lsls	r2, r2, #4
 80012f2:	b2d2      	uxtb	r2, r2
 80012f4:	440b      	add	r3, r1
 80012f6:	761a      	strb	r2, [r3, #24]
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	e000e100 	.word	0xe000e100
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800130c:	b480      	push	{r7}
 800130e:	b089      	sub	sp, #36	; 0x24
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	f003 0307 	and.w	r3, r3, #7
 800131e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	f1c3 0307 	rsb	r3, r3, #7
 8001326:	2b04      	cmp	r3, #4
 8001328:	bf28      	it	cs
 800132a:	2304      	movcs	r3, #4
 800132c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	3304      	adds	r3, #4
 8001332:	2b06      	cmp	r3, #6
 8001334:	d902      	bls.n	800133c <NVIC_EncodePriority+0x30>
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	3b03      	subs	r3, #3
 800133a:	e000      	b.n	800133e <NVIC_EncodePriority+0x32>
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001340:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43da      	mvns	r2, r3
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	401a      	ands	r2, r3
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001354:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	fa01 f303 	lsl.w	r3, r1, r3
 800135e:	43d9      	mvns	r1, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001364:	4313      	orrs	r3, r2
         );
}
 8001366:	4618      	mov	r0, r3
 8001368:	3724      	adds	r7, #36	; 0x24
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
	...

08001374 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3b01      	subs	r3, #1
 8001380:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001384:	d301      	bcc.n	800138a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001386:	2301      	movs	r3, #1
 8001388:	e00f      	b.n	80013aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800138a:	4a0a      	ldr	r2, [pc, #40]	; (80013b4 <SysTick_Config+0x40>)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	3b01      	subs	r3, #1
 8001390:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001392:	210f      	movs	r1, #15
 8001394:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001398:	f7ff ff8e 	bl	80012b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800139c:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <SysTick_Config+0x40>)
 800139e:	2200      	movs	r2, #0
 80013a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013a2:	4b04      	ldr	r3, [pc, #16]	; (80013b4 <SysTick_Config+0x40>)
 80013a4:	2207      	movs	r2, #7
 80013a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	e000e010 	.word	0xe000e010

080013b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f7ff ff29 	bl	8001218 <__NVIC_SetPriorityGrouping>
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b086      	sub	sp, #24
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	4603      	mov	r3, r0
 80013d6:	60b9      	str	r1, [r7, #8]
 80013d8:	607a      	str	r2, [r7, #4]
 80013da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013e0:	f7ff ff3e 	bl	8001260 <__NVIC_GetPriorityGrouping>
 80013e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	68b9      	ldr	r1, [r7, #8]
 80013ea:	6978      	ldr	r0, [r7, #20]
 80013ec:	f7ff ff8e 	bl	800130c <NVIC_EncodePriority>
 80013f0:	4602      	mov	r2, r0
 80013f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013f6:	4611      	mov	r1, r2
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff ff5d 	bl	80012b8 <__NVIC_SetPriority>
}
 80013fe:	bf00      	nop
 8001400:	3718      	adds	r7, #24
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b082      	sub	sp, #8
 800140a:	af00      	add	r7, sp, #0
 800140c:	4603      	mov	r3, r0
 800140e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff ff31 	bl	800127c <__NVIC_EnableIRQ>
}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b082      	sub	sp, #8
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f7ff ffa2 	bl	8001374 <SysTick_Config>
 8001430:	4603      	mov	r3, r0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
	...

0800143c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800143c:	b480      	push	{r7}
 800143e:	b087      	sub	sp, #28
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001446:	2300      	movs	r3, #0
 8001448:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800144a:	e166      	b.n	800171a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	2101      	movs	r1, #1
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	fa01 f303 	lsl.w	r3, r1, r3
 8001458:	4013      	ands	r3, r2
 800145a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	2b00      	cmp	r3, #0
 8001460:	f000 8158 	beq.w	8001714 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f003 0303 	and.w	r3, r3, #3
 800146c:	2b01      	cmp	r3, #1
 800146e:	d005      	beq.n	800147c <HAL_GPIO_Init+0x40>
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f003 0303 	and.w	r3, r3, #3
 8001478:	2b02      	cmp	r3, #2
 800147a:	d130      	bne.n	80014de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	2203      	movs	r2, #3
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4013      	ands	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	68da      	ldr	r2, [r3, #12]
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014b2:	2201      	movs	r2, #1
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43db      	mvns	r3, r3
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	4013      	ands	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	091b      	lsrs	r3, r3, #4
 80014c8:	f003 0201 	and.w	r2, r3, #1
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f003 0303 	and.w	r3, r3, #3
 80014e6:	2b03      	cmp	r3, #3
 80014e8:	d017      	beq.n	800151a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	2203      	movs	r2, #3
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	43db      	mvns	r3, r3
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	4013      	ands	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	689a      	ldr	r2, [r3, #8]
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	4313      	orrs	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f003 0303 	and.w	r3, r3, #3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d123      	bne.n	800156e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	08da      	lsrs	r2, r3, #3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	3208      	adds	r2, #8
 800152e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001532:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	f003 0307 	and.w	r3, r3, #7
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	220f      	movs	r2, #15
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	43db      	mvns	r3, r3
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	4013      	ands	r3, r2
 8001548:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	691a      	ldr	r2, [r3, #16]
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	f003 0307 	and.w	r3, r3, #7
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	4313      	orrs	r3, r2
 800155e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	08da      	lsrs	r2, r3, #3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	3208      	adds	r2, #8
 8001568:	6939      	ldr	r1, [r7, #16]
 800156a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	2203      	movs	r2, #3
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	43db      	mvns	r3, r3
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	4013      	ands	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f003 0203 	and.w	r2, r3, #3
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	4313      	orrs	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	f000 80b2 	beq.w	8001714 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b0:	4b61      	ldr	r3, [pc, #388]	; (8001738 <HAL_GPIO_Init+0x2fc>)
 80015b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015b4:	4a60      	ldr	r2, [pc, #384]	; (8001738 <HAL_GPIO_Init+0x2fc>)
 80015b6:	f043 0301 	orr.w	r3, r3, #1
 80015ba:	6613      	str	r3, [r2, #96]	; 0x60
 80015bc:	4b5e      	ldr	r3, [pc, #376]	; (8001738 <HAL_GPIO_Init+0x2fc>)
 80015be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015c0:	f003 0301 	and.w	r3, r3, #1
 80015c4:	60bb      	str	r3, [r7, #8]
 80015c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015c8:	4a5c      	ldr	r2, [pc, #368]	; (800173c <HAL_GPIO_Init+0x300>)
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	089b      	lsrs	r3, r3, #2
 80015ce:	3302      	adds	r3, #2
 80015d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	f003 0303 	and.w	r3, r3, #3
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	220f      	movs	r2, #15
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	43db      	mvns	r3, r3
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	4013      	ands	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015f2:	d02b      	beq.n	800164c <HAL_GPIO_Init+0x210>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a52      	ldr	r2, [pc, #328]	; (8001740 <HAL_GPIO_Init+0x304>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d025      	beq.n	8001648 <HAL_GPIO_Init+0x20c>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a51      	ldr	r2, [pc, #324]	; (8001744 <HAL_GPIO_Init+0x308>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d01f      	beq.n	8001644 <HAL_GPIO_Init+0x208>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a50      	ldr	r2, [pc, #320]	; (8001748 <HAL_GPIO_Init+0x30c>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d019      	beq.n	8001640 <HAL_GPIO_Init+0x204>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a4f      	ldr	r2, [pc, #316]	; (800174c <HAL_GPIO_Init+0x310>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d013      	beq.n	800163c <HAL_GPIO_Init+0x200>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4a4e      	ldr	r2, [pc, #312]	; (8001750 <HAL_GPIO_Init+0x314>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d00d      	beq.n	8001638 <HAL_GPIO_Init+0x1fc>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4a4d      	ldr	r2, [pc, #308]	; (8001754 <HAL_GPIO_Init+0x318>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d007      	beq.n	8001634 <HAL_GPIO_Init+0x1f8>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a4c      	ldr	r2, [pc, #304]	; (8001758 <HAL_GPIO_Init+0x31c>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d101      	bne.n	8001630 <HAL_GPIO_Init+0x1f4>
 800162c:	2307      	movs	r3, #7
 800162e:	e00e      	b.n	800164e <HAL_GPIO_Init+0x212>
 8001630:	2308      	movs	r3, #8
 8001632:	e00c      	b.n	800164e <HAL_GPIO_Init+0x212>
 8001634:	2306      	movs	r3, #6
 8001636:	e00a      	b.n	800164e <HAL_GPIO_Init+0x212>
 8001638:	2305      	movs	r3, #5
 800163a:	e008      	b.n	800164e <HAL_GPIO_Init+0x212>
 800163c:	2304      	movs	r3, #4
 800163e:	e006      	b.n	800164e <HAL_GPIO_Init+0x212>
 8001640:	2303      	movs	r3, #3
 8001642:	e004      	b.n	800164e <HAL_GPIO_Init+0x212>
 8001644:	2302      	movs	r3, #2
 8001646:	e002      	b.n	800164e <HAL_GPIO_Init+0x212>
 8001648:	2301      	movs	r3, #1
 800164a:	e000      	b.n	800164e <HAL_GPIO_Init+0x212>
 800164c:	2300      	movs	r3, #0
 800164e:	697a      	ldr	r2, [r7, #20]
 8001650:	f002 0203 	and.w	r2, r2, #3
 8001654:	0092      	lsls	r2, r2, #2
 8001656:	4093      	lsls	r3, r2
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	4313      	orrs	r3, r2
 800165c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800165e:	4937      	ldr	r1, [pc, #220]	; (800173c <HAL_GPIO_Init+0x300>)
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	089b      	lsrs	r3, r3, #2
 8001664:	3302      	adds	r3, #2
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800166c:	4b3b      	ldr	r3, [pc, #236]	; (800175c <HAL_GPIO_Init+0x320>)
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	43db      	mvns	r3, r3
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	4013      	ands	r3, r2
 800167a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d003      	beq.n	8001690 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	4313      	orrs	r3, r2
 800168e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001690:	4a32      	ldr	r2, [pc, #200]	; (800175c <HAL_GPIO_Init+0x320>)
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001696:	4b31      	ldr	r3, [pc, #196]	; (800175c <HAL_GPIO_Init+0x320>)
 8001698:	68db      	ldr	r3, [r3, #12]
 800169a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	43db      	mvns	r3, r3
 80016a0:	693a      	ldr	r2, [r7, #16]
 80016a2:	4013      	ands	r3, r2
 80016a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d003      	beq.n	80016ba <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016ba:	4a28      	ldr	r2, [pc, #160]	; (800175c <HAL_GPIO_Init+0x320>)
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80016c0:	4b26      	ldr	r3, [pc, #152]	; (800175c <HAL_GPIO_Init+0x320>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	43db      	mvns	r3, r3
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	4013      	ands	r3, r2
 80016ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d003      	beq.n	80016e4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016e4:	4a1d      	ldr	r2, [pc, #116]	; (800175c <HAL_GPIO_Init+0x320>)
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80016ea:	4b1c      	ldr	r3, [pc, #112]	; (800175c <HAL_GPIO_Init+0x320>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	43db      	mvns	r3, r3
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	4013      	ands	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	4313      	orrs	r3, r2
 800170c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800170e:	4a13      	ldr	r2, [pc, #76]	; (800175c <HAL_GPIO_Init+0x320>)
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	3301      	adds	r3, #1
 8001718:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	fa22 f303 	lsr.w	r3, r2, r3
 8001724:	2b00      	cmp	r3, #0
 8001726:	f47f ae91 	bne.w	800144c <HAL_GPIO_Init+0x10>
  }
}
 800172a:	bf00      	nop
 800172c:	bf00      	nop
 800172e:	371c      	adds	r7, #28
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	40021000 	.word	0x40021000
 800173c:	40010000 	.word	0x40010000
 8001740:	48000400 	.word	0x48000400
 8001744:	48000800 	.word	0x48000800
 8001748:	48000c00 	.word	0x48000c00
 800174c:	48001000 	.word	0x48001000
 8001750:	48001400 	.word	0x48001400
 8001754:	48001800 	.word	0x48001800
 8001758:	48001c00 	.word	0x48001c00
 800175c:	40010400 	.word	0x40010400

08001760 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001764:	4b0d      	ldr	r3, [pc, #52]	; (800179c <HAL_PWREx_GetVoltageRange+0x3c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800176c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001770:	d102      	bne.n	8001778 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001772:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001776:	e00b      	b.n	8001790 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001778:	4b08      	ldr	r3, [pc, #32]	; (800179c <HAL_PWREx_GetVoltageRange+0x3c>)
 800177a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800177e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001782:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001786:	d102      	bne.n	800178e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001788:	f44f 7300 	mov.w	r3, #512	; 0x200
 800178c:	e000      	b.n	8001790 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800178e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001790:	4618      	mov	r0, r3
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	40007000 	.word	0x40007000

080017a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d141      	bne.n	8001832 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80017ae:	4b4b      	ldr	r3, [pc, #300]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017ba:	d131      	bne.n	8001820 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017bc:	4b47      	ldr	r3, [pc, #284]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017c2:	4a46      	ldr	r2, [pc, #280]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017cc:	4b43      	ldr	r3, [pc, #268]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017d4:	4a41      	ldr	r2, [pc, #260]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80017dc:	4b40      	ldr	r3, [pc, #256]	; (80018e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2232      	movs	r2, #50	; 0x32
 80017e2:	fb02 f303 	mul.w	r3, r2, r3
 80017e6:	4a3f      	ldr	r2, [pc, #252]	; (80018e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80017e8:	fba2 2303 	umull	r2, r3, r2, r3
 80017ec:	0c9b      	lsrs	r3, r3, #18
 80017ee:	3301      	adds	r3, #1
 80017f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017f2:	e002      	b.n	80017fa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	3b01      	subs	r3, #1
 80017f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017fa:	4b38      	ldr	r3, [pc, #224]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017fc:	695b      	ldr	r3, [r3, #20]
 80017fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001802:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001806:	d102      	bne.n	800180e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1f2      	bne.n	80017f4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800180e:	4b33      	ldr	r3, [pc, #204]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001810:	695b      	ldr	r3, [r3, #20]
 8001812:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001816:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800181a:	d158      	bne.n	80018ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e057      	b.n	80018d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001820:	4b2e      	ldr	r3, [pc, #184]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001822:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001826:	4a2d      	ldr	r2, [pc, #180]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001828:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800182c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001830:	e04d      	b.n	80018ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001838:	d141      	bne.n	80018be <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800183a:	4b28      	ldr	r3, [pc, #160]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001842:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001846:	d131      	bne.n	80018ac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001848:	4b24      	ldr	r3, [pc, #144]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800184a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800184e:	4a23      	ldr	r2, [pc, #140]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001854:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001858:	4b20      	ldr	r3, [pc, #128]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001860:	4a1e      	ldr	r2, [pc, #120]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001862:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001866:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001868:	4b1d      	ldr	r3, [pc, #116]	; (80018e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2232      	movs	r2, #50	; 0x32
 800186e:	fb02 f303 	mul.w	r3, r2, r3
 8001872:	4a1c      	ldr	r2, [pc, #112]	; (80018e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001874:	fba2 2303 	umull	r2, r3, r2, r3
 8001878:	0c9b      	lsrs	r3, r3, #18
 800187a:	3301      	adds	r3, #1
 800187c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800187e:	e002      	b.n	8001886 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	3b01      	subs	r3, #1
 8001884:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001886:	4b15      	ldr	r3, [pc, #84]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001888:	695b      	ldr	r3, [r3, #20]
 800188a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800188e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001892:	d102      	bne.n	800189a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1f2      	bne.n	8001880 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800189a:	4b10      	ldr	r3, [pc, #64]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800189c:	695b      	ldr	r3, [r3, #20]
 800189e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018a6:	d112      	bne.n	80018ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e011      	b.n	80018d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018ac:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018b2:	4a0a      	ldr	r2, [pc, #40]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80018bc:	e007      	b.n	80018ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80018be:	4b07      	ldr	r3, [pc, #28]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018c6:	4a05      	ldr	r2, [pc, #20]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018cc:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80018ce:	2300      	movs	r3, #0
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3714      	adds	r7, #20
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	40007000 	.word	0x40007000
 80018e0:	2000008c 	.word	0x2000008c
 80018e4:	431bde83 	.word	0x431bde83

080018e8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80018ec:	4b05      	ldr	r3, [pc, #20]	; (8001904 <HAL_PWREx_EnableVddIO2+0x1c>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	4a04      	ldr	r2, [pc, #16]	; (8001904 <HAL_PWREx_EnableVddIO2+0x1c>)
 80018f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018f6:	6053      	str	r3, [r2, #4]
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	40007000 	.word	0x40007000

08001908 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b088      	sub	sp, #32
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d102      	bne.n	800191c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	f000 bc08 	b.w	800212c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800191c:	4b96      	ldr	r3, [pc, #600]	; (8001b78 <HAL_RCC_OscConfig+0x270>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f003 030c 	and.w	r3, r3, #12
 8001924:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001926:	4b94      	ldr	r3, [pc, #592]	; (8001b78 <HAL_RCC_OscConfig+0x270>)
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	f003 0303 	and.w	r3, r3, #3
 800192e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0310 	and.w	r3, r3, #16
 8001938:	2b00      	cmp	r3, #0
 800193a:	f000 80e4 	beq.w	8001b06 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d007      	beq.n	8001954 <HAL_RCC_OscConfig+0x4c>
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	2b0c      	cmp	r3, #12
 8001948:	f040 808b 	bne.w	8001a62 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	2b01      	cmp	r3, #1
 8001950:	f040 8087 	bne.w	8001a62 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001954:	4b88      	ldr	r3, [pc, #544]	; (8001b78 <HAL_RCC_OscConfig+0x270>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d005      	beq.n	800196c <HAL_RCC_OscConfig+0x64>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d101      	bne.n	800196c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e3df      	b.n	800212c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a1a      	ldr	r2, [r3, #32]
 8001970:	4b81      	ldr	r3, [pc, #516]	; (8001b78 <HAL_RCC_OscConfig+0x270>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0308 	and.w	r3, r3, #8
 8001978:	2b00      	cmp	r3, #0
 800197a:	d004      	beq.n	8001986 <HAL_RCC_OscConfig+0x7e>
 800197c:	4b7e      	ldr	r3, [pc, #504]	; (8001b78 <HAL_RCC_OscConfig+0x270>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001984:	e005      	b.n	8001992 <HAL_RCC_OscConfig+0x8a>
 8001986:	4b7c      	ldr	r3, [pc, #496]	; (8001b78 <HAL_RCC_OscConfig+0x270>)
 8001988:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800198c:	091b      	lsrs	r3, r3, #4
 800198e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001992:	4293      	cmp	r3, r2
 8001994:	d223      	bcs.n	80019de <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a1b      	ldr	r3, [r3, #32]
 800199a:	4618      	mov	r0, r3
 800199c:	f000 fdcc 	bl	8002538 <RCC_SetFlashLatencyFromMSIRange>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e3c0      	b.n	800212c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019aa:	4b73      	ldr	r3, [pc, #460]	; (8001b78 <HAL_RCC_OscConfig+0x270>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a72      	ldr	r2, [pc, #456]	; (8001b78 <HAL_RCC_OscConfig+0x270>)
 80019b0:	f043 0308 	orr.w	r3, r3, #8
 80019b4:	6013      	str	r3, [r2, #0]
 80019b6:	4b70      	ldr	r3, [pc, #448]	; (8001b78 <HAL_RCC_OscConfig+0x270>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a1b      	ldr	r3, [r3, #32]
 80019c2:	496d      	ldr	r1, [pc, #436]	; (8001b78 <HAL_RCC_OscConfig+0x270>)
 80019c4:	4313      	orrs	r3, r2
 80019c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019c8:	4b6b      	ldr	r3, [pc, #428]	; (8001b78 <HAL_RCC_OscConfig+0x270>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	69db      	ldr	r3, [r3, #28]
 80019d4:	021b      	lsls	r3, r3, #8
 80019d6:	4968      	ldr	r1, [pc, #416]	; (8001b78 <HAL_RCC_OscConfig+0x270>)
 80019d8:	4313      	orrs	r3, r2
 80019da:	604b      	str	r3, [r1, #4]
 80019dc:	e025      	b.n	8001a2a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019de:	4b66      	ldr	r3, [pc, #408]	; (8001b78 <HAL_RCC_OscConfig+0x270>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a65      	ldr	r2, [pc, #404]	; (8001b78 <HAL_RCC_OscConfig+0x270>)
 80019e4:	f043 0308 	orr.w	r3, r3, #8
 80019e8:	6013      	str	r3, [r2, #0]
 80019ea:	4b63      	ldr	r3, [pc, #396]	; (8001b78 <HAL_RCC_OscConfig+0x270>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a1b      	ldr	r3, [r3, #32]
 80019f6:	4960      	ldr	r1, [pc, #384]	; (8001b78 <HAL_RCC_OscConfig+0x270>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019fc:	4b5e      	ldr	r3, [pc, #376]	; (8001b78 <HAL_RCC_OscConfig+0x270>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	69db      	ldr	r3, [r3, #28]
 8001a08:	021b      	lsls	r3, r3, #8
 8001a0a:	495b      	ldr	r1, [pc, #364]	; (8001b78 <HAL_RCC_OscConfig+0x270>)
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d109      	bne.n	8001a2a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a1b      	ldr	r3, [r3, #32]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f000 fd8c 	bl	8002538 <RCC_SetFlashLatencyFromMSIRange>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e380      	b.n	800212c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a2a:	f000 fcc1 	bl	80023b0 <HAL_RCC_GetSysClockFreq>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	4b51      	ldr	r3, [pc, #324]	; (8001b78 <HAL_RCC_OscConfig+0x270>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	091b      	lsrs	r3, r3, #4
 8001a36:	f003 030f 	and.w	r3, r3, #15
 8001a3a:	4950      	ldr	r1, [pc, #320]	; (8001b7c <HAL_RCC_OscConfig+0x274>)
 8001a3c:	5ccb      	ldrb	r3, [r1, r3]
 8001a3e:	f003 031f 	and.w	r3, r3, #31
 8001a42:	fa22 f303 	lsr.w	r3, r2, r3
 8001a46:	4a4e      	ldr	r2, [pc, #312]	; (8001b80 <HAL_RCC_OscConfig+0x278>)
 8001a48:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a4a:	4b4e      	ldr	r3, [pc, #312]	; (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff fb86 	bl	8001160 <HAL_InitTick>
 8001a54:	4603      	mov	r3, r0
 8001a56:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a58:	7bfb      	ldrb	r3, [r7, #15]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d052      	beq.n	8001b04 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001a5e:	7bfb      	ldrb	r3, [r7, #15]
 8001a60:	e364      	b.n	800212c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d032      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a6a:	4b43      	ldr	r3, [pc, #268]	; (8001b78 <HAL_RCC_OscConfig+0x270>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a42      	ldr	r2, [pc, #264]	; (8001b78 <HAL_RCC_OscConfig+0x270>)
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a76:	f7ff fbc3 	bl	8001200 <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a7c:	e008      	b.n	8001a90 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a7e:	f7ff fbbf 	bl	8001200 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e34d      	b.n	800212c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a90:	4b39      	ldr	r3, [pc, #228]	; (8001b78 <HAL_RCC_OscConfig+0x270>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d0f0      	beq.n	8001a7e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a9c:	4b36      	ldr	r3, [pc, #216]	; (8001b78 <HAL_RCC_OscConfig+0x270>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a35      	ldr	r2, [pc, #212]	; (8001b78 <HAL_RCC_OscConfig+0x270>)
 8001aa2:	f043 0308 	orr.w	r3, r3, #8
 8001aa6:	6013      	str	r3, [r2, #0]
 8001aa8:	4b33      	ldr	r3, [pc, #204]	; (8001b78 <HAL_RCC_OscConfig+0x270>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a1b      	ldr	r3, [r3, #32]
 8001ab4:	4930      	ldr	r1, [pc, #192]	; (8001b78 <HAL_RCC_OscConfig+0x270>)
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001aba:	4b2f      	ldr	r3, [pc, #188]	; (8001b78 <HAL_RCC_OscConfig+0x270>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	021b      	lsls	r3, r3, #8
 8001ac8:	492b      	ldr	r1, [pc, #172]	; (8001b78 <HAL_RCC_OscConfig+0x270>)
 8001aca:	4313      	orrs	r3, r2
 8001acc:	604b      	str	r3, [r1, #4]
 8001ace:	e01a      	b.n	8001b06 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ad0:	4b29      	ldr	r3, [pc, #164]	; (8001b78 <HAL_RCC_OscConfig+0x270>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a28      	ldr	r2, [pc, #160]	; (8001b78 <HAL_RCC_OscConfig+0x270>)
 8001ad6:	f023 0301 	bic.w	r3, r3, #1
 8001ada:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001adc:	f7ff fb90 	bl	8001200 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ae4:	f7ff fb8c 	bl	8001200 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e31a      	b.n	800212c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001af6:	4b20      	ldr	r3, [pc, #128]	; (8001b78 <HAL_RCC_OscConfig+0x270>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d1f0      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x1dc>
 8001b02:	e000      	b.n	8001b06 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b04:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d073      	beq.n	8001bfa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	2b08      	cmp	r3, #8
 8001b16:	d005      	beq.n	8001b24 <HAL_RCC_OscConfig+0x21c>
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	2b0c      	cmp	r3, #12
 8001b1c:	d10e      	bne.n	8001b3c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	2b03      	cmp	r3, #3
 8001b22:	d10b      	bne.n	8001b3c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b24:	4b14      	ldr	r3, [pc, #80]	; (8001b78 <HAL_RCC_OscConfig+0x270>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d063      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x2f0>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d15f      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e2f7      	b.n	800212c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b44:	d106      	bne.n	8001b54 <HAL_RCC_OscConfig+0x24c>
 8001b46:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <HAL_RCC_OscConfig+0x270>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a0b      	ldr	r2, [pc, #44]	; (8001b78 <HAL_RCC_OscConfig+0x270>)
 8001b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b50:	6013      	str	r3, [r2, #0]
 8001b52:	e025      	b.n	8001ba0 <HAL_RCC_OscConfig+0x298>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b5c:	d114      	bne.n	8001b88 <HAL_RCC_OscConfig+0x280>
 8001b5e:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <HAL_RCC_OscConfig+0x270>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a05      	ldr	r2, [pc, #20]	; (8001b78 <HAL_RCC_OscConfig+0x270>)
 8001b64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b68:	6013      	str	r3, [r2, #0]
 8001b6a:	4b03      	ldr	r3, [pc, #12]	; (8001b78 <HAL_RCC_OscConfig+0x270>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a02      	ldr	r2, [pc, #8]	; (8001b78 <HAL_RCC_OscConfig+0x270>)
 8001b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b74:	6013      	str	r3, [r2, #0]
 8001b76:	e013      	b.n	8001ba0 <HAL_RCC_OscConfig+0x298>
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	080059d4 	.word	0x080059d4
 8001b80:	2000008c 	.word	0x2000008c
 8001b84:	20000090 	.word	0x20000090
 8001b88:	4ba0      	ldr	r3, [pc, #640]	; (8001e0c <HAL_RCC_OscConfig+0x504>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a9f      	ldr	r2, [pc, #636]	; (8001e0c <HAL_RCC_OscConfig+0x504>)
 8001b8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b92:	6013      	str	r3, [r2, #0]
 8001b94:	4b9d      	ldr	r3, [pc, #628]	; (8001e0c <HAL_RCC_OscConfig+0x504>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a9c      	ldr	r2, [pc, #624]	; (8001e0c <HAL_RCC_OscConfig+0x504>)
 8001b9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d013      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba8:	f7ff fb2a 	bl	8001200 <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bae:	e008      	b.n	8001bc2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bb0:	f7ff fb26 	bl	8001200 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b64      	cmp	r3, #100	; 0x64
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e2b4      	b.n	800212c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bc2:	4b92      	ldr	r3, [pc, #584]	; (8001e0c <HAL_RCC_OscConfig+0x504>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d0f0      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x2a8>
 8001bce:	e014      	b.n	8001bfa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd0:	f7ff fb16 	bl	8001200 <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bd8:	f7ff fb12 	bl	8001200 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b64      	cmp	r3, #100	; 0x64
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e2a0      	b.n	800212c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bea:	4b88      	ldr	r3, [pc, #544]	; (8001e0c <HAL_RCC_OscConfig+0x504>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1f0      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x2d0>
 8001bf6:	e000      	b.n	8001bfa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d060      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	2b04      	cmp	r3, #4
 8001c0a:	d005      	beq.n	8001c18 <HAL_RCC_OscConfig+0x310>
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	2b0c      	cmp	r3, #12
 8001c10:	d119      	bne.n	8001c46 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d116      	bne.n	8001c46 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c18:	4b7c      	ldr	r3, [pc, #496]	; (8001e0c <HAL_RCC_OscConfig+0x504>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d005      	beq.n	8001c30 <HAL_RCC_OscConfig+0x328>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d101      	bne.n	8001c30 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e27d      	b.n	800212c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c30:	4b76      	ldr	r3, [pc, #472]	; (8001e0c <HAL_RCC_OscConfig+0x504>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	061b      	lsls	r3, r3, #24
 8001c3e:	4973      	ldr	r1, [pc, #460]	; (8001e0c <HAL_RCC_OscConfig+0x504>)
 8001c40:	4313      	orrs	r3, r2
 8001c42:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c44:	e040      	b.n	8001cc8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d023      	beq.n	8001c96 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c4e:	4b6f      	ldr	r3, [pc, #444]	; (8001e0c <HAL_RCC_OscConfig+0x504>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a6e      	ldr	r2, [pc, #440]	; (8001e0c <HAL_RCC_OscConfig+0x504>)
 8001c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5a:	f7ff fad1 	bl	8001200 <HAL_GetTick>
 8001c5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c60:	e008      	b.n	8001c74 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c62:	f7ff facd 	bl	8001200 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e25b      	b.n	800212c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c74:	4b65      	ldr	r3, [pc, #404]	; (8001e0c <HAL_RCC_OscConfig+0x504>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d0f0      	beq.n	8001c62 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c80:	4b62      	ldr	r3, [pc, #392]	; (8001e0c <HAL_RCC_OscConfig+0x504>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	061b      	lsls	r3, r3, #24
 8001c8e:	495f      	ldr	r1, [pc, #380]	; (8001e0c <HAL_RCC_OscConfig+0x504>)
 8001c90:	4313      	orrs	r3, r2
 8001c92:	604b      	str	r3, [r1, #4]
 8001c94:	e018      	b.n	8001cc8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c96:	4b5d      	ldr	r3, [pc, #372]	; (8001e0c <HAL_RCC_OscConfig+0x504>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a5c      	ldr	r2, [pc, #368]	; (8001e0c <HAL_RCC_OscConfig+0x504>)
 8001c9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ca0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca2:	f7ff faad 	bl	8001200 <HAL_GetTick>
 8001ca6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ca8:	e008      	b.n	8001cbc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001caa:	f7ff faa9 	bl	8001200 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e237      	b.n	800212c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cbc:	4b53      	ldr	r3, [pc, #332]	; (8001e0c <HAL_RCC_OscConfig+0x504>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d1f0      	bne.n	8001caa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0308 	and.w	r3, r3, #8
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d03c      	beq.n	8001d4e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	695b      	ldr	r3, [r3, #20]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d01c      	beq.n	8001d16 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cdc:	4b4b      	ldr	r3, [pc, #300]	; (8001e0c <HAL_RCC_OscConfig+0x504>)
 8001cde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ce2:	4a4a      	ldr	r2, [pc, #296]	; (8001e0c <HAL_RCC_OscConfig+0x504>)
 8001ce4:	f043 0301 	orr.w	r3, r3, #1
 8001ce8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cec:	f7ff fa88 	bl	8001200 <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cf4:	f7ff fa84 	bl	8001200 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e212      	b.n	800212c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d06:	4b41      	ldr	r3, [pc, #260]	; (8001e0c <HAL_RCC_OscConfig+0x504>)
 8001d08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d0ef      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x3ec>
 8001d14:	e01b      	b.n	8001d4e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d16:	4b3d      	ldr	r3, [pc, #244]	; (8001e0c <HAL_RCC_OscConfig+0x504>)
 8001d18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d1c:	4a3b      	ldr	r2, [pc, #236]	; (8001e0c <HAL_RCC_OscConfig+0x504>)
 8001d1e:	f023 0301 	bic.w	r3, r3, #1
 8001d22:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d26:	f7ff fa6b 	bl	8001200 <HAL_GetTick>
 8001d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d2c:	e008      	b.n	8001d40 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d2e:	f7ff fa67 	bl	8001200 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e1f5      	b.n	800212c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d40:	4b32      	ldr	r3, [pc, #200]	; (8001e0c <HAL_RCC_OscConfig+0x504>)
 8001d42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1ef      	bne.n	8001d2e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0304 	and.w	r3, r3, #4
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f000 80a6 	beq.w	8001ea8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d60:	4b2a      	ldr	r3, [pc, #168]	; (8001e0c <HAL_RCC_OscConfig+0x504>)
 8001d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d10d      	bne.n	8001d88 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d6c:	4b27      	ldr	r3, [pc, #156]	; (8001e0c <HAL_RCC_OscConfig+0x504>)
 8001d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d70:	4a26      	ldr	r2, [pc, #152]	; (8001e0c <HAL_RCC_OscConfig+0x504>)
 8001d72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d76:	6593      	str	r3, [r2, #88]	; 0x58
 8001d78:	4b24      	ldr	r3, [pc, #144]	; (8001e0c <HAL_RCC_OscConfig+0x504>)
 8001d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d80:	60bb      	str	r3, [r7, #8]
 8001d82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d84:	2301      	movs	r3, #1
 8001d86:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d88:	4b21      	ldr	r3, [pc, #132]	; (8001e10 <HAL_RCC_OscConfig+0x508>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d118      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d94:	4b1e      	ldr	r3, [pc, #120]	; (8001e10 <HAL_RCC_OscConfig+0x508>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a1d      	ldr	r2, [pc, #116]	; (8001e10 <HAL_RCC_OscConfig+0x508>)
 8001d9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d9e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001da0:	f7ff fa2e 	bl	8001200 <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001da8:	f7ff fa2a 	bl	8001200 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e1b8      	b.n	800212c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dba:	4b15      	ldr	r3, [pc, #84]	; (8001e10 <HAL_RCC_OscConfig+0x508>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d0f0      	beq.n	8001da8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d108      	bne.n	8001de0 <HAL_RCC_OscConfig+0x4d8>
 8001dce:	4b0f      	ldr	r3, [pc, #60]	; (8001e0c <HAL_RCC_OscConfig+0x504>)
 8001dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dd4:	4a0d      	ldr	r2, [pc, #52]	; (8001e0c <HAL_RCC_OscConfig+0x504>)
 8001dd6:	f043 0301 	orr.w	r3, r3, #1
 8001dda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dde:	e029      	b.n	8001e34 <HAL_RCC_OscConfig+0x52c>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	2b05      	cmp	r3, #5
 8001de6:	d115      	bne.n	8001e14 <HAL_RCC_OscConfig+0x50c>
 8001de8:	4b08      	ldr	r3, [pc, #32]	; (8001e0c <HAL_RCC_OscConfig+0x504>)
 8001dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dee:	4a07      	ldr	r2, [pc, #28]	; (8001e0c <HAL_RCC_OscConfig+0x504>)
 8001df0:	f043 0304 	orr.w	r3, r3, #4
 8001df4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001df8:	4b04      	ldr	r3, [pc, #16]	; (8001e0c <HAL_RCC_OscConfig+0x504>)
 8001dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dfe:	4a03      	ldr	r2, [pc, #12]	; (8001e0c <HAL_RCC_OscConfig+0x504>)
 8001e00:	f043 0301 	orr.w	r3, r3, #1
 8001e04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e08:	e014      	b.n	8001e34 <HAL_RCC_OscConfig+0x52c>
 8001e0a:	bf00      	nop
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	40007000 	.word	0x40007000
 8001e14:	4b9d      	ldr	r3, [pc, #628]	; (800208c <HAL_RCC_OscConfig+0x784>)
 8001e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e1a:	4a9c      	ldr	r2, [pc, #624]	; (800208c <HAL_RCC_OscConfig+0x784>)
 8001e1c:	f023 0301 	bic.w	r3, r3, #1
 8001e20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e24:	4b99      	ldr	r3, [pc, #612]	; (800208c <HAL_RCC_OscConfig+0x784>)
 8001e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e2a:	4a98      	ldr	r2, [pc, #608]	; (800208c <HAL_RCC_OscConfig+0x784>)
 8001e2c:	f023 0304 	bic.w	r3, r3, #4
 8001e30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d016      	beq.n	8001e6a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e3c:	f7ff f9e0 	bl	8001200 <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e42:	e00a      	b.n	8001e5a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e44:	f7ff f9dc 	bl	8001200 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e168      	b.n	800212c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e5a:	4b8c      	ldr	r3, [pc, #560]	; (800208c <HAL_RCC_OscConfig+0x784>)
 8001e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d0ed      	beq.n	8001e44 <HAL_RCC_OscConfig+0x53c>
 8001e68:	e015      	b.n	8001e96 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e6a:	f7ff f9c9 	bl	8001200 <HAL_GetTick>
 8001e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e70:	e00a      	b.n	8001e88 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e72:	f7ff f9c5 	bl	8001200 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e151      	b.n	800212c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e88:	4b80      	ldr	r3, [pc, #512]	; (800208c <HAL_RCC_OscConfig+0x784>)
 8001e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1ed      	bne.n	8001e72 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e96:	7ffb      	ldrb	r3, [r7, #31]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d105      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e9c:	4b7b      	ldr	r3, [pc, #492]	; (800208c <HAL_RCC_OscConfig+0x784>)
 8001e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea0:	4a7a      	ldr	r2, [pc, #488]	; (800208c <HAL_RCC_OscConfig+0x784>)
 8001ea2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ea6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0320 	and.w	r3, r3, #32
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d03c      	beq.n	8001f2e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d01c      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ebc:	4b73      	ldr	r3, [pc, #460]	; (800208c <HAL_RCC_OscConfig+0x784>)
 8001ebe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ec2:	4a72      	ldr	r2, [pc, #456]	; (800208c <HAL_RCC_OscConfig+0x784>)
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ecc:	f7ff f998 	bl	8001200 <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ed4:	f7ff f994 	bl	8001200 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e122      	b.n	800212c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ee6:	4b69      	ldr	r3, [pc, #420]	; (800208c <HAL_RCC_OscConfig+0x784>)
 8001ee8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d0ef      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x5cc>
 8001ef4:	e01b      	b.n	8001f2e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ef6:	4b65      	ldr	r3, [pc, #404]	; (800208c <HAL_RCC_OscConfig+0x784>)
 8001ef8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001efc:	4a63      	ldr	r2, [pc, #396]	; (800208c <HAL_RCC_OscConfig+0x784>)
 8001efe:	f023 0301 	bic.w	r3, r3, #1
 8001f02:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f06:	f7ff f97b 	bl	8001200 <HAL_GetTick>
 8001f0a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f0c:	e008      	b.n	8001f20 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f0e:	f7ff f977 	bl	8001200 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e105      	b.n	800212c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f20:	4b5a      	ldr	r3, [pc, #360]	; (800208c <HAL_RCC_OscConfig+0x784>)
 8001f22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1ef      	bne.n	8001f0e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f000 80f9 	beq.w	800212a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	f040 80cf 	bne.w	80020e0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f42:	4b52      	ldr	r3, [pc, #328]	; (800208c <HAL_RCC_OscConfig+0x784>)
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	f003 0203 	and.w	r2, r3, #3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d12c      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f60:	3b01      	subs	r3, #1
 8001f62:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d123      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f72:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d11b      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f82:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d113      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f92:	085b      	lsrs	r3, r3, #1
 8001f94:	3b01      	subs	r3, #1
 8001f96:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d109      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	085b      	lsrs	r3, r3, #1
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d071      	beq.n	8002094 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	2b0c      	cmp	r3, #12
 8001fb4:	d068      	beq.n	8002088 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001fb6:	4b35      	ldr	r3, [pc, #212]	; (800208c <HAL_RCC_OscConfig+0x784>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d105      	bne.n	8001fce <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001fc2:	4b32      	ldr	r3, [pc, #200]	; (800208c <HAL_RCC_OscConfig+0x784>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e0ac      	b.n	800212c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001fd2:	4b2e      	ldr	r3, [pc, #184]	; (800208c <HAL_RCC_OscConfig+0x784>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a2d      	ldr	r2, [pc, #180]	; (800208c <HAL_RCC_OscConfig+0x784>)
 8001fd8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fdc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fde:	f7ff f90f 	bl	8001200 <HAL_GetTick>
 8001fe2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fe4:	e008      	b.n	8001ff8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fe6:	f7ff f90b 	bl	8001200 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e099      	b.n	800212c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ff8:	4b24      	ldr	r3, [pc, #144]	; (800208c <HAL_RCC_OscConfig+0x784>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1f0      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002004:	4b21      	ldr	r3, [pc, #132]	; (800208c <HAL_RCC_OscConfig+0x784>)
 8002006:	68da      	ldr	r2, [r3, #12]
 8002008:	4b21      	ldr	r3, [pc, #132]	; (8002090 <HAL_RCC_OscConfig+0x788>)
 800200a:	4013      	ands	r3, r2
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002014:	3a01      	subs	r2, #1
 8002016:	0112      	lsls	r2, r2, #4
 8002018:	4311      	orrs	r1, r2
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800201e:	0212      	lsls	r2, r2, #8
 8002020:	4311      	orrs	r1, r2
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002026:	0852      	lsrs	r2, r2, #1
 8002028:	3a01      	subs	r2, #1
 800202a:	0552      	lsls	r2, r2, #21
 800202c:	4311      	orrs	r1, r2
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002032:	0852      	lsrs	r2, r2, #1
 8002034:	3a01      	subs	r2, #1
 8002036:	0652      	lsls	r2, r2, #25
 8002038:	4311      	orrs	r1, r2
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800203e:	06d2      	lsls	r2, r2, #27
 8002040:	430a      	orrs	r2, r1
 8002042:	4912      	ldr	r1, [pc, #72]	; (800208c <HAL_RCC_OscConfig+0x784>)
 8002044:	4313      	orrs	r3, r2
 8002046:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002048:	4b10      	ldr	r3, [pc, #64]	; (800208c <HAL_RCC_OscConfig+0x784>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a0f      	ldr	r2, [pc, #60]	; (800208c <HAL_RCC_OscConfig+0x784>)
 800204e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002052:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002054:	4b0d      	ldr	r3, [pc, #52]	; (800208c <HAL_RCC_OscConfig+0x784>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	4a0c      	ldr	r2, [pc, #48]	; (800208c <HAL_RCC_OscConfig+0x784>)
 800205a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800205e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002060:	f7ff f8ce 	bl	8001200 <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002068:	f7ff f8ca 	bl	8001200 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e058      	b.n	800212c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800207a:	4b04      	ldr	r3, [pc, #16]	; (800208c <HAL_RCC_OscConfig+0x784>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d0f0      	beq.n	8002068 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002086:	e050      	b.n	800212a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e04f      	b.n	800212c <HAL_RCC_OscConfig+0x824>
 800208c:	40021000 	.word	0x40021000
 8002090:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002094:	4b27      	ldr	r3, [pc, #156]	; (8002134 <HAL_RCC_OscConfig+0x82c>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d144      	bne.n	800212a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80020a0:	4b24      	ldr	r3, [pc, #144]	; (8002134 <HAL_RCC_OscConfig+0x82c>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a23      	ldr	r2, [pc, #140]	; (8002134 <HAL_RCC_OscConfig+0x82c>)
 80020a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020aa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020ac:	4b21      	ldr	r3, [pc, #132]	; (8002134 <HAL_RCC_OscConfig+0x82c>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	4a20      	ldr	r2, [pc, #128]	; (8002134 <HAL_RCC_OscConfig+0x82c>)
 80020b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80020b8:	f7ff f8a2 	bl	8001200 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c0:	f7ff f89e 	bl	8001200 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e02c      	b.n	800212c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020d2:	4b18      	ldr	r3, [pc, #96]	; (8002134 <HAL_RCC_OscConfig+0x82c>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d0f0      	beq.n	80020c0 <HAL_RCC_OscConfig+0x7b8>
 80020de:	e024      	b.n	800212a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	2b0c      	cmp	r3, #12
 80020e4:	d01f      	beq.n	8002126 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020e6:	4b13      	ldr	r3, [pc, #76]	; (8002134 <HAL_RCC_OscConfig+0x82c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a12      	ldr	r2, [pc, #72]	; (8002134 <HAL_RCC_OscConfig+0x82c>)
 80020ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f2:	f7ff f885 	bl	8001200 <HAL_GetTick>
 80020f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020f8:	e008      	b.n	800210c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020fa:	f7ff f881 	bl	8001200 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d901      	bls.n	800210c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e00f      	b.n	800212c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800210c:	4b09      	ldr	r3, [pc, #36]	; (8002134 <HAL_RCC_OscConfig+0x82c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d1f0      	bne.n	80020fa <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002118:	4b06      	ldr	r3, [pc, #24]	; (8002134 <HAL_RCC_OscConfig+0x82c>)
 800211a:	68da      	ldr	r2, [r3, #12]
 800211c:	4905      	ldr	r1, [pc, #20]	; (8002134 <HAL_RCC_OscConfig+0x82c>)
 800211e:	4b06      	ldr	r3, [pc, #24]	; (8002138 <HAL_RCC_OscConfig+0x830>)
 8002120:	4013      	ands	r3, r2
 8002122:	60cb      	str	r3, [r1, #12]
 8002124:	e001      	b.n	800212a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e000      	b.n	800212c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	3720      	adds	r7, #32
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40021000 	.word	0x40021000
 8002138:	feeefffc 	.word	0xfeeefffc

0800213c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002146:	2300      	movs	r3, #0
 8002148:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d101      	bne.n	8002154 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e11d      	b.n	8002390 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002154:	4b90      	ldr	r3, [pc, #576]	; (8002398 <HAL_RCC_ClockConfig+0x25c>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 030f 	and.w	r3, r3, #15
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	429a      	cmp	r2, r3
 8002160:	d910      	bls.n	8002184 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002162:	4b8d      	ldr	r3, [pc, #564]	; (8002398 <HAL_RCC_ClockConfig+0x25c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f023 020f 	bic.w	r2, r3, #15
 800216a:	498b      	ldr	r1, [pc, #556]	; (8002398 <HAL_RCC_ClockConfig+0x25c>)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	4313      	orrs	r3, r2
 8002170:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002172:	4b89      	ldr	r3, [pc, #548]	; (8002398 <HAL_RCC_ClockConfig+0x25c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	429a      	cmp	r2, r3
 800217e:	d001      	beq.n	8002184 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e105      	b.n	8002390 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d010      	beq.n	80021b2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	4b81      	ldr	r3, [pc, #516]	; (800239c <HAL_RCC_ClockConfig+0x260>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800219c:	429a      	cmp	r2, r3
 800219e:	d908      	bls.n	80021b2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021a0:	4b7e      	ldr	r3, [pc, #504]	; (800239c <HAL_RCC_ClockConfig+0x260>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	497b      	ldr	r1, [pc, #492]	; (800239c <HAL_RCC_ClockConfig+0x260>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d079      	beq.n	80022b2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	2b03      	cmp	r3, #3
 80021c4:	d11e      	bne.n	8002204 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021c6:	4b75      	ldr	r3, [pc, #468]	; (800239c <HAL_RCC_ClockConfig+0x260>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e0dc      	b.n	8002390 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80021d6:	f000 fa09 	bl	80025ec <RCC_GetSysClockFreqFromPLLSource>
 80021da:	4603      	mov	r3, r0
 80021dc:	4a70      	ldr	r2, [pc, #448]	; (80023a0 <HAL_RCC_ClockConfig+0x264>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d946      	bls.n	8002270 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80021e2:	4b6e      	ldr	r3, [pc, #440]	; (800239c <HAL_RCC_ClockConfig+0x260>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d140      	bne.n	8002270 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80021ee:	4b6b      	ldr	r3, [pc, #428]	; (800239c <HAL_RCC_ClockConfig+0x260>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021f6:	4a69      	ldr	r2, [pc, #420]	; (800239c <HAL_RCC_ClockConfig+0x260>)
 80021f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021fc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80021fe:	2380      	movs	r3, #128	; 0x80
 8002200:	617b      	str	r3, [r7, #20]
 8002202:	e035      	b.n	8002270 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	2b02      	cmp	r3, #2
 800220a:	d107      	bne.n	800221c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800220c:	4b63      	ldr	r3, [pc, #396]	; (800239c <HAL_RCC_ClockConfig+0x260>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d115      	bne.n	8002244 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e0b9      	b.n	8002390 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d107      	bne.n	8002234 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002224:	4b5d      	ldr	r3, [pc, #372]	; (800239c <HAL_RCC_ClockConfig+0x260>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d109      	bne.n	8002244 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e0ad      	b.n	8002390 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002234:	4b59      	ldr	r3, [pc, #356]	; (800239c <HAL_RCC_ClockConfig+0x260>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800223c:	2b00      	cmp	r3, #0
 800223e:	d101      	bne.n	8002244 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e0a5      	b.n	8002390 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002244:	f000 f8b4 	bl	80023b0 <HAL_RCC_GetSysClockFreq>
 8002248:	4603      	mov	r3, r0
 800224a:	4a55      	ldr	r2, [pc, #340]	; (80023a0 <HAL_RCC_ClockConfig+0x264>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d90f      	bls.n	8002270 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002250:	4b52      	ldr	r3, [pc, #328]	; (800239c <HAL_RCC_ClockConfig+0x260>)
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d109      	bne.n	8002270 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800225c:	4b4f      	ldr	r3, [pc, #316]	; (800239c <HAL_RCC_ClockConfig+0x260>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002264:	4a4d      	ldr	r2, [pc, #308]	; (800239c <HAL_RCC_ClockConfig+0x260>)
 8002266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800226a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800226c:	2380      	movs	r3, #128	; 0x80
 800226e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002270:	4b4a      	ldr	r3, [pc, #296]	; (800239c <HAL_RCC_ClockConfig+0x260>)
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f023 0203 	bic.w	r2, r3, #3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	4947      	ldr	r1, [pc, #284]	; (800239c <HAL_RCC_ClockConfig+0x260>)
 800227e:	4313      	orrs	r3, r2
 8002280:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002282:	f7fe ffbd 	bl	8001200 <HAL_GetTick>
 8002286:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002288:	e00a      	b.n	80022a0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800228a:	f7fe ffb9 	bl	8001200 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	f241 3288 	movw	r2, #5000	; 0x1388
 8002298:	4293      	cmp	r3, r2
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e077      	b.n	8002390 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022a0:	4b3e      	ldr	r3, [pc, #248]	; (800239c <HAL_RCC_ClockConfig+0x260>)
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f003 020c 	and.w	r2, r3, #12
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d1eb      	bne.n	800228a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	2b80      	cmp	r3, #128	; 0x80
 80022b6:	d105      	bne.n	80022c4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80022b8:	4b38      	ldr	r3, [pc, #224]	; (800239c <HAL_RCC_ClockConfig+0x260>)
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	4a37      	ldr	r2, [pc, #220]	; (800239c <HAL_RCC_ClockConfig+0x260>)
 80022be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022c2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d010      	beq.n	80022f2 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689a      	ldr	r2, [r3, #8]
 80022d4:	4b31      	ldr	r3, [pc, #196]	; (800239c <HAL_RCC_ClockConfig+0x260>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022dc:	429a      	cmp	r2, r3
 80022de:	d208      	bcs.n	80022f2 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022e0:	4b2e      	ldr	r3, [pc, #184]	; (800239c <HAL_RCC_ClockConfig+0x260>)
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	492b      	ldr	r1, [pc, #172]	; (800239c <HAL_RCC_ClockConfig+0x260>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022f2:	4b29      	ldr	r3, [pc, #164]	; (8002398 <HAL_RCC_ClockConfig+0x25c>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 030f 	and.w	r3, r3, #15
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d210      	bcs.n	8002322 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002300:	4b25      	ldr	r3, [pc, #148]	; (8002398 <HAL_RCC_ClockConfig+0x25c>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f023 020f 	bic.w	r2, r3, #15
 8002308:	4923      	ldr	r1, [pc, #140]	; (8002398 <HAL_RCC_ClockConfig+0x25c>)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	4313      	orrs	r3, r2
 800230e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002310:	4b21      	ldr	r3, [pc, #132]	; (8002398 <HAL_RCC_ClockConfig+0x25c>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 030f 	and.w	r3, r3, #15
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	429a      	cmp	r2, r3
 800231c:	d001      	beq.n	8002322 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e036      	b.n	8002390 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0304 	and.w	r3, r3, #4
 800232a:	2b00      	cmp	r3, #0
 800232c:	d008      	beq.n	8002340 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800232e:	4b1b      	ldr	r3, [pc, #108]	; (800239c <HAL_RCC_ClockConfig+0x260>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	4918      	ldr	r1, [pc, #96]	; (800239c <HAL_RCC_ClockConfig+0x260>)
 800233c:	4313      	orrs	r3, r2
 800233e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0308 	and.w	r3, r3, #8
 8002348:	2b00      	cmp	r3, #0
 800234a:	d009      	beq.n	8002360 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800234c:	4b13      	ldr	r3, [pc, #76]	; (800239c <HAL_RCC_ClockConfig+0x260>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	4910      	ldr	r1, [pc, #64]	; (800239c <HAL_RCC_ClockConfig+0x260>)
 800235c:	4313      	orrs	r3, r2
 800235e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002360:	f000 f826 	bl	80023b0 <HAL_RCC_GetSysClockFreq>
 8002364:	4602      	mov	r2, r0
 8002366:	4b0d      	ldr	r3, [pc, #52]	; (800239c <HAL_RCC_ClockConfig+0x260>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	091b      	lsrs	r3, r3, #4
 800236c:	f003 030f 	and.w	r3, r3, #15
 8002370:	490c      	ldr	r1, [pc, #48]	; (80023a4 <HAL_RCC_ClockConfig+0x268>)
 8002372:	5ccb      	ldrb	r3, [r1, r3]
 8002374:	f003 031f 	and.w	r3, r3, #31
 8002378:	fa22 f303 	lsr.w	r3, r2, r3
 800237c:	4a0a      	ldr	r2, [pc, #40]	; (80023a8 <HAL_RCC_ClockConfig+0x26c>)
 800237e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002380:	4b0a      	ldr	r3, [pc, #40]	; (80023ac <HAL_RCC_ClockConfig+0x270>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4618      	mov	r0, r3
 8002386:	f7fe feeb 	bl	8001160 <HAL_InitTick>
 800238a:	4603      	mov	r3, r0
 800238c:	73fb      	strb	r3, [r7, #15]

  return status;
 800238e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002390:	4618      	mov	r0, r3
 8002392:	3718      	adds	r7, #24
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40022000 	.word	0x40022000
 800239c:	40021000 	.word	0x40021000
 80023a0:	04c4b400 	.word	0x04c4b400
 80023a4:	080059d4 	.word	0x080059d4
 80023a8:	2000008c 	.word	0x2000008c
 80023ac:	20000090 	.word	0x20000090

080023b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b089      	sub	sp, #36	; 0x24
 80023b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80023b6:	2300      	movs	r3, #0
 80023b8:	61fb      	str	r3, [r7, #28]
 80023ba:	2300      	movs	r3, #0
 80023bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023be:	4b3e      	ldr	r3, [pc, #248]	; (80024b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f003 030c 	and.w	r3, r3, #12
 80023c6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023c8:	4b3b      	ldr	r3, [pc, #236]	; (80024b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	f003 0303 	and.w	r3, r3, #3
 80023d0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d005      	beq.n	80023e4 <HAL_RCC_GetSysClockFreq+0x34>
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	2b0c      	cmp	r3, #12
 80023dc:	d121      	bne.n	8002422 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d11e      	bne.n	8002422 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80023e4:	4b34      	ldr	r3, [pc, #208]	; (80024b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0308 	and.w	r3, r3, #8
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d107      	bne.n	8002400 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80023f0:	4b31      	ldr	r3, [pc, #196]	; (80024b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80023f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023f6:	0a1b      	lsrs	r3, r3, #8
 80023f8:	f003 030f 	and.w	r3, r3, #15
 80023fc:	61fb      	str	r3, [r7, #28]
 80023fe:	e005      	b.n	800240c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002400:	4b2d      	ldr	r3, [pc, #180]	; (80024b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	091b      	lsrs	r3, r3, #4
 8002406:	f003 030f 	and.w	r3, r3, #15
 800240a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800240c:	4a2b      	ldr	r2, [pc, #172]	; (80024bc <HAL_RCC_GetSysClockFreq+0x10c>)
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002414:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10d      	bne.n	8002438 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002420:	e00a      	b.n	8002438 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	2b04      	cmp	r3, #4
 8002426:	d102      	bne.n	800242e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002428:	4b25      	ldr	r3, [pc, #148]	; (80024c0 <HAL_RCC_GetSysClockFreq+0x110>)
 800242a:	61bb      	str	r3, [r7, #24]
 800242c:	e004      	b.n	8002438 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	2b08      	cmp	r3, #8
 8002432:	d101      	bne.n	8002438 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002434:	4b23      	ldr	r3, [pc, #140]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002436:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	2b0c      	cmp	r3, #12
 800243c:	d134      	bne.n	80024a8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800243e:	4b1e      	ldr	r3, [pc, #120]	; (80024b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	f003 0303 	and.w	r3, r3, #3
 8002446:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	2b02      	cmp	r3, #2
 800244c:	d003      	beq.n	8002456 <HAL_RCC_GetSysClockFreq+0xa6>
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	2b03      	cmp	r3, #3
 8002452:	d003      	beq.n	800245c <HAL_RCC_GetSysClockFreq+0xac>
 8002454:	e005      	b.n	8002462 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002456:	4b1a      	ldr	r3, [pc, #104]	; (80024c0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002458:	617b      	str	r3, [r7, #20]
      break;
 800245a:	e005      	b.n	8002468 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800245c:	4b19      	ldr	r3, [pc, #100]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x114>)
 800245e:	617b      	str	r3, [r7, #20]
      break;
 8002460:	e002      	b.n	8002468 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	617b      	str	r3, [r7, #20]
      break;
 8002466:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002468:	4b13      	ldr	r3, [pc, #76]	; (80024b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	091b      	lsrs	r3, r3, #4
 800246e:	f003 030f 	and.w	r3, r3, #15
 8002472:	3301      	adds	r3, #1
 8002474:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002476:	4b10      	ldr	r3, [pc, #64]	; (80024b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	0a1b      	lsrs	r3, r3, #8
 800247c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002480:	697a      	ldr	r2, [r7, #20]
 8002482:	fb03 f202 	mul.w	r2, r3, r2
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	fbb2 f3f3 	udiv	r3, r2, r3
 800248c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800248e:	4b0a      	ldr	r3, [pc, #40]	; (80024b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	0e5b      	lsrs	r3, r3, #25
 8002494:	f003 0303 	and.w	r3, r3, #3
 8002498:	3301      	adds	r3, #1
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800249e:	697a      	ldr	r2, [r7, #20]
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80024a8:	69bb      	ldr	r3, [r7, #24]
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3724      	adds	r7, #36	; 0x24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	40021000 	.word	0x40021000
 80024bc:	080059ec 	.word	0x080059ec
 80024c0:	00f42400 	.word	0x00f42400
 80024c4:	007a1200 	.word	0x007a1200

080024c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024cc:	4b03      	ldr	r3, [pc, #12]	; (80024dc <HAL_RCC_GetHCLKFreq+0x14>)
 80024ce:	681b      	ldr	r3, [r3, #0]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	2000008c 	.word	0x2000008c

080024e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80024e4:	f7ff fff0 	bl	80024c8 <HAL_RCC_GetHCLKFreq>
 80024e8:	4602      	mov	r2, r0
 80024ea:	4b06      	ldr	r3, [pc, #24]	; (8002504 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	0a1b      	lsrs	r3, r3, #8
 80024f0:	f003 0307 	and.w	r3, r3, #7
 80024f4:	4904      	ldr	r1, [pc, #16]	; (8002508 <HAL_RCC_GetPCLK1Freq+0x28>)
 80024f6:	5ccb      	ldrb	r3, [r1, r3]
 80024f8:	f003 031f 	and.w	r3, r3, #31
 80024fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002500:	4618      	mov	r0, r3
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40021000 	.word	0x40021000
 8002508:	080059e4 	.word	0x080059e4

0800250c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002510:	f7ff ffda 	bl	80024c8 <HAL_RCC_GetHCLKFreq>
 8002514:	4602      	mov	r2, r0
 8002516:	4b06      	ldr	r3, [pc, #24]	; (8002530 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	0adb      	lsrs	r3, r3, #11
 800251c:	f003 0307 	and.w	r3, r3, #7
 8002520:	4904      	ldr	r1, [pc, #16]	; (8002534 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002522:	5ccb      	ldrb	r3, [r1, r3]
 8002524:	f003 031f 	and.w	r3, r3, #31
 8002528:	fa22 f303 	lsr.w	r3, r2, r3
}
 800252c:	4618      	mov	r0, r3
 800252e:	bd80      	pop	{r7, pc}
 8002530:	40021000 	.word	0x40021000
 8002534:	080059e4 	.word	0x080059e4

08002538 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002540:	2300      	movs	r3, #0
 8002542:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002544:	4b27      	ldr	r3, [pc, #156]	; (80025e4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d003      	beq.n	8002558 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002550:	f7ff f906 	bl	8001760 <HAL_PWREx_GetVoltageRange>
 8002554:	6178      	str	r0, [r7, #20]
 8002556:	e014      	b.n	8002582 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002558:	4b22      	ldr	r3, [pc, #136]	; (80025e4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800255a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800255c:	4a21      	ldr	r2, [pc, #132]	; (80025e4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800255e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002562:	6593      	str	r3, [r2, #88]	; 0x58
 8002564:	4b1f      	ldr	r3, [pc, #124]	; (80025e4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800256c:	60fb      	str	r3, [r7, #12]
 800256e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002570:	f7ff f8f6 	bl	8001760 <HAL_PWREx_GetVoltageRange>
 8002574:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002576:	4b1b      	ldr	r3, [pc, #108]	; (80025e4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800257a:	4a1a      	ldr	r2, [pc, #104]	; (80025e4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800257c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002580:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002588:	d10b      	bne.n	80025a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2b80      	cmp	r3, #128	; 0x80
 800258e:	d913      	bls.n	80025b8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2ba0      	cmp	r3, #160	; 0xa0
 8002594:	d902      	bls.n	800259c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002596:	2302      	movs	r3, #2
 8002598:	613b      	str	r3, [r7, #16]
 800259a:	e00d      	b.n	80025b8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800259c:	2301      	movs	r3, #1
 800259e:	613b      	str	r3, [r7, #16]
 80025a0:	e00a      	b.n	80025b8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2b7f      	cmp	r3, #127	; 0x7f
 80025a6:	d902      	bls.n	80025ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80025a8:	2302      	movs	r3, #2
 80025aa:	613b      	str	r3, [r7, #16]
 80025ac:	e004      	b.n	80025b8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2b70      	cmp	r3, #112	; 0x70
 80025b2:	d101      	bne.n	80025b8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025b4:	2301      	movs	r3, #1
 80025b6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80025b8:	4b0b      	ldr	r3, [pc, #44]	; (80025e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f023 020f 	bic.w	r2, r3, #15
 80025c0:	4909      	ldr	r1, [pc, #36]	; (80025e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80025c8:	4b07      	ldr	r3, [pc, #28]	; (80025e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 030f 	and.w	r3, r3, #15
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d001      	beq.n	80025da <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e000      	b.n	80025dc <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3718      	adds	r7, #24
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	40021000 	.word	0x40021000
 80025e8:	40022000 	.word	0x40022000

080025ec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b087      	sub	sp, #28
 80025f0:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025f2:	4b2d      	ldr	r3, [pc, #180]	; (80026a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	f003 0303 	and.w	r3, r3, #3
 80025fa:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2b03      	cmp	r3, #3
 8002600:	d00b      	beq.n	800261a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2b03      	cmp	r3, #3
 8002606:	d825      	bhi.n	8002654 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d008      	beq.n	8002620 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2b02      	cmp	r3, #2
 8002612:	d11f      	bne.n	8002654 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002614:	4b25      	ldr	r3, [pc, #148]	; (80026ac <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002616:	613b      	str	r3, [r7, #16]
    break;
 8002618:	e01f      	b.n	800265a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800261a:	4b25      	ldr	r3, [pc, #148]	; (80026b0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800261c:	613b      	str	r3, [r7, #16]
    break;
 800261e:	e01c      	b.n	800265a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002620:	4b21      	ldr	r3, [pc, #132]	; (80026a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0308 	and.w	r3, r3, #8
 8002628:	2b00      	cmp	r3, #0
 800262a:	d107      	bne.n	800263c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800262c:	4b1e      	ldr	r3, [pc, #120]	; (80026a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800262e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002632:	0a1b      	lsrs	r3, r3, #8
 8002634:	f003 030f 	and.w	r3, r3, #15
 8002638:	617b      	str	r3, [r7, #20]
 800263a:	e005      	b.n	8002648 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800263c:	4b1a      	ldr	r3, [pc, #104]	; (80026a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	091b      	lsrs	r3, r3, #4
 8002642:	f003 030f 	and.w	r3, r3, #15
 8002646:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002648:	4a1a      	ldr	r2, [pc, #104]	; (80026b4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002650:	613b      	str	r3, [r7, #16]
    break;
 8002652:	e002      	b.n	800265a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002654:	2300      	movs	r3, #0
 8002656:	613b      	str	r3, [r7, #16]
    break;
 8002658:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800265a:	4b13      	ldr	r3, [pc, #76]	; (80026a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	091b      	lsrs	r3, r3, #4
 8002660:	f003 030f 	and.w	r3, r3, #15
 8002664:	3301      	adds	r3, #1
 8002666:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002668:	4b0f      	ldr	r3, [pc, #60]	; (80026a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	0a1b      	lsrs	r3, r3, #8
 800266e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	fb03 f202 	mul.w	r2, r3, r2
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	fbb2 f3f3 	udiv	r3, r2, r3
 800267e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002680:	4b09      	ldr	r3, [pc, #36]	; (80026a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	0e5b      	lsrs	r3, r3, #25
 8002686:	f003 0303 	and.w	r3, r3, #3
 800268a:	3301      	adds	r3, #1
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	fbb2 f3f3 	udiv	r3, r2, r3
 8002698:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800269a:	683b      	ldr	r3, [r7, #0]
}
 800269c:	4618      	mov	r0, r3
 800269e:	371c      	adds	r7, #28
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	40021000 	.word	0x40021000
 80026ac:	00f42400 	.word	0x00f42400
 80026b0:	007a1200 	.word	0x007a1200
 80026b4:	080059ec 	.word	0x080059ec

080026b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80026c0:	2300      	movs	r3, #0
 80026c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026c4:	2300      	movs	r3, #0
 80026c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d040      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026d8:	2b80      	cmp	r3, #128	; 0x80
 80026da:	d02a      	beq.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80026dc:	2b80      	cmp	r3, #128	; 0x80
 80026de:	d825      	bhi.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80026e0:	2b60      	cmp	r3, #96	; 0x60
 80026e2:	d026      	beq.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80026e4:	2b60      	cmp	r3, #96	; 0x60
 80026e6:	d821      	bhi.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80026e8:	2b40      	cmp	r3, #64	; 0x40
 80026ea:	d006      	beq.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x42>
 80026ec:	2b40      	cmp	r3, #64	; 0x40
 80026ee:	d81d      	bhi.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d009      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80026f4:	2b20      	cmp	r3, #32
 80026f6:	d010      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x62>
 80026f8:	e018      	b.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80026fa:	4b89      	ldr	r3, [pc, #548]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	4a88      	ldr	r2, [pc, #544]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002704:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002706:	e015      	b.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	3304      	adds	r3, #4
 800270c:	2100      	movs	r1, #0
 800270e:	4618      	mov	r0, r3
 8002710:	f000 fb02 	bl	8002d18 <RCCEx_PLLSAI1_Config>
 8002714:	4603      	mov	r3, r0
 8002716:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002718:	e00c      	b.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	3320      	adds	r3, #32
 800271e:	2100      	movs	r1, #0
 8002720:	4618      	mov	r0, r3
 8002722:	f000 fbed 	bl	8002f00 <RCCEx_PLLSAI2_Config>
 8002726:	4603      	mov	r3, r0
 8002728:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800272a:	e003      	b.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	74fb      	strb	r3, [r7, #19]
      break;
 8002730:	e000      	b.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002732:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002734:	7cfb      	ldrb	r3, [r7, #19]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10b      	bne.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800273a:	4b79      	ldr	r3, [pc, #484]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800273c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002740:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002748:	4975      	ldr	r1, [pc, #468]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800274a:	4313      	orrs	r3, r2
 800274c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002750:	e001      	b.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002752:	7cfb      	ldrb	r3, [r7, #19]
 8002754:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d047      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002766:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800276a:	d030      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x116>
 800276c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002770:	d82a      	bhi.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002772:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002776:	d02a      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002778:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800277c:	d824      	bhi.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800277e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002782:	d008      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002784:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002788:	d81e      	bhi.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00a      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800278e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002792:	d010      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002794:	e018      	b.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002796:	4b62      	ldr	r3, [pc, #392]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	4a61      	ldr	r2, [pc, #388]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800279c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027a0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027a2:	e015      	b.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	3304      	adds	r3, #4
 80027a8:	2100      	movs	r1, #0
 80027aa:	4618      	mov	r0, r3
 80027ac:	f000 fab4 	bl	8002d18 <RCCEx_PLLSAI1_Config>
 80027b0:	4603      	mov	r3, r0
 80027b2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027b4:	e00c      	b.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	3320      	adds	r3, #32
 80027ba:	2100      	movs	r1, #0
 80027bc:	4618      	mov	r0, r3
 80027be:	f000 fb9f 	bl	8002f00 <RCCEx_PLLSAI2_Config>
 80027c2:	4603      	mov	r3, r0
 80027c4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027c6:	e003      	b.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	74fb      	strb	r3, [r7, #19]
      break;
 80027cc:	e000      	b.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80027ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027d0:	7cfb      	ldrb	r3, [r7, #19]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d10b      	bne.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80027d6:	4b52      	ldr	r3, [pc, #328]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80027d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80027dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e4:	494e      	ldr	r1, [pc, #312]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80027ec:	e001      	b.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027ee:	7cfb      	ldrb	r3, [r7, #19]
 80027f0:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	f000 809f 	beq.w	800293e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002800:	2300      	movs	r3, #0
 8002802:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002804:	4b46      	ldr	r3, [pc, #280]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d101      	bne.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002810:	2301      	movs	r3, #1
 8002812:	e000      	b.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002814:	2300      	movs	r3, #0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00d      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800281a:	4b41      	ldr	r3, [pc, #260]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800281c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800281e:	4a40      	ldr	r2, [pc, #256]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002824:	6593      	str	r3, [r2, #88]	; 0x58
 8002826:	4b3e      	ldr	r3, [pc, #248]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800282a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800282e:	60bb      	str	r3, [r7, #8]
 8002830:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002832:	2301      	movs	r3, #1
 8002834:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002836:	4b3b      	ldr	r3, [pc, #236]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a3a      	ldr	r2, [pc, #232]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800283c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002840:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002842:	f7fe fcdd 	bl	8001200 <HAL_GetTick>
 8002846:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002848:	e009      	b.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800284a:	f7fe fcd9 	bl	8001200 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	2b02      	cmp	r3, #2
 8002856:	d902      	bls.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	74fb      	strb	r3, [r7, #19]
        break;
 800285c:	e005      	b.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800285e:	4b31      	ldr	r3, [pc, #196]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002866:	2b00      	cmp	r3, #0
 8002868:	d0ef      	beq.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800286a:	7cfb      	ldrb	r3, [r7, #19]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d15b      	bne.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002870:	4b2b      	ldr	r3, [pc, #172]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002876:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800287a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d01f      	beq.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002888:	697a      	ldr	r2, [r7, #20]
 800288a:	429a      	cmp	r2, r3
 800288c:	d019      	beq.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800288e:	4b24      	ldr	r3, [pc, #144]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002894:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002898:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800289a:	4b21      	ldr	r3, [pc, #132]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800289c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a0:	4a1f      	ldr	r2, [pc, #124]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80028a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028aa:	4b1d      	ldr	r3, [pc, #116]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80028ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b0:	4a1b      	ldr	r2, [pc, #108]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80028b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80028ba:	4a19      	ldr	r2, [pc, #100]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d016      	beq.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028cc:	f7fe fc98 	bl	8001200 <HAL_GetTick>
 80028d0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028d2:	e00b      	b.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028d4:	f7fe fc94 	bl	8001200 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	f241 3288 	movw	r2, #5000	; 0x1388
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d902      	bls.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	74fb      	strb	r3, [r7, #19]
            break;
 80028ea:	e006      	b.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028ec:	4b0c      	ldr	r3, [pc, #48]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80028ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0ec      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80028fa:	7cfb      	ldrb	r3, [r7, #19]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d10c      	bne.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002900:	4b07      	ldr	r3, [pc, #28]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002906:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002910:	4903      	ldr	r1, [pc, #12]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002912:	4313      	orrs	r3, r2
 8002914:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002918:	e008      	b.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800291a:	7cfb      	ldrb	r3, [r7, #19]
 800291c:	74bb      	strb	r3, [r7, #18]
 800291e:	e005      	b.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002920:	40021000 	.word	0x40021000
 8002924:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002928:	7cfb      	ldrb	r3, [r7, #19]
 800292a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800292c:	7c7b      	ldrb	r3, [r7, #17]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d105      	bne.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002932:	4ba0      	ldr	r3, [pc, #640]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002936:	4a9f      	ldr	r2, [pc, #636]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002938:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800293c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00a      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800294a:	4b9a      	ldr	r3, [pc, #616]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800294c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002950:	f023 0203 	bic.w	r2, r3, #3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002958:	4996      	ldr	r1, [pc, #600]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800295a:	4313      	orrs	r3, r2
 800295c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d00a      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800296c:	4b91      	ldr	r3, [pc, #580]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800296e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002972:	f023 020c 	bic.w	r2, r3, #12
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	498e      	ldr	r1, [pc, #568]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800297c:	4313      	orrs	r3, r2
 800297e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0304 	and.w	r3, r3, #4
 800298a:	2b00      	cmp	r3, #0
 800298c:	d00a      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800298e:	4b89      	ldr	r3, [pc, #548]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002994:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299c:	4985      	ldr	r1, [pc, #532]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0308 	and.w	r3, r3, #8
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d00a      	beq.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80029b0:	4b80      	ldr	r3, [pc, #512]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029be:	497d      	ldr	r1, [pc, #500]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0310 	and.w	r3, r3, #16
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00a      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80029d2:	4b78      	ldr	r3, [pc, #480]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029e0:	4974      	ldr	r1, [pc, #464]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0320 	and.w	r3, r3, #32
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d00a      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029f4:	4b6f      	ldr	r3, [pc, #444]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a02:	496c      	ldr	r1, [pc, #432]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00a      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a16:	4b67      	ldr	r3, [pc, #412]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a1c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a24:	4963      	ldr	r1, [pc, #396]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d00a      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a38:	4b5e      	ldr	r3, [pc, #376]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a3e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a46:	495b      	ldr	r1, [pc, #364]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00a      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a5a:	4b56      	ldr	r3, [pc, #344]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a60:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a68:	4952      	ldr	r1, [pc, #328]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d00a      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a7c:	4b4d      	ldr	r3, [pc, #308]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a82:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a8a:	494a      	ldr	r1, [pc, #296]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00a      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a9e:	4b45      	ldr	r3, [pc, #276]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aac:	4941      	ldr	r1, [pc, #260]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d00a      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002ac0:	4b3c      	ldr	r3, [pc, #240]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ac2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ac6:	f023 0203 	bic.w	r2, r3, #3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ace:	4939      	ldr	r1, [pc, #228]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d028      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ae2:	4b34      	ldr	r3, [pc, #208]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002af0:	4930      	ldr	r1, [pc, #192]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002afc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b00:	d106      	bne.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b02:	4b2c      	ldr	r3, [pc, #176]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	4a2b      	ldr	r2, [pc, #172]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b0c:	60d3      	str	r3, [r2, #12]
 8002b0e:	e011      	b.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b18:	d10c      	bne.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	3304      	adds	r3, #4
 8002b1e:	2101      	movs	r1, #1
 8002b20:	4618      	mov	r0, r3
 8002b22:	f000 f8f9 	bl	8002d18 <RCCEx_PLLSAI1_Config>
 8002b26:	4603      	mov	r3, r0
 8002b28:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002b2a:	7cfb      	ldrb	r3, [r7, #19]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8002b30:	7cfb      	ldrb	r3, [r7, #19]
 8002b32:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d04d      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b48:	d108      	bne.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002b4a:	4b1a      	ldr	r3, [pc, #104]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b50:	4a18      	ldr	r2, [pc, #96]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b56:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002b5a:	e012      	b.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8002b5c:	4b15      	ldr	r3, [pc, #84]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b62:	4a14      	ldr	r2, [pc, #80]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b68:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002b6c:	4b11      	ldr	r3, [pc, #68]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b7a:	490e      	ldr	r1, [pc, #56]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b8a:	d106      	bne.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b8c:	4b09      	ldr	r3, [pc, #36]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	4a08      	ldr	r2, [pc, #32]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b96:	60d3      	str	r3, [r2, #12]
 8002b98:	e020      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ba2:	d109      	bne.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ba4:	4b03      	ldr	r3, [pc, #12]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	4a02      	ldr	r2, [pc, #8]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002baa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bae:	60d3      	str	r3, [r2, #12]
 8002bb0:	e014      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002bb2:	bf00      	nop
 8002bb4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bc0:	d10c      	bne.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	3304      	adds	r3, #4
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f000 f8a5 	bl	8002d18 <RCCEx_PLLSAI1_Config>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bd2:	7cfb      	ldrb	r3, [r7, #19]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8002bd8:	7cfb      	ldrb	r3, [r7, #19]
 8002bda:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d028      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002be8:	4b4a      	ldr	r3, [pc, #296]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bf6:	4947      	ldr	r1, [pc, #284]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c06:	d106      	bne.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c08:	4b42      	ldr	r3, [pc, #264]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	4a41      	ldr	r2, [pc, #260]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c12:	60d3      	str	r3, [r2, #12]
 8002c14:	e011      	b.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c1e:	d10c      	bne.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	3304      	adds	r3, #4
 8002c24:	2101      	movs	r1, #1
 8002c26:	4618      	mov	r0, r3
 8002c28:	f000 f876 	bl	8002d18 <RCCEx_PLLSAI1_Config>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c30:	7cfb      	ldrb	r3, [r7, #19]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8002c36:	7cfb      	ldrb	r3, [r7, #19]
 8002c38:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d01e      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c46:	4b33      	ldr	r3, [pc, #204]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c4c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c56:	492f      	ldr	r1, [pc, #188]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c68:	d10c      	bne.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	3304      	adds	r3, #4
 8002c6e:	2102      	movs	r1, #2
 8002c70:	4618      	mov	r0, r3
 8002c72:	f000 f851 	bl	8002d18 <RCCEx_PLLSAI1_Config>
 8002c76:	4603      	mov	r3, r0
 8002c78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c7a:	7cfb      	ldrb	r3, [r7, #19]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8002c80:	7cfb      	ldrb	r3, [r7, #19]
 8002c82:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00b      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c90:	4b20      	ldr	r3, [pc, #128]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c96:	f023 0204 	bic.w	r2, r3, #4
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ca0:	491c      	ldr	r1, [pc, #112]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00b      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002cb4:	4b17      	ldr	r3, [pc, #92]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002cba:	f023 0218 	bic.w	r2, r3, #24
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc4:	4913      	ldr	r1, [pc, #76]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d017      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002cd8:	4b0e      	ldr	r3, [pc, #56]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002cde:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ce8:	490a      	ldr	r1, [pc, #40]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cf6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cfa:	d105      	bne.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cfc:	4b05      	ldr	r3, [pc, #20]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	4a04      	ldr	r2, [pc, #16]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d06:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002d08:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3718      	adds	r7, #24
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	40021000 	.word	0x40021000

08002d18 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d22:	2300      	movs	r3, #0
 8002d24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d26:	4b72      	ldr	r3, [pc, #456]	; (8002ef0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	f003 0303 	and.w	r3, r3, #3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00e      	beq.n	8002d50 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002d32:	4b6f      	ldr	r3, [pc, #444]	; (8002ef0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	f003 0203 	and.w	r2, r3, #3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d103      	bne.n	8002d4a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
       ||
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d142      	bne.n	8002dd0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	73fb      	strb	r3, [r7, #15]
 8002d4e:	e03f      	b.n	8002dd0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2b03      	cmp	r3, #3
 8002d56:	d018      	beq.n	8002d8a <RCCEx_PLLSAI1_Config+0x72>
 8002d58:	2b03      	cmp	r3, #3
 8002d5a:	d825      	bhi.n	8002da8 <RCCEx_PLLSAI1_Config+0x90>
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d002      	beq.n	8002d66 <RCCEx_PLLSAI1_Config+0x4e>
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d009      	beq.n	8002d78 <RCCEx_PLLSAI1_Config+0x60>
 8002d64:	e020      	b.n	8002da8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d66:	4b62      	ldr	r3, [pc, #392]	; (8002ef0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d11d      	bne.n	8002dae <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d76:	e01a      	b.n	8002dae <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d78:	4b5d      	ldr	r3, [pc, #372]	; (8002ef0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d116      	bne.n	8002db2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d88:	e013      	b.n	8002db2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d8a:	4b59      	ldr	r3, [pc, #356]	; (8002ef0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d10f      	bne.n	8002db6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d96:	4b56      	ldr	r3, [pc, #344]	; (8002ef0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d109      	bne.n	8002db6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002da6:	e006      	b.n	8002db6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	73fb      	strb	r3, [r7, #15]
      break;
 8002dac:	e004      	b.n	8002db8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002dae:	bf00      	nop
 8002db0:	e002      	b.n	8002db8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002db2:	bf00      	nop
 8002db4:	e000      	b.n	8002db8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002db6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002db8:	7bfb      	ldrb	r3, [r7, #15]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d108      	bne.n	8002dd0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8002dbe:	4b4c      	ldr	r3, [pc, #304]	; (8002ef0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	f023 0203 	bic.w	r2, r3, #3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4949      	ldr	r1, [pc, #292]	; (8002ef0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002dd0:	7bfb      	ldrb	r3, [r7, #15]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f040 8086 	bne.w	8002ee4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002dd8:	4b45      	ldr	r3, [pc, #276]	; (8002ef0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a44      	ldr	r2, [pc, #272]	; (8002ef0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002dde:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002de2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002de4:	f7fe fa0c 	bl	8001200 <HAL_GetTick>
 8002de8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002dea:	e009      	b.n	8002e00 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002dec:	f7fe fa08 	bl	8001200 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d902      	bls.n	8002e00 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	73fb      	strb	r3, [r7, #15]
        break;
 8002dfe:	e005      	b.n	8002e0c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e00:	4b3b      	ldr	r3, [pc, #236]	; (8002ef0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1ef      	bne.n	8002dec <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002e0c:	7bfb      	ldrb	r3, [r7, #15]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d168      	bne.n	8002ee4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d113      	bne.n	8002e40 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e18:	4b35      	ldr	r3, [pc, #212]	; (8002ef0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e1a:	691a      	ldr	r2, [r3, #16]
 8002e1c:	4b35      	ldr	r3, [pc, #212]	; (8002ef4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e1e:	4013      	ands	r3, r2
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	6892      	ldr	r2, [r2, #8]
 8002e24:	0211      	lsls	r1, r2, #8
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	68d2      	ldr	r2, [r2, #12]
 8002e2a:	06d2      	lsls	r2, r2, #27
 8002e2c:	4311      	orrs	r1, r2
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	6852      	ldr	r2, [r2, #4]
 8002e32:	3a01      	subs	r2, #1
 8002e34:	0112      	lsls	r2, r2, #4
 8002e36:	430a      	orrs	r2, r1
 8002e38:	492d      	ldr	r1, [pc, #180]	; (8002ef0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	610b      	str	r3, [r1, #16]
 8002e3e:	e02d      	b.n	8002e9c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d115      	bne.n	8002e72 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e46:	4b2a      	ldr	r3, [pc, #168]	; (8002ef0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e48:	691a      	ldr	r2, [r3, #16]
 8002e4a:	4b2b      	ldr	r3, [pc, #172]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	6892      	ldr	r2, [r2, #8]
 8002e52:	0211      	lsls	r1, r2, #8
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	6912      	ldr	r2, [r2, #16]
 8002e58:	0852      	lsrs	r2, r2, #1
 8002e5a:	3a01      	subs	r2, #1
 8002e5c:	0552      	lsls	r2, r2, #21
 8002e5e:	4311      	orrs	r1, r2
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	6852      	ldr	r2, [r2, #4]
 8002e64:	3a01      	subs	r2, #1
 8002e66:	0112      	lsls	r2, r2, #4
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	4921      	ldr	r1, [pc, #132]	; (8002ef0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	610b      	str	r3, [r1, #16]
 8002e70:	e014      	b.n	8002e9c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e72:	4b1f      	ldr	r3, [pc, #124]	; (8002ef0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e74:	691a      	ldr	r2, [r3, #16]
 8002e76:	4b21      	ldr	r3, [pc, #132]	; (8002efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e78:	4013      	ands	r3, r2
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	6892      	ldr	r2, [r2, #8]
 8002e7e:	0211      	lsls	r1, r2, #8
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	6952      	ldr	r2, [r2, #20]
 8002e84:	0852      	lsrs	r2, r2, #1
 8002e86:	3a01      	subs	r2, #1
 8002e88:	0652      	lsls	r2, r2, #25
 8002e8a:	4311      	orrs	r1, r2
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	6852      	ldr	r2, [r2, #4]
 8002e90:	3a01      	subs	r2, #1
 8002e92:	0112      	lsls	r2, r2, #4
 8002e94:	430a      	orrs	r2, r1
 8002e96:	4916      	ldr	r1, [pc, #88]	; (8002ef0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002e9c:	4b14      	ldr	r3, [pc, #80]	; (8002ef0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a13      	ldr	r2, [pc, #76]	; (8002ef0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ea2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ea6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea8:	f7fe f9aa 	bl	8001200 <HAL_GetTick>
 8002eac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002eae:	e009      	b.n	8002ec4 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002eb0:	f7fe f9a6 	bl	8001200 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d902      	bls.n	8002ec4 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	73fb      	strb	r3, [r7, #15]
          break;
 8002ec2:	e005      	b.n	8002ed0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ec4:	4b0a      	ldr	r3, [pc, #40]	; (8002ef0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d0ef      	beq.n	8002eb0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002ed0:	7bfb      	ldrb	r3, [r7, #15]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d106      	bne.n	8002ee4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002ed6:	4b06      	ldr	r3, [pc, #24]	; (8002ef0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ed8:	691a      	ldr	r2, [r3, #16]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	4904      	ldr	r1, [pc, #16]	; (8002ef0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	07ff800f 	.word	0x07ff800f
 8002ef8:	ff9f800f 	.word	0xff9f800f
 8002efc:	f9ff800f 	.word	0xf9ff800f

08002f00 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f0e:	4b72      	ldr	r3, [pc, #456]	; (80030d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	f003 0303 	and.w	r3, r3, #3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00e      	beq.n	8002f38 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002f1a:	4b6f      	ldr	r3, [pc, #444]	; (80030d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	f003 0203 	and.w	r2, r3, #3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d103      	bne.n	8002f32 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
       ||
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d142      	bne.n	8002fb8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	73fb      	strb	r3, [r7, #15]
 8002f36:	e03f      	b.n	8002fb8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2b03      	cmp	r3, #3
 8002f3e:	d018      	beq.n	8002f72 <RCCEx_PLLSAI2_Config+0x72>
 8002f40:	2b03      	cmp	r3, #3
 8002f42:	d825      	bhi.n	8002f90 <RCCEx_PLLSAI2_Config+0x90>
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d002      	beq.n	8002f4e <RCCEx_PLLSAI2_Config+0x4e>
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d009      	beq.n	8002f60 <RCCEx_PLLSAI2_Config+0x60>
 8002f4c:	e020      	b.n	8002f90 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f4e:	4b62      	ldr	r3, [pc, #392]	; (80030d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d11d      	bne.n	8002f96 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f5e:	e01a      	b.n	8002f96 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f60:	4b5d      	ldr	r3, [pc, #372]	; (80030d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d116      	bne.n	8002f9a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f70:	e013      	b.n	8002f9a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f72:	4b59      	ldr	r3, [pc, #356]	; (80030d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10f      	bne.n	8002f9e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f7e:	4b56      	ldr	r3, [pc, #344]	; (80030d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d109      	bne.n	8002f9e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f8e:	e006      	b.n	8002f9e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	73fb      	strb	r3, [r7, #15]
      break;
 8002f94:	e004      	b.n	8002fa0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002f96:	bf00      	nop
 8002f98:	e002      	b.n	8002fa0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002f9a:	bf00      	nop
 8002f9c:	e000      	b.n	8002fa0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002f9e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002fa0:	7bfb      	ldrb	r3, [r7, #15]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d108      	bne.n	8002fb8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8002fa6:	4b4c      	ldr	r3, [pc, #304]	; (80030d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	f023 0203 	bic.w	r2, r3, #3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4949      	ldr	r1, [pc, #292]	; (80030d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002fb8:	7bfb      	ldrb	r3, [r7, #15]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f040 8086 	bne.w	80030cc <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002fc0:	4b45      	ldr	r3, [pc, #276]	; (80030d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a44      	ldr	r2, [pc, #272]	; (80030d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002fc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fcc:	f7fe f918 	bl	8001200 <HAL_GetTick>
 8002fd0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002fd2:	e009      	b.n	8002fe8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002fd4:	f7fe f914 	bl	8001200 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d902      	bls.n	8002fe8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	73fb      	strb	r3, [r7, #15]
        break;
 8002fe6:	e005      	b.n	8002ff4 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002fe8:	4b3b      	ldr	r3, [pc, #236]	; (80030d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d1ef      	bne.n	8002fd4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002ff4:	7bfb      	ldrb	r3, [r7, #15]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d168      	bne.n	80030cc <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d113      	bne.n	8003028 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003000:	4b35      	ldr	r3, [pc, #212]	; (80030d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003002:	695a      	ldr	r2, [r3, #20]
 8003004:	4b35      	ldr	r3, [pc, #212]	; (80030dc <RCCEx_PLLSAI2_Config+0x1dc>)
 8003006:	4013      	ands	r3, r2
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	6892      	ldr	r2, [r2, #8]
 800300c:	0211      	lsls	r1, r2, #8
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	68d2      	ldr	r2, [r2, #12]
 8003012:	06d2      	lsls	r2, r2, #27
 8003014:	4311      	orrs	r1, r2
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	6852      	ldr	r2, [r2, #4]
 800301a:	3a01      	subs	r2, #1
 800301c:	0112      	lsls	r2, r2, #4
 800301e:	430a      	orrs	r2, r1
 8003020:	492d      	ldr	r1, [pc, #180]	; (80030d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003022:	4313      	orrs	r3, r2
 8003024:	614b      	str	r3, [r1, #20]
 8003026:	e02d      	b.n	8003084 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d115      	bne.n	800305a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800302e:	4b2a      	ldr	r3, [pc, #168]	; (80030d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003030:	695a      	ldr	r2, [r3, #20]
 8003032:	4b2b      	ldr	r3, [pc, #172]	; (80030e0 <RCCEx_PLLSAI2_Config+0x1e0>)
 8003034:	4013      	ands	r3, r2
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	6892      	ldr	r2, [r2, #8]
 800303a:	0211      	lsls	r1, r2, #8
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	6912      	ldr	r2, [r2, #16]
 8003040:	0852      	lsrs	r2, r2, #1
 8003042:	3a01      	subs	r2, #1
 8003044:	0552      	lsls	r2, r2, #21
 8003046:	4311      	orrs	r1, r2
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	6852      	ldr	r2, [r2, #4]
 800304c:	3a01      	subs	r2, #1
 800304e:	0112      	lsls	r2, r2, #4
 8003050:	430a      	orrs	r2, r1
 8003052:	4921      	ldr	r1, [pc, #132]	; (80030d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003054:	4313      	orrs	r3, r2
 8003056:	614b      	str	r3, [r1, #20]
 8003058:	e014      	b.n	8003084 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800305a:	4b1f      	ldr	r3, [pc, #124]	; (80030d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800305c:	695a      	ldr	r2, [r3, #20]
 800305e:	4b21      	ldr	r3, [pc, #132]	; (80030e4 <RCCEx_PLLSAI2_Config+0x1e4>)
 8003060:	4013      	ands	r3, r2
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	6892      	ldr	r2, [r2, #8]
 8003066:	0211      	lsls	r1, r2, #8
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	6952      	ldr	r2, [r2, #20]
 800306c:	0852      	lsrs	r2, r2, #1
 800306e:	3a01      	subs	r2, #1
 8003070:	0652      	lsls	r2, r2, #25
 8003072:	4311      	orrs	r1, r2
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	6852      	ldr	r2, [r2, #4]
 8003078:	3a01      	subs	r2, #1
 800307a:	0112      	lsls	r2, r2, #4
 800307c:	430a      	orrs	r2, r1
 800307e:	4916      	ldr	r1, [pc, #88]	; (80030d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003080:	4313      	orrs	r3, r2
 8003082:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003084:	4b14      	ldr	r3, [pc, #80]	; (80030d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a13      	ldr	r2, [pc, #76]	; (80030d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800308a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800308e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003090:	f7fe f8b6 	bl	8001200 <HAL_GetTick>
 8003094:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003096:	e009      	b.n	80030ac <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003098:	f7fe f8b2 	bl	8001200 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d902      	bls.n	80030ac <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	73fb      	strb	r3, [r7, #15]
          break;
 80030aa:	e005      	b.n	80030b8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80030ac:	4b0a      	ldr	r3, [pc, #40]	; (80030d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d0ef      	beq.n	8003098 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80030b8:	7bfb      	ldrb	r3, [r7, #15]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d106      	bne.n	80030cc <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80030be:	4b06      	ldr	r3, [pc, #24]	; (80030d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80030c0:	695a      	ldr	r2, [r3, #20]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	4904      	ldr	r1, [pc, #16]	; (80030d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80030cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3710      	adds	r7, #16
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	40021000 	.word	0x40021000
 80030dc:	07ff800f 	.word	0x07ff800f
 80030e0:	ff9f800f 	.word	0xff9f800f
 80030e4:	f9ff800f 	.word	0xf9ff800f

080030e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d101      	bne.n	80030fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e049      	b.n	800318e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d106      	bne.n	8003114 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7fd feda 	bl	8000ec8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2202      	movs	r2, #2
 8003118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	3304      	adds	r3, #4
 8003124:	4619      	mov	r1, r3
 8003126:	4610      	mov	r0, r2
 8003128:	f000 f9ee 	bl	8003508 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
	...

08003198 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003198:	b480      	push	{r7}
 800319a:	b085      	sub	sp, #20
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d001      	beq.n	80031b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e04f      	b.n	8003250 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2202      	movs	r2, #2
 80031b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68da      	ldr	r2, [r3, #12]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f042 0201 	orr.w	r2, r2, #1
 80031c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a23      	ldr	r2, [pc, #140]	; (800325c <HAL_TIM_Base_Start_IT+0xc4>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d01d      	beq.n	800320e <HAL_TIM_Base_Start_IT+0x76>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031da:	d018      	beq.n	800320e <HAL_TIM_Base_Start_IT+0x76>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a1f      	ldr	r2, [pc, #124]	; (8003260 <HAL_TIM_Base_Start_IT+0xc8>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d013      	beq.n	800320e <HAL_TIM_Base_Start_IT+0x76>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a1e      	ldr	r2, [pc, #120]	; (8003264 <HAL_TIM_Base_Start_IT+0xcc>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d00e      	beq.n	800320e <HAL_TIM_Base_Start_IT+0x76>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a1c      	ldr	r2, [pc, #112]	; (8003268 <HAL_TIM_Base_Start_IT+0xd0>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d009      	beq.n	800320e <HAL_TIM_Base_Start_IT+0x76>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a1b      	ldr	r2, [pc, #108]	; (800326c <HAL_TIM_Base_Start_IT+0xd4>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d004      	beq.n	800320e <HAL_TIM_Base_Start_IT+0x76>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a19      	ldr	r2, [pc, #100]	; (8003270 <HAL_TIM_Base_Start_IT+0xd8>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d115      	bne.n	800323a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	689a      	ldr	r2, [r3, #8]
 8003214:	4b17      	ldr	r3, [pc, #92]	; (8003274 <HAL_TIM_Base_Start_IT+0xdc>)
 8003216:	4013      	ands	r3, r2
 8003218:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2b06      	cmp	r3, #6
 800321e:	d015      	beq.n	800324c <HAL_TIM_Base_Start_IT+0xb4>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003226:	d011      	beq.n	800324c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f042 0201 	orr.w	r2, r2, #1
 8003236:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003238:	e008      	b.n	800324c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f042 0201 	orr.w	r2, r2, #1
 8003248:	601a      	str	r2, [r3, #0]
 800324a:	e000      	b.n	800324e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800324c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3714      	adds	r7, #20
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr
 800325c:	40012c00 	.word	0x40012c00
 8003260:	40000400 	.word	0x40000400
 8003264:	40000800 	.word	0x40000800
 8003268:	40000c00 	.word	0x40000c00
 800326c:	40013400 	.word	0x40013400
 8003270:	40014000 	.word	0x40014000
 8003274:	00010007 	.word	0x00010007

08003278 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b02      	cmp	r3, #2
 800328c:	d122      	bne.n	80032d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b02      	cmp	r3, #2
 800329a:	d11b      	bne.n	80032d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f06f 0202 	mvn.w	r2, #2
 80032a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	f003 0303 	and.w	r3, r3, #3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d003      	beq.n	80032c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f905 	bl	80034ca <HAL_TIM_IC_CaptureCallback>
 80032c0:	e005      	b.n	80032ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 f8f7 	bl	80034b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f000 f908 	bl	80034de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	f003 0304 	and.w	r3, r3, #4
 80032de:	2b04      	cmp	r3, #4
 80032e0:	d122      	bne.n	8003328 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	f003 0304 	and.w	r3, r3, #4
 80032ec:	2b04      	cmp	r3, #4
 80032ee:	d11b      	bne.n	8003328 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f06f 0204 	mvn.w	r2, #4
 80032f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2202      	movs	r2, #2
 80032fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800330a:	2b00      	cmp	r3, #0
 800330c:	d003      	beq.n	8003316 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 f8db 	bl	80034ca <HAL_TIM_IC_CaptureCallback>
 8003314:	e005      	b.n	8003322 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 f8cd 	bl	80034b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f000 f8de 	bl	80034de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	f003 0308 	and.w	r3, r3, #8
 8003332:	2b08      	cmp	r3, #8
 8003334:	d122      	bne.n	800337c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	f003 0308 	and.w	r3, r3, #8
 8003340:	2b08      	cmp	r3, #8
 8003342:	d11b      	bne.n	800337c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f06f 0208 	mvn.w	r2, #8
 800334c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2204      	movs	r2, #4
 8003352:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	f003 0303 	and.w	r3, r3, #3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 f8b1 	bl	80034ca <HAL_TIM_IC_CaptureCallback>
 8003368:	e005      	b.n	8003376 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 f8a3 	bl	80034b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 f8b4 	bl	80034de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	f003 0310 	and.w	r3, r3, #16
 8003386:	2b10      	cmp	r3, #16
 8003388:	d122      	bne.n	80033d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	f003 0310 	and.w	r3, r3, #16
 8003394:	2b10      	cmp	r3, #16
 8003396:	d11b      	bne.n	80033d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f06f 0210 	mvn.w	r2, #16
 80033a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2208      	movs	r2, #8
 80033a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	69db      	ldr	r3, [r3, #28]
 80033ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d003      	beq.n	80033be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f887 	bl	80034ca <HAL_TIM_IC_CaptureCallback>
 80033bc:	e005      	b.n	80033ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f879 	bl	80034b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f000 f88a 	bl	80034de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d10e      	bne.n	80033fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	f003 0301 	and.w	r3, r3, #1
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d107      	bne.n	80033fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f06f 0201 	mvn.w	r2, #1
 80033f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f7fd fb78 	bl	8000aec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003406:	2b80      	cmp	r3, #128	; 0x80
 8003408:	d10e      	bne.n	8003428 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003414:	2b80      	cmp	r3, #128	; 0x80
 8003416:	d107      	bne.n	8003428 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 f914 	bl	8003650 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003432:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003436:	d10e      	bne.n	8003456 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003442:	2b80      	cmp	r3, #128	; 0x80
 8003444:	d107      	bne.n	8003456 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800344e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 f907 	bl	8003664 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003460:	2b40      	cmp	r3, #64	; 0x40
 8003462:	d10e      	bne.n	8003482 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800346e:	2b40      	cmp	r3, #64	; 0x40
 8003470:	d107      	bne.n	8003482 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800347a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 f838 	bl	80034f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	f003 0320 	and.w	r3, r3, #32
 800348c:	2b20      	cmp	r3, #32
 800348e:	d10e      	bne.n	80034ae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	f003 0320 	and.w	r3, r3, #32
 800349a:	2b20      	cmp	r3, #32
 800349c:	d107      	bne.n	80034ae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f06f 0220 	mvn.w	r2, #32
 80034a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 f8c7 	bl	800363c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034ae:	bf00      	nop
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034b6:	b480      	push	{r7}
 80034b8:	b083      	sub	sp, #12
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034be:	bf00      	nop
 80034c0:	370c      	adds	r7, #12
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr

080034ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034ca:	b480      	push	{r7}
 80034cc:	b083      	sub	sp, #12
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034d2:	bf00      	nop
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr

080034de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034de:	b480      	push	{r7}
 80034e0:	b083      	sub	sp, #12
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034e6:	bf00      	nop
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr

080034f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034f2:	b480      	push	{r7}
 80034f4:	b083      	sub	sp, #12
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034fa:	bf00      	nop
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
	...

08003508 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003508:	b480      	push	{r7}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a40      	ldr	r2, [pc, #256]	; (800361c <TIM_Base_SetConfig+0x114>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d013      	beq.n	8003548 <TIM_Base_SetConfig+0x40>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003526:	d00f      	beq.n	8003548 <TIM_Base_SetConfig+0x40>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a3d      	ldr	r2, [pc, #244]	; (8003620 <TIM_Base_SetConfig+0x118>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d00b      	beq.n	8003548 <TIM_Base_SetConfig+0x40>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a3c      	ldr	r2, [pc, #240]	; (8003624 <TIM_Base_SetConfig+0x11c>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d007      	beq.n	8003548 <TIM_Base_SetConfig+0x40>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4a3b      	ldr	r2, [pc, #236]	; (8003628 <TIM_Base_SetConfig+0x120>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d003      	beq.n	8003548 <TIM_Base_SetConfig+0x40>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a3a      	ldr	r2, [pc, #232]	; (800362c <TIM_Base_SetConfig+0x124>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d108      	bne.n	800355a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800354e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	4313      	orrs	r3, r2
 8003558:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a2f      	ldr	r2, [pc, #188]	; (800361c <TIM_Base_SetConfig+0x114>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d01f      	beq.n	80035a2 <TIM_Base_SetConfig+0x9a>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003568:	d01b      	beq.n	80035a2 <TIM_Base_SetConfig+0x9a>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a2c      	ldr	r2, [pc, #176]	; (8003620 <TIM_Base_SetConfig+0x118>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d017      	beq.n	80035a2 <TIM_Base_SetConfig+0x9a>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a2b      	ldr	r2, [pc, #172]	; (8003624 <TIM_Base_SetConfig+0x11c>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d013      	beq.n	80035a2 <TIM_Base_SetConfig+0x9a>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a2a      	ldr	r2, [pc, #168]	; (8003628 <TIM_Base_SetConfig+0x120>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d00f      	beq.n	80035a2 <TIM_Base_SetConfig+0x9a>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a29      	ldr	r2, [pc, #164]	; (800362c <TIM_Base_SetConfig+0x124>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d00b      	beq.n	80035a2 <TIM_Base_SetConfig+0x9a>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a28      	ldr	r2, [pc, #160]	; (8003630 <TIM_Base_SetConfig+0x128>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d007      	beq.n	80035a2 <TIM_Base_SetConfig+0x9a>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a27      	ldr	r2, [pc, #156]	; (8003634 <TIM_Base_SetConfig+0x12c>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d003      	beq.n	80035a2 <TIM_Base_SetConfig+0x9a>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a26      	ldr	r2, [pc, #152]	; (8003638 <TIM_Base_SetConfig+0x130>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d108      	bne.n	80035b4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	4313      	orrs	r3, r2
 80035c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	689a      	ldr	r2, [r3, #8]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a10      	ldr	r2, [pc, #64]	; (800361c <TIM_Base_SetConfig+0x114>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d00f      	beq.n	8003600 <TIM_Base_SetConfig+0xf8>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a12      	ldr	r2, [pc, #72]	; (800362c <TIM_Base_SetConfig+0x124>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d00b      	beq.n	8003600 <TIM_Base_SetConfig+0xf8>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a11      	ldr	r2, [pc, #68]	; (8003630 <TIM_Base_SetConfig+0x128>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d007      	beq.n	8003600 <TIM_Base_SetConfig+0xf8>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a10      	ldr	r2, [pc, #64]	; (8003634 <TIM_Base_SetConfig+0x12c>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d003      	beq.n	8003600 <TIM_Base_SetConfig+0xf8>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a0f      	ldr	r2, [pc, #60]	; (8003638 <TIM_Base_SetConfig+0x130>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d103      	bne.n	8003608 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	691a      	ldr	r2, [r3, #16]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	615a      	str	r2, [r3, #20]
}
 800360e:	bf00      	nop
 8003610:	3714      	adds	r7, #20
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	40012c00 	.word	0x40012c00
 8003620:	40000400 	.word	0x40000400
 8003624:	40000800 	.word	0x40000800
 8003628:	40000c00 	.word	0x40000c00
 800362c:	40013400 	.word	0x40013400
 8003630:	40014000 	.word	0x40014000
 8003634:	40014400 	.word	0x40014400
 8003638:	40014800 	.word	0x40014800

0800363c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800366c:	bf00      	nop
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e042      	b.n	8003710 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003690:	2b00      	cmp	r3, #0
 8003692:	d106      	bne.n	80036a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f7fd fbb3 	bl	8000e08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2224      	movs	r2, #36	; 0x24
 80036a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f022 0201 	bic.w	r2, r2, #1
 80036b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 f998 	bl	80039f0 <UART_SetConfig>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d101      	bne.n	80036ca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e022      	b.n	8003710 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d002      	beq.n	80036d8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 fc88 	bl	8003fe8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	685a      	ldr	r2, [r3, #4]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689a      	ldr	r2, [r3, #8]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f042 0201 	orr.w	r2, r2, #1
 8003706:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f000 fd0f 	bl	800412c <UART_CheckIdleState>
 800370e:	4603      	mov	r3, r0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3708      	adds	r7, #8
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b08a      	sub	sp, #40	; 0x28
 800371c:	af02      	add	r7, sp, #8
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	603b      	str	r3, [r7, #0]
 8003724:	4613      	mov	r3, r2
 8003726:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800372e:	2b20      	cmp	r3, #32
 8003730:	f040 8084 	bne.w	800383c <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d002      	beq.n	8003740 <HAL_UART_Transmit+0x28>
 800373a:	88fb      	ldrh	r3, [r7, #6]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d101      	bne.n	8003744 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e07c      	b.n	800383e <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800374a:	2b01      	cmp	r3, #1
 800374c:	d101      	bne.n	8003752 <HAL_UART_Transmit+0x3a>
 800374e:	2302      	movs	r3, #2
 8003750:	e075      	b.n	800383e <HAL_UART_Transmit+0x126>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2221      	movs	r2, #33	; 0x21
 8003766:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800376a:	f7fd fd49 	bl	8001200 <HAL_GetTick>
 800376e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	88fa      	ldrh	r2, [r7, #6]
 8003774:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	88fa      	ldrh	r2, [r7, #6]
 800377c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003788:	d108      	bne.n	800379c <HAL_UART_Transmit+0x84>
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d104      	bne.n	800379c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003792:	2300      	movs	r3, #0
 8003794:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	61bb      	str	r3, [r7, #24]
 800379a:	e003      	b.n	80037a4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037a0:	2300      	movs	r3, #0
 80037a2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80037ac:	e02d      	b.n	800380a <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	9300      	str	r3, [sp, #0]
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	2200      	movs	r2, #0
 80037b6:	2180      	movs	r1, #128	; 0x80
 80037b8:	68f8      	ldr	r0, [r7, #12]
 80037ba:	f000 fd02 	bl	80041c2 <UART_WaitOnFlagUntilTimeout>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d001      	beq.n	80037c8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e03a      	b.n	800383e <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10b      	bne.n	80037e6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	881a      	ldrh	r2, [r3, #0]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037da:	b292      	uxth	r2, r2
 80037dc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	3302      	adds	r3, #2
 80037e2:	61bb      	str	r3, [r7, #24]
 80037e4:	e008      	b.n	80037f8 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	781a      	ldrb	r2, [r3, #0]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	b292      	uxth	r2, r2
 80037f0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	3301      	adds	r3, #1
 80037f6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80037fe:	b29b      	uxth	r3, r3
 8003800:	3b01      	subs	r3, #1
 8003802:	b29a      	uxth	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003810:	b29b      	uxth	r3, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1cb      	bne.n	80037ae <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	2200      	movs	r2, #0
 800381e:	2140      	movs	r1, #64	; 0x40
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f000 fcce 	bl	80041c2 <UART_WaitOnFlagUntilTimeout>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d001      	beq.n	8003830 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e006      	b.n	800383e <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2220      	movs	r2, #32
 8003834:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003838:	2300      	movs	r3, #0
 800383a:	e000      	b.n	800383e <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 800383c:	2302      	movs	r3, #2
  }
}
 800383e:	4618      	mov	r0, r3
 8003840:	3720      	adds	r7, #32
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b08a      	sub	sp, #40	; 0x28
 800384a:	af02      	add	r7, sp, #8
 800384c:	60f8      	str	r0, [r7, #12]
 800384e:	60b9      	str	r1, [r7, #8]
 8003850:	603b      	str	r3, [r7, #0]
 8003852:	4613      	mov	r3, r2
 8003854:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800385c:	2b20      	cmp	r3, #32
 800385e:	f040 80c1 	bne.w	80039e4 <HAL_UART_Receive+0x19e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d002      	beq.n	800386e <HAL_UART_Receive+0x28>
 8003868:	88fb      	ldrh	r3, [r7, #6]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e0b9      	b.n	80039e6 <HAL_UART_Receive+0x1a0>
    }

    __HAL_LOCK(huart);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003878:	2b01      	cmp	r3, #1
 800387a:	d101      	bne.n	8003880 <HAL_UART_Receive+0x3a>
 800387c:	2302      	movs	r3, #2
 800387e:	e0b2      	b.n	80039e6 <HAL_UART_Receive+0x1a0>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2222      	movs	r2, #34	; 0x22
 8003894:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2200      	movs	r2, #0
 800389c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800389e:	f7fd fcaf 	bl	8001200 <HAL_GetTick>
 80038a2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	88fa      	ldrh	r2, [r7, #6]
 80038a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	88fa      	ldrh	r2, [r7, #6]
 80038b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038bc:	d10e      	bne.n	80038dc <HAL_UART_Receive+0x96>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d105      	bne.n	80038d2 <HAL_UART_Receive+0x8c>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f240 12ff 	movw	r2, #511	; 0x1ff
 80038cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80038d0:	e02d      	b.n	800392e <HAL_UART_Receive+0xe8>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	22ff      	movs	r2, #255	; 0xff
 80038d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80038da:	e028      	b.n	800392e <HAL_UART_Receive+0xe8>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d10d      	bne.n	8003900 <HAL_UART_Receive+0xba>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d104      	bne.n	80038f6 <HAL_UART_Receive+0xb0>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	22ff      	movs	r2, #255	; 0xff
 80038f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80038f4:	e01b      	b.n	800392e <HAL_UART_Receive+0xe8>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	227f      	movs	r2, #127	; 0x7f
 80038fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80038fe:	e016      	b.n	800392e <HAL_UART_Receive+0xe8>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003908:	d10d      	bne.n	8003926 <HAL_UART_Receive+0xe0>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d104      	bne.n	800391c <HAL_UART_Receive+0xd6>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	227f      	movs	r2, #127	; 0x7f
 8003916:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800391a:	e008      	b.n	800392e <HAL_UART_Receive+0xe8>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	223f      	movs	r2, #63	; 0x3f
 8003920:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003924:	e003      	b.n	800392e <HAL_UART_Receive+0xe8>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003934:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800393e:	d108      	bne.n	8003952 <HAL_UART_Receive+0x10c>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d104      	bne.n	8003952 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8003948:	2300      	movs	r3, #0
 800394a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	61bb      	str	r3, [r7, #24]
 8003950:	e003      	b.n	800395a <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003956:	2300      	movs	r3, #0
 8003958:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003962:	e033      	b.n	80039cc <HAL_UART_Receive+0x186>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	9300      	str	r3, [sp, #0]
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	2200      	movs	r2, #0
 800396c:	2120      	movs	r1, #32
 800396e:	68f8      	ldr	r0, [r7, #12]
 8003970:	f000 fc27 	bl	80041c2 <UART_WaitOnFlagUntilTimeout>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d001      	beq.n	800397e <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e033      	b.n	80039e6 <HAL_UART_Receive+0x1a0>
      }
      if (pdata8bits == NULL)
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d10c      	bne.n	800399e <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800398a:	b29a      	uxth	r2, r3
 800398c:	8a7b      	ldrh	r3, [r7, #18]
 800398e:	4013      	ands	r3, r2
 8003990:	b29a      	uxth	r2, r3
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	3302      	adds	r3, #2
 800399a:	61bb      	str	r3, [r7, #24]
 800399c:	e00d      	b.n	80039ba <HAL_UART_Receive+0x174>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	b2da      	uxtb	r2, r3
 80039a8:	8a7b      	ldrh	r3, [r7, #18]
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	4013      	ands	r3, r2
 80039ae:	b2da      	uxtb	r2, r3
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	3301      	adds	r3, #1
 80039b8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	3b01      	subs	r3, #1
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d1c5      	bne.n	8003964 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2220      	movs	r2, #32
 80039dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80039e0:	2300      	movs	r3, #0
 80039e2:	e000      	b.n	80039e6 <HAL_UART_Receive+0x1a0>
  }
  else
  {
    return HAL_BUSY;
 80039e4:	2302      	movs	r3, #2
  }
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3720      	adds	r7, #32
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
	...

080039f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039f4:	b08c      	sub	sp, #48	; 0x30
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80039fa:	2300      	movs	r3, #0
 80039fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	689a      	ldr	r2, [r3, #8]
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	431a      	orrs	r2, r3
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	431a      	orrs	r2, r3
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	69db      	ldr	r3, [r3, #28]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	4baa      	ldr	r3, [pc, #680]	; (8003cc8 <UART_SetConfig+0x2d8>)
 8003a20:	4013      	ands	r3, r2
 8003a22:	697a      	ldr	r2, [r7, #20]
 8003a24:	6812      	ldr	r2, [r2, #0]
 8003a26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a28:	430b      	orrs	r3, r1
 8003a2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	68da      	ldr	r2, [r3, #12]
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a9f      	ldr	r2, [pc, #636]	; (8003ccc <UART_SetConfig+0x2dc>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d004      	beq.n	8003a5c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003a66:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003a6a:	697a      	ldr	r2, [r7, #20]
 8003a6c:	6812      	ldr	r2, [r2, #0]
 8003a6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a70:	430b      	orrs	r3, r1
 8003a72:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7a:	f023 010f 	bic.w	r1, r3, #15
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a90      	ldr	r2, [pc, #576]	; (8003cd0 <UART_SetConfig+0x2e0>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d125      	bne.n	8003ae0 <UART_SetConfig+0xf0>
 8003a94:	4b8f      	ldr	r3, [pc, #572]	; (8003cd4 <UART_SetConfig+0x2e4>)
 8003a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a9a:	f003 0303 	and.w	r3, r3, #3
 8003a9e:	2b03      	cmp	r3, #3
 8003aa0:	d81a      	bhi.n	8003ad8 <UART_SetConfig+0xe8>
 8003aa2:	a201      	add	r2, pc, #4	; (adr r2, 8003aa8 <UART_SetConfig+0xb8>)
 8003aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aa8:	08003ab9 	.word	0x08003ab9
 8003aac:	08003ac9 	.word	0x08003ac9
 8003ab0:	08003ac1 	.word	0x08003ac1
 8003ab4:	08003ad1 	.word	0x08003ad1
 8003ab8:	2301      	movs	r3, #1
 8003aba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003abe:	e116      	b.n	8003cee <UART_SetConfig+0x2fe>
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ac6:	e112      	b.n	8003cee <UART_SetConfig+0x2fe>
 8003ac8:	2304      	movs	r3, #4
 8003aca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ace:	e10e      	b.n	8003cee <UART_SetConfig+0x2fe>
 8003ad0:	2308      	movs	r3, #8
 8003ad2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ad6:	e10a      	b.n	8003cee <UART_SetConfig+0x2fe>
 8003ad8:	2310      	movs	r3, #16
 8003ada:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ade:	e106      	b.n	8003cee <UART_SetConfig+0x2fe>
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a7c      	ldr	r2, [pc, #496]	; (8003cd8 <UART_SetConfig+0x2e8>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d138      	bne.n	8003b5c <UART_SetConfig+0x16c>
 8003aea:	4b7a      	ldr	r3, [pc, #488]	; (8003cd4 <UART_SetConfig+0x2e4>)
 8003aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af0:	f003 030c 	and.w	r3, r3, #12
 8003af4:	2b0c      	cmp	r3, #12
 8003af6:	d82d      	bhi.n	8003b54 <UART_SetConfig+0x164>
 8003af8:	a201      	add	r2, pc, #4	; (adr r2, 8003b00 <UART_SetConfig+0x110>)
 8003afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003afe:	bf00      	nop
 8003b00:	08003b35 	.word	0x08003b35
 8003b04:	08003b55 	.word	0x08003b55
 8003b08:	08003b55 	.word	0x08003b55
 8003b0c:	08003b55 	.word	0x08003b55
 8003b10:	08003b45 	.word	0x08003b45
 8003b14:	08003b55 	.word	0x08003b55
 8003b18:	08003b55 	.word	0x08003b55
 8003b1c:	08003b55 	.word	0x08003b55
 8003b20:	08003b3d 	.word	0x08003b3d
 8003b24:	08003b55 	.word	0x08003b55
 8003b28:	08003b55 	.word	0x08003b55
 8003b2c:	08003b55 	.word	0x08003b55
 8003b30:	08003b4d 	.word	0x08003b4d
 8003b34:	2300      	movs	r3, #0
 8003b36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b3a:	e0d8      	b.n	8003cee <UART_SetConfig+0x2fe>
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b42:	e0d4      	b.n	8003cee <UART_SetConfig+0x2fe>
 8003b44:	2304      	movs	r3, #4
 8003b46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b4a:	e0d0      	b.n	8003cee <UART_SetConfig+0x2fe>
 8003b4c:	2308      	movs	r3, #8
 8003b4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b52:	e0cc      	b.n	8003cee <UART_SetConfig+0x2fe>
 8003b54:	2310      	movs	r3, #16
 8003b56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b5a:	e0c8      	b.n	8003cee <UART_SetConfig+0x2fe>
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a5e      	ldr	r2, [pc, #376]	; (8003cdc <UART_SetConfig+0x2ec>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d125      	bne.n	8003bb2 <UART_SetConfig+0x1c2>
 8003b66:	4b5b      	ldr	r3, [pc, #364]	; (8003cd4 <UART_SetConfig+0x2e4>)
 8003b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b6c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003b70:	2b30      	cmp	r3, #48	; 0x30
 8003b72:	d016      	beq.n	8003ba2 <UART_SetConfig+0x1b2>
 8003b74:	2b30      	cmp	r3, #48	; 0x30
 8003b76:	d818      	bhi.n	8003baa <UART_SetConfig+0x1ba>
 8003b78:	2b20      	cmp	r3, #32
 8003b7a:	d00a      	beq.n	8003b92 <UART_SetConfig+0x1a2>
 8003b7c:	2b20      	cmp	r3, #32
 8003b7e:	d814      	bhi.n	8003baa <UART_SetConfig+0x1ba>
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d002      	beq.n	8003b8a <UART_SetConfig+0x19a>
 8003b84:	2b10      	cmp	r3, #16
 8003b86:	d008      	beq.n	8003b9a <UART_SetConfig+0x1aa>
 8003b88:	e00f      	b.n	8003baa <UART_SetConfig+0x1ba>
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b90:	e0ad      	b.n	8003cee <UART_SetConfig+0x2fe>
 8003b92:	2302      	movs	r3, #2
 8003b94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b98:	e0a9      	b.n	8003cee <UART_SetConfig+0x2fe>
 8003b9a:	2304      	movs	r3, #4
 8003b9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ba0:	e0a5      	b.n	8003cee <UART_SetConfig+0x2fe>
 8003ba2:	2308      	movs	r3, #8
 8003ba4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ba8:	e0a1      	b.n	8003cee <UART_SetConfig+0x2fe>
 8003baa:	2310      	movs	r3, #16
 8003bac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bb0:	e09d      	b.n	8003cee <UART_SetConfig+0x2fe>
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a4a      	ldr	r2, [pc, #296]	; (8003ce0 <UART_SetConfig+0x2f0>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d125      	bne.n	8003c08 <UART_SetConfig+0x218>
 8003bbc:	4b45      	ldr	r3, [pc, #276]	; (8003cd4 <UART_SetConfig+0x2e4>)
 8003bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003bc6:	2bc0      	cmp	r3, #192	; 0xc0
 8003bc8:	d016      	beq.n	8003bf8 <UART_SetConfig+0x208>
 8003bca:	2bc0      	cmp	r3, #192	; 0xc0
 8003bcc:	d818      	bhi.n	8003c00 <UART_SetConfig+0x210>
 8003bce:	2b80      	cmp	r3, #128	; 0x80
 8003bd0:	d00a      	beq.n	8003be8 <UART_SetConfig+0x1f8>
 8003bd2:	2b80      	cmp	r3, #128	; 0x80
 8003bd4:	d814      	bhi.n	8003c00 <UART_SetConfig+0x210>
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d002      	beq.n	8003be0 <UART_SetConfig+0x1f0>
 8003bda:	2b40      	cmp	r3, #64	; 0x40
 8003bdc:	d008      	beq.n	8003bf0 <UART_SetConfig+0x200>
 8003bde:	e00f      	b.n	8003c00 <UART_SetConfig+0x210>
 8003be0:	2300      	movs	r3, #0
 8003be2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003be6:	e082      	b.n	8003cee <UART_SetConfig+0x2fe>
 8003be8:	2302      	movs	r3, #2
 8003bea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bee:	e07e      	b.n	8003cee <UART_SetConfig+0x2fe>
 8003bf0:	2304      	movs	r3, #4
 8003bf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bf6:	e07a      	b.n	8003cee <UART_SetConfig+0x2fe>
 8003bf8:	2308      	movs	r3, #8
 8003bfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bfe:	e076      	b.n	8003cee <UART_SetConfig+0x2fe>
 8003c00:	2310      	movs	r3, #16
 8003c02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c06:	e072      	b.n	8003cee <UART_SetConfig+0x2fe>
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a35      	ldr	r2, [pc, #212]	; (8003ce4 <UART_SetConfig+0x2f4>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d12a      	bne.n	8003c68 <UART_SetConfig+0x278>
 8003c12:	4b30      	ldr	r3, [pc, #192]	; (8003cd4 <UART_SetConfig+0x2e4>)
 8003c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c20:	d01a      	beq.n	8003c58 <UART_SetConfig+0x268>
 8003c22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c26:	d81b      	bhi.n	8003c60 <UART_SetConfig+0x270>
 8003c28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c2c:	d00c      	beq.n	8003c48 <UART_SetConfig+0x258>
 8003c2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c32:	d815      	bhi.n	8003c60 <UART_SetConfig+0x270>
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d003      	beq.n	8003c40 <UART_SetConfig+0x250>
 8003c38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c3c:	d008      	beq.n	8003c50 <UART_SetConfig+0x260>
 8003c3e:	e00f      	b.n	8003c60 <UART_SetConfig+0x270>
 8003c40:	2300      	movs	r3, #0
 8003c42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c46:	e052      	b.n	8003cee <UART_SetConfig+0x2fe>
 8003c48:	2302      	movs	r3, #2
 8003c4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c4e:	e04e      	b.n	8003cee <UART_SetConfig+0x2fe>
 8003c50:	2304      	movs	r3, #4
 8003c52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c56:	e04a      	b.n	8003cee <UART_SetConfig+0x2fe>
 8003c58:	2308      	movs	r3, #8
 8003c5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c5e:	e046      	b.n	8003cee <UART_SetConfig+0x2fe>
 8003c60:	2310      	movs	r3, #16
 8003c62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c66:	e042      	b.n	8003cee <UART_SetConfig+0x2fe>
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a17      	ldr	r2, [pc, #92]	; (8003ccc <UART_SetConfig+0x2dc>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d13a      	bne.n	8003ce8 <UART_SetConfig+0x2f8>
 8003c72:	4b18      	ldr	r3, [pc, #96]	; (8003cd4 <UART_SetConfig+0x2e4>)
 8003c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c78:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c80:	d01a      	beq.n	8003cb8 <UART_SetConfig+0x2c8>
 8003c82:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c86:	d81b      	bhi.n	8003cc0 <UART_SetConfig+0x2d0>
 8003c88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c8c:	d00c      	beq.n	8003ca8 <UART_SetConfig+0x2b8>
 8003c8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c92:	d815      	bhi.n	8003cc0 <UART_SetConfig+0x2d0>
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d003      	beq.n	8003ca0 <UART_SetConfig+0x2b0>
 8003c98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c9c:	d008      	beq.n	8003cb0 <UART_SetConfig+0x2c0>
 8003c9e:	e00f      	b.n	8003cc0 <UART_SetConfig+0x2d0>
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ca6:	e022      	b.n	8003cee <UART_SetConfig+0x2fe>
 8003ca8:	2302      	movs	r3, #2
 8003caa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cae:	e01e      	b.n	8003cee <UART_SetConfig+0x2fe>
 8003cb0:	2304      	movs	r3, #4
 8003cb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cb6:	e01a      	b.n	8003cee <UART_SetConfig+0x2fe>
 8003cb8:	2308      	movs	r3, #8
 8003cba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cbe:	e016      	b.n	8003cee <UART_SetConfig+0x2fe>
 8003cc0:	2310      	movs	r3, #16
 8003cc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cc6:	e012      	b.n	8003cee <UART_SetConfig+0x2fe>
 8003cc8:	cfff69f3 	.word	0xcfff69f3
 8003ccc:	40008000 	.word	0x40008000
 8003cd0:	40013800 	.word	0x40013800
 8003cd4:	40021000 	.word	0x40021000
 8003cd8:	40004400 	.word	0x40004400
 8003cdc:	40004800 	.word	0x40004800
 8003ce0:	40004c00 	.word	0x40004c00
 8003ce4:	40005000 	.word	0x40005000
 8003ce8:	2310      	movs	r3, #16
 8003cea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4aae      	ldr	r2, [pc, #696]	; (8003fac <UART_SetConfig+0x5bc>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	f040 8097 	bne.w	8003e28 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003cfa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003cfe:	2b08      	cmp	r3, #8
 8003d00:	d823      	bhi.n	8003d4a <UART_SetConfig+0x35a>
 8003d02:	a201      	add	r2, pc, #4	; (adr r2, 8003d08 <UART_SetConfig+0x318>)
 8003d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d08:	08003d2d 	.word	0x08003d2d
 8003d0c:	08003d4b 	.word	0x08003d4b
 8003d10:	08003d35 	.word	0x08003d35
 8003d14:	08003d4b 	.word	0x08003d4b
 8003d18:	08003d3b 	.word	0x08003d3b
 8003d1c:	08003d4b 	.word	0x08003d4b
 8003d20:	08003d4b 	.word	0x08003d4b
 8003d24:	08003d4b 	.word	0x08003d4b
 8003d28:	08003d43 	.word	0x08003d43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d2c:	f7fe fbd8 	bl	80024e0 <HAL_RCC_GetPCLK1Freq>
 8003d30:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d32:	e010      	b.n	8003d56 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d34:	4b9e      	ldr	r3, [pc, #632]	; (8003fb0 <UART_SetConfig+0x5c0>)
 8003d36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d38:	e00d      	b.n	8003d56 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d3a:	f7fe fb39 	bl	80023b0 <HAL_RCC_GetSysClockFreq>
 8003d3e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d40:	e009      	b.n	8003d56 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d48:	e005      	b.n	8003d56 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003d54:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f000 8130 	beq.w	8003fbe <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d62:	4a94      	ldr	r2, [pc, #592]	; (8003fb4 <UART_SetConfig+0x5c4>)
 8003d64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d68:	461a      	mov	r2, r3
 8003d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d70:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	685a      	ldr	r2, [r3, #4]
 8003d76:	4613      	mov	r3, r2
 8003d78:	005b      	lsls	r3, r3, #1
 8003d7a:	4413      	add	r3, r2
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d305      	bcc.n	8003d8e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d903      	bls.n	8003d96 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003d94:	e113      	b.n	8003fbe <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d98:	2200      	movs	r2, #0
 8003d9a:	60bb      	str	r3, [r7, #8]
 8003d9c:	60fa      	str	r2, [r7, #12]
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da2:	4a84      	ldr	r2, [pc, #528]	; (8003fb4 <UART_SetConfig+0x5c4>)
 8003da4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	2200      	movs	r2, #0
 8003dac:	603b      	str	r3, [r7, #0]
 8003dae:	607a      	str	r2, [r7, #4]
 8003db0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003db4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003db8:	f7fc fa72 	bl	80002a0 <__aeabi_uldivmod>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	460b      	mov	r3, r1
 8003dc0:	4610      	mov	r0, r2
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	f04f 0200 	mov.w	r2, #0
 8003dc8:	f04f 0300 	mov.w	r3, #0
 8003dcc:	020b      	lsls	r3, r1, #8
 8003dce:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003dd2:	0202      	lsls	r2, r0, #8
 8003dd4:	6979      	ldr	r1, [r7, #20]
 8003dd6:	6849      	ldr	r1, [r1, #4]
 8003dd8:	0849      	lsrs	r1, r1, #1
 8003dda:	2000      	movs	r0, #0
 8003ddc:	460c      	mov	r4, r1
 8003dde:	4605      	mov	r5, r0
 8003de0:	eb12 0804 	adds.w	r8, r2, r4
 8003de4:	eb43 0905 	adc.w	r9, r3, r5
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	469a      	mov	sl, r3
 8003df0:	4693      	mov	fp, r2
 8003df2:	4652      	mov	r2, sl
 8003df4:	465b      	mov	r3, fp
 8003df6:	4640      	mov	r0, r8
 8003df8:	4649      	mov	r1, r9
 8003dfa:	f7fc fa51 	bl	80002a0 <__aeabi_uldivmod>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	460b      	mov	r3, r1
 8003e02:	4613      	mov	r3, r2
 8003e04:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003e06:	6a3b      	ldr	r3, [r7, #32]
 8003e08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e0c:	d308      	bcc.n	8003e20 <UART_SetConfig+0x430>
 8003e0e:	6a3b      	ldr	r3, [r7, #32]
 8003e10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e14:	d204      	bcs.n	8003e20 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	6a3a      	ldr	r2, [r7, #32]
 8003e1c:	60da      	str	r2, [r3, #12]
 8003e1e:	e0ce      	b.n	8003fbe <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003e26:	e0ca      	b.n	8003fbe <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	69db      	ldr	r3, [r3, #28]
 8003e2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e30:	d166      	bne.n	8003f00 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003e32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003e36:	2b08      	cmp	r3, #8
 8003e38:	d827      	bhi.n	8003e8a <UART_SetConfig+0x49a>
 8003e3a:	a201      	add	r2, pc, #4	; (adr r2, 8003e40 <UART_SetConfig+0x450>)
 8003e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e40:	08003e65 	.word	0x08003e65
 8003e44:	08003e6d 	.word	0x08003e6d
 8003e48:	08003e75 	.word	0x08003e75
 8003e4c:	08003e8b 	.word	0x08003e8b
 8003e50:	08003e7b 	.word	0x08003e7b
 8003e54:	08003e8b 	.word	0x08003e8b
 8003e58:	08003e8b 	.word	0x08003e8b
 8003e5c:	08003e8b 	.word	0x08003e8b
 8003e60:	08003e83 	.word	0x08003e83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e64:	f7fe fb3c 	bl	80024e0 <HAL_RCC_GetPCLK1Freq>
 8003e68:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e6a:	e014      	b.n	8003e96 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e6c:	f7fe fb4e 	bl	800250c <HAL_RCC_GetPCLK2Freq>
 8003e70:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e72:	e010      	b.n	8003e96 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e74:	4b4e      	ldr	r3, [pc, #312]	; (8003fb0 <UART_SetConfig+0x5c0>)
 8003e76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e78:	e00d      	b.n	8003e96 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e7a:	f7fe fa99 	bl	80023b0 <HAL_RCC_GetSysClockFreq>
 8003e7e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e80:	e009      	b.n	8003e96 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e86:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e88:	e005      	b.n	8003e96 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003e94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	f000 8090 	beq.w	8003fbe <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea2:	4a44      	ldr	r2, [pc, #272]	; (8003fb4 <UART_SetConfig+0x5c4>)
 8003ea4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eac:	fbb3 f3f2 	udiv	r3, r3, r2
 8003eb0:	005a      	lsls	r2, r3, #1
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	085b      	lsrs	r3, r3, #1
 8003eb8:	441a      	add	r2, r3
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ec4:	6a3b      	ldr	r3, [r7, #32]
 8003ec6:	2b0f      	cmp	r3, #15
 8003ec8:	d916      	bls.n	8003ef8 <UART_SetConfig+0x508>
 8003eca:	6a3b      	ldr	r3, [r7, #32]
 8003ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ed0:	d212      	bcs.n	8003ef8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ed2:	6a3b      	ldr	r3, [r7, #32]
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	f023 030f 	bic.w	r3, r3, #15
 8003eda:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003edc:	6a3b      	ldr	r3, [r7, #32]
 8003ede:	085b      	lsrs	r3, r3, #1
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	f003 0307 	and.w	r3, r3, #7
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	8bfb      	ldrh	r3, [r7, #30]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	8bfa      	ldrh	r2, [r7, #30]
 8003ef4:	60da      	str	r2, [r3, #12]
 8003ef6:	e062      	b.n	8003fbe <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003efe:	e05e      	b.n	8003fbe <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f00:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003f04:	2b08      	cmp	r3, #8
 8003f06:	d828      	bhi.n	8003f5a <UART_SetConfig+0x56a>
 8003f08:	a201      	add	r2, pc, #4	; (adr r2, 8003f10 <UART_SetConfig+0x520>)
 8003f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f0e:	bf00      	nop
 8003f10:	08003f35 	.word	0x08003f35
 8003f14:	08003f3d 	.word	0x08003f3d
 8003f18:	08003f45 	.word	0x08003f45
 8003f1c:	08003f5b 	.word	0x08003f5b
 8003f20:	08003f4b 	.word	0x08003f4b
 8003f24:	08003f5b 	.word	0x08003f5b
 8003f28:	08003f5b 	.word	0x08003f5b
 8003f2c:	08003f5b 	.word	0x08003f5b
 8003f30:	08003f53 	.word	0x08003f53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f34:	f7fe fad4 	bl	80024e0 <HAL_RCC_GetPCLK1Freq>
 8003f38:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f3a:	e014      	b.n	8003f66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f3c:	f7fe fae6 	bl	800250c <HAL_RCC_GetPCLK2Freq>
 8003f40:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f42:	e010      	b.n	8003f66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f44:	4b1a      	ldr	r3, [pc, #104]	; (8003fb0 <UART_SetConfig+0x5c0>)
 8003f46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f48:	e00d      	b.n	8003f66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f4a:	f7fe fa31 	bl	80023b0 <HAL_RCC_GetSysClockFreq>
 8003f4e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f50:	e009      	b.n	8003f66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f56:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f58:	e005      	b.n	8003f66 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003f64:	bf00      	nop
    }

    if (pclk != 0U)
 8003f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d028      	beq.n	8003fbe <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f70:	4a10      	ldr	r2, [pc, #64]	; (8003fb4 <UART_SetConfig+0x5c4>)
 8003f72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f76:	461a      	mov	r2, r3
 8003f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7a:	fbb3 f2f2 	udiv	r2, r3, r2
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	085b      	lsrs	r3, r3, #1
 8003f84:	441a      	add	r2, r3
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f8e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f90:	6a3b      	ldr	r3, [r7, #32]
 8003f92:	2b0f      	cmp	r3, #15
 8003f94:	d910      	bls.n	8003fb8 <UART_SetConfig+0x5c8>
 8003f96:	6a3b      	ldr	r3, [r7, #32]
 8003f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f9c:	d20c      	bcs.n	8003fb8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f9e:	6a3b      	ldr	r3, [r7, #32]
 8003fa0:	b29a      	uxth	r2, r3
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	60da      	str	r2, [r3, #12]
 8003fa8:	e009      	b.n	8003fbe <UART_SetConfig+0x5ce>
 8003faa:	bf00      	nop
 8003fac:	40008000 	.word	0x40008000
 8003fb0:	00f42400 	.word	0x00f42400
 8003fb4:	08005a1c 	.word	0x08005a1c
      }
      else
      {
        ret = HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003fda:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3730      	adds	r7, #48	; 0x30
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003fe8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff4:	f003 0301 	and.w	r3, r3, #1
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d00a      	beq.n	8004012 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	430a      	orrs	r2, r1
 8004010:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00a      	beq.n	8004034 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	430a      	orrs	r2, r1
 8004032:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004038:	f003 0304 	and.w	r3, r3, #4
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00a      	beq.n	8004056 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	430a      	orrs	r2, r1
 8004054:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800405a:	f003 0308 	and.w	r3, r3, #8
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00a      	beq.n	8004078 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	430a      	orrs	r2, r1
 8004076:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407c:	f003 0310 	and.w	r3, r3, #16
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00a      	beq.n	800409a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	430a      	orrs	r2, r1
 8004098:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409e:	f003 0320 	and.w	r3, r3, #32
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00a      	beq.n	80040bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	430a      	orrs	r2, r1
 80040ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d01a      	beq.n	80040fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	430a      	orrs	r2, r1
 80040dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040e6:	d10a      	bne.n	80040fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00a      	beq.n	8004120 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	430a      	orrs	r2, r1
 800411e:	605a      	str	r2, [r3, #4]
  }
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b086      	sub	sp, #24
 8004130:	af02      	add	r7, sp, #8
 8004132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800413c:	f7fd f860 	bl	8001200 <HAL_GetTick>
 8004140:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0308 	and.w	r3, r3, #8
 800414c:	2b08      	cmp	r3, #8
 800414e:	d10e      	bne.n	800416e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004150:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004154:	9300      	str	r3, [sp, #0]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 f82f 	bl	80041c2 <UART_WaitOnFlagUntilTimeout>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d001      	beq.n	800416e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e025      	b.n	80041ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0304 	and.w	r3, r3, #4
 8004178:	2b04      	cmp	r3, #4
 800417a:	d10e      	bne.n	800419a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800417c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004180:	9300      	str	r3, [sp, #0]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 f819 	bl	80041c2 <UART_WaitOnFlagUntilTimeout>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d001      	beq.n	800419a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e00f      	b.n	80041ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2220      	movs	r2, #32
 800419e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2220      	movs	r2, #32
 80041a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b09c      	sub	sp, #112	; 0x70
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	60f8      	str	r0, [r7, #12]
 80041ca:	60b9      	str	r1, [r7, #8]
 80041cc:	603b      	str	r3, [r7, #0]
 80041ce:	4613      	mov	r3, r2
 80041d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041d2:	e0a9      	b.n	8004328 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041da:	f000 80a5 	beq.w	8004328 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041de:	f7fd f80f 	bl	8001200 <HAL_GetTick>
 80041e2:	4602      	mov	r2, r0
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d302      	bcc.n	80041f4 <UART_WaitOnFlagUntilTimeout+0x32>
 80041ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d140      	bne.n	8004276 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041fc:	e853 3f00 	ldrex	r3, [r3]
 8004200:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004202:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004204:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004208:	667b      	str	r3, [r7, #100]	; 0x64
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	461a      	mov	r2, r3
 8004210:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004212:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004214:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004216:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004218:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800421a:	e841 2300 	strex	r3, r2, [r1]
 800421e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004220:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1e6      	bne.n	80041f4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	3308      	adds	r3, #8
 800422c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800422e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004230:	e853 3f00 	ldrex	r3, [r3]
 8004234:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004238:	f023 0301 	bic.w	r3, r3, #1
 800423c:	663b      	str	r3, [r7, #96]	; 0x60
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	3308      	adds	r3, #8
 8004244:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004246:	64ba      	str	r2, [r7, #72]	; 0x48
 8004248:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800424c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800424e:	e841 2300 	strex	r3, r2, [r1]
 8004252:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004254:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004256:	2b00      	cmp	r3, #0
 8004258:	d1e5      	bne.n	8004226 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2220      	movs	r2, #32
 800425e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2220      	movs	r2, #32
 8004266:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e069      	b.n	800434a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0304 	and.w	r3, r3, #4
 8004280:	2b00      	cmp	r3, #0
 8004282:	d051      	beq.n	8004328 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	69db      	ldr	r3, [r3, #28]
 800428a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800428e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004292:	d149      	bne.n	8004328 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800429c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a6:	e853 3f00 	ldrex	r3, [r3]
 80042aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80042b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	461a      	mov	r2, r3
 80042ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042bc:	637b      	str	r3, [r7, #52]	; 0x34
 80042be:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80042c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042c4:	e841 2300 	strex	r3, r2, [r1]
 80042c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80042ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1e6      	bne.n	800429e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	3308      	adds	r3, #8
 80042d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	e853 3f00 	ldrex	r3, [r3]
 80042de:	613b      	str	r3, [r7, #16]
   return(result);
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	f023 0301 	bic.w	r3, r3, #1
 80042e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	3308      	adds	r3, #8
 80042ee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80042f0:	623a      	str	r2, [r7, #32]
 80042f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f4:	69f9      	ldr	r1, [r7, #28]
 80042f6:	6a3a      	ldr	r2, [r7, #32]
 80042f8:	e841 2300 	strex	r3, r2, [r1]
 80042fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d1e5      	bne.n	80042d0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2220      	movs	r2, #32
 8004308:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2220      	movs	r2, #32
 8004310:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2220      	movs	r2, #32
 8004318:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e010      	b.n	800434a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	69da      	ldr	r2, [r3, #28]
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	4013      	ands	r3, r2
 8004332:	68ba      	ldr	r2, [r7, #8]
 8004334:	429a      	cmp	r2, r3
 8004336:	bf0c      	ite	eq
 8004338:	2301      	moveq	r3, #1
 800433a:	2300      	movne	r3, #0
 800433c:	b2db      	uxtb	r3, r3
 800433e:	461a      	mov	r2, r3
 8004340:	79fb      	ldrb	r3, [r7, #7]
 8004342:	429a      	cmp	r2, r3
 8004344:	f43f af46 	beq.w	80041d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3770      	adds	r7, #112	; 0x70
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004352:	b480      	push	{r7}
 8004354:	b085      	sub	sp, #20
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004360:	2b01      	cmp	r3, #1
 8004362:	d101      	bne.n	8004368 <HAL_UARTEx_DisableFifoMode+0x16>
 8004364:	2302      	movs	r3, #2
 8004366:	e027      	b.n	80043b8 <HAL_UARTEx_DisableFifoMode+0x66>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2224      	movs	r2, #36	; 0x24
 8004374:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f022 0201 	bic.w	r2, r2, #1
 800438e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004396:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2220      	movs	r2, #32
 80043aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3714      	adds	r7, #20
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d101      	bne.n	80043dc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80043d8:	2302      	movs	r3, #2
 80043da:	e02d      	b.n	8004438 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2224      	movs	r2, #36	; 0x24
 80043e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f022 0201 	bic.w	r2, r2, #1
 8004402:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	683a      	ldr	r2, [r7, #0]
 8004414:	430a      	orrs	r2, r1
 8004416:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f000 f84f 	bl	80044bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2220      	movs	r2, #32
 800442a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004436:	2300      	movs	r3, #0
}
 8004438:	4618      	mov	r0, r3
 800443a:	3710      	adds	r7, #16
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004450:	2b01      	cmp	r3, #1
 8004452:	d101      	bne.n	8004458 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004454:	2302      	movs	r3, #2
 8004456:	e02d      	b.n	80044b4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2224      	movs	r2, #36	; 0x24
 8004464:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f022 0201 	bic.w	r2, r2, #1
 800447e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	683a      	ldr	r2, [r7, #0]
 8004490:	430a      	orrs	r2, r1
 8004492:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 f811 	bl	80044bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2220      	movs	r2, #32
 80044a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3710      	adds	r7, #16
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80044bc:	b480      	push	{r7}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d108      	bne.n	80044de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80044dc:	e031      	b.n	8004542 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80044de:	2308      	movs	r3, #8
 80044e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80044e2:	2308      	movs	r3, #8
 80044e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	0e5b      	lsrs	r3, r3, #25
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	f003 0307 	and.w	r3, r3, #7
 80044f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	0f5b      	lsrs	r3, r3, #29
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	f003 0307 	and.w	r3, r3, #7
 8004504:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004506:	7bbb      	ldrb	r3, [r7, #14]
 8004508:	7b3a      	ldrb	r2, [r7, #12]
 800450a:	4911      	ldr	r1, [pc, #68]	; (8004550 <UARTEx_SetNbDataToProcess+0x94>)
 800450c:	5c8a      	ldrb	r2, [r1, r2]
 800450e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004512:	7b3a      	ldrb	r2, [r7, #12]
 8004514:	490f      	ldr	r1, [pc, #60]	; (8004554 <UARTEx_SetNbDataToProcess+0x98>)
 8004516:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004518:	fb93 f3f2 	sdiv	r3, r3, r2
 800451c:	b29a      	uxth	r2, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004524:	7bfb      	ldrb	r3, [r7, #15]
 8004526:	7b7a      	ldrb	r2, [r7, #13]
 8004528:	4909      	ldr	r1, [pc, #36]	; (8004550 <UARTEx_SetNbDataToProcess+0x94>)
 800452a:	5c8a      	ldrb	r2, [r1, r2]
 800452c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004530:	7b7a      	ldrb	r2, [r7, #13]
 8004532:	4908      	ldr	r1, [pc, #32]	; (8004554 <UARTEx_SetNbDataToProcess+0x98>)
 8004534:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004536:	fb93 f3f2 	sdiv	r3, r3, r2
 800453a:	b29a      	uxth	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004542:	bf00      	nop
 8004544:	3714      	adds	r7, #20
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	08005a34 	.word	0x08005a34
 8004554:	08005a3c 	.word	0x08005a3c

08004558 <__errno>:
 8004558:	4b01      	ldr	r3, [pc, #4]	; (8004560 <__errno+0x8>)
 800455a:	6818      	ldr	r0, [r3, #0]
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	20000098 	.word	0x20000098

08004564 <__libc_init_array>:
 8004564:	b570      	push	{r4, r5, r6, lr}
 8004566:	4d0d      	ldr	r5, [pc, #52]	; (800459c <__libc_init_array+0x38>)
 8004568:	4c0d      	ldr	r4, [pc, #52]	; (80045a0 <__libc_init_array+0x3c>)
 800456a:	1b64      	subs	r4, r4, r5
 800456c:	10a4      	asrs	r4, r4, #2
 800456e:	2600      	movs	r6, #0
 8004570:	42a6      	cmp	r6, r4
 8004572:	d109      	bne.n	8004588 <__libc_init_array+0x24>
 8004574:	4d0b      	ldr	r5, [pc, #44]	; (80045a4 <__libc_init_array+0x40>)
 8004576:	4c0c      	ldr	r4, [pc, #48]	; (80045a8 <__libc_init_array+0x44>)
 8004578:	f001 fa00 	bl	800597c <_init>
 800457c:	1b64      	subs	r4, r4, r5
 800457e:	10a4      	asrs	r4, r4, #2
 8004580:	2600      	movs	r6, #0
 8004582:	42a6      	cmp	r6, r4
 8004584:	d105      	bne.n	8004592 <__libc_init_array+0x2e>
 8004586:	bd70      	pop	{r4, r5, r6, pc}
 8004588:	f855 3b04 	ldr.w	r3, [r5], #4
 800458c:	4798      	blx	r3
 800458e:	3601      	adds	r6, #1
 8004590:	e7ee      	b.n	8004570 <__libc_init_array+0xc>
 8004592:	f855 3b04 	ldr.w	r3, [r5], #4
 8004596:	4798      	blx	r3
 8004598:	3601      	adds	r6, #1
 800459a:	e7f2      	b.n	8004582 <__libc_init_array+0x1e>
 800459c:	08005ae4 	.word	0x08005ae4
 80045a0:	08005ae4 	.word	0x08005ae4
 80045a4:	08005ae4 	.word	0x08005ae4
 80045a8:	08005ae8 	.word	0x08005ae8

080045ac <memset>:
 80045ac:	4402      	add	r2, r0
 80045ae:	4603      	mov	r3, r0
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d100      	bne.n	80045b6 <memset+0xa>
 80045b4:	4770      	bx	lr
 80045b6:	f803 1b01 	strb.w	r1, [r3], #1
 80045ba:	e7f9      	b.n	80045b0 <memset+0x4>

080045bc <iprintf>:
 80045bc:	b40f      	push	{r0, r1, r2, r3}
 80045be:	4b0a      	ldr	r3, [pc, #40]	; (80045e8 <iprintf+0x2c>)
 80045c0:	b513      	push	{r0, r1, r4, lr}
 80045c2:	681c      	ldr	r4, [r3, #0]
 80045c4:	b124      	cbz	r4, 80045d0 <iprintf+0x14>
 80045c6:	69a3      	ldr	r3, [r4, #24]
 80045c8:	b913      	cbnz	r3, 80045d0 <iprintf+0x14>
 80045ca:	4620      	mov	r0, r4
 80045cc:	f000 fa7e 	bl	8004acc <__sinit>
 80045d0:	ab05      	add	r3, sp, #20
 80045d2:	9a04      	ldr	r2, [sp, #16]
 80045d4:	68a1      	ldr	r1, [r4, #8]
 80045d6:	9301      	str	r3, [sp, #4]
 80045d8:	4620      	mov	r0, r4
 80045da:	f000 fde3 	bl	80051a4 <_vfiprintf_r>
 80045de:	b002      	add	sp, #8
 80045e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045e4:	b004      	add	sp, #16
 80045e6:	4770      	bx	lr
 80045e8:	20000098 	.word	0x20000098

080045ec <_puts_r>:
 80045ec:	b570      	push	{r4, r5, r6, lr}
 80045ee:	460e      	mov	r6, r1
 80045f0:	4605      	mov	r5, r0
 80045f2:	b118      	cbz	r0, 80045fc <_puts_r+0x10>
 80045f4:	6983      	ldr	r3, [r0, #24]
 80045f6:	b90b      	cbnz	r3, 80045fc <_puts_r+0x10>
 80045f8:	f000 fa68 	bl	8004acc <__sinit>
 80045fc:	69ab      	ldr	r3, [r5, #24]
 80045fe:	68ac      	ldr	r4, [r5, #8]
 8004600:	b913      	cbnz	r3, 8004608 <_puts_r+0x1c>
 8004602:	4628      	mov	r0, r5
 8004604:	f000 fa62 	bl	8004acc <__sinit>
 8004608:	4b2c      	ldr	r3, [pc, #176]	; (80046bc <_puts_r+0xd0>)
 800460a:	429c      	cmp	r4, r3
 800460c:	d120      	bne.n	8004650 <_puts_r+0x64>
 800460e:	686c      	ldr	r4, [r5, #4]
 8004610:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004612:	07db      	lsls	r3, r3, #31
 8004614:	d405      	bmi.n	8004622 <_puts_r+0x36>
 8004616:	89a3      	ldrh	r3, [r4, #12]
 8004618:	0598      	lsls	r0, r3, #22
 800461a:	d402      	bmi.n	8004622 <_puts_r+0x36>
 800461c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800461e:	f000 faf3 	bl	8004c08 <__retarget_lock_acquire_recursive>
 8004622:	89a3      	ldrh	r3, [r4, #12]
 8004624:	0719      	lsls	r1, r3, #28
 8004626:	d51d      	bpl.n	8004664 <_puts_r+0x78>
 8004628:	6923      	ldr	r3, [r4, #16]
 800462a:	b1db      	cbz	r3, 8004664 <_puts_r+0x78>
 800462c:	3e01      	subs	r6, #1
 800462e:	68a3      	ldr	r3, [r4, #8]
 8004630:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004634:	3b01      	subs	r3, #1
 8004636:	60a3      	str	r3, [r4, #8]
 8004638:	bb39      	cbnz	r1, 800468a <_puts_r+0x9e>
 800463a:	2b00      	cmp	r3, #0
 800463c:	da38      	bge.n	80046b0 <_puts_r+0xc4>
 800463e:	4622      	mov	r2, r4
 8004640:	210a      	movs	r1, #10
 8004642:	4628      	mov	r0, r5
 8004644:	f000 f868 	bl	8004718 <__swbuf_r>
 8004648:	3001      	adds	r0, #1
 800464a:	d011      	beq.n	8004670 <_puts_r+0x84>
 800464c:	250a      	movs	r5, #10
 800464e:	e011      	b.n	8004674 <_puts_r+0x88>
 8004650:	4b1b      	ldr	r3, [pc, #108]	; (80046c0 <_puts_r+0xd4>)
 8004652:	429c      	cmp	r4, r3
 8004654:	d101      	bne.n	800465a <_puts_r+0x6e>
 8004656:	68ac      	ldr	r4, [r5, #8]
 8004658:	e7da      	b.n	8004610 <_puts_r+0x24>
 800465a:	4b1a      	ldr	r3, [pc, #104]	; (80046c4 <_puts_r+0xd8>)
 800465c:	429c      	cmp	r4, r3
 800465e:	bf08      	it	eq
 8004660:	68ec      	ldreq	r4, [r5, #12]
 8004662:	e7d5      	b.n	8004610 <_puts_r+0x24>
 8004664:	4621      	mov	r1, r4
 8004666:	4628      	mov	r0, r5
 8004668:	f000 f8a8 	bl	80047bc <__swsetup_r>
 800466c:	2800      	cmp	r0, #0
 800466e:	d0dd      	beq.n	800462c <_puts_r+0x40>
 8004670:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004674:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004676:	07da      	lsls	r2, r3, #31
 8004678:	d405      	bmi.n	8004686 <_puts_r+0x9a>
 800467a:	89a3      	ldrh	r3, [r4, #12]
 800467c:	059b      	lsls	r3, r3, #22
 800467e:	d402      	bmi.n	8004686 <_puts_r+0x9a>
 8004680:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004682:	f000 fac2 	bl	8004c0a <__retarget_lock_release_recursive>
 8004686:	4628      	mov	r0, r5
 8004688:	bd70      	pop	{r4, r5, r6, pc}
 800468a:	2b00      	cmp	r3, #0
 800468c:	da04      	bge.n	8004698 <_puts_r+0xac>
 800468e:	69a2      	ldr	r2, [r4, #24]
 8004690:	429a      	cmp	r2, r3
 8004692:	dc06      	bgt.n	80046a2 <_puts_r+0xb6>
 8004694:	290a      	cmp	r1, #10
 8004696:	d004      	beq.n	80046a2 <_puts_r+0xb6>
 8004698:	6823      	ldr	r3, [r4, #0]
 800469a:	1c5a      	adds	r2, r3, #1
 800469c:	6022      	str	r2, [r4, #0]
 800469e:	7019      	strb	r1, [r3, #0]
 80046a0:	e7c5      	b.n	800462e <_puts_r+0x42>
 80046a2:	4622      	mov	r2, r4
 80046a4:	4628      	mov	r0, r5
 80046a6:	f000 f837 	bl	8004718 <__swbuf_r>
 80046aa:	3001      	adds	r0, #1
 80046ac:	d1bf      	bne.n	800462e <_puts_r+0x42>
 80046ae:	e7df      	b.n	8004670 <_puts_r+0x84>
 80046b0:	6823      	ldr	r3, [r4, #0]
 80046b2:	250a      	movs	r5, #10
 80046b4:	1c5a      	adds	r2, r3, #1
 80046b6:	6022      	str	r2, [r4, #0]
 80046b8:	701d      	strb	r5, [r3, #0]
 80046ba:	e7db      	b.n	8004674 <_puts_r+0x88>
 80046bc:	08005a68 	.word	0x08005a68
 80046c0:	08005a88 	.word	0x08005a88
 80046c4:	08005a48 	.word	0x08005a48

080046c8 <puts>:
 80046c8:	4b02      	ldr	r3, [pc, #8]	; (80046d4 <puts+0xc>)
 80046ca:	4601      	mov	r1, r0
 80046cc:	6818      	ldr	r0, [r3, #0]
 80046ce:	f7ff bf8d 	b.w	80045ec <_puts_r>
 80046d2:	bf00      	nop
 80046d4:	20000098 	.word	0x20000098

080046d8 <siprintf>:
 80046d8:	b40e      	push	{r1, r2, r3}
 80046da:	b500      	push	{lr}
 80046dc:	b09c      	sub	sp, #112	; 0x70
 80046de:	ab1d      	add	r3, sp, #116	; 0x74
 80046e0:	9002      	str	r0, [sp, #8]
 80046e2:	9006      	str	r0, [sp, #24]
 80046e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80046e8:	4809      	ldr	r0, [pc, #36]	; (8004710 <siprintf+0x38>)
 80046ea:	9107      	str	r1, [sp, #28]
 80046ec:	9104      	str	r1, [sp, #16]
 80046ee:	4909      	ldr	r1, [pc, #36]	; (8004714 <siprintf+0x3c>)
 80046f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80046f4:	9105      	str	r1, [sp, #20]
 80046f6:	6800      	ldr	r0, [r0, #0]
 80046f8:	9301      	str	r3, [sp, #4]
 80046fa:	a902      	add	r1, sp, #8
 80046fc:	f000 fc28 	bl	8004f50 <_svfiprintf_r>
 8004700:	9b02      	ldr	r3, [sp, #8]
 8004702:	2200      	movs	r2, #0
 8004704:	701a      	strb	r2, [r3, #0]
 8004706:	b01c      	add	sp, #112	; 0x70
 8004708:	f85d eb04 	ldr.w	lr, [sp], #4
 800470c:	b003      	add	sp, #12
 800470e:	4770      	bx	lr
 8004710:	20000098 	.word	0x20000098
 8004714:	ffff0208 	.word	0xffff0208

08004718 <__swbuf_r>:
 8004718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800471a:	460e      	mov	r6, r1
 800471c:	4614      	mov	r4, r2
 800471e:	4605      	mov	r5, r0
 8004720:	b118      	cbz	r0, 800472a <__swbuf_r+0x12>
 8004722:	6983      	ldr	r3, [r0, #24]
 8004724:	b90b      	cbnz	r3, 800472a <__swbuf_r+0x12>
 8004726:	f000 f9d1 	bl	8004acc <__sinit>
 800472a:	4b21      	ldr	r3, [pc, #132]	; (80047b0 <__swbuf_r+0x98>)
 800472c:	429c      	cmp	r4, r3
 800472e:	d12b      	bne.n	8004788 <__swbuf_r+0x70>
 8004730:	686c      	ldr	r4, [r5, #4]
 8004732:	69a3      	ldr	r3, [r4, #24]
 8004734:	60a3      	str	r3, [r4, #8]
 8004736:	89a3      	ldrh	r3, [r4, #12]
 8004738:	071a      	lsls	r2, r3, #28
 800473a:	d52f      	bpl.n	800479c <__swbuf_r+0x84>
 800473c:	6923      	ldr	r3, [r4, #16]
 800473e:	b36b      	cbz	r3, 800479c <__swbuf_r+0x84>
 8004740:	6923      	ldr	r3, [r4, #16]
 8004742:	6820      	ldr	r0, [r4, #0]
 8004744:	1ac0      	subs	r0, r0, r3
 8004746:	6963      	ldr	r3, [r4, #20]
 8004748:	b2f6      	uxtb	r6, r6
 800474a:	4283      	cmp	r3, r0
 800474c:	4637      	mov	r7, r6
 800474e:	dc04      	bgt.n	800475a <__swbuf_r+0x42>
 8004750:	4621      	mov	r1, r4
 8004752:	4628      	mov	r0, r5
 8004754:	f000 f926 	bl	80049a4 <_fflush_r>
 8004758:	bb30      	cbnz	r0, 80047a8 <__swbuf_r+0x90>
 800475a:	68a3      	ldr	r3, [r4, #8]
 800475c:	3b01      	subs	r3, #1
 800475e:	60a3      	str	r3, [r4, #8]
 8004760:	6823      	ldr	r3, [r4, #0]
 8004762:	1c5a      	adds	r2, r3, #1
 8004764:	6022      	str	r2, [r4, #0]
 8004766:	701e      	strb	r6, [r3, #0]
 8004768:	6963      	ldr	r3, [r4, #20]
 800476a:	3001      	adds	r0, #1
 800476c:	4283      	cmp	r3, r0
 800476e:	d004      	beq.n	800477a <__swbuf_r+0x62>
 8004770:	89a3      	ldrh	r3, [r4, #12]
 8004772:	07db      	lsls	r3, r3, #31
 8004774:	d506      	bpl.n	8004784 <__swbuf_r+0x6c>
 8004776:	2e0a      	cmp	r6, #10
 8004778:	d104      	bne.n	8004784 <__swbuf_r+0x6c>
 800477a:	4621      	mov	r1, r4
 800477c:	4628      	mov	r0, r5
 800477e:	f000 f911 	bl	80049a4 <_fflush_r>
 8004782:	b988      	cbnz	r0, 80047a8 <__swbuf_r+0x90>
 8004784:	4638      	mov	r0, r7
 8004786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004788:	4b0a      	ldr	r3, [pc, #40]	; (80047b4 <__swbuf_r+0x9c>)
 800478a:	429c      	cmp	r4, r3
 800478c:	d101      	bne.n	8004792 <__swbuf_r+0x7a>
 800478e:	68ac      	ldr	r4, [r5, #8]
 8004790:	e7cf      	b.n	8004732 <__swbuf_r+0x1a>
 8004792:	4b09      	ldr	r3, [pc, #36]	; (80047b8 <__swbuf_r+0xa0>)
 8004794:	429c      	cmp	r4, r3
 8004796:	bf08      	it	eq
 8004798:	68ec      	ldreq	r4, [r5, #12]
 800479a:	e7ca      	b.n	8004732 <__swbuf_r+0x1a>
 800479c:	4621      	mov	r1, r4
 800479e:	4628      	mov	r0, r5
 80047a0:	f000 f80c 	bl	80047bc <__swsetup_r>
 80047a4:	2800      	cmp	r0, #0
 80047a6:	d0cb      	beq.n	8004740 <__swbuf_r+0x28>
 80047a8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80047ac:	e7ea      	b.n	8004784 <__swbuf_r+0x6c>
 80047ae:	bf00      	nop
 80047b0:	08005a68 	.word	0x08005a68
 80047b4:	08005a88 	.word	0x08005a88
 80047b8:	08005a48 	.word	0x08005a48

080047bc <__swsetup_r>:
 80047bc:	4b32      	ldr	r3, [pc, #200]	; (8004888 <__swsetup_r+0xcc>)
 80047be:	b570      	push	{r4, r5, r6, lr}
 80047c0:	681d      	ldr	r5, [r3, #0]
 80047c2:	4606      	mov	r6, r0
 80047c4:	460c      	mov	r4, r1
 80047c6:	b125      	cbz	r5, 80047d2 <__swsetup_r+0x16>
 80047c8:	69ab      	ldr	r3, [r5, #24]
 80047ca:	b913      	cbnz	r3, 80047d2 <__swsetup_r+0x16>
 80047cc:	4628      	mov	r0, r5
 80047ce:	f000 f97d 	bl	8004acc <__sinit>
 80047d2:	4b2e      	ldr	r3, [pc, #184]	; (800488c <__swsetup_r+0xd0>)
 80047d4:	429c      	cmp	r4, r3
 80047d6:	d10f      	bne.n	80047f8 <__swsetup_r+0x3c>
 80047d8:	686c      	ldr	r4, [r5, #4]
 80047da:	89a3      	ldrh	r3, [r4, #12]
 80047dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80047e0:	0719      	lsls	r1, r3, #28
 80047e2:	d42c      	bmi.n	800483e <__swsetup_r+0x82>
 80047e4:	06dd      	lsls	r5, r3, #27
 80047e6:	d411      	bmi.n	800480c <__swsetup_r+0x50>
 80047e8:	2309      	movs	r3, #9
 80047ea:	6033      	str	r3, [r6, #0]
 80047ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80047f0:	81a3      	strh	r3, [r4, #12]
 80047f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047f6:	e03e      	b.n	8004876 <__swsetup_r+0xba>
 80047f8:	4b25      	ldr	r3, [pc, #148]	; (8004890 <__swsetup_r+0xd4>)
 80047fa:	429c      	cmp	r4, r3
 80047fc:	d101      	bne.n	8004802 <__swsetup_r+0x46>
 80047fe:	68ac      	ldr	r4, [r5, #8]
 8004800:	e7eb      	b.n	80047da <__swsetup_r+0x1e>
 8004802:	4b24      	ldr	r3, [pc, #144]	; (8004894 <__swsetup_r+0xd8>)
 8004804:	429c      	cmp	r4, r3
 8004806:	bf08      	it	eq
 8004808:	68ec      	ldreq	r4, [r5, #12]
 800480a:	e7e6      	b.n	80047da <__swsetup_r+0x1e>
 800480c:	0758      	lsls	r0, r3, #29
 800480e:	d512      	bpl.n	8004836 <__swsetup_r+0x7a>
 8004810:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004812:	b141      	cbz	r1, 8004826 <__swsetup_r+0x6a>
 8004814:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004818:	4299      	cmp	r1, r3
 800481a:	d002      	beq.n	8004822 <__swsetup_r+0x66>
 800481c:	4630      	mov	r0, r6
 800481e:	f000 fa5b 	bl	8004cd8 <_free_r>
 8004822:	2300      	movs	r3, #0
 8004824:	6363      	str	r3, [r4, #52]	; 0x34
 8004826:	89a3      	ldrh	r3, [r4, #12]
 8004828:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800482c:	81a3      	strh	r3, [r4, #12]
 800482e:	2300      	movs	r3, #0
 8004830:	6063      	str	r3, [r4, #4]
 8004832:	6923      	ldr	r3, [r4, #16]
 8004834:	6023      	str	r3, [r4, #0]
 8004836:	89a3      	ldrh	r3, [r4, #12]
 8004838:	f043 0308 	orr.w	r3, r3, #8
 800483c:	81a3      	strh	r3, [r4, #12]
 800483e:	6923      	ldr	r3, [r4, #16]
 8004840:	b94b      	cbnz	r3, 8004856 <__swsetup_r+0x9a>
 8004842:	89a3      	ldrh	r3, [r4, #12]
 8004844:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004848:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800484c:	d003      	beq.n	8004856 <__swsetup_r+0x9a>
 800484e:	4621      	mov	r1, r4
 8004850:	4630      	mov	r0, r6
 8004852:	f000 fa01 	bl	8004c58 <__smakebuf_r>
 8004856:	89a0      	ldrh	r0, [r4, #12]
 8004858:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800485c:	f010 0301 	ands.w	r3, r0, #1
 8004860:	d00a      	beq.n	8004878 <__swsetup_r+0xbc>
 8004862:	2300      	movs	r3, #0
 8004864:	60a3      	str	r3, [r4, #8]
 8004866:	6963      	ldr	r3, [r4, #20]
 8004868:	425b      	negs	r3, r3
 800486a:	61a3      	str	r3, [r4, #24]
 800486c:	6923      	ldr	r3, [r4, #16]
 800486e:	b943      	cbnz	r3, 8004882 <__swsetup_r+0xc6>
 8004870:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004874:	d1ba      	bne.n	80047ec <__swsetup_r+0x30>
 8004876:	bd70      	pop	{r4, r5, r6, pc}
 8004878:	0781      	lsls	r1, r0, #30
 800487a:	bf58      	it	pl
 800487c:	6963      	ldrpl	r3, [r4, #20]
 800487e:	60a3      	str	r3, [r4, #8]
 8004880:	e7f4      	b.n	800486c <__swsetup_r+0xb0>
 8004882:	2000      	movs	r0, #0
 8004884:	e7f7      	b.n	8004876 <__swsetup_r+0xba>
 8004886:	bf00      	nop
 8004888:	20000098 	.word	0x20000098
 800488c:	08005a68 	.word	0x08005a68
 8004890:	08005a88 	.word	0x08005a88
 8004894:	08005a48 	.word	0x08005a48

08004898 <__sflush_r>:
 8004898:	898a      	ldrh	r2, [r1, #12]
 800489a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800489e:	4605      	mov	r5, r0
 80048a0:	0710      	lsls	r0, r2, #28
 80048a2:	460c      	mov	r4, r1
 80048a4:	d458      	bmi.n	8004958 <__sflush_r+0xc0>
 80048a6:	684b      	ldr	r3, [r1, #4]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	dc05      	bgt.n	80048b8 <__sflush_r+0x20>
 80048ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	dc02      	bgt.n	80048b8 <__sflush_r+0x20>
 80048b2:	2000      	movs	r0, #0
 80048b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048ba:	2e00      	cmp	r6, #0
 80048bc:	d0f9      	beq.n	80048b2 <__sflush_r+0x1a>
 80048be:	2300      	movs	r3, #0
 80048c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80048c4:	682f      	ldr	r7, [r5, #0]
 80048c6:	602b      	str	r3, [r5, #0]
 80048c8:	d032      	beq.n	8004930 <__sflush_r+0x98>
 80048ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80048cc:	89a3      	ldrh	r3, [r4, #12]
 80048ce:	075a      	lsls	r2, r3, #29
 80048d0:	d505      	bpl.n	80048de <__sflush_r+0x46>
 80048d2:	6863      	ldr	r3, [r4, #4]
 80048d4:	1ac0      	subs	r0, r0, r3
 80048d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80048d8:	b10b      	cbz	r3, 80048de <__sflush_r+0x46>
 80048da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048dc:	1ac0      	subs	r0, r0, r3
 80048de:	2300      	movs	r3, #0
 80048e0:	4602      	mov	r2, r0
 80048e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048e4:	6a21      	ldr	r1, [r4, #32]
 80048e6:	4628      	mov	r0, r5
 80048e8:	47b0      	blx	r6
 80048ea:	1c43      	adds	r3, r0, #1
 80048ec:	89a3      	ldrh	r3, [r4, #12]
 80048ee:	d106      	bne.n	80048fe <__sflush_r+0x66>
 80048f0:	6829      	ldr	r1, [r5, #0]
 80048f2:	291d      	cmp	r1, #29
 80048f4:	d82c      	bhi.n	8004950 <__sflush_r+0xb8>
 80048f6:	4a2a      	ldr	r2, [pc, #168]	; (80049a0 <__sflush_r+0x108>)
 80048f8:	40ca      	lsrs	r2, r1
 80048fa:	07d6      	lsls	r6, r2, #31
 80048fc:	d528      	bpl.n	8004950 <__sflush_r+0xb8>
 80048fe:	2200      	movs	r2, #0
 8004900:	6062      	str	r2, [r4, #4]
 8004902:	04d9      	lsls	r1, r3, #19
 8004904:	6922      	ldr	r2, [r4, #16]
 8004906:	6022      	str	r2, [r4, #0]
 8004908:	d504      	bpl.n	8004914 <__sflush_r+0x7c>
 800490a:	1c42      	adds	r2, r0, #1
 800490c:	d101      	bne.n	8004912 <__sflush_r+0x7a>
 800490e:	682b      	ldr	r3, [r5, #0]
 8004910:	b903      	cbnz	r3, 8004914 <__sflush_r+0x7c>
 8004912:	6560      	str	r0, [r4, #84]	; 0x54
 8004914:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004916:	602f      	str	r7, [r5, #0]
 8004918:	2900      	cmp	r1, #0
 800491a:	d0ca      	beq.n	80048b2 <__sflush_r+0x1a>
 800491c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004920:	4299      	cmp	r1, r3
 8004922:	d002      	beq.n	800492a <__sflush_r+0x92>
 8004924:	4628      	mov	r0, r5
 8004926:	f000 f9d7 	bl	8004cd8 <_free_r>
 800492a:	2000      	movs	r0, #0
 800492c:	6360      	str	r0, [r4, #52]	; 0x34
 800492e:	e7c1      	b.n	80048b4 <__sflush_r+0x1c>
 8004930:	6a21      	ldr	r1, [r4, #32]
 8004932:	2301      	movs	r3, #1
 8004934:	4628      	mov	r0, r5
 8004936:	47b0      	blx	r6
 8004938:	1c41      	adds	r1, r0, #1
 800493a:	d1c7      	bne.n	80048cc <__sflush_r+0x34>
 800493c:	682b      	ldr	r3, [r5, #0]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d0c4      	beq.n	80048cc <__sflush_r+0x34>
 8004942:	2b1d      	cmp	r3, #29
 8004944:	d001      	beq.n	800494a <__sflush_r+0xb2>
 8004946:	2b16      	cmp	r3, #22
 8004948:	d101      	bne.n	800494e <__sflush_r+0xb6>
 800494a:	602f      	str	r7, [r5, #0]
 800494c:	e7b1      	b.n	80048b2 <__sflush_r+0x1a>
 800494e:	89a3      	ldrh	r3, [r4, #12]
 8004950:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004954:	81a3      	strh	r3, [r4, #12]
 8004956:	e7ad      	b.n	80048b4 <__sflush_r+0x1c>
 8004958:	690f      	ldr	r7, [r1, #16]
 800495a:	2f00      	cmp	r7, #0
 800495c:	d0a9      	beq.n	80048b2 <__sflush_r+0x1a>
 800495e:	0793      	lsls	r3, r2, #30
 8004960:	680e      	ldr	r6, [r1, #0]
 8004962:	bf08      	it	eq
 8004964:	694b      	ldreq	r3, [r1, #20]
 8004966:	600f      	str	r7, [r1, #0]
 8004968:	bf18      	it	ne
 800496a:	2300      	movne	r3, #0
 800496c:	eba6 0807 	sub.w	r8, r6, r7
 8004970:	608b      	str	r3, [r1, #8]
 8004972:	f1b8 0f00 	cmp.w	r8, #0
 8004976:	dd9c      	ble.n	80048b2 <__sflush_r+0x1a>
 8004978:	6a21      	ldr	r1, [r4, #32]
 800497a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800497c:	4643      	mov	r3, r8
 800497e:	463a      	mov	r2, r7
 8004980:	4628      	mov	r0, r5
 8004982:	47b0      	blx	r6
 8004984:	2800      	cmp	r0, #0
 8004986:	dc06      	bgt.n	8004996 <__sflush_r+0xfe>
 8004988:	89a3      	ldrh	r3, [r4, #12]
 800498a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800498e:	81a3      	strh	r3, [r4, #12]
 8004990:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004994:	e78e      	b.n	80048b4 <__sflush_r+0x1c>
 8004996:	4407      	add	r7, r0
 8004998:	eba8 0800 	sub.w	r8, r8, r0
 800499c:	e7e9      	b.n	8004972 <__sflush_r+0xda>
 800499e:	bf00      	nop
 80049a0:	20400001 	.word	0x20400001

080049a4 <_fflush_r>:
 80049a4:	b538      	push	{r3, r4, r5, lr}
 80049a6:	690b      	ldr	r3, [r1, #16]
 80049a8:	4605      	mov	r5, r0
 80049aa:	460c      	mov	r4, r1
 80049ac:	b913      	cbnz	r3, 80049b4 <_fflush_r+0x10>
 80049ae:	2500      	movs	r5, #0
 80049b0:	4628      	mov	r0, r5
 80049b2:	bd38      	pop	{r3, r4, r5, pc}
 80049b4:	b118      	cbz	r0, 80049be <_fflush_r+0x1a>
 80049b6:	6983      	ldr	r3, [r0, #24]
 80049b8:	b90b      	cbnz	r3, 80049be <_fflush_r+0x1a>
 80049ba:	f000 f887 	bl	8004acc <__sinit>
 80049be:	4b14      	ldr	r3, [pc, #80]	; (8004a10 <_fflush_r+0x6c>)
 80049c0:	429c      	cmp	r4, r3
 80049c2:	d11b      	bne.n	80049fc <_fflush_r+0x58>
 80049c4:	686c      	ldr	r4, [r5, #4]
 80049c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d0ef      	beq.n	80049ae <_fflush_r+0xa>
 80049ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80049d0:	07d0      	lsls	r0, r2, #31
 80049d2:	d404      	bmi.n	80049de <_fflush_r+0x3a>
 80049d4:	0599      	lsls	r1, r3, #22
 80049d6:	d402      	bmi.n	80049de <_fflush_r+0x3a>
 80049d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049da:	f000 f915 	bl	8004c08 <__retarget_lock_acquire_recursive>
 80049de:	4628      	mov	r0, r5
 80049e0:	4621      	mov	r1, r4
 80049e2:	f7ff ff59 	bl	8004898 <__sflush_r>
 80049e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80049e8:	07da      	lsls	r2, r3, #31
 80049ea:	4605      	mov	r5, r0
 80049ec:	d4e0      	bmi.n	80049b0 <_fflush_r+0xc>
 80049ee:	89a3      	ldrh	r3, [r4, #12]
 80049f0:	059b      	lsls	r3, r3, #22
 80049f2:	d4dd      	bmi.n	80049b0 <_fflush_r+0xc>
 80049f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049f6:	f000 f908 	bl	8004c0a <__retarget_lock_release_recursive>
 80049fa:	e7d9      	b.n	80049b0 <_fflush_r+0xc>
 80049fc:	4b05      	ldr	r3, [pc, #20]	; (8004a14 <_fflush_r+0x70>)
 80049fe:	429c      	cmp	r4, r3
 8004a00:	d101      	bne.n	8004a06 <_fflush_r+0x62>
 8004a02:	68ac      	ldr	r4, [r5, #8]
 8004a04:	e7df      	b.n	80049c6 <_fflush_r+0x22>
 8004a06:	4b04      	ldr	r3, [pc, #16]	; (8004a18 <_fflush_r+0x74>)
 8004a08:	429c      	cmp	r4, r3
 8004a0a:	bf08      	it	eq
 8004a0c:	68ec      	ldreq	r4, [r5, #12]
 8004a0e:	e7da      	b.n	80049c6 <_fflush_r+0x22>
 8004a10:	08005a68 	.word	0x08005a68
 8004a14:	08005a88 	.word	0x08005a88
 8004a18:	08005a48 	.word	0x08005a48

08004a1c <std>:
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	b510      	push	{r4, lr}
 8004a20:	4604      	mov	r4, r0
 8004a22:	e9c0 3300 	strd	r3, r3, [r0]
 8004a26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a2a:	6083      	str	r3, [r0, #8]
 8004a2c:	8181      	strh	r1, [r0, #12]
 8004a2e:	6643      	str	r3, [r0, #100]	; 0x64
 8004a30:	81c2      	strh	r2, [r0, #14]
 8004a32:	6183      	str	r3, [r0, #24]
 8004a34:	4619      	mov	r1, r3
 8004a36:	2208      	movs	r2, #8
 8004a38:	305c      	adds	r0, #92	; 0x5c
 8004a3a:	f7ff fdb7 	bl	80045ac <memset>
 8004a3e:	4b05      	ldr	r3, [pc, #20]	; (8004a54 <std+0x38>)
 8004a40:	6263      	str	r3, [r4, #36]	; 0x24
 8004a42:	4b05      	ldr	r3, [pc, #20]	; (8004a58 <std+0x3c>)
 8004a44:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a46:	4b05      	ldr	r3, [pc, #20]	; (8004a5c <std+0x40>)
 8004a48:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a4a:	4b05      	ldr	r3, [pc, #20]	; (8004a60 <std+0x44>)
 8004a4c:	6224      	str	r4, [r4, #32]
 8004a4e:	6323      	str	r3, [r4, #48]	; 0x30
 8004a50:	bd10      	pop	{r4, pc}
 8004a52:	bf00      	nop
 8004a54:	0800574d 	.word	0x0800574d
 8004a58:	0800576f 	.word	0x0800576f
 8004a5c:	080057a7 	.word	0x080057a7
 8004a60:	080057cb 	.word	0x080057cb

08004a64 <_cleanup_r>:
 8004a64:	4901      	ldr	r1, [pc, #4]	; (8004a6c <_cleanup_r+0x8>)
 8004a66:	f000 b8af 	b.w	8004bc8 <_fwalk_reent>
 8004a6a:	bf00      	nop
 8004a6c:	080049a5 	.word	0x080049a5

08004a70 <__sfmoreglue>:
 8004a70:	b570      	push	{r4, r5, r6, lr}
 8004a72:	2268      	movs	r2, #104	; 0x68
 8004a74:	1e4d      	subs	r5, r1, #1
 8004a76:	4355      	muls	r5, r2
 8004a78:	460e      	mov	r6, r1
 8004a7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004a7e:	f000 f997 	bl	8004db0 <_malloc_r>
 8004a82:	4604      	mov	r4, r0
 8004a84:	b140      	cbz	r0, 8004a98 <__sfmoreglue+0x28>
 8004a86:	2100      	movs	r1, #0
 8004a88:	e9c0 1600 	strd	r1, r6, [r0]
 8004a8c:	300c      	adds	r0, #12
 8004a8e:	60a0      	str	r0, [r4, #8]
 8004a90:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004a94:	f7ff fd8a 	bl	80045ac <memset>
 8004a98:	4620      	mov	r0, r4
 8004a9a:	bd70      	pop	{r4, r5, r6, pc}

08004a9c <__sfp_lock_acquire>:
 8004a9c:	4801      	ldr	r0, [pc, #4]	; (8004aa4 <__sfp_lock_acquire+0x8>)
 8004a9e:	f000 b8b3 	b.w	8004c08 <__retarget_lock_acquire_recursive>
 8004aa2:	bf00      	nop
 8004aa4:	20000221 	.word	0x20000221

08004aa8 <__sfp_lock_release>:
 8004aa8:	4801      	ldr	r0, [pc, #4]	; (8004ab0 <__sfp_lock_release+0x8>)
 8004aaa:	f000 b8ae 	b.w	8004c0a <__retarget_lock_release_recursive>
 8004aae:	bf00      	nop
 8004ab0:	20000221 	.word	0x20000221

08004ab4 <__sinit_lock_acquire>:
 8004ab4:	4801      	ldr	r0, [pc, #4]	; (8004abc <__sinit_lock_acquire+0x8>)
 8004ab6:	f000 b8a7 	b.w	8004c08 <__retarget_lock_acquire_recursive>
 8004aba:	bf00      	nop
 8004abc:	20000222 	.word	0x20000222

08004ac0 <__sinit_lock_release>:
 8004ac0:	4801      	ldr	r0, [pc, #4]	; (8004ac8 <__sinit_lock_release+0x8>)
 8004ac2:	f000 b8a2 	b.w	8004c0a <__retarget_lock_release_recursive>
 8004ac6:	bf00      	nop
 8004ac8:	20000222 	.word	0x20000222

08004acc <__sinit>:
 8004acc:	b510      	push	{r4, lr}
 8004ace:	4604      	mov	r4, r0
 8004ad0:	f7ff fff0 	bl	8004ab4 <__sinit_lock_acquire>
 8004ad4:	69a3      	ldr	r3, [r4, #24]
 8004ad6:	b11b      	cbz	r3, 8004ae0 <__sinit+0x14>
 8004ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004adc:	f7ff bff0 	b.w	8004ac0 <__sinit_lock_release>
 8004ae0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004ae4:	6523      	str	r3, [r4, #80]	; 0x50
 8004ae6:	4b13      	ldr	r3, [pc, #76]	; (8004b34 <__sinit+0x68>)
 8004ae8:	4a13      	ldr	r2, [pc, #76]	; (8004b38 <__sinit+0x6c>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	62a2      	str	r2, [r4, #40]	; 0x28
 8004aee:	42a3      	cmp	r3, r4
 8004af0:	bf04      	itt	eq
 8004af2:	2301      	moveq	r3, #1
 8004af4:	61a3      	streq	r3, [r4, #24]
 8004af6:	4620      	mov	r0, r4
 8004af8:	f000 f820 	bl	8004b3c <__sfp>
 8004afc:	6060      	str	r0, [r4, #4]
 8004afe:	4620      	mov	r0, r4
 8004b00:	f000 f81c 	bl	8004b3c <__sfp>
 8004b04:	60a0      	str	r0, [r4, #8]
 8004b06:	4620      	mov	r0, r4
 8004b08:	f000 f818 	bl	8004b3c <__sfp>
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	60e0      	str	r0, [r4, #12]
 8004b10:	2104      	movs	r1, #4
 8004b12:	6860      	ldr	r0, [r4, #4]
 8004b14:	f7ff ff82 	bl	8004a1c <std>
 8004b18:	68a0      	ldr	r0, [r4, #8]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	2109      	movs	r1, #9
 8004b1e:	f7ff ff7d 	bl	8004a1c <std>
 8004b22:	68e0      	ldr	r0, [r4, #12]
 8004b24:	2202      	movs	r2, #2
 8004b26:	2112      	movs	r1, #18
 8004b28:	f7ff ff78 	bl	8004a1c <std>
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	61a3      	str	r3, [r4, #24]
 8004b30:	e7d2      	b.n	8004ad8 <__sinit+0xc>
 8004b32:	bf00      	nop
 8004b34:	08005a44 	.word	0x08005a44
 8004b38:	08004a65 	.word	0x08004a65

08004b3c <__sfp>:
 8004b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b3e:	4607      	mov	r7, r0
 8004b40:	f7ff ffac 	bl	8004a9c <__sfp_lock_acquire>
 8004b44:	4b1e      	ldr	r3, [pc, #120]	; (8004bc0 <__sfp+0x84>)
 8004b46:	681e      	ldr	r6, [r3, #0]
 8004b48:	69b3      	ldr	r3, [r6, #24]
 8004b4a:	b913      	cbnz	r3, 8004b52 <__sfp+0x16>
 8004b4c:	4630      	mov	r0, r6
 8004b4e:	f7ff ffbd 	bl	8004acc <__sinit>
 8004b52:	3648      	adds	r6, #72	; 0x48
 8004b54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004b58:	3b01      	subs	r3, #1
 8004b5a:	d503      	bpl.n	8004b64 <__sfp+0x28>
 8004b5c:	6833      	ldr	r3, [r6, #0]
 8004b5e:	b30b      	cbz	r3, 8004ba4 <__sfp+0x68>
 8004b60:	6836      	ldr	r6, [r6, #0]
 8004b62:	e7f7      	b.n	8004b54 <__sfp+0x18>
 8004b64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004b68:	b9d5      	cbnz	r5, 8004ba0 <__sfp+0x64>
 8004b6a:	4b16      	ldr	r3, [pc, #88]	; (8004bc4 <__sfp+0x88>)
 8004b6c:	60e3      	str	r3, [r4, #12]
 8004b6e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004b72:	6665      	str	r5, [r4, #100]	; 0x64
 8004b74:	f000 f847 	bl	8004c06 <__retarget_lock_init_recursive>
 8004b78:	f7ff ff96 	bl	8004aa8 <__sfp_lock_release>
 8004b7c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004b80:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004b84:	6025      	str	r5, [r4, #0]
 8004b86:	61a5      	str	r5, [r4, #24]
 8004b88:	2208      	movs	r2, #8
 8004b8a:	4629      	mov	r1, r5
 8004b8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004b90:	f7ff fd0c 	bl	80045ac <memset>
 8004b94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004b98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004b9c:	4620      	mov	r0, r4
 8004b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ba0:	3468      	adds	r4, #104	; 0x68
 8004ba2:	e7d9      	b.n	8004b58 <__sfp+0x1c>
 8004ba4:	2104      	movs	r1, #4
 8004ba6:	4638      	mov	r0, r7
 8004ba8:	f7ff ff62 	bl	8004a70 <__sfmoreglue>
 8004bac:	4604      	mov	r4, r0
 8004bae:	6030      	str	r0, [r6, #0]
 8004bb0:	2800      	cmp	r0, #0
 8004bb2:	d1d5      	bne.n	8004b60 <__sfp+0x24>
 8004bb4:	f7ff ff78 	bl	8004aa8 <__sfp_lock_release>
 8004bb8:	230c      	movs	r3, #12
 8004bba:	603b      	str	r3, [r7, #0]
 8004bbc:	e7ee      	b.n	8004b9c <__sfp+0x60>
 8004bbe:	bf00      	nop
 8004bc0:	08005a44 	.word	0x08005a44
 8004bc4:	ffff0001 	.word	0xffff0001

08004bc8 <_fwalk_reent>:
 8004bc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bcc:	4606      	mov	r6, r0
 8004bce:	4688      	mov	r8, r1
 8004bd0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004bd4:	2700      	movs	r7, #0
 8004bd6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004bda:	f1b9 0901 	subs.w	r9, r9, #1
 8004bde:	d505      	bpl.n	8004bec <_fwalk_reent+0x24>
 8004be0:	6824      	ldr	r4, [r4, #0]
 8004be2:	2c00      	cmp	r4, #0
 8004be4:	d1f7      	bne.n	8004bd6 <_fwalk_reent+0xe>
 8004be6:	4638      	mov	r0, r7
 8004be8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bec:	89ab      	ldrh	r3, [r5, #12]
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d907      	bls.n	8004c02 <_fwalk_reent+0x3a>
 8004bf2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	d003      	beq.n	8004c02 <_fwalk_reent+0x3a>
 8004bfa:	4629      	mov	r1, r5
 8004bfc:	4630      	mov	r0, r6
 8004bfe:	47c0      	blx	r8
 8004c00:	4307      	orrs	r7, r0
 8004c02:	3568      	adds	r5, #104	; 0x68
 8004c04:	e7e9      	b.n	8004bda <_fwalk_reent+0x12>

08004c06 <__retarget_lock_init_recursive>:
 8004c06:	4770      	bx	lr

08004c08 <__retarget_lock_acquire_recursive>:
 8004c08:	4770      	bx	lr

08004c0a <__retarget_lock_release_recursive>:
 8004c0a:	4770      	bx	lr

08004c0c <__swhatbuf_r>:
 8004c0c:	b570      	push	{r4, r5, r6, lr}
 8004c0e:	460e      	mov	r6, r1
 8004c10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c14:	2900      	cmp	r1, #0
 8004c16:	b096      	sub	sp, #88	; 0x58
 8004c18:	4614      	mov	r4, r2
 8004c1a:	461d      	mov	r5, r3
 8004c1c:	da08      	bge.n	8004c30 <__swhatbuf_r+0x24>
 8004c1e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	602a      	str	r2, [r5, #0]
 8004c26:	061a      	lsls	r2, r3, #24
 8004c28:	d410      	bmi.n	8004c4c <__swhatbuf_r+0x40>
 8004c2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c2e:	e00e      	b.n	8004c4e <__swhatbuf_r+0x42>
 8004c30:	466a      	mov	r2, sp
 8004c32:	f000 fdf1 	bl	8005818 <_fstat_r>
 8004c36:	2800      	cmp	r0, #0
 8004c38:	dbf1      	blt.n	8004c1e <__swhatbuf_r+0x12>
 8004c3a:	9a01      	ldr	r2, [sp, #4]
 8004c3c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004c40:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004c44:	425a      	negs	r2, r3
 8004c46:	415a      	adcs	r2, r3
 8004c48:	602a      	str	r2, [r5, #0]
 8004c4a:	e7ee      	b.n	8004c2a <__swhatbuf_r+0x1e>
 8004c4c:	2340      	movs	r3, #64	; 0x40
 8004c4e:	2000      	movs	r0, #0
 8004c50:	6023      	str	r3, [r4, #0]
 8004c52:	b016      	add	sp, #88	; 0x58
 8004c54:	bd70      	pop	{r4, r5, r6, pc}
	...

08004c58 <__smakebuf_r>:
 8004c58:	898b      	ldrh	r3, [r1, #12]
 8004c5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004c5c:	079d      	lsls	r5, r3, #30
 8004c5e:	4606      	mov	r6, r0
 8004c60:	460c      	mov	r4, r1
 8004c62:	d507      	bpl.n	8004c74 <__smakebuf_r+0x1c>
 8004c64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004c68:	6023      	str	r3, [r4, #0]
 8004c6a:	6123      	str	r3, [r4, #16]
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	6163      	str	r3, [r4, #20]
 8004c70:	b002      	add	sp, #8
 8004c72:	bd70      	pop	{r4, r5, r6, pc}
 8004c74:	ab01      	add	r3, sp, #4
 8004c76:	466a      	mov	r2, sp
 8004c78:	f7ff ffc8 	bl	8004c0c <__swhatbuf_r>
 8004c7c:	9900      	ldr	r1, [sp, #0]
 8004c7e:	4605      	mov	r5, r0
 8004c80:	4630      	mov	r0, r6
 8004c82:	f000 f895 	bl	8004db0 <_malloc_r>
 8004c86:	b948      	cbnz	r0, 8004c9c <__smakebuf_r+0x44>
 8004c88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c8c:	059a      	lsls	r2, r3, #22
 8004c8e:	d4ef      	bmi.n	8004c70 <__smakebuf_r+0x18>
 8004c90:	f023 0303 	bic.w	r3, r3, #3
 8004c94:	f043 0302 	orr.w	r3, r3, #2
 8004c98:	81a3      	strh	r3, [r4, #12]
 8004c9a:	e7e3      	b.n	8004c64 <__smakebuf_r+0xc>
 8004c9c:	4b0d      	ldr	r3, [pc, #52]	; (8004cd4 <__smakebuf_r+0x7c>)
 8004c9e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004ca0:	89a3      	ldrh	r3, [r4, #12]
 8004ca2:	6020      	str	r0, [r4, #0]
 8004ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ca8:	81a3      	strh	r3, [r4, #12]
 8004caa:	9b00      	ldr	r3, [sp, #0]
 8004cac:	6163      	str	r3, [r4, #20]
 8004cae:	9b01      	ldr	r3, [sp, #4]
 8004cb0:	6120      	str	r0, [r4, #16]
 8004cb2:	b15b      	cbz	r3, 8004ccc <__smakebuf_r+0x74>
 8004cb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004cb8:	4630      	mov	r0, r6
 8004cba:	f000 fdbf 	bl	800583c <_isatty_r>
 8004cbe:	b128      	cbz	r0, 8004ccc <__smakebuf_r+0x74>
 8004cc0:	89a3      	ldrh	r3, [r4, #12]
 8004cc2:	f023 0303 	bic.w	r3, r3, #3
 8004cc6:	f043 0301 	orr.w	r3, r3, #1
 8004cca:	81a3      	strh	r3, [r4, #12]
 8004ccc:	89a0      	ldrh	r0, [r4, #12]
 8004cce:	4305      	orrs	r5, r0
 8004cd0:	81a5      	strh	r5, [r4, #12]
 8004cd2:	e7cd      	b.n	8004c70 <__smakebuf_r+0x18>
 8004cd4:	08004a65 	.word	0x08004a65

08004cd8 <_free_r>:
 8004cd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004cda:	2900      	cmp	r1, #0
 8004cdc:	d044      	beq.n	8004d68 <_free_r+0x90>
 8004cde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ce2:	9001      	str	r0, [sp, #4]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f1a1 0404 	sub.w	r4, r1, #4
 8004cea:	bfb8      	it	lt
 8004cec:	18e4      	addlt	r4, r4, r3
 8004cee:	f000 fdef 	bl	80058d0 <__malloc_lock>
 8004cf2:	4a1e      	ldr	r2, [pc, #120]	; (8004d6c <_free_r+0x94>)
 8004cf4:	9801      	ldr	r0, [sp, #4]
 8004cf6:	6813      	ldr	r3, [r2, #0]
 8004cf8:	b933      	cbnz	r3, 8004d08 <_free_r+0x30>
 8004cfa:	6063      	str	r3, [r4, #4]
 8004cfc:	6014      	str	r4, [r2, #0]
 8004cfe:	b003      	add	sp, #12
 8004d00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d04:	f000 bdea 	b.w	80058dc <__malloc_unlock>
 8004d08:	42a3      	cmp	r3, r4
 8004d0a:	d908      	bls.n	8004d1e <_free_r+0x46>
 8004d0c:	6825      	ldr	r5, [r4, #0]
 8004d0e:	1961      	adds	r1, r4, r5
 8004d10:	428b      	cmp	r3, r1
 8004d12:	bf01      	itttt	eq
 8004d14:	6819      	ldreq	r1, [r3, #0]
 8004d16:	685b      	ldreq	r3, [r3, #4]
 8004d18:	1949      	addeq	r1, r1, r5
 8004d1a:	6021      	streq	r1, [r4, #0]
 8004d1c:	e7ed      	b.n	8004cfa <_free_r+0x22>
 8004d1e:	461a      	mov	r2, r3
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	b10b      	cbz	r3, 8004d28 <_free_r+0x50>
 8004d24:	42a3      	cmp	r3, r4
 8004d26:	d9fa      	bls.n	8004d1e <_free_r+0x46>
 8004d28:	6811      	ldr	r1, [r2, #0]
 8004d2a:	1855      	adds	r5, r2, r1
 8004d2c:	42a5      	cmp	r5, r4
 8004d2e:	d10b      	bne.n	8004d48 <_free_r+0x70>
 8004d30:	6824      	ldr	r4, [r4, #0]
 8004d32:	4421      	add	r1, r4
 8004d34:	1854      	adds	r4, r2, r1
 8004d36:	42a3      	cmp	r3, r4
 8004d38:	6011      	str	r1, [r2, #0]
 8004d3a:	d1e0      	bne.n	8004cfe <_free_r+0x26>
 8004d3c:	681c      	ldr	r4, [r3, #0]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	6053      	str	r3, [r2, #4]
 8004d42:	4421      	add	r1, r4
 8004d44:	6011      	str	r1, [r2, #0]
 8004d46:	e7da      	b.n	8004cfe <_free_r+0x26>
 8004d48:	d902      	bls.n	8004d50 <_free_r+0x78>
 8004d4a:	230c      	movs	r3, #12
 8004d4c:	6003      	str	r3, [r0, #0]
 8004d4e:	e7d6      	b.n	8004cfe <_free_r+0x26>
 8004d50:	6825      	ldr	r5, [r4, #0]
 8004d52:	1961      	adds	r1, r4, r5
 8004d54:	428b      	cmp	r3, r1
 8004d56:	bf04      	itt	eq
 8004d58:	6819      	ldreq	r1, [r3, #0]
 8004d5a:	685b      	ldreq	r3, [r3, #4]
 8004d5c:	6063      	str	r3, [r4, #4]
 8004d5e:	bf04      	itt	eq
 8004d60:	1949      	addeq	r1, r1, r5
 8004d62:	6021      	streq	r1, [r4, #0]
 8004d64:	6054      	str	r4, [r2, #4]
 8004d66:	e7ca      	b.n	8004cfe <_free_r+0x26>
 8004d68:	b003      	add	sp, #12
 8004d6a:	bd30      	pop	{r4, r5, pc}
 8004d6c:	20000224 	.word	0x20000224

08004d70 <sbrk_aligned>:
 8004d70:	b570      	push	{r4, r5, r6, lr}
 8004d72:	4e0e      	ldr	r6, [pc, #56]	; (8004dac <sbrk_aligned+0x3c>)
 8004d74:	460c      	mov	r4, r1
 8004d76:	6831      	ldr	r1, [r6, #0]
 8004d78:	4605      	mov	r5, r0
 8004d7a:	b911      	cbnz	r1, 8004d82 <sbrk_aligned+0x12>
 8004d7c:	f000 fcd6 	bl	800572c <_sbrk_r>
 8004d80:	6030      	str	r0, [r6, #0]
 8004d82:	4621      	mov	r1, r4
 8004d84:	4628      	mov	r0, r5
 8004d86:	f000 fcd1 	bl	800572c <_sbrk_r>
 8004d8a:	1c43      	adds	r3, r0, #1
 8004d8c:	d00a      	beq.n	8004da4 <sbrk_aligned+0x34>
 8004d8e:	1cc4      	adds	r4, r0, #3
 8004d90:	f024 0403 	bic.w	r4, r4, #3
 8004d94:	42a0      	cmp	r0, r4
 8004d96:	d007      	beq.n	8004da8 <sbrk_aligned+0x38>
 8004d98:	1a21      	subs	r1, r4, r0
 8004d9a:	4628      	mov	r0, r5
 8004d9c:	f000 fcc6 	bl	800572c <_sbrk_r>
 8004da0:	3001      	adds	r0, #1
 8004da2:	d101      	bne.n	8004da8 <sbrk_aligned+0x38>
 8004da4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004da8:	4620      	mov	r0, r4
 8004daa:	bd70      	pop	{r4, r5, r6, pc}
 8004dac:	20000228 	.word	0x20000228

08004db0 <_malloc_r>:
 8004db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004db4:	1ccd      	adds	r5, r1, #3
 8004db6:	f025 0503 	bic.w	r5, r5, #3
 8004dba:	3508      	adds	r5, #8
 8004dbc:	2d0c      	cmp	r5, #12
 8004dbe:	bf38      	it	cc
 8004dc0:	250c      	movcc	r5, #12
 8004dc2:	2d00      	cmp	r5, #0
 8004dc4:	4607      	mov	r7, r0
 8004dc6:	db01      	blt.n	8004dcc <_malloc_r+0x1c>
 8004dc8:	42a9      	cmp	r1, r5
 8004dca:	d905      	bls.n	8004dd8 <_malloc_r+0x28>
 8004dcc:	230c      	movs	r3, #12
 8004dce:	603b      	str	r3, [r7, #0]
 8004dd0:	2600      	movs	r6, #0
 8004dd2:	4630      	mov	r0, r6
 8004dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004dd8:	4e2e      	ldr	r6, [pc, #184]	; (8004e94 <_malloc_r+0xe4>)
 8004dda:	f000 fd79 	bl	80058d0 <__malloc_lock>
 8004dde:	6833      	ldr	r3, [r6, #0]
 8004de0:	461c      	mov	r4, r3
 8004de2:	bb34      	cbnz	r4, 8004e32 <_malloc_r+0x82>
 8004de4:	4629      	mov	r1, r5
 8004de6:	4638      	mov	r0, r7
 8004de8:	f7ff ffc2 	bl	8004d70 <sbrk_aligned>
 8004dec:	1c43      	adds	r3, r0, #1
 8004dee:	4604      	mov	r4, r0
 8004df0:	d14d      	bne.n	8004e8e <_malloc_r+0xde>
 8004df2:	6834      	ldr	r4, [r6, #0]
 8004df4:	4626      	mov	r6, r4
 8004df6:	2e00      	cmp	r6, #0
 8004df8:	d140      	bne.n	8004e7c <_malloc_r+0xcc>
 8004dfa:	6823      	ldr	r3, [r4, #0]
 8004dfc:	4631      	mov	r1, r6
 8004dfe:	4638      	mov	r0, r7
 8004e00:	eb04 0803 	add.w	r8, r4, r3
 8004e04:	f000 fc92 	bl	800572c <_sbrk_r>
 8004e08:	4580      	cmp	r8, r0
 8004e0a:	d13a      	bne.n	8004e82 <_malloc_r+0xd2>
 8004e0c:	6821      	ldr	r1, [r4, #0]
 8004e0e:	3503      	adds	r5, #3
 8004e10:	1a6d      	subs	r5, r5, r1
 8004e12:	f025 0503 	bic.w	r5, r5, #3
 8004e16:	3508      	adds	r5, #8
 8004e18:	2d0c      	cmp	r5, #12
 8004e1a:	bf38      	it	cc
 8004e1c:	250c      	movcc	r5, #12
 8004e1e:	4629      	mov	r1, r5
 8004e20:	4638      	mov	r0, r7
 8004e22:	f7ff ffa5 	bl	8004d70 <sbrk_aligned>
 8004e26:	3001      	adds	r0, #1
 8004e28:	d02b      	beq.n	8004e82 <_malloc_r+0xd2>
 8004e2a:	6823      	ldr	r3, [r4, #0]
 8004e2c:	442b      	add	r3, r5
 8004e2e:	6023      	str	r3, [r4, #0]
 8004e30:	e00e      	b.n	8004e50 <_malloc_r+0xa0>
 8004e32:	6822      	ldr	r2, [r4, #0]
 8004e34:	1b52      	subs	r2, r2, r5
 8004e36:	d41e      	bmi.n	8004e76 <_malloc_r+0xc6>
 8004e38:	2a0b      	cmp	r2, #11
 8004e3a:	d916      	bls.n	8004e6a <_malloc_r+0xba>
 8004e3c:	1961      	adds	r1, r4, r5
 8004e3e:	42a3      	cmp	r3, r4
 8004e40:	6025      	str	r5, [r4, #0]
 8004e42:	bf18      	it	ne
 8004e44:	6059      	strne	r1, [r3, #4]
 8004e46:	6863      	ldr	r3, [r4, #4]
 8004e48:	bf08      	it	eq
 8004e4a:	6031      	streq	r1, [r6, #0]
 8004e4c:	5162      	str	r2, [r4, r5]
 8004e4e:	604b      	str	r3, [r1, #4]
 8004e50:	4638      	mov	r0, r7
 8004e52:	f104 060b 	add.w	r6, r4, #11
 8004e56:	f000 fd41 	bl	80058dc <__malloc_unlock>
 8004e5a:	f026 0607 	bic.w	r6, r6, #7
 8004e5e:	1d23      	adds	r3, r4, #4
 8004e60:	1af2      	subs	r2, r6, r3
 8004e62:	d0b6      	beq.n	8004dd2 <_malloc_r+0x22>
 8004e64:	1b9b      	subs	r3, r3, r6
 8004e66:	50a3      	str	r3, [r4, r2]
 8004e68:	e7b3      	b.n	8004dd2 <_malloc_r+0x22>
 8004e6a:	6862      	ldr	r2, [r4, #4]
 8004e6c:	42a3      	cmp	r3, r4
 8004e6e:	bf0c      	ite	eq
 8004e70:	6032      	streq	r2, [r6, #0]
 8004e72:	605a      	strne	r2, [r3, #4]
 8004e74:	e7ec      	b.n	8004e50 <_malloc_r+0xa0>
 8004e76:	4623      	mov	r3, r4
 8004e78:	6864      	ldr	r4, [r4, #4]
 8004e7a:	e7b2      	b.n	8004de2 <_malloc_r+0x32>
 8004e7c:	4634      	mov	r4, r6
 8004e7e:	6876      	ldr	r6, [r6, #4]
 8004e80:	e7b9      	b.n	8004df6 <_malloc_r+0x46>
 8004e82:	230c      	movs	r3, #12
 8004e84:	603b      	str	r3, [r7, #0]
 8004e86:	4638      	mov	r0, r7
 8004e88:	f000 fd28 	bl	80058dc <__malloc_unlock>
 8004e8c:	e7a1      	b.n	8004dd2 <_malloc_r+0x22>
 8004e8e:	6025      	str	r5, [r4, #0]
 8004e90:	e7de      	b.n	8004e50 <_malloc_r+0xa0>
 8004e92:	bf00      	nop
 8004e94:	20000224 	.word	0x20000224

08004e98 <__ssputs_r>:
 8004e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e9c:	688e      	ldr	r6, [r1, #8]
 8004e9e:	429e      	cmp	r6, r3
 8004ea0:	4682      	mov	sl, r0
 8004ea2:	460c      	mov	r4, r1
 8004ea4:	4690      	mov	r8, r2
 8004ea6:	461f      	mov	r7, r3
 8004ea8:	d838      	bhi.n	8004f1c <__ssputs_r+0x84>
 8004eaa:	898a      	ldrh	r2, [r1, #12]
 8004eac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004eb0:	d032      	beq.n	8004f18 <__ssputs_r+0x80>
 8004eb2:	6825      	ldr	r5, [r4, #0]
 8004eb4:	6909      	ldr	r1, [r1, #16]
 8004eb6:	eba5 0901 	sub.w	r9, r5, r1
 8004eba:	6965      	ldr	r5, [r4, #20]
 8004ebc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ec0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	444b      	add	r3, r9
 8004ec8:	106d      	asrs	r5, r5, #1
 8004eca:	429d      	cmp	r5, r3
 8004ecc:	bf38      	it	cc
 8004ece:	461d      	movcc	r5, r3
 8004ed0:	0553      	lsls	r3, r2, #21
 8004ed2:	d531      	bpl.n	8004f38 <__ssputs_r+0xa0>
 8004ed4:	4629      	mov	r1, r5
 8004ed6:	f7ff ff6b 	bl	8004db0 <_malloc_r>
 8004eda:	4606      	mov	r6, r0
 8004edc:	b950      	cbnz	r0, 8004ef4 <__ssputs_r+0x5c>
 8004ede:	230c      	movs	r3, #12
 8004ee0:	f8ca 3000 	str.w	r3, [sl]
 8004ee4:	89a3      	ldrh	r3, [r4, #12]
 8004ee6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004eea:	81a3      	strh	r3, [r4, #12]
 8004eec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ef4:	6921      	ldr	r1, [r4, #16]
 8004ef6:	464a      	mov	r2, r9
 8004ef8:	f000 fcc2 	bl	8005880 <memcpy>
 8004efc:	89a3      	ldrh	r3, [r4, #12]
 8004efe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004f02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f06:	81a3      	strh	r3, [r4, #12]
 8004f08:	6126      	str	r6, [r4, #16]
 8004f0a:	6165      	str	r5, [r4, #20]
 8004f0c:	444e      	add	r6, r9
 8004f0e:	eba5 0509 	sub.w	r5, r5, r9
 8004f12:	6026      	str	r6, [r4, #0]
 8004f14:	60a5      	str	r5, [r4, #8]
 8004f16:	463e      	mov	r6, r7
 8004f18:	42be      	cmp	r6, r7
 8004f1a:	d900      	bls.n	8004f1e <__ssputs_r+0x86>
 8004f1c:	463e      	mov	r6, r7
 8004f1e:	6820      	ldr	r0, [r4, #0]
 8004f20:	4632      	mov	r2, r6
 8004f22:	4641      	mov	r1, r8
 8004f24:	f000 fcba 	bl	800589c <memmove>
 8004f28:	68a3      	ldr	r3, [r4, #8]
 8004f2a:	1b9b      	subs	r3, r3, r6
 8004f2c:	60a3      	str	r3, [r4, #8]
 8004f2e:	6823      	ldr	r3, [r4, #0]
 8004f30:	4433      	add	r3, r6
 8004f32:	6023      	str	r3, [r4, #0]
 8004f34:	2000      	movs	r0, #0
 8004f36:	e7db      	b.n	8004ef0 <__ssputs_r+0x58>
 8004f38:	462a      	mov	r2, r5
 8004f3a:	f000 fcd5 	bl	80058e8 <_realloc_r>
 8004f3e:	4606      	mov	r6, r0
 8004f40:	2800      	cmp	r0, #0
 8004f42:	d1e1      	bne.n	8004f08 <__ssputs_r+0x70>
 8004f44:	6921      	ldr	r1, [r4, #16]
 8004f46:	4650      	mov	r0, sl
 8004f48:	f7ff fec6 	bl	8004cd8 <_free_r>
 8004f4c:	e7c7      	b.n	8004ede <__ssputs_r+0x46>
	...

08004f50 <_svfiprintf_r>:
 8004f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f54:	4698      	mov	r8, r3
 8004f56:	898b      	ldrh	r3, [r1, #12]
 8004f58:	061b      	lsls	r3, r3, #24
 8004f5a:	b09d      	sub	sp, #116	; 0x74
 8004f5c:	4607      	mov	r7, r0
 8004f5e:	460d      	mov	r5, r1
 8004f60:	4614      	mov	r4, r2
 8004f62:	d50e      	bpl.n	8004f82 <_svfiprintf_r+0x32>
 8004f64:	690b      	ldr	r3, [r1, #16]
 8004f66:	b963      	cbnz	r3, 8004f82 <_svfiprintf_r+0x32>
 8004f68:	2140      	movs	r1, #64	; 0x40
 8004f6a:	f7ff ff21 	bl	8004db0 <_malloc_r>
 8004f6e:	6028      	str	r0, [r5, #0]
 8004f70:	6128      	str	r0, [r5, #16]
 8004f72:	b920      	cbnz	r0, 8004f7e <_svfiprintf_r+0x2e>
 8004f74:	230c      	movs	r3, #12
 8004f76:	603b      	str	r3, [r7, #0]
 8004f78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f7c:	e0d1      	b.n	8005122 <_svfiprintf_r+0x1d2>
 8004f7e:	2340      	movs	r3, #64	; 0x40
 8004f80:	616b      	str	r3, [r5, #20]
 8004f82:	2300      	movs	r3, #0
 8004f84:	9309      	str	r3, [sp, #36]	; 0x24
 8004f86:	2320      	movs	r3, #32
 8004f88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f90:	2330      	movs	r3, #48	; 0x30
 8004f92:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800513c <_svfiprintf_r+0x1ec>
 8004f96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f9a:	f04f 0901 	mov.w	r9, #1
 8004f9e:	4623      	mov	r3, r4
 8004fa0:	469a      	mov	sl, r3
 8004fa2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004fa6:	b10a      	cbz	r2, 8004fac <_svfiprintf_r+0x5c>
 8004fa8:	2a25      	cmp	r2, #37	; 0x25
 8004faa:	d1f9      	bne.n	8004fa0 <_svfiprintf_r+0x50>
 8004fac:	ebba 0b04 	subs.w	fp, sl, r4
 8004fb0:	d00b      	beq.n	8004fca <_svfiprintf_r+0x7a>
 8004fb2:	465b      	mov	r3, fp
 8004fb4:	4622      	mov	r2, r4
 8004fb6:	4629      	mov	r1, r5
 8004fb8:	4638      	mov	r0, r7
 8004fba:	f7ff ff6d 	bl	8004e98 <__ssputs_r>
 8004fbe:	3001      	adds	r0, #1
 8004fc0:	f000 80aa 	beq.w	8005118 <_svfiprintf_r+0x1c8>
 8004fc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004fc6:	445a      	add	r2, fp
 8004fc8:	9209      	str	r2, [sp, #36]	; 0x24
 8004fca:	f89a 3000 	ldrb.w	r3, [sl]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	f000 80a2 	beq.w	8005118 <_svfiprintf_r+0x1c8>
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004fda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004fde:	f10a 0a01 	add.w	sl, sl, #1
 8004fe2:	9304      	str	r3, [sp, #16]
 8004fe4:	9307      	str	r3, [sp, #28]
 8004fe6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004fea:	931a      	str	r3, [sp, #104]	; 0x68
 8004fec:	4654      	mov	r4, sl
 8004fee:	2205      	movs	r2, #5
 8004ff0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ff4:	4851      	ldr	r0, [pc, #324]	; (800513c <_svfiprintf_r+0x1ec>)
 8004ff6:	f7fb f903 	bl	8000200 <memchr>
 8004ffa:	9a04      	ldr	r2, [sp, #16]
 8004ffc:	b9d8      	cbnz	r0, 8005036 <_svfiprintf_r+0xe6>
 8004ffe:	06d0      	lsls	r0, r2, #27
 8005000:	bf44      	itt	mi
 8005002:	2320      	movmi	r3, #32
 8005004:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005008:	0711      	lsls	r1, r2, #28
 800500a:	bf44      	itt	mi
 800500c:	232b      	movmi	r3, #43	; 0x2b
 800500e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005012:	f89a 3000 	ldrb.w	r3, [sl]
 8005016:	2b2a      	cmp	r3, #42	; 0x2a
 8005018:	d015      	beq.n	8005046 <_svfiprintf_r+0xf6>
 800501a:	9a07      	ldr	r2, [sp, #28]
 800501c:	4654      	mov	r4, sl
 800501e:	2000      	movs	r0, #0
 8005020:	f04f 0c0a 	mov.w	ip, #10
 8005024:	4621      	mov	r1, r4
 8005026:	f811 3b01 	ldrb.w	r3, [r1], #1
 800502a:	3b30      	subs	r3, #48	; 0x30
 800502c:	2b09      	cmp	r3, #9
 800502e:	d94e      	bls.n	80050ce <_svfiprintf_r+0x17e>
 8005030:	b1b0      	cbz	r0, 8005060 <_svfiprintf_r+0x110>
 8005032:	9207      	str	r2, [sp, #28]
 8005034:	e014      	b.n	8005060 <_svfiprintf_r+0x110>
 8005036:	eba0 0308 	sub.w	r3, r0, r8
 800503a:	fa09 f303 	lsl.w	r3, r9, r3
 800503e:	4313      	orrs	r3, r2
 8005040:	9304      	str	r3, [sp, #16]
 8005042:	46a2      	mov	sl, r4
 8005044:	e7d2      	b.n	8004fec <_svfiprintf_r+0x9c>
 8005046:	9b03      	ldr	r3, [sp, #12]
 8005048:	1d19      	adds	r1, r3, #4
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	9103      	str	r1, [sp, #12]
 800504e:	2b00      	cmp	r3, #0
 8005050:	bfbb      	ittet	lt
 8005052:	425b      	neglt	r3, r3
 8005054:	f042 0202 	orrlt.w	r2, r2, #2
 8005058:	9307      	strge	r3, [sp, #28]
 800505a:	9307      	strlt	r3, [sp, #28]
 800505c:	bfb8      	it	lt
 800505e:	9204      	strlt	r2, [sp, #16]
 8005060:	7823      	ldrb	r3, [r4, #0]
 8005062:	2b2e      	cmp	r3, #46	; 0x2e
 8005064:	d10c      	bne.n	8005080 <_svfiprintf_r+0x130>
 8005066:	7863      	ldrb	r3, [r4, #1]
 8005068:	2b2a      	cmp	r3, #42	; 0x2a
 800506a:	d135      	bne.n	80050d8 <_svfiprintf_r+0x188>
 800506c:	9b03      	ldr	r3, [sp, #12]
 800506e:	1d1a      	adds	r2, r3, #4
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	9203      	str	r2, [sp, #12]
 8005074:	2b00      	cmp	r3, #0
 8005076:	bfb8      	it	lt
 8005078:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800507c:	3402      	adds	r4, #2
 800507e:	9305      	str	r3, [sp, #20]
 8005080:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800514c <_svfiprintf_r+0x1fc>
 8005084:	7821      	ldrb	r1, [r4, #0]
 8005086:	2203      	movs	r2, #3
 8005088:	4650      	mov	r0, sl
 800508a:	f7fb f8b9 	bl	8000200 <memchr>
 800508e:	b140      	cbz	r0, 80050a2 <_svfiprintf_r+0x152>
 8005090:	2340      	movs	r3, #64	; 0x40
 8005092:	eba0 000a 	sub.w	r0, r0, sl
 8005096:	fa03 f000 	lsl.w	r0, r3, r0
 800509a:	9b04      	ldr	r3, [sp, #16]
 800509c:	4303      	orrs	r3, r0
 800509e:	3401      	adds	r4, #1
 80050a0:	9304      	str	r3, [sp, #16]
 80050a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050a6:	4826      	ldr	r0, [pc, #152]	; (8005140 <_svfiprintf_r+0x1f0>)
 80050a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80050ac:	2206      	movs	r2, #6
 80050ae:	f7fb f8a7 	bl	8000200 <memchr>
 80050b2:	2800      	cmp	r0, #0
 80050b4:	d038      	beq.n	8005128 <_svfiprintf_r+0x1d8>
 80050b6:	4b23      	ldr	r3, [pc, #140]	; (8005144 <_svfiprintf_r+0x1f4>)
 80050b8:	bb1b      	cbnz	r3, 8005102 <_svfiprintf_r+0x1b2>
 80050ba:	9b03      	ldr	r3, [sp, #12]
 80050bc:	3307      	adds	r3, #7
 80050be:	f023 0307 	bic.w	r3, r3, #7
 80050c2:	3308      	adds	r3, #8
 80050c4:	9303      	str	r3, [sp, #12]
 80050c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050c8:	4433      	add	r3, r6
 80050ca:	9309      	str	r3, [sp, #36]	; 0x24
 80050cc:	e767      	b.n	8004f9e <_svfiprintf_r+0x4e>
 80050ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80050d2:	460c      	mov	r4, r1
 80050d4:	2001      	movs	r0, #1
 80050d6:	e7a5      	b.n	8005024 <_svfiprintf_r+0xd4>
 80050d8:	2300      	movs	r3, #0
 80050da:	3401      	adds	r4, #1
 80050dc:	9305      	str	r3, [sp, #20]
 80050de:	4619      	mov	r1, r3
 80050e0:	f04f 0c0a 	mov.w	ip, #10
 80050e4:	4620      	mov	r0, r4
 80050e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050ea:	3a30      	subs	r2, #48	; 0x30
 80050ec:	2a09      	cmp	r2, #9
 80050ee:	d903      	bls.n	80050f8 <_svfiprintf_r+0x1a8>
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d0c5      	beq.n	8005080 <_svfiprintf_r+0x130>
 80050f4:	9105      	str	r1, [sp, #20]
 80050f6:	e7c3      	b.n	8005080 <_svfiprintf_r+0x130>
 80050f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80050fc:	4604      	mov	r4, r0
 80050fe:	2301      	movs	r3, #1
 8005100:	e7f0      	b.n	80050e4 <_svfiprintf_r+0x194>
 8005102:	ab03      	add	r3, sp, #12
 8005104:	9300      	str	r3, [sp, #0]
 8005106:	462a      	mov	r2, r5
 8005108:	4b0f      	ldr	r3, [pc, #60]	; (8005148 <_svfiprintf_r+0x1f8>)
 800510a:	a904      	add	r1, sp, #16
 800510c:	4638      	mov	r0, r7
 800510e:	f3af 8000 	nop.w
 8005112:	1c42      	adds	r2, r0, #1
 8005114:	4606      	mov	r6, r0
 8005116:	d1d6      	bne.n	80050c6 <_svfiprintf_r+0x176>
 8005118:	89ab      	ldrh	r3, [r5, #12]
 800511a:	065b      	lsls	r3, r3, #25
 800511c:	f53f af2c 	bmi.w	8004f78 <_svfiprintf_r+0x28>
 8005120:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005122:	b01d      	add	sp, #116	; 0x74
 8005124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005128:	ab03      	add	r3, sp, #12
 800512a:	9300      	str	r3, [sp, #0]
 800512c:	462a      	mov	r2, r5
 800512e:	4b06      	ldr	r3, [pc, #24]	; (8005148 <_svfiprintf_r+0x1f8>)
 8005130:	a904      	add	r1, sp, #16
 8005132:	4638      	mov	r0, r7
 8005134:	f000 f9d4 	bl	80054e0 <_printf_i>
 8005138:	e7eb      	b.n	8005112 <_svfiprintf_r+0x1c2>
 800513a:	bf00      	nop
 800513c:	08005aa8 	.word	0x08005aa8
 8005140:	08005ab2 	.word	0x08005ab2
 8005144:	00000000 	.word	0x00000000
 8005148:	08004e99 	.word	0x08004e99
 800514c:	08005aae 	.word	0x08005aae

08005150 <__sfputc_r>:
 8005150:	6893      	ldr	r3, [r2, #8]
 8005152:	3b01      	subs	r3, #1
 8005154:	2b00      	cmp	r3, #0
 8005156:	b410      	push	{r4}
 8005158:	6093      	str	r3, [r2, #8]
 800515a:	da08      	bge.n	800516e <__sfputc_r+0x1e>
 800515c:	6994      	ldr	r4, [r2, #24]
 800515e:	42a3      	cmp	r3, r4
 8005160:	db01      	blt.n	8005166 <__sfputc_r+0x16>
 8005162:	290a      	cmp	r1, #10
 8005164:	d103      	bne.n	800516e <__sfputc_r+0x1e>
 8005166:	f85d 4b04 	ldr.w	r4, [sp], #4
 800516a:	f7ff bad5 	b.w	8004718 <__swbuf_r>
 800516e:	6813      	ldr	r3, [r2, #0]
 8005170:	1c58      	adds	r0, r3, #1
 8005172:	6010      	str	r0, [r2, #0]
 8005174:	7019      	strb	r1, [r3, #0]
 8005176:	4608      	mov	r0, r1
 8005178:	f85d 4b04 	ldr.w	r4, [sp], #4
 800517c:	4770      	bx	lr

0800517e <__sfputs_r>:
 800517e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005180:	4606      	mov	r6, r0
 8005182:	460f      	mov	r7, r1
 8005184:	4614      	mov	r4, r2
 8005186:	18d5      	adds	r5, r2, r3
 8005188:	42ac      	cmp	r4, r5
 800518a:	d101      	bne.n	8005190 <__sfputs_r+0x12>
 800518c:	2000      	movs	r0, #0
 800518e:	e007      	b.n	80051a0 <__sfputs_r+0x22>
 8005190:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005194:	463a      	mov	r2, r7
 8005196:	4630      	mov	r0, r6
 8005198:	f7ff ffda 	bl	8005150 <__sfputc_r>
 800519c:	1c43      	adds	r3, r0, #1
 800519e:	d1f3      	bne.n	8005188 <__sfputs_r+0xa>
 80051a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080051a4 <_vfiprintf_r>:
 80051a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051a8:	460d      	mov	r5, r1
 80051aa:	b09d      	sub	sp, #116	; 0x74
 80051ac:	4614      	mov	r4, r2
 80051ae:	4698      	mov	r8, r3
 80051b0:	4606      	mov	r6, r0
 80051b2:	b118      	cbz	r0, 80051bc <_vfiprintf_r+0x18>
 80051b4:	6983      	ldr	r3, [r0, #24]
 80051b6:	b90b      	cbnz	r3, 80051bc <_vfiprintf_r+0x18>
 80051b8:	f7ff fc88 	bl	8004acc <__sinit>
 80051bc:	4b89      	ldr	r3, [pc, #548]	; (80053e4 <_vfiprintf_r+0x240>)
 80051be:	429d      	cmp	r5, r3
 80051c0:	d11b      	bne.n	80051fa <_vfiprintf_r+0x56>
 80051c2:	6875      	ldr	r5, [r6, #4]
 80051c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80051c6:	07d9      	lsls	r1, r3, #31
 80051c8:	d405      	bmi.n	80051d6 <_vfiprintf_r+0x32>
 80051ca:	89ab      	ldrh	r3, [r5, #12]
 80051cc:	059a      	lsls	r2, r3, #22
 80051ce:	d402      	bmi.n	80051d6 <_vfiprintf_r+0x32>
 80051d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80051d2:	f7ff fd19 	bl	8004c08 <__retarget_lock_acquire_recursive>
 80051d6:	89ab      	ldrh	r3, [r5, #12]
 80051d8:	071b      	lsls	r3, r3, #28
 80051da:	d501      	bpl.n	80051e0 <_vfiprintf_r+0x3c>
 80051dc:	692b      	ldr	r3, [r5, #16]
 80051de:	b9eb      	cbnz	r3, 800521c <_vfiprintf_r+0x78>
 80051e0:	4629      	mov	r1, r5
 80051e2:	4630      	mov	r0, r6
 80051e4:	f7ff faea 	bl	80047bc <__swsetup_r>
 80051e8:	b1c0      	cbz	r0, 800521c <_vfiprintf_r+0x78>
 80051ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80051ec:	07dc      	lsls	r4, r3, #31
 80051ee:	d50e      	bpl.n	800520e <_vfiprintf_r+0x6a>
 80051f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051f4:	b01d      	add	sp, #116	; 0x74
 80051f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051fa:	4b7b      	ldr	r3, [pc, #492]	; (80053e8 <_vfiprintf_r+0x244>)
 80051fc:	429d      	cmp	r5, r3
 80051fe:	d101      	bne.n	8005204 <_vfiprintf_r+0x60>
 8005200:	68b5      	ldr	r5, [r6, #8]
 8005202:	e7df      	b.n	80051c4 <_vfiprintf_r+0x20>
 8005204:	4b79      	ldr	r3, [pc, #484]	; (80053ec <_vfiprintf_r+0x248>)
 8005206:	429d      	cmp	r5, r3
 8005208:	bf08      	it	eq
 800520a:	68f5      	ldreq	r5, [r6, #12]
 800520c:	e7da      	b.n	80051c4 <_vfiprintf_r+0x20>
 800520e:	89ab      	ldrh	r3, [r5, #12]
 8005210:	0598      	lsls	r0, r3, #22
 8005212:	d4ed      	bmi.n	80051f0 <_vfiprintf_r+0x4c>
 8005214:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005216:	f7ff fcf8 	bl	8004c0a <__retarget_lock_release_recursive>
 800521a:	e7e9      	b.n	80051f0 <_vfiprintf_r+0x4c>
 800521c:	2300      	movs	r3, #0
 800521e:	9309      	str	r3, [sp, #36]	; 0x24
 8005220:	2320      	movs	r3, #32
 8005222:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005226:	f8cd 800c 	str.w	r8, [sp, #12]
 800522a:	2330      	movs	r3, #48	; 0x30
 800522c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80053f0 <_vfiprintf_r+0x24c>
 8005230:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005234:	f04f 0901 	mov.w	r9, #1
 8005238:	4623      	mov	r3, r4
 800523a:	469a      	mov	sl, r3
 800523c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005240:	b10a      	cbz	r2, 8005246 <_vfiprintf_r+0xa2>
 8005242:	2a25      	cmp	r2, #37	; 0x25
 8005244:	d1f9      	bne.n	800523a <_vfiprintf_r+0x96>
 8005246:	ebba 0b04 	subs.w	fp, sl, r4
 800524a:	d00b      	beq.n	8005264 <_vfiprintf_r+0xc0>
 800524c:	465b      	mov	r3, fp
 800524e:	4622      	mov	r2, r4
 8005250:	4629      	mov	r1, r5
 8005252:	4630      	mov	r0, r6
 8005254:	f7ff ff93 	bl	800517e <__sfputs_r>
 8005258:	3001      	adds	r0, #1
 800525a:	f000 80aa 	beq.w	80053b2 <_vfiprintf_r+0x20e>
 800525e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005260:	445a      	add	r2, fp
 8005262:	9209      	str	r2, [sp, #36]	; 0x24
 8005264:	f89a 3000 	ldrb.w	r3, [sl]
 8005268:	2b00      	cmp	r3, #0
 800526a:	f000 80a2 	beq.w	80053b2 <_vfiprintf_r+0x20e>
 800526e:	2300      	movs	r3, #0
 8005270:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005274:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005278:	f10a 0a01 	add.w	sl, sl, #1
 800527c:	9304      	str	r3, [sp, #16]
 800527e:	9307      	str	r3, [sp, #28]
 8005280:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005284:	931a      	str	r3, [sp, #104]	; 0x68
 8005286:	4654      	mov	r4, sl
 8005288:	2205      	movs	r2, #5
 800528a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800528e:	4858      	ldr	r0, [pc, #352]	; (80053f0 <_vfiprintf_r+0x24c>)
 8005290:	f7fa ffb6 	bl	8000200 <memchr>
 8005294:	9a04      	ldr	r2, [sp, #16]
 8005296:	b9d8      	cbnz	r0, 80052d0 <_vfiprintf_r+0x12c>
 8005298:	06d1      	lsls	r1, r2, #27
 800529a:	bf44      	itt	mi
 800529c:	2320      	movmi	r3, #32
 800529e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052a2:	0713      	lsls	r3, r2, #28
 80052a4:	bf44      	itt	mi
 80052a6:	232b      	movmi	r3, #43	; 0x2b
 80052a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052ac:	f89a 3000 	ldrb.w	r3, [sl]
 80052b0:	2b2a      	cmp	r3, #42	; 0x2a
 80052b2:	d015      	beq.n	80052e0 <_vfiprintf_r+0x13c>
 80052b4:	9a07      	ldr	r2, [sp, #28]
 80052b6:	4654      	mov	r4, sl
 80052b8:	2000      	movs	r0, #0
 80052ba:	f04f 0c0a 	mov.w	ip, #10
 80052be:	4621      	mov	r1, r4
 80052c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052c4:	3b30      	subs	r3, #48	; 0x30
 80052c6:	2b09      	cmp	r3, #9
 80052c8:	d94e      	bls.n	8005368 <_vfiprintf_r+0x1c4>
 80052ca:	b1b0      	cbz	r0, 80052fa <_vfiprintf_r+0x156>
 80052cc:	9207      	str	r2, [sp, #28]
 80052ce:	e014      	b.n	80052fa <_vfiprintf_r+0x156>
 80052d0:	eba0 0308 	sub.w	r3, r0, r8
 80052d4:	fa09 f303 	lsl.w	r3, r9, r3
 80052d8:	4313      	orrs	r3, r2
 80052da:	9304      	str	r3, [sp, #16]
 80052dc:	46a2      	mov	sl, r4
 80052de:	e7d2      	b.n	8005286 <_vfiprintf_r+0xe2>
 80052e0:	9b03      	ldr	r3, [sp, #12]
 80052e2:	1d19      	adds	r1, r3, #4
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	9103      	str	r1, [sp, #12]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	bfbb      	ittet	lt
 80052ec:	425b      	neglt	r3, r3
 80052ee:	f042 0202 	orrlt.w	r2, r2, #2
 80052f2:	9307      	strge	r3, [sp, #28]
 80052f4:	9307      	strlt	r3, [sp, #28]
 80052f6:	bfb8      	it	lt
 80052f8:	9204      	strlt	r2, [sp, #16]
 80052fa:	7823      	ldrb	r3, [r4, #0]
 80052fc:	2b2e      	cmp	r3, #46	; 0x2e
 80052fe:	d10c      	bne.n	800531a <_vfiprintf_r+0x176>
 8005300:	7863      	ldrb	r3, [r4, #1]
 8005302:	2b2a      	cmp	r3, #42	; 0x2a
 8005304:	d135      	bne.n	8005372 <_vfiprintf_r+0x1ce>
 8005306:	9b03      	ldr	r3, [sp, #12]
 8005308:	1d1a      	adds	r2, r3, #4
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	9203      	str	r2, [sp, #12]
 800530e:	2b00      	cmp	r3, #0
 8005310:	bfb8      	it	lt
 8005312:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005316:	3402      	adds	r4, #2
 8005318:	9305      	str	r3, [sp, #20]
 800531a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005400 <_vfiprintf_r+0x25c>
 800531e:	7821      	ldrb	r1, [r4, #0]
 8005320:	2203      	movs	r2, #3
 8005322:	4650      	mov	r0, sl
 8005324:	f7fa ff6c 	bl	8000200 <memchr>
 8005328:	b140      	cbz	r0, 800533c <_vfiprintf_r+0x198>
 800532a:	2340      	movs	r3, #64	; 0x40
 800532c:	eba0 000a 	sub.w	r0, r0, sl
 8005330:	fa03 f000 	lsl.w	r0, r3, r0
 8005334:	9b04      	ldr	r3, [sp, #16]
 8005336:	4303      	orrs	r3, r0
 8005338:	3401      	adds	r4, #1
 800533a:	9304      	str	r3, [sp, #16]
 800533c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005340:	482c      	ldr	r0, [pc, #176]	; (80053f4 <_vfiprintf_r+0x250>)
 8005342:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005346:	2206      	movs	r2, #6
 8005348:	f7fa ff5a 	bl	8000200 <memchr>
 800534c:	2800      	cmp	r0, #0
 800534e:	d03f      	beq.n	80053d0 <_vfiprintf_r+0x22c>
 8005350:	4b29      	ldr	r3, [pc, #164]	; (80053f8 <_vfiprintf_r+0x254>)
 8005352:	bb1b      	cbnz	r3, 800539c <_vfiprintf_r+0x1f8>
 8005354:	9b03      	ldr	r3, [sp, #12]
 8005356:	3307      	adds	r3, #7
 8005358:	f023 0307 	bic.w	r3, r3, #7
 800535c:	3308      	adds	r3, #8
 800535e:	9303      	str	r3, [sp, #12]
 8005360:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005362:	443b      	add	r3, r7
 8005364:	9309      	str	r3, [sp, #36]	; 0x24
 8005366:	e767      	b.n	8005238 <_vfiprintf_r+0x94>
 8005368:	fb0c 3202 	mla	r2, ip, r2, r3
 800536c:	460c      	mov	r4, r1
 800536e:	2001      	movs	r0, #1
 8005370:	e7a5      	b.n	80052be <_vfiprintf_r+0x11a>
 8005372:	2300      	movs	r3, #0
 8005374:	3401      	adds	r4, #1
 8005376:	9305      	str	r3, [sp, #20]
 8005378:	4619      	mov	r1, r3
 800537a:	f04f 0c0a 	mov.w	ip, #10
 800537e:	4620      	mov	r0, r4
 8005380:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005384:	3a30      	subs	r2, #48	; 0x30
 8005386:	2a09      	cmp	r2, #9
 8005388:	d903      	bls.n	8005392 <_vfiprintf_r+0x1ee>
 800538a:	2b00      	cmp	r3, #0
 800538c:	d0c5      	beq.n	800531a <_vfiprintf_r+0x176>
 800538e:	9105      	str	r1, [sp, #20]
 8005390:	e7c3      	b.n	800531a <_vfiprintf_r+0x176>
 8005392:	fb0c 2101 	mla	r1, ip, r1, r2
 8005396:	4604      	mov	r4, r0
 8005398:	2301      	movs	r3, #1
 800539a:	e7f0      	b.n	800537e <_vfiprintf_r+0x1da>
 800539c:	ab03      	add	r3, sp, #12
 800539e:	9300      	str	r3, [sp, #0]
 80053a0:	462a      	mov	r2, r5
 80053a2:	4b16      	ldr	r3, [pc, #88]	; (80053fc <_vfiprintf_r+0x258>)
 80053a4:	a904      	add	r1, sp, #16
 80053a6:	4630      	mov	r0, r6
 80053a8:	f3af 8000 	nop.w
 80053ac:	4607      	mov	r7, r0
 80053ae:	1c78      	adds	r0, r7, #1
 80053b0:	d1d6      	bne.n	8005360 <_vfiprintf_r+0x1bc>
 80053b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80053b4:	07d9      	lsls	r1, r3, #31
 80053b6:	d405      	bmi.n	80053c4 <_vfiprintf_r+0x220>
 80053b8:	89ab      	ldrh	r3, [r5, #12]
 80053ba:	059a      	lsls	r2, r3, #22
 80053bc:	d402      	bmi.n	80053c4 <_vfiprintf_r+0x220>
 80053be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80053c0:	f7ff fc23 	bl	8004c0a <__retarget_lock_release_recursive>
 80053c4:	89ab      	ldrh	r3, [r5, #12]
 80053c6:	065b      	lsls	r3, r3, #25
 80053c8:	f53f af12 	bmi.w	80051f0 <_vfiprintf_r+0x4c>
 80053cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80053ce:	e711      	b.n	80051f4 <_vfiprintf_r+0x50>
 80053d0:	ab03      	add	r3, sp, #12
 80053d2:	9300      	str	r3, [sp, #0]
 80053d4:	462a      	mov	r2, r5
 80053d6:	4b09      	ldr	r3, [pc, #36]	; (80053fc <_vfiprintf_r+0x258>)
 80053d8:	a904      	add	r1, sp, #16
 80053da:	4630      	mov	r0, r6
 80053dc:	f000 f880 	bl	80054e0 <_printf_i>
 80053e0:	e7e4      	b.n	80053ac <_vfiprintf_r+0x208>
 80053e2:	bf00      	nop
 80053e4:	08005a68 	.word	0x08005a68
 80053e8:	08005a88 	.word	0x08005a88
 80053ec:	08005a48 	.word	0x08005a48
 80053f0:	08005aa8 	.word	0x08005aa8
 80053f4:	08005ab2 	.word	0x08005ab2
 80053f8:	00000000 	.word	0x00000000
 80053fc:	0800517f 	.word	0x0800517f
 8005400:	08005aae 	.word	0x08005aae

08005404 <_printf_common>:
 8005404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005408:	4616      	mov	r6, r2
 800540a:	4699      	mov	r9, r3
 800540c:	688a      	ldr	r2, [r1, #8]
 800540e:	690b      	ldr	r3, [r1, #16]
 8005410:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005414:	4293      	cmp	r3, r2
 8005416:	bfb8      	it	lt
 8005418:	4613      	movlt	r3, r2
 800541a:	6033      	str	r3, [r6, #0]
 800541c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005420:	4607      	mov	r7, r0
 8005422:	460c      	mov	r4, r1
 8005424:	b10a      	cbz	r2, 800542a <_printf_common+0x26>
 8005426:	3301      	adds	r3, #1
 8005428:	6033      	str	r3, [r6, #0]
 800542a:	6823      	ldr	r3, [r4, #0]
 800542c:	0699      	lsls	r1, r3, #26
 800542e:	bf42      	ittt	mi
 8005430:	6833      	ldrmi	r3, [r6, #0]
 8005432:	3302      	addmi	r3, #2
 8005434:	6033      	strmi	r3, [r6, #0]
 8005436:	6825      	ldr	r5, [r4, #0]
 8005438:	f015 0506 	ands.w	r5, r5, #6
 800543c:	d106      	bne.n	800544c <_printf_common+0x48>
 800543e:	f104 0a19 	add.w	sl, r4, #25
 8005442:	68e3      	ldr	r3, [r4, #12]
 8005444:	6832      	ldr	r2, [r6, #0]
 8005446:	1a9b      	subs	r3, r3, r2
 8005448:	42ab      	cmp	r3, r5
 800544a:	dc26      	bgt.n	800549a <_printf_common+0x96>
 800544c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005450:	1e13      	subs	r3, r2, #0
 8005452:	6822      	ldr	r2, [r4, #0]
 8005454:	bf18      	it	ne
 8005456:	2301      	movne	r3, #1
 8005458:	0692      	lsls	r2, r2, #26
 800545a:	d42b      	bmi.n	80054b4 <_printf_common+0xb0>
 800545c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005460:	4649      	mov	r1, r9
 8005462:	4638      	mov	r0, r7
 8005464:	47c0      	blx	r8
 8005466:	3001      	adds	r0, #1
 8005468:	d01e      	beq.n	80054a8 <_printf_common+0xa4>
 800546a:	6823      	ldr	r3, [r4, #0]
 800546c:	68e5      	ldr	r5, [r4, #12]
 800546e:	6832      	ldr	r2, [r6, #0]
 8005470:	f003 0306 	and.w	r3, r3, #6
 8005474:	2b04      	cmp	r3, #4
 8005476:	bf08      	it	eq
 8005478:	1aad      	subeq	r5, r5, r2
 800547a:	68a3      	ldr	r3, [r4, #8]
 800547c:	6922      	ldr	r2, [r4, #16]
 800547e:	bf0c      	ite	eq
 8005480:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005484:	2500      	movne	r5, #0
 8005486:	4293      	cmp	r3, r2
 8005488:	bfc4      	itt	gt
 800548a:	1a9b      	subgt	r3, r3, r2
 800548c:	18ed      	addgt	r5, r5, r3
 800548e:	2600      	movs	r6, #0
 8005490:	341a      	adds	r4, #26
 8005492:	42b5      	cmp	r5, r6
 8005494:	d11a      	bne.n	80054cc <_printf_common+0xc8>
 8005496:	2000      	movs	r0, #0
 8005498:	e008      	b.n	80054ac <_printf_common+0xa8>
 800549a:	2301      	movs	r3, #1
 800549c:	4652      	mov	r2, sl
 800549e:	4649      	mov	r1, r9
 80054a0:	4638      	mov	r0, r7
 80054a2:	47c0      	blx	r8
 80054a4:	3001      	adds	r0, #1
 80054a6:	d103      	bne.n	80054b0 <_printf_common+0xac>
 80054a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054b0:	3501      	adds	r5, #1
 80054b2:	e7c6      	b.n	8005442 <_printf_common+0x3e>
 80054b4:	18e1      	adds	r1, r4, r3
 80054b6:	1c5a      	adds	r2, r3, #1
 80054b8:	2030      	movs	r0, #48	; 0x30
 80054ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80054be:	4422      	add	r2, r4
 80054c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80054c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80054c8:	3302      	adds	r3, #2
 80054ca:	e7c7      	b.n	800545c <_printf_common+0x58>
 80054cc:	2301      	movs	r3, #1
 80054ce:	4622      	mov	r2, r4
 80054d0:	4649      	mov	r1, r9
 80054d2:	4638      	mov	r0, r7
 80054d4:	47c0      	blx	r8
 80054d6:	3001      	adds	r0, #1
 80054d8:	d0e6      	beq.n	80054a8 <_printf_common+0xa4>
 80054da:	3601      	adds	r6, #1
 80054dc:	e7d9      	b.n	8005492 <_printf_common+0x8e>
	...

080054e0 <_printf_i>:
 80054e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054e4:	7e0f      	ldrb	r7, [r1, #24]
 80054e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80054e8:	2f78      	cmp	r7, #120	; 0x78
 80054ea:	4691      	mov	r9, r2
 80054ec:	4680      	mov	r8, r0
 80054ee:	460c      	mov	r4, r1
 80054f0:	469a      	mov	sl, r3
 80054f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80054f6:	d807      	bhi.n	8005508 <_printf_i+0x28>
 80054f8:	2f62      	cmp	r7, #98	; 0x62
 80054fa:	d80a      	bhi.n	8005512 <_printf_i+0x32>
 80054fc:	2f00      	cmp	r7, #0
 80054fe:	f000 80d8 	beq.w	80056b2 <_printf_i+0x1d2>
 8005502:	2f58      	cmp	r7, #88	; 0x58
 8005504:	f000 80a3 	beq.w	800564e <_printf_i+0x16e>
 8005508:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800550c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005510:	e03a      	b.n	8005588 <_printf_i+0xa8>
 8005512:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005516:	2b15      	cmp	r3, #21
 8005518:	d8f6      	bhi.n	8005508 <_printf_i+0x28>
 800551a:	a101      	add	r1, pc, #4	; (adr r1, 8005520 <_printf_i+0x40>)
 800551c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005520:	08005579 	.word	0x08005579
 8005524:	0800558d 	.word	0x0800558d
 8005528:	08005509 	.word	0x08005509
 800552c:	08005509 	.word	0x08005509
 8005530:	08005509 	.word	0x08005509
 8005534:	08005509 	.word	0x08005509
 8005538:	0800558d 	.word	0x0800558d
 800553c:	08005509 	.word	0x08005509
 8005540:	08005509 	.word	0x08005509
 8005544:	08005509 	.word	0x08005509
 8005548:	08005509 	.word	0x08005509
 800554c:	08005699 	.word	0x08005699
 8005550:	080055bd 	.word	0x080055bd
 8005554:	0800567b 	.word	0x0800567b
 8005558:	08005509 	.word	0x08005509
 800555c:	08005509 	.word	0x08005509
 8005560:	080056bb 	.word	0x080056bb
 8005564:	08005509 	.word	0x08005509
 8005568:	080055bd 	.word	0x080055bd
 800556c:	08005509 	.word	0x08005509
 8005570:	08005509 	.word	0x08005509
 8005574:	08005683 	.word	0x08005683
 8005578:	682b      	ldr	r3, [r5, #0]
 800557a:	1d1a      	adds	r2, r3, #4
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	602a      	str	r2, [r5, #0]
 8005580:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005584:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005588:	2301      	movs	r3, #1
 800558a:	e0a3      	b.n	80056d4 <_printf_i+0x1f4>
 800558c:	6820      	ldr	r0, [r4, #0]
 800558e:	6829      	ldr	r1, [r5, #0]
 8005590:	0606      	lsls	r6, r0, #24
 8005592:	f101 0304 	add.w	r3, r1, #4
 8005596:	d50a      	bpl.n	80055ae <_printf_i+0xce>
 8005598:	680e      	ldr	r6, [r1, #0]
 800559a:	602b      	str	r3, [r5, #0]
 800559c:	2e00      	cmp	r6, #0
 800559e:	da03      	bge.n	80055a8 <_printf_i+0xc8>
 80055a0:	232d      	movs	r3, #45	; 0x2d
 80055a2:	4276      	negs	r6, r6
 80055a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055a8:	485e      	ldr	r0, [pc, #376]	; (8005724 <_printf_i+0x244>)
 80055aa:	230a      	movs	r3, #10
 80055ac:	e019      	b.n	80055e2 <_printf_i+0x102>
 80055ae:	680e      	ldr	r6, [r1, #0]
 80055b0:	602b      	str	r3, [r5, #0]
 80055b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80055b6:	bf18      	it	ne
 80055b8:	b236      	sxthne	r6, r6
 80055ba:	e7ef      	b.n	800559c <_printf_i+0xbc>
 80055bc:	682b      	ldr	r3, [r5, #0]
 80055be:	6820      	ldr	r0, [r4, #0]
 80055c0:	1d19      	adds	r1, r3, #4
 80055c2:	6029      	str	r1, [r5, #0]
 80055c4:	0601      	lsls	r1, r0, #24
 80055c6:	d501      	bpl.n	80055cc <_printf_i+0xec>
 80055c8:	681e      	ldr	r6, [r3, #0]
 80055ca:	e002      	b.n	80055d2 <_printf_i+0xf2>
 80055cc:	0646      	lsls	r6, r0, #25
 80055ce:	d5fb      	bpl.n	80055c8 <_printf_i+0xe8>
 80055d0:	881e      	ldrh	r6, [r3, #0]
 80055d2:	4854      	ldr	r0, [pc, #336]	; (8005724 <_printf_i+0x244>)
 80055d4:	2f6f      	cmp	r7, #111	; 0x6f
 80055d6:	bf0c      	ite	eq
 80055d8:	2308      	moveq	r3, #8
 80055da:	230a      	movne	r3, #10
 80055dc:	2100      	movs	r1, #0
 80055de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80055e2:	6865      	ldr	r5, [r4, #4]
 80055e4:	60a5      	str	r5, [r4, #8]
 80055e6:	2d00      	cmp	r5, #0
 80055e8:	bfa2      	ittt	ge
 80055ea:	6821      	ldrge	r1, [r4, #0]
 80055ec:	f021 0104 	bicge.w	r1, r1, #4
 80055f0:	6021      	strge	r1, [r4, #0]
 80055f2:	b90e      	cbnz	r6, 80055f8 <_printf_i+0x118>
 80055f4:	2d00      	cmp	r5, #0
 80055f6:	d04d      	beq.n	8005694 <_printf_i+0x1b4>
 80055f8:	4615      	mov	r5, r2
 80055fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80055fe:	fb03 6711 	mls	r7, r3, r1, r6
 8005602:	5dc7      	ldrb	r7, [r0, r7]
 8005604:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005608:	4637      	mov	r7, r6
 800560a:	42bb      	cmp	r3, r7
 800560c:	460e      	mov	r6, r1
 800560e:	d9f4      	bls.n	80055fa <_printf_i+0x11a>
 8005610:	2b08      	cmp	r3, #8
 8005612:	d10b      	bne.n	800562c <_printf_i+0x14c>
 8005614:	6823      	ldr	r3, [r4, #0]
 8005616:	07de      	lsls	r6, r3, #31
 8005618:	d508      	bpl.n	800562c <_printf_i+0x14c>
 800561a:	6923      	ldr	r3, [r4, #16]
 800561c:	6861      	ldr	r1, [r4, #4]
 800561e:	4299      	cmp	r1, r3
 8005620:	bfde      	ittt	le
 8005622:	2330      	movle	r3, #48	; 0x30
 8005624:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005628:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800562c:	1b52      	subs	r2, r2, r5
 800562e:	6122      	str	r2, [r4, #16]
 8005630:	f8cd a000 	str.w	sl, [sp]
 8005634:	464b      	mov	r3, r9
 8005636:	aa03      	add	r2, sp, #12
 8005638:	4621      	mov	r1, r4
 800563a:	4640      	mov	r0, r8
 800563c:	f7ff fee2 	bl	8005404 <_printf_common>
 8005640:	3001      	adds	r0, #1
 8005642:	d14c      	bne.n	80056de <_printf_i+0x1fe>
 8005644:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005648:	b004      	add	sp, #16
 800564a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800564e:	4835      	ldr	r0, [pc, #212]	; (8005724 <_printf_i+0x244>)
 8005650:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005654:	6829      	ldr	r1, [r5, #0]
 8005656:	6823      	ldr	r3, [r4, #0]
 8005658:	f851 6b04 	ldr.w	r6, [r1], #4
 800565c:	6029      	str	r1, [r5, #0]
 800565e:	061d      	lsls	r5, r3, #24
 8005660:	d514      	bpl.n	800568c <_printf_i+0x1ac>
 8005662:	07df      	lsls	r7, r3, #31
 8005664:	bf44      	itt	mi
 8005666:	f043 0320 	orrmi.w	r3, r3, #32
 800566a:	6023      	strmi	r3, [r4, #0]
 800566c:	b91e      	cbnz	r6, 8005676 <_printf_i+0x196>
 800566e:	6823      	ldr	r3, [r4, #0]
 8005670:	f023 0320 	bic.w	r3, r3, #32
 8005674:	6023      	str	r3, [r4, #0]
 8005676:	2310      	movs	r3, #16
 8005678:	e7b0      	b.n	80055dc <_printf_i+0xfc>
 800567a:	6823      	ldr	r3, [r4, #0]
 800567c:	f043 0320 	orr.w	r3, r3, #32
 8005680:	6023      	str	r3, [r4, #0]
 8005682:	2378      	movs	r3, #120	; 0x78
 8005684:	4828      	ldr	r0, [pc, #160]	; (8005728 <_printf_i+0x248>)
 8005686:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800568a:	e7e3      	b.n	8005654 <_printf_i+0x174>
 800568c:	0659      	lsls	r1, r3, #25
 800568e:	bf48      	it	mi
 8005690:	b2b6      	uxthmi	r6, r6
 8005692:	e7e6      	b.n	8005662 <_printf_i+0x182>
 8005694:	4615      	mov	r5, r2
 8005696:	e7bb      	b.n	8005610 <_printf_i+0x130>
 8005698:	682b      	ldr	r3, [r5, #0]
 800569a:	6826      	ldr	r6, [r4, #0]
 800569c:	6961      	ldr	r1, [r4, #20]
 800569e:	1d18      	adds	r0, r3, #4
 80056a0:	6028      	str	r0, [r5, #0]
 80056a2:	0635      	lsls	r5, r6, #24
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	d501      	bpl.n	80056ac <_printf_i+0x1cc>
 80056a8:	6019      	str	r1, [r3, #0]
 80056aa:	e002      	b.n	80056b2 <_printf_i+0x1d2>
 80056ac:	0670      	lsls	r0, r6, #25
 80056ae:	d5fb      	bpl.n	80056a8 <_printf_i+0x1c8>
 80056b0:	8019      	strh	r1, [r3, #0]
 80056b2:	2300      	movs	r3, #0
 80056b4:	6123      	str	r3, [r4, #16]
 80056b6:	4615      	mov	r5, r2
 80056b8:	e7ba      	b.n	8005630 <_printf_i+0x150>
 80056ba:	682b      	ldr	r3, [r5, #0]
 80056bc:	1d1a      	adds	r2, r3, #4
 80056be:	602a      	str	r2, [r5, #0]
 80056c0:	681d      	ldr	r5, [r3, #0]
 80056c2:	6862      	ldr	r2, [r4, #4]
 80056c4:	2100      	movs	r1, #0
 80056c6:	4628      	mov	r0, r5
 80056c8:	f7fa fd9a 	bl	8000200 <memchr>
 80056cc:	b108      	cbz	r0, 80056d2 <_printf_i+0x1f2>
 80056ce:	1b40      	subs	r0, r0, r5
 80056d0:	6060      	str	r0, [r4, #4]
 80056d2:	6863      	ldr	r3, [r4, #4]
 80056d4:	6123      	str	r3, [r4, #16]
 80056d6:	2300      	movs	r3, #0
 80056d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056dc:	e7a8      	b.n	8005630 <_printf_i+0x150>
 80056de:	6923      	ldr	r3, [r4, #16]
 80056e0:	462a      	mov	r2, r5
 80056e2:	4649      	mov	r1, r9
 80056e4:	4640      	mov	r0, r8
 80056e6:	47d0      	blx	sl
 80056e8:	3001      	adds	r0, #1
 80056ea:	d0ab      	beq.n	8005644 <_printf_i+0x164>
 80056ec:	6823      	ldr	r3, [r4, #0]
 80056ee:	079b      	lsls	r3, r3, #30
 80056f0:	d413      	bmi.n	800571a <_printf_i+0x23a>
 80056f2:	68e0      	ldr	r0, [r4, #12]
 80056f4:	9b03      	ldr	r3, [sp, #12]
 80056f6:	4298      	cmp	r0, r3
 80056f8:	bfb8      	it	lt
 80056fa:	4618      	movlt	r0, r3
 80056fc:	e7a4      	b.n	8005648 <_printf_i+0x168>
 80056fe:	2301      	movs	r3, #1
 8005700:	4632      	mov	r2, r6
 8005702:	4649      	mov	r1, r9
 8005704:	4640      	mov	r0, r8
 8005706:	47d0      	blx	sl
 8005708:	3001      	adds	r0, #1
 800570a:	d09b      	beq.n	8005644 <_printf_i+0x164>
 800570c:	3501      	adds	r5, #1
 800570e:	68e3      	ldr	r3, [r4, #12]
 8005710:	9903      	ldr	r1, [sp, #12]
 8005712:	1a5b      	subs	r3, r3, r1
 8005714:	42ab      	cmp	r3, r5
 8005716:	dcf2      	bgt.n	80056fe <_printf_i+0x21e>
 8005718:	e7eb      	b.n	80056f2 <_printf_i+0x212>
 800571a:	2500      	movs	r5, #0
 800571c:	f104 0619 	add.w	r6, r4, #25
 8005720:	e7f5      	b.n	800570e <_printf_i+0x22e>
 8005722:	bf00      	nop
 8005724:	08005ab9 	.word	0x08005ab9
 8005728:	08005aca 	.word	0x08005aca

0800572c <_sbrk_r>:
 800572c:	b538      	push	{r3, r4, r5, lr}
 800572e:	4d06      	ldr	r5, [pc, #24]	; (8005748 <_sbrk_r+0x1c>)
 8005730:	2300      	movs	r3, #0
 8005732:	4604      	mov	r4, r0
 8005734:	4608      	mov	r0, r1
 8005736:	602b      	str	r3, [r5, #0]
 8005738:	f7fb fc88 	bl	800104c <_sbrk>
 800573c:	1c43      	adds	r3, r0, #1
 800573e:	d102      	bne.n	8005746 <_sbrk_r+0x1a>
 8005740:	682b      	ldr	r3, [r5, #0]
 8005742:	b103      	cbz	r3, 8005746 <_sbrk_r+0x1a>
 8005744:	6023      	str	r3, [r4, #0]
 8005746:	bd38      	pop	{r3, r4, r5, pc}
 8005748:	2000022c 	.word	0x2000022c

0800574c <__sread>:
 800574c:	b510      	push	{r4, lr}
 800574e:	460c      	mov	r4, r1
 8005750:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005754:	f000 f8f8 	bl	8005948 <_read_r>
 8005758:	2800      	cmp	r0, #0
 800575a:	bfab      	itete	ge
 800575c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800575e:	89a3      	ldrhlt	r3, [r4, #12]
 8005760:	181b      	addge	r3, r3, r0
 8005762:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005766:	bfac      	ite	ge
 8005768:	6563      	strge	r3, [r4, #84]	; 0x54
 800576a:	81a3      	strhlt	r3, [r4, #12]
 800576c:	bd10      	pop	{r4, pc}

0800576e <__swrite>:
 800576e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005772:	461f      	mov	r7, r3
 8005774:	898b      	ldrh	r3, [r1, #12]
 8005776:	05db      	lsls	r3, r3, #23
 8005778:	4605      	mov	r5, r0
 800577a:	460c      	mov	r4, r1
 800577c:	4616      	mov	r6, r2
 800577e:	d505      	bpl.n	800578c <__swrite+0x1e>
 8005780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005784:	2302      	movs	r3, #2
 8005786:	2200      	movs	r2, #0
 8005788:	f000 f868 	bl	800585c <_lseek_r>
 800578c:	89a3      	ldrh	r3, [r4, #12]
 800578e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005792:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005796:	81a3      	strh	r3, [r4, #12]
 8005798:	4632      	mov	r2, r6
 800579a:	463b      	mov	r3, r7
 800579c:	4628      	mov	r0, r5
 800579e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057a2:	f000 b817 	b.w	80057d4 <_write_r>

080057a6 <__sseek>:
 80057a6:	b510      	push	{r4, lr}
 80057a8:	460c      	mov	r4, r1
 80057aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057ae:	f000 f855 	bl	800585c <_lseek_r>
 80057b2:	1c43      	adds	r3, r0, #1
 80057b4:	89a3      	ldrh	r3, [r4, #12]
 80057b6:	bf15      	itete	ne
 80057b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80057ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80057be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80057c2:	81a3      	strheq	r3, [r4, #12]
 80057c4:	bf18      	it	ne
 80057c6:	81a3      	strhne	r3, [r4, #12]
 80057c8:	bd10      	pop	{r4, pc}

080057ca <__sclose>:
 80057ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057ce:	f000 b813 	b.w	80057f8 <_close_r>
	...

080057d4 <_write_r>:
 80057d4:	b538      	push	{r3, r4, r5, lr}
 80057d6:	4d07      	ldr	r5, [pc, #28]	; (80057f4 <_write_r+0x20>)
 80057d8:	4604      	mov	r4, r0
 80057da:	4608      	mov	r0, r1
 80057dc:	4611      	mov	r1, r2
 80057de:	2200      	movs	r2, #0
 80057e0:	602a      	str	r2, [r5, #0]
 80057e2:	461a      	mov	r2, r3
 80057e4:	f7fb fbe8 	bl	8000fb8 <_write>
 80057e8:	1c43      	adds	r3, r0, #1
 80057ea:	d102      	bne.n	80057f2 <_write_r+0x1e>
 80057ec:	682b      	ldr	r3, [r5, #0]
 80057ee:	b103      	cbz	r3, 80057f2 <_write_r+0x1e>
 80057f0:	6023      	str	r3, [r4, #0]
 80057f2:	bd38      	pop	{r3, r4, r5, pc}
 80057f4:	2000022c 	.word	0x2000022c

080057f8 <_close_r>:
 80057f8:	b538      	push	{r3, r4, r5, lr}
 80057fa:	4d06      	ldr	r5, [pc, #24]	; (8005814 <_close_r+0x1c>)
 80057fc:	2300      	movs	r3, #0
 80057fe:	4604      	mov	r4, r0
 8005800:	4608      	mov	r0, r1
 8005802:	602b      	str	r3, [r5, #0]
 8005804:	f7fb fbee 	bl	8000fe4 <_close>
 8005808:	1c43      	adds	r3, r0, #1
 800580a:	d102      	bne.n	8005812 <_close_r+0x1a>
 800580c:	682b      	ldr	r3, [r5, #0]
 800580e:	b103      	cbz	r3, 8005812 <_close_r+0x1a>
 8005810:	6023      	str	r3, [r4, #0]
 8005812:	bd38      	pop	{r3, r4, r5, pc}
 8005814:	2000022c 	.word	0x2000022c

08005818 <_fstat_r>:
 8005818:	b538      	push	{r3, r4, r5, lr}
 800581a:	4d07      	ldr	r5, [pc, #28]	; (8005838 <_fstat_r+0x20>)
 800581c:	2300      	movs	r3, #0
 800581e:	4604      	mov	r4, r0
 8005820:	4608      	mov	r0, r1
 8005822:	4611      	mov	r1, r2
 8005824:	602b      	str	r3, [r5, #0]
 8005826:	f7fb fbe9 	bl	8000ffc <_fstat>
 800582a:	1c43      	adds	r3, r0, #1
 800582c:	d102      	bne.n	8005834 <_fstat_r+0x1c>
 800582e:	682b      	ldr	r3, [r5, #0]
 8005830:	b103      	cbz	r3, 8005834 <_fstat_r+0x1c>
 8005832:	6023      	str	r3, [r4, #0]
 8005834:	bd38      	pop	{r3, r4, r5, pc}
 8005836:	bf00      	nop
 8005838:	2000022c 	.word	0x2000022c

0800583c <_isatty_r>:
 800583c:	b538      	push	{r3, r4, r5, lr}
 800583e:	4d06      	ldr	r5, [pc, #24]	; (8005858 <_isatty_r+0x1c>)
 8005840:	2300      	movs	r3, #0
 8005842:	4604      	mov	r4, r0
 8005844:	4608      	mov	r0, r1
 8005846:	602b      	str	r3, [r5, #0]
 8005848:	f7fb fbe8 	bl	800101c <_isatty>
 800584c:	1c43      	adds	r3, r0, #1
 800584e:	d102      	bne.n	8005856 <_isatty_r+0x1a>
 8005850:	682b      	ldr	r3, [r5, #0]
 8005852:	b103      	cbz	r3, 8005856 <_isatty_r+0x1a>
 8005854:	6023      	str	r3, [r4, #0]
 8005856:	bd38      	pop	{r3, r4, r5, pc}
 8005858:	2000022c 	.word	0x2000022c

0800585c <_lseek_r>:
 800585c:	b538      	push	{r3, r4, r5, lr}
 800585e:	4d07      	ldr	r5, [pc, #28]	; (800587c <_lseek_r+0x20>)
 8005860:	4604      	mov	r4, r0
 8005862:	4608      	mov	r0, r1
 8005864:	4611      	mov	r1, r2
 8005866:	2200      	movs	r2, #0
 8005868:	602a      	str	r2, [r5, #0]
 800586a:	461a      	mov	r2, r3
 800586c:	f7fb fbe1 	bl	8001032 <_lseek>
 8005870:	1c43      	adds	r3, r0, #1
 8005872:	d102      	bne.n	800587a <_lseek_r+0x1e>
 8005874:	682b      	ldr	r3, [r5, #0]
 8005876:	b103      	cbz	r3, 800587a <_lseek_r+0x1e>
 8005878:	6023      	str	r3, [r4, #0]
 800587a:	bd38      	pop	{r3, r4, r5, pc}
 800587c:	2000022c 	.word	0x2000022c

08005880 <memcpy>:
 8005880:	440a      	add	r2, r1
 8005882:	4291      	cmp	r1, r2
 8005884:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005888:	d100      	bne.n	800588c <memcpy+0xc>
 800588a:	4770      	bx	lr
 800588c:	b510      	push	{r4, lr}
 800588e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005892:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005896:	4291      	cmp	r1, r2
 8005898:	d1f9      	bne.n	800588e <memcpy+0xe>
 800589a:	bd10      	pop	{r4, pc}

0800589c <memmove>:
 800589c:	4288      	cmp	r0, r1
 800589e:	b510      	push	{r4, lr}
 80058a0:	eb01 0402 	add.w	r4, r1, r2
 80058a4:	d902      	bls.n	80058ac <memmove+0x10>
 80058a6:	4284      	cmp	r4, r0
 80058a8:	4623      	mov	r3, r4
 80058aa:	d807      	bhi.n	80058bc <memmove+0x20>
 80058ac:	1e43      	subs	r3, r0, #1
 80058ae:	42a1      	cmp	r1, r4
 80058b0:	d008      	beq.n	80058c4 <memmove+0x28>
 80058b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80058b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80058ba:	e7f8      	b.n	80058ae <memmove+0x12>
 80058bc:	4402      	add	r2, r0
 80058be:	4601      	mov	r1, r0
 80058c0:	428a      	cmp	r2, r1
 80058c2:	d100      	bne.n	80058c6 <memmove+0x2a>
 80058c4:	bd10      	pop	{r4, pc}
 80058c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80058ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80058ce:	e7f7      	b.n	80058c0 <memmove+0x24>

080058d0 <__malloc_lock>:
 80058d0:	4801      	ldr	r0, [pc, #4]	; (80058d8 <__malloc_lock+0x8>)
 80058d2:	f7ff b999 	b.w	8004c08 <__retarget_lock_acquire_recursive>
 80058d6:	bf00      	nop
 80058d8:	20000220 	.word	0x20000220

080058dc <__malloc_unlock>:
 80058dc:	4801      	ldr	r0, [pc, #4]	; (80058e4 <__malloc_unlock+0x8>)
 80058de:	f7ff b994 	b.w	8004c0a <__retarget_lock_release_recursive>
 80058e2:	bf00      	nop
 80058e4:	20000220 	.word	0x20000220

080058e8 <_realloc_r>:
 80058e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058ec:	4680      	mov	r8, r0
 80058ee:	4614      	mov	r4, r2
 80058f0:	460e      	mov	r6, r1
 80058f2:	b921      	cbnz	r1, 80058fe <_realloc_r+0x16>
 80058f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058f8:	4611      	mov	r1, r2
 80058fa:	f7ff ba59 	b.w	8004db0 <_malloc_r>
 80058fe:	b92a      	cbnz	r2, 800590c <_realloc_r+0x24>
 8005900:	f7ff f9ea 	bl	8004cd8 <_free_r>
 8005904:	4625      	mov	r5, r4
 8005906:	4628      	mov	r0, r5
 8005908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800590c:	f000 f82e 	bl	800596c <_malloc_usable_size_r>
 8005910:	4284      	cmp	r4, r0
 8005912:	4607      	mov	r7, r0
 8005914:	d802      	bhi.n	800591c <_realloc_r+0x34>
 8005916:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800591a:	d812      	bhi.n	8005942 <_realloc_r+0x5a>
 800591c:	4621      	mov	r1, r4
 800591e:	4640      	mov	r0, r8
 8005920:	f7ff fa46 	bl	8004db0 <_malloc_r>
 8005924:	4605      	mov	r5, r0
 8005926:	2800      	cmp	r0, #0
 8005928:	d0ed      	beq.n	8005906 <_realloc_r+0x1e>
 800592a:	42bc      	cmp	r4, r7
 800592c:	4622      	mov	r2, r4
 800592e:	4631      	mov	r1, r6
 8005930:	bf28      	it	cs
 8005932:	463a      	movcs	r2, r7
 8005934:	f7ff ffa4 	bl	8005880 <memcpy>
 8005938:	4631      	mov	r1, r6
 800593a:	4640      	mov	r0, r8
 800593c:	f7ff f9cc 	bl	8004cd8 <_free_r>
 8005940:	e7e1      	b.n	8005906 <_realloc_r+0x1e>
 8005942:	4635      	mov	r5, r6
 8005944:	e7df      	b.n	8005906 <_realloc_r+0x1e>
	...

08005948 <_read_r>:
 8005948:	b538      	push	{r3, r4, r5, lr}
 800594a:	4d07      	ldr	r5, [pc, #28]	; (8005968 <_read_r+0x20>)
 800594c:	4604      	mov	r4, r0
 800594e:	4608      	mov	r0, r1
 8005950:	4611      	mov	r1, r2
 8005952:	2200      	movs	r2, #0
 8005954:	602a      	str	r2, [r5, #0]
 8005956:	461a      	mov	r2, r3
 8005958:	f7fb fb10 	bl	8000f7c <_read>
 800595c:	1c43      	adds	r3, r0, #1
 800595e:	d102      	bne.n	8005966 <_read_r+0x1e>
 8005960:	682b      	ldr	r3, [r5, #0]
 8005962:	b103      	cbz	r3, 8005966 <_read_r+0x1e>
 8005964:	6023      	str	r3, [r4, #0]
 8005966:	bd38      	pop	{r3, r4, r5, pc}
 8005968:	2000022c 	.word	0x2000022c

0800596c <_malloc_usable_size_r>:
 800596c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005970:	1f18      	subs	r0, r3, #4
 8005972:	2b00      	cmp	r3, #0
 8005974:	bfbc      	itt	lt
 8005976:	580b      	ldrlt	r3, [r1, r0]
 8005978:	18c0      	addlt	r0, r0, r3
 800597a:	4770      	bx	lr

0800597c <_init>:
 800597c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800597e:	bf00      	nop
 8005980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005982:	bc08      	pop	{r3}
 8005984:	469e      	mov	lr, r3
 8005986:	4770      	bx	lr

08005988 <_fini>:
 8005988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800598a:	bf00      	nop
 800598c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800598e:	bc08      	pop	{r3}
 8005990:	469e      	mov	lr, r3
 8005992:	4770      	bx	lr
